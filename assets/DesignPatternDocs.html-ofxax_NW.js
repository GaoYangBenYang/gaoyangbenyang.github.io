const e=JSON.parse('{"key":"v-db0b6f0e","path":"/TheWayToProgress/DesignPattern/DesignPatternDocs.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","icon":"kaifasheji","date":"2023-07-26T08:07:17.000Z","pageInfo":["Author","Date","ReadingTime","Word","Category","Tag"],"article":false,"timeline":false,"category":["设计模式"],"tag":["设计模式"],"headerDepth":3,"description":"一、单例模式 简介 单例模式确保类只有一个实例，而且自行实例化并向整个系统提供这个实例。 在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。 特点 单例类只能有一个实例。 单例类必须自己创建自己的唯一实例。 单例类必须给所有其他对象提供这一实例。 实现方式 饿汉式（静态常量） 优点：在类装载的时候完成实例化 缺点：由于在类装载的时候完成实例化，不使用会造成内存浪费。","head":[["meta",{"property":"og:url","content":"https://gaoyangbenyang.github.io/TheWayToProgress/DesignPattern/DesignPatternDocs.html"}],["meta",{"property":"og:site_name","content":"Blogs & Notes"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"一、单例模式 简介 单例模式确保类只有一个实例，而且自行实例化并向整个系统提供这个实例。 在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。 特点 单例类只能有一个实例。 单例类必须自己创建自己的唯一实例。 单例类必须给所有其他对象提供这一实例。 实现方式 饿汉式（静态常量） 优点：在类装载的时候完成实例化 缺点：由于在类装载的时候完成实例化，不使用会造成内存浪费。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:47:02.000Z"}],["meta",{"property":"article:author","content":"高洋"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-07-26T08:07:17.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:47:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"设计模式\\",\\"description\\":\\"一、单例模式 简介 单例模式确保类只有一个实例，而且自行实例化并向整个系统提供这个实例。 在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。 特点 单例类只能有一个实例。 单例类必须自己创建自己的唯一实例。 单例类必须给所有其他对象提供这一实例。 实现方式 饿汉式（静态常量） 优点：在类装载的时候完成实例化 缺点：由于在类装载的时候完成实例化，不使用会造成内存浪费。\\"}"]]},"headers":[{"level":2,"title":"一、单例模式","slug":"一、单例模式","link":"#一、单例模式","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]}]},{"level":2,"title":"二、工厂模式","slug":"二、工厂模式","link":"#二、工厂模式","children":[]}],"git":{"createdTime":1703673194000,"updatedTime":1714290422000,"contributors":[{"name":"GaoYang","email":"GaoYangBenYang@outlook.com","commits":2},{"name":"gaoyang","email":"gaoyangbenyang@outlook.com","commits":1}]},"readingTime":{"minutes":3.13,"words":938},"filePathRelative":"TheWayToProgress/DesignPattern/DesignPatternDocs.md","localizedDate":"2023年7月26日","excerpt":"<h2> 一、单例模式</h2>\\n<h3> 简介</h3>\\n<p>单例模式确保类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\\n<p>在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。</p>\\n<h3> 特点</h3>\\n<ol>\\n<li>单例类只能有一个实例。</li>\\n<li>单例类必须自己创建自己的唯一实例。</li>\\n<li>单例类必须给所有其他对象提供这一实例。</li>\\n</ol>\\n<h3> 实现方式</h3>\\n<ol>\\n<li>饿汉式（静态常量）\\n<ul>\\n<li>优点：在类装载的时候完成实例化</li>\\n<li>缺点：由于在类装载的时候完成实例化，不使用会造成内存浪费。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
