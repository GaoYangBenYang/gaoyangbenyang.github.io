import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,a as e}from"./app-OC-itDNz.js";const c={},i=e(`<h2 id="docker简介" tabindex="-1"><a class="header-anchor" href="#docker简介" aria-hidden="true">#</a> Docker简介</h2><h2 id="docker镜像上传github" tabindex="-1"><a class="header-anchor" href="#docker镜像上传github" aria-hidden="true">#</a> *Docker镜像上传Github</h2><ol><li><p>登录 :</p><p>您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。</p><p>为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token function">docker</span> login ghcr.io <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>GithubName<span class="token punctuation">]</span> --password-stdin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>上传镜像:</p><p>1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:VERSION <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.使用 docker images 确定 docker 映像的名称和 ID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.使用 Docker 映像 ID 标记 docker 映像.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:VERSION
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.上传</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:VERSION
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>下载镜像:</p><p>您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:TAG_NAME 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,3),o=[i];function t(d,l){return s(),n("div",null,o)}const u=a(c,[["render",t],["__file","DockerDocs.html.vue"]]);export{u as default};
