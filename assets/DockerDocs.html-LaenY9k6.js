const e=JSON.parse('{"key":"v-45d6e7a0","path":"/TheWayToProgress/Container/DockerDocs.html","title":"Docker Docs","lang":"zh-CN","frontmatter":{"title":"Docker Docs","icon":"docker","date":"2023-03-25T00:00:00.000Z","category":["Docker"],"tag":["Docs"],"pageInfo":["Author","Date","ReadingTime","Word","Category","Tag"],"article":false,"timeline":false,"headerDepth":3,"description":"Docker简介 *Docker镜像上传Github 登录 : 您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。 为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。 echo [token] | docker login ghcr.io -u [GithubName] --password-stdin 上传镜像: 1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。 docker build -t ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION . 2.使用 docker images 确定 docker 映像的名称和 ID。 docker images 3.使用 Docker 映像 ID 标记 docker 映像. docker tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION 4.上传 docker push ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION 下载镜像: 您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。 docker pull ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:TAG_NAME","head":[["meta",{"property":"og:url","content":"https://gaoyangbenyang.github.io/TheWayToProgress/Container/DockerDocs.html"}],["meta",{"property":"og:site_name","content":"Blogs & Notes"}],["meta",{"property":"og:title","content":"Docker Docs"}],["meta",{"property":"og:description","content":"Docker简介 *Docker镜像上传Github 登录 : 您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。 为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。 echo [token] | docker login ghcr.io -u [GithubName] --password-stdin 上传镜像: 1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。 docker build -t ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION . 2.使用 docker images 确定 docker 映像的名称和 ID。 docker images 3.使用 Docker 映像 ID 标记 docker 映像. docker tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION 4.上传 docker push ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION 下载镜像: 您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。 docker pull ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:TAG_NAME"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-27T11:32:20.000Z"}],["meta",{"property":"article:author","content":"高洋"}],["meta",{"property":"article:tag","content":"Docs"}],["meta",{"property":"article:published_time","content":"2023-03-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-27T11:32:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Docker Docs\\",\\"description\\":\\"Docker简介 *Docker镜像上传Github 登录 : 您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。 为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。 echo [token] | docker login ghcr.io -u [GithubName] --password-stdin 上传镜像: 1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。 docker build -t ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION . 2.使用 docker images 确定 docker 映像的名称和 ID。 docker images 3.使用 Docker 映像 ID 标记 docker 映像. docker tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION 4.上传 docker push ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION 下载镜像: 您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。 docker pull ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:TAG_NAME\\"}"]]},"headers":[{"level":2,"title":"Docker简介","slug":"docker简介","link":"#docker简介","children":[]},{"level":2,"title":"*Docker镜像上传Github","slug":"docker镜像上传github","link":"#docker镜像上传github","children":[]}],"git":{"createdTime":1703673194000,"updatedTime":1703676740000,"contributors":[{"name":"GaoYang","email":"GaoYangBenYang@outlook.com","commits":2}]},"readingTime":{"minutes":1.33,"words":400},"filePathRelative":"TheWayToProgress/Container/DockerDocs.md","localizedDate":"2023年3月25日","excerpt":"<h2> Docker简介</h2>\\n<h2> *Docker镜像上传Github</h2>\\n<ol>\\n<li>\\n<p>登录 :</p>\\n<p>您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。</p>\\n<p>为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token builtin class-name\\">echo</span> <span class=\\"token punctuation\\">[</span>token<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">docker</span> login ghcr.io <span class=\\"token parameter variable\\">-u</span> <span class=\\"token punctuation\\">[</span>GithubName<span class=\\"token punctuation\\">]</span> --password-stdin\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>上传镜像:</p>\\n<p>1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> build <span class=\\"token parameter variable\\">-t</span> ghcr.io/OWNER/REPOSITORY<span class=\\"token punctuation\\">(</span>可不写<span class=\\"token punctuation\\">)</span>/IMAGE_NAME:VERSION <span class=\\"token builtin class-name\\">.</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>2.使用 docker images 确定 docker 映像的名称和 ID。</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> images\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>3.使用 Docker 映像 ID 标记 docker 映像.</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY<span class=\\"token punctuation\\">(</span>可不写<span class=\\"token punctuation\\">)</span>/IMAGE_NAME:VERSION\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>4.上传</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> push ghcr.io/OWNER/REPOSITORY<span class=\\"token punctuation\\">(</span>可不写<span class=\\"token punctuation\\">)</span>/IMAGE_NAME:VERSION\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>下载镜像:</p>\\n<p>您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> pull ghcr.io/OWNER/REPOSITORY<span class=\\"token punctuation\\">(</span>可不写<span class=\\"token punctuation\\">)</span>/IMAGE_NAME:TAG_NAME \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{e as data};
