import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as r,c as d,a as e,b as a,d as i,e as s}from"./app-pgbEvKOj.js";const o={},t=s(`<h2 id="_1-docker简介" tabindex="-1"><a class="header-anchor" href="#_1-docker简介" aria-hidden="true">#</a> 1. Docker简介</h2><p>Docker 是一种开源的应用容器引擎，它可以让开发者将应用程序和依赖打包到一个轻量级、可移植的容器中，然后在任何流行的 Linux 机器上运行，实现虚拟化。Docker<br> 的优点包括快速交付、响应式部署、高效的资源利用和跨平台的兼容性。本文将介绍 Docker 的基本使用和常用命令，帮助读者快速入门 Docker 的使用。</p><h2 id="安装-docker" tabindex="-1"><a class="header-anchor" href="#安装-docker" aria-hidden="true">#</a> 安装 Docker</h2><p>Docker 支持多种 Linux 发行版，如 CentOS、Ubuntu、Debian 等。安装 Docker 的步骤如下：</p><ul><li>卸载旧版本的 Docker，如果有的话，使用命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
docker-client <span class="token punctuation">\\</span>
docker-client-latest <span class="token punctuation">\\</span>
docker-common <span class="token punctuation">\\</span>
docker-latest <span class="token punctuation">\\</span>
docker-latest-logrotate <span class="token punctuation">\\</span>
docker-logrotate <span class="token punctuation">\\</span>
docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装需要的软件包，使用命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置镜像仓库，使用命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum-config-manager <span class="token punctuation">\\</span>
--add-repo <span class="token punctuation">\\</span>
https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装 Docker 引擎，使用命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>启动 Docker 服务，使用命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>验证 Docker 是否安装成功，使用命令：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果看到类似以下的输出，说明 Docker 已经成功安装并运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hello from Docker<span class="token operator">!</span>
This message shows that your installation appears to be working correctly.
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-的基本组成" tabindex="-1"><a class="header-anchor" href="#docker-的基本组成" aria-hidden="true">#</a> Docker 的基本组成</h2><p>Docker 的基本组成包括三个部分：镜像（Image）、容器（Container）和仓库（Repository）。</p><ul><li>镜像（Image）：Docker 镜像是一个只读的模板，用于创建容器。一个镜像可以包含一个基本的操作系统，以及运行应用程序所需的环境和文件。镜像可以从仓库中拉取，也可以通过<br> Dockerfile 来构建。</li><li>容器（Container）：Docker 容器是一个独立运行的应用程序的实例，它是从镜像创建出来的。容器可以启动、停止、删除、暂停等。每个容器都有自己的文件系统，互相隔离，不会影响其他容器。</li><li>仓库（Repository）：Docker 仓库是一个存放镜像的地方，可以是公有的，也可以是私有的。Docker Hub<br> 是一个公有的仓库，任何人都可以上传和下载镜像。也可以使用阿里云、腾讯云等提供的私有仓库服务，或者自己搭建私有仓库。</li></ul><h2 id="docker-的常用命令" tabindex="-1"><a class="header-anchor" href="#docker-的常用命令" aria-hidden="true">#</a> Docker 的常用命令</h2><p>Docker 的常用命令可以分为以下几类：</p><ul><li>容器生命周期管理：用于创建、启动、停止、删除等容器的操作，如 <code>docker run</code>、<code>docker start</code>、<code>docker stop</code>、<code>docker rm</code> 等。</li><li>容器操作：用于查看和管理容器的状态、信息、日志等，如 <code>docker ps</code>、<code>docker inspect</code>、<code>docker logs</code>、<code>docker exec</code> 等。</li><li>容器 rootfs 命令：用于操作容器的文件系统，如 <code>docker commit</code>、<code>docker cp</code>、<code>docker diff</code> 等。</li><li>镜像仓库：用于登录、拉取、推送、搜索等镜像的操作，如 <code>docker login</code>、<code>docker pull</code>、<code>docker push</code>、<code>docker search</code> 等。</li><li>镜像管理：用于查看、删除、构建、导入导出等镜像的操作，如 <code>docker images</code>、<code>docker rmi</code>、<code>docker build</code>、<code>docker import</code>、<code>docker export</code> 等。</li><li>网络管理：用于创建、删除、查看、连接等网络的操作，如 <code>docker network create</code>、<code>docker network rm</code>、<code>docker network ls</code>、<code>docker network connect</code><br> 等。</li><li>数据卷管理：用于创建、删除、查看、挂载等数据卷的操作，如 <code>docker volume create</code>、<code>docker volume rm</code>、<code>docker volume ls</code>、<code>docker volume inspect</code><br> 等。</li></ul><p>下面我们举一些常用命令的例子，详细的命令用法可以参考 <a href="%5E2%5E">Docker 命令大全</a>。</p><h3 id="容器生命周期管理" tabindex="-1"><a class="header-anchor" href="#容器生命周期管理" aria-hidden="true">#</a> 容器生命周期管理</h3><ul><li><code>docker run</code>：创建并启动一个容器，可以指定镜像、名称、端口映射、环境变量、挂载数据卷等参数。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycontainer <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYVAR</span><span class="token operator">=</span>hello <span class="token parameter variable">-v</span> /data:/data myimage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会从 myimage 镜像创建一个名为 mycontainer 的容器，以交互模式运行，将容器的 80 端口映射到主机的 8080 端口，设置一个环境变量 MYVAR 的值为<br> hello，将主机的 /data 目录挂载到容器的 /data 目录。</p><ul><li><code>docker start</code>：启动一个已经创建的容器，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会启动名为 mycontainer 的容器。</p><ul><li><code>docker stop</code>：停止一个正在运行的容器，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会停止名为 mycontainer 的容器。</p><ul><li><code>docker restart</code>：重启一个容器，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会重启名为 mycontainer 的容器。</p><ul><li><code>docker kill</code>：强制停止一个容器，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会强制停止名为 mycontainer 的容器。</p><ul><li><code>docker rm</code>：删除一个已经停止的容器，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会删除名为 mycontainer 的容器。</p><ul><li><code>docker pause</code>：暂停一个容器的所有进程，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pause mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会暂停名为 mycontainer 的容器的所有进程。</p><ul><li><code>docker unpause</code>：恢复一个暂停的容器的所有进程，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> unpause mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会恢复名为 mycontainer 的容器的所有进程。</p><ul><li><code>docker create</code>：创建一个容器，但不启动它，可以指定镜像、名称、端口映射、环境变量、挂载数据卷等参数。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> create <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycontainer <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYVAR</span><span class="token operator">=</span>hello <span class="token parameter variable">-v</span> /data:/data myimage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会从 myimage 镜像创建一个名为 mycontainer 的容器，以交互模式运行，将容器的 80 端口映射到主机的 8080 端口，设置一个环境变量 MYVAR 的值为<br> hello，将主机的 /data 目录挂载到容器的 /data 目录。</p><ul><li><code>docker exec</code>：在一个运行的容器中执行一个命令，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mycontainer <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会在名为 mycontainer 的容器中执行 bash 命令，进入交互模式。</p><h3 id="容器操作" tabindex="-1"><a class="header-anchor" href="#容器操作" aria-hidden="true">#</a> 容器操作</h3><ul><li><code>docker ps</code>：查看当前运行的容器，可以指定 -a 参数查看所有的容器，包括已经停止的。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示所有的容器的 ID、名称、状态、端口映射等信息。</p><ul><li><code>docker inspect</code>：查看一个容器的详细信息，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mycontainer 的容器的配置、网络、挂载、日志等信息。</p><ul><li><code>docker logs</code>：查看一个容器的日志，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mycontainer 的容器的标准输出和标准错误的内容。</p><ul><li><code>docker top</code>：查看一个容器的进程信息，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mycontainer 的容器的进程 ID、用户、命令等信息。</p><ul><li><code>docker stats</code>：查看一个或多个容器的资源使用情况，可以指定容器的 ID 或者名称，或者使用 -a 参数查看所有的容器。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stats mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mycontainer 的容器的 CPU、内存、网络、磁盘等资源的使用情况。</p><ul><li><code>docker port</code>：查看一个容器的端口映射情况，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> port mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mycontainer 的容器的端口映射情况，如 80/tcp -&gt; 0.0.0.0:8080。</p><ul><li><code>docker attach</code>：连接到一个正在运行的容器的标准输入、输出和错误流，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> attach mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会连接到名为 mycontainer 的容器的标准输入、输出和错误流，可以与容器进行交互。</p><h3 id="容器-rootfs-命令" tabindex="-1"><a class="header-anchor" href="#容器-rootfs-命令" aria-hidden="true">#</a> 容器 rootfs 命令</h3><ul><li><code>docker commit</code>：将一个容器的修改保存为一个新的镜像，可以指定容器的 ID 或者名称，以及新镜像的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit mycontainer mynewimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将名为 mycontainer 的容器的修改保存为一个名为 mynewimage 的镜像，标签为 latest。</p><ul><li><code>docker cp</code>：将一个容器的文件或目录复制到主机，或者将主机的文件或目录复制到容器，可以指定容器的 ID 或者名称，以及源和目标的路径。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> mycontainer:/etc/hosts /tmp/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将名为 mycontainer 的容器的 /etc/hosts 文件复制到主机的 /tmp/hosts 目录。</p><ul><li><code>docker diff</code>：查看一个容器的文件系统的变化，可以指定容器的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">diff</span> mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mycontainer 的容器的文件系统的变化，如 A 表示新增，D 表示删除，C 表示修改。</p><h3 id="镜像仓库" tabindex="-1"><a class="header-anchor" href="#镜像仓库" aria-hidden="true">#</a> 镜像仓库</h3><ul><li><code>docker login</code>：登录到一个镜像仓库，可以指定仓库的地址、用户名和密码。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login registry.example.com <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span> password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,91),p={href:"http://registry.example.com",target:"_blank",rel:"noopener noreferrer"},u=s(`<ul><li><code>docker logout</code>：登出一个镜像仓库，可以指定仓库的地址。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">logout</span> registry.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),m={href:"http://registry.example.com",target:"_blank",rel:"noopener noreferrer"},v=s(`<ul><li><code>docker pull</code>：从一个镜像仓库拉取一个镜像，可以指定仓库的地址、镜像的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry.example.com/myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),b={href:"http://registry.example.com",target:"_blank",rel:"noopener noreferrer"},k=s(`<ul><li><code>docker push</code>：将一个镜像推送到一个镜像仓库，可以指定仓库的地址、镜像的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push registry.example.com/myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),h={href:"http://registry.example.com",target:"_blank",rel:"noopener noreferrer"},g=s(`<ul><li><code>docker search</code>：在一个镜像仓库中搜索一个镜像，可以指定仓库的地址、镜像的名称和过滤条件。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search registry.example.com/myimage <span class="token parameter variable">--filter</span> <span class="token assign-left variable">stars</span><span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),f={href:"http://registry.example.com",target:"_blank",rel:"noopener noreferrer"},x=s(`<h3 id="镜像管理" tabindex="-1"><a class="header-anchor" href="#镜像管理" aria-hidden="true">#</a> 镜像管理</h3><ul><li><code>docker images</code>：查看本地的镜像，可以指定镜像的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示本地的一个名为 myimage 的镜像，标签为 latest。</p><ul><li><code>docker rmi</code>：删除本地的一个或多个镜像，可以指定镜像的 ID 或者名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会删除本地的一个名为 myimage 的镜像，标签为 latest。</p><ul><li><code>docker build</code>：根据 Dockerfile 构建一个镜像，可以指定 Dockerfile 的路径和新镜像的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myimage:latest <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会根据当前目录下的 Dockerfile 构建一个名为 myimage 的镜像，标签为 latest。</p><ul><li><code>docker history</code>：查看一个镜像的历史记录，可以指定镜像的 ID 或者名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">history</span> myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示一个名为 myimage 的镜像的历史记录，包括每一层的 ID、大小、创建时间、命令等信息。</p><ul><li><code>docker tag</code>：给一个镜像添加一个新的标签，可以指定镜像的 ID 或者名称和标签，以及新的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag myimage:latest myimage:v1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会给一个名为 myimage 的镜像，标签为 latest，添加一个新的标签 v1.0。</p><ul><li><code>docker save</code>：将一个镜像保存为一个 tar 文件，可以指定镜像的 ID 或者名称和标签，以及文件的路径。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save myimage:latest <span class="token parameter variable">-o</span> myimage.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将一个名为 myimage 的镜像，标签为 latest，保存为一个名为 myimage.tar 的文件。</p><ul><li><code>docker load</code>：从一个 tar 文件加载一个镜像，可以指定文件的路径。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> myimage.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会从一个名为 myimage.tar 的文件加载一个镜像。</p><ul><li><code>docker import</code>：从一个文件或 URL 导入一个镜像，可以指定文件或 URL 的路径，以及新镜像的名称和标签。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">import</span> http://example.com/myimage.tar myimage:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),y={href:"http://example.com/myimage.tar",target:"_blank",rel:"noopener noreferrer"},_=s(`<p>Docker 的常用命令（续）</p><p>在上一篇文章中，我们介绍了 Docker 的基本概念和容器生命周期管理、容器操作、容器 rootfs 命令、镜像仓库、镜像管理等常用命令。本文将继续介绍 Docker<br> 的其他常用命令，包括网络管理和数据卷管理。</p><h3 id="网络管理" tabindex="-1"><a class="header-anchor" href="#网络管理" aria-hidden="true">#</a> 网络管理</h3><ul><li><code>docker network create</code>：创建一个自定义的网络，可以指定网络的名称、驱动、子网等参数。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">172.18</span>.0.0/16 mynetwork
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会创建一个名为 mynetwork 的网络，使用 bridge 驱动，子网为 172.18.0.0/16。</p><ul><li><code>docker network rm</code>：删除一个网络，可以指定网络的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">rm</span> mynetwork
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会删除名为 mynetwork 的网络。</p><ul><li><code>docker network ls</code>：查看本地的网络，可以指定 -f 参数过滤网络。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">driver</span><span class="token operator">=</span>bridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示本地的所有使用 bridge 驱动的网络。</p><ul><li><code>docker network inspect</code>：查看一个网络的详细信息，可以指定网络的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect mynetwork
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 mynetwork 的网络的配置、连接的容器等信息。</p><ul><li><code>docker network connect</code>：将一个容器连接到一个网络，可以指定容器的 ID 或者名称，以及网络的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network connect mynetwork mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将名为 mycontainer 的容器连接到名为 mynetwork 的网络。</p><ul><li><code>docker network disconnect</code>：将一个容器从一个网络断开，可以指定容器的 ID 或者名称，以及网络的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network disconnect mynetwork mycontainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将名为 mycontainer 的容器从名为 mynetwork 的网络断开。</p><h3 id="数据卷管理" tabindex="-1"><a class="header-anchor" href="#数据卷管理" aria-hidden="true">#</a> 数据卷管理</h3><ul><li><code>docker volume create</code>：创建一个数据卷，可以指定数据卷的名称、驱动、标签等参数。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create <span class="token parameter variable">--name</span> myvolume <span class="token parameter variable">--driver</span> <span class="token builtin class-name">local</span> <span class="token parameter variable">--label</span> <span class="token assign-left variable">backup</span><span class="token operator">=</span>yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会创建一个名为 myvolume 的数据卷，使用 local 驱动，标签为 backup=yes。</p><ul><li><code>docker volume rm</code>：删除一个数据卷，可以指定数据卷的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">rm</span> myvolume
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会删除名为 myvolume 的数据卷。</p><ul><li><code>docker volume ls</code>：查看本地的数据卷，可以指定 -f 参数过滤数据卷。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">driver</span><span class="token operator">=</span>local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示本地的所有使用 local 驱动的数据卷。</p><ul><li><code>docker volume inspect</code>：查看一个数据卷的详细信息，可以指定数据卷的 ID 或者名称。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect myvolume
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示名为 myvolume 的数据卷的配置、挂载点、标签等信息。</p><ul><li><code>docker volume prune</code>：删除所有未使用的数据卷，可以指定 -f 参数强制删除。例如：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume prune <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会删除所有未使用的数据卷，不需要确认。</p><h2 id="docker-开启远程tcp连接" tabindex="-1"><a class="header-anchor" href="#docker-开启远程tcp连接" aria-hidden="true">#</a> * Docker 开启远程TCP连接</h2><h3 id="_1-修改docker-service配置文件" tabindex="-1"><a class="header-anchor" href="#_1-修改docker-service配置文件" aria-hidden="true">#</a> *.1 修改docker.service配置文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /lib/systemd/system/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-修改execstart-xxxxxxxxx配置" tabindex="-1"><a class="header-anchor" href="#_2-修改execstart-xxxxxxxxx配置" aria-hidden="true">#</a> *.2 修改ExecStart=xxxxxxxxx配置</h3><blockquote><p>在-H fd:// 后添加-H tcp://0.0.0.0:2375，然后保存退出0.0.0.0 是允许所有IP可访问，2375是默认端口，不是固定的，都可以按需修改</p></blockquote><h3 id="_3-重载配置" tabindex="-1"><a class="header-anchor" href="#_3-重载配置" aria-hidden="true">#</a> *.3 重载配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload          <span class="token comment"># 重新加载守护进程配置</span>
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>			  <span class="token comment"># 重启 docker 服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-连接wsl环境下的docker" tabindex="-1"><a class="header-anchor" href="#_4-连接wsl环境下的docker" aria-hidden="true">#</a> *.4 连接WSL环境下的Docker</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ip addr看看wsl ip地址</span>
<span class="token comment"># 通过 wsl ip地址：2375进行tcp远程连接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker镜像上传github" tabindex="-1"><a class="header-anchor" href="#docker镜像上传github" aria-hidden="true">#</a> * Docker镜像上传Github</h2><ol><li><p>登录 :</p><p>您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。</p><p>为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token function">docker</span> login ghcr.io <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>GithubName<span class="token punctuation">]</span> --password-stdin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>上传镜像:</p><p>1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME<br> 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:VERSION <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.使用 docker images 确定 docker 映像的名称和 ID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.使用 Docker 映像 ID 标记 docker 映像.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:VERSION
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.上传</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:VERSION
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>下载镜像:</p><p>您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY<br> 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ghcr.io/OWNER/REPOSITORY<span class="token punctuation">(</span>可不写<span class="token punctuation">)</span>/IMAGE_NAME:TAG_NAME 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="docker-配置本地开发环境" tabindex="-1"><a class="header-anchor" href="#docker-配置本地开发环境" aria-hidden="true">#</a> * Docker 配置本地开发环境</h2><h3 id="_1-mysql" tabindex="-1"><a class="header-anchor" href="#_1-mysql" aria-hidden="true">#</a> *.1 MySQL</h3><ol><li>拉取官方镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql       <span class="token comment"># 拉取最新版mysql镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>创建主机挂载文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录 -p 递归创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/gaoyang/docker/mysql/<span class="token punctuation">{</span>conf,logs,data<span class="token punctuation">}</span>
<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> /home/gaoyang/docker/mysql/conf/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token comment">#指定端口映射，格式为：主机(宿主)端口:容器端口</span>
<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
<span class="token comment">#为容器指定一个名称</span>
<span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
<span class="token comment">#设置环境变量 root账户密码</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token comment">#将配置文件夹挂载到主机</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/mysql/conf/my.cnf:/etc/mysql/my.cnf <span class="token punctuation">\\</span>
<span class="token comment">#将日志文件夹挂载到主机</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/mysql/logs:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token comment">#将mysql储存文件夹挂载到主机</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token comment">#后台运行容器，并返回容器ID</span>
<span class="token parameter variable">-d</span> mysql:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>检查容器是否正确运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-redis" tabindex="-1"><a class="header-anchor" href="#_2-redis" aria-hidden="true">#</a> *.2 Redis</h3><ol><li>拉取官方镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis       <span class="token comment"># 拉取最新版redis镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>创建主机挂载文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录 -p 递归创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/gaoyang/docker/redis/<span class="token punctuation">{</span>conf,data<span class="token punctuation">}</span>
<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> /home/gaoyang/docker/redis/conf/redis.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> redis <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/redis/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/redis/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> redis:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>检查容器是否正确运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-rabbitmq" tabindex="-1"><a class="header-anchor" href="#_3-rabbitmq" aria-hidden="true">#</a> *.3 RabbitMQ</h3><ol><li>拉取官方镜像(包含web控制界面的)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull rabbitmq:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>创建主机挂载文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录 -p 递归创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/gaoyang/docker/rabbitmq/<span class="token punctuation">{</span>data,conf,log<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>修改log目录权限</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /home/gaoyang/docker/rabbitmq/log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>创建容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> rabbitmq <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>admin <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>admin <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/rabbitmq/data:/var/lib/rabbitmq <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/rabbitmq/conf:/etc/rabbitmq <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/rabbitmq/log:/var/log/rabbitmq <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> rabbitmq:3.9.29-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>开启web控制台</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span>
rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>检查容器是否正确运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-nacos" tabindex="-1"><a class="header-anchor" href="#_4-nacos" aria-hidden="true">#</a> *.4 Nacos</h3><ol><li>拉取官方镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nacos/nacos-server       <span class="token comment">#拉取最新版镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>创建主机挂载文件（开发环境可不挂载）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#创建目录 -p 递归创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/gaoyang/docker/nacos/<span class="token punctuation">{</span>conf,logs<span class="token punctuation">}</span>
<span class="token comment">#创建文件</span>
<span class="token function">touch</span> /home/gaoyang/docker/nacos/conf/application.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建容器,2.x版本后增加了 grpc 通信并且增加nacos的集群端口上下偏移1000，创建容器时除了 8848 还需要把 9848 也暴露出来</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> nacos <span class="token punctuation">\\</span>
<span class="token comment">#Jraft请求服务端端口，用于处理服务端间的Raft相关请求</span>
<span class="token comment">#-p 7848:7848</span>
<span class="token comment">#主端口，客户端、控制台及OpenAPI所使用的HTTP端口</span>
<span class="token parameter variable">-p</span> <span class="token number">8848</span>:8848 <span class="token punctuation">\\</span>
<span class="token comment">#客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求</span>
<span class="token parameter variable">-p</span> <span class="token number">9848</span>:9848 <span class="token punctuation">\\</span>
<span class="token comment">#服务端gRPC请求服务端端口，用于服务间同步等</span>
<span class="token comment">#-p 9849:9849</span>
<span class="token comment">#9849 和 7848 端口为服务端之间的通信端口，请勿暴露到外部网络环境和客户端测</span>
<span class="token comment">#-e SPRING_DATASOURCE_PLATFORM=mysql </span>
<span class="token comment">#-e MYSQL_SERVICE_HOST=localhost </span>
<span class="token comment">#-e MYSQL_SERVICE_PORT=3306 </span>
<span class="token comment">#-e MYSQL_SERVICE_USER=root </span>
<span class="token comment">#-e MYSQL_SERVICE_PASSWORD=123456 </span>
<span class="token comment">#-e MYSQL_SERVICE_DB_NAME=nacos </span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">JVM_XMS</span><span class="token operator">=</span>256m <span class="token punctuation">\\</span>  <span class="token comment">#jvm启动时分配的内存</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">JVM_XMX</span><span class="token operator">=</span>256m <span class="token punctuation">\\</span>  <span class="token comment">#为jvm运行过程中分配的最大内存</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token punctuation">\\</span>  <span class="token comment">#单机模式</span>
<span class="token comment">#一下四个环境变量使用鉴权必须都配置</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_CACHE_ENABLE</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>  <span class="token comment">#开启权限系统</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_IDENTITY_KEY</span><span class="token operator">=</span>admin <span class="token punctuation">\\</span>    <span class="token comment">#不配置nacos报错  配置了不生效 账号还是nacos(真离谱)</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_IDENTITY_VALUE</span><span class="token operator">=</span>admin <span class="token punctuation">\\</span>  <span class="token comment">#不配置nacos报错  配置了不生效 密码还是nacos(真离谱)</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_TOKEN</span><span class="token operator">=</span>SecretKey012345678901234567890123456789012345678901234567890123456789 <span class="token punctuation">\\</span>
<span class="token comment">#-v /home/gaoyang/docker/nacos/logs:/home/nacos/logs</span>
<span class="token parameter variable">-d</span> nacos/nacos-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nacos <span class="token parameter variable">-p</span> <span class="token number">8848</span>:8848 <span class="token parameter variable">-p</span> <span class="token number">9848</span>:9848 <span class="token parameter variable">-e</span> <span class="token assign-left variable">JVM_XMS</span><span class="token operator">=</span>256m <span class="token parameter variable">-e</span> <span class="token assign-left variable">JVM_XMX</span><span class="token operator">=</span>256m <span class="token parameter variable">-e</span> <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_CACHE_ENABLE</span><span class="token operator">=</span>true <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_IDENTITY_KEY</span><span class="token operator">=</span>admin <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_IDENTITY_VALUE</span><span class="token operator">=</span>admin <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_TOKEN</span><span class="token operator">=</span>SecretKey012345678901234567890123456789012345678901234567890123456789 <span class="token parameter variable">-d</span> nacos/nacos-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>进入nacos容器，进入conf目录</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nacos <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> conf/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>修改配置文件</li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">nacos.core.auth.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>重启nacos容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart nacos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>检查容器是否正确运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-sentinel" tabindex="-1"><a class="header-anchor" href="#_5-sentinel" aria-hidden="true">#</a> *.5 Sentinel</h3><ol><li>拉取官方镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull bladex/sentinel-dashboard <span class="token comment">#拉取最新版镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>创建容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> Sentinel <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8719</span>:8719 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8858</span>:8858 <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> bladex/sentinel-dashboard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>检查容器是否正确运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-elasticsearch-有问题-待处理" tabindex="-1"><a class="header-anchor" href="#_6-elasticsearch-有问题-待处理" aria-hidden="true">#</a> *.6 Elasticsearch(有问题，待处理)</h3><ol><li><p>Elasticsearch简介</p><p>Elasticsearch是位于Elastic Stack核心的分布式搜索和分析引擎。</p><p>Logstash和Beats有助于收集、聚合和丰富数据，并将其存储在Elasticsearch中。</p><p>Kibana使您能够交互式地探索、可视化和共享对数据的见解，并管理和监视堆栈。</p><p>Elasticsearch是索引、搜索和分析魔术发生的地方。</p><p>Elasticsearch为所有类型的数据提供近乎实时的搜索和分析。无论您是结构化还是非结构化文本、数字数据还是地理空间数据，Elasticsearch都可以以一种支持快速搜索的方式有效地存储和索引它。您可以远远超出简单的数据检索和汇总信息，从而发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使您的部署能够无缝地随之增长。</p><p>虽然不是每个问题都是搜索问题，但Elasticsearch提供了在各种用例中处理数据的速度和灵活性:</p><ul><li>在应用程序或网站中添加搜索框</li><li>存储和分析日志、度量和安全事件数据</li><li>使用机器学习实时自动模拟数据的行为</li><li>使用Elasticsearch作为矢量数据库来创建、存储和搜索矢量嵌入</li><li>使用Elasticsearch作为存储引擎自动化业务工作流</li><li>使用Elasticsearch作为地理信息系统(GIS)管理、整合和分析空间信息</li><li>使用Elasticsearch作为生物信息学研究工具存储和处理遗传数据</li></ul><p>我们不断地被人们使用搜索的新奇方式所震撼。但是，无论您的用例与其中一个类似，还是您正在使用Elasticsearch来解决新问题，您在Elasticsearch中处理数据，文档和索引的方式都是相同的</p></li><li><p>单节点Elasticsearch集群安装</p><ul><li>创建网络<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#保证Kibana容器和Elasticsearch容器在同一网络中实现互联</span>
<span class="token function">docker</span> network create elastic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>下载官方镜像<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull docker.elastic.co/elasticsearch/elasticsearch:8.11.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>创建挂载文件<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录 -p 递归创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/gaoyang/docker/elasticsearch/<span class="token punctuation">{</span>data,plugins<span class="token punctuation">}</span>
<span class="token comment">#修改权限</span>
<span class="token function">chmod</span> <span class="token number">777</span> /home/gaoyang/docker/elasticsearch/data
<span class="token function">chmod</span> <span class="token number">777</span> /home/gaoyang/docker/elasticsearch/plugins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>启动容器，复制生成的密码和注册令牌，首次启动 Elasticsearch 时，生成的用户密码和 Kibana 注册令牌将输出到终端，记得保存。<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run 
<span class="token parameter variable">--name</span> elasticsearch 
<span class="token parameter variable">--net</span> elastic 
<span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 
<span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 
<span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> 
<span class="token parameter variable">-e</span> <span class="token string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span>
<span class="token parameter variable">-v</span> /home/gaoyang/docker/elasticsearch/data:/usr/share/elasticsearch/data
<span class="token parameter variable">-v</span> /home/gaoyang/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins
<span class="token parameter variable">-d</span> docker.elastic.co/elasticsearch/elasticsearch:8.11.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>查看容器是否正常运行<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>Kibana(Elastic的用户界面)安装</p><ul><li>下载官方镜像<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull docker.elastic.co/kibana/kibana:8.11.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>创建挂载文件<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录 -p 递归创建</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/gaoyang/docker/kibana/<span class="token punctuation">{</span>data,config<span class="token punctuation">}</span>
<span class="token comment">#修改权限</span>
<span class="token function">chmod</span> <span class="token number">777</span> /home/gaoyang/docker/kibana/data
<span class="token function">chmod</span> <span class="token number">777</span> /home/gaoyang/docker/kibana/config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>启动容器<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run
<span class="token parameter variable">--name</span> kibana 
<span class="token parameter variable">--network</span> elastic
<span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 
<span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://elasticsearch:9200
<span class="token parameter variable">-v</span> /home/gaoyang/docker/kibana/data:/usr/share/kibana/data
<span class="token parameter variable">-v</span> /home/gaoyang/docker/kibana/plugins:/usr/share/kibana/plugins
<span class="token parameter variable">-d</span> kibana:8.6.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>查看容器是否正常运行<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>生成登录kibana的令牌(有问题 第一次能出现 之后就报错)</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> elasticsearch /bin/bash
<span class="token comment"># 关闭安全验证</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;xpack.security.enabled: false&#39;</span> <span class="token operator">&gt;&gt;</span> config/elasticsearch.yml
<span class="token comment">## 开启安全注册</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;xpack.security.enrollment.enabled: true&#39;</span> <span class="token operator">&gt;&gt;</span> config/elasticsearch.yml
<span class="token comment">## 开启transport SSL验证</span>
<span class="token comment">#echo &#39;xpack.security.transport.ssl.enabled: true&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">#echo &#39;xpack.security.transport.ssl.verification_mode: certificate&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">#echo &#39;xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">#echo &#39;xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">## 开启HTTP SSL验证</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;xpack.security.http.ssl.enabled: true&#39;</span> <span class="token operator">&gt;&gt;</span> config/elasticsearch.yml
<span class="token comment">#echo &#39;xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">#echo &#39;xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">#echo &#39;xpack.security.http.ssl.client_authentication: optional&#39; &gt;&gt; config/elasticsearch.yml</span>
<span class="token comment">## 开启PKI 身份验证</span>
<span class="token comment">#echo &#39;xpack.security.authc.realms.pki.pki1.order: 1&#39; &gt;&gt; config/elasticsearch.yml</span>

<span class="token comment"># 生成令牌 令牌有30分钟有效期</span>
bin/elasticsearch-create-enrollment-token <span class="token parameter variable">--scope</span> kibana
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.kibana验证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入kibana容器中</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kibana /bin/bash
<span class="token comment"># 执行生成验证码命令</span>
bin/kibana-verification-code 
<span class="token comment"># 获得的验证码输入之前页面中</span>
Your verification code is: <span class="token number">788</span> <span class="token number">373</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>重置密码 登录elasticsearch</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入elastic容器中</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> elasticsearch /bin/bash
<span class="token comment"># 重置密码</span>
bin/elasticsearch-reset-password <span class="token parameter variable">--username</span> elastic <span class="token parameter variable">-i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,111);function E(D,I){const n=c("ExternalLinkIcon");return r(),d("div",null,[t,e("p",null,[a("这个命令会登录到 "),e("a",p,[a("registry.example.com"),i(n)]),a(" 这个镜像仓库，用户名为 username，密码为 password。")]),u,e("p",null,[a("这个命令会登出 "),e("a",m,[a("registry.example.com"),i(n)]),a(" 这个镜像仓库。")]),v,e("p",null,[a("这个命令会从 "),e("a",b,[a("registry.example.com"),i(n)]),a(" 这个镜像仓库拉取一个名为 myimage 的镜像，标签为 latest。")]),k,e("p",null,[a("这个命令会将一个名为 myimage 的镜像，标签为 latest，推送到 "),e("a",h,[a("registry.example.com"),i(n)]),a(" 这个镜像仓库。")]),g,e("p",null,[a("这个命令会在 "),e("a",f,[a("registry.example.com"),i(n)]),a(" 这个镜像仓库中搜索一个名为 myimage 的镜像，过滤条件为星级大于等于 3。")]),x,e("p",null,[a("这个命令会从 "),e("a",y,[a("http://example.com/myimage.tar"),i(n)]),a(" 这个 URL 导入一个镜像，名为 myimage")]),_])}const R=l(o,[["render",E],["__file","DockerDocs.html.vue"]]);export{R as default};
