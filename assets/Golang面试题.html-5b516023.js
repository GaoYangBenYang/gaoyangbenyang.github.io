const l=JSON.parse(`{"key":"v-736bdbe5","path":"/08InterviewQuestion/01Language/Golang%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Golang常⻅面试题解析","lang":"zh-CN","frontmatter":{"title":"Golang常⻅面试题解析","date":"2023-05-15T00:00:00.000Z","icon":"golang","category":["Golang"],"tag":["面试题"],"pageInfo":["Author","Date","ReadingTime","Word","Category","Tag"],"description":"0、go与其它语言 0、什么是面向对象 在了解 Go 语言是不是面向对象（简称：OOP） 之前，我们必须先知道 OOP 是啥，得先给他 “下定义” 根据 Wikipedia 的定义，我们梳理出 OOP 的几个基本认知： 面向对象编程（OOP）是一种基于 “对象” 概念的编程范式，它可以包含数据和代码：数据以字段的形式存在（通常称为属性或属性），代码以程序的形式存在（通常称为方法）。 对象自己的程序可以访问并经常修改自己的数据字段。 对象经常被定义为类的一个实例。 对象利用属性和方法的私有/受保护/公共可见性，对象的内部状态受到保护，不受外界影响（被封装）。","head":[["meta",{"property":"og:url","content":"https://gaoyangbenyang.github.io/08InterviewQuestion/01Language/Golang%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"GaoYang's blog"}],["meta",{"property":"og:title","content":"Golang常⻅面试题解析"}],["meta",{"property":"og:description","content":"0、go与其它语言 0、什么是面向对象 在了解 Go 语言是不是面向对象（简称：OOP） 之前，我们必须先知道 OOP 是啥，得先给他 “下定义” 根据 Wikipedia 的定义，我们梳理出 OOP 的几个基本认知： 面向对象编程（OOP）是一种基于 “对象” 概念的编程范式，它可以包含数据和代码：数据以字段的形式存在（通常称为属性或属性），代码以程序的形式存在（通常称为方法）。 对象自己的程序可以访问并经常修改自己的数据字段。 对象经常被定义为类的一个实例。 对象利用属性和方法的私有/受保护/公共可见性，对象的内部状态受到保护，不受外界影响（被封装）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-22T03:53:42.000Z"}],["meta",{"property":"article:author","content":"GaoYang"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2023-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-22T03:53:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang常⻅面试题解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-22T03:53:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GaoYang\\",\\"url\\":\\"https://github.com/GaoYangBenYang\\",\\"email\\":\\"GaoYangBenYang@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"0、go与其它语言","slug":"_0、go与其它语言","link":"#_0、go与其它语言","children":[{"level":3,"title":"0、什么是面向对象","slug":"_0、什么是面向对象","link":"#_0、什么是面向对象","children":[]},{"level":3,"title":"1、Go语言和Java有什么区别?","slug":"_1、go语言和java有什么区别","link":"#_1、go语言和java有什么区别","children":[]},{"level":3,"title":"2、Go 是面向对象的语言吗？","slug":"_2、go-是面向对象的语言吗","link":"#_2、go-是面向对象的语言吗","children":[]},{"level":3,"title":"3、Go 实现面向对象编程","slug":"_3、go-实现面向对象编程","link":"#_3、go-实现面向对象编程","children":[]},{"level":3,"title":"4、go语言和python的区别：","slug":"_4、go语言和python的区别","link":"#_4、go语言和python的区别","children":[]},{"level":3,"title":"5、go 与 node.js","slug":"_5、go-与-node-js","link":"#_5、go-与-node-js","children":[]}]},{"level":2,"title":"一、基础部分","slug":"一、基础部分","link":"#一、基础部分","children":[{"level":3,"title":"0、为什么选择golang","slug":"_0、为什么选择golang","link":"#_0、为什么选择golang","children":[]},{"level":3,"title":"golang 缺点","slug":"golang-缺点","link":"#golang-缺点","children":[]},{"level":3,"title":"1、golang 中 make 和 new 的区别？（基本必问）","slug":"_1、golang-中-make-和-new-的区别-基本必问","link":"#_1、golang-中-make-和-new-的区别-基本必问","children":[]},{"level":3,"title":"2、IO多路复用","slug":"_2、io多路复用","link":"#_2、io多路复用","children":[]},{"level":3,"title":"3、for range 的时候它的地址会发生变化么？","slug":"_3、for-range-的时候它的地址会发生变化么","link":"#_3、for-range-的时候它的地址会发生变化么","children":[]},{"level":3,"title":"4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？","slug":"_4、go-defer-多个-defer-的顺序-defer-在什么时机会修改返回值","link":"#_4、go-defer-多个-defer-的顺序-defer-在什么时机会修改返回值","children":[]},{"level":3,"title":"5、uint 类型溢出问题","slug":"_5、uint-类型溢出问题","link":"#_5、uint-类型溢出问题","children":[]},{"level":3,"title":"6、能介绍下 rune 类型吗？","slug":"_6、能介绍下-rune-类型吗","link":"#_6、能介绍下-rune-类型吗","children":[]},{"level":3,"title":"7、 golang 中解析 tag 是怎么实现的？反射原理是什么？(中高级肯定会问，比较难，需要自己多去总结)","slug":"_7、-golang-中解析-tag-是怎么实现的-反射原理是什么-中高级肯定会问-比较难-需要自己多去总结","link":"#_7、-golang-中解析-tag-是怎么实现的-反射原理是什么-中高级肯定会问-比较难-需要自己多去总结","children":[]},{"level":3,"title":"8、调用函数传入结构体时，应该传值还是指针？ （Golang 都是传值）","slug":"_8、调用函数传入结构体时-应该传值还是指针-golang-都是传值","link":"#_8、调用函数传入结构体时-应该传值还是指针-golang-都是传值","children":[]},{"level":3,"title":"9、goroutine什么情况下会阻塞","slug":"_9、goroutine什么情况下会阻塞","link":"#_9、goroutine什么情况下会阻塞","children":[]},{"level":3,"title":"10、讲讲 Go 的 select 底层数据结构和一些特性？（难点，没有项目经常可能说不清，面试一般会问你项目中怎么使用select）","slug":"_10、讲讲-go-的-select-底层数据结构和一些特性-难点-没有项目经常可能说不清-面试一般会问你项目中怎么使用select","link":"#_10、讲讲-go-的-select-底层数据结构和一些特性-难点-没有项目经常可能说不清-面试一般会问你项目中怎么使用select","children":[]},{"level":3,"title":"11、讲讲 Go 的 defer 底层数据结构和一些特性？","slug":"_11、讲讲-go-的-defer-底层数据结构和一些特性","link":"#_11、讲讲-go-的-defer-底层数据结构和一些特性","children":[]},{"level":3,"title":"12、单引号，双引号，反引号的区别？","slug":"_12、单引号-双引号-反引号的区别","link":"#_12、单引号-双引号-反引号的区别","children":[]},{"level":3,"title":"13、go出现panic的场景","slug":"_13、go出现panic的场景","link":"#_13、go出现panic的场景","children":[]},{"level":3,"title":"https://www.cnblogs.com/paulwhw/p/15585467.html","slug":"https-www-cnblogs-com-paulwhw-p-15585467-html","link":"#https-www-cnblogs-com-paulwhw-p-15585467-html","children":[]},{"level":3,"title":"14、go是否支持while循环，如何实现这种机制","slug":"_14、go是否支持while循环-如何实现这种机制","link":"#_14、go是否支持while循环-如何实现这种机制","children":[]},{"level":3,"title":"15、go里面如何实现set？","slug":"_15、go里面如何实现set","link":"#_15、go里面如何实现set","children":[]},{"level":3,"title":"16、go如何实现类似于java当中的继承机制？","slug":"_16、go如何实现类似于java当中的继承机制","link":"#_16、go如何实现类似于java当中的继承机制","children":[]},{"level":3,"title":"17、怎么去复用一个接口的方法？","slug":"_17、怎么去复用一个接口的方法","link":"#_17、怎么去复用一个接口的方法","children":[]},{"level":3,"title":"18、go里面的 _","slug":"_18、go里面的","link":"#_18、go里面的","children":[]},{"level":3,"title":"19、goroutine创建的时候如果要传一个参数进去有什么要注意的点？","slug":"_19、goroutine创建的时候如果要传一个参数进去有什么要注意的点","link":"#_19、goroutine创建的时候如果要传一个参数进去有什么要注意的点","children":[]},{"level":3,"title":"20、写go单元测试的规范？","slug":"_20、写go单元测试的规范","link":"#_20、写go单元测试的规范","children":[]},{"level":3,"title":"21、单步调试？","slug":"_21、单步调试","link":"#_21、单步调试","children":[]},{"level":3,"title":"22、导入一个go的工程，有些依赖找不到，改怎么办？","slug":"_22、导入一个go的工程-有些依赖找不到-改怎么办","link":"#_22、导入一个go的工程-有些依赖找不到-改怎么办","children":[]},{"level":3,"title":"23、值拷贝 与 引用拷贝，深拷贝 与 浅拷贝","slug":"_23、值拷贝-与-引用拷贝-深拷贝-与-浅拷贝","link":"#_23、值拷贝-与-引用拷贝-深拷贝-与-浅拷贝","children":[]},{"level":3,"title":"24、精通Golang项目依赖Go modules","slug":"_24、精通golang项目依赖go-modules","link":"#_24、精通golang项目依赖go-modules","children":[]},{"level":3,"title":"25、Go 多返回值怎么实现的？","slug":"_25、go-多返回值怎么实现的","link":"#_25、go-多返回值怎么实现的","children":[]},{"level":3,"title":"26、Go 语言中不同的类型如何比较是否相等？","slug":"_26、go-语言中不同的类型如何比较是否相等","link":"#_26、go-语言中不同的类型如何比较是否相等","children":[]},{"level":3,"title":"27、Go中init 函数的特征?","slug":"_27、go中init-函数的特征","link":"#_27、go中init-函数的特征","children":[]},{"level":3,"title":"28、Go中 uintptr和 unsafe.Pointer 的区别？","slug":"_28、go中-uintptr和-unsafe-pointer-的区别","link":"#_28、go中-uintptr和-unsafe-pointer-的区别","children":[]}]},{"level":2,"title":"二、slice","slug":"二、slice","link":"#二、slice","children":[{"level":3,"title":"1、数组和切片的区别 （基本必问）","slug":"_1、数组和切片的区别-基本必问","link":"#_1、数组和切片的区别-基本必问","children":[]},{"level":3,"title":"2、讲讲 Go 的 slice 底层数据结构和一些特性？","slug":"_2、讲讲-go-的-slice-底层数据结构和一些特性","link":"#_2、讲讲-go-的-slice-底层数据结构和一些特性","children":[]},{"level":3,"title":"3、golang中数组和slice作为参数的区别？slice作为参数传递有什么问题？","slug":"_3、golang中数组和slice作为参数的区别-slice作为参数传递有什么问题","link":"#_3、golang中数组和slice作为参数的区别-slice作为参数传递有什么问题","children":[]},{"level":3,"title":"4、从数组中取一个相同大小的slice有成本吗？","slug":"_4、从数组中取一个相同大小的slice有成本吗","link":"#_4、从数组中取一个相同大小的slice有成本吗","children":[]}]},{"level":2,"title":"三、map相关","slug":"三、map相关","link":"#三、map相关","children":[{"level":3,"title":"1、map 使用注意的点，是否并发安全？","slug":"_1、map-使用注意的点-是否并发安全","link":"#_1、map-使用注意的点-是否并发安全","children":[]},{"level":3,"title":"2、map 循环是有序的还是无序的？","slug":"_2、map-循环是有序的还是无序的","link":"#_2、map-循环是有序的还是无序的","children":[]},{"level":3,"title":"3、 map 中删除一个 key，它的内存会释放么？（常问）","slug":"_3、-map-中删除一个-key-它的内存会释放么-常问","link":"#_3、-map-中删除一个-key-它的内存会释放么-常问","children":[]},{"level":3,"title":"4、怎么处理对 map 进行并发访问？有没有其他方案？ 区别是什么？","slug":"_4、怎么处理对-map-进行并发访问-有没有其他方案-区别是什么","link":"#_4、怎么处理对-map-进行并发访问-有没有其他方案-区别是什么","children":[]},{"level":3,"title":"5、 nil map 和空 map 有何不同？","slug":"_5、-nil-map-和空-map-有何不同","link":"#_5、-nil-map-和空-map-有何不同","children":[]},{"level":3,"title":"6、map 的数据结构是什么？","slug":"_6、map-的数据结构是什么","link":"#_6、map-的数据结构是什么","children":[]},{"level":3,"title":"7、是怎么实现扩容？","slug":"_7、是怎么实现扩容","link":"#_7、是怎么实现扩容","children":[]},{"level":3,"title":"8、查找过程","slug":"_8、查找过程","link":"#_8、查找过程","children":[]},{"level":3,"title":"9、插入过程","slug":"_9、插入过程","link":"#_9、插入过程","children":[]},{"level":3,"title":"10、slices能作为map类型的key吗？","slug":"_10、slices能作为map类型的key吗","link":"#_10、slices能作为map类型的key吗","children":[]}]},{"level":2,"title":"四、接口","slug":"四、接口","link":"#四、接口","children":[{"level":3,"title":"1、Go 语言与鸭子类型的关系","slug":"_1、go-语言与鸭子类型的关系","link":"#_1、go-语言与鸭子类型的关系","children":[]},{"level":3,"title":"2、值接收者和指针接收者的区别","slug":"_2、值接收者和指针接收者的区别","link":"#_2、值接收者和指针接收者的区别","children":[]},{"level":3,"title":"3、iface 和 eface 的区别是什么","slug":"_3、iface-和-eface-的区别是什么","link":"#_3、iface-和-eface-的区别是什么","children":[]},{"level":3,"title":"4、接口的动态类型和动态值","slug":"_4、接口的动态类型和动态值","link":"#_4、接口的动态类型和动态值","children":[]},{"level":3,"title":"5、编译器自动检测类型是否实现接口","slug":"_5、编译器自动检测类型是否实现接口","link":"#_5、编译器自动检测类型是否实现接口","children":[]},{"level":3,"title":"6、接口的构造过程是怎样的","slug":"_6、接口的构造过程是怎样的","link":"#_6、接口的构造过程是怎样的","children":[]},{"level":3,"title":"7、类型转换和断言的区别","slug":"_7、类型转换和断言的区别","link":"#_7、类型转换和断言的区别","children":[]},{"level":3,"title":"8、接口转换的原理","slug":"_8、接口转换的原理","link":"#_8、接口转换的原理","children":[]},{"level":3,"title":"9、如何用 interface 实现多态","slug":"_9、如何用-interface-实现多态","link":"#_9、如何用-interface-实现多态","children":[]},{"level":3,"title":"10、Go 接口与 C++ 接口有何异同","slug":"_10、go-接口与-c-接口有何异同","link":"#_10、go-接口与-c-接口有何异同","children":[]}]},{"level":2,"title":"五**、context相关**","slug":"五-、context相关","link":"#五-、context相关","children":[{"level":3,"title":"1、context 结构是什么样的？context 使用场景和用途？","slug":"_1、context-结构是什么样的-context-使用场景和用途","link":"#_1、context-结构是什么样的-context-使用场景和用途","children":[]}]},{"level":2,"title":"六、channel相关","slug":"六、channel相关","link":"#六、channel相关","children":[{"level":3,"title":"1、channel 是否线程安全？锁用在什么地方？","slug":"_1、channel-是否线程安全-锁用在什么地方","link":"#_1、channel-是否线程安全-锁用在什么地方","children":[]},{"level":3,"title":"2、go channel 的底层实现原理 （数据结构）","slug":"_2、go-channel-的底层实现原理-数据结构","link":"#_2、go-channel-的底层实现原理-数据结构","children":[]},{"level":3,"title":"3、nil、关闭的 channel、有数据的 channel，再进行读、写、关闭会怎么样？（各类变种题型，重要）","slug":"_3、nil、关闭的-channel、有数据的-channel-再进行读、写、关闭会怎么样-各类变种题型-重要","link":"#_3、nil、关闭的-channel、有数据的-channel-再进行读、写、关闭会怎么样-各类变种题型-重要","children":[]},{"level":3,"title":"4、向 channel 发送数据和从 channel 读数据的流程是什么样的？","slug":"_4、向-channel-发送数据和从-channel-读数据的流程是什么样的","link":"#_4、向-channel-发送数据和从-channel-读数据的流程是什么样的","children":[]},{"level":3,"title":"5、讲讲 Go 的 chan 底层数据结构和主要使用场景","slug":"_5、讲讲-go-的-chan-底层数据结构和主要使用场景","link":"#_5、讲讲-go-的-chan-底层数据结构和主要使用场景","children":[]},{"level":3,"title":"6、有缓存channel和无缓存channel","slug":"_6、有缓存channel和无缓存channel","link":"#_6、有缓存channel和无缓存channel","children":[]}]},{"level":2,"title":"七、GMP相关","slug":"七、gmp相关","link":"#七、gmp相关","children":[{"level":3,"title":"0、进程、线程、协程有什么区别？（必问）","slug":"_0、进程、线程、协程有什么区别-必问","link":"#_0、进程、线程、协程有什么区别-必问","children":[]},{"level":3,"title":"1、什么是 GMP？（必问）","slug":"_1、什么是-gmp-必问","link":"#_1、什么是-gmp-必问","children":[]},{"level":3,"title":"2、为什么要有 P？","slug":"_2、为什么要有-p","link":"#_2、为什么要有-p","children":[]},{"level":3,"title":"3、调度器的设计策略","slug":"_3、调度器的设计策略","link":"#_3、调度器的设计策略","children":[]},{"level":3,"title":"3、抢占式调度是如何抢占的？","slug":"_3、抢占式调度是如何抢占的","link":"#_3、抢占式调度是如何抢占的","children":[]},{"level":3,"title":"4、调度器的生命周期","slug":"_4、调度器的生命周期","link":"#_4、调度器的生命周期","children":[]}]},{"level":2,"title":"八、锁相关","slug":"八、锁相关","link":"#八、锁相关","children":[{"level":3,"title":"1、除了 mutex 以外还有那些方式安全读写共享变量？","slug":"_1、除了-mutex-以外还有那些方式安全读写共享变量","link":"#_1、除了-mutex-以外还有那些方式安全读写共享变量","children":[]},{"level":3,"title":"2、Go 如何实现原子操作？","slug":"_2、go-如何实现原子操作","link":"#_2、go-如何实现原子操作","children":[]},{"level":3,"title":"3、Mutex 是悲观锁还是乐观锁？悲观锁、乐观锁是什么？","slug":"_3、mutex-是悲观锁还是乐观锁-悲观锁、乐观锁是什么","link":"#_3、mutex-是悲观锁还是乐观锁-悲观锁、乐观锁是什么","children":[]},{"level":3,"title":"4、Mutex 有几种模式？","slug":"_4、mutex-有几种模式","link":"#_4、mutex-有几种模式","children":[]},{"level":3,"title":"5、goroutine 的自旋占用资源如何解决","slug":"_5、goroutine-的自旋占用资源如何解决","link":"#_5、goroutine-的自旋占用资源如何解决","children":[]}]},{"level":2,"title":"九、并发相关","slug":"九、并发相关","link":"#九、并发相关","children":[{"level":3,"title":"0、讲讲 Go 中主协程如何等待其余协程退出?","slug":"_0、讲讲-go-中主协程如何等待其余协程退出","link":"#_0、讲讲-go-中主协程如何等待其余协程退出","children":[]},{"level":3,"title":"1、怎么控制并发数？","slug":"_1、怎么控制并发数","link":"#_1、怎么控制并发数","children":[]},{"level":3,"title":"2、多个 goroutine 对同一个 map 写会 panic，异常是否可以用 defer 捕获？","slug":"_2、多个-goroutine-对同一个-map-写会-panic-异常是否可以用-defer-捕获","link":"#_2、多个-goroutine-对同一个-map-写会-panic-异常是否可以用-defer-捕获","children":[]},{"level":3,"title":"3、如何优雅的实现一个 goroutine 池","slug":"_3、如何优雅的实现一个-goroutine-池","link":"#_3、如何优雅的实现一个-goroutine-池","children":[]},{"level":3,"title":"4、golang实现多并发请求（发送多个get请求）","slug":"_4、golang实现多并发请求-发送多个get请求","link":"#_4、golang实现多并发请求-发送多个get请求","children":[]}]},{"level":2,"title":"十、GC相关","slug":"十、gc相关","link":"#十、gc相关","children":[{"level":3,"title":"1、go gc 是怎么实现的？（必问）","slug":"_1、go-gc-是怎么实现的-必问","link":"#_1、go-gc-是怎么实现的-必问","children":[]},{"level":3,"title":"2、go 是 gc 算法是怎么实现的？ （得物，出现频率低）","slug":"_2、go-是-gc-算法是怎么实现的-得物-出现频率低","link":"#_2、go-是-gc-算法是怎么实现的-得物-出现频率低","children":[]},{"level":3,"title":"3、GC 中 stw 时机，各个阶段是如何解决的？ （百度）","slug":"_3、gc-中-stw-时机-各个阶段是如何解决的-百度","link":"#_3、gc-中-stw-时机-各个阶段是如何解决的-百度","children":[]},{"level":3,"title":"4、GC 的触发时机？","slug":"_4、gc-的触发时机","link":"#_4、gc-的触发时机","children":[]}]},{"level":2,"title":"十一、内存相关","slug":"十一、内存相关","link":"#十一、内存相关","children":[{"level":3,"title":"内存分配原理","slug":"内存分配原理","link":"#内存分配原理","children":[]},{"level":3,"title":"垃圾回收原理","slug":"垃圾回收原理","link":"#垃圾回收原理","children":[]},{"level":3,"title":"逃逸分析","slug":"逃逸分析","link":"#逃逸分析","children":[]},{"level":3,"title":"Go语言的内存模型及堆的分配管理","slug":"go语言的内存模型及堆的分配管理","link":"#go语言的内存模型及堆的分配管理","children":[]},{"level":3,"title":"1、谈谈内存泄露，什么情况下内存会泄露？怎么定位排查内存泄漏问题？","slug":"_1、谈谈内存泄露-什么情况下内存会泄露-怎么定位排查内存泄漏问题","link":"#_1、谈谈内存泄露-什么情况下内存会泄露-怎么定位排查内存泄漏问题","children":[]},{"level":3,"title":"2、golang 的内存逃逸吗？什么情况下会发生内存逃逸？（必问）","slug":"_2、golang-的内存逃逸吗-什么情况下会发生内存逃逸-必问","link":"#_2、golang-的内存逃逸吗-什么情况下会发生内存逃逸-必问","children":[]},{"level":3,"title":"3、请简述 Go 是如何分配内存的？","slug":"_3、请简述-go-是如何分配内存的","link":"#_3、请简述-go-是如何分配内存的","children":[]},{"level":3,"title":"4、go内存分配器","slug":"_4、go内存分配器","link":"#_4、go内存分配器","children":[]},{"level":3,"title":"5、Channel 分配在栈上还是堆上？哪些对象分配在堆上，哪些对象分配在栈上？","slug":"_5、channel-分配在栈上还是堆上-哪些对象分配在堆上-哪些对象分配在栈上","link":"#_5、channel-分配在栈上还是堆上-哪些对象分配在堆上-哪些对象分配在栈上","children":[]},{"level":3,"title":"6、介绍一下大对象小对象，为什么小对象多了会造成 gc 压力？","slug":"_6、介绍一下大对象小对象-为什么小对象多了会造成-gc-压力","link":"#_6、介绍一下大对象小对象-为什么小对象多了会造成-gc-压力","children":[]}]},{"level":2,"title":"十二、编译","slug":"十二、编译","link":"#十二、编译","children":[{"level":3,"title":"逃逸分析是怎么进行的","slug":"逃逸分析是怎么进行的","link":"#逃逸分析是怎么进行的","children":[]},{"level":3,"title":"GoRoot 和 GoPath 有什么用","slug":"goroot-和-gopath-有什么用","link":"#goroot-和-gopath-有什么用","children":[]},{"level":3,"title":"Go 编译链接过程概述","slug":"go-编译链接过程概述","link":"#go-编译链接过程概述","children":[]},{"level":3,"title":"Go 编译相关的命令详解","slug":"go-编译相关的命令详解","link":"#go-编译相关的命令详解","children":[]},{"level":3,"title":"Go 程序启动过程是怎样的","slug":"go-程序启动过程是怎样的","link":"#go-程序启动过程是怎样的","children":[]}]},{"level":2,"title":"十三、框架","slug":"十三、框架","link":"#十三、框架","children":[{"level":3,"title":"Gin","slug":"gin","link":"#gin","children":[]},{"level":3,"title":"go-zero","slug":"go-zero","link":"#go-zero","children":[]},{"level":3,"title":"字节-CloudWeGo","slug":"字节-cloudwego","link":"#字节-cloudwego","children":[]},{"level":3,"title":"HTTP-Hertz","slug":"http-hertz","link":"#http-hertz","children":[]},{"level":3,"title":"RPC-Kitex","slug":"rpc-kitex","link":"#rpc-kitex","children":[]}]},{"level":2,"title":"参考并致谢","slug":"参考并致谢","link":"#参考并致谢","children":[]}],"git":{"createdTime":1695354822000,"updatedTime":1695354822000,"contributors":[{"name":"GaoYang","email":"GaoYangBenYang@outlook.com","commits":1}]},"readingTime":{"minutes":101,"words":30300},"filePathRelative":"08InterviewQuestion/01Language/Golang面试题.md","localizedDate":"2023年5月15日","excerpt":"<h2> 0、go与其它语言</h2>\\n<h3> 0、什么是<a href=\\"https://so.csdn.net/so/search?q=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">面向对象</a></h3>\\n<p>在了解 Go 语言是不是面向对象（简称：OOP） 之前，我们必须先知道 OOP 是啥，得先给他 “下定义”</p>\\n<p>根据 Wikipedia 的定义，我们梳理出 OOP 的几个基本认知：</p>\\n<ul>\\n<li>面向对象编程（OOP）是一种基于 “对象” 概念的编程范式，它可以包含数据和代码：数据以字段的形式存在（通常称为属性或属性），代码以程序的形式存在（通常称为方法）。</li>\\n<li>对象自己的程序可以访问并经常修改自己的数据字段。</li>\\n<li>对象经常被定义为类的一个实例。</li>\\n<li>对象利用属性和方法的私有/受保护/公共可见性，对象的内部状态受到保护，不受外界影响（被封装）。</li>\\n</ul>","autoDesc":true}`);export{l as data};
