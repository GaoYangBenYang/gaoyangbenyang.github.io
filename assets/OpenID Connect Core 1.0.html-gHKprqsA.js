const e=JSON.parse(`{"key":"v-9b745f3a","path":"/TheWayToProgress/OpenID%20Connect%20Core%201.0.html","title":"OpenID Connect Core 1.0","lang":"zh-CN","frontmatter":{"title":"OpenID Connect Core 1.0","date":"2023-04-05T00:00:00.000Z","category":["OpenID Connect"],"tag":["OpenID Connect Core 1.0"],"description":"摘要 OpenID Connect 1.0是OAuth 2.0协议之上的一个简单身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。 本规范定义了OpenID Connect的核心功能:建立在OAuth 2.0之上的认证，并使用Claims来交流关于终端用户的信息。它还描述了使用OpenID Connect的安全和隐私注意事项。 1. 简介 OpenID Connect 1.0是OAuth 2.0 [RFC6749]协议之上的一个简单的身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。","head":[["meta",{"property":"og:url","content":"https://gaoyangbenyang.github.io/TheWayToProgress/OpenID%20Connect%20Core%201.0.html"}],["meta",{"property":"og:site_name","content":"GaoYang's blog"}],["meta",{"property":"og:title","content":"OpenID Connect Core 1.0"}],["meta",{"property":"og:description","content":"摘要 OpenID Connect 1.0是OAuth 2.0协议之上的一个简单身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。 本规范定义了OpenID Connect的核心功能:建立在OAuth 2.0之上的认证，并使用Claims来交流关于终端用户的信息。它还描述了使用OpenID Connect的安全和隐私注意事项。 1. 简介 OpenID Connect 1.0是OAuth 2.0 [RFC6749]协议之上的一个简单的身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T03:10:14.000Z"}],["meta",{"property":"article:author","content":"高洋"}],["meta",{"property":"article:tag","content":"OpenID Connect Core 1.0"}],["meta",{"property":"article:published_time","content":"2023-04-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T03:10:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OpenID Connect Core 1.0\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T03:10:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"高洋\\",\\"url\\":\\"https://github.com/GaoYangBenYang\\",\\"email\\":\\"GaoYangBenYang@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1.  需求、符号和约定","slug":"_1-1-需求、符号和约定","link":"#_1-1-需求、符号和约定","children":[]},{"level":2,"title":"1.2.  术语","slug":"_1-2-术语","link":"#_1-2-术语","children":[]},{"level":2,"title":"1.3.  概述","slug":"_1-3-概述","link":"#_1-3-概述","children":[]},{"level":2,"title":"3.1.  使用授权代码流进行身份验证","slug":"_3-1-使用授权代码流进行身份验证","link":"#_3-1-使用授权代码流进行身份验证","children":[{"level":3,"title":"3.1.1.  授权码流步骤","slug":"_3-1-1-授权码流步骤","link":"#_3-1-1-授权码流步骤","children":[]},{"level":3,"title":"3.1.2.  授权端点","slug":"_3-1-2-授权端点","link":"#_3-1-2-授权端点","children":[]},{"level":3,"title":"3.1.3.  Token Endpoint (令牌端点)","slug":"_3-1-3-token-endpoint-令牌端点","link":"#_3-1-3-token-endpoint-令牌端点","children":[]}]},{"level":2,"title":"3.2.  使用隐式流进行身份验证","slug":"_3-2-使用隐式流进行身份验证","link":"#_3-2-使用隐式流进行身份验证","children":[{"level":3,"title":"3.2.1.  隐式流程步骤","slug":"_3-2-1-隐式流程步骤","link":"#_3-2-1-隐式流程步骤","children":[]},{"level":3,"title":"3.2.2.  授权端点","slug":"_3-2-2-授权端点","link":"#_3-2-2-授权端点","children":[]}]},{"level":2,"title":"3.3.  使用混合流进行身份验证","slug":"_3-3-使用混合流进行身份验证","link":"#_3-3-使用混合流进行身份验证","children":[{"level":3,"title":"3.3.1.  混合流程步骤","slug":"_3-3-1-混合流程步骤","link":"#_3-3-1-混合流程步骤","children":[]},{"level":3,"title":"3.3.2.  授权端点","slug":"_3-3-2-授权端点","link":"#_3-3-2-授权端点","children":[]},{"level":3,"title":"3.3.3.  令牌端点","slug":"_3-3-3-令牌端点","link":"#_3-3-3-令牌端点","children":[]}]},{"level":2,"title":"5.1.  标准要求","slug":"_5-1-标准要求","link":"#_5-1-标准要求","children":[{"level":3,"title":"5.1.1.  解决索赔","slug":"_5-1-1-解决索赔","link":"#_5-1-1-解决索赔","children":[]},{"level":3,"title":"5.1.2.  额外的要求","slug":"_5-1-2-额外的要求","link":"#_5-1-2-额外的要求","children":[]}]},{"level":2,"title":"5.2.  索赔语言和脚本","slug":"_5-2-索赔语言和脚本","link":"#_5-2-索赔语言和脚本","children":[]},{"level":2,"title":"5.3.  用户信息端点","slug":"_5-3-用户信息端点","link":"#_5-3-用户信息端点","children":[{"level":3,"title":"5.3.1.  用户信息请求","slug":"_5-3-1-用户信息请求","link":"#_5-3-1-用户信息请求","children":[]},{"level":3,"title":"5.3.2.  UserInfo成功响应","slug":"_5-3-2-userinfo成功响应","link":"#_5-3-2-userinfo成功响应","children":[]},{"level":3,"title":"5.3.3.  UserInfo错误响应","slug":"_5-3-3-userinfo错误响应","link":"#_5-3-3-userinfo错误响应","children":[]},{"level":3,"title":"5.3.4.  UserInfo响应验证","slug":"_5-3-4-userinfo响应验证","link":"#_5-3-4-userinfo响应验证","children":[]}]},{"level":2,"title":"5.4.  使用范围值请求声明","slug":"_5-4-使用范围值请求声明","link":"#_5-4-使用范围值请求声明","children":[]},{"level":2,"title":"5.5.  使用\\" Claims \\"请求参数请求索赔","slug":"_5-5-使用-claims-请求参数请求索赔","link":"#_5-5-使用-claims-请求参数请求索赔","children":[{"level":3,"title":"5.5.1.  个别索偿申请","slug":"_5-5-1-个别索偿申请","link":"#_5-5-1-个别索偿申请","children":[]},{"level":3,"title":"5.5.2.  个人索赔的语言和脚本","slug":"_5-5-2-个人索赔的语言和脚本","link":"#_5-5-2-个人索赔的语言和脚本","children":[]}]},{"level":2,"title":"5.6.  索赔类型","slug":"_5-6-索赔类型","link":"#_5-6-索赔类型","children":[{"level":3,"title":"5.6.1.  正常的索赔","slug":"_5-6-1-正常的索赔","link":"#_5-6-1-正常的索赔","children":[]},{"level":3,"title":"5.6.2.  聚合和分布式索赔","slug":"_5-6-2-聚合和分布式索赔","link":"#_5-6-2-聚合和分布式索赔","children":[]}]},{"level":2,"title":"5.7.  索赔稳定性和唯一性","slug":"_5-7-索赔稳定性和唯一性","link":"#_5-7-索赔稳定性和唯一性","children":[]},{"level":2,"title":"6.1.  按值传递请求对象","slug":"_6-1-按值传递请求对象","link":"#_6-1-按值传递请求对象","children":[{"level":3,"title":"6.1.1.  使用\\" Request \\"请求参数请求","slug":"_6-1-1-使用-request-请求参数请求","link":"#_6-1-1-使用-request-请求参数请求","children":[]}]},{"level":2,"title":"6.2.  通过引用传递请求对象","slug":"_6-2-通过引用传递请求对象","link":"#_6-2-通过引用传递请求对象","children":[{"level":3,"title":"6.2.1.  URL引用请求对象","slug":"_6-2-1-url引用请求对象","link":"#_6-2-1-url引用请求对象","children":[]},{"level":3,"title":"6.2.2.  使用“request_uri”请求参数请求","slug":"_6-2-2-使用-request-uri-请求参数请求","link":"#_6-2-2-使用-request-uri-请求参数请求","children":[]},{"level":3,"title":"6.2.3.  授权服务器获取请求对象","slug":"_6-2-3-授权服务器获取请求对象","link":"#_6-2-3-授权服务器获取请求对象","children":[]},{"level":3,"title":"6.2.4.  “request_uri”原理","slug":"_6-2-4-request-uri-原理","link":"#_6-2-4-request-uri-原理","children":[]}]},{"level":2,"title":"6.3.  验证基于jwt的请求","slug":"_6-3-验证基于jwt的请求","link":"#_6-3-验证基于jwt的请求","children":[{"level":3,"title":"6.3.1.  加密请求对象","slug":"_6-3-1-加密请求对象","link":"#_6-3-1-加密请求对象","children":[]},{"level":3,"title":"6.3.2.  已签名请求对象","slug":"_6-3-2-已签名请求对象","link":"#_6-3-2-已签名请求对象","children":[]},{"level":3,"title":"6.3.3.  请求参数组装和验证","slug":"_6-3-3-请求参数组装和验证","link":"#_6-3-3-请求参数组装和验证","children":[]}]},{"level":2,"title":"7.1.  自发OpenID提供者发现","slug":"_7-1-自发openid提供者发现","link":"#_7-1-自发openid提供者发现","children":[]},{"level":2,"title":"7.2.  自发OpenID提供者注册","slug":"_7-2-自发openid提供者注册","link":"#_7-2-自发openid提供者注册","children":[{"level":3,"title":"7.2.1.  使用“注册”请求参数提供信息","slug":"_7-2-1-使用-注册-请求参数提供信息","link":"#_7-2-1-使用-注册-请求参数提供信息","children":[]}]},{"level":2,"title":"7.3.  自发OpenID提供者请求","slug":"_7-3-自发openid提供者请求","link":"#_7-3-自发openid提供者请求","children":[]},{"level":2,"title":"7.4.  自发OpenID提供者响应","slug":"_7-4-自发openid提供者响应","link":"#_7-4-自发openid提供者响应","children":[]},{"level":2,"title":"7.5.  自发ID令牌验证","slug":"_7-5-自发id令牌验证","link":"#_7-5-自发id令牌验证","children":[]},{"level":2,"title":"8.1.  成对标识算法","slug":"_8-1-成对标识算法","link":"#_8-1-成对标识算法","children":[]},{"level":2,"title":"10.1.  签署","slug":"_10-1-签署","link":"#_10-1-签署","children":[{"level":3,"title":"10.1.1.  旋转非对称签名密钥","slug":"_10-1-1-旋转非对称签名密钥","link":"#_10-1-1-旋转非对称签名密钥","children":[]}]},{"level":2,"title":"10.2.  加密","slug":"_10-2-加密","link":"#_10-2-加密","children":[{"level":3,"title":"10.2.1.","slug":"_10-2-1","link":"#_10-2-1","children":[]}]}],"git":{"createdTime":1695438614000,"updatedTime":1695438614000,"contributors":[{"name":"GaoYang","email":"GaoYangBenYang@outlook.com","commits":1}]},"readingTime":{"minutes":41.42,"words":12427},"filePathRelative":"TheWayToProgress/OpenID Connect Core 1.0.md","localizedDate":"2023年4月5日","excerpt":"<h1> 摘要</h1>\\n<p>OpenID Connect 1.0是OAuth 2.0协议之上的一个简单身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。</p>\\n<p>本规范定义了OpenID Connect的核心功能:建立在OAuth 2.0之上的认证，并使用Claims来交流关于终端用户的信息。它还描述了使用OpenID Connect的安全和隐私注意事项。</p>\\n<h1> 1.  简介</h1>\\n<p>OpenID Connect 1.0是OAuth 2.0 [RFC6749]协议之上的一个简单的身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。</p>","autoDesc":true}`);export{e as data};
