const e=JSON.parse('{"key":"v-12ceab10","path":"/Language/Java/SpringBootDocs.html","title":"SpringBoot Docs","lang":"zh-CN","frontmatter":{"title":"SpringBoot Docs","icon":"spring","date":"2023-03-25T00:00:00.000Z","category":["SpringBoot"],"tag":["Docs"],"pageInfo":["Author","Date","ReadingTime","Word","Category","Tag"],"article":false,"timeline":false,"headerDepth":3,"description":"1.SpringBoot简介 @ResponseBody和@RestController区别 @ResponseBody：@ResponseBody 是一个方法级别的注解，用于标识方法的返回值应该直接作为响应体返回，而不是通过视图解析器进行页面跳转。在使用 @ResponseBody 注解时，Spring MVC 会自动将方法返回的对象转换成适当的响应格式，如 JSON、XML 等，然后发送给客户端。需要注意的是，@ResponseBody 注解仅仅表示方法返回的数据要作为响应体返回，并不会进行视图解析。 @RestController：@RestController 是一个类级别的注解，它相当于 @Controller 和 @ResponseBody 的组合。使用 @RestController 注解后，类中的所有方法都会默认使用 @ResponseBody 注解，表示所有方法的返回值都将直接作为响应体返回给客户端，并且不会进行视图解析。因此，@RestController 适合用于构建 RESTful 风格的 Web 服务，其中所有的响应都是以数据形式返回，而不是页面。","head":[["meta",{"property":"og:url","content":"https://gaoyangbenyang.github.io/Language/Java/SpringBootDocs.html"}],["meta",{"property":"og:site_name","content":"Blogs & Notes"}],["meta",{"property":"og:title","content":"SpringBoot Docs"}],["meta",{"property":"og:description","content":"1.SpringBoot简介 @ResponseBody和@RestController区别 @ResponseBody：@ResponseBody 是一个方法级别的注解，用于标识方法的返回值应该直接作为响应体返回，而不是通过视图解析器进行页面跳转。在使用 @ResponseBody 注解时，Spring MVC 会自动将方法返回的对象转换成适当的响应格式，如 JSON、XML 等，然后发送给客户端。需要注意的是，@ResponseBody 注解仅仅表示方法返回的数据要作为响应体返回，并不会进行视图解析。 @RestController：@RestController 是一个类级别的注解，它相当于 @Controller 和 @ResponseBody 的组合。使用 @RestController 注解后，类中的所有方法都会默认使用 @ResponseBody 注解，表示所有方法的返回值都将直接作为响应体返回给客户端，并且不会进行视图解析。因此，@RestController 适合用于构建 RESTful 风格的 Web 服务，其中所有的响应都是以数据形式返回，而不是页面。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-20T02:32:35.000Z"}],["meta",{"property":"article:author","content":"高洋"}],["meta",{"property":"article:tag","content":"Docs"}],["meta",{"property":"article:published_time","content":"2023-03-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-20T02:32:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"SpringBoot Docs\\",\\"description\\":\\"1.SpringBoot简介 @ResponseBody和@RestController区别 @ResponseBody：@ResponseBody 是一个方法级别的注解，用于标识方法的返回值应该直接作为响应体返回，而不是通过视图解析器进行页面跳转。在使用 @ResponseBody 注解时，Spring MVC 会自动将方法返回的对象转换成适当的响应格式，如 JSON、XML 等，然后发送给客户端。需要注意的是，@ResponseBody 注解仅仅表示方法返回的数据要作为响应体返回，并不会进行视图解析。 @RestController：@RestController 是一个类级别的注解，它相当于 @Controller 和 @ResponseBody 的组合。使用 @RestController 注解后，类中的所有方法都会默认使用 @ResponseBody 注解，表示所有方法的返回值都将直接作为响应体返回给客户端，并且不会进行视图解析。因此，@RestController 适合用于构建 RESTful 风格的 Web 服务，其中所有的响应都是以数据形式返回，而不是页面。\\"}"]]},"headers":[{"level":2,"title":"1.SpringBoot简介","slug":"_1-springboot简介","link":"#_1-springboot简介","children":[]},{"level":2,"title":"@ResponseBody和@RestController区别","slug":"responsebody和-restcontroller区别","link":"#responsebody和-restcontroller区别","children":[]}],"git":{"createdTime":1703673194000,"updatedTime":1708396355000,"contributors":[{"name":"GaoYang","email":"GaoYangBenYang@outlook.com","commits":2}]},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"Language/Java/SpringBootDocs.md","localizedDate":"2023年3月25日","excerpt":"<h2> 1.SpringBoot简介</h2>\\n<h2> @ResponseBody和@RestController区别</h2>\\n<ol>\\n<li>\\n<p>@ResponseBody：@ResponseBody 是一个方法级别的注解，用于标识方法的返回值应该直接作为响应体返回，而不是通过视图解析器进行页面跳转。在使用<br>\\n@ResponseBody 注解时，Spring MVC 会自动将方法返回的对象转换成适当的响应格式，如 JSON、XML 等，然后发送给客户端。需要注意的是，@ResponseBody<br>\\n注解仅仅表示方法返回的数据要作为响应体返回，并不会进行视图解析。</p>\\n</li>\\n<li>\\n<p>@RestController：@RestController 是一个类级别的注解，它相当于 @Controller 和 @ResponseBody 的组合。使用 @RestController 注解后，类中的所有方法都会默认使用<br>\\n@ResponseBody 注解，表示所有方法的返回值都将直接作为响应体返回给客户端，并且不会进行视图解析。因此，@RestController 适合用于构建 RESTful 风格的<br>\\nWeb 服务，其中所有的响应都是以数据形式返回，而不是页面。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
