import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as a,c as n,a as e,b as s,d as t,e as i}from"./app-0MP5o5wy.js";const o={},c=i(`<h3 id="wsl如何重新启动-restart" tabindex="-1"><a class="header-anchor" href="#wsl如何重新启动-restart" aria-hidden="true">#</a> WSL如何重新启动（restart）</h3><p>sudo systemctl restart命令无效</p><ul><li>打开任务管理器，找到服务选项卡，找到LxssManager右键重新启动即可。</li></ul><h3 id="wsl2中安装docker" tabindex="-1"><a class="header-anchor" href="#wsl2中安装docker" aria-hidden="true">#</a> WSL2中安装Docker</h3><ol><li>错误安装方式</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt install docker.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="">出现sudo service docker start启动错误：docker: unrecognized service</a></p>`,7),u={start:"2"},p=e("p",null,"正确安装方式",-1),v=e("br",null,null,-1),m=e("br",null,null,-1),b={href:"http://test.docker.com",target:"_blank",rel:"noopener noreferrer"},g=i(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># $ curl -fsSL test.docker.com -o get-docker.sh
$ curl -fsSL get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --mirror Aliyun
# $ sudo sh get-docker.sh --mirror AzureChinaCloud
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p>`,2),h=i("<li><p>启动 Docker<br> $ sudo service docker start</p></li><li><p>建立 docker 用户组<br> 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组:<br> 建立 docker 组：<br> $ sudo groupadd docker<br> 将当前用户加入 docker 组：<br> $ sudo usermod -aG docker $USER<br> 退出当前终端并重新登录，进行如下测试。</p></li>",2),_=i(`<p><a href="">正确安装会出现一个问题(使用sudo service docker start启动docker时提示启动但是并未真正启动)按以下方法解决</a></p><p>使用过 WSL2 的人肯定知道，WSL2 中不能使用systemctl，需要使用service来启动 docker 或其他服务。</p><p>启动 docker：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo service docker start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时竟无法启动，查看日志：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ cat /var/log/docker.log
...
Sep 13 20:47:37 xxx dockerd: failed to start daemon: Error initializing network controller: error
obtaining controller instance: failed to create NAT chain DOCKER: iptables failed: iptables -t nat -N D
OCKER: iptables v1.4.21: can&#39;t initialize iptables table \`nat&#39;: Table does not exist (do you need to ins
mod?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),x={href:"https://github.com/docker/for-linux/issues/1105",target:"_blank",rel:"noopener noreferrer"},y=i(`<p>首先，将iptables用iptables-legacy替换：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，开启 ipv4 的包转发功能：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo sed -i &#39;s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g&#39; /etc/sysctl.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，重启 WSL2，下面的代码在管理员模式下的 powershell 中运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wsl --shutdown
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时再启动 Debian，就能顺利启动 docker了。</p>`,7),k=i('<h3 id="wsl2中安装mysql" tabindex="-1"><a class="header-anchor" href="#wsl2中安装mysql" aria-hidden="true">#</a> WSL2中安装MySQL</h3><ol><li><p>安装<br> 在 WSL2 上安装 MySQL (Ubuntu) ：</p></li><li><p>打开 WSL 终端 (即。Ubuntu) 。</p></li><li><p>更新 Ubuntu 包：sudo apt update</p></li><li><p>更新该包后，使用以下命令安装 MySQL：sudo apt install mysql-server</p></li><li><p>确认安装并获取版本号：mysql --version</p></li></ol><p>可能还想运行包含的安全脚本。 这会更改一些不太安全的默认选项，例如远程根登录名和示例用户。 运行安全脚本：</p><ol><li>启动 MySQL 服务器：sudo /etc/init.d/mysql start</li><li>启动安全脚本提示符：sudo mysql_secure_installation<br> 3.第一个提示符会询问是否要设置验证密码插件，该插件可用于测试 MySQL 密码的强度。 然后将为 MySQL 根用户设置密码，决定是否删除匿名用户，决定是否允许根用户本地和远程登录，决定是否删除测试数据库，最后决定是否立即重新加载特权表。</li></ol><p>若要打开 MySQL 提示符，请输入：sudo mysql</p><p>若要查看可用的数据库，请在 MySQL 提示符中输入：SHOW DATABASES;</p><p>若要创建新数据库，请输入：CREATE DATABASE database_name;</p><p>若要删除数据库，请输入： DROP DATABASE database_name;</p><p>有关使用 MySQL 数据库的更多信息，请参阅 MySQL 文档。</p>',9),f={href:"https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database",target:"_blank",rel:"noopener noreferrer"},S=i(`<ol start="2"><li>卸载</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt purge mysql-*
sudo rm -rf /etc/mysql/ /var/lib/mysql
sudo apt autoremove
sudo apt autoclean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>apt-get purge 与 apt-get remove是不同的，简单来说：</p><p>purge可以将包以及软件的配置文件全部删除<br> remove仅可以删除包，但不会删除配置文件</p><ol start="3"><li>问题</li></ol>`,5),L=e("code",null,"su: warning: cannot change directory to /nonexistent: No such file or directory",-1),q=e("br",null,null,-1),w={href:"https://github.com/miguelgrinberg/microblog/issues/256#issuecomment-991578683",target:"_blank",rel:"noopener noreferrer"},M=i(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo service mysql stop #先停止服务
sudo usermod -d /var/lib/mysql/ mysql #为 mysql 用户创建一个主目录
sudo service mysql start #然后再启动
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q=i(`<li><p>设置MySQL服务相关命令</p><ul><li>查看MySQL运行状态： <code>sudo service mysql status</code></li><li>开机自启：<code>sudo update-rc.d -f mysql defaults</code></li><li>取消开机自启：<code>sudo update-rc.d -f mysql remove</code></li><li>开启MySQL服务：<code>sudo service mysql start</code></li><li>关闭MySQL服务：<code>sudo service mysql stop</code></li></ul></li><li><p>Linux使用sudo mysql -u root -p登录MySQL，虽然会提示输入密码，但是输入任何内容都可以成功登录。</p><p>sudo mysql登录成功后，我们可以切换到mysql对root的密码进行修改，具体操作如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#switch database 
mysql&gt;use msyql;  
#update root&#39;s password 
mysql&gt;alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;123456&#39;;  
#write privileges 
mysql&gt;flush privileges;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后即可quit/exit退出。</p><p>这里要注意，最好重启一下mysql服务，以使配置生效。</p><p>然后通过root登录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql -uroot -p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2);function D(A,E){const l=d("ExternalLinkIcon");return a(),n("div",null,[c,e("ol",u,[e("li",null,[p,e("ul",null,[e("li",null,[e("p",null,[s("使用脚本自动安装"),v,s(" 在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 --mirror 选项使用国内源进行安装："),m,s(" 若你想安装测试版的 Docker, 请从 "),e("a",b,[s("test.docker.com"),t(l)]),s(" 获取脚本")]),g]),h]),_,e("p",null,[s("可以看到是 iptables 的问题，此问题在其 github 仓库中有人提出过"),e("a",x,[s("#1105"),t(l)]),s("，幸运的是，这个问题正好能被简单地解决。")]),y])]),k,e("p",null,[e("a",f,[s("详细内容浏览官方文档"),t(l)])]),S,e("ul",null,[e("li",null,[e("p",null,[s("MySQL服务启动时出现"),L,q,e("a",w,[s("Github Issues"),t(l)])]),M]),Q])])}const $=r(o,[["render",D],["__file","WSL2的使用与BUG.html.vue"]]);export{$ as default};
