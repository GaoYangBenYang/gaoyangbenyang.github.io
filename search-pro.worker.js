const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":991,\"nextId\":991,\"documentIds\":{\"0\":\"v-04a68df4\",\"1\":\"v-04a68df4#mysql\",\"2\":\"v-04a68df4#redis\",\"3\":\"v-04a68df4#rabbitmq\",\"4\":\"v-04a68df4#nacos\",\"5\":\"v-04a68df4#sentinel\",\"6\":\"v-04a68df4#elasticsearch-有问题-待处理\",\"7\":\"v-04a68df4@0\",\"8\":\"v-04a68df4@1\",\"9\":\"v-9447b7ca\",\"10\":\"v-9447b7ca#问题代码\",\"11\":\"v-9447b7ca#问题原因\",\"12\":\"v-9447b7ca#解决方案\",\"13\":\"v-9447b7ca@0\",\"14\":\"v-9447b7ca@1\",\"15\":\"v-3b2f5b0b\",\"16\":\"v-3b2f5b0b#使用yaml-v2进行配置文件读取-只能读取yml\",\"17\":\"v-3b2f5b0b#yaml配置文件\",\"18\":\"v-3b2f5b0b#使用yaml-v2读取配置文件\",\"19\":\"v-3b2f5b0b#使用viper读取配置文件-能从json、toml、yaml、hcl、ini和java-properties文件中读取配置数据\",\"20\":\"v-3b2f5b0b#yaml配置文件-1\",\"21\":\"v-3b2f5b0b#使用yaml-v2读取配置文件-1\",\"22\":\"v-3b2f5b0b@0\",\"23\":\"v-3b2f5b0b@1\",\"24\":\"v-02dd16d2\",\"25\":\"v-02dd16d2#_1-摘要\",\"26\":\"v-02dd16d2#_2-jwt的定义\",\"27\":\"v-02dd16d2#_3-jwt的原理和流程\",\"28\":\"v-02dd16d2#_3-1-跨域认证的问题\",\"29\":\"v-02dd16d2#_3-2-jwt-的原理\",\"30\":\"v-02dd16d2#_3-3-jwt的认证流程图\",\"31\":\"v-02dd16d2#_3-4-jwt的6个优缺点\",\"32\":\"v-02dd16d2#_4-jwt的数据结构\",\"33\":\"v-02dd16d2#_4-1-jwt消息构成\",\"34\":\"v-02dd16d2#_4-2-头部-header\",\"35\":\"v-02dd16d2#_4-3-载荷-payload\",\"36\":\"v-02dd16d2#_4-4-签名-signature\",\"37\":\"v-02dd16d2#_4-4-1-base64url算法\",\"38\":\"v-02dd16d2#_4-5-jwt的用法\",\"39\":\"v-02dd16d2#_5-jwt、jws、jwe的区别\",\"40\":\"v-02dd16d2@0\",\"41\":\"v-fc950aea\",\"42\":\"v-fc950aea#_1-将jpanel保存为png\",\"43\":\"v-fc950aea@0\",\"44\":\"v-fc950aea@1\",\"45\":\"v-537ecdf0\",\"46\":\"v-537ecdf0#springboot整合swagger3-openapi\",\"47\":\"v-537ecdf0@0\",\"48\":\"v-537ecdf0@1\",\"49\":\"v-b02a5204\",\"50\":\"v-b02a5204#wsl如何重新启动-restart\",\"51\":\"v-b02a5204#wsl2中安装docker\",\"52\":\"v-b02a5204#wsl2中安装mysql\",\"53\":\"v-b02a5204@0\",\"54\":\"v-b02a5204@1\",\"55\":\"v-0f0bbd43\",\"56\":\"v-0f0bbd43#在gorm配置文件中添加单数表名配置项\",\"57\":\"v-0f0bbd43@0\",\"58\":\"v-0f0bbd43@1\",\"59\":\"v-1c6600b5\",\"60\":\"v-1c6600b5#前言\",\"61\":\"v-1c6600b5#dac权限模型简介\",\"62\":\"v-1c6600b5#mac权限模型简介\",\"63\":\"v-1c6600b5#abac权限模型简介\",\"64\":\"v-1c6600b5#rbac权限模型简介\",\"65\":\"v-1c6600b5#rbac权限模型组成\",\"66\":\"v-1c6600b5#基本模型-rbac0\",\"67\":\"v-1c6600b5#角色分层模型-rbac1\",\"68\":\"v-1c6600b5#角色限制模型-rbac2\",\"69\":\"v-1c6600b5#统一模型-rbac3\",\"70\":\"v-1c6600b5#模型关键点\",\"71\":\"v-1c6600b5#利用rbac模型进行权限体系的设计\",\"72\":\"v-1c6600b5#rbac权限体系精简设计-用户量小\",\"73\":\"v-1c6600b5#rbac权限体系完整设计-用户量大\",\"74\":\"v-1c6600b5#rbac权限模型优点\",\"75\":\"v-1c6600b5#rbac权限模型缺陷\",\"76\":\"v-1c6600b5@0\",\"77\":\"v-1c6600b5@1\",\"78\":\"v-7320bae4\",\"79\":\"v-9bf10bb8\",\"80\":\"v-9bf10bb8#前言\",\"81\":\"v-9bf10bb8#_1-sql-简介\",\"82\":\"v-9bf10bb8#_1-1-数据库术语\",\"83\":\"v-9bf10bb8#_1-2-sql-语法\",\"84\":\"v-9bf10bb8#_1-2-1-sql-语法结构\",\"85\":\"v-9bf10bb8#_1-2-2-sql-语法要点\",\"86\":\"v-9bf10bb8#_1-3-sql-分类\",\"87\":\"v-9bf10bb8#_1-3-1-数据定义语言-ddl\",\"88\":\"v-9bf10bb8#_1-3-2-数据操纵语言-dml\",\"89\":\"v-9bf10bb8#_1-3-3-事务控制语言-tcl\",\"90\":\"v-9bf10bb8#_1-3-4-数据控制语言-dcl\",\"91\":\"v-9bf10bb8#_2-数据定义-create、alter、drop\",\"92\":\"v-9bf10bb8#_2-1-数据库-database\",\"93\":\"v-9bf10bb8#_2-1-1-创建数据库\",\"94\":\"v-9bf10bb8#_2-1-2-删除数据库\",\"95\":\"v-9bf10bb8#_2-1-3-选择数据库\",\"96\":\"v-9bf10bb8#_2-2-数据表-table\",\"97\":\"v-9bf10bb8#_2-2-1-删除数据表\",\"98\":\"v-9bf10bb8#_2-2-2-创建数据表\",\"99\":\"v-9bf10bb8#_2-2-3-修改数据表\",\"100\":\"v-9bf10bb8#添加列\",\"101\":\"v-9bf10bb8#删除列\",\"102\":\"v-9bf10bb8#修改列\",\"103\":\"v-9bf10bb8#_2-3-视图-view\",\"104\":\"v-9bf10bb8#_2-3-1-创建视图\",\"105\":\"v-9bf10bb8#_2-3-2-删除视图\",\"106\":\"v-9bf10bb8#_2-4-索引-index\",\"107\":\"v-9bf10bb8#_2-4-1-创建索引\",\"108\":\"v-9bf10bb8#_2-4-2-创建唯一索引\",\"109\":\"v-9bf10bb8#_2-4-3-删除索引\",\"110\":\"v-9bf10bb8#_2-4-4-添加主键\",\"111\":\"v-9bf10bb8#_2-4-5-删除主键\",\"112\":\"v-9bf10bb8#_2-5-约束\",\"113\":\"v-9bf10bb8#_3-增删改查-crud\",\"114\":\"v-9bf10bb8#_3-1-插入数据\",\"115\":\"v-9bf10bb8#插入完整的行\",\"116\":\"v-9bf10bb8#插入行的一部分\",\"117\":\"v-9bf10bb8#插入查询出来的数据\",\"118\":\"v-9bf10bb8#_3-2-更新数据\",\"119\":\"v-9bf10bb8#_3-3-删除数据\",\"120\":\"v-9bf10bb8#删除表中的指定数据\",\"121\":\"v-9bf10bb8#清空表中的数据\",\"122\":\"v-9bf10bb8#_3-4-查询数据\",\"123\":\"v-9bf10bb8#查询单列\",\"124\":\"v-9bf10bb8#查询多列\",\"125\":\"v-9bf10bb8#查询所有列\",\"126\":\"v-9bf10bb8#查询不同的值\",\"127\":\"v-9bf10bb8#限制查询数量\",\"128\":\"v-9bf10bb8#_4-过滤数据-where\",\"129\":\"v-9bf10bb8#_4-1-where-子句\",\"130\":\"v-9bf10bb8#_4-2-比较操作符\",\"131\":\"v-9bf10bb8#_4-3-范围操作符\",\"132\":\"v-9bf10bb8#_4-4-逻辑操作符\",\"133\":\"v-9bf10bb8#_4-5-通配符\",\"134\":\"v-9bf10bb8#_5-排序-order-by\",\"135\":\"v-9bf10bb8#_6-分组-group-by\",\"136\":\"v-9bf10bb8#_6-1-having\",\"137\":\"v-9bf10bb8#_7-连接-join\",\"138\":\"v-9bf10bb8#_7-1-自连接\",\"139\":\"v-9bf10bb8#_7-2-自然连接-natural-join\",\"140\":\"v-9bf10bb8#_7-3-内连接-inner-join\",\"141\":\"v-9bf10bb8#_7-4-外连接-outer-join\",\"142\":\"v-9bf10bb8#_7-5-左连接-left-join\",\"143\":\"v-9bf10bb8#_7-6-右连接-right-join\",\"144\":\"v-9bf10bb8#_8-组合-union\",\"145\":\"v-9bf10bb8#_8-1-join-vs-union\",\"146\":\"v-9bf10bb8#_9-函数\",\"147\":\"v-9bf10bb8#_9-1-文本处理\",\"148\":\"v-9bf10bb8#_9-2-日期和时间处理\",\"149\":\"v-9bf10bb8#_9-3-数值处理\",\"150\":\"v-9bf10bb8#_9-4-汇总\",\"151\":\"v-9bf10bb8#_10-事务\",\"152\":\"v-9bf10bb8#_10-1-acid\",\"153\":\"v-9bf10bb8#_10-2-事务隔离级别\",\"154\":\"v-9bf10bb8#_11-权限控制\",\"155\":\"v-9bf10bb8#_11-1-创建账户\",\"156\":\"v-9bf10bb8#_11-2-修改账户名\",\"157\":\"v-9bf10bb8#_11-3-删除账户\",\"158\":\"v-9bf10bb8#_11-4-查看权限\",\"159\":\"v-9bf10bb8#_11-5-授予权限\",\"160\":\"v-9bf10bb8#_11-6-删除权限\",\"161\":\"v-9bf10bb8#_11-7-更改密码\",\"162\":\"v-9bf10bb8#_12-存储过程\",\"163\":\"v-9bf10bb8#_12-1-使用存储过程\",\"164\":\"v-9bf10bb8#_12-2-存储过程的利弊\",\"165\":\"v-9bf10bb8#_13-触发器\",\"166\":\"v-9bf10bb8#_13-1-触发器特性\",\"167\":\"v-9bf10bb8#_13-2-触发器指令\",\"168\":\"v-9bf10bb8#_14-游标\",\"169\":\"v-9bf10bb8#连接和组合\",\"170\":\"v-9bf10bb8#连接-join\",\"171\":\"v-9bf10bb8#内连接-inner-join\",\"172\":\"v-9bf10bb8#自连接\",\"173\":\"v-9bf10bb8#自然连接-natural-join\",\"174\":\"v-9bf10bb8#外连接-outer-join\",\"175\":\"v-9bf10bb8#左连接-left-join\",\"176\":\"v-9bf10bb8#右连接-right-join\",\"177\":\"v-9bf10bb8#组合-union\",\"178\":\"v-9bf10bb8#join-vs-union\",\"179\":\"v-9bf10bb8#函数\",\"180\":\"v-9bf10bb8#文本处理\",\"181\":\"v-9bf10bb8#日期和时间处理\",\"182\":\"v-9bf10bb8#数值处理\",\"183\":\"v-9bf10bb8#汇总\",\"184\":\"v-9bf10bb8#分组\",\"185\":\"v-9bf10bb8#group-by\",\"186\":\"v-9bf10bb8#having\",\"187\":\"v-9bf10bb8#事务\",\"188\":\"v-9bf10bb8#acid\",\"189\":\"v-9bf10bb8#事务隔离级别\",\"190\":\"v-9bf10bb8#权限控制\",\"191\":\"v-9bf10bb8#创建账户\",\"192\":\"v-9bf10bb8#修改账户名\",\"193\":\"v-9bf10bb8#删除账户\",\"194\":\"v-9bf10bb8#查看权限\",\"195\":\"v-9bf10bb8#授予权限\",\"196\":\"v-9bf10bb8#删除权限\",\"197\":\"v-9bf10bb8#更改密码\",\"198\":\"v-9bf10bb8#存储过程\",\"199\":\"v-9bf10bb8#使用存储过程\",\"200\":\"v-9bf10bb8#存储过程的利弊\",\"201\":\"v-9bf10bb8#触发器\",\"202\":\"v-9bf10bb8#触发器特性\",\"203\":\"v-9bf10bb8#触发器指令\",\"204\":\"v-9bf10bb8#游标\",\"205\":\"v-9bf10bb8#参考资料\",\"206\":\"v-9bf10bb8@1\",\"207\":\"v-0bfd959e\",\"208\":\"v-0bfd959e#索引和约束\",\"209\":\"v-0bfd959e#什么是索引\",\"210\":\"v-0bfd959e#索引的优缺点\",\"211\":\"v-0bfd959e#何时使用索引\",\"212\":\"v-0bfd959e#索引的类型\",\"213\":\"v-0bfd959e#索引的数据结构\",\"214\":\"v-0bfd959e#b-树\",\"215\":\"v-0bfd959e#b-树-1\",\"216\":\"v-0bfd959e#b-树-vs-b-树\",\"217\":\"v-0bfd959e#hash\",\"218\":\"v-0bfd959e#索引策略\",\"219\":\"v-0bfd959e#索引基本原则\",\"220\":\"v-0bfd959e#独立的列\",\"221\":\"v-0bfd959e#前缀索引和索引选择性\",\"222\":\"v-0bfd959e#多列索引\",\"223\":\"v-0bfd959e#聚簇索引\",\"224\":\"v-0bfd959e#覆盖索引\",\"225\":\"v-0bfd959e#使用索引扫描来做排序\",\"226\":\"v-0bfd959e#最左前缀匹配原则\",\"227\":\"v-0bfd959e#和-in-可以乱序\",\"228\":\"v-0bfd959e#约束\",\"229\":\"v-0bfd959e#并发控制\",\"230\":\"v-0bfd959e#乐观锁和悲观锁\",\"231\":\"v-0bfd959e#行级锁和表级锁\",\"232\":\"v-0bfd959e#读写锁\",\"233\":\"v-0bfd959e#意向锁\",\"234\":\"v-0bfd959e#mvcc\",\"235\":\"v-0bfd959e#next-key-锁\",\"236\":\"v-0bfd959e#事务\",\"237\":\"v-0bfd959e#acid\",\"238\":\"v-0bfd959e#并发一致性问题\",\"239\":\"v-0bfd959e#事务隔离\",\"240\":\"v-0bfd959e#分布式事务\",\"241\":\"v-0bfd959e#两阶段提交\",\"242\":\"v-0bfd959e#柔性事务\",\"243\":\"v-0bfd959e#事务方案对比\",\"244\":\"v-0bfd959e#分库分表\",\"245\":\"v-0bfd959e#什么是分库分表\",\"246\":\"v-0bfd959e#垂直切分\",\"247\":\"v-0bfd959e#水平拆分\",\"248\":\"v-0bfd959e#分库分表的优点\",\"249\":\"v-0bfd959e#分库分表策略\",\"250\":\"v-0bfd959e#分库分表中间件\",\"251\":\"v-0bfd959e#常见的分库分表中间件\",\"252\":\"v-0bfd959e#分库分表中间件技术选型\",\"253\":\"v-0bfd959e#分库分表的问题\",\"254\":\"v-0bfd959e#分布式事务-1\",\"255\":\"v-0bfd959e#跨节点-join\",\"256\":\"v-0bfd959e#跨节点的-count-order-by-group-by-以及聚合函数\",\"257\":\"v-0bfd959e#分布式-id\",\"258\":\"v-0bfd959e#数据迁移-容量规划-扩容等问题\",\"259\":\"v-0bfd959e#集群\",\"260\":\"v-0bfd959e#复制机制\",\"261\":\"v-0bfd959e#读写分离\",\"262\":\"v-0bfd959e#数据库优化\",\"263\":\"v-0bfd959e#sql-优化\",\"264\":\"v-0bfd959e#执行计划\",\"265\":\"v-0bfd959e#访问数据优化\",\"266\":\"v-0bfd959e#重构查询方式\",\"267\":\"v-0bfd959e#切分查询\",\"268\":\"v-0bfd959e#分解关联查询\",\"269\":\"v-0bfd959e#sql-语句细节\",\"270\":\"v-0bfd959e#选择最有效率的表名顺序\",\"271\":\"v-0bfd959e#where-子句中的连接顺序\",\"272\":\"v-0bfd959e#select-子句中避免使用-号\",\"273\":\"v-0bfd959e#用-truncate-替代-delete\",\"274\":\"v-0bfd959e#使用内部函数提高-sql-效率\",\"275\":\"v-0bfd959e#使用表或列的别名\",\"276\":\"v-0bfd959e#sql-关键字大写\",\"277\":\"v-0bfd959e#用-替代\",\"278\":\"v-0bfd959e#用-in-替代-or\",\"279\":\"v-0bfd959e#总是使用索引的第一个列\",\"280\":\"v-0bfd959e#sql-关键字尽量大写\",\"281\":\"v-0bfd959e#结构优化\",\"282\":\"v-0bfd959e#数据类型优化原则\",\"283\":\"v-0bfd959e#范式和反范式\",\"284\":\"v-0bfd959e#配置优化\",\"285\":\"v-0bfd959e#硬件优化\",\"286\":\"v-0bfd959e#数据库理论\",\"287\":\"v-0bfd959e#函数依赖\",\"288\":\"v-0bfd959e#异常\",\"289\":\"v-0bfd959e#范式\",\"290\":\"v-0bfd959e#第一范式-1nf\",\"291\":\"v-0bfd959e#第二范式-2nf\",\"292\":\"v-0bfd959e#第三范式-3nf\",\"293\":\"v-0bfd959e#存储引擎\",\"294\":\"v-0bfd959e#innodb-vs-myisam\",\"295\":\"v-0bfd959e#数据库比较\",\"296\":\"v-0bfd959e#常见数据库比较\",\"297\":\"v-0bfd959e#oracle-vs-mysql\",\"298\":\"v-0bfd959e#数据库对象差异\",\"299\":\"v-0bfd959e#sql-差异\",\"300\":\"v-0bfd959e#事务差异\",\"301\":\"v-0bfd959e#数据类型比较\",\"302\":\"v-0bfd959e#sql-faq\",\"303\":\"v-0bfd959e#select-count-、select-count-1-和-select-count-具体字段-性能有差别吗\",\"304\":\"v-0bfd959e#order-by-是对分的组排序还是对分组中的记录排序呢\",\"305\":\"v-0bfd959e#select-语句内部的执行步骤\",\"306\":\"v-0bfd959e#解哪种情况下应该使用-exists-哪种情况应该用-in\",\"307\":\"v-0bfd959e@0\",\"308\":\"v-205ce710\",\"309\":\"v-205ce710#_0、go与其它语言\",\"310\":\"v-205ce710#_0、什么是面向对象\",\"311\":\"v-205ce710#_1、go语言和java有什么区别\",\"312\":\"v-205ce710#_2、go-是面向对象的语言吗\",\"313\":\"v-205ce710#_3、go-实现面向对象编程\",\"314\":\"v-205ce710#封装\",\"315\":\"v-205ce710#继承\",\"316\":\"v-205ce710#多态\",\"317\":\"v-205ce710#_4、go语言和python的区别\",\"318\":\"v-205ce710#_5、go-与-node-js\",\"319\":\"v-205ce710#一、基础部分\",\"320\":\"v-205ce710#_0、为什么选择golang\",\"321\":\"v-205ce710#golang-缺点\",\"322\":\"v-205ce710#_1、golang-中-make-和-new-的区别-基本必问\",\"323\":\"v-205ce710#_2、io多路复用\",\"324\":\"v-205ce710#_3、for-range-的时候它的地址会发生变化么\",\"325\":\"v-205ce710#_4、go-defer-多个-defer-的顺序-defer-在什么时机会修改返回值\",\"326\":\"v-205ce710#_5、uint-类型溢出问题\",\"327\":\"v-205ce710#_6、能介绍下-rune-类型吗\",\"328\":\"v-205ce710#_7、-golang-中解析-tag-是怎么实现的-反射原理是什么-中高级肯定会问-比较难-需要自己多去总结\",\"329\":\"v-205ce710#_8、调用函数传入结构体时-应该传值还是指针-golang-都是传值\",\"330\":\"v-205ce710#_9、goroutine什么情况下会阻塞\",\"331\":\"v-205ce710#_10、讲讲-go-的-select-底层数据结构和一些特性-难点-没有项目经常可能说不清-面试一般会问你项目中怎么使用select\",\"332\":\"v-205ce710#_11、讲讲-go-的-defer-底层数据结构和一些特性\",\"333\":\"v-205ce710#_12、单引号-双引号-反引号的区别\",\"334\":\"v-205ce710#_13、go出现panic的场景\",\"335\":\"v-205ce710#https-www-cnblogs-com-paulwhw-p-15585467-html\",\"336\":\"v-205ce710#_14、go是否支持while循环-如何实现这种机制\",\"337\":\"v-205ce710#_15、go里面如何实现set\",\"338\":\"v-205ce710#_16、go如何实现类似于java当中的继承机制\",\"339\":\"v-205ce710#_17、怎么去复用一个接口的方法\",\"340\":\"v-205ce710#_18、go里面的\",\"341\":\"v-205ce710#_19、goroutine创建的时候如果要传一个参数进去有什么要注意的点\",\"342\":\"v-205ce710#_20、写go单元测试的规范\",\"343\":\"v-205ce710#_21、单步调试\",\"344\":\"v-205ce710#_22、导入一个go的工程-有些依赖找不到-改怎么办\",\"345\":\"v-205ce710#_23、值拷贝-与-引用拷贝-深拷贝-与-浅拷贝\",\"346\":\"v-205ce710#深浅拷贝的本质区别\",\"347\":\"v-205ce710#_24、精通golang项目依赖go-modules\",\"348\":\"v-205ce710#_25、go-多返回值怎么实现的\",\"349\":\"v-205ce710#_26、go-语言中不同的类型如何比较是否相等\",\"350\":\"v-205ce710#_27、go中init-函数的特征\",\"351\":\"v-205ce710#_28、go中-uintptr和-unsafe-pointer-的区别\",\"352\":\"v-205ce710#二、slice\",\"353\":\"v-205ce710#_1、数组和切片的区别-基本必问\",\"354\":\"v-205ce710#_2、讲讲-go-的-slice-底层数据结构和一些特性\",\"355\":\"v-205ce710#_3、golang中数组和slice作为参数的区别-slice作为参数传递有什么问题\",\"356\":\"v-205ce710#_4、从数组中取一个相同大小的slice有成本吗\",\"357\":\"v-205ce710#三、map相关\",\"358\":\"v-205ce710#_1、map-使用注意的点-是否并发安全\",\"359\":\"v-205ce710#_2、map-循环是有序的还是无序的\",\"360\":\"v-205ce710#_3、-map-中删除一个-key-它的内存会释放么-常问\",\"361\":\"v-205ce710#_4、怎么处理对-map-进行并发访问-有没有其他方案-区别是什么\",\"362\":\"v-205ce710#_5、-nil-map-和空-map-有何不同\",\"363\":\"v-205ce710#_6、map-的数据结构是什么\",\"364\":\"v-205ce710#hmap-的结构如下\",\"365\":\"v-205ce710#bucket数据结构\",\"366\":\"v-205ce710#解决哈希冲突-四种方法\",\"367\":\"v-205ce710#哈希冲突\",\"368\":\"v-205ce710#负载因子\",\"369\":\"v-205ce710#_7、是怎么实现扩容\",\"370\":\"v-205ce710#map-的容量大小\",\"371\":\"v-205ce710#触发-map-扩容的条件\",\"372\":\"v-205ce710#增量扩容\",\"373\":\"v-205ce710#等量扩容\",\"374\":\"v-205ce710#_8、查找过程\",\"375\":\"v-205ce710#_9、插入过程\",\"376\":\"v-205ce710#_10、slices能作为map类型的key吗\",\"377\":\"v-205ce710#四、接口\",\"378\":\"v-205ce710#_1、go-语言与鸭子类型的关系\",\"379\":\"v-205ce710#_2、值接收者和指针接收者的区别\",\"380\":\"v-205ce710#方法\",\"381\":\"v-205ce710#值接收者和指针接收者\",\"382\":\"v-205ce710#两者分别在何时使用\",\"383\":\"v-205ce710#_3、iface-和-eface-的区别是什么\",\"384\":\"v-205ce710#_4、接口的动态类型和动态值\",\"385\":\"v-205ce710#_5、编译器自动检测类型是否实现接口\",\"386\":\"v-205ce710#_6、接口的构造过程是怎样的\",\"387\":\"v-205ce710#_7、类型转换和断言的区别\",\"388\":\"v-205ce710#类型转换\",\"389\":\"v-205ce710#断言\",\"390\":\"v-205ce710#_8、接口转换的原理\",\"391\":\"v-205ce710#_9、如何用-interface-实现多态\",\"392\":\"v-205ce710#_10、go-接口与-c-接口有何异同\",\"393\":\"v-205ce710#五-、context相关\",\"394\":\"v-205ce710#_1、context-结构是什么样的-context-使用场景和用途\",\"395\":\"v-205ce710#六、channel相关\",\"396\":\"v-205ce710#_1、channel-是否线程安全-锁用在什么地方\",\"397\":\"v-205ce710#_2、go-channel-的底层实现原理-数据结构\",\"398\":\"v-205ce710#数据结构\",\"399\":\"v-205ce710#_3、nil、关闭的-channel、有数据的-channel-再进行读、写、关闭会怎么样-各类变种题型-重要\",\"400\":\"v-205ce710#channel读写特性-15字口诀\",\"401\":\"v-205ce710#_4、向-channel-发送数据和从-channel-读数据的流程是什么样的\",\"402\":\"v-205ce710#发送流程\",\"403\":\"v-205ce710#接收流程\",\"404\":\"v-205ce710#关闭channel\",\"405\":\"v-205ce710#_5、讲讲-go-的-chan-底层数据结构和主要使用场景\",\"406\":\"v-205ce710#_6、有缓存channel和无缓存channel\",\"407\":\"v-205ce710#七、gmp相关\",\"408\":\"v-205ce710#_0、进程、线程、协程有什么区别-必问\",\"409\":\"v-205ce710#_1、什么是-gmp-必问\",\"410\":\"v-205ce710#_2、为什么要有-p\",\"411\":\"v-205ce710#_3、调度器的设计策略\",\"412\":\"v-205ce710#_3、抢占式调度是如何抢占的\",\"413\":\"v-205ce710#_4、调度器的生命周期\",\"414\":\"v-205ce710#m0\",\"415\":\"v-205ce710#g0\",\"416\":\"v-205ce710#八、锁相关\",\"417\":\"v-205ce710#_1、除了-mutex-以外还有那些方式安全读写共享变量\",\"418\":\"v-205ce710#_2、go-如何实现原子操作\",\"419\":\"v-205ce710#_3、mutex-是悲观锁还是乐观锁-悲观锁、乐观锁是什么\",\"420\":\"v-205ce710#_4、mutex-有几种模式\",\"421\":\"v-205ce710#_5、goroutine-的自旋占用资源如何解决\",\"422\":\"v-205ce710#九、并发相关\",\"423\":\"v-205ce710#_0、讲讲-go-中主协程如何等待其余协程退出\",\"424\":\"v-205ce710#_1、怎么控制并发数\",\"425\":\"v-205ce710#_2、多个-goroutine-对同一个-map-写会-panic-异常是否可以用-defer-捕获\",\"426\":\"v-205ce710#_3、如何优雅的实现一个-goroutine-池\",\"427\":\"v-205ce710#_4、golang实现多并发请求-发送多个get请求\",\"428\":\"v-205ce710#十、gc相关\",\"429\":\"v-205ce710#_1、go-gc-是怎么实现的-必问\",\"430\":\"v-205ce710#_2、go-是-gc-算法是怎么实现的-得物-出现频率低\",\"431\":\"v-205ce710#_3、gc-中-stw-时机-各个阶段是如何解决的-百度\",\"432\":\"v-205ce710#_4、gc-的触发时机\",\"433\":\"v-205ce710#十一、内存相关\",\"434\":\"v-205ce710#内存分配原理\",\"435\":\"v-205ce710#垃圾回收原理\",\"436\":\"v-205ce710#逃逸分析\",\"437\":\"v-205ce710#go语言的内存模型及堆的分配管理\",\"438\":\"v-205ce710#_1、谈谈内存泄露-什么情况下内存会泄露-怎么定位排查内存泄漏问题\",\"439\":\"v-205ce710#_2、golang-的内存逃逸吗-什么情况下会发生内存逃逸-必问\",\"440\":\"v-205ce710#_3、请简述-go-是如何分配内存的\",\"441\":\"v-205ce710#_4、go内存分配器\",\"442\":\"v-205ce710#_5、channel-分配在栈上还是堆上-哪些对象分配在堆上-哪些对象分配在栈上\",\"443\":\"v-205ce710#_6、介绍一下大对象小对象-为什么小对象多了会造成-gc-压力\",\"444\":\"v-205ce710#十二、编译\",\"445\":\"v-205ce710#逃逸分析是怎么进行的\",\"446\":\"v-205ce710#goroot-和-gopath-有什么用\",\"447\":\"v-205ce710#go-编译链接过程概述\",\"448\":\"v-205ce710#go-编译相关的命令详解\",\"449\":\"v-205ce710#go-build\",\"450\":\"v-205ce710#go-install\",\"451\":\"v-205ce710#go-run\",\"452\":\"v-205ce710#go-程序启动过程是怎样的\",\"453\":\"v-205ce710#十三、框架\",\"454\":\"v-205ce710#gin\",\"455\":\"v-205ce710#_0、特性\",\"456\":\"v-205ce710#_1、gin目录结构\",\"457\":\"v-205ce710#_2、gin框架介绍及使用-李文周的博客\",\"458\":\"v-205ce710#_3、源码\",\"459\":\"v-205ce710#go-zero\",\"460\":\"v-205ce710#字节-cloudwego\",\"461\":\"v-205ce710#http-hertz\",\"462\":\"v-205ce710#rpc-kitex\",\"463\":\"v-205ce710#参考并致谢\",\"464\":\"v-205ce710@0\",\"465\":\"v-205ce710@1\",\"466\":\"v-40fcacb3\",\"467\":\"v-40fcacb3#前言\",\"468\":\"v-40fcacb3#第-1-章-go-语言的起源与发展\",\"469\":\"v-40fcacb3#_1-1-起源与发展\",\"470\":\"v-40fcacb3#_1-2-语言的主要特性与发展的环境和影响因素\",\"471\":\"v-40fcacb3#_1-2-1-影响-go-语言发展的早期编程语言\",\"472\":\"v-40fcacb3#_1-2-2-为什么要创造一门编程语言\",\"473\":\"v-40fcacb3#_1-2-3-go-语言的发展目标\",\"474\":\"v-40fcacb3#_1-2-4-指导设计原则\",\"475\":\"v-40fcacb3#_1-2-5-语言的特性\",\"476\":\"v-40fcacb3#_1-2-6-语言的用途\",\"477\":\"v-40fcacb3#_1-2-7-关于特性缺失\",\"478\":\"v-40fcacb3#_1-2-8-使用-go-语言编程\",\"479\":\"v-40fcacb3#_1-2-9-小结\",\"480\":\"v-40fcacb3#第-2-章-安装与运行环境\",\"481\":\"v-40fcacb3#_2-1-平台与架构\",\"482\":\"v-40fcacb3#_2-2-go-环境变量\",\"483\":\"v-40fcacb3#_2-3-在-linux-上安装-go\",\"484\":\"v-40fcacb3#_2-4-在-mac-os-x-上安装-go\",\"485\":\"v-40fcacb3#_2-5-在-windows-上安装-go\",\"486\":\"v-40fcacb3#_2-6-安装目录清单\",\"487\":\"v-40fcacb3#_2-7-go-运行时-runtime\",\"488\":\"v-40fcacb3#_2-8-go-解释器\",\"489\":\"v-40fcacb3#第-3-章-编辑器、集成开发环境与其它工具\",\"490\":\"v-40fcacb3#_3-1-go-开发环境的基本要求\",\"491\":\"v-40fcacb3#_3-2-编辑器和集成开发环境\",\"492\":\"v-40fcacb3#_3-2-1-liteide\",\"493\":\"v-40fcacb3#_3-2-2-goclipse\",\"494\":\"v-40fcacb3#_3-3-调试器\",\"495\":\"v-40fcacb3#_3-4-构建并运行-go-程序\",\"496\":\"v-40fcacb3#_3-5-格式化代码\",\"497\":\"v-40fcacb3#_3-6-生成代码文档\",\"498\":\"v-40fcacb3#_3-7-其它工具\",\"499\":\"v-40fcacb3#_3-8-go-性能说明\",\"500\":\"v-40fcacb3#_3-9-与其它语言进行交互\",\"501\":\"v-40fcacb3#_3-9-1-与-c-进行交互\",\"502\":\"v-40fcacb3#_3-9-2-与-c-进行交互\",\"503\":\"v-40fcacb3#第-4-章-基本结构和基本数据类型\",\"504\":\"v-40fcacb3#_4-1-文件名、关键字与标识符\",\"505\":\"v-40fcacb3#_4-2-go-程序的基本结构和要素\",\"506\":\"v-40fcacb3#_4-2-1-包的概念、导入与可见性\",\"507\":\"v-40fcacb3#_4-2-2-函数\",\"508\":\"v-40fcacb3#_4-2-3-注释\",\"509\":\"v-40fcacb3#_4-2-4-类型\",\"510\":\"v-40fcacb3#_4-2-5-go-程序的一般结构\",\"511\":\"v-40fcacb3#_4-2-6-类型转换\",\"512\":\"v-40fcacb3#_4-2-7-go-命名规范\",\"513\":\"v-40fcacb3#_4-3-常量\",\"514\":\"v-40fcacb3#_4-4-变量\",\"515\":\"v-40fcacb3#_4-4-1-简介\",\"516\":\"v-40fcacb3#_4-4-2-值类型和引用类型\",\"517\":\"v-40fcacb3#_4-4-3-打印\",\"518\":\"v-40fcacb3#_4-4-4-简短形式-使用-赋值操作符\",\"519\":\"v-40fcacb3#_4-4-5-init-函数\",\"520\":\"v-40fcacb3#_4-5-基本类型和运算符\",\"521\":\"v-40fcacb3#_4-5-1-布尔类型-bool\",\"522\":\"v-40fcacb3#_4-5-2-数字类型\",\"523\":\"v-40fcacb3#_4-5-2-1-整型-int-和浮点型-float\",\"524\":\"v-40fcacb3#_4-5-2-2-复数\",\"525\":\"v-40fcacb3#_4-5-2-3-位运算\",\"526\":\"v-40fcacb3#_4-5-2-4-逻辑运算符\",\"527\":\"v-40fcacb3#_4-5-2-5-算术运算符\",\"528\":\"v-40fcacb3#_4-5-2-6-随机数\",\"529\":\"v-40fcacb3#_4-5-3-运算符与优先级\",\"530\":\"v-40fcacb3#_4-5-4-类型别名\",\"531\":\"v-40fcacb3#_4-5-5-字符类型\",\"532\":\"v-40fcacb3#_4-6-字符串\",\"533\":\"v-40fcacb3#_4-7-strings-和-strconv-包\",\"534\":\"v-40fcacb3#_4-7-1-前缀和后缀\",\"535\":\"v-40fcacb3#_4-7-2-字符串包含关系\",\"536\":\"v-40fcacb3#_4-7-3-判断子字符串或字符在父字符串中出现的位置-索引\",\"537\":\"v-40fcacb3#_4-7-4-字符串替换\",\"538\":\"v-40fcacb3#_4-7-5-统计字符串出现次数\",\"539\":\"v-40fcacb3#_4-7-6-重复字符串\",\"540\":\"v-40fcacb3#_4-7-7-修改字符串大小写\",\"541\":\"v-40fcacb3#_4-7-8-修剪字符串\",\"542\":\"v-40fcacb3#_4-7-9-分割字符串\",\"543\":\"v-40fcacb3#_4-7-10-拼接-slice-到字符串\",\"544\":\"v-40fcacb3#_4-7-11-从字符串中读取内容\",\"545\":\"v-40fcacb3#_4-7-12-字符串与其它类型的转换\",\"546\":\"v-40fcacb3#_4-8-时间和日期\",\"547\":\"v-40fcacb3#_4-9-指针\",\"548\":\"v-40fcacb3#第-5-章-控制结构\",\"549\":\"v-40fcacb3#_5-1-if-else-结构\",\"550\":\"v-40fcacb3#_5-2-测试多返回值函数的错误\",\"551\":\"v-40fcacb3#_5-3-switch-结构\",\"552\":\"v-40fcacb3#_5-4-for-结构\",\"553\":\"v-40fcacb3#_5-4-1-基于计数器的迭代\",\"554\":\"v-40fcacb3#练习题\",\"555\":\"v-40fcacb3#_5-4-2-基于条件判断的迭代\",\"556\":\"v-40fcacb3#_5-4-3-无限循环\",\"557\":\"v-40fcacb3#_5-4-4-for-range-结构\",\"558\":\"v-40fcacb3#_5-5-break-与-continue\",\"559\":\"v-40fcacb3#_5-6-标签与-goto\",\"560\":\"v-40fcacb3#第-6-章-函数-function\",\"561\":\"v-40fcacb3#_6-1-介绍\",\"562\":\"v-40fcacb3#_6-2-函数参数与返回值\",\"563\":\"v-40fcacb3#_6-2-1-按值传递-call-by-value-按引用传递-call-by-reference\",\"564\":\"v-40fcacb3#_6-2-2-命名的返回值-named-return-variables\",\"565\":\"v-40fcacb3#_6-2-3-空白符-blank-identifier\",\"566\":\"v-40fcacb3#_6-2-4-改变外部变量-outside-variable\",\"567\":\"v-40fcacb3#_6-3-传递变长参数\",\"568\":\"v-40fcacb3#_6-4-defer-和追踪\",\"569\":\"v-40fcacb3#_6-5-内置函数\",\"570\":\"v-40fcacb3#_6-6-递归函数\",\"571\":\"v-40fcacb3#练习题-1\",\"572\":\"v-40fcacb3#_6-7-将函数作为参数\",\"573\":\"v-40fcacb3#_6-8-闭包\",\"574\":\"v-40fcacb3#_6-9-应用闭包-将函数作为返回值\",\"575\":\"v-40fcacb3#_6-10-使用闭包调试\",\"576\":\"v-40fcacb3#_6-11-计算函数执行时间\",\"577\":\"v-40fcacb3#_6-12-通过内存缓存来提升性能\",\"578\":\"v-40fcacb3#第-7-章-数组-array-与切片-slice\",\"579\":\"v-40fcacb3#_7-1-声明和初始化\",\"580\":\"v-40fcacb3#_7-1-1-概念\",\"581\":\"v-40fcacb3#_7-1-2-数组常量\",\"582\":\"v-40fcacb3#_7-1-3-多维数组\",\"583\":\"v-40fcacb3#_7-1-4-将数组传递给函数\",\"584\":\"v-40fcacb3#_7-2-切片\",\"585\":\"v-40fcacb3#_7-2-1-概念\",\"586\":\"v-40fcacb3#_7-2-2-将切片传递给函数\",\"587\":\"v-40fcacb3#_7-2-3-用-make-创建一个切片\",\"588\":\"v-40fcacb3#_7-2-4-new-和-make-的区别\",\"589\":\"v-40fcacb3#_7-2-5-多维切片\",\"590\":\"v-40fcacb3#_7-2-6-bytes-包\",\"591\":\"v-40fcacb3#_7-3-for-range-结构\",\"592\":\"v-40fcacb3#_7-4-切片重组-reslice\",\"593\":\"v-40fcacb3#_7-5-切片的复制与追加\",\"594\":\"v-40fcacb3#_7-6-字符串、数组和切片的应用\",\"595\":\"v-40fcacb3#_7-6-1-从字符串生成字节切片\",\"596\":\"v-40fcacb3#_7-6-2-获取字符串的某一部分\",\"597\":\"v-40fcacb3#_7-6-3-字符串和切片的内存结构\",\"598\":\"v-40fcacb3#_7-6-4-修改字符串中的某个字符\",\"599\":\"v-40fcacb3#_7-6-5-字节数组对比函数\",\"600\":\"v-40fcacb3#_7-6-6-搜索及排序切片和数组\",\"601\":\"v-40fcacb3#_7-6-7-append-函数常见操作\",\"602\":\"v-40fcacb3#_7-6-8-切片和垃圾回收\",\"603\":\"v-40fcacb3#第-8-章-map\",\"604\":\"v-40fcacb3#_8-1-声明、初始化和-make\",\"605\":\"v-40fcacb3#_8-1-1-概念\",\"606\":\"v-40fcacb3#_8-1-2-map-容量\",\"607\":\"v-40fcacb3#_8-1-3-用切片作为-map-的值\",\"608\":\"v-40fcacb3#_8-2-测试键值对是否存在及删除元素\",\"609\":\"v-40fcacb3#_8-3-for-range-的配套用法\",\"610\":\"v-40fcacb3#_8-4-map-类型的切片\",\"611\":\"v-40fcacb3#_8-5-map-的排序\",\"612\":\"v-40fcacb3#_8-6-将-map-的键值对调\",\"613\":\"v-40fcacb3#第-9-章-包-package\",\"614\":\"v-40fcacb3#_9-1-标准库\",\"615\":\"v-40fcacb3#日期函数-time\",\"616\":\"v-40fcacb3#time-now-获取当前时间\",\"617\":\"v-40fcacb3#格式化日期\",\"618\":\"v-40fcacb3#获取当前时间戳\",\"619\":\"v-40fcacb3#时间戳转日期字符串\",\"620\":\"v-40fcacb3#日期字符串转换成时间戳\",\"621\":\"v-40fcacb3#时间间隔\",\"622\":\"v-40fcacb3#时间操作函数\",\"623\":\"v-40fcacb3#定时器\",\"624\":\"v-40fcacb3#_9-2-regexp-包\",\"625\":\"v-40fcacb3#_9-3-锁和-sync-包\",\"626\":\"v-40fcacb3#_9-4-精密计算和-big-包\",\"627\":\"v-40fcacb3#_9-5-自定义包和可见性\",\"628\":\"v-40fcacb3#_9-6-为自定义包使用-godoc\",\"629\":\"v-40fcacb3#_9-7-使用-go-install-安装自定义包\",\"630\":\"v-40fcacb3#_9-8-自定义包的目录结构、go-install-和-go-test\",\"631\":\"v-40fcacb3#_9-8-1-自定义包的目录结构\",\"632\":\"v-40fcacb3#_9-8-2-本地安装包\",\"633\":\"v-40fcacb3#_9-8-3-依赖系统的代码\",\"634\":\"v-40fcacb3#_9-9-通过-git-打包和安装\",\"635\":\"v-40fcacb3#_9-9-1-安装到-github\",\"636\":\"v-40fcacb3#_9-9-2-从-github-安装\",\"637\":\"v-40fcacb3#_9-10-go-的外部包和项目\",\"638\":\"v-40fcacb3#_9-11-在-go-程序中使用外部库\",\"639\":\"v-40fcacb3#第-10-章-结构体-struct-与方法-method\",\"640\":\"v-40fcacb3#_10-1-结构体定义\",\"641\":\"v-40fcacb3#_10-2-使用工厂方法创建结构体实例\",\"642\":\"v-40fcacb3#_10-2-1-结构体工厂\",\"643\":\"v-40fcacb3#_10-2-2-map-和-struct-vs-new-和-make\",\"644\":\"v-40fcacb3#_10-3-使用自定义包中的结构体\",\"645\":\"v-40fcacb3#_10-4-带标签的结构体\",\"646\":\"v-40fcacb3#_10-5-匿名字段和内嵌结构体\",\"647\":\"v-40fcacb3#_10-5-1-定义\",\"648\":\"v-40fcacb3#_10-5-2-内嵌结构体\",\"649\":\"v-40fcacb3#_10-5-3-命名冲突\",\"650\":\"v-40fcacb3#_10-6-方法\",\"651\":\"v-40fcacb3#_10-6-1-方法是什么\",\"652\":\"v-40fcacb3#_10-6-2-函数和方法的区别\",\"653\":\"v-40fcacb3#_10-6-3-指针或值作为接收者\",\"654\":\"v-40fcacb3#_10-6-4-方法和未导出字段\",\"655\":\"v-40fcacb3#_10-6-5-内嵌类型的方法和继承\",\"656\":\"v-40fcacb3#_10-6-6-如何在类型中嵌入功能\",\"657\":\"v-40fcacb3#_10-6-7-多重继承\",\"658\":\"v-40fcacb3#_10-6-8-通用方法和方法命名\",\"659\":\"v-40fcacb3#_10-6-9-和其他面向对象语言比较-go-的类型和方法\",\"660\":\"v-40fcacb3#_10-7-类型的-string-方法和格式化描述符\",\"661\":\"v-40fcacb3#_10-8-垃圾回收和-setfinalizer\",\"662\":\"v-40fcacb3#第-11-章-接口-interface-与反射-reflection\",\"663\":\"v-40fcacb3#_11-9-1-概念\",\"664\":\"v-40fcacb3#_11-9-2-构建通用类型或包含不同类型变量的数组\",\"665\":\"v-40fcacb3#_11-9-3-复制数据切片至空接口切片\",\"666\":\"v-40fcacb3#_11-9-4-通用类型的节点数据结构\",\"667\":\"v-40fcacb3#_11-9-5-接口到接口\",\"668\":\"v-40fcacb3#_11-10-1-方法和类型的反射\",\"669\":\"v-40fcacb3#_11-10-2-通过反射修改-设置-值\",\"670\":\"v-40fcacb3#_11-10-3-反射结构\",\"671\":\"v-40fcacb3#_11-12-1-go-的动态类型\",\"672\":\"v-40fcacb3#_11-12-2-动态方法调用\",\"673\":\"v-40fcacb3#_11-12-3-接口的提取\",\"674\":\"v-40fcacb3#_11-12-4-显式地指明类型实现了某个接口\",\"675\":\"v-40fcacb3#_11-12-5-空接口和函数重载\",\"676\":\"v-40fcacb3#_11-12-6-接口的继承\",\"677\":\"v-40fcacb3#第-12-章-读写数据\",\"678\":\"v-40fcacb3#_12-2-1-读文件\",\"679\":\"v-40fcacb3#_12-2-2-compress-包-读取压缩文件\",\"680\":\"v-40fcacb3#_12-2-3-写文件\",\"681\":\"v-40fcacb3#_12-4-1-os-包\",\"682\":\"v-40fcacb3#_12-4-2-flag-包\",\"683\":\"v-40fcacb3#反序列化\",\"684\":\"v-40fcacb3#解码任意的数据\",\"685\":\"v-40fcacb3#解码数据到结构\",\"686\":\"v-40fcacb3#编码和解码流\",\"687\":\"v-40fcacb3#第-13-章-错误处理与测试\",\"688\":\"v-40fcacb3#_13-1-1-定义错误\",\"689\":\"v-40fcacb3#_13-1-2-用-fmt-创建错误对象\",\"690\":\"v-40fcacb3#_13-10-1-时间和内存消耗\",\"691\":\"v-40fcacb3#_13-10-2-用-go-test-调试\",\"692\":\"v-40fcacb3#_13-10-3-用-pprof-调试\",\"693\":\"v-40fcacb3#第-14-章-协程-goroutine-与通道-channel\",\"694\":\"v-40fcacb3#_14-1-1-什么是协程\",\"695\":\"v-40fcacb3#_14-1-2-并发和并行的差异\",\"696\":\"v-40fcacb3#_14-1-3-使用-gomaxprocs\",\"697\":\"v-40fcacb3#_14-1-4-如何用命令行指定使用的核心数量\",\"698\":\"v-40fcacb3#_14-1-5-go-协程-goroutines-和协程-coroutines\",\"699\":\"v-40fcacb3#_14-2-1-概念\",\"700\":\"v-40fcacb3#_14-2-2-通信操作符\",\"701\":\"v-40fcacb3#_14-2-3-通道阻塞\",\"702\":\"v-40fcacb3#_14-2-4-通过一个-或多个-通道交换数据进行协程同步。\",\"703\":\"v-40fcacb3#_14-2-5-同步通道-使用带缓冲的通道\",\"704\":\"v-40fcacb3#_14-2-6-协程中用通道输出结果\",\"705\":\"v-40fcacb3#_14-2-7-信号量模式\",\"706\":\"v-40fcacb3#_14-2-8-实现并行的-for-循环\",\"707\":\"v-40fcacb3#_14-2-9-用带缓冲通道实现一个信号量\",\"708\":\"v-40fcacb3#_14-2-10-给通道使用-for-循环\",\"709\":\"v-40fcacb3#_14-2-11-通道的方向\",\"710\":\"v-40fcacb3#第-15-章-网络、模板与网页应用\",\"711\":\"v-40fcacb3#第-16-章-常见的陷阱与错误\",\"712\":\"v-40fcacb3#第-17-章-模式\",\"713\":\"v-40fcacb3#第-18-章-出于性能考虑的实用代码片段\",\"714\":\"v-40fcacb3#第-19-章-构建一个完整的应用程序\",\"715\":\"v-40fcacb3#第-20-章-go-语言在-google-app-engine-的使用\",\"716\":\"v-40fcacb3#第-21-章-真实世界中-go-的使用\",\"717\":\"v-40fcacb3@0\",\"718\":\"v-40fcacb3@1\",\"719\":\"v-47894fad\",\"720\":\"v-47894fad#_1-java简介\",\"721\":\"v-47894fad#jdk21\",\"722\":\"v-47894fad#_1-虚拟线程\",\"723\":\"v-47894fad#常用的正则匹配规则\",\"724\":\"v-47894fad#java-swing-jfilechooser-文件选择器\",\"725\":\"v-47894fad#_1-常用api\",\"726\":\"v-47894fad#_2-设置默认打开的路径为桌面\",\"727\":\"v-47894fad#_3-拿到选择的文件路径\",\"728\":\"v-47894fad#_4-如何选择文件夹\",\"729\":\"v-47894fad#_5-如何过滤文件\",\"730\":\"v-47894fad#_6-如何将页面修改为英文\",\"731\":\"v-47894fad#_7-如何选择多个文件\",\"732\":\"v-47894fad#_8-如何去掉所有文件选项\",\"733\":\"v-47894fad@0\",\"734\":\"v-47894fad@1\",\"735\":\"v-12ceab10\",\"736\":\"v-12ceab10#_1-springboot简介\",\"737\":\"v-12ceab10@0\",\"738\":\"v-12ceab10@1\",\"739\":\"v-d2bc8a36\",\"740\":\"v-d2bc8a36#_1-springcloud简介\",\"741\":\"v-d2bc8a36@0\",\"742\":\"v-d2bc8a36@1\",\"743\":\"v-a6ad303c\",\"744\":\"v-a6ad303c#_1-spring-framework简介\",\"745\":\"v-a6ad303c@0\",\"746\":\"v-a6ad303c@1\",\"747\":\"v-09c2344d\",\"748\":\"v-09c2344d#_1-typescript编译和运行\",\"749\":\"v-09c2344d#_1-1-编译-ts-js\",\"750\":\"v-09c2344d#_1-2-运行\",\"751\":\"v-09c2344d#_2-变量声明\",\"752\":\"v-09c2344d#_2-1-let声明\",\"753\":\"v-09c2344d#_2-2-const声明\",\"754\":\"v-09c2344d#_3-基础类型\",\"755\":\"v-09c2344d#_3-1-布尔值-boolean\",\"756\":\"v-09c2344d#_3-2-数字-number\",\"757\":\"v-09c2344d#_3-3-字符串-string\",\"758\":\"v-09c2344d#_3-4-数组\",\"759\":\"v-09c2344d#_3-5-元组-tuple\",\"760\":\"v-09c2344d#_3-6-枚举-enum\",\"761\":\"v-09c2344d#_3-7-any\",\"762\":\"v-09c2344d#_3-8-object\",\"763\":\"v-09c2344d#_3-9-void\",\"764\":\"v-09c2344d#_3-10-null-和-undefined\",\"765\":\"v-09c2344d#_3-11-never\",\"766\":\"v-09c2344d#_3-12-类型断言\",\"767\":\"v-09c2344d#_4-接口-interface\",\"768\":\"v-09c2344d#_4-1-声明\",\"769\":\"v-09c2344d#_4-2-可选属性\",\"770\":\"v-09c2344d#_4-3-只读属性\",\"771\":\"v-09c2344d#_5-类-class\",\"772\":\"v-09c2344d#_5-1-类结构\",\"773\":\"v-09c2344d#_5-2-继承\",\"774\":\"v-09c2344d@0\",\"775\":\"v-09c2344d@1\",\"776\":\"v-6de63726\",\"777\":\"v-6de63726#_1-github-action简介\",\"778\":\"v-6de63726@0\",\"779\":\"v-6de63726@1\",\"780\":\"v-45d6e7a0\",\"781\":\"v-45d6e7a0#docker简介\",\"782\":\"v-45d6e7a0#docker镜像上传github\",\"783\":\"v-45d6e7a0@0\",\"784\":\"v-45d6e7a0@1\",\"785\":\"v-0720178c\",\"786\":\"v-0720178c#_1-kubernetes简介\",\"787\":\"v-0720178c#_2-kubernetes安装\",\"788\":\"v-0720178c#_2-1-minikube\",\"789\":\"v-0720178c#_2-2-集群部署\",\"790\":\"v-0720178c#_3-kubernetes组件\",\"791\":\"v-0720178c@0\",\"792\":\"v-0720178c@1\",\"793\":\"v-0dcefd28\",\"794\":\"v-0dcefd28@0\",\"795\":\"v-0dcefd28@1\",\"796\":\"v-cb475f34\",\"797\":\"v-cb475f34@0\",\"798\":\"v-cb475f34@1\",\"799\":\"v-db0b6f0e\",\"800\":\"v-db0b6f0e#一、单例模式\",\"801\":\"v-db0b6f0e#简介\",\"802\":\"v-db0b6f0e#特点\",\"803\":\"v-db0b6f0e#实现方式\",\"804\":\"v-db0b6f0e@0\",\"805\":\"v-db0b6f0e@1\",\"806\":\"v-a8a6ee0e\",\"807\":\"v-a8a6ee0e#_1-git简介\",\"808\":\"v-a8a6ee0e#_2-git结构及基础命令\",\"809\":\"v-a8a6ee0e#_3-代码托管中心\",\"810\":\"v-a8a6ee0e#_4-本地库初始化\",\"811\":\"v-a8a6ee0e#_5-设置签名\",\"812\":\"v-a8a6ee0e#_6-查看工作区、暂存区状态\",\"813\":\"v-a8a6ee0e#_7-将工作区的-新建-修改-添加到暂存区\",\"814\":\"v-a8a6ee0e#_8-将提交至暂存区的代码回退到工作区\",\"815\":\"v-a8a6ee0e#_9-暂存区的内容提交至本地库\",\"816\":\"v-a8a6ee0e#_10-提交本地库后修改文件后进行撤销操作\",\"817\":\"v-a8a6ee0e#_11-修改文件后的提交操作\",\"818\":\"v-a8a6ee0e#_12-查看历史记录操作\",\"819\":\"v-a8a6ee0e#_13-前进后退版本\",\"820\":\"v-a8a6ee0e#_14-reset命令的三个参数\",\"821\":\"v-a8a6ee0e#_15-删除文件并找回\",\"822\":\"v-a8a6ee0e#_16-比较文件差异\",\"823\":\"v-a8a6ee0e#_17-查看分支\",\"824\":\"v-a8a6ee0e#_18-创建分支\",\"825\":\"v-a8a6ee0e#_19-切换分支\",\"826\":\"v-a8a6ee0e#_20-合并分支\",\"827\":\"v-a8a6ee0e#_21-仓库地址备忘录查看\",\"828\":\"v-a8a6ee0e#_22-推送远程库\",\"829\":\"v-a8a6ee0e#_23-远程库拉取\",\"830\":\"v-a8a6ee0e#_24-解决冲突\",\"831\":\"v-a8a6ee0e#_25-跨团队协作\",\"832\":\"v-a8a6ee0e#_26-github-dns\",\"833\":\"v-a8a6ee0e@0\",\"834\":\"v-a8a6ee0e@1\",\"835\":\"v-07cafe8d\",\"836\":\"v-07cafe8d#_1-kafka简介\",\"837\":\"v-07cafe8d@0\",\"838\":\"v-07cafe8d@1\",\"839\":\"v-70354baa\",\"840\":\"v-70354baa#_1-rabbitmq简介\",\"841\":\"v-70354baa@0\",\"842\":\"v-70354baa@1\",\"843\":\"v-172fd483\",\"844\":\"v-172fd483#_1-介绍\",\"845\":\"v-172fd483#_1-1-什么是json-web-token\",\"846\":\"v-172fd483#_1-2-它解决了什么问题\",\"847\":\"v-172fd483#_2-实际应用-大致翻译未完成\",\"848\":\"v-172fd483#_2-1-client-side-stateless-sessions\",\"849\":\"v-172fd483#_3-json-web-token-详解\",\"850\":\"v-172fd483#_3-1-the-header\",\"851\":\"v-172fd483#_3-2-the-payload\",\"852\":\"v-172fd483#_3-2-1-registered-claims\",\"853\":\"v-172fd483#_3-2-2-public-and-private-claims\",\"854\":\"v-172fd483#_3-3-不安全的jwt\",\"855\":\"v-172fd483#_3-4-编码不安全的jwt\",\"856\":\"v-172fd483#_3-5-解码不安全的jwt\",\"857\":\"v-172fd483#_4-json-web-signatures\",\"858\":\"v-172fd483#_4-1-已签名-jwt-的结构\",\"859\":\"v-172fd483#_4-1-1-紧凑序列化算法概述\",\"860\":\"v-172fd483#_4-1-2-签名算法的实用性\",\"861\":\"v-172fd483#_4-1-3-jws-header-claims\",\"862\":\"v-172fd483@0\",\"863\":\"v-172fd483@1\",\"864\":\"v-6c8f6f84\",\"865\":\"v-6c8f6f84#摘要\",\"866\":\"v-6c8f6f84#_1-简介\",\"867\":\"v-6c8f6f84#_1-1-需求、符号和约定\",\"868\":\"v-6c8f6f84#_1-2-术语\",\"869\":\"v-6c8f6f84#_1-3-概述\",\"870\":\"v-6c8f6f84#_3-1-使用授权代码流进行身份验证\",\"871\":\"v-6c8f6f84#_3-1-1-授权码流步骤\",\"872\":\"v-6c8f6f84#_3-1-2-授权端点\",\"873\":\"v-6c8f6f84#_3-1-2-1-身份验证请求\",\"874\":\"v-6c8f6f84#_3-1-2-2-验证请求验证\",\"875\":\"v-6c8f6f84#_3-1-2-3-授权服务器对最终用户进行认证\",\"876\":\"v-6c8f6f84#_3-1-2-4-授权服务器获得最终用户同意-授权\",\"877\":\"v-6c8f6f84#_3-1-2-5-认证响应成功\",\"878\":\"v-6c8f6f84#_3-1-2-6-认证错误响应\",\"879\":\"v-6c8f6f84#_3-1-2-7-验证响应验证\",\"880\":\"v-6c8f6f84#_3-1-3-token-endpoint-令牌端点\",\"881\":\"v-6c8f6f84#_3-1-3-1-token-request-令牌请求\",\"882\":\"v-6c8f6f84#_3-1-3-2-令牌请求验证\",\"883\":\"v-6c8f6f84#_3-1-3-3-token成功响应\",\"884\":\"v-6c8f6f84#_3-1-3-4-令牌错误响应\",\"885\":\"v-6c8f6f84#_3-1-3-5-令牌响应验证\",\"886\":\"v-6c8f6f84#_3-1-3-6-id-token-标识牌\",\"887\":\"v-6c8f6f84#_3-1-3-7-id-token-验证\",\"888\":\"v-6c8f6f84#_3-1-3-8-访问令牌验证\",\"889\":\"v-6c8f6f84#_3-2-使用隐式流进行身份验证\",\"890\":\"v-6c8f6f84#_3-2-1-隐式流程步骤\",\"891\":\"v-6c8f6f84#_3-2-2-授权端点\",\"892\":\"v-6c8f6f84#_3-2-2-1-身份验证请求\",\"893\":\"v-6c8f6f84#_3-2-2-2-验证请求验证\",\"894\":\"v-6c8f6f84#_3-2-2-3-授权服务器对最终用户进行认证\",\"895\":\"v-6c8f6f84#_3-2-2-4-授权服务器获得最终用户同意-授权\",\"896\":\"v-6c8f6f84#_3-2-2-5-认证响应成功\",\"897\":\"v-6c8f6f84#_3-2-2-6-认证错误响应\",\"898\":\"v-6c8f6f84#_3-2-2-7-重定向uri片段处理\",\"899\":\"v-6c8f6f84#_3-2-2-8-验证响应验证\",\"900\":\"v-6c8f6f84#_3-2-2-9-访问令牌验证\",\"901\":\"v-6c8f6f84#_3-2-2-10-标识牌\",\"902\":\"v-6c8f6f84#_3-2-2-11-id令牌验证\",\"903\":\"v-6c8f6f84#_3-3-使用混合流进行身份验证\",\"904\":\"v-6c8f6f84#_3-3-1-混合流程步骤\",\"905\":\"v-6c8f6f84#_3-3-2-授权端点\",\"906\":\"v-6c8f6f84#_3-3-2-1-身份验证请求\",\"907\":\"v-6c8f6f84#_3-3-2-2-验证请求验证\",\"908\":\"v-6c8f6f84#_3-3-2-3-授权服务器对最终用户进行认证\",\"909\":\"v-6c8f6f84#_3-3-2-4-授权服务器获得最终用户同意-授权\",\"910\":\"v-6c8f6f84#_3-3-2-5-认证响应成功\",\"911\":\"v-6c8f6f84#_3-3-2-6-认证错误响应\",\"912\":\"v-6c8f6f84#_3-3-2-7-重定向uri片段处理\",\"913\":\"v-6c8f6f84#_3-3-2-8-验证响应验证\",\"914\":\"v-6c8f6f84#_3-3-2-9-访问令牌验证\",\"915\":\"v-6c8f6f84#_3-3-2-10-授权码验证\",\"916\":\"v-6c8f6f84#_3-3-2-11-标识牌\",\"917\":\"v-6c8f6f84#_3-3-2-12-id令牌验证\",\"918\":\"v-6c8f6f84#_3-3-3-令牌端点\",\"919\":\"v-6c8f6f84#_3-3-3-1-令牌的请求\",\"920\":\"v-6c8f6f84#_3-3-3-2-令牌请求验证\",\"921\":\"v-6c8f6f84#_3-3-3-3-token成功响应\",\"922\":\"v-6c8f6f84#_3-3-3-4-令牌错误响应\",\"923\":\"v-6c8f6f84#_3-3-3-5-令牌响应验证\",\"924\":\"v-6c8f6f84#_3-3-3-6-标识牌\",\"925\":\"v-6c8f6f84#_3-3-3-7-id令牌验证\",\"926\":\"v-6c8f6f84#_3-3-3-8-访问令牌\",\"927\":\"v-6c8f6f84#_3-3-3-9-访问令牌验证\",\"928\":\"v-6c8f6f84#_5-1-标准要求\",\"929\":\"v-6c8f6f84#_5-1-1-解决索赔\",\"930\":\"v-6c8f6f84#_5-1-2-额外的要求\",\"931\":\"v-6c8f6f84#_5-2-索赔语言和脚本\",\"932\":\"v-6c8f6f84#_5-3-用户信息端点\",\"933\":\"v-6c8f6f84#_5-3-1-用户信息请求\",\"934\":\"v-6c8f6f84#_5-3-2-userinfo成功响应\",\"935\":\"v-6c8f6f84#_5-3-3-userinfo错误响应\",\"936\":\"v-6c8f6f84#_5-3-4-userinfo响应验证\",\"937\":\"v-6c8f6f84#_5-4-使用范围值请求声明\",\"938\":\"v-6c8f6f84#_5-5-使用-claims-请求参数请求索赔\",\"939\":\"v-6c8f6f84#_5-5-1-个别索偿申请\",\"940\":\"v-6c8f6f84#_5-5-1-1-请求-acr-索赔\",\"941\":\"v-6c8f6f84#_5-5-2-个人索赔的语言和脚本\",\"942\":\"v-6c8f6f84#_5-6-索赔类型\",\"943\":\"v-6c8f6f84#_5-6-1-正常的索赔\",\"944\":\"v-6c8f6f84#_5-6-2-聚合和分布式索赔\",\"945\":\"v-6c8f6f84#_5-6-2-1-综合申索的例子\",\"946\":\"v-6c8f6f84#_5-6-2-2-分布式索赔示例\",\"947\":\"v-6c8f6f84#_5-7-索赔稳定性和唯一性\",\"948\":\"v-6c8f6f84#_6-1-按值传递请求对象\",\"949\":\"v-6c8f6f84#_6-1-1-使用-request-请求参数请求\",\"950\":\"v-6c8f6f84#_6-2-通过引用传递请求对象\",\"951\":\"v-6c8f6f84#_6-2-1-url引用请求对象\",\"952\":\"v-6c8f6f84#_6-2-2-使用-request-uri-请求参数请求\",\"953\":\"v-6c8f6f84#_6-2-3-授权服务器获取请求对象\",\"954\":\"v-6c8f6f84#_6-2-4-request-uri-原理\",\"955\":\"v-6c8f6f84#_6-3-验证基于jwt的请求\",\"956\":\"v-6c8f6f84#_6-3-1-加密请求对象\",\"957\":\"v-6c8f6f84#_6-3-2-已签名请求对象\",\"958\":\"v-6c8f6f84#_6-3-3-请求参数组装和验证\",\"959\":\"v-6c8f6f84#_7-1-自发openid提供者发现\",\"960\":\"v-6c8f6f84#_7-2-自发openid提供者注册\",\"961\":\"v-6c8f6f84#_7-2-1-使用-注册-请求参数提供信息\",\"962\":\"v-6c8f6f84#_7-3-自发openid提供者请求\",\"963\":\"v-6c8f6f84#_7-4-自发openid提供者响应\",\"964\":\"v-6c8f6f84#_7-5-自发id令牌验证\",\"965\":\"v-6c8f6f84#_8-1-成对标识算法\",\"966\":\"v-6c8f6f84#_10-1-签署\",\"967\":\"v-6c8f6f84#_10-1-1-旋转非对称签名密钥\",\"968\":\"v-6c8f6f84#_10-2-加密\",\"969\":\"v-6c8f6f84#_10-2-1\",\"970\":\"v-6c8f6f84@0\",\"971\":\"v-6c8f6f84@1\",\"972\":\"v-773725a8\",\"973\":\"v-773725a8#_1-maven简介\",\"974\":\"v-773725a8@0\",\"975\":\"v-773725a8@1\",\"976\":\"v-580ba51a\",\"977\":\"v-580ba51a#_1-nodejs简介\",\"978\":\"v-580ba51a#_2-nodejs安装\",\"979\":\"v-580ba51a#_2-1-配置全局安装模块-node-global-环境变量\",\"980\":\"v-580ba51a#_2-2-配置缓存目录-node-cache-环境变量\",\"981\":\"v-580ba51a#_2-3-配置全局系统变量\",\"982\":\"v-580ba51a#_2-4-修改用户变量\",\"983\":\"v-580ba51a#_2-5-验证安装\",\"984\":\"v-580ba51a#_2-6-npm换国内源\",\"985\":\"v-580ba51a@0\",\"986\":\"v-580ba51a@1\",\"987\":\"v-1297d554\",\"988\":\"v-7e3987b3\",\"989\":\"v-1de7b578\",\"990\":\"v-5dc777a6\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,51],\"2\":[1,28],\"3\":[1,48],\"4\":[1,97],\"5\":[1,18],\"6\":[4,171],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[3],\"10\":[1,32],\"11\":[1,16],\"12\":[1,34],\"13\":[null,null,1],\"14\":[null,null,1],\"15\":[1],\"16\":[4],\"17\":[1,19],\"18\":[2,49],\"19\":[8],\"20\":[1,19],\"21\":[2,52],\"22\":[null,null,1],\"23\":[null,null,1],\"24\":[5],\"25\":[2,9],\"26\":[2,36],\"27\":[2],\"28\":[3,56],\"29\":[4,41],\"30\":[2,17],\"31\":[3,25],\"32\":[2],\"33\":[3,23],\"34\":[5,48],\"35\":[5,68],\"36\":[4,31],\"37\":[3,31],\"38\":[3,14],\"39\":[4,134],\"40\":[null,null,3],\"41\":[1],\"42\":[2,87],\"43\":[null,null,1],\"44\":[null,null,2],\"45\":[1],\"46\":[3,28],\"47\":[null,null,1],\"48\":[null,null,1],\"49\":[1],\"50\":[3,7],\"51\":[1,172],\"52\":[1,146],\"53\":[null,null,1],\"54\":[null,null,1],\"55\":[1],\"56\":[1,30],\"57\":[null,null,1],\"58\":[null,null,1],\"59\":[6],\"60\":[1,47],\"61\":[1,28],\"62\":[1,27],\"63\":[1,72],\"64\":[1,27],\"65\":[1,36],\"66\":[3,15],\"67\":[3,11],\"68\":[3,28],\"69\":[3,6],\"70\":[1,50],\"71\":[1,11],\"72\":[3,264],\"73\":[3,134],\"74\":[1,23],\"75\":[1,55],\"76\":[null,null,1],\"77\":[null,null,1],\"78\":[1,75],\"79\":[2],\"80\":[1,8],\"81\":[3],\"82\":[2,29],\"83\":[4,17],\"84\":[4,31],\"85\":[4,39],\"86\":[4],\"87\":[5,14],\"88\":[6,23],\"89\":[5,14],\"90\":[6,33],\"91\":[6,8],\"92\":[5],\"93\":[3,8],\"94\":[3,7],\"95\":[4,4],\"96\":[4],\"97\":[3,7],\"98\":[2,30],\"99\":[3],\"100\":[1,8],\"101\":[1,7],\"102\":[1,8],\"103\":[5,16],\"104\":[4,14],\"105\":[3,7],\"106\":[5,12],\"107\":[4,7],\"108\":[3,8],\"109\":[4,10],\"110\":[3,8],\"111\":[4,7],\"112\":[3,64],\"113\":[4,5],\"114\":[3,4],\"115\":[1,10],\"116\":[1,12],\"117\":[1,9],\"118\":[3,12],\"119\":[2,7],\"120\":[1,8],\"121\":[1,4],\"122\":[3,19],\"123\":[1,6],\"124\":[1,8],\"125\":[1,4],\"126\":[1,7],\"127\":[1,13],\"128\":[4,44],\"129\":[4,38],\"130\":[3,19],\"131\":[3,25],\"132\":[2,37],\"133\":[3,32],\"134\":[5,19],\"135\":[5,27],\"136\":[3,32],\"137\":[4,20],\"138\":[5,20],\"139\":[6,11],\"140\":[6,18],\"141\":[6,9],\"142\":[6,14],\"143\":[6,14],\"144\":[4,38],\"145\":[5,13],\"146\":[2,8],\"147\":[3,25],\"148\":[3,60],\"149\":[3,20],\"150\":[3,31],\"151\":[2,69],\"152\":[3],\"153\":[3,4],\"154\":[2,29],\"155\":[3,7],\"156\":[3,10],\"157\":[3,4],\"158\":[3,5],\"159\":[3,7],\"160\":[3,7],\"161\":[3,7],\"162\":[2,23],\"163\":[3,78],\"164\":[3,49],\"165\":[2,6],\"166\":[3,72],\"167\":[3,71],\"168\":[2,86],\"169\":[1],\"170\":[3,20],\"171\":[4,18],\"172\":[3,20],\"173\":[4,11],\"174\":[4,9],\"175\":[4,14],\"176\":[4,14],\"177\":[3,38],\"178\":[3,13],\"179\":[1,8],\"180\":[1,25],\"181\":[1,60],\"182\":[1,20],\"183\":[1,28],\"184\":[1],\"185\":[2,27],\"186\":[1,35],\"187\":[1,69],\"188\":[1],\"189\":[1,4],\"190\":[1,29],\"191\":[1,7],\"192\":[1,10],\"193\":[1,4],\"194\":[1,5],\"195\":[1,7],\"196\":[1,7],\"197\":[1,7],\"198\":[1,23],\"199\":[1,78],\"200\":[1,49],\"201\":[1,6],\"202\":[1,72],\"203\":[1,71],\"204\":[1,78],\"205\":[1,27],\"206\":[null,null,1],\"207\":[1],\"208\":[1],\"209\":[1,3],\"210\":[1,35],\"211\":[1,31],\"212\":[1,44],\"213\":[1,5],\"214\":[2,53],\"215\":[2,47],\"216\":[4,30],\"217\":[1,35],\"218\":[1],\"219\":[1,9],\"220\":[1,24],\"221\":[1,46],\"222\":[1,22],\"223\":[1,16],\"224\":[1,19],\"225\":[1,9],\"226\":[1,45],\"227\":[4,27],\"228\":[1,25],\"229\":[1],\"230\":[1,21],\"231\":[1,34],\"232\":[1,30],\"233\":[1,17],\"234\":[1,39],\"235\":[3,80],\"236\":[1,17],\"237\":[1,19],\"238\":[1,39],\"239\":[1,27],\"240\":[1,10],\"241\":[1,21],\"242\":[1,29],\"243\":[1,24],\"244\":[1],\"245\":[1,15],\"246\":[1,39],\"247\":[1,31],\"248\":[1,18],\"249\":[1,27],\"250\":[1,8],\"251\":[1,91],\"252\":[1,42],\"253\":[1,4],\"254\":[1,22],\"255\":[2,11],\"256\":[6,36],\"257\":[2,24],\"258\":[3,21],\"259\":[1,10],\"260\":[1,24],\"261\":[1,16],\"262\":[1,11],\"263\":[2,9],\"264\":[1,27],\"265\":[1,22],\"266\":[1],\"267\":[1,29],\"268\":[1,48],\"269\":[2],\"270\":[1,48],\"271\":[2,26],\"272\":[3,9],\"273\":[4,11],\"274\":[3,11],\"275\":[1,6],\"276\":[2,8],\"277\":[4,16],\"278\":[4,16],\"279\":[1,21],\"280\":[2,7],\"281\":[1,7],\"282\":[1,5],\"283\":[1,24],\"284\":[1,26],\"285\":[1,5],\"286\":[1],\"287\":[1,27],\"288\":[1,44],\"289\":[1,5],\"290\":[3,2],\"291\":[3,35],\"292\":[3,18],\"293\":[1,27],\"294\":[3,27],\"295\":[1],\"296\":[1,40],\"297\":[3,9],\"298\":[1,18],\"299\":[2,44],\"300\":[1,21],\"301\":[1,44],\"302\":[2],\"303\":[7,87],\"304\":[4,11],\"305\":[2,25],\"306\":[4,36],\"307\":[null,null,1],\"308\":[1],\"309\":[2],\"310\":[3,37],\"311\":[3,27],\"312\":[4,32],\"313\":[3],\"314\":[1,42],\"315\":[1,62],\"316\":[1,70],\"317\":[3,58],\"318\":[5,16],\"319\":[2],\"320\":[2,186],\"321\":[2,31],\"322\":[9,31],\"323\":[2],\"324\":[5,22],\"325\":[7,64],\"326\":[3,11],\"327\":[5,15],\"328\":[10,74],\"329\":[6,27],\"330\":[2,95],\"331\":[10,59],\"332\":[7,23],\"333\":[5,33],\"334\":[2],\"335\":[8,44],\"336\":[3,8],\"337\":[3,26],\"338\":[3,65],\"339\":[3,7],\"340\":[3,32],\"341\":[3,9],\"342\":[3,32],\"343\":[3,6],\"344\":[5,8],\"345\":[6,11],\"346\":[2,42],\"347\":[3],\"348\":[4,18],\"349\":[4,16],\"350\":[4,18],\"351\":[7,16],\"352\":[2],\"353\":[4,47],\"354\":[7,67],\"355\":[4,32],\"356\":[3,12],\"357\":[2],\"358\":[5,27],\"359\":[4,12],\"360\":[7,19],\"361\":[7,22],\"362\":[6,50],\"363\":[4,48],\"364\":[3,41],\"365\":[1,105],\"366\":[3],\"367\":[1,17],\"368\":[1,26],\"369\":[3],\"370\":[2,20],\"371\":[3,15],\"372\":[1,35],\"373\":[1,23],\"374\":[2,18],\"375\":[2,8],\"376\":[3,24],\"377\":[2],\"378\":[3,15],\"379\":[2],\"380\":[1,38],\"381\":[1,26],\"382\":[1,54],\"383\":[5,107],\"384\":[2,21],\"385\":[2],\"386\":[2],\"387\":[2,12],\"388\":[1,24],\"389\":[1,54],\"390\":[2,60],\"391\":[4,29],\"392\":[5,62],\"393\":[3,9],\"394\":[5,56],\"395\":[2],\"396\":[5,14],\"397\":[6,10],\"398\":[1,56],\"399\":[11],\"400\":[3,23],\"401\":[6],\"402\":[2,16],\"403\":[2,18],\"404\":[1,9],\"405\":[6,106],\"406\":[2,10],\"407\":[2,13],\"408\":[6,17],\"409\":[5,105],\"410\":[4,75],\"411\":[2,41],\"412\":[3,34],\"413\":[2,2],\"414\":[1,7],\"415\":[1,59],\"416\":[2,8],\"417\":[5,15],\"418\":[4,28],\"419\":[6,23],\"420\":[4,58],\"421\":[3,29],\"422\":[2],\"423\":[5,43],\"424\":[3,62],\"425\":[11,26],\"426\":[4,35],\"427\":[4,95],\"428\":[2,12],\"429\":[6,111],\"430\":[8,53],\"431\":[8,51],\"432\":[4,27],\"433\":[2],\"434\":[1],\"435\":[1],\"436\":[1],\"437\":[1],\"438\":[5,104],\"439\":[6,42],\"440\":[5,22],\"441\":[2],\"442\":[6,34],\"443\":[6,27],\"444\":[2],\"445\":[1,87],\"446\":[4,36],\"447\":[2,49],\"448\":[2,6],\"449\":[2,95],\"450\":[2,47],\"451\":[2,4],\"452\":[2],\"453\":[2],\"454\":[1,10],\"455\":[2,62],\"456\":[2,48],\"457\":[3,11],\"458\":[2,8],\"459\":[2,45],\"460\":[2,8],\"461\":[2,86],\"462\":[2,90],\"463\":[1,10],\"464\":[null,null,1],\"465\":[null,null,1],\"466\":[1],\"467\":[1,330],\"468\":[5],\"469\":[2,275],\"470\":[3],\"471\":[5,64],\"472\":[3,29],\"473\":[5,101],\"474\":[4,53],\"475\":[4,63],\"476\":[4,99],\"477\":[4,41],\"478\":[6,27],\"479\":[4,19],\"480\":[4],\"481\":[3,230],\"482\":[3,112],\"483\":[6,244],\"484\":[8,40],\"485\":[6,78],\"486\":[3,38],\"487\":[6,75],\"488\":[4,22],\"489\":[5,25],\"490\":[4,84],\"491\":[3,98],\"492\":[4,33],\"493\":[3,25],\"494\":[2,46],\"495\":[5,36],\"496\":[3,84],\"497\":[3,58],\"498\":[3,39],\"499\":[4,153],\"500\":[3],\"501\":[6,154],\"502\":[6,33],\"503\":[4],\"504\":[4,157],\"505\":[4,13],\"506\":[5,253],\"507\":[3,143],\"508\":[4,111],\"509\":[3,114],\"510\":[5,77],\"511\":[4,42],\"512\":[5,29],\"513\":[3,189],\"514\":[2],\"515\":[3,187],\"516\":[3,95],\"517\":[3,65],\"518\":[5,113],\"519\":[4,77],\"520\":[3,33],\"521\":[5,109],\"522\":[4],\"523\":[8,244],\"524\":[4,63],\"525\":[5,120],\"526\":[4,21],\"527\":[4,85],\"528\":[5,87],\"529\":[4,28],\"530\":[3,53],\"531\":[3,139],\"532\":[3,201],\"533\":[6,7],\"534\":[4,45],\"535\":[4,9],\"536\":[6,73],\"537\":[3,19],\"538\":[4,44],\"539\":[4,34],\"540\":[3,45],\"541\":[4,18],\"542\":[4,28],\"543\":[6,62],\"544\":[4,21],\"545\":[4,113],\"546\":[3,137],\"547\":[3,243],\"548\":[4,48],\"549\":[5,235],\"550\":[3,208],\"551\":[4,189],\"552\":[4,16],\"553\":[4,165],\"554\":[1,77],\"555\":[4,40],\"556\":[4,44],\"557\":[5,196],\"558\":[4,84],\"559\":[4,150],\"560\":[6,13],\"561\":[3,206],\"562\":[3,71],\"563\":[10,107],\"564\":[7,105],\"565\":[7,63],\"566\":[7,48],\"567\":[3,132],\"568\":[4,173],\"569\":[3,81],\"570\":[2,102],\"571\":[1,49],\"572\":[3,95],\"573\":[3,141],\"574\":[4,155],\"575\":[3,39],\"576\":[3,39],\"577\":[3,102],\"578\":[8,34],\"579\":[3],\"580\":[3,201],\"581\":[4,90],\"582\":[4,40],\"583\":[4,62],\"584\":[3],\"585\":[4,208],\"586\":[3,29],\"587\":[6,96],\"588\":[7,107],\"589\":[4,15],\"590\":[5,98],\"591\":[5,121],\"592\":[5,86],\"593\":[3,133],\"594\":[4],\"595\":[4,84],\"596\":[4,19],\"597\":[4,20],\"598\":[4,33],\"599\":[4,26],\"600\":[3,60],\"601\":[4,60],\"602\":[4,116],\"603\":[4,21],\"604\":[5],\"605\":[3,188],\"606\":[5,58],\"607\":[6,32],\"608\":[3,96],\"609\":[5,98],\"610\":[4,66],\"611\":[4,87],\"612\":[5,80],\"613\":[6,4],\"614\":[3,139],\"615\":[3,3],\"616\":[3,16],\"617\":[1,36],\"618\":[1,18],\"619\":[1,22],\"620\":[1,24],\"621\":[1,9],\"622\":[1,23],\"623\":[1,104],\"624\":[4,95],\"625\":[5,107],\"626\":[5,118],\"627\":[3,274],\"628\":[4,109],\"629\":[6,89],\"630\":[7,13],\"631\":[4,159],\"632\":[4,40],\"633\":[4,27],\"634\":[4],\"635\":[4,82],\"636\":[5,54],\"637\":[4,50],\"638\":[5,250],\"639\":[8,49],\"640\":[3,373],\"641\":[3],\"642\":[4,87],\"643\":[9,69],\"644\":[3,34],\"645\":[3,79],\"646\":[3],\"647\":[4,65],\"648\":[4,54],\"649\":[4,50],\"650\":[3],\"651\":[4,224],\"652\":[4,48],\"653\":[4,150],\"654\":[4,82],\"655\":[4,124],\"656\":[3,99],\"657\":[4,117],\"658\":[4,50],\"659\":[6,114],\"660\":[5,180],\"661\":[4,75],\"662\":[8,879],\"663\":[4,118],\"664\":[4,75],\"665\":[4,32],\"666\":[4,51],\"667\":[4,83],\"668\":[4,150],\"669\":[6,91],\"670\":[4,199],\"671\":[5,106],\"672\":[4,104],\"673\":[4,83],\"674\":[4,22],\"675\":[4,43],\"676\":[4,289],\"677\":[4,226],\"678\":[4,269],\"679\":[5,61],\"680\":[4,202],\"681\":[5,68],\"682\":[5,524],\"683\":[2,42],\"684\":[2,75],\"685\":[1,30],\"686\":[1,487],\"687\":[4,120],\"688\":[3,205],\"689\":[6,820],\"690\":[4,34],\"691\":[7,31],\"692\":[6,206],\"693\":[8,26],\"694\":[3,184],\"695\":[4,38],\"696\":[5,84],\"697\":[4,129],\"698\":[9,32],\"699\":[4,98],\"700\":[5,141],\"701\":[4,88],\"702\":[7,39],\"703\":[5,79],\"704\":[4,43],\"705\":[4,118],\"706\":[6,26],\"707\":[4,105],\"708\":[6,113],\"709\":[4,427],\"710\":[5],\"711\":[4],\"712\":[4],\"713\":[4],\"714\":[4],\"715\":[9],\"716\":[6],\"717\":[null,null,1],\"718\":[null,null,1],\"719\":[2],\"720\":[2],\"721\":[2],\"722\":[3],\"723\":[2,9],\"724\":[5],\"725\":[3,63],\"726\":[3,15],\"727\":[3,34],\"728\":[3,33],\"729\":[3,35],\"730\":[3,34],\"731\":[3,33],\"732\":[3,29],\"733\":[null,null,1],\"734\":[null,null,1],\"735\":[2],\"736\":[2],\"737\":[null,null,1],\"738\":[null,null,1],\"739\":[2],\"740\":[2],\"741\":[null,null,1],\"742\":[null,null,1],\"743\":[3],\"744\":[3],\"745\":[null,null,1],\"746\":[null,null,1],\"747\":[2],\"748\":[2],\"749\":[6,7],\"750\":[3,7],\"751\":[2],\"752\":[4,6],\"753\":[3,7],\"754\":[2],\"755\":[4,8],\"756\":[4,7],\"757\":[3,17],\"758\":[3,13],\"759\":[4,16],\"760\":[4,22],\"761\":[3,16],\"762\":[3,22],\"763\":[3,13],\"764\":[5,13],\"765\":[3,19],\"766\":[3,20],\"767\":[3,3],\"768\":[3,17],\"769\":[3,13],\"770\":[3,37],\"771\":[3],\"772\":[3,17],\"773\":[3],\"774\":[null,null,1],\"775\":[null,null,1],\"776\":[3],\"777\":[3],\"778\":[null,null,2],\"779\":[null,null,1],\"780\":[2],\"781\":[1],\"782\":[2,71],\"783\":[null,null,1],\"784\":[null,null,1],\"785\":[2],\"786\":[2],\"787\":[2],\"788\":[3],\"789\":[2],\"790\":[2],\"791\":[null,null,1],\"792\":[null,null,1],\"793\":[1],\"794\":[null,null,1],\"795\":[null,null,1],\"796\":[1],\"797\":[null,null,1],\"798\":[null,null,1],\"799\":[1],\"800\":[2],\"801\":[1,10],\"802\":[1,4],\"803\":[1,81],\"804\":[null,null,1],\"805\":[null,null,1],\"806\":[2],\"807\":[2],\"808\":[2,27],\"809\":[2,6],\"810\":[2,7],\"811\":[2,23],\"812\":[3,4],\"813\":[5,5],\"814\":[2,6],\"815\":[2,12],\"816\":[2,5],\"817\":[2,8],\"818\":[2,14],\"819\":[3,17],\"820\":[2,9],\"821\":[2,13],\"822\":[2,9],\"823\":[2,5],\"824\":[2,5],\"825\":[2,5],\"826\":[2,7],\"827\":[2,13],\"828\":[2,34],\"829\":[2,18],\"830\":[2,9],\"831\":[2,8],\"832\":[3,38],\"833\":[null,null,1],\"834\":[null,null,1],\"835\":[2],\"836\":[2],\"837\":[null,null,1],\"838\":[null,null,1],\"839\":[2],\"840\":[2],\"841\":[null,null,1],\"842\":[null,null,1],\"843\":[3],\"844\":[2,21],\"845\":[5,48],\"846\":[4,29],\"847\":[4,16],\"848\":[6,38],\"849\":[5,90],\"850\":[4,66],\"851\":[4,25],\"852\":[5,91],\"853\":[6,45],\"854\":[2,49],\"855\":[3,29],\"856\":[3,23],\"857\":[4,47],\"858\":[5,96],\"859\":[3,54],\"860\":[4,81],\"861\":[6,15],\"862\":[null,null,3],\"863\":[null,null,1],\"864\":[5],\"865\":[1,17],\"866\":[2,72],\"867\":[3,40],\"868\":[3,228],\"869\":[3,286],\"870\":[3,10],\"871\":[3,11],\"872\":[4,11],\"873\":[4,248],\"874\":[4,37],\"875\":[4,30],\"876\":[6,12],\"877\":[5,35],\"878\":[5,95],\"879\":[5,8],\"880\":[6,16],\"881\":[6,52],\"882\":[4,23],\"883\":[3,86],\"884\":[4,33],\"885\":[4,13],\"886\":[7,19],\"887\":[6,82],\"888\":[4,10],\"889\":[3,9],\"890\":[4,12],\"891\":[3,6],\"892\":[4,51],\"893\":[3],\"894\":[3],\"895\":[5],\"896\":[4],\"897\":[4],\"898\":[4],\"899\":[4],\"900\":[4],\"901\":[4],\"902\":[4],\"903\":[2],\"904\":[3],\"905\":[3],\"906\":[4],\"907\":[3],\"908\":[3],\"909\":[5],\"910\":[4],\"911\":[4],\"912\":[4],\"913\":[4],\"914\":[4],\"915\":[4],\"916\":[4],\"917\":[4],\"918\":[2],\"919\":[3],\"920\":[3],\"921\":[2],\"922\":[3],\"923\":[3],\"924\":[3],\"925\":[3],\"926\":[3],\"927\":[3],\"928\":[3],\"929\":[3],\"930\":[4],\"931\":[3],\"932\":[3],\"933\":[4],\"934\":[4],\"935\":[3],\"936\":[4],\"937\":[3],\"938\":[4],\"939\":[3],\"940\":[5],\"941\":[3],\"942\":[3],\"943\":[4],\"944\":[4],\"945\":[5],\"946\":[4],\"947\":[3],\"948\":[3],\"949\":[5],\"950\":[3],\"951\":[4],\"952\":[6],\"953\":[4],\"954\":[6],\"955\":[3],\"956\":[4],\"957\":[4],\"958\":[3],\"959\":[3],\"960\":[3],\"961\":[6],\"962\":[3],\"963\":[3],\"964\":[3],\"965\":[3],\"966\":[3],\"967\":[3],\"968\":[3],\"969\":[4],\"970\":[null,null,2],\"971\":[null,null,5],\"972\":[2],\"973\":[2],\"974\":[null,null,1],\"975\":[null,null,1],\"976\":[2],\"977\":[2],\"978\":[2],\"979\":[6,10],\"980\":[5,9],\"981\":[3,6],\"982\":[3,2],\"983\":[3,10],\"984\":[3,10],\"985\":[null,null,1],\"986\":[null,null,1],\"987\":[1],\"988\":[1],\"989\":[1],\"990\":[4]},\"averageFieldLength\":[3.1601491519872704,53.00483353387083,0.5927903985738671],\"storedFields\":{\"0\":{\"h\":\"Docker配置本地开发环境\"},\"1\":{\"h\":\"MySQL\",\"t\":[\"拉取官方镜像\",\"docker pull mysql # 拉取最新版mysql镜像 \",\"创建主机挂载文件\",\"# 创建目录 -p 递归创建 mkdir -p /home/gaoyang/docker/mysql/{conf,logs,data} # 创建文件 touch /home/gaoyang/docker/mysql/conf/my.cnf \",\"创建容器\",\"docker run \\\\ #指定端口映射，格式为：主机(宿主)端口:容器端口 -p 3306:3306 \\\\ #为容器指定一个名称 --name mysql \\\\ #设置环境变量 root账户密码 -e MYSQL_ROOT_PASSWORD=123456 \\\\ #将配置文件夹挂载到主机 -v /home/gaoyang/docker/mysql/conf/my.cnf:/etc/mysql/my.cnf \\\\ #将日志文件夹挂载到主机 -v /home/gaoyang/docker/mysql/logs:/var/log/mysql \\\\ #将mysql储存文件夹挂载到主机 -v /home/gaoyang/docker/mysql/data:/var/lib/mysql \\\\ #后台运行容器，并返回容器ID -d mysql:latest \",\"检查容器是否正确运行\",\"docker ps \"]},\"2\":{\"h\":\"Redis\",\"t\":[\"拉取官方镜像\",\"docker pull redis # 拉取最新版redis镜像 \",\"创建主机挂载文件\",\"# 创建目录 -p 递归创建 mkdir -p /home/gaoyang/docker/redis/{conf,data} # 创建文件 touch /home/gaoyang/docker/redis/conf/redis.cnf \",\"创建容器\",\"docker run \\\\ --name redis \\\\ -p 6379:6379 \\\\ -v /home/gaoyang/docker/redis/data:/data \\\\ -v /home/gaoyang/docker/redis/conf/redis.conf:/etc/redis/redis.conf \\\\ -d redis:latest \",\"检查容器是否正确运行\",\"docker ps \"]},\"3\":{\"h\":\"RabbitMQ\",\"t\":[\"拉取官方镜像(包含web控制界面的)\",\"docker pull rabbitmq:latest \",\"创建主机挂载文件\",\"# 创建目录 -p 递归创建 mkdir -p /home/gaoyang/docker/rabbitmq/{data,conf,log} \",\"修改log目录权限\",\"sudo chmod 777 /home/gaoyang/docker/rabbitmq/log \",\"创建容器\",\"docker run \\\\ --name rabbitmq \\\\ -p 5672:5672 \\\\ -p 15672:15672 \\\\ -e RABBITMQ_DEFAULT_USER=admin \\\\ -e RABBITMQ_DEFAULT_PASS=admin \\\\ -v /home/gaoyang/docker/rabbitmq/data:/var/lib/rabbitmq \\\\ -v /home/gaoyang/docker/rabbitmq/conf:/etc/rabbitmq \\\\ -v /home/gaoyang/docker/rabbitmq/log:/var/log/rabbitmq \\\\ -d rabbitmq:3.9.29-management \",\"开启web控制台\",\"docker exec -it rabbitmq bash rabbitmq-plugins enable rabbitmq_management \",\"检查容器是否正确运行\",\"docker ps \"]},\"4\":{\"h\":\"Nacos\",\"t\":[\"拉取官方镜像\",\"docker pull nacos/nacos-server #拉取最新版镜像 \",\"创建主机挂载文件（开发环境可不挂载）\",\"#创建目录 -p 递归创建 mkdir -p /home/gaoyang/docker/nacos/{conf,logs} #创建文件 touch /home/gaoyang/docker/nacos/conf/application.properties \",\"创建容器,2.x版本后增加了 grpc 通信并且增加nacos的集群端口上下偏移1000，创建容器时除了 8848 还需要把 9848 也暴露出来\",\"docker run \\\\ --name nacos \\\\ #Jraft请求服务端端口，用于处理服务端间的Raft相关请求 #-p 7848:7848 #主端口，客户端、控制台及OpenAPI所使用的HTTP端口 -p 8848:8848 \\\\ #客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求 -p 9848:9848 \\\\ #服务端gRPC请求服务端端口，用于服务间同步等 #-p 9849:9849 #9849 和 7848 端口为服务端之间的通信端口，请勿暴露到外部网络环境和客户端测 #-e SPRING_DATASOURCE_PLATFORM=mysql #-e MYSQL_SERVICE_HOST=localhost #-e MYSQL_SERVICE_PORT=3306 #-e MYSQL_SERVICE_USER=root #-e MYSQL_SERVICE_PASSWORD=123456 #-e MYSQL_SERVICE_DB_NAME=nacos -e JVM_XMS=256m \\\\ #jvm启动时分配的内存 -e JVM_XMX=256m \\\\ #为jvm运行过程中分配的最大内存 -e MODE=standalone \\\\ #单机模式 #一下四个环境变量使用鉴权必须都配置 -e NACOS_AUTH_CACHE_ENABLE=true \\\\ #开启权限系统 -e NACOS_AUTH_IDENTITY_KEY=admin \\\\ #不配置nacos报错 配置了不生效 账号还是nacos(真离谱) -e NACOS_AUTH_IDENTITY_VALUE=admin \\\\ #不配置nacos报错 配置了不生效 密码还是nacos(真离谱) -e NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789 \\\\ #-v /home/gaoyang/docker/nacos/logs:/home/nacos/logs -d nacos/nacos-server \",\"docker run --name nacos -p 8848:8848 -p 9848:9848 -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -e NACOS_AUTH_CACHE_ENABLE=true -e NACOS_AUTH_IDENTITY_KEY=admin -e NACOS_AUTH_IDENTITY_VALUE=admin -e NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789 -d nacos/nacos-server \",\"进入nacos容器，进入conf目录\",\"docker exec -it nacos bash \",\"cd conf/ \",\"修改配置文件\",\"nacos.core.auth.enabled=true \",\"重启nacos容器\",\"docker restart nacos \",\"检查容器是否正确运行\",\"docker ps \"]},\"5\":{\"h\":\"Sentinel\",\"t\":[\"拉取官方镜像\",\"docker pull bladex/sentinel-dashboard #拉取最新版镜像 \",\"创建容器\",\"docker run \\\\ --name Sentinel \\\\ -p 8719:8719 \\\\ -p 8858:8858 \\\\ -d bladex/sentinel-dashboard \",\"检查容器是否正确运行\",\"docker ps \"]},\"6\":{\"h\":\"Elasticsearch(有问题，待处理)\",\"t\":[\"Elasticsearch简介\",\"Elasticsearch是位于Elastic Stack核心的分布式搜索和分析引擎。\",\"Logstash和Beats有助于收集、聚合和丰富数据，并将其存储在Elasticsearch中。\",\"Kibana使您能够交互式地探索、可视化和共享对数据的见解，并管理和监视堆栈。\",\"Elasticsearch是索引、搜索和分析魔术发生的地方。\",\"Elasticsearch为所有类型的数据提供近乎实时的搜索和分析。无论您是结构化还是非结构化文本、数字数据还是地理空间数据，Elasticsearch都可以以一种支持快速搜索的方式有效地存储和索引它。您可以远远超出简单的数据检索和汇总信息，从而发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使您的部署能够无缝地随之增长。\",\"虽然不是每个问题都是搜索问题，但Elasticsearch提供了在各种用例中处理数据的速度和灵活性:\",\"在应用程序或网站中添加搜索框\",\"存储和分析日志、度量和安全事件数据\",\"使用机器学习实时自动模拟数据的行为\",\"使用Elasticsearch作为矢量数据库来创建、存储和搜索矢量嵌入\",\"使用Elasticsearch作为存储引擎自动化业务工作流\",\"使用Elasticsearch作为地理信息系统(GIS)管理、整合和分析空间信息\",\"使用Elasticsearch作为生物信息学研究工具存储和处理遗传数据\",\"我们不断地被人们使用搜索的新奇方式所震撼。但是，无论您的用例与其中一个类似，还是您正在使用Elasticsearch来解决新问题，您在Elasticsearch中处理数据，文档和索引的方式都是相同的\",\"单节点Elasticsearch集群安装\",\"创建网络\",\"#保证Kibana容器和Elasticsearch容器在同一网络中实现互联 docker network create elastic \",\"下载官方镜像\",\"docker pull docker.elastic.co/elasticsearch/elasticsearch:8.11.3 \",\"创建挂载文件\",\"# 创建目录 -p 递归创建 mkdir -p /home/gaoyang/docker/elasticsearch/{data,plugins} #修改权限 chmod 777 /home/gaoyang/docker/elasticsearch/data chmod 777 /home/gaoyang/docker/elasticsearch/plugins \",\"启动容器，复制生成的密码和注册令牌，首次启动 Elasticsearch 时，生成的用户密码和 Kibana 注册令牌将输出到终端，记得保存。\",\"docker run --name elasticsearch --net elastic -p 9200:9200 -p 9300:9300 -e \\\"discovery.type=single-node\\\" -e \\\"ES_JAVA_OPTS=-Xms512m -Xmx512m\\\" -v /home/gaoyang/docker/elasticsearch/data:/usr/share/elasticsearch/data -v /home/gaoyang/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins -d docker.elastic.co/elasticsearch/elasticsearch:8.11.3 \",\"查看容器是否正常运行\",\"docker ps \",\"Kibana(Elastic的用户界面)安装\",\"下载官方镜像\",\"docker pull docker.elastic.co/kibana/kibana:8.11.3 \",\"创建挂载文件\",\"# 创建目录 -p 递归创建 mkdir -p /home/gaoyang/docker/kibana/{data,config} #修改权限 chmod 777 /home/gaoyang/docker/kibana/data chmod 777 /home/gaoyang/docker/kibana/config \",\"启动容器\",\"docker run --name kibana --network elastic -p 5601:5601 -e ELASTICSEARCH_HOSTS=http://elasticsearch:9200 -v /home/gaoyang/docker/kibana/data:/usr/share/kibana/data -v /home/gaoyang/docker/kibana/plugins:/usr/share/kibana/plugins -d kibana:8.6.0 \",\"查看容器是否正常运行\",\"docker ps \",\"生成登录kibana的令牌(有问题 第一次能出现 之后就报错)\",\"# 进入容器 docker exec -it elasticsearch /bin/bash # 关闭安全验证 echo 'xpack.security.enabled: false' >> config/elasticsearch.yml ## 开启安全注册 echo 'xpack.security.enrollment.enabled: true' >> config/elasticsearch.yml ## 开启transport SSL验证 #echo 'xpack.security.transport.ssl.enabled: true' >> config/elasticsearch.yml #echo 'xpack.security.transport.ssl.verification_mode: certificate' >> config/elasticsearch.yml #echo 'xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12' >> config/elasticsearch.yml #echo 'xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12' >> config/elasticsearch.yml ## 开启HTTP SSL验证 echo 'xpack.security.http.ssl.enabled: true' >> config/elasticsearch.yml #echo 'xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12' >> config/elasticsearch.yml #echo 'xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12' >> config/elasticsearch.yml #echo 'xpack.security.http.ssl.client_authentication: optional' >> config/elasticsearch.yml ## 开启PKI 身份验证 #echo 'xpack.security.authc.realms.pki.pki1.order: 1' >> config/elasticsearch.yml # 生成令牌 令牌有30分钟有效期 bin/elasticsearch-create-enrollment-token --scope kibana \",\"5.kibana验证\",\"# 进入kibana容器中 docker exec -it kibana /bin/bash # 执行生成验证码命令 bin/kibana-verification-code # 获得的验证码输入之前页面中 Your verification code is: 788 373 \",\"重置密码 登录elasticsearch\",\"# 进入elastic容器中 docker exec -it elasticsearch /bin/bash # 重置密码 bin/elasticsearch-reset-password --username elastic -i \"]},\"7\":{\"c\":[\"Docker\"]},\"8\":{\"c\":[\"本地开发环境配置\"]},\"9\":{\"h\":\"Golang中http.ListenAndServe阻塞导致if-else不执行问题分析\"},\"10\":{\"h\":\"问题代码\",\"t\":[\"简单的代码，你可能很难发现其中的错误：\",\"err := http.ListenAndServe(\\\":8000\\\", nil) if err != nil { log.Println(\\\"ListenAndServe: \\\", err) } else { log.Println(\\\"服务器启动,监听8000端口: \\\") } \",\"理想运行：\",\"如果服务启动成功，打印“服务器启动,监听8000端口: ”，开始访问http://localhost:8000。\",\"如果启动失败就打印“ListenAndServe: + 错误信息”。逻辑很简单！看上去没有任何问题！！\",\"实际运行:\",\"服务器启动失败，端口被占用，打印“ListenAndServe + 错误信息”。\",\"服务启动成功，且 err==nil，log.Println(\\\"服务器启动,监听8000端口: \\\") 这段代码不会执行。\"]},\"11\":{\"h\":\"问题原因\",\"t\":[\"http.ListenAndServe 方法执行如果异常，则会执行下面的if语句，打印“ListenAndServe: + 错误信息”。\",\"如果服务启动成功， err==nil， goroutine 就会阻塞后续执行。也就是服务启动后，后面 if 整段代码都不会被执行！\"]},\"12\":{\"h\":\"解决方案\",\"t\":[\"开源项目基本都是只进行错误时的处理\",\"err := http.ListenAndServe(\\\":8000\\\", nil) if err != nil { log.Println(\\\"ListenAndServe: \\\", err) } \",\"新建一个goroutine协程每秒ping一下服务端口\",\"go func() { for { time.Sleep(time.Second) log.Println(\\\"正在监听服务端口...\\\") resp, err := http.Get(\\\"http://localhost:8000\\\") if err != nil { log.Println(\\\"Failed:\\\", err) continue } resp.Body.Close() if resp.StatusCode != http.StatusOK { log.Println(\\\"Not OK:\\\", resp.StatusCode) continue } break } log.Println(\\\"服务器启动,监听8000端口:\\\") }() err := http.ListenAndServe(\\\":8000\\\", nil) if err != nil { log.Println(\\\"ListenAndServe: \\\", err) } else { log.Println(\\\"服务器启动,监听8000端口: \\\") } \"]},\"13\":{\"c\":[\"Golang\"]},\"14\":{\"c\":[\"问题分析\"]},\"15\":{\"h\":\"Golang读取配置文件处理方式\"},\"16\":{\"h\":\"使用yaml.v2进行配置文件读取(只能读取yml)\"},\"17\":{\"h\":\"yaml配置文件\",\"t\":[\"Application: Name: OpenIDProvider Host: localhost Port: 8000 MySQL: root: root password: 123456 DBName: codefixer Redis: Address: localhost:6379 Password: \\\"\\\" DBName: 0 \"]},\"18\":{\"h\":\"使用yaml.v2读取配置文件\",\"t\":[\"package config import ( \\\"io/ioutil\\\" \\\"log\\\" \\\"gopkg.in/yaml.v2\\\" ) func init() { yamlFile, err := ioutil.ReadFile(\\\"./config/config.yml\\\") if err != nil { log.Println(err.Error()) } err = yaml.Unmarshal(yamlFile, &Conf) if err != nil { log.Println(err.Error()) } } //全局配置文件 var Conf *Config type Config struct { Application Application `yaml:\\\"Application\\\"` MySQL MySQL `yaml:\\\"MySQL\\\"` Redis Redis `yaml:\\\"Redis\\\"` Kafka interface{} `yaml:\\\"Kafka\\\"` Log interface{} `yaml:\\\"Log\\\"` OpenIDProvider interface{} `yaml:\\\"OpenIDProvider\\\"` } type Application struct { Name string `yaml:\\\"Name\\\"` Host string `yaml:\\\"Host\\\"` Port string `yaml:\\\"Port\\\"` } type MySQL struct { Root string `yaml:\\\"root\\\"` Password string `yaml:\\\"password\\\"` DBName string `yaml:\\\"DBName\\\"` } type Redis struct { Address string `yaml:\\\"Address\\\"` Password string `yaml:\\\"Password\\\"` DBName int `yaml:\\\"DBName\\\"` } \"]},\"19\":{\"h\":\"使用Viper读取配置文件(能从JSON、TOML、YAML、HCL、INI和Java properties文件中读取配置数据)\"},\"20\":{\"h\":\"yaml配置文件\",\"t\":[\"Application: Name: OpenIDProvider Host: localhost Port: 8000 MySQL: root: root password: 123456 DBName: codefixer Redis: Address: localhost:6379 Password: \\\"\\\" DBName: 0 \"]},\"21\":{\"h\":\"使用yaml.v2读取配置文件\",\"t\":[\"package config import ( \\\"io/ioutil\\\" \\\"log\\\" \\\"github.com/spf13/viper\\\" ) func init() { viper.SetConfigType(\\\"yaml\\\") viper.SetConfigFile(\\\"./config/config.yml\\\") err := viper.ReadInConfig() if err != nil { fmt.Println(err.Error()) } err = viper.Unmarshal(&Conf) if err != nil { fmt.Println(err.Error()) } } //全局配置文件 var Conf *Config type Config struct { Application Application `yaml:\\\"Application\\\"` MySQL MySQL `yaml:\\\"MySQL\\\"` Redis Redis `yaml:\\\"Redis\\\"` Kafka interface{} `yaml:\\\"Kafka\\\"` Log interface{} `yaml:\\\"Log\\\"` OpenIDProvider interface{} `yaml:\\\"OpenIDProvider\\\"` } type Application struct { Name string `yaml:\\\"Name\\\"` Host string `yaml:\\\"Host\\\"` Port string `yaml:\\\"Port\\\"` } type MySQL struct { Root string `yaml:\\\"root\\\"` Password string `yaml:\\\"password\\\"` DBName string `yaml:\\\"DBName\\\"` } type Redis struct { Address string `yaml:\\\"Address\\\"` Password string `yaml:\\\"Password\\\"` DBName int `yaml:\\\"DBName\\\"` } \"]},\"22\":{\"c\":[\"Golang\"]},\"23\":{\"c\":[\"问题分析\"]},\"24\":{\"h\":\"JSON Web Token(JWT)\"},\"25\":{\"h\":\"1. 摘要\",\"t\":[\"JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案，本文介绍它的原理，用法和详细的数据结构。\"]},\"26\":{\"h\":\"2. JWT的定义\",\"t\":[\"Json web token（JWT）是为了网络应用环境间传递声明而执行的一种基于JSON的开发标准（RFC 7519），该token被设计为紧凑且安全的，特别适用于分布式站点的单点登陆（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。\",\"什么情况下使用JWT比较适合？\",\"授权：这是最常见的使用场景，解决单点登录问题。因为JWT使用起来轻便，开销小，服务端不用记录用户状态信息（无状态），所以使用比较广泛；\",\"信息交换：JWT是在各个服务之间安全传输信息的好方法。因为JWT可以签名，例如，使用公钥/私钥对儿 - 可以确定请求方是合法的。此外，由于使用标头和有效负载计算签名，还可以验证内容是否未被篡改。\"]},\"27\":{\"h\":\"3. JWT的原理和流程\"},\"28\":{\"h\":\"3.1 跨域认证的问题\",\"t\":[\"互联网服务离不开用户认证。一般流程是下面这样：\",\"用户向服务器发送用户名和密码。\",\"服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。\",\"服务器向用户返回一个 session_id，写入用户的 Cookie。\",\"用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。\",\"服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。\",\"这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。\",\"举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？\",\"一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。\",\"另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。\"]},\"29\":{\"h\":\"3.2 JWT 的原理\",\"t\":[\"JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。\",\"{ \\\"姓名\\\": \\\"张三\\\", \\\"角色\\\": \\\"管理员\\\", \\\"到期时间\\\": \\\"2023年9月28日0点0分\\\" } \",\"以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。\",\"服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。\",\"区别:\",\"session 存储在服务端占用服务器资源，而 JWT 存储在客户端\",\"session 存储在 Cookie 中，存在伪造跨站请求伪造攻击的风险\",\"session 只存在一台服务器上，那么下次请求就必须请求这台服务器，不利于分布式应用\",\"存储在客户端的 JWT 比存储在服务端的 session 更具有扩展性\"]},\"30\":{\"h\":\"3.3 JWT的认证流程图\",\"t\":[\"JWT的认证流程图\",\"流程说明：\",\"浏览器发起请求登陆，携带用户名和密码；\",\"服务端验证身份，根据算法，将用户标识符打包生成 token,\",\"服务器返回JWT信息给浏览器，JWT不包含敏感信息；\",\"浏览器发起请求获取用户资料，把刚刚拿到的 token一起发送给服务器；\",\"服务器发现数据中有 token，验明正身；\",\"服务器返回该用户的用户资料；\"]},\"31\":{\"h\":\"3.4 JWT的6个优缺点\",\"t\":[\"JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次对其进行加密。\",\"当JWT未加密方法是，一些私密数据无法通过JWT传输。\",\"JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。\",\"JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。\",\"JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。\",\"为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。\"]},\"32\":{\"h\":\"4. JWT的数据结构\"},\"33\":{\"h\":\"4.1 JWT消息构成\",\"t\":[\"一个token分3部分，按顺序:\",\"头部（header) 载荷（payload) 签证（signature)\",\"JWT对象为一个很长的字符串，字符之间通过\\\".\\\"分隔符分为三个子串。注意JWT对象为一个长字串，各字串之间也没有换行符，一般格式为：xxxxx.yyyyy.zzzzz 。\",\"例如 yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\"JWT的认证流程图\"]},\"34\":{\"h\":\"4.2 头部（header)\",\"t\":[\"JWT的头部承载两部分信息：\",\"声明类型，这里是jwt\",\"声明加密的算法 通常直接使用 HMAC SHA256\",\"JWT里验证和签名使用的算法，可选择下面的：\",\"JWS\",\"算法名称\",\"描述\",\"HS256\",\"HMAC256\",\"HMAC with SHA-256\",\"HS384\",\"HMAC384\",\"HMAC with SHA-384\",\"HS384\",\"HMAC512\",\"HMAC with SHA-512\",\"RS256\",\"RSA256\",\"RSASSA-PKCS1-v1_5 with SHA-256\",\"RS384\",\"RSA384\",\"RSASSA-PKCS1-v1_5 with SHA-384\",\"RS512\",\"RSA512\",\"RSASSA-PKCS1-v1_5 with SHA-512\",\"ES256\",\"ECDSA256\",\"ECDSA with curve P-256 and SHA-256\",\"ES384\",\"ECDSA384\",\"ECDSA with curve P-384 and SHA-384\",\"ES512\",\"ECDSA512\",\"ECDSA with curve P-521 and SHA-512\",\"JWT的头部描述JWT元数据的JSON对象参考： { \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" }\"]},\"35\":{\"h\":\"4.3 载荷（payload)\",\"t\":[\"Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。\",\"iss (issuer)：签发人\",\"exp (expiration time)：过期时间\",\"sub (subject)：主题\",\"aud (audience)：受众\",\"nbf (Not Before)：生效时间\",\"iat (Issued At)：签发时间\",\"jti (JWT ID)：编号\",\"除以上默认字段外，我们还可以自定义私有字段，如下例： { \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"chongchong\\\", \\\"admin\\\": true }\",\"注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。 这个 JSON 对象也要使用 Base64URL 算法转成字符串。\",\"代码样例如下:\",\" JWT.create().withHeader(map) // header .withClaim(\\\"iss\\\", \\\"Service\\\") // payload .withClaim(\\\"aud\\\", \\\"APP\\\") .withIssuedAt(iatDate) // sign time .withExpiresAt(expiresDate) // expire time .withClaim(\\\"name\\\", \\\"cy\\\") // payload .withClaim(\\\"user_id\\\", \\\"11222\\\"); \"]},\"36\":{\"h\":\"4.4 签名（signature)\",\"t\":[\"Signature 部分是对前两部分的签名，防止数据篡改。 首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。\",\"HMACSHA256( base64UrlEncode(header) + \\\".\\\" + base64UrlEncode(payload), secret)\",\"算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用\\\"点\\\"（.）分隔，就构成整个JWT对象TOKEN， 就可以返回给用户。\"]},\"37\":{\"h\":\"4.4.1 Base64URL算法\",\"t\":[\"前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。 JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。\"]},\"38\":{\"h\":\"4.5 JWT的用法\",\"t\":[\"客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。 此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般是将它放入HTTP请求的Header中的Authorization字段中。\",\"Authorization: Bearer <token>\",\"当跨域时，也可以将JWT被放置于POST请求的数据主体中。\"]},\"39\":{\"h\":\"5. JWT、JWS、JWE的区别\",\"t\":[\"JWT(JSON Web Tokens)，jwt长度较小，且可以使用URL传输(URL safe)。不想cookies只能在web环境起作用。 JWT可以同时使用在web环境和RESTfull的接口。\",\"对于开发者来说，JWT与另外两种相近的标准:JWS(JSON Web Signature)、JWE(JSON Web Encryption)，容易引起混乱。\",\"关于JWT的描述，可以参考RFC7519(https://tools.ietf.org/html/rfc7519)的描述: **JSON Web Token (JWT) **是一个间接地、URL安全的，表现为一组声明，可以在双方之间进行传输。一个JWT的声明，是指经过编码后的一个JSON对象，这个JSON对象可以是一个JSON Web Signature(JWS)结构的荷载(payload)，或者是一个JSON Web Encryption(JWE)结构的明文。允许使用声明进行数字签名，或者通过一个Message Authentication Code(MAC)进行完整性保护可选择是否加密。\",\"简单来说，JWTs表现为一组被编码为JWS and/or JWE结构的JSON object的声明(Claim).\",\"换言之，一组JWT声明(就是表现为JSON格式的Claims)被通过JWS结构或者JWE结构(或者同时使用两种)发送，决定于你如何去实现它。所以，当你发送JWT给别人是，它实际上是一个JWT荷载或者JWE荷载。JWS荷载更加常用。\",\"关于JWS 顾名思义，JWS模式对这个内容进行了数字化签名。这个内容被用来存放JWT的声明.服务端签名出JWT并且发送到客户端，并在用户成功认证后进行应答。服务器期望客户端在下次请求的时候将JWS作为请求的一部分，发送回服务端。\",\"如果我们处理的客户端是欺骗者怎么办呢？这就是签名(signature)需要出场的地方了。签名携带了完整的可验证的信息。换句话说，服务器可以确认，接收到的JWT声明里的JWS是没有经过欺骗客户端、中间者进行修改的。 服务端通过验证消息的签名来确保客户端没有修改声明。如果服务端检测到任何修改，可以采取适当的动作(拒绝这次请求或者锁定客户端之类的)。 客户端同样可以验证签名，为了做到这点，客户端也需要服务端的secret(密钥)(如果这个JWT签名是HMAC算法),或者需要服务端对公钥(如果这个WJT是数字化签名)。 特别注意：对于JWS，荷载(声明部分)没有进行加密，所以，不要发送任何敏感信息。\",\"关于JWE JWE模式会对内容加密，而不是签名。JWT的声明会被加密。因此JWE带来了保密性。JWE可以被签名并附在JWS里。这样的话就可以同时加密和签名。因此得到了保密性(Confidentiality)、完整性(Integrity)、可认证(Authentication)。\",\"那么对于客户端，如何分辨JWS或者JWE呢？\\nJWS的Header与JWE的Header是不同的，可以通过检查“alg”Header参数的值来区分。如果这个值表现为一个数字签名或者MAC的算法，或者是”none“，则它是一个JWS。\\n如果它表现为一个 Key Encryption, Key Wrapping, Direct Key Agreement, Key Agreement with Key Wrapping, or Direct Encryption algorithm。则它是一个JWE。\\n还可以通过Header里的“enc”(encryption algorithm)是否存在来判断，如果\\\"enc\\\"这个成员存在的话说明是JWE，否则的话就是JWS.\"]},\"40\":{\"c\":[\"JSON Web Token\"]},\"41\":{\"h\":\"JavaSwing实践记录\"},\"42\":{\"h\":\"1.将JPanel保存为png\",\"t\":[\" /**导出曲线图*/ private void SaveCurve() { try { //文件选择器 JFileChooser fileChooser = new JFileChooser(); //移除全部文件 fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter()); //后缀名过滤器，只显示.plc和.png FileNameExtensionFilter filterPng = new FileNameExtensionFilter(\\\"*.png\\\", \\\"png\\\"); fileChooser.setFileFilter(filterPng); FileNameExtensionFilter filterPlc = new FileNameExtensionFilter(\\\"*.plc\\\", \\\"plc\\\"); fileChooser.setFileFilter(filterPlc); //保存按钮 int save = fileChooser.showSaveDialog(null); //用户点击保存，进行保存操作 if (save == JFileChooser.APPROVE_OPTION) { File file = fileChooser.getSelectedFile(); //判断保存的格式是.plc还是.png FileFilter fileFilter = fileChooser.getFileFilter(); if (\\\"*.plc\\\".equals(fileFilter.getDescription())) { } else if (\\\"*.png\\\".equals(fileFilter.getDescription())) { //获取画布数据 Dimension imagesize = this.drawPanel.getSize(); BufferedImage bufferedImage = new BufferedImage(imagesize.width, imagesize.height, BufferedImage.TYPE_INT_RGB); Graphics2D g2 = bufferedImage.createGraphics(); this.drawPanel.paint(g2); g2.dispose(); File filePng = new File(file.getPath() + \\\".png\\\"); //文件不存在创建文件 if (!filePng.exists()) { filePng.createNewFile(); //保存文件 ImageIO.write(bufferedImage, \\\"png\\\", filePng); JOptionPane.showMessageDialog(null, \\\"保存成功！\\\"); } else { //确认是否覆盖 int opt = JOptionPane.showConfirmDialog(null, \\\"文件已存在，是否覆盖?\\\", \\\"确认\\\", JOptionPane.YES_NO_OPTION); if (opt == JOptionPane.YES_OPTION) { //保存文件 ImageIO.write(bufferedImage, \\\"png\\\", filePng); JOptionPane.showMessageDialog(null, \\\"保存成功！\\\"); } } } } } catch (Exception e) { e.printStackTrace(); } } \"]},\"43\":{\"c\":[\"Java\"]},\"44\":{\"c\":[\"Java Swing\"]},\"45\":{\"h\":\"SpringBoot整合第三方依赖\"},\"46\":{\"h\":\"SpringBoot整合Swagger3(OpenAPI)\",\"t\":[\"导入Maven依赖,官网地址：Springdoc\",\" <dependency> <groupId>org.springdoc</groupId> <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId> <version>2.3.0</version> </dependency> \",\"添加配置文件\",\"springdoc: api-docs: enabled: true path: /swagger \"]},\"47\":{\"c\":[\"SpringBoot\"]},\"48\":{\"c\":[\"第三方依赖\"]},\"49\":{\"h\":\"WSL2的使用与BUG\"},\"50\":{\"h\":\"WSL如何重新启动（restart）\",\"t\":[\"sudo systemctl restart命令无效\",\"打开任务管理器，找到服务选项卡，找到LxssManager右键重新启动即可。\"]},\"51\":{\"h\":\"WSL2中安装Docker\",\"t\":[\"错误安装方式\",\"sudo apt install docker.io \",\"出现sudo service docker start启动错误：docker: unrecognized service\",\"正确安装方式\",\"使用脚本自动安装 在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 --mirror 选项使用国内源进行安装： 若你想安装测试版的 Docker, 请从 test.docker.com 获取脚本\",\"# $ curl -fsSL test.docker.com -o get-docker.sh $ curl -fsSL get.docker.com -o get-docker.sh $ sudo sh get-docker.sh --mirror Aliyun # $ sudo sh get-docker.sh --mirror AzureChinaCloud \",\"执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。\",\"启动 Docker $ sudo service docker start\",\"建立 docker 用户组 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组: 建立 docker 组： $ sudo groupadd docker 将当前用户加入 docker 组： $ sudo usermod -aG docker $USER 退出当前终端并重新登录，进行如下测试。\",\"正确安装会出现一个问题(使用sudo service docker start启动docker时提示启动但是并未真正启动)按以下方法解决\",\"使用过 WSL2 的人肯定知道，WSL2 中不能使用systemctl，需要使用service来启动 docker 或其他服务。\",\"启动 docker：\",\"sudo service docker start \",\"此时竟无法启动，查看日志：\",\"$ cat /var/log/docker.log ... Sep 13 20:47:37 xxx dockerd: failed to start daemon: Error initializing network controller: error obtaining controller instance: failed to create NAT chain DOCKER: iptables failed: iptables -t nat -N D OCKER: iptables v1.4.21: can't initialize iptables table `nat': Table does not exist (do you need to ins mod?) \",\"可以看到是 iptables 的问题，此问题在其 github 仓库中有人提出过#1105，幸运的是，这个问题正好能被简单地解决。\",\"首先，将iptables用iptables-legacy替换：\",\"sudo update-alternatives --set iptables /usr/sbin/iptables-legacy \",\"然后，开启 ipv4 的包转发功能：\",\"sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf \",\"最后，重启 WSL2，下面的代码在管理员模式下的 powershell 中运行：\",\"wsl --shutdown \",\"此时再启动 Debian，就能顺利启动 docker了。\"]},\"52\":{\"h\":\"WSL2中安装MySQL\",\"t\":[\"安装 在 WSL2 上安装 MySQL (Ubuntu) ：\",\"打开 WSL 终端 (即。Ubuntu) 。\",\"更新 Ubuntu 包：sudo apt update\",\"更新该包后，使用以下命令安装 MySQL：sudo apt install mysql-server\",\"确认安装并获取版本号：mysql --version\",\"可能还想运行包含的安全脚本。 这会更改一些不太安全的默认选项，例如远程根登录名和示例用户。 运行安全脚本：\",\"启动 MySQL 服务器：sudo /etc/init.d/mysql start\",\"启动安全脚本提示符：sudo mysql_secure_installation 3.第一个提示符会询问是否要设置验证密码插件，该插件可用于测试 MySQL 密码的强度。 然后将为 MySQL 根用户设置密码，决定是否删除匿名用户，决定是否允许根用户本地和远程登录，决定是否删除测试数据库，最后决定是否立即重新加载特权表。\",\"若要打开 MySQL 提示符，请输入：sudo mysql\",\"若要查看可用的数据库，请在 MySQL 提示符中输入：SHOW DATABASES;\",\"若要创建新数据库，请输入：CREATE DATABASE database_name;\",\"若要删除数据库，请输入： DROP DATABASE database_name;\",\"有关使用 MySQL 数据库的更多信息，请参阅 MySQL 文档。\",\"详细内容浏览官方文档\",\"卸载\",\"sudo apt purge mysql-* sudo rm -rf /etc/mysql/ /var/lib/mysql sudo apt autoremove sudo apt autoclean \",\"apt-get purge 与 apt-get remove是不同的，简单来说：\",\"purge可以将包以及软件的配置文件全部删除 remove仅可以删除包，但不会删除配置文件\",\"问题\",\"MySQL服务启动时出现su: warning: cannot change directory to /nonexistent: No such file or directoryGithub Issues\",\"sudo service mysql stop #先停止服务 sudo usermod -d /var/lib/mysql/ mysql #为 mysql 用户创建一个主目录 sudo service mysql start #然后再启动 \",\"设置MySQL服务相关命令\",\"查看MySQL运行状态： sudo service mysql status\",\"开机自启：sudo update-rc.d -f mysql defaults\",\"取消开机自启：sudo update-rc.d -f mysql remove\",\"开启MySQL服务：sudo service mysql start\",\"关闭MySQL服务：sudo service mysql stop\",\"Linux使用sudo mysql -u root -p登录MySQL，虽然会提示输入密码，但是输入任何内容都可以成功登录。\",\"sudo mysql登录成功后，我们可以切换到mysql对root的密码进行修改，具体操作如下：\",\"#switch database mysql>use msyql; #update root's password mysql>alter user 'root'@'localhost' identified with mysql_native_password by '123456'; #write privileges mysql>flush privileges; \",\"之后即可quit/exit退出。\",\"这里要注意，最好重启一下mysql服务，以使配置生效。\",\"然后通过root登录\",\"mysql -uroot -p123456 \"]},\"53\":{\"c\":[\"Linux\"]},\"54\":{\"c\":[\"WSL2\"]},\"55\":{\"h\":\"gorm中表名自动加s使用复数问题处理\"},\"56\":{\"h\":\"在gorm配置文件中添加单数表名配置项\",\"t\":[\" db, err := gorm.Open(mysql.New(mysql.Config{ DSN: config.Conf.MySQL.UserName+\\\":\\\"+config.Conf.MySQL.Password+\\\"@tcp(\\\"+config.Conf.MySQL.Address+\\\")/\\\"+config.Conf.MySQL.DBName+\\\"?charset=utf8&parseTime=True&loc=Local\\\", // DSN data source name }), &gorm.Config{ NamingStrategy: schema.NamingStrategy{ SingularTable: true, // 使用单数表名 }, }) \"]},\"57\":{\"c\":[\"gorm\"]},\"58\":{\"c\":[\"问题分析\"]},\"59\":{\"h\":\"基于角色访问控制(Role-Based Access Control)模型\"},\"60\":{\"h\":\"前言\",\"t\":[\"开发一个系统，必然面临权限控制的问题，即不同的用户具有不同的访问、操作、数据权限。\",\"四种形成经典理论的权限控制模型有：\",\"自主访问控制（DAC: Discretionary Access Control）\",\"强制访问控制（MAC: Mandatory Access Control）\",\"基于属性访问控制（ABAC: Attribute-Based Access Control）\",\"基于角色访问控制（Role-Based Access Control），本文就将向大家介绍该权限模型。\",\"相关术语:\",\"用户：发起操作的主体；\",\"对象：指操作所针对的客体对象，比如订单数据或图片文件；\",\"角色：赋予用户某种身份；\",\"权限控制表(ACL: Access Control List)：用来描述权限规则或用户和权限之间关系的数据表；\",\"权限(Permission)：用来指代对某种对象的某一种操作，例如“添加文章的操作”；\",\"权限标识：权限的代号，例如用“ARTICLE_ADD”来指代“添加文章”的操作权限。\"]},\"61\":{\"h\":\"DAC权限模型简介\",\"t\":[\"自主访问控制(DAC: Discretionary Access Control)模型，系统会识别用户，然后根据被操作对象(Subject)的权限控制列表(ACL: Access Control List)或者权限控制矩阵(ACL: Access Control Matrix)的信息来决定用户是否能对其进行哪些操作，例如读取或修改。而拥有对象权限的用户，又可以将该对象的权限分配给其他用户，所以称之为“自主(Discretionary)”控制。\",\"这种设计最常见的应用就是文件系统的权限设计，如微软的 NTFS。\",\"DAC 最大的缺陷就是对权限控制比较分散，不便于管理，比如无法简单地对一组文件设置统一的权限并开放给指定的一群用户。\"]},\"62\":{\"h\":\"MAC权限模型简介\",\"t\":[\"强制访问控制模型(MAC: Mandatory Access Control)，MAC 是为了弥补 DAC 权限控制过于分散的问题而诞生的。在 MAC 的设计中，每一个对象都有一些权限标识，每个用户同样也会有一些权限标识，而用户能否对该对象进行操作取决于双方权限标识的关系，这个关系的判断通常是由系统硬性限制的。比如在影视作品中我们经常能看到特工在查询机密文件时，屏幕提示“无法访问，需要一级安全许可”。这个例子中，文件上就有“一级安全许可”的权限标识，而用户并不具有。\",\"MAC 非常适合机密机构或者其他等级观念强烈的行业，但对于类似商业服务系统，则因为不够灵活而不能适用。\"]},\"63\":{\"h\":\"ABAC权限模型简介\",\"t\":[\"基于属性的访问控制模型(ABAC: Attribute-Based Access Control)，被一些人称为是权限系统设计的未来。\",\"不同于常见的将用户通过某种方式关联到权限的方式，ABAC 则是通过动态计算一个或一组属性是否满足某种条件来进行授权判断（可以编写简单的逻辑）。属性通常来说分为四类：用户属性（如用户年龄），环境属性（如当前时间），操作属性（如读取）和对象属性（如一篇文章，又称资源属性），所以理论上能够实现非常灵活的权限控制，几乎能满足所有类型的需求。\",\"例如：“允许所有班主任在上课时间自由进出校门”这条规则，其中，“班主任”是用户的角色属性，“上课时间”是环境属性，“进出”是操作属性，而“校门”就是对象属性了。为了便捷的执行规则设置和规则判断，ABAC 通常有配置文件(XML、YAML等)或 DSL 配合规则解析引擎使用。XACML(eXtensible Access Control Markup Language)是 ABAC 的一个实现，但是该设计过于复杂，故不做介绍。\",\"既然 ABAC 这么好，那最流行的为什么还是 RBAC 呢？我认为主要还是因为大部分系统对权限控制并没有过多的需求，而且 ABAC 的管理相对来说太复杂了。Kubernetes 便因为 ABAC 太难用，在 1.8 版本里引入了 RBAC 的方案。\",\"ABAC 有时也被称为 PBAC(Policy-Based Access Control)或 CBAC(Claims-Based Access Control)。\"]},\"64\":{\"h\":\"RBAC权限模型简介\",\"t\":[\"RBAC（Role-Based Access Control）中文全称是基于角色的访问控制，是20世纪90年代研究出来的一种新模型，但其实在20世纪70年代的多用户计算时期，这种思想就已经被提出来，直到20世纪90年代中后期，RBAC才在研究团体中得到一些重视，并先后提出了许多类型的RBAC模型。其中以美国George Mason大学信息安全技术实验室（LIST）提出的RBAC96模型最具有代表，并得到了普遍的公认。 在RBAC模型中，权限与角色相关联，不同的角色有不同的权限，用户通过被分配为不同的角色从而获得不同角色的权限，从而简化用户的权限管理。用户与角色关联后，同能进行自主授权和权限专营，必须通过角色来控制授权信息，实现访问控制。\"]},\"65\":{\"h\":\"RBAC权限模型组成\",\"t\":[\"在RBAC模型里面，有3个基础组成部分，分别是：用户、角色和权限。\",\"RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现了用户和权限的逻辑分离（区别于ACL模型），极大地方便了权限的管理：\",\"User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色\",\"Role（角色）：不同角色具有不同的权限\",\"Permission（权限）：访问权限\",\"用户-角色映射：用户和角色之间的映射关系\",\"角色-权限映射：角色和权限之间的映射\",\"RBAC\",\"RBAC模型是RBAC机制的基本模型，又称为RBAC0(Core RBAC)，除此之外，还有一些在此基础上演化出来的模型，如角色分层模型RBAC1（Hierarchal RBAC）、角色限制模型RBAC2（Constraint RBAC）和统一模型RBAC3（Combines RBAC）。\"]},\"66\":{\"h\":\"基本模型(RBAC0)\",\"t\":[\"RBAC0，它是RBAC的核心，RBAC1、RBAC2、RBAC3都是先后在RBAC0上的扩展。RBAC0定义了能构成RBAC控制系统的最小的元素集合，RBAC0由四部分构成：\",\"用户（User）\",\"角色（Role）\",\"会话（Session）\",\"权限（Permission）\",\"RBAC0\"]},\"67\":{\"h\":\"角色分层模型(RBAC1)\",\"t\":[\"基于RBAC0模型，引入了角色间的继承关系，即角色上有了上下级的区别。角色间的继承关系可分为一般继承关系和受限继承关系。一般继承关系仅要求角色继承关系是一个绝对偏序关系，允许角色间的多继承。而受限继承关系则进一步要求角色继承关系是一个树结构，实现角色间的单继承。这种模型适合于角色之间层次分明，可以给角色分组分层。\",\"RBAC1\"]},\"68\":{\"h\":\"角色限制模型(RBAC2)\",\"t\":[\"RBAC2，基于RBAC0模型的基础上，进行了角色的访问控制。\",\"RBAC2，它是RBAC的约束模型，RBAC2也是建立的RBAC0的基础之上的，在RBAC0基础上假如了约束的概念，主要引入了静态职责分离SSD(Static Separation of Duty)和动态职责分离DSD(Dynamic Separation of Duty)。\",\"SSD是用户和角色的指派阶段加入的，主要是对用户和角色有如下约束:\",\"互斥角色：同一用户不能分配到一组互斥角色集合中的多个角色，互斥角色是指权限互相制约的两个角色。\",\"基数约束：一个角色被分配的用户数量受限，它指的是有多少用户能拥有这个角色。\",\"先决条件约束：指要想获得较高的权限，要首先拥有低一级的权限。\",\"运行时互斥：例如，允许一个用户具有两个角色的成员资格，但在运行中不可同时激活这两个角色\",\"RBAC2\"]},\"69\":{\"h\":\"统一模型(RBAC3)\",\"t\":[\"它包含了RBAC1和RBAC2，利用传递性，也把RBAC0包括在内，综合了RBAC0、RBAC1和RBAC2的所有特点\",\"RBAC3\"]},\"70\":{\"h\":\"模型关键点\",\"t\":[\"一个权限系统需要具备如下的几个关键要素：\",\"1.项目：对权限服务来说，一个项目，即为一个服务对象，不同项目间的权限数据是相互隔离的。\",\"2.权限点：业务系统定义的一个具体的权限，一般定义为一种动作，如：签约、审批、增、删、查、改等，都可以是一个权限点。权限点不直接分配给用户。\",\"3.角色：一定数量权限点的集合。权限分配的单位与载体,目的是隔离用户与权限点的逻辑关系。\",\"4.权限约束：对一个权限点的附加限制，可配置为权限点的数据范围或附加条件。\",\"5.角色属性：对一个角色的附加属性，如：虚拟角色。角色属性通过\\\"全局权限点\\\"实现。（业务系统可自行定义，自行解释角色属性）\",\"6.全局权限点：是一种特殊的权限点，角色关联全局权限点后，全局权限点约束的键、值将作为角色属性返回。\",\"权限配置分类\",\"1.我们平时使用的权限其实是有分类的，大体上分为三类：页面权限、操作权限、数据权限。\"]},\"71\":{\"h\":\"利用RBAC模型进行权限体系的设计\",\"t\":[\"首先是：用户、角色、权限。而权限，具体到某个软件来说，实际上包含三个方面：一个是页面权限，一个是操作权限，一个是数据权限。\",\"权限分类\"]},\"72\":{\"h\":\"RBAC权限体系精简设计(用户量小)\",\"t\":[\"RBAC权限体系精简设计\",\"1.账号表（account） 在我们的系统中，会有各种各样的登录方式，如手机号、邮箱地址、身份证号码和微信登录等。因此该表主要是用来记录每一种登录方式的信息，但不包含密码信息，因为各种登录方式都会使用同一个密码。每一条记录都会关联到唯一的一条用户记录。\",\"CREATE TABLE `account` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '账号ID', `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户ID', `open_code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '登录账号,如手机号等', `category` tinyint(1) NULL DEFAULT NULL COMMENT '账号类别', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` double(1, 0) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `idx_member_id`(`user_id`) USING BTREE COMMENT '普通索引', CONSTRAINT `account_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '账号' ROW_FORMAT = Dynamic; \",\"2.用户表（user） 主要是用来记录用户的基本信息和密码信息。其中禁用状态（state）主要是在后台管理控制非法用户使用系统；密码加盐（salt）则是用于给每个用户的登录密码加一把唯一的锁，即使公司加密公钥泄露后，也不会导致全部用户的密码泄露。\",\"CREATE TABLE `user` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户ID', `state` tinyint(1) NULL DEFAULT NULL COMMENT '用户状态:0=正常,1=禁用', `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '姓名', `head_img_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像图片地址', `mobile` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号码', `salt` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '密码加盐', `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '登录密码', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户' ROW_FORMAT = Dynamic; \",\"用户账号表（account）和用户表（user）组合在一起，就完成了用户账号模块的设计。如果还想再细分，则可以将两张表拆为以下三张表：\",\"用户信息表（user）：只存储用户基本信息（不包括密码）\",\"账号表（account）：只存储账号相关信息（如密码、注册来源、注册 IP，但不包括登录账号）\",\"登录账号表（login_account）：用来存储每一种登录方式的信息（不包括密码信息）\",\"当然，如果用户信息的字段太多，则可以适当拆分为多张不同领域的用户信息表，这里不再介绍。\",\"3.权限表（permission） 有了用户之后，我们希望不同的用户能操作和查看不同的功能（如页面、菜单和按钮等）。因此需要定义一张表来存储权限相关的信息。包括权限之前还有父子关系，分配了父级后，应该拥有所有的子级权限。同时权限的信息也会分配至前端页面来控制，因此需要提供一个唯一标识（code），有人会问 id 不行吗？当然可以，只是我们的 ID 是自动生成，每个环境都不一样，重新生成后也不一样，因此才单独使用了一个字段来标识。\",\"CREATE TABLE `permission` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '权限ID', `parent_id` bigint(20) NULL DEFAULT NULL COMMENT '所属父级权限ID', `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限唯一CODE代码', `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限名称', `intro` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '权限介绍', `category` tinyint(1) NULL DEFAULT NULL COMMENT '权限类别', `uri` bigint(20) NULL DEFAULT NULL COMMENT 'URL规则', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `parent_id`(`parent_id`) USING BTREE COMMENT '父级权限ID', INDEX `code`(`code`) USING BTREE COMMENT '权限CODE代码' ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '权限' ROW_FORMAT = Dynamic; \",\"其实，再加一张 用户权限表（user_permission） 即可组成一个用户权限中心了，但这样做是不好的。比如我们设想：有 200 个权限点，1 亿个用户，每个人平均配置 100 个权限，则 user_permission 表将会有 100 亿条记录，而且每当我们新增 1 个权限点时，可能需要添加上亿条记录。简而言之会有以下弊端：\",\"中间数据量庞大 新增或编辑时，操作数据量的数据量也是非常庞大 维护起来也很麻烦 因此，我们会引入一张角色表（role）来解决问题。\",\"4.角色表（role） 为了解决维护起来方便，我们会对权限表中的记录进行分组，将相关的一些权限分配为同一组，称之为角色。角色表的作用是为了将零散的权限进行聚合，然后方便对相关的一组进行统一处理（即小范围批量处理）。该表的增加可谓是大大减少了上述维护困难的问题。\",\"CREATE TABLE `role` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '角色ID', `parent_id` bigint(20) NULL DEFAULT NULL COMMENT '所属父级角色ID', `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色唯一CODE代码', `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色名称', `intro` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色介绍', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `parent_id`(`parent_id`) USING BTREE COMMENT '父级权限ID', INDEX `code`(`code`) USING BTREE COMMENT '权限CODE代码' ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色' ROW_FORMAT = Dynamic; \",\"5.用户—角色表（user_role） 该表主要是用来存储每个用户拥有哪些角色。一般情况，每个用户只会有几个角色，因此数据量从 100 亿变成 10 亿或更少\",\"CREATE TABLE `user_role` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID', `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户ID', `role_id` bigint(20) NULL DEFAULT NULL COMMENT '角色ID', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `member_id`(`user_id`) USING BTREE COMMENT '用户ID', INDEX `role_id`(`role_id`) USING BTREE COMMENT '角色ID', CONSTRAINT `user_role_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT, CONSTRAINT `user_role_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户角色' ROW_FORMAT = Dynamic; \",\"6.角色 - 权限表（role_permission） 该表则是用来定义每个角色组中有哪些权限。该表的数量则更少（基本都在 1 万条以内）。\",\"CREATE TABLE `role_permission` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID', `role_id` bigint(20) NULL DEFAULT NULL COMMENT '角色ID', `permission_id` bigint(20) NULL DEFAULT NULL COMMENT '权限ID', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `role_id`(`role_id`) USING BTREE COMMENT '角色ID', INDEX `permission_id`(`permission_id`) USING BTREE COMMENT '权限ID', CONSTRAINT `role_permission_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT, CONSTRAINT `role_permission_ibfk_2` FOREIGN KEY (`permission_id`) REFERENCES `permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '角色权限' ROW_FORMAT = Dynamic; \",\"总结一下，本节所说的精简版代表的是，能在线上运行的表设计（4 张实体表和 2 张中间表），虽然使用 account、user、permission、user_permission 也能用，但基本没人会这样来用的，因为对后期维护起来很麻烦，数据量也很庞大。\",\"账号表（account）：记录登录账号信息\",\"用户表（user）：记录用户基本信息和密码\",\"权限表（permission）：记录权限信息\",\"角色表（role）：记录角色信息，即定义权限组\",\"用户—角色表（user_role）：记录每个用户拥有哪些角色信息\",\"角色—权限表（role_permission）：记录每个角色拥有哪些权限信息\"]},\"73\":{\"h\":\"RBAC权限体系完整设计(用户量大)\",\"t\":[\"RBAC权限体系完整设计\",\"1.用户组表（user_group） 上述虽然增加了角色表（role）后，把数据量从 100 亿降低至 10 亿，但 10 倍的数据量依然还是很多。而且大部分的用户（主体用户。如学生系统，学生就是主体）都会分配相同的角色组。用户组和角色组的区别：\",\"角色组（role）：解决的是权限的分组，减少了权限的重复分配 用户组（user_group）：解决的是用户的分组，减少了用户的重复授权\",\"CREATE TABLE `user_group` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID', `parent_id` bigint(20) NULL DEFAULT NULL COMMENT '所属父级用户组ID', `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户组名称', `code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户组CODE唯一代码', `intro` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '用户组介绍', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `parent_id`(`parent_id`) USING BTREE COMMENT '父级用户组ID', INDEX `code`(`code`) USING BTREE COMMENT '用户组CODE代码' ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户组' ROW_FORMAT = Dynamic; \",\"2.用户组—用户表（user_group_user） 该表用来记录每个用户组下有哪些用户。\",\"CREATE TABLE `user_group_user` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID说', `user_group_id` bigint(20) NULL DEFAULT NULL COMMENT '用户组ID', `user_id` bigint(20) NULL DEFAULT NULL COMMENT '用户ID', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `member_group_id`(`user_group_id`) USING BTREE COMMENT '用户组ID', INDEX `member_id`(`user_id`) USING BTREE COMMENT '用户ID', CONSTRAINT `user_group_user_ibfk_1` FOREIGN KEY (`user_group_id`) REFERENCES `user_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT, CONSTRAINT `user_group_user_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户组成员' ROW_FORMAT = Dynamic; \",\"3.用户组—角色表（user_group_role） 该表用来记录每个用户组下拥有哪些用户角色。\",\"CREATE TABLE `user_group_role` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'ID', `user_group_id` bigint(20) NULL DEFAULT NULL COMMENT '用户组ID', `role_id` bigint(20) NULL DEFAULT NULL COMMENT '角色ID', `created` datetime(0) NULL DEFAULT NULL COMMENT '创建时间', `creator` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建人', `edited` datetime(0) NULL DEFAULT NULL COMMENT '修改时间', `editor` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '修改人', `deleted` tinyint(1) UNSIGNED ZEROFILL NULL DEFAULT 0 COMMENT '逻辑删除:0=未删除,1=已删除', PRIMARY KEY (`id`) USING BTREE, INDEX `member_group_id`(`user_group_id`) USING BTREE COMMENT '用户组ID', INDEX `role_id`(`role_id`) USING BTREE COMMENT '角色ID', CONSTRAINT `user_group_role_ibfk_1` FOREIGN KEY (`user_group_id`) REFERENCES `user_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT, CONSTRAINT `user_group_role_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户组角色' ROW_FORMAT = Dynamic; \",\"每个系统主体用户，基本都占用了所有用户的 90% 以上（既包含用户，又包含商家的系统，用户和商家同时都是主题用户）。因此，每个用户注册时，基本只需要分配一条所属的用户组，即可完成角色权限的配置。这样处理后，数据量将从 10 亿下降至 1 亿多。同时也减少了用户注册时的需批量写入数量。\"]},\"74\":{\"h\":\"RBAC权限模型优点\",\"t\":[\"RBAC最大的优点之一是它提供了一种系统化的方法，用于定义和维护角色，使您能够仅根据用户需要一致地授予访问权限，从而降低数据泄露或数据丢失的风险。\",\"但RBAC还有很多其他好处，包括：\",\"通过根据人力资源属性自动为新员工分配访问权限来加速入职\",\"简化IT管理工作，例如，通过在全球范围内跨多个平台和应用程序快速重新分配权限\",\"改善对欧盟《一般数据保护规则》（GDPR）或美国《健康保险可移植性和责任法案》（HIPAA）等法规的遵守\",\"通过为供应商和业务合作伙伴等外部用户提供预定义的角色来降低第三方风险\",\"通过在角色更改时自动更新访问权限来维护“最低权限”的最佳实践\",\"降低高级访问控制的成本，尤其是在大型复杂环境中\"]},\"75\":{\"h\":\"RBAC权限模型缺陷\",\"t\":[\"需要了解组织结构知识\",\"没有一种一刀切的方法来定义角色。在决定如何对角色进行分类以及如何管理这些角色的访问权限时，组织必须跨部门协调。这需要清楚地了解组织的理想结构以及支持它的技术基础设施。\",\"在大型或成长中的组织中，如果IT或安全经理需要在没有人力资源或执行决策者帮助的情况下定义角色，这可能是一项艰巨的任务，会变得更加困难。这种简化实施的常见尝试实际上使问题变得更糟，导致与公司更大的目标不一致。\",\"需要深思熟虑的实施\",\"分配角色可能是一项挑战。可能会出现很多问题，答案并不总是清晰的。例如：安全团队是否需要访问他们试图保护的数据，包含哪些访问权限（创建/读取/更新/删除）？是否应为用户分配部门之外的角色，以确保临时访问特权文件？\",\"缺乏灵活性\",\"RBAC以过于死板著称，这也难怪。组织成长，团队扩张，访问需求发生变化。在RBAC项目开始时定义的角色可能不再符合公司目标。\",\"结果如何？人员的角色和权限级别可能不一致。例如，一个人可能被赋予过多的角色权限、分配过多的角色，或者两者兼而有之。虽然这些努力可能会起到快速修复的作用，但它们也会造成安全漏洞和法规遵从性挑战，从而打消了您最初实施RBAC的全部原因。\",\"导致角色爆炸\",\"一些团队试图通过定义越来越细粒度的角色、在出现新需求时创建临时角色，或将太多的角色分配给单个用户来回避上述问题。虽然这可能会在短期内缓解摩擦，但也会让RBAC变得混乱，难以管理。\",\"这个问题通常被称为角色爆炸，是RBAC最常见的反对意见之一。当现实世界中的角色和访问需求与您的政策文件中概述的角色和访问需求不同时，甚至在很小的程度上也会出现这种情况。而作为临时解决方案创建的角色有时管理员可能会忘记或甚至故意选择保留这些角色，即使为其创建这些角色的人员离开或更换组织内的工作。结果是：特权蔓延和混乱。\"]},\"76\":{\"c\":[\"架构\"]},\"77\":{\"c\":[\"用户角色权限设计\"]},\"78\":{\"h\":\"个人介绍\",\"t\":[\"📚 I’m continuous learning\",\"👨‍🔧 Professional skill\",\"Front end \",\"📗 Vue3、ElementUI-Plus、Vite\",\"📜 TypeScript\",\"📰 Nodejs\",\"Back end \",\"☕ Java、JVM\",\"🍃 Spring、SpringMVC、SpringBoot、Mybatis\",\"🧩 SpringCloud Alibaba、Nacos、Fegin、Sentinel、Gateway、Seata\",\"⛵ Istio\",\"Database \",\"📈 MySQL\",\"🔍 Redis\",\"📊 ElasticSearch\",\"MessageQueue \",\"📮 RabbitMQ\",\"Container \",\"🐳 Docker\",\"🕸️ Kubernetes\",\"Other \",\"🐙 Git\",\"🧵 Maven\",\"🐧 Ubuntu\",\"📝 I regularly write articles on gaoyangbenyang.github.io\",\"📫 How to reach me gaoyangbenyang@outlook.com\"]},\"79\":{\"h\":\"MySQL Docs\"},\"80\":{\"h\":\"前言\",\"t\":[\"本文针对关系型数据库的基本语法。本文侧重说明用法，不会展开讲解特性、原理。\",\"本文语法主要针对 MySQL，但大部分的语法对其他关系型数据库也适用。\",\"img\"]},\"81\":{\"h\":\"1.SQL 简介\"},\"82\":{\"h\":\"1.1 数据库术语\",\"t\":[\"数据库（database） - 保存有组织的数据的容器（通常是一个文件或一组文件）。\",\"数据表（table） - 某种特定类型数据的结构化清单。\",\"模式（schema） - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储， 包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。\",\"列（column） - 表中的一个字段。所有表都是由一个或多个列组成的。\",\"行（row） - 表中的一个记录。\",\"主键（primary key） - 一列（或一组列），其值能够唯一标识表中每一行。\"]},\"83\":{\"h\":\"1.2 SQL 语法\",\"t\":[\"SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。\"]},\"84\":{\"h\":\"1.2.1 SQL 语法结构\",\"t\":[\"img\",\"SQL 语法结构包括：\",\"子句 - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）\",\"表达式 - 可以产生任何标量值，或由列和行的数据库表\",\"谓词 - 给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。\",\"查询 - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。\",\"语句 - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。\"]},\"85\":{\"h\":\"1.2.2 SQL 语法要点\",\"t\":[\"SQL 语句不区分大小写，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。\",\"例如：SELECT 与 select 、Select 是相同的。\",\"多条 SQL 语句必须以分号（;）分隔。\",\"处理 SQL 语句时，所有空格都被忽略。SQL 语句可以写成一行，也可以分写为多行。\",\"-- 一行 SQL 语句 UPDATE user SET username='robot', password='robot' WHERE username = 'root'; -- 多行 SQL 语句 UPDATE user SET username='robot', password='robot' WHERE username = 'root'; \",\"SQL 支持三种注释\",\"## 注释1 -- 注释2 /* 注释3 */ \"]},\"86\":{\"h\":\"1.3 SQL 分类\"},\"87\":{\"h\":\"1.3.1 数据定义语言（DDL）\",\"t\":[\"数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。\",\"DDL 的主要功能是定义数据库对象。\",\"DDL 的核心指令是 CREATE、ALTER、DROP。\"]},\"88\":{\"h\":\"1.3.2 数据操纵语言（DML）\",\"t\":[\"数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。\",\"DML 的主要功能是 访问数据，因此其语法都是以读写数据库为主。\",\"DML 的核心指令是 INSERT、UPDATE、DELETE、SELECT。这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查。\"]},\"89\":{\"h\":\"1.3.3 事务控制语言（TCL）\",\"t\":[\"事务控制语言 (Transaction Control Language, TCL) 用于管理数据库中的事务。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。\",\"TCL 的核心指令是 COMMIT、ROLLBACK。\"]},\"90\":{\"h\":\"1.3.4 数据控制语言（DCL）\",\"t\":[\"数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。\",\"DCL 的核心指令是 GRANT、REVOKE。\",\"DCL 以控制用户的访问权限为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：CONNECT、SELECT、INSERT、UPDATE、DELETE、EXECUTE、USAGE、REFERENCES。\",\"根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。\",\"（以下为 DDL 语句用法）\"]},\"91\":{\"h\":\"2.数据定义（CREATE、ALTER、DROP）\",\"t\":[\"DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）。\"]},\"92\":{\"h\":\"2.1 数据库（DATABASE）\"},\"93\":{\"h\":\"2.1.1 创建数据库\",\"t\":[\"CREATE DATABASE IF NOT EXISTS db_name; \"]},\"94\":{\"h\":\"2.1.2 删除数据库\",\"t\":[\"DROP DATABASE IF EXISTS db_name; \"]},\"95\":{\"h\":\"2.1.3 选择数据库\",\"t\":[\"USE db_name; \"]},\"96\":{\"h\":\"2.2 数据表（TABLE）\"},\"97\":{\"h\":\"2.2.1 删除数据表\",\"t\":[\"DROP TABLE IF EXISTS user; DROP TABLE IF EXISTS vip_user; \"]},\"98\":{\"h\":\"2.2.2 创建数据表\",\"t\":[\"普通创建\",\"CREATE TABLE user ( id INT(10) UNSIGNED NOT NULL COMMENT 'Id', username VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '用户名', password VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '密码', email VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '邮箱' ) COMMENT ='用户表'; \",\"根据已有的表创建新表\",\"CREATE TABLE vip_user AS SELECT * FROM user; \"]},\"99\":{\"h\":\"2.2.3 修改数据表\"},\"100\":{\"h\":\"添加列\",\"t\":[\"ALTER TABLE user ADD age int(3); \"]},\"101\":{\"h\":\"删除列\",\"t\":[\"ALTER TABLE user DROP COLUMN age; \"]},\"102\":{\"h\":\"修改列\",\"t\":[\"ALTER TABLE `user` MODIFY COLUMN age tinyint; \"]},\"103\":{\"h\":\"2.3 视图（VIEW）\",\"t\":[\"视图是基于 SQL 语句的结果集的可视化的表。视图是虚拟的表，本身不存储数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。\",\"视图的作用：\",\"简化复杂的 SQL 操作，比如复杂的连接。\",\"只使用实际表的一部分数据。\",\"通过只给用户访问视图的权限，保证数据的安全性。\",\"更改数据格式和表示。\"]},\"104\":{\"h\":\"2.3.1 创建视图\",\"t\":[\"CREATE VIEW top_10_user_view AS SELECT id, username FROM user WHERE id < 10; \"]},\"105\":{\"h\":\"2.3.2 删除视图\",\"t\":[\"DROP VIEW top_10_user_view; \"]},\"106\":{\"h\":\"2.4 索引（INDEX）\",\"t\":[\"通过索引可以更加快速高效地查询数据。用户无法看到索引，它们只能被用来加速查询。\",\"更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。\",\"唯一索引：唯一索引表明此索引的每一个索引值只对应唯一的数据记录。\"]},\"107\":{\"h\":\"2.4.1 创建索引\",\"t\":[\"CREATE INDEX idx_email ON user(email); \"]},\"108\":{\"h\":\"2.4.2 创建唯一索引\",\"t\":[\"CREATE UNIQUE INDEX uniq_username ON user(username); \"]},\"109\":{\"h\":\"2.4.3 删除索引\",\"t\":[\"ALTER TABLE user DROP INDEX idx_email; ALTER TABLE user DROP INDEX uniq_username; \"]},\"110\":{\"h\":\"2.4.4 添加主键\",\"t\":[\"ALTER TABLE user ADD PRIMARY KEY (id); \"]},\"111\":{\"h\":\"2.4.5 删除主键\",\"t\":[\"ALTER TABLE user DROP PRIMARY KEY; \"]},\"112\":{\"h\":\"2.5 约束\",\"t\":[\"SQL 约束用于规定表中的数据规则。\",\"如果存在违反约束的数据行为，行为会被约束终止。\",\"约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。\",\"约束类型 \",\"NOT NULL - 指示某列不能存储 NULL 值。\",\"UNIQUE - 保证某列的每行必须有唯一的值。\",\"PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。\",\"FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。\",\"CHECK - 保证列中的值符合指定的条件。\",\"DEFAULT - 规定没有给列赋值时的默认值。\",\"创建表时使用约束条件：\",\"CREATE TABLE Users ( Id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '自增Id', Username VARCHAR(64) NOT NULL UNIQUE DEFAULT 'default' COMMENT '用户名', Password VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '密码', Email VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '邮箱地址', Enabled TINYINT(4) DEFAULT NULL COMMENT '是否有效', PRIMARY KEY (Id) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='用户表'; \",\"（以下为 DML 语句用法）\"]},\"113\":{\"h\":\"3.增删改查（CRUD）\",\"t\":[\"增删改查，又称为 CRUD，是数据库基本操作中的基本操作。\"]},\"114\":{\"h\":\"3.1 插入数据\",\"t\":[\"INSERT INTO 语句用于向表中插入新记录。\"]},\"115\":{\"h\":\"插入完整的行\",\"t\":[\"INSERT INTO user VALUES (10, 'root', 'root', 'xxxx@163.com'); \"]},\"116\":{\"h\":\"插入行的一部分\",\"t\":[\"INSERT INTO user(username, password, email) VALUES ('admin', 'admin', 'xxxx@163.com'); \"]},\"117\":{\"h\":\"插入查询出来的数据\",\"t\":[\"INSERT INTO user(username) SELECT name FROM account; \"]},\"118\":{\"h\":\"3.2 更新数据\",\"t\":[\"UPDATE 语句用于更新表中的记录。\",\"UPDATE user SET username='robot', password='robot' WHERE username = 'root'; \"]},\"119\":{\"h\":\"3.3 删除数据\",\"t\":[\"DELETE 语句用于删除表中的记录。\",\"TRUNCATE TABLE 可以清空表，也就是删除所有行。\"]},\"120\":{\"h\":\"删除表中的指定数据\",\"t\":[\"DELETE FROM user WHERE username = 'robot'; \"]},\"121\":{\"h\":\"清空表中的数据\",\"t\":[\"TRUNCATE TABLE user; \"]},\"122\":{\"h\":\"3.4 查询数据\",\"t\":[\"SELECT 语句用于从数据库中查询数据。\",\"DISTINCT 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。\",\"LIMIT 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。 \",\"ASC ：升序（默认）\",\"DESC ：降序\"]},\"123\":{\"h\":\"查询单列\",\"t\":[\"SELECT prod_name FROM products; \"]},\"124\":{\"h\":\"查询多列\",\"t\":[\"SELECT prod_id, prod_name, prod_price FROM products; \"]},\"125\":{\"h\":\"查询所有列\",\"t\":[\"SELECT * FROM products; \"]},\"126\":{\"h\":\"查询不同的值\",\"t\":[\"SELECT DISTINCT vend_id FROM products; \"]},\"127\":{\"h\":\"限制查询数量\",\"t\":[\"-- 返回前 5 行 SELECT * FROM products LIMIT 5; SELECT * FROM products LIMIT 0, 5; -- 返回第 3 ~ 5 行 SELECT * FROM products LIMIT 2, 3; \"]},\"128\":{\"h\":\"4.过滤数据（WHERE）\",\"t\":[\"子查询是嵌套在较大查询中的 SQL 查询。子查询也称为内部查询或内部选择，而包含子查询的语句也称为外部查询或外部选择。\",\"子查询可以嵌套在 SELECT，INSERT，UPDATE 或 DELETE 语句内或另一个子查询中。\",\"子查询通常会在另一个 SELECT 语句的 WHERE 子句中添加。\",\"您可以使用比较运算符，如 >，<，或 =。比较运算符也可以是多行运算符，如 IN，ANY 或 ALL。\",\"子查询必须被圆括号 () 括起来。\",\"内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询。执行过程可以参考下图：\",\"子查询的子查询\",\"SELECT cust_name, cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM orderitems WHERE prod_id = 'RGAN01')); \"]},\"129\":{\"h\":\"4.1 WHERE 子句\",\"t\":[\"在 SQL 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。\",\"WHERE 子句的基本格式如下：\",\"SELECT ……(列名) FROM ……(表名) WHERE ……(子句条件) \",\"WHERE 子句用于过滤记录，即缩小访问数据的范围。WHERE 后跟一个返回 true 或 false 的条件。\",\"WHERE 可以与 SELECT，UPDATE 和 DELETE 一起使用。\",\"SELECT 语句中的 WHERE 子句\",\"SELECT * FROM Customers WHERE cust_name = 'Kids Place'; \",\"UPDATE 语句中的 WHERE 子句\",\"UPDATE Customers SET cust_name = 'Jack Jones' WHERE cust_name = 'Kids Place'; \",\"DELETE 语句中的 WHERE 子句\",\"DELETE FROM Customers WHERE cust_name = 'Kids Place'; \",\"可以在 WHERE 子句中使用的操作符：\"]},\"130\":{\"h\":\"4.2 比较操作符\",\"t\":[\"运算符\",\"描述\",\"=\",\"等于\",\"<>\",\"不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=\",\">\",\"大于\",\"<\",\"小于\",\">=\",\"大于等于\",\"<=\",\"小于等于\"]},\"131\":{\"h\":\"4.3 范围操作符\",\"t\":[\"运算符\",\"描述\",\"BETWEEN\",\"在某个范围内\",\"IN\",\"指定针对某个列的多个可能值\",\"IN 操作符在 WHERE 子句中使用，作用是在指定的几个特定值中任选一个值。\",\"BETWEEN 操作符在 WHERE 子句中使用，作用是选取介于某个范围内的值。\",\"IN 示例\",\"SELECT * FROM products WHERE vend_id IN ('DLL01', 'BRS01'); \",\"BETWEEN 示例\",\"SELECT * FROM products WHERE prod_price BETWEEN 3 AND 5; \"]},\"132\":{\"h\":\"4.4 逻辑操作符\",\"t\":[\"运算符\",\"描述\",\"AND\",\"并且（与）\",\"OR\",\"或者（或）\",\"NOT\",\"否定（非）\",\"AND、OR、NOT 是用于对过滤条件的逻辑处理指令。\",\"AND 优先级高于 OR，为了明确处理顺序，可以使用 ()。AND 操作符表示左右条件都要满足。\",\"OR 操作符表示左右条件满足任意一个即可。\",\"NOT 操作符用于否定一个条件。\",\"AND 示例\",\"SELECT prod_id, prod_name, prod_price FROM products WHERE vend_id = 'DLL01' AND prod_price <= 4; \",\"OR 示例\",\"SELECT prod_id, prod_name, prod_price FROM products WHERE vend_id = 'DLL01' OR vend_id = 'BRS01'; \",\"NOT 示例\",\"SELECT * FROM products WHERE prod_price NOT BETWEEN 3 AND 5; \"]},\"133\":{\"h\":\"4.5 通配符\",\"t\":[\"运算符\",\"描述\",\"LIKE\",\"搜索某种模式\",\"%\",\"表示任意字符出现任意次数\",\"_\",\"表示任意字符出现一次\",\"[]\",\"必须匹配指定位置的一个字符\",\"LIKE 操作符在 WHERE 子句中使用，作用是确定字符串是否匹配模式。只有字段是文本值时才使用 LIKE。\",\"LIKE 支持以下通配符匹配选项：\",\"% 表示任何字符出现任意次数。\",\"_ 表示任何字符出现一次。\",\"[] 必须匹配指定位置的一个字符。\",\"注意：不要滥用通配符，通配符位于开头处匹配会非常慢。\",\"% 示例：\",\"SELECT prod_id, prod_name, prod_price FROM products WHERE prod_name LIKE '%bean bag%'; \",\"_ 示例：\",\"SELECT prod_id, prod_name, prod_price FROM products WHERE prod_name LIKE '__ inch teddy bear'; \"]},\"134\":{\"h\":\"5.排序 (ORDER BY)\",\"t\":[\"ORDER BY 用于对结果集进行排序。\",\"ORDER BY 有两种排序模式：\",\"ASC ：升序（默认）\",\"DESC ：降序\",\"可以按多个列进行排序，并且为每个列指定不同的排序方式。\",\"指定多个列的排序示例：\",\"SELECT * FROM products ORDER BY prod_price DESC, prod_name ASC; \"]},\"135\":{\"h\":\"6.分组 (GROUP BY)\",\"t\":[\"GROUP BY 子句将记录分组到汇总行中，GROUP BY 为每个组返回一个记录。\",\"GROUP BY 可以按一列或多列进行分组。\",\"GROUP BY 通常还涉及聚合函数：COUNT，MAX，SUM，AVG 等。\",\"GROUP BY 按分组字段进行排序后，ORDER BY 可以以汇总字段来进行排序。\",\"分组示例：\",\"SELECT cust_name, COUNT(cust_address) AS addr_num FROM Customers GROUP BY cust_name; \",\"分组后排序示例：\",\"SELECT cust_name, COUNT(cust_address) AS addr_num FROM Customers GROUP BY cust_name ORDER BY cust_name DESC; \"]},\"136\":{\"h\":\"6.1 HAVING\",\"t\":[\"HAVING 用于对汇总的 GROUP BY 结果进行过滤。HAVING 要求存在一个 GROUP BY 子句。\",\"WHERE 和 HAVING 可以在相同的查询中。\",\"HAVING vs WHERE：\",\"WHERE 和 HAVING 都是用于过滤。\",\"HAVING 适用于汇总的组记录；而 WHERE 适用于单个记录。\",\"使用 WHERE 和 HAVING 过滤数据示例：\",\"SELECT cust_name, COUNT(*) AS num FROM Customers WHERE cust_email IS NOT NULL GROUP BY cust_name HAVING COUNT(*) >= 1; \"]},\"137\":{\"h\":\"7.连接 (JOIN)\",\"t\":[\"连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。\",\"如果一个 JOIN 至少有一个公共字段并且它们之间存在关系，则该 JOIN 可以在两个或多个表上工作。\",\"JOIN 保持基表（结构和数据）不变。连接可以替换子查询，并且比子查询的效率一般会更快。\",\"JOIN 有两种连接类型：内连接和外连接。\"]},\"138\":{\"h\":\"7.1 自连接（ = ）\",\"t\":[\"自连接可以看成内连接的一种，只是连接的表是自身而已。自然连接是把同名列通过 = 连接起来的，同名列可以有多个。\",\"SELECT c1.cust_id, c1.cust_name, c1.cust_contact FROM customers c1, customers c2 WHERE c1.cust_name = c2.cust_name AND c2.cust_contact = 'Jim Jones'; \"]},\"139\":{\"h\":\"7.2 自然连接（NATURAL JOIN）\",\"t\":[\"内连接提供连接的列，而自然连接自动连接所有同名列。自然连接使用 NATURAL JOIN 关键字。\",\"SELECT * FROM Products NATURAL JOIN Customers; \"]},\"140\":{\"h\":\"7.3 内连接（INNER JOIN）\",\"t\":[\"内连接又称等值连接，使用 INNER JOIN 关键字。在没有条件语句的情况下返回笛卡尔积。\",\"SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id; \"]},\"141\":{\"h\":\"7.4 外连接（OUTER JOIN）\",\"t\":[\"外连接返回一个表中的所有行，并且仅返回来自此表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。\"]},\"142\":{\"h\":\"7.5 左连接（LEFT JOIN）\",\"t\":[\"左外连接就是保留左表没有关联的行。\",\"SELECT customers.cust_id, orders.order_num FROM customers LEFT JOIN orders ON customers.cust_id = orders.cust_id; \"]},\"143\":{\"h\":\"7.6 右连接（RIGHT JOIN）\",\"t\":[\"右外连接就是保留右表没有关联的行。\",\"SELECT customers.cust_id, orders.order_num FROM customers RIGHT JOIN orders ON customers.cust_id = orders.cust_id; \"]},\"144\":{\"h\":\"8.组合（UNION）\",\"t\":[\"UNION 运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自 UNION 中参与查询的提取行。\",\"UNION 基本规则：\",\"所有查询的列数和列顺序必须相同。\",\"每个查询中涉及表的列的数据类型必须相同或兼容。\",\"通常返回的列名取自第一个查询。\",\"默认会去除相同行，如果需要保留相同行，使用 UNION ALL。\",\"只能包含一个 ORDER BY 子句，并且必须位于语句的最后。\",\"应用场景：\",\"在一个查询中从不同的表返回结构数据。\",\"对一个表执行多个查询，按一个查询返回数据。\",\"组合查询示例：\",\"SELECT cust_name, cust_contact, cust_email FROM customers WHERE cust_state IN ('IL', 'IN', 'MI') UNION SELECT cust_name, cust_contact, cust_email FROM customers WHERE cust_name = 'Fun4All'; \"]},\"145\":{\"h\":\"8.1 JOIN vs UNION\",\"t\":[\"JOIN 中连接表的列可能不同，但在 UNION 中，所有查询的列数和列顺序必须相同。\",\"UNION 将查询之后的行放在一起（垂直放置），但 JOIN 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。\"]},\"146\":{\"h\":\"9.函数\",\"t\":[\"🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。\"]},\"147\":{\"h\":\"9.1 文本处理\",\"t\":[\"函数\",\"说明\",\"LEFT()、RIGHT()\",\"左边或者右边的字符\",\"LOWER()、UPPER()\",\"转换为小写或者大写\",\"LTRIM()、RTIM()\",\"去除左边或者右边的空格\",\"LENGTH()\",\"长度\",\"SOUNDEX()\",\"转换为语音值\",\"其中， SOUNDEX() 可以将一个字符串转换为描述其语音表示的字母数字模式。\",\"SELECT * FROM mytable WHERE SOUNDEX(col1) = SOUNDEX('apple') \"]},\"148\":{\"h\":\"9.2 日期和时间处理\",\"t\":[\"日期格式：YYYY-MM-DD\",\"时间格式：HH:MM:SS\",\"函 数\",\"说 明\",\"AddDate()\",\"增加一个日期（天、周等）\",\"AddTime()\",\"增加一个时间（时、分等）\",\"CurDate()\",\"返回当前日期\",\"CurTime()\",\"返回当前时间\",\"Date()\",\"返回日期时间的日期部分\",\"DateDiff()\",\"计算两个日期之差\",\"Date_Add()\",\"高度灵活的日期运算函数\",\"Date_Format()\",\"返回一个格式化的日期或时间串\",\"Day()\",\"返回一个日期的天数部分\",\"DayOfWeek()\",\"对于一个日期，返回对应的星期几\",\"Hour()\",\"返回一个时间的小时部分\",\"Minute()\",\"返回一个时间的分钟部分\",\"Month()\",\"返回一个日期的月份部分\",\"Now()\",\"返回当前日期和时间\",\"Second()\",\"返回一个时间的秒部分\",\"Time()\",\"返回一个日期时间的时间部分\",\"Year()\",\"返回一个日期的年份部分\",\"mysql> SELECT NOW(); \",\"2018-4-14 20:25:11 \"]},\"149\":{\"h\":\"9.3 数值处理\",\"t\":[\"函数\",\"说明\",\"SIN()\",\"正弦\",\"COS()\",\"余弦\",\"TAN()\",\"正切\",\"ABS()\",\"绝对值\",\"SQRT()\",\"平方根\",\"MOD()\",\"余数\",\"EXP()\",\"指数\",\"PI()\",\"圆周率\",\"RAND()\",\"随机数\"]},\"150\":{\"h\":\"9.4 汇总\",\"t\":[\"函 数\",\"说 明\",\"AVG()\",\"返回某列的平均值\",\"COUNT()\",\"返回某列的行数\",\"MAX()\",\"返回某列的最大值\",\"MIN()\",\"返回某列的最小值\",\"SUM()\",\"返回某列值之和\",\"AVG() 会忽略 NULL 行。\",\"使用 DISTINCT 可以让汇总函数值汇总不同的值。\",\"SELECT AVG(DISTINCT col1) AS avg_col FROM mytable \",\"（以下为 DDL 语句用法）\"]},\"151\":{\"h\":\"10.事务\",\"t\":[\"不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。\",\"MySQL 默认采用隐式提交策略（autocommit），每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。\",\"通过 set autocommit=0 可以取消自动提交，直到 set autocommit=1 才会提交；autocommit 标记是针对每个连接而不是针对服务器的。\",\"事务处理指令：\",\"START TRANSACTION - 指令用于标记事务的起始点。\",\"SAVEPOINT - 指令用于创建保留点。\",\"ROLLBACK TO - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 START TRANSACTION 语句处。\",\"COMMIT - 提交事务。\",\"RELEASE SAVEPOINT：删除某个保存点。\",\"SET TRANSACTION：设置事务的隔离级别。\",\"事务处理示例：\",\"-- 开始事务 START TRANSACTION; -- 插入操作 A INSERT INTO `user` VALUES (1, 'root1', 'root1', 'xxxx@163.com'); -- 创建保留点 updateA SAVEPOINT updateA; -- 插入操作 B INSERT INTO `user` VALUES (2, 'root2', 'root2', 'xxxx@163.com'); -- 回滚到保留点 updateA ROLLBACK TO updateA; -- 提交事务，只有操作 A 生效 COMMIT; \"]},\"152\":{\"h\":\"10.1 ACID\"},\"153\":{\"h\":\"10.2 事务隔离级别\",\"t\":[\"（以下为 DCL 语句用法）\"]},\"154\":{\"h\":\"11.权限控制\",\"t\":[\"GRANT 和 REVOKE 可在几个层次上控制访问权限：\",\"整个服务器，使用 GRANT ALL 和 REVOKE ALL；\",\"整个数据库，使用 ON database.*；\",\"特定的表，使用 ON database.table；\",\"特定的列；\",\"特定的存储过程。\",\"新创建的账户没有任何权限。\",\"账户用 username@host 的形式定义，username@% 使用的是默认主机名。\",\"MySQL 的账户信息保存在 mysql 这个数据库中。\",\"USE mysql; SELECT user FROM user; \"]},\"155\":{\"h\":\"11.1 创建账户\",\"t\":[\"CREATE USER myuser IDENTIFIED BY 'mypassword'; \"]},\"156\":{\"h\":\"11.2 修改账户名\",\"t\":[\"UPDATE user SET user='newuser' WHERE user='myuser'; FLUSH PRIVILEGES; \"]},\"157\":{\"h\":\"11.3 删除账户\",\"t\":[\"DROP USER myuser; \"]},\"158\":{\"h\":\"11.4 查看权限\",\"t\":[\"SHOW GRANTS FOR myuser; \"]},\"159\":{\"h\":\"11.5 授予权限\",\"t\":[\"GRANT SELECT, INSERT ON *.* TO myuser; \"]},\"160\":{\"h\":\"11.6 删除权限\",\"t\":[\"REVOKE SELECT, INSERT ON *.* FROM myuser; \"]},\"161\":{\"h\":\"11.7 更改密码\",\"t\":[\"SET PASSWORD FOR myuser = 'mypass'; \"]},\"162\":{\"h\":\"12.存储过程\",\"t\":[\"存储过程的英文是 Stored Procedure。它可以视为一组 SQL 语句的批处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。\",\"定义存储过程的语法格式：\",\"CREATE PROCEDURE 存储过程名称 ([参数列表]) BEGIN 需要执行的语句 END \",\"存储过程定义语句类型：\",\"CREATE PROCEDURE 用于创建存储过程\",\"DROP PROCEDURE 用于删除存储过程\",\"ALTER PROCEDURE 用于修改存储过程\"]},\"163\":{\"h\":\"12.1 使用存储过程\",\"t\":[\"创建存储过程的要点：\",\"DELIMITER 用于定义语句的结束符\",\"存储过程的 3 种参数类型： \",\"IN：存储过程的入参\",\"OUT：存储过程的出参\",\"INPUT：既是存储过程的入参，也是存储过程的出参\",\"流控制语句： \",\"BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。\",\"DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。\",\"SET：赋值语句，用于对变量进行赋值。\",\"SELECT…INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。每次只能给一个变量赋值，不支持集合的操作。\",\"IF…THEN…ENDIF：条件判断语句，可以在 IF…THEN…ENDIF 中使用 ELSE 和 ELSEIF 来进行条件判断。\",\"CASE：CASE 语句用于多条件的分支判断。\",\"创建存储过程示例：\",\"DROP PROCEDURE IF EXISTS `proc_adder`; DELIMITER ;; CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_adder`(IN a int, IN b int, OUT sum int) BEGIN DECLARE c int; if a is null then set a = 0; end if; if b is null then set b = 0; end if; set sum = a + b; END ;; DELIMITER ; \",\"使用存储过程示例：\",\"set @b=5; call proc_adder(2,@b,@s); select @s as sum; \"]},\"164\":{\"h\":\"12.2 存储过程的利弊\",\"t\":[\"存储过程的优点：\",\"执行效率高：一次编译多次使用。\",\"安全性强：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。\",\"可复用：将代码封装，可以提高代码复用。\",\"性能好\",\"由于是预先编译，因此具有很高的性能。\",\"一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。\",\"存储过程的缺点：\",\"可移植性差：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。\",\"调试困难：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。\",\"版本管理困难：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。\",\"不适合高并发的场景：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。\",\"综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡。\"]},\"165\":{\"h\":\"13.触发器\",\"t\":[\"触发器可以视为一种特殊的存储过程。\",\"触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。\"]},\"166\":{\"h\":\"13.1 触发器特性\",\"t\":[\"可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。\",\"MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。\",\"BEGIN 和 END\",\"当触发器的触发条件满足时，将会执行 BEGIN 和 END 之间的触发器执行动作。\",\"🔔 注意：在 MySQL 中，分号 ; 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。\",\"这时就会用到 DELIMITER 命令（DELIMITER 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：DELIMITER new_delemiter。new_delemiter 可以设为 1 个或多个长度的符号，默认的是分号 ;，我们可以把它修改为其他符号，如 $ - DELIMITER $ 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 $，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。\",\"NEW 和 OLD\",\"MySQL 中定义了 NEW 和 OLD 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。\",\"在 INSERT 型触发器中，NEW 用来表示将要（BEFORE）或已经（AFTER）插入的新数据；\",\"在 UPDATE 型触发器中，OLD 用来表示将要或已经被修改的原数据，NEW 用来表示将要或已经修改为的新数据；\",\"在 DELETE 型触发器中，OLD 用来表示将要或已经被删除的原数据；\",\"使用方法： NEW.columnName （columnName 为相应数据表某一列名）\"]},\"167\":{\"h\":\"13.2 触发器指令\",\"t\":[\"提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。\",\"CREATE TRIGGER 指令用于创建触发器。\",\"语法：\",\"CREATE TRIGGER trigger_name trigger_time trigger_event ON table_name FOR EACH ROW BEGIN trigger_statements END; \",\"说明：\",\"trigger_name：触发器名\",\"trigger_time: 触发器的触发时机。取值为 BEFORE 或 AFTER。\",\"trigger_event: 触发器的监听事件。取值为 INSERT、UPDATE 或 DELETE。\",\"table_name: 触发器的监听目标。指定在哪张表上建立触发器。\",\"FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。\",\"trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 ; 来结尾。\",\"创建触发器示例：\",\"DELIMITER $ CREATE TRIGGER `trigger_insert_user` AFTER INSERT ON `user` FOR EACH ROW BEGIN INSERT INTO `user_history`(user_id, operate_type, operate_time) VALUES (NEW.id, 'add a user', now()); END $ DELIMITER ; \",\"查看触发器示例：\",\"SHOW TRIGGERS; \",\"删除触发器示例：\",\"DROP TRIGGER IF EXISTS trigger_insert_user; \"]},\"168\":{\"h\":\"14.游标\",\"t\":[\"游标（CURSOR）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储过程中使用游标可以对一个结果集进行移动遍历。\",\"游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。\",\"使用游标的步骤：\",\"定义游标：通过 DECLARE cursor_name CURSOR FOR <语句> 定义游标。这个过程没有实际检索出数据。\",\"打开游标：通过 OPEN cursor_name 打开游标。\",\"取出数据：通过 FETCH cursor_name INTO var_name ... 获取数据。\",\"关闭游标：通过 CLOSE cursor_name 关闭游标。\",\"释放游标：通过 DEALLOCATE PREPARE 释放游标。\",\"游标使用示例：\",\"DELIMITER $ CREATE PROCEDURE getTotal() BEGIN DECLARE total INT; -- 创建接收游标数据的变量 DECLARE sid INT; DECLARE sname VARCHAR(10); -- 创建总数变量 DECLARE sage INT; -- 创建结束标志变量 DECLARE done INT DEFAULT false; -- 创建游标 DECLARE cur CURSOR FOR SELECT id,name,age from cursor_table where age>30; -- 指定游标循环结束时的返回值 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true; SET total = 0; OPEN cur; FETCH cur INTO sid, sname, sage; WHILE(NOT done) DO SET total = total + 1; FETCH cur INTO sid, sname, sage; END WHILE; CLOSE cur; SELECT total; END $ DELIMITER ; -- 调用存储过程 call getTotal(); \",\"本文针对关系型数据库的基本语法。限于篇幅，本文侧重说明用法，不会展开讲解特性、原理。\",\"本文语法主要针对 Mysql，但大部分的语法对其他关系型数据库也适用。\",\"img\"]},\"169\":{\"h\":\"连接和组合\"},\"170\":{\"h\":\"连接（JOIN）\",\"t\":[\"连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。\",\"如果一个 JOIN 至少有一个公共字段并且它们之间存在关系，则该 JOIN 可以在两个或多个表上工作。\",\"JOIN 保持基表（结构和数据）不变。连接可以替换子查询，并且比子查询的效率一般会更快。\",\"JOIN 有两种连接类型：内连接和外连接。\"]},\"171\":{\"h\":\"内连接（INNER JOIN）\",\"t\":[\"内连接又称等值连接，使用 INNER JOIN 关键字。在没有条件语句的情况下返回笛卡尔积。\",\"SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id; \"]},\"172\":{\"h\":\"自连接（ = ）\",\"t\":[\"自连接可以看成内连接的一种，只是连接的表是自身而已。自然连接是把同名列通过 = 连接起来的，同名列可以有多个。\",\"SELECT c1.cust_id, c1.cust_name, c1.cust_contact FROM customers c1, customers c2 WHERE c1.cust_name = c2.cust_name AND c2.cust_contact = 'Jim Jones'; \"]},\"173\":{\"h\":\"自然连接（NATURAL JOIN）\",\"t\":[\"内连接提供连接的列，而自然连接自动连接所有同名列。自然连接使用 NATURAL JOIN 关键字。\",\"SELECT * FROM Products NATURAL JOIN Customers; \"]},\"174\":{\"h\":\"外连接（OUTER JOIN）\",\"t\":[\"外连接返回一个表中的所有行，并且仅返回来自此表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。\"]},\"175\":{\"h\":\"左连接（LEFT JOIN）\",\"t\":[\"左外连接就是保留左表没有关联的行。\",\"SELECT customers.cust_id, orders.order_num FROM customers LEFT JOIN orders ON customers.cust_id = orders.cust_id; \"]},\"176\":{\"h\":\"右连接（RIGHT JOIN）\",\"t\":[\"右外连接就是保留右表没有关联的行。\",\"SELECT customers.cust_id, orders.order_num FROM customers RIGHT JOIN orders ON customers.cust_id = orders.cust_id; \"]},\"177\":{\"h\":\"组合（UNION）\",\"t\":[\"UNION 运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自 UNION 中参与查询的提取行。\",\"UNION 基本规则：\",\"所有查询的列数和列顺序必须相同。\",\"每个查询中涉及表的列的数据类型必须相同或兼容。\",\"通常返回的列名取自第一个查询。\",\"默认会去除相同行，如果需要保留相同行，使用 UNION ALL。\",\"只能包含一个 ORDER BY 子句，并且必须位于语句的最后。\",\"应用场景：\",\"在一个查询中从不同的表返回结构数据。\",\"对一个表执行多个查询，按一个查询返回数据。\",\"组合查询示例：\",\"SELECT cust_name, cust_contact, cust_email FROM customers WHERE cust_state IN ('IL', 'IN', 'MI') UNION SELECT cust_name, cust_contact, cust_email FROM customers WHERE cust_name = 'Fun4All'; \"]},\"178\":{\"h\":\"JOIN vs UNION\",\"t\":[\"JOIN 中连接表的列可能不同，但在 UNION 中，所有查询的列数和列顺序必须相同。\",\"UNION 将查询之后的行放在一起（垂直放置），但 JOIN 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。\"]},\"179\":{\"h\":\"函数\",\"t\":[\"🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。\"]},\"180\":{\"h\":\"文本处理\",\"t\":[\"函数\",\"说明\",\"LEFT()、RIGHT()\",\"左边或者右边的字符\",\"LOWER()、UPPER()\",\"转换为小写或者大写\",\"LTRIM()、RTIM()\",\"去除左边或者右边的空格\",\"LENGTH()\",\"长度\",\"SOUNDEX()\",\"转换为语音值\",\"其中， SOUNDEX() 可以将一个字符串转换为描述其语音表示的字母数字模式。\",\"SELECT * FROM mytable WHERE SOUNDEX(col1) = SOUNDEX('apple') \"]},\"181\":{\"h\":\"日期和时间处理\",\"t\":[\"日期格式：YYYY-MM-DD\",\"时间格式：HH:MM:SS\",\"函 数\",\"说 明\",\"AddDate()\",\"增加一个日期（天、周等）\",\"AddTime()\",\"增加一个时间（时、分等）\",\"CurDate()\",\"返回当前日期\",\"CurTime()\",\"返回当前时间\",\"Date()\",\"返回日期时间的日期部分\",\"DateDiff()\",\"计算两个日期之差\",\"Date_Add()\",\"高度灵活的日期运算函数\",\"Date_Format()\",\"返回一个格式化的日期或时间串\",\"Day()\",\"返回一个日期的天数部分\",\"DayOfWeek()\",\"对于一个日期，返回对应的星期几\",\"Hour()\",\"返回一个时间的小时部分\",\"Minute()\",\"返回一个时间的分钟部分\",\"Month()\",\"返回一个日期的月份部分\",\"Now()\",\"返回当前日期和时间\",\"Second()\",\"返回一个时间的秒部分\",\"Time()\",\"返回一个日期时间的时间部分\",\"Year()\",\"返回一个日期的年份部分\",\"mysql> SELECT NOW(); \",\"2018-4-14 20:25:11 \"]},\"182\":{\"h\":\"数值处理\",\"t\":[\"函数\",\"说明\",\"SIN()\",\"正弦\",\"COS()\",\"余弦\",\"TAN()\",\"正切\",\"ABS()\",\"绝对值\",\"SQRT()\",\"平方根\",\"MOD()\",\"余数\",\"EXP()\",\"指数\",\"PI()\",\"圆周率\",\"RAND()\",\"随机数\"]},\"183\":{\"h\":\"汇总\",\"t\":[\"函 数\",\"说 明\",\"AVG()\",\"返回某列的平均值\",\"COUNT()\",\"返回某列的行数\",\"MAX()\",\"返回某列的最大值\",\"MIN()\",\"返回某列的最小值\",\"SUM()\",\"返回某列值之和\",\"AVG() 会忽略 NULL 行。\",\"使用 DISTINCT 可以让汇总函数值汇总不同的值。\",\"SELECT AVG(DISTINCT col1) AS avg_col FROM mytable \"]},\"184\":{\"h\":\"分组\"},\"185\":{\"h\":\"GROUP BY\",\"t\":[\"GROUP BY 子句将记录分组到汇总行中，GROUP BY 为每个组返回一个记录。\",\"GROUP BY 可以按一列或多列进行分组。\",\"GROUP BY 通常还涉及聚合函数：COUNT，MAX，SUM，AVG 等。\",\"GROUP BY 按分组字段进行排序后，ORDER BY 可以以汇总字段来进行排序。\",\"分组示例：\",\"SELECT cust_name, COUNT(cust_address) AS addr_num FROM Customers GROUP BY cust_name; \",\"分组后排序示例：\",\"SELECT cust_name, COUNT(cust_address) AS addr_num FROM Customers GROUP BY cust_name ORDER BY cust_name DESC; \"]},\"186\":{\"h\":\"HAVING\",\"t\":[\"HAVING 用于对汇总的 GROUP BY 结果进行过滤。HAVING 要求存在一个 GROUP BY 子句。\",\"WHERE 和 HAVING 可以在相同的查询中。\",\"HAVING vs WHERE：\",\"WHERE 和 HAVING 都是用于过滤。\",\"HAVING 适用于汇总的组记录；而 WHERE 适用于单个记录。\",\"使用 WHERE 和 HAVING 过滤数据示例：\",\"SELECT cust_name, COUNT(*) AS num FROM Customers WHERE cust_email IS NOT NULL GROUP BY cust_name HAVING COUNT(*) >= 1; \",\"（以下为 DDL 语句用法）\"]},\"187\":{\"h\":\"事务\",\"t\":[\"不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。\",\"MySQL 默认采用隐式提交策略（autocommit），每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。\",\"通过 set autocommit=0 可以取消自动提交，直到 set autocommit=1 才会提交；autocommit 标记是针对每个连接而不是针对服务器的。\",\"事务处理指令：\",\"START TRANSACTION - 指令用于标记事务的起始点。\",\"SAVEPOINT - 指令用于创建保留点。\",\"ROLLBACK TO - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 START TRANSACTION 语句处。\",\"COMMIT - 提交事务。\",\"RELEASE SAVEPOINT：删除某个保存点。\",\"SET TRANSACTION：设置事务的隔离级别。\",\"事务处理示例：\",\"-- 开始事务 START TRANSACTION; -- 插入操作 A INSERT INTO `user` VALUES (1, 'root1', 'root1', 'xxxx@163.com'); -- 创建保留点 updateA SAVEPOINT updateA; -- 插入操作 B INSERT INTO `user` VALUES (2, 'root2', 'root2', 'xxxx@163.com'); -- 回滚到保留点 updateA ROLLBACK TO updateA; -- 提交事务，只有操作 A 生效 COMMIT; \"]},\"188\":{\"h\":\"ACID\"},\"189\":{\"h\":\"事务隔离级别\",\"t\":[\"（以下为 DCL 语句用法）\"]},\"190\":{\"h\":\"权限控制\",\"t\":[\"GRANT 和 REVOKE 可在几个层次上控制访问权限：\",\"整个服务器，使用 GRANT ALL 和 REVOKE ALL；\",\"整个数据库，使用 ON database.*；\",\"特定的表，使用 ON database.table；\",\"特定的列；\",\"特定的存储过程。\",\"新创建的账户没有任何权限。\",\"账户用 username@host 的形式定义，username@% 使用的是默认主机名。\",\"MySQL 的账户信息保存在 mysql 这个数据库中。\",\"USE mysql; SELECT user FROM user; \"]},\"191\":{\"h\":\"创建账户\",\"t\":[\"CREATE USER myuser IDENTIFIED BY 'mypassword'; \"]},\"192\":{\"h\":\"修改账户名\",\"t\":[\"UPDATE user SET user='newuser' WHERE user='myuser'; FLUSH PRIVILEGES; \"]},\"193\":{\"h\":\"删除账户\",\"t\":[\"DROP USER myuser; \"]},\"194\":{\"h\":\"查看权限\",\"t\":[\"SHOW GRANTS FOR myuser; \"]},\"195\":{\"h\":\"授予权限\",\"t\":[\"GRANT SELECT, INSERT ON *.* TO myuser; \"]},\"196\":{\"h\":\"删除权限\",\"t\":[\"REVOKE SELECT, INSERT ON *.* FROM myuser; \"]},\"197\":{\"h\":\"更改密码\",\"t\":[\"SET PASSWORD FOR myuser = 'mypass'; \"]},\"198\":{\"h\":\"存储过程\",\"t\":[\"存储过程的英文是 Stored Procedure。它可以视为一组 SQL 语句的批处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。\",\"定义存储过程的语法格式：\",\"CREATE PROCEDURE 存储过程名称 ([参数列表]) BEGIN 需要执行的语句 END \",\"存储过程定义语句类型：\",\"CREATE PROCEDURE 用于创建存储过程\",\"DROP PROCEDURE 用于删除存储过程\",\"ALTER PROCEDURE 用于修改存储过程\"]},\"199\":{\"h\":\"使用存储过程\",\"t\":[\"创建存储过程的要点：\",\"DELIMITER 用于定义语句的结束符\",\"存储过程的 3 种参数类型： \",\"IN：存储过程的入参\",\"OUT：存储过程的出参\",\"INPUT：既是存储过程的入参，也是存储过程的出参\",\"流控制语句： \",\"BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。\",\"DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。\",\"SET：赋值语句，用于对变量进行赋值。\",\"SELECT…INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。每次只能给一个变量赋值，不支持集合的操作。\",\"IF…THEN…ENDIF：条件判断语句，可以在 IF…THEN…ENDIF 中使用 ELSE 和 ELSEIF 来进行条件判断。\",\"CASE：CASE 语句用于多条件的分支判断。\",\"创建存储过程示例：\",\"DROP PROCEDURE IF EXISTS `proc_adder`; DELIMITER ;; CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_adder`(IN a int, IN b int, OUT sum int) BEGIN DECLARE c int; if a is null then set a = 0; end if; if b is null then set b = 0; end if; set sum = a + b; END ;; DELIMITER ; \",\"使用存储过程示例：\",\"set @b=5; call proc_adder(2,@b,@s); select @s as sum; \"]},\"200\":{\"h\":\"存储过程的利弊\",\"t\":[\"存储过程的优点：\",\"执行效率高：一次编译多次使用。\",\"安全性强：在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。\",\"可复用：将代码封装，可以提高代码复用。\",\"性能好\",\"由于是预先编译，因此具有很高的性能。\",\"一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率。\",\"存储过程的缺点：\",\"可移植性差：存储过程不能跨数据库移植。由于不同数据库的存储过程语法几乎都不一样，十分难以维护（不通用）。\",\"调试困难：只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。\",\"版本管理困难：比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。\",\"不适合高并发的场景：高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，增加数据库的压力，显然就不适用了。\",\"综上，存储过程的优缺点都非常突出，是否使用一定要慎重，需要根据具体应用场景来权衡。\"]},\"201\":{\"h\":\"触发器\",\"t\":[\"触发器可以视为一种特殊的存储过程。\",\"触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。\"]},\"202\":{\"h\":\"触发器特性\",\"t\":[\"可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。\",\"MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。\",\"BEGIN 和 END\",\"当触发器的触发条件满足时，将会执行 BEGIN 和 END 之间的触发器执行动作。\",\"🔔 注意：在 MySQL 中，分号 ; 是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。\",\"这时就会用到 DELIMITER 命令（DELIMITER 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：DELIMITER new_delemiter。new_delemiter 可以设为 1 个或多个长度的符号，默认的是分号 ;，我们可以把它修改为其他符号，如 $ - DELIMITER $ 。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了 $，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。\",\"NEW 和 OLD\",\"MySQL 中定义了 NEW 和 OLD 关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。\",\"在 INSERT 型触发器中，NEW 用来表示将要（BEFORE）或已经（AFTER）插入的新数据；\",\"在 UPDATE 型触发器中，OLD 用来表示将要或已经被修改的原数据，NEW 用来表示将要或已经修改为的新数据；\",\"在 DELETE 型触发器中，OLD 用来表示将要或已经被删除的原数据；\",\"使用方法： NEW.columnName （columnName 为相应数据表某一列名）\"]},\"203\":{\"h\":\"触发器指令\",\"t\":[\"提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。\",\"CREATE TRIGGER 指令用于创建触发器。\",\"语法：\",\"CREATE TRIGGER trigger_name trigger_time trigger_event ON table_name FOR EACH ROW BEGIN trigger_statements END; \",\"说明：\",\"trigger_name：触发器名\",\"trigger_time: 触发器的触发时机。取值为 BEFORE 或 AFTER。\",\"trigger_event: 触发器的监听事件。取值为 INSERT、UPDATE 或 DELETE。\",\"table_name: 触发器的监听目标。指定在哪张表上建立触发器。\",\"FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。\",\"trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号 ; 来结尾。\",\"创建触发器示例：\",\"DELIMITER $ CREATE TRIGGER `trigger_insert_user` AFTER INSERT ON `user` FOR EACH ROW BEGIN INSERT INTO `user_history`(user_id, operate_type, operate_time) VALUES (NEW.id, 'add a user', now()); END $ DELIMITER ; \",\"查看触发器示例：\",\"SHOW TRIGGERS; \",\"删除触发器示例：\",\"DROP TRIGGER IF EXISTS trigger_insert_user; \"]},\"204\":{\"h\":\"游标\",\"t\":[\"游标（CURSOR）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储过程中使用游标可以对一个结果集进行移动遍历。\",\"游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。\",\"使用游标的步骤：\",\"定义游标：通过 DECLARE cursor_name CURSOR FOR <语句> 定义游标。这个过程没有实际检索出数据。\",\"打开游标：通过 OPEN cursor_name 打开游标。\",\"取出数据：通过 FETCH cursor_name INTO var_name ... 获取数据。\",\"关闭游标：通过 CLOSE cursor_name 关闭游标。\",\"释放游标：通过 DEALLOCATE PREPARE 释放游标。\",\"游标使用示例：\",\"DELIMITER $ CREATE PROCEDURE getTotal() BEGIN DECLARE total INT; -- 创建接收游标数据的变量 DECLARE sid INT; DECLARE sname VARCHAR(10); -- 创建总数变量 DECLARE sage INT; -- 创建结束标志变量 DECLARE done INT DEFAULT false; -- 创建游标 DECLARE cur CURSOR FOR SELECT id,name,age from cursor_table where age>30; -- 指定游标循环结束时的返回值 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true; SET total = 0; OPEN cur; FETCH cur INTO sid, sname, sage; WHILE(NOT done) DO SET total = total + 1; FETCH cur INTO sid, sname, sage; END WHILE; CLOSE cur; SELECT total; END $ DELIMITER ; -- 调用存储过程 call getTotal(); \"]},\"205\":{\"h\":\"参考资料\",\"t\":[\"《SQL 必知必会》\",\"『浅入深出』MySQL 中事务的实现\",\"MySQL 的学习--触发器\",\"维基百科词条 - SQL\",\"https://www.sitesbay.com/sql/index\",\"SQL Subqueries\",\"Quick breakdown of the types of joins\",\"SQL UNION\",\"SQL database security\",\"Mysql 中的存储过程\"]},\"206\":{\"c\":[\"Docs\"]},\"207\":{\"h\":\"MySQL面试题\"},\"208\":{\"h\":\"索引和约束\"},\"209\":{\"h\":\"什么是索引\",\"t\":[\"索引是对数据库表中一或多个列的值进行排序的结构，是帮助数据库高效查询数据的数据结构。\"]},\"210\":{\"h\":\"索引的优缺点\",\"t\":[\"✔ 索引的优点：\",\"索引大大减少了服务器需要扫描的数据量，从而加快检索速度。\",\"支持行级锁的数据库，如 InnoDB 会在访问行的时候加锁。使用索引可以减少访问的行数，从而减少锁的竞争，提高并发。\",\"索引可以帮助服务器避免排序和临时表。\",\"索引可以将随机 I/O 变为顺序 I/O。\",\"唯一索引可以确保每一行数据的唯一性，通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能。\",\"❌ 索引的缺点：\",\"创建和维护索引要耗费时间，这会随着数据量的增加而增加。\",\"索引需要占用额外的物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立组合索引那么需要的空间就会更大。\",\"写操作（INSERT/UPDATE/DELETE）时很可能需要更新索引，导致数据库的写操作性能降低。\"]},\"211\":{\"h\":\"何时使用索引\",\"t\":[\"索引能够轻易将查询性能提升几个数量级。\",\"✔ 什么情况适用索引：\",\"表经常进行 SELECT 操作；\",\"表的数据量比较大；\",\"列名经常出现在 WHERE 或连接（JOIN）条件中\",\"❌ 什么情况不适用索引：\",\"频繁写操作（ INSERT/UPDATE/DELETE ）- 需要更新索引空间；\",\"非常小的表 - 对于非常小的表，大部分情况下简单的全表扫描更高效。\",\"列名不经常出现在 WHERE 或连接（JOIN）条件中 - 索引就会经常不命中，没有意义，还增加空间开销。\",\"对于特大型表，建立和使用索引的代价将随之增长。可以考虑使用分区技术或 Nosql。\"]},\"212\":{\"h\":\"索引的类型\",\"t\":[\"主流的关系型数据库一般都支持以下索引类型：\",\"从逻辑类型上划分（即一般创建表时设置的索引类型）：\",\"唯一索引（UNIQUE）：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。\",\"主键索引（PRIMARY）：一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引。\",\"普通索引（INDEX）：最基本的索引，没有任何限制。\",\"组合索引：多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。\",\"从物理存储上划分：\",\"聚集索引(Clustered)：表中各行的物理顺序与键值的逻辑（索引）顺序相同，每个表只能有一个。\",\"非聚集索引(Non-clustered)：非聚集索引指定表的逻辑顺序，也可以视为二级索引。数据存储在一个位置，索引存储在另一个位置，索引中包含指向数据存储位置的指针。可以有多个，小于 249 个。\"]},\"213\":{\"h\":\"索引的数据结构\",\"t\":[\"主流数据库的索引一般使用的数据结构为：B 树、B+ 树。\"]},\"214\":{\"h\":\"B 树\",\"t\":[\"一棵 M 阶的 B-Tree 满足以下条件：\",\"每个结点至多有 M 个孩子；\",\"除根结点和叶结点外，其它每个结点至少有 M/2 个孩子；\",\"根结点至少有两个孩子（除非该树仅包含一个结点）；\",\"所有叶结点在同一层，叶结点不包含任何关键字信息；\",\"有 K 个关键字的非叶结点恰好包含 K+1 个孩子；\",\"对于任意结点，其内部的关键字 Key 是升序排列的。每个节点中都包含了 data。\",\"对于每个结点，主要包含一个关键字数组 Key[]，一个指针数组（指向儿子）Son[]。\",\"在 B-Tree 内，查找的流程是：\",\"使用顺序查找（数组长度较短时）或折半查找方法查找 Key[] 数组，若找到关键字 K，则返回该结点的地址及 K 在 Key[] 中的位置；\",\"否则，可确定 K 在某个 Key[i] 和 Key[i+1] 之间，则从 Son[i] 所指的子结点继续查找，直到在某结点中查找成功；\",\"或直至找到叶结点且叶结点中的查找仍不成功时，查找过程失败。\"]},\"215\":{\"h\":\"B+ 树\",\"t\":[\"B+Tree 是 B-Tree 的变种：\",\"每个节点的指针上限为 2d 而不是 2d+1（d 为节点的出度）。\",\"非叶子节点不存储 data，只存储 key；叶子节点不存储指针。\",\"由于并不是所有节点都具有相同的域，因此 B+Tree 中叶节点和内节点一般大小不同。这点与 B-Tree 不同，虽然 B-Tree 中不同节点存放的 key 和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现中 B-Tree 往往对每个节点申请同等大小的空间。\",\"带有顺序访问指针的 B+Tree\",\"一般在数据库系统或文件系统中使用的 B+Tree 结构都在经典 B+Tree 的基础上进行了优化，增加了顺序访问指针。\",\"在 B+Tree 的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的 B+Tree。\",\"这个优化的目的是为了提高区间访问的性能，例如上图中如果要查询 key 为从 18 到 49 的所有数据记录，当找到 18 后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。\"]},\"216\":{\"h\":\"B 树 vs. B+ 树\",\"t\":[\"B+ 树更适合外部存储(一般指磁盘存储)，由于内节点(非叶子节点)不存储 data，所以一个节点可以存储更多的内节点，每个节点能索引的范围更大更精确。也就是说使用 B+ 树单次磁盘 IO 的信息量相比较 B 树更大，IO 效率更高。\",\"Mysql 是关系型数据库，经常会按照区间来访问某个索引列，B+ 树的叶子节点间按顺序建立了链指针，加强了区间访问性，所以 B+ 树对索引列上的区间范围查询很友好。而 B 树每个节点的 key 和 data 在一起，无法进行区间查找。\"]},\"217\":{\"h\":\"Hash\",\"t\":[\"Hash 索引只有精确匹配索引所有列的查询才有效。\",\"对于每一行数据，对所有的索引列计算一个 hashcode。哈希索引将所有的 hashcode 存储在索引中，同时在 Hash 表中保存指向每个数据行的指针。\",\"哈希结构索引的优点：\",\"因为索引数据结构紧凑，所以查询速度非常快。\",\"哈希结构索引的缺点：\",\"哈希索引数据不是按照索引值顺序存储的，所以无法用于排序。\",\"哈希索引不支持部分索引匹配查找。如，在数据列 (A,B) 上建立哈希索引，如果查询只有数据列 A，无法使用该索引。\",\"哈希索引只支持等值比较查询，不支持任何范围查询，如 WHERE price > 100。\",\"哈希索引有可能出现哈希冲突，出现哈希冲突时，必须遍历链表中所有的行指针，逐行比较，直到找到符合条件的行。\"]},\"218\":{\"h\":\"索引策略\"},\"219\":{\"h\":\"索引基本原则\",\"t\":[\"索引不是越多越好，不要为所有列都创建索引。\",\"要尽量避免冗余和重复索引；\",\"要考虑删除未使用的索引；\",\"尽量的扩展索引，不要新建索引；\",\"频繁作为 WHERE 过滤条件的列应该考虑添加索引\"]},\"220\":{\"h\":\"独立的列\",\"t\":[\"如果查询中的列不是独立的列，则数据库不会使用索引。\",\"“独立的列” 是指索引列不能是表达式的一部分，也不能是函数的参数。\",\"❌ 错误示例：\",\"SELECT actor_id FROM actor WHERE actor_id + 1 = 5; SELECT ... WHERE TO_DAYS(current_date) - TO_DAYS(date_col) <= 10; \"]},\"221\":{\"h\":\"前缀索引和索引选择性\",\"t\":[\"有时候需要索引很长的字符列，这会让索引变得大且慢。\",\"解决方法是：可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但这样也会降低索引的选择性。\",\"索引的选择性是指：不重复的索引值和数据表记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，查询效率也越高。\",\"对于 BLOB/TEXT/VARCHAR 这种文本类型的列，必须使用前缀索引，因为数据库往往不允许索引这些列的完整长度。\",\"要选择足够长的前缀以保证较高的选择性，同时又不能太长（节约空间）。\",\"❌ 低效示例：\",\"SELECT COUNT(*) AS cnt, city FROM sakila.city_demo GROUP BY city ORDER BY cnt DESC LIMIT 10; \",\"✔ 高效示例：\",\"SELECT COUNT(*) AS cnt, LEFT(city, 3) AS pref FROM sakila.city_demo GROUP BY city ORDER BY cnt DESC LIMIT 10; \"]},\"222\":{\"h\":\"多列索引\",\"t\":[\"不要为每个列都创建独立索引。\",\"将选择性高的列或基数大的列优先排在多列索引最前列。但有时，也需要考虑 WHERE 子句中的排序、分组和范围条件等因素，这些因素也会对查询性能造成较大影响。\",\"举例来说，有一张 user 表，其中含 name, sex, age 三个列，如果将这三者组合为多列索引，应该用什么样的顺序呢？从选择性高的角度来看：name > age > sex。\"]},\"223\":{\"h\":\"聚簇索引\",\"t\":[\"聚簇索引不是一种单独的索引类型，而是一种数据存储方式。具体细节依赖于实现方式。如 InnoDB 的聚簇索引实际是在同一个结构中保存了 B 树的索引和数据行。\",\"聚簇表示数据行和相邻的键值紧凑地存储在一起，因为数据紧凑，所以访问快。因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。\",\"若没有定义主键，InnoDB 会隐式定义一个主键来作为聚簇索引。\"]},\"224\":{\"h\":\"覆盖索引\",\"t\":[\"索引包含所有需要查询的字段的值。\",\"具有以下优点：\",\"因为索引条目通常远小于数据行的大小，所以若只读取索引，能大大减少数据访问量。\",\"一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。\",\"对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。\"]},\"225\":{\"h\":\"使用索引扫描来做排序\",\"t\":[\"Mysql 有两种方式可以生成排序结果：通过排序操作；或者按索引顺序扫描。\",\"索引最好既满足排序，又用于查找行。这样，就可以使用索引来对结果排序。\"]},\"226\":{\"h\":\"最左前缀匹配原则\",\"t\":[\"MySQL 会一直向右匹配直到遇到范围查询 (>,<,BETWEEN,LIKE) 就停止匹配。\",\"索引可以简单如一个列(a)，也可以复杂如多个列(a, b, c, d)，即联合索引。\",\"如果是联合索引，那么 key 也由多个列组成，同时，索引只能用于查找 key 是否存在（相等），遇到范围查询(>、<、between、like 左匹配)等就不能进一步匹配了，后续退化为线性查找。\",\"因此，列的排列顺序决定了可命中索引的列数。\",\"例子：\",\"如有索引(a, b, c, d)，查询条件 a = 1 and b = 2 and c > 3 and d = 4，则会在每个节点依次命中 a、b、c，无法命中 d。(很简单：索引命中只能是相等的情况，不能是范围匹配)\"]},\"227\":{\"h\":\"= 和 in 可以乱序\",\"t\":[\"不需要考虑=、in 等的顺序，Mysql 会自动优化这些条件的顺序，以匹配尽可能多的索引列。\",\"例子：如有索引(a, b, c, d)，查询条件 c > 3 and b = 2 and a = 1 and d < 4 与 a = 1 and c > 3 and b = 2 and d < 4 等顺序都是可以的，MySQL 会自动优化为 a = 1 and b = 2 and c > 3 and d < 4，依次命中 a、b、c。\"]},\"228\":{\"h\":\"约束\",\"t\":[\"数据库约束（CONSTRAINT）有哪些：\",\"NOT NULL - 用于控制字段的内容一定不能为空（NULL）。\",\"UNIQUE - 字段内容不能重复，一个表允许有多个 Unique 约束。\",\"PRIMARY KEY - 数据表中对储存数据对象予以唯一和完整标识的数据列或属性的组合，它在一个表中只允许有一个。主键的取值不能为空值（Null）。\",\"FOREIGN KEY - 在一个表中存在的另一个表的主键称此表的外键。用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。\",\"CHECK - 用于控制字段的值范围。\"]},\"229\":{\"h\":\"并发控制\"},\"230\":{\"h\":\"乐观锁和悲观锁\",\"t\":[\"数据库的乐观锁和悲观锁是什么？\",\"数据库的乐观锁和悲观锁如何实现？\",\"确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性，乐观锁和悲观锁是并发控制主要采用的技术手段。\",\"悲观锁 - 假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作 \",\"在查询完数据的时候就把事务锁起来，直到提交事务（COMMIT）\",\"实现方式：使用数据库中的锁机制\",\"乐观锁 - 假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 \",\"在修改数据的时候把事务锁起来，通过 version 的方式来进行锁定\",\"实现方式：使用 version 版本或者时间戳\"]},\"231\":{\"h\":\"行级锁和表级锁\",\"t\":[\"什么是行级锁和表级锁？\",\"什么时候用行级锁？什么时候用表级锁？\",\"从数据库的锁粒度来看，MySQL 中提供了两种封锁粒度：行级锁和表级锁。\",\"表级锁（table lock） - 锁定整张表。用户对表进行写操作前，需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他用户才能获得读锁，读锁之间不会相互阻塞。\",\"行级锁（row lock） - 仅对指定的行记录进行加锁，这样其它进程还是可以对同一个表中的其它记录进行操作。\",\"二者需要权衡：\",\"锁定的数据量越少，锁竞争的发生频率就越小，系统的并发程度就越高。\",\"锁粒度越小，系统开销就越大。\",\"在 InnoDB 中，行锁是通过给索引上的索引项加锁来实现的。如果没有索引，InnoDB 将会通过隐藏的聚簇索引来对记录加锁。\"]},\"232\":{\"h\":\"读写锁\",\"t\":[\"什么是读写锁？\",\"独享锁（Exclusive），简写为 X 锁，又称写锁。使用方式：SELECT ... FOR UPDATE;\",\"共享锁（Shared），简写为 S 锁，又称读锁。使用方式：SELECT ... LOCK IN SHARE MODE;\",\"写锁和读锁的关系，简言之：独享锁存在，其他事务就不能做任何操作。\",\"InnoDB 下的行锁、间隙锁、next-key 锁统统属于独享锁。\"]},\"233\":{\"h\":\"意向锁\",\"t\":[\"什么是意向锁？\",\"意向锁有什么用？\",\"意向锁的作用是：当存在表级锁和行级锁的情况下，必须先申请意向锁（表级锁，但不是真的加锁），再获取行级锁。使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。\",\"意向锁是 InnoDB 自动加的，不需要用户干预。\"]},\"234\":{\"h\":\"MVCC\",\"t\":[\"什么是 MVCC？\",\"MVCC 有什么用？解决了什么问题？\",\"MVCC 的原理是什么？\",\"多版本并发控制（Multi-Version Concurrency Control, MVCC）是 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。\",\"MVCC 的思想是：\",\"保存数据在某个时间点的快照。写操作（DELETE、INSERT、UPDATE）更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。\",\"脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。\"]},\"235\":{\"h\":\"Next-key 锁\",\"t\":[\"Next-Key 锁是 MySQL 的 InnoDB 存储引擎的一种锁实现。\",\"MVCC 不能解决幻读问题，Next-Key 锁就是为了解决幻读问题。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key 锁 可以解决幻读问题。\",\"另外，根据针对 SQL 语句检索条件的不同，加锁又有以下三种情形需要我们掌握。\",\"Record Lock - 行锁对索引项加锁，若没有索引则使用表锁。\",\"Gap Lock - 对索引项之间的间隙加锁。锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。SELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;\",\"Next-key lock -它是 Record Lock 和 Gap Lock 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间。\",\"索引分为主键索引和非主键索引两种，如果一条 SQL 语句操作了主键索引，MySQL 就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL 会先锁定该非主键索引，再锁定相关的主键索引。在 UPDATE、DELETE 操作时，MySQL 不仅锁定 WHERE 条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的 next-key lock。\",\"当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。发生死锁后，InnoDB 一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。\"]},\"236\":{\"h\":\"事务\",\"t\":[\"事务简单来说：一个 Session 中所进行所有的操作，要么同时成功，要么同时失败。具体来说，事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。\",\"img\"]},\"237\":{\"h\":\"ACID\",\"t\":[\"ACID — 数据库事务正确执行的四个基本要素：\",\"原子性（Atomicity）\",\"一致性（Consistency）\",\"隔离性（Isolation）\",\"持久性（Durability）\",\"一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易。\",\"img\"]},\"238\":{\"h\":\"并发一致性问题\",\"t\":[\"在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。\",\"丢失修改\",\"T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。\",\"img\",\"脏读\",\"T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。\",\"img\",\"不可重复读\",\"T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。\",\"img\",\"幻读\",\"T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。\",\"img\",\"并发一致性解决方案：\",\"产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。\",\"并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。\"]},\"239\":{\"h\":\"事务隔离\",\"t\":[\"数据库隔离级别：\",\"未提交读（READ UNCOMMITTED） - 事务中的修改，即使没有提交，对其它事务也是可见的。\",\"提交读（READ COMMITTED） - 一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。\",\"重复读（REPEATABLE READ） - 保证在同一个事务中多次读取同样数据的结果是一样的。\",\"串行化（SERIALIXABLE） - 强制事务串行执行。\",\"数据库隔离级别解决的问题：\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"未提交读\",\"❌\",\"❌\",\"❌\",\"提交读\",\"✔️\",\"❌\",\"❌\",\"可重复读\",\"✔️\",\"✔️\",\"❌\",\"可串行化\",\"✔️\",\"✔️\",\"✔️\"]},\"240\":{\"h\":\"分布式事务\",\"t\":[\"在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为 本地事务。几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。\",\"分布式事务 是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。\"]},\"241\":{\"h\":\"两阶段提交\",\"t\":[\"两阶段提交（XA）对业务侵入很小。 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于 XA 协议的分布式事务。 XA 协议能够严格保障事务 ACID 特性。\",\"严格保障事务 ACID 特性是一把双刃剑。 事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。 因此，在高并发的性能至上场景中，基于 XA 协议的分布式事务并不是最佳选择。\"]},\"242\":{\"h\":\"柔性事务\",\"t\":[\"如果将实现了ACID 的事务要素的事务称为刚性事务的话，那么基于BASE事务要素的事务则称为柔性事务。 BASE是基本可用、柔性状态和最终一致性这三个要素的缩写。\",\"基本可用（Basically Available）保证分布式事务参与方不一定同时在线。\",\"柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。\",\"而最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。\",\"在ACID事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升。\",\"基于ACID的强一致性事务和基于BASE的最终一致性事务都不是银弹，只有在最适合的场景中才能发挥它们的最大长处。 可通过下表详细对比它们之间的区别，以帮助开发者进行技术选型。\"]},\"243\":{\"h\":\"事务方案对比\",\"t\":[\"本地事务\",\"两（三）阶段事务\",\"柔性事务\",\"业务改造\",\"无\",\"无\",\"实现相关接口\",\"一致性\",\"不支持\",\"支持\",\"最终一致\",\"隔离性\",\"不支持\",\"支持\",\"业务方保证\",\"并发性能\",\"无影响\",\"严重衰退\",\"略微衰退\",\"适合场景\",\"业务方处理不一致\",\"短事务 & 低并发\",\"长事务 & 高并发\"]},\"244\":{\"h\":\"分库分表\"},\"245\":{\"h\":\"什么是分库分表\",\"t\":[\"什么是分库分表？什么是垂直拆分？什么是水平拆分？什么是 Sharding？\",\"分库分表是为了解决什么问题？\",\"分库分表有什么优点？\",\"分库分表有什么策略？\",\"分库分表的基本思想就是：把原本完整的数据切分成多个部分，放到不同的数据库或表上。\",\"分库分表一定是为了支撑 高并发、数据量大两个问题的。\"]},\"246\":{\"h\":\"垂直切分\",\"t\":[\"垂直切分，是 把一个有很多字段的表给拆分成多个表，或者是多个库上去。一般来说，会 将较少的、访问频率较高的字段放到一个表里去，然后 将较多的、访问频率较低的字段放到另外一个表里去。因为数据库是有缓存的，访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。\",\"image-20200114211639899\",\"一般来说，满足下面的条件就可以考虑扩容了：\",\"Mysql 单库超过 5000 万条记录，Oracle 单库超过 1 亿条记录，DB 压力就很大。\",\"单库超过每秒 2000 个并发时，而一个健康的单库最好保持在每秒 1000 个并发左右，不要太大。\",\"在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。\"]},\"247\":{\"h\":\"水平拆分\",\"t\":[\"水平拆分 又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。当 单表数据量太大 时，会极大影响 SQL 执行的性能 。分表是将原来一张表的数据分布到数据库集群的不同节点上，从而缓解单点的压力。\",\"image-20200114211203589\",\"一般来说，单表有 200 万条数据 的时候，性能就会相对差一些了，需要考虑分表了。但是，这也要视具体情况而定，可能是 100 万条，也可能是 500 万条，SQL 越复杂，就最好让单表行数越少。\"]},\"248\":{\"h\":\"分库分表的优点\",\"t\":[\"#\",\"分库分表前\",\"分库分表后\",\"并发支撑情况\",\"单机部署，扛不住高并发\",\"从单机到多机，能承受的并发增加了多倍\",\"磁盘使用情况\",\"单机磁盘容量几乎撑满\",\"拆分为多个库，数据库服务器磁盘使用率大大降低\",\"SQL 执行性能\",\"单表数据量太大，SQL 越跑越慢\",\"单表数据量减少，SQL 执行效率明显提升\"]},\"249\":{\"h\":\"分库分表策略\",\"t\":[\"哈希取模：hash(key) % N 或 id % N\",\"优点：可以平均分配每个库的数据量和请求压力（负载均衡）。\",\"缺点：扩容麻烦，需要数据迁移。\",\"范围：可以按照 ID 或时间划分范围。 \",\"优点：扩容简单。\",\"缺点：这种策略容易产生热点问题。\",\"映射表：使用单独的一个数据库来存储映射关系。 \",\"缺点：存储映射关系的数据库也可能成为性能瓶颈，且一旦宕机，分库分表的数据库就无法工作。所以不建议使用这种策略。\",\"优点：扩容简单，可以解决分布式 ID 问题。\"]},\"250\":{\"h\":\"分库分表中间件\",\"t\":[\"❓ 常见问题：\",\"你用过哪些分库分表中间件，简单介绍一下？\",\"不同的分库分表中间件各自有什么特性，有什么优缺点？\",\"分库分表中间件技术如何选型？\"]},\"251\":{\"h\":\"常见的分库分表中间件\",\"t\":[\"Cobar - 阿里 b2b 团队开发和开源的，属于 proxy 层方案，就是介于应用服务器和数据库服务器之间。应用程序通过 JDBC 驱动访问 cobar 集群，cobar 根据 SQL 和分库规则对 SQL 做分解，然后分发到 MySQL 集群不同的数据库实例上执行。早些年还可以用，但是最近几年都没更新了，基本没啥人用，差不多算是被抛弃的状态吧。而且不支持读写分离、存储过程、跨库 join 和分页等操作。\",\"TDDL - 淘宝团队开发的，属于 client 层方案。支持基本的 crud 语法和读写分离，但不支持 join、多表查询等语法。目前使用的也不多，因为还依赖淘宝的 diamond 配置管理系统。\",\"Atlas - 360 开源的，属于 proxy 层方案，以前是有一些公司在用的，但是确实有一个很大的问题就是社区最新的维护都在 5 年前了。所以，现在用的公司基本也很少了。\",\"sharding-jdbc - 当当开源的，属于 client 层方案。确实之前用的还比较多一些，因为 SQL 语法支持也比较多，没有太多限制，而且目前推出到了 2.0 版本，支持分库分表、读写分离、分布式 id 生成、柔性事务（最大努力送达型事务、TCC 事务）。而且确实之前使用的公司会比较多一些（这个在官网有登记使用的公司，可以看到从 2017 年一直到现在，是有不少公司在用的），目前社区也还一直在开发和维护，还算是比较活跃，个人认为算是一个现在也可以选择的方案。\",\"Mycat - 基于 cobar 改造的，属于 proxy 层方案，支持的功能非常完善，而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃，也有一些公司开始在用了。但是确实相比于 sharding jdbc 来说，年轻一些，经历的锤炼少一些。\"]},\"252\":{\"h\":\"分库分表中间件技术选型\",\"t\":[\"建议使用的是 sharding-jdbc 和 mycat。\",\"sharding-jdbc 这种 client 层方案的优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要耦合 sharding-jdbc 的依赖。其本质上通过配置多数据源，然后根据设定的分库分表策略，计算路由，将请求发送到计算得到的节点上。\",\"Mycat 这种 proxy 层方案的缺点在于需要部署，自己运维一套中间件，运维成本高，但是好处在于对于各个项目是透明的，如果遇到升级之类的都是自己中间件那里搞就行了。\",\"通常来说，这两个方案其实都可以选用，但是我个人建议中小型公司选用 sharding-jdbc，client 层方案轻便，而且维护成本低，不需要额外增派人手，而且中小型公司系统复杂度会低一些，项目也没那么多；但是中大型公司最好还是选用 mycat 这类 proxy 层方案，因为可能大公司系统和项目非常多，团队很大，人员充足，那么最好是专门弄个人来研究和维护 mycat，然后大量项目直接透明使用即可。\"]},\"253\":{\"h\":\"分库分表的问题\",\"t\":[\"分库分表的常见问题有哪些？\",\"你是如何解决分库分表的问题的？\",\"下文一一讲解常见分库分表的问题及解决方案。\"]},\"254\":{\"h\":\"分布式事务\",\"t\":[\"方案一：使用数据库事务\",\"优点：交由数据库管理，简单有效\",\"缺点：性能代价高，特别是 shard 越来越多时\",\"方案二：由应用程序和数据库共同控制\",\"原理：将一个跨多个数据库的分布式事务分拆成多个仅处于单个数据库上面的小事务，并通过应用程序来总控各个小事务。\",\"优点：性能上有优势\",\"缺点：需要应用程序在事务控制上做灵活设计。如果使用了 spring 的事务管理，改动起来会面临一定的困难。\"]},\"255\":{\"h\":\"跨节点 Join\",\"t\":[\"只要是进行切分，跨节点 Join 的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发生。解决这一问题的普遍做法是分两次查询实现。在第一次查询的结果集中找出关联数据的 id，根据这些 id 发起第二次请求得到关联数据。\"]},\"256\":{\"h\":\"跨节点的 count,order by,group by 以及聚合函数\",\"t\":[\"这些是一类问题，因为它们都需要基于全部数据集合进行计算。多数的代理都不会自动处理合并工作。\",\"解决方案：与解决跨节点 join 问题的类似，分别在各个节点上得到结果后在应用程序端进行合并。和 join 不同的是每个节点的查询可以并行执行，因此很多时候它的速度要比单一大表快很多。但如果结果集很大，对应用程序内存的消耗是一个问题。\",\"业务角度上的解决方案：\",\"如果是在前台应用提供分页，则限定用户只能看前面 n 页，这个限制在业务上也是合理的，一般看后面的分页意义不大（如果一定要看，可以要求用户缩小范围重新查询）。\",\"如果是后台批处理任务要求分批获取数据，则可以加大 page size，比如每次获取 5000 条记录，有效减少分页数（当然离线访问一般走备库，避免冲击主库）。\",\"分库设计时，一般还有配套大数据平台汇总所有分库的记录，有些分页查询可以考虑走大数据平台。\"]},\"257\":{\"h\":\"分布式 ID\",\"t\":[\"一旦数据库被切分到多个物理节点上，我们将不能再依赖数据库自身的主键生成机制。一方面，某个分区数据库自生成的 ID 无法保证在全局上是唯一的；另一方面，应用程序在插入数据之前需要先获得 ID，以便进行 SQL 路由。\",\"一些常见的主键生成策略：\",\"使用全局唯一 ID：GUID。\",\"为每个分片指定一个 ID 范围。\",\"分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)。\"]},\"258\":{\"h\":\"数据迁移，容量规划，扩容等问题\",\"t\":[\"来自淘宝综合业务平台团队，它利用对 2 的倍数取余具有向前兼容的特性（如对 4 取余得 1 的数对 2 取余也是 1）来分配数据，避免了行级别的数据迁移，但是依然需要进行表级别的迁移，同时对扩容规模和分表数量都有限制。总得来说，这些方案都不是十分的理想，多多少少都存在一些缺点，这也从一个侧面反映出了 Sharding 扩容的难度。\"]},\"259\":{\"h\":\"集群\",\"t\":[\"这个专题需要根据熟悉哪个数据库而定，但是主流、成熟的数据库都会实现一些基本功能，只是实现方式、策略上有所差异。由于本人较为熟悉 Mysql，所以下面主要介绍 Mysql 系统架构问题。\"]},\"260\":{\"h\":\"复制机制\",\"t\":[\"Mysql 支持两种复制：基于行的复制和基于语句的复制。\",\"这两种方式都是在主库上记录二进制日志（binlog），然后在从库上以异步方式更新主库上的日志记录。这意味着：复制过程存在时延，这段时间内，主从数据可能不一致（即最终一致性）。\",\"主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。\",\"binlog 线程 ：负责将主服务器上的数据更改写入二进制文件（binlog）中。\",\"I/O 线程 ：负责从主服务器上读取二进制日志文件，并写入从服务器的日志中。\",\"SQL 线程 ：负责读取日志并执行 SQL 语句以更新数据。\",\"img\"]},\"261\":{\"h\":\"读写分离\",\"t\":[\"主服务器用来处理写操作以及实时性要求比较高的读操作，而从服务器用来处理读操作。\",\"读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。\",\"MySQL 读写分离能提高性能的原因在于：\",\"主从服务器负责各自的读和写，极大程度缓解了锁的争用；\",\"从服务器可以配置 MyISAM 引擎，提升查询性能以及节约系统开销；\",\"增加冗余，提高可用性。\",\"img\"]},\"262\":{\"h\":\"数据库优化\",\"t\":[\"数据库优化的路线一般为：SQL 优化、结构优化、配置优化、硬件优化。前两个方向一般是普通开发的考量点，而后两个方向一般是 DBA 的考量点。\"]},\"263\":{\"h\":\"SQL 优化\",\"t\":[\"SQL 优化是数据库优化的最常见、最初级手段。\",\"在执行 SQL 语句，语句中字段的顺序、查询策略等都可能会影响到 SQL 的执行性能。\"]},\"264\":{\"h\":\"执行计划\",\"t\":[\"如何检验修改后的 SQL 确实有优化效果？这就需要用到执行计划（EXPLAIN）。\",\"使用执行计划 EXPLAIN 用来分析 SELECT 查询效率，开发人员可以通过分析 EXPLAIN 结果来优化查询语句。\",\"比较重要的字段有：\",\"select_type - 查询类型，有简单查询、联合查询、子查询等\",\"key - 使用的索引\",\"rows - 扫描的行数\",\"更多内容请参考：MySQL 性能优化神器 Explain 使用分析\"]},\"265\":{\"h\":\"访问数据优化\",\"t\":[\"减少请求的数据量：\",\"只返回必要的列 - 不要查询不需要的列，尽量避免使用 SELECT * 语句。\",\"只返回必要的行 - 使用 WHERE 语句进行查询过滤，有时候也需要使用 LIMIT 语句来限制返回的数据。\",\"缓存重复查询的数据 - 使用缓存可以避免在数据库中进行查询，特别要查询的数据经常被重复查询，缓存可以带来的查询性能提升将会是非常明显的。\",\"减少服务器端扫描的行数：\",\"最有效的方式是使用索引来覆盖查询（即 WHERE 后的过滤查询字段最好是索引字段）。\"]},\"266\":{\"h\":\"重构查询方式\"},\"267\":{\"h\":\"切分查询\",\"t\":[\"一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。\",\"DELEFT FROM messages WHERE create < DATE_SUB(NOW(), INTERVAL 3 MONTH); \",\"rows_affected = 0 do { rows_affected = do_query( \\\"DELETE FROM messages WHERE create < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000\\\") } while rows_affected > 0 \"]},\"268\":{\"h\":\"分解关联查询\",\"t\":[\"将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：\",\"缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。\",\"分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。\",\"减少锁竞争；\",\"在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可扩展。\",\"查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。\",\"SELECT * FROM tag JOIN tag_post ON tag_post.tag_id=tag.id JOIN post ON tag_post.post_id=post.id WHERE tag.tag='mysql'; SELECT * FROM tag WHERE tag='mysql'; SELECT * FROM tag_post WHERE tag_id=1234; SELECT * FROM post WHERE post.id IN (123,456,567,9098,8904); \"]},\"269\":{\"h\":\"SQL 语句细节\"},\"270\":{\"h\":\"选择最有效率的表名顺序\",\"t\":[\"数据库按照从右到左的顺序处理 FROM 子句中的表名，FROM 子句中写在最后的表将被最先处理。\",\"在 FROM 子句中包含多个表的情况下：\",\"如果多个表是完全无关系的话，将记录和列名最少的表，写在最后，然后依次类推。也就是说：选择记录条数最少的表放在最后。\",\"如果有 3 个以上的表连接查询：\",\"如果多个表是有关系的话，将引用最多的表，放在最后，然后依次类推。也就是说：被其他表所引用的表放在最后。\",\"例如：查询员工的编号，姓名，工资，工资等级，部门名\",\"emp 表被引用得最多，记录数也是最多，因此放在 form 字句的最后面\",\"select emp.empno,emp.ename,emp.sal,salgrade.grade,dept.dname from salgrade,dept,emp where (emp.deptno = dept.deptno) and (emp.sal between salgrade.losal and salgrade.hisal) \"]},\"271\":{\"h\":\"WHERE 子句中的连接顺序\",\"t\":[\"数据库按照从右到左的顺序解析 WHERE 子句。\",\"因此，表之间的连接必须写在其他 WHERE 条件的左边，那些可以过滤掉最大数量记录的条件必须写在 WHERE 子句的之右。\",\"emp.sal 可以过滤多条记录，写在 WHERE 字句的最右边\",\"select emp.empno,emp.ename,emp.sal,dept.dname from dept,emp where (emp.deptno = dept.deptno) and (emp.sal > 1500) \"]},\"272\":{\"h\":\"SELECT 子句中避免使用 * 号\",\"t\":[\"我们当时学习的时候，“*” 号是可以获取表中全部的字段数据的。\",\"但是它要通过查询数据字典完成的，这意味着将耗费更多的时间\",\"使用*号写出来的 SQL 语句也不够直观。\"]},\"273\":{\"h\":\"用 TRUNCATE 替代 DELETE\",\"t\":[\"如果需要清空所有表记录，使用 TRUNCATE 比 DELETE 执行效率高：\",\"DELETE 是一条一条记录的删除，而 Truncate 是将整个表删除，仅保留表结构\"]},\"274\":{\"h\":\"使用内部函数提高 SQL 效率\",\"t\":[\"例如使用 mysql 的 concat() 函数会比使用 || 拼接速度快，因为 concat() 函数已经被 mysql 优化过了。\"]},\"275\":{\"h\":\"使用表或列的别名\",\"t\":[\"如果表或列的名称太长了，使用一些简短的别名也能稍微提高一些 SQL 的性能。毕竟要扫描的字符长度就变少了。\"]},\"276\":{\"h\":\"SQL 关键字大写\",\"t\":[\"我们在编写 SQL 的时候，官方推荐的是使用大写来写关键字，因为 Oracle 服务器总是先将小写字母转成大写后，才执行\"]},\"277\":{\"h\":\"用 >= 替代 >\",\"t\":[\"❌ 低效方式：\",\"-- 首先定位到DEPTNO=3的记录并且扫描到第一个DEPT大于3的记录 SELECT * FROM EMP WHERE DEPTNO > 3 \",\"✔ 高效方式：\",\"-- 直接跳到第一个DEPT等于4的记录 SELECT * FROM EMP WHERE DEPTNO >= 4 \"]},\"278\":{\"h\":\"用 IN 替代 OR\",\"t\":[\"❌ 低效方式：\",\"select * from emp where sal = 1500 or sal = 3000 or sal = 800; \",\"✔ 高效方式：\",\"select * from emp where sal in (1500,3000,800); \"]},\"279\":{\"h\":\"总是使用索引的第一个列\",\"t\":[\"如果索引是建立在多个列上，只有在它的第一个列被 WHERE 子句引用时，优化器才会选择使用该索引。 当只引用索引的第二个列时，不引用索引的第一个列时，优化器使用了全表扫描而忽略了索引\",\"create index emp_sal_job_idex on emp(sal,job); ---------------------------------- select * from emp where job != 'SALES'; \"]},\"280\":{\"h\":\"SQL 关键字尽量大写\",\"t\":[\"SQL 关键字尽量大写，如：Oracle 默认会将 SQL 语句中的关键字转为大写后在执行。\"]},\"281\":{\"h\":\"结构优化\",\"t\":[\"数据库结构优化可以从以下方向着手：\",\"数据类型优化\",\"范式和反范式优化\",\"索引优化 - 细节请看索引和约束章节\",\"分库分表 - 细节请看分库分表章节\"]},\"282\":{\"h\":\"数据类型优化原则\",\"t\":[\"更小的通常更好\",\"简单就好，如整型比字符型操作代价低\",\"尽量避免 NULL\"]},\"283\":{\"h\":\"范式和反范式\",\"t\":[\"范式和反范式各有利弊，需要根据实际情况权衡。\",\"范式化的目标是尽力减少冗余列，节省空间。\",\"范式化的优点是：\",\"减少冗余列，要写的数据就少，写操作的性能提高；\",\"检索列数据时，DISTINCT 或 GROUP BY 操作减少。\",\"范式化的缺点是：增加关联查询。\",\"反范式化的目标是适当增加冗余列，以避免关联查询。\",\"反范式化的缺点是：\",\"冗余列增多，空间变大，写操作性能下降；\",\"检索列数据时，DISTINCT 或 GROUP BY 操作变多；\"]},\"284\":{\"h\":\"配置优化\",\"t\":[\"配置优化主要是针对 Mysql 服务器，例如：max_connections、max_heap_table_size、open_files_limit、max_allowed_packet 等等。\",\"在不同环境，不同场景下，应该酌情使用合理的配置。这种优化比较考验 Mysql 运维经验，一般是 DBA 的考量，普通开发接触的较少。\",\"Mysql 配置说明请参考：Mysql 服务器配置说明\"]},\"285\":{\"h\":\"硬件优化\",\"t\":[\"数据库扩容、使用高配设备等等。核心就是一个字：钱。\"]},\"286\":{\"h\":\"数据库理论\"},\"287\":{\"h\":\"函数依赖\",\"t\":[\"记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。\",\"如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。\",\"对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖；\",\"对于 A->B，B->C，则 A->C 是一个传递依赖。\"]},\"288\":{\"h\":\"异常\",\"t\":[\"以下的学生课程关系的函数依赖为 Sno, Cname -> Sname, Sdept, Mname, Grade，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。\",\"Sno\",\"Sname\",\"Sdept\",\"Mname\",\"Cname\",\"Grade\",\"1\",\"学生-1\",\"学院-1\",\"院长-1\",\"课程-1\",\"90\",\"2\",\"学生-2\",\"学院-2\",\"院长-2\",\"课程-2\",\"80\",\"2\",\"学生-2\",\"学院-2\",\"院长-2\",\"课程-1\",\"100\",\"3\",\"学生-3\",\"学院-2\",\"院长-2\",\"课程-2\",\"95\",\"不符合范式的关系，会产生很多异常，主要有以下四种异常：\",\"冗余数据：例如 学生-2 出现了两次。\",\"修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。\",\"删除异常：删除一个信息，那么也会丢失其它信息。例如如果删除了 课程-1，需要删除第一行和第三行，那么 学生-1 的信息就会丢失。\",\"插入异常，例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。\"]},\"289\":{\"h\":\"范式\",\"t\":[\"范式理论是为了解决以上提到四种异常。\",\"高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。\"]},\"290\":{\"h\":\"第一范式 (1NF)\",\"t\":[\"属性不可分。\"]},\"291\":{\"h\":\"第二范式 (2NF)\",\"t\":[\"每个非主属性完全函数依赖于键码。\",\"可以通过分解来满足。\",\"分解前\",\"Sno\",\"Sname\",\"Sdept\",\"Mname\",\"Cname\",\"Grade\",\"1\",\"学生-1\",\"学院-1\",\"院长-1\",\"课程-1\",\"90\",\"2\",\"学生-2\",\"学院-2\",\"院长-2\",\"课程-2\",\"80\",\"2\",\"学生-2\",\"学院-2\",\"院长-2\",\"课程-1\",\"100\",\"3\",\"学生-3\",\"学院-2\",\"院长-2\",\"课程-2\",\"95\",\"以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：\",\"Sno -> Sname, Sdept\",\"Sdept -> Mname\",\"Sno, Cname-> Grade\",\"Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。\",\"Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。\",\"分解后\",\"关系-1\",\"Sno\",\"Sname\",\"Sdept\",\"Mname\",\"1\",\"学生-1\",\"学院-1\",\"院长-1\",\"2\",\"学生-2\",\"学院-2\",\"院长-2\",\"3\",\"学生-3\",\"学院-2\",\"院长-2\",\"有以下函数依赖：\",\"Sno -> Sname, Sdept, Mname\",\"Sdept -> Mname\",\"关系-2\",\"Sno\",\"Cname\",\"Grade\",\"1\",\"课程-1\",\"90\",\"2\",\"课程-2\",\"80\",\"2\",\"课程-1\",\"100\",\"3\",\"课程-2\",\"95\",\"有以下函数依赖：\",\"Sno, Cname -> Grade\"]},\"292\":{\"h\":\"第三范式 (3NF)\",\"t\":[\"非主属性不传递依赖于键码。\",\"上面的 关系-1 中存在以下传递依赖：Sno -> Sdept -> Mname，可以进行以下分解：\",\"关系-11\",\"Sno\",\"Sname\",\"Sdept\",\"1\",\"学生-1\",\"学院-1\",\"2\",\"学生-2\",\"学院-2\",\"3\",\"学生-3\",\"学院-2\",\"关系-12\",\"Sdept\",\"Mname\",\"学院-1\",\"院长-1\",\"学院-2\",\"院长-2\"]},\"293\":{\"h\":\"存储引擎\",\"t\":[\"Mysql 有多种存储引擎，不同的存储引擎保存数据和索引的方式是不同的，但表的定义则是在 Mysql 服务层统一处理的。\",\"简单列举几个存储引擎：\",\"InnoDB - Mysql 的默认事务型存储引擎，并提供了行级锁和外键的约束。性能不错且支持自动故障恢复。\",\"MyISAM - Mysql 5.1 版本前的默认存储引擎。特性丰富但不支持事务，也不支持行级锁和外键，也没有故障恢复功能。\",\"CSV - 可以将 CSV 文件作为 Mysql 的表来处理，但这种表不支持索引。\",\"MEMORY 。所有的数据都在内存中，数据的处理速度快，但是安全性不高。\"]},\"294\":{\"h\":\"InnoDB vs. MyISAM\",\"t\":[\"InnoDB 和 MyISAM 是目前使用的最多的两种 Mysql 存储引擎。\",\"数据结构比较： \",\"InnoDB 和 MyISAM 的索引数据结构都是 B+ 树。\",\"MyIASM 的 B+ 树中存储的内容实际上是实际数据的地址值。也就是说它的索引和实际数据是分开的，只不过使用索引指向了实际数据。这种索引的模式被称为非聚集索引。\",\"InnoDB 的 B+ 树中存储的内容是实际的数据，这种索引有被称为聚集索引。\",\"事务支持比较： \",\"InnoDB 支持事务，并提供了行级锁和外键的约束。\",\"MyIASM 不支持事务，也不支持行级锁和外键。\",\"故障恢复比较： \",\"InnoDB 支持故障恢复。\",\"MyISAM 不支持故障恢复。\"]},\"295\":{\"h\":\"数据库比较\"},\"296\":{\"h\":\"常见数据库比较\",\"t\":[\"Oracle - 久负盛名的商业数据库。功能强大、稳定。最大的缺点就是费钱。\",\"Mysql - 曾经是互联网公司的最爱，但自动 Mysql 被 Oracle 公司收购后，好日子可能一去不复返。很多公司或开源项目已经逐渐寻找其他的开源产品来替代 Mysql。\",\"MariaDB - 开源关系型数据库。 MySQL 的真正开源的发行版本，由 Mysql 部分核心人员创建。可作为 Mysql 的替代产品。\",\"PostgreSQL - 开源关系型数据库。和 MySQL 的工作方式非常相似，社区支持做得很好。可作为 Mysql 的替代产品。\",\"SQLite - 开源的轻量级数据库，移动端常常使用。\",\"H2 - 内存数据库，一般用作开发、测试环境数据库。\",\"SQL Server - 微软 Windows 生态系统的数据库。我想，Java 程序员应该没人用吧。\"]},\"297\":{\"h\":\"Oracle vs. Mysql\",\"t\":[\"目前为止，Java 领域用的最多的关系型数据库，应该还是 Oracle 和 Mysql，所以这里做一下比较。\"]},\"298\":{\"h\":\"数据库对象差异\",\"t\":[\"在 Mysql 中，一个用户可以创建多个库。\",\"而在 Oracle 中，Oracle 服务器是由两部分组成\",\"数据库实例【理解为对象，看不见的】\",\"数据库【理解为类，看得见的】\",\"一个数据库实例可拥有多个用户，一个用户默认拥有一个表空间。\",\"表空间是存储我们数据库表的地方，表空间内可以有多个文件。\"]},\"299\":{\"h\":\"SQL 差异\",\"t\":[\"（1）主键递增\",\"Mysql 可以设置 AUTO_INCREMENT 约束来指定主键为自增序列。\",\"Oracle 需要通过 CREATE SEQUENCE 创建序列。\",\"（2）分页查询\",\"Mysql 分页基于 SELECT ... FROM ... LIMIT ... 完成，较简单。\",\"select * from help_category order by parent_category_id limit 10,5; \",\"Oracle 分页基于 SELECT ... FROM (SELECT ROWNUM ...) WHERE ... 完成，较复杂。\",\"select * from (select rownum rr,a.* from (select * from emp order by sal) a ) where rr>5 and rr<=10; \"]},\"300\":{\"h\":\"事务差异\",\"t\":[\"auto commit \",\"Mysql 事务是 autocommit 模式，即自动提交事务；\",\"Oracle 事务需要手动 COMMIT。\",\"事务隔离级别 \",\"Mysql 默认的事务隔离级别是可重复读（REPEATABLE READ）\",\"Oracle 支持读已提交（READ COMMITTED）和串行化（SERIALIZABLE） 两种事务隔离级别，默认事务隔离级别是读已提交（READ COMMITTED）\"]},\"301\":{\"h\":\"数据类型比较\",\"t\":[\"不同数据库中，对数据类型的支持是不一样的。\",\"即使存在同一种数据类型，也可能存在名称不同、或大小不同等问题。\",\"因此，对于数据类型的支持详情必须参考各数据库的官方文档。\",\"下面列举一些常见数据类型对比：\",\"数据类型\",\"Oracle\",\"MySQL\",\"PostgreSQL\",\"boolean\",\"Byte\",\"N/A\",\"Boolean\",\"integer\",\"Number\",\"Int Integer\",\"Int Integer\",\"float\",\"Number\",\"Float\",\"Numeric\",\"currency\",\"N/A\",\"N/A\",\"Money\",\"string (fixed)\",\"Char\",\"Char\",\"Char\",\"string (variable)\",\"Varchar Varchar2\",\"Varchar\",\"Varchar\",\"binary object\",\"Long Raw\",\"Blob Text\",\"Binary Varbinary\",\"数据类型对比表摘自 SQL 通用数据类型、SQL 用于各种数据库的数据类型\"]},\"302\":{\"h\":\"SQL FAQ\"},\"303\":{\"h\":\"SELECT COUNT(*)、SELECT COUNT(1) 和 SELECT COUNT(具体字段) 性能有差别吗？\",\"t\":[\"在 MySQL InnoDB 存储引擎中，COUNT(*) 和 COUNT(1) 都是对所有结果进行 COUNT。因此COUNT(*)和COUNT(1)本质上并没有区别，执行的复杂度都是 O(N)，也就是采用全表扫描，进行循环 + 计数的方式进行统计。\",\"如果是 MySQL MyISAM 存储引擎，统计数据表的行数只需要O(1)的复杂度，这是因为每张 MyISAM 的数据表都有一个 meta 信息存储了row_count值，而一致性则由表级锁来保证。因为 InnoDB 支持事务，采用行级锁和 MVCC 机制，所以无法像 MyISAM 一样，只维护一个row_count变量，因此需要采用扫描全表，进行循环 + 计数的方式来完成统计。\",\"需要注意的是，在实际执行中，COUNT(*)和COUNT(1)的执行时间可能略有差别，不过你还是可以把它俩的执行效率看成是相等的。\",\"另外在 InnoDB 引擎中，如果采用COUNT(*)和COUNT(1)来统计数据行数，要尽量采用二级索引。因为主键采用的索引是聚簇索引，聚簇索引包含的信息多，明显会大于二级索引（非聚簇索引）。对于COUNT(*)和COUNT(1)来说，它们不需要查找具体的行，只是统计行数，系统会自动采用占用空间更小的二级索引来进行统计。\",\"然而如果想要查找具体的行，那么采用主键索引的效率更高。如果有多个二级索引，会使用 key_len 小的二级索引进行扫描。当没有二级索引的时候，才会采用主键索引来进行统计。\",\"这里我总结一下：\",\"一般情况下，三者执行的效率为 COUNT(*)= COUNT(1)> COUNT(字段)。我们尽量使用COUNT(*)，当然如果你要统计的是某个字段的非空数据行数，则另当别论，毕竟比较执行效率的前提是结果一样才可以。\",\"如果要统计COUNT(*)，尽量在数据表上建立二级索引，系统会自动采用key_len小的二级索引进行扫描，这样当我们使用SELECT COUNT(*)的时候效率就会提升，有时候可以提升几倍甚至更高。\",\"——摘自极客时间 - SQL 必知必会\"]},\"304\":{\"h\":\"ORDER BY 是对分的组排序还是对分组中的记录排序呢？\",\"t\":[\"ORDER BY 就是对记录进行排序。如果你在 ORDER BY 前面用到了 GROUP BY，实际上这是一种分组的聚合方式，已经把一组的数据聚合成为了一条记录，再进行排序的时候，相当于对分的组进行了排序。\"]},\"305\":{\"h\":\"SELECT 语句内部的执行步骤\",\"t\":[\"一条完整的 SELECT 语句内部的执行顺序是这样的：\",\"FROM 子句组装数据（包括通过 ON 进行连接）；\",\"WHERE 子句进行条件筛选；\",\"GROUP BY 分组 ；\",\"使用聚集函数进行计算；\",\"HAVING 筛选分组；\",\"计算所有的表达式；\",\"SELECT 的字段；\",\"ORDER BY 排序；\",\"LIMIT 筛选。\",\"——摘自极客时间 - SQL 必知必会\"]},\"306\":{\"h\":\"解哪种情况下应该使用 EXISTS，哪种情况应该用 IN\",\"t\":[\"索引是个前提，其实选择与否还是要看表的大小。你可以将选择的标准理解为小表驱动大表。在这种方式下效率是最高的。\",\"比如下面这样：\",\" SELECT * FROM A WHERE cc IN (SELECT cc FROM B) SELECT * FROM A WHERE EXISTS (SELECT cc FROM B WHERE B.cc=A.cc) \",\"当 A 小于 B 时，用 EXISTS。因为 EXISTS 的实现，相当于外表循环，实现的逻辑类似于：\",\" for i in A for j in B if j.cc == i.cc then ... \",\"当 B 小于 A 时用 IN，因为实现的逻辑类似于：\",\" for i in B for j in A if j.cc == i.cc then ... \",\"哪个表小就用哪个表来驱动，A 表小就用 EXISTS，B 表小就用 IN。\",\"——摘自极客时间 - SQL 必知必会\"]},\"307\":{\"c\":[\"MySQL\"]},\"308\":{\"h\":\"Golang常⻅面试题解析\"},\"309\":{\"h\":\"0、go与其它语言\"},\"310\":{\"h\":\"0、什么是 面向对象\",\"t\":[\"在了解 Go 语言是不是面向对象（简称：OOP） 之前，我们必须先知道 OOP 是啥，得先给他 “下定义”\",\"根据 Wikipedia 的定义，我们梳理出 OOP 的几个基本认知：\",\"面向对象编程（OOP）是一种基于 “对象” 概念的编程范式，它可以包含数据和代码：数据以字段的形式存在（通常称为属性或属性），代码以程序的形式存在（通常称为方法）。\",\"对象自己的程序可以访问并经常修改自己的数据字段。\",\"对象经常被定义为类的一个实例。\",\"对象利用属性和方法的私有/受保护/公共可见性，对象的内部状态受到保护，不受外界影响（被封装）。\",\"基于这几个基本认知进行一步延伸出，面向对象的三大基本特性：\",\"封装\",\"继承\",\"多态\"]},\"311\":{\"h\":\"1、Go语言和Java有什么区别?\",\"t\":[\"1、Go上不允许函数重载，必须具有方法和函数的唯一名称，而Java允许函数重载。\",\"2、在速度方面，Go的速度要比Java快。\",\"3、Java默认允许多态，而Go没有。\",\"4、Go语言使用HTTP协议进行路由配置，而Java使用Akka.routing.ConsistentHashingRouter和Akka.routing.ScatterGatherFirstCompletedRouter进行路由配置。\",\"5、Go代码可以自动扩展到多个核心，而Java并不总是具有足够的可扩展性。\",\"6、Go语言的继承通过匿名组合完成，基类以Struct的方式定义，子类只需要把基类作为成员放在子类的定义中，支持多继承;而Java的继承通过extends关键字完成，不支持多继承。\"]},\"312\":{\"h\":\"2、Go 是面向对象的语言吗？\",\"t\":[\"是的，也不是。原因是：\",\"Go 有类型和方法，并且允许面向对象的编程风格，但没有类型层次。\",\"Go 中的 \\\"接口 \\\"概念提供了一种不同的方法，我们认为这种方法易于使用，而且在某些方面更加通用。还有一些方法可以将类型嵌入到其他类型中，以提供类似的东西，但不等同于子类。\",\"Go 中的方法比 C++ 或 Java 中的方法更通用：它们可以为任何类型的数据定义，甚至是内置类型，如普通的、\\\"未装箱的 \\\"整数。它们并不局限于结构（类）。\",\"Go 由于缺乏类型层次，Go 中的 \\\"对象 \\\"比 C++ 或 Java 等语言更轻巧。\"]},\"313\":{\"h\":\"3、Go 实现面向对象编程\"},\"314\":{\"h\":\"封装\",\"t\":[\"面向对象中的 “封装” 指的是可以隐藏对象的内部属性和实现细节，仅对外提供公开接口调用，这样子用户就不需要关注你内部是怎么实现的。\",\"在 Go 语言中的属性访问权限，通过首字母大小写来控制：\",\"首字母大写，代表是公共的、可被外部访问的。\",\"首字母小写，代表是私有的，不可以被外部访问。\",\"Go 语言的例子如下：\",\"type Animal struct { name string } func NewAnimal() *Animal { return &Animal{} } func (p *Animal) SetName(name string) { p.name = name } func (p *Animal) GetName() string { return p.name } \",\"在上述例子中，我们声明了一个结构体 Animal，其属性 name 为小写。没法通过外部方法，在配套上存在 Setter 和 Getter 的方法，用于统一的访问和设置控制。\",\"以此实现在 Go 语言中的基本封装。\"]},\"315\":{\"h\":\"继承\",\"t\":[\"面向对象中的 “继承” 指的是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。\",\"img\",\"从实际的例子来看，就是动物是一个大父类，下面又能细分为 “食草动物”、“食肉动物”，这两者会包含 “动物” 这个父类的基本定义。\",\"从实际的例子来看，就是动物是一个大父类，下面又能细分为 “食草动物”、“食肉动物”，这两者会包含 “动物” 这个父类的基本定义。\",\"在 Go 语言中，是没有类似extends关键字的这种继承的方式，在语言设计上采取的是组合的方式：\",\"type Animal struct { Name string } type Cat struct { Animal FeatureA string } type Dog struct { Animal FeatureB string } \",\"在上述例子中，我们声明了 Cat 和 Dog 结构体，其在内部匿名组合了 Animal 结构体。因此 Cat 和 Dog 的实例都可以调用 Animal 结构体的方法：\",\"func main() { p := NewAnimal() p.SetName(\\\"我是搬运工，去给煎鱼点赞~\\\") dog := Dog{Animal: *p} fmt.Println(dog.GetName()) } \",\"同时 Cat 和 Dog 的实例可以拥有自己的方法：\",\"func (dog *Dog) HelloWorld() { fmt.Println(\\\"脑子进煎鱼了\\\") } func (cat *Cat) HelloWorld() { fmt.Println(\\\"煎鱼进脑子了\\\") } \",\"上述例子能够正常包含调用 Animal 的相关属性和方法，也能够拥有自己的独立属性和方法，在 Go 语言中达到了类似继承的效果。\"]},\"316\":{\"h\":\"多态\",\"t\":[\"多态\",\"面向对象中的 “多态” 指的同一个行为具有多种不同表现形式或形态的能力，具体是指一个类实例（对象）的相同方法在不同情形有不同表现形式。\",\"多态也使得不同内部结构的对象可以共享相同的外部接口，也就是都是一套外部模板，内部实际是什么，只要符合规格就可以。\",\"在 Go 语言中，多态是通过接口来实现的：\",\"type AnimalSounder interface { MakeDNA() } func MakeSomeDNA(animalSounder AnimalSounder) { // 参数是AnimalSounder接口类型 animalSounder.MakeDNA() } \",\"在上述例子中，我们声明了一个接口类型 AnimalSounder，配套一个 MakeSomeDNA 方法，其接受 AnimalSounder 接口类型作为入参。\",\"因此在 Go 语言中。只要配套的 Cat 和 Dog 的实例也实现了 MakeSomeDNA 方法，那么我们就可以认为他是 AnimalSounder 接口类型：\",\"type AnimalSounder interface { MakeDNA() } func MakeSomeDNA(animalSounder AnimalSounder) { animalSounder.MakeDNA() } func (c *Cat) MakeDNA() { fmt.Println(\\\"煎鱼是煎鱼\\\") } func (c *Dog) MakeDNA() { fmt.Println(\\\"煎鱼其实不是煎鱼\\\") } func main() { MakeSomeDNA(&Cat{}) MakeSomeDNA(&Dog{}) } \",\"当 Cat 和 Dog 的实例实现了 AnimalSounder 接口类型的约束后，就意味着满足了条件，他们在 Go 语言中就是一个东西。能够作为入参传入 MakeSomeDNA 方法中，再根据不同的实例实现多态行为。\",\"在日常工作中，基本了解这些概念就可以了。若是面试，可以针对三大特性：“封装、继承、多态” 和 五大原则 “单一职责原则（SRP）、开放封闭原则（OCP）、里氏替换原则（LSP）、依赖倒置原则（DIP）、接口隔离原则（ISP）” 进行深入理解和说明。\"]},\"317\":{\"h\":\"4、go语言和python的区别：\",\"t\":[\"1、范例\",\"Python是一种基于面向对象编程的多范式，命令式和函数式编程语言。它坚持这样一种观点，即如果一种语言在某些情境中表现出某种特定的方式，理想情况下它应该在所有情境中都有相似的作用。但是，它又不是纯粹的OOP语言，它不支持强封装，这是OOP的主要原则之一。\",\"Go是一种基于并发编程范式的过程编程语言，它与C具有表面相似性。实际上，Go更像是C的更新版本。\",\"2、类型化\",\"Python是动态类型语言，而Go是一种静态类型语言，它实际上有助于在编译时捕获错误，这可以进一步减少生产后期的严重错误。\",\"3、并发\",\"Python没有提供内置的并发机制，而Go有内置的并发机制。\",\"4、安全性\",\"Python是一种强类型语言，它是经过编译的，因此增加了一层安全性。Go具有分配给每个变量的类型，因此，它提供了安全性。但是，如果发生任何错误，用户需要自己运行整个代码。\",\"5、管理内存\",\"Go允许程序员在很大程度上管理内存。而，Python中的内存管理完全自动化并由Python VM管理；它不允许程序员对内存管理负责。\",\"6、库\",\"与Go相比，Python提供的库数量要大得多。然而，Go仍然是新的，并且还没有取得很大进展。\",\"7、语法\",\"Python的语法使用缩进来指示代码块。Go的语法基于打开和关闭括号。\",\"8、详细程度\",\"为了获得相同的功能，Golang代码通常需要编写比Python代码更多的字符。\"]},\"318\":{\"h\":\"5、go 与 node.js\",\"t\":[\"深入对比Node.js和Golang 到底谁才是NO.1 : https://zhuanlan.zhihu.com/p/421352168\",\"从 Node 到 Go：一个粗略的比较 : https://zhuanlan.zhihu.com/p/29847628\"]},\"319\":{\"h\":\"一、基础部分\"},\"320\":{\"h\":\"0、为什么选择golang\",\"t\":[\"0、高性能-协程 golang 源码级别支持协程，实现简单；对比进程和线程，协程占用资源少，能够简洁高效地处理高并发问题。\",\"**1、学习曲线容易-**代码极简\",\"Go语言语法简单，包含了类C语法。因为Go语言容易学习，所以一个普通的大学生花几个星期就能写出来可以上手的、高性能的应用。在国内大家都追求快，这也是为什么国内Go流行的原因之一。\",\"Go 语言的语法特性简直是太简单了，简单到你几乎玩不出什么花招，直来直去的，学习曲线很低，上手非常快。\",\"2、效率：快速的编译时间，开发效率和运行效率高\",\"开发过程中相较于 Java 和 C++呆滞的编译速度，Go 的快速编译时间是一个主要的效率优势。Go拥有接近C的运行效率和接近PHP的开发效率。\",\"C 语言的理念是信任程序员，保持语言的小巧，不屏蔽底层且底层友好，关注语言的执行效率和性能。而 Python 的姿态是用尽量少的代码完成尽量多的事。于是我能够感觉到，Go 语言想要把 C 和 Python 统一起来，这是多棒的一件事啊。\",\"3、出身名门、血统纯正\",\"之所以说Go出身名门，从Go语言的创造者就可见端倪，Go语言绝对血统纯正。其次Go语言出自Google公司，Google在业界的知名度和实力自然不用多说。Google公司聚集了一批牛人，在各种编程语言称雄争霸的局面下推出新的编程语言，自然有它的战略考虑。而且从Go语言的发展态势来看，Google对它这个新的宠儿还是很看重的，Go自然有一个良好的发展前途。\",\"4、自由高效：组合的思想、无侵入式的接口\",\"Go语言可以说是开发效率和运行效率二者的完美融合，天生的并发编程支持。Go语言支持当前所有的编程范式，包括过程式编程、面向对象编程、面向接口编程、函数式编程。程序员们可以各取所需、自由组合、想怎么玩就怎么玩。\",\"**5、强大的标准库-**生态\",\"背靠谷歌，生态丰富，轻松 go get 获取各种高质量轮子。用户可以专注于业务逻辑，避免重复造轮子。\",\"这包括互联网应用、系统编程和网络编程。Go里面的标准库基本上已经是非常稳定了，特别是我这里提到的三个，网络层、系统层的库非常实用。Go 语言的 lib 库麻雀虽小五脏俱全。Go 语言的 lib 库中基本上有绝大多数常用的库，虽然有些库还不是很好，但我觉得不是问题，因为我相信在未来的发展中会把这些问题解决掉。\",\"6、部署方便：二进制文件，Copy部署\",\"部署简单，源码编译成执行文件后，可以直接运行，减少了对其它插件依赖。不像其它语言，执行文件依赖各种插件，各种库，研发机器运行正常，部署到生产环境，死活跑不起来 。\",\"7、简单的并发\",\"并行和异步编程几乎无痛点。Go 语言的 Goroutine 和 Channel 这两个神器简直就是并发和异步编程的巨大福音。像 C、C++、Java、Python 和 JavaScript 这些语言的并发和异步方式太控制就比较复杂了，而且容易出错，而 Go 解决这个问题非常地优雅和流畅。这对于编程多年受尽并发和异步折磨的编程者来说，完全就是让人眼前一亮的感觉。Go 是一种非常高效的语言，高度支持并发性。Go是为大数据、微服务、并发而生的一种编程语言。\",\"Go 作为一门语言致力于使事情简单化。它并未引入很多新概念，而是聚焦于打造一门简单的语言，它使用起来异常快速并且简单。其唯一的创新之处是 goroutines 和通道。Goroutines 是 Go 面向线程的轻量级方法，而通道是 goroutines 之间通信的优先方式。\",\"创建 Goroutines 的成本很低，只需几千个字节的额外内存，正由于此，才使得同时运行数百个甚至数千个 goroutines 成为可能。可以借助通道实现 goroutines 之间的通信。Goroutines 以及基于通道的并发性方法使其非常容易使用所有可用的 CPU 内核，并处理并发的 IO。相较于 Python/Java，在一个 goroutine 上运行一个函数需要最小的代码。\",\"8、稳定性\",\"Go拥有强大的编译检查、严格的编码规范和完整的软件生命周期工具，具有很强的稳定性，稳定压倒一切。那么为什么Go相比于其他程序会更稳定呢？这是因为Go提供了软件生命周期（开发、测试、部署、维护等等）的各个环节的工具，如go tool、gofmt、go test。\",\"9、跨平台 很多语言都支持跨平台，把这个优点单独拿出来，貌似没有什么值得称道的，但是结合上述优点，它的综合能力就非常强了。\"]},\"321\":{\"h\":\"golang 缺点\",\"t\":[\"①右大括号不允许换行，否则编译报错\",\"②不允许有未使用的包或变量\",\"③错误处理原始，虽然引入了defer、panic、recover处理出错后的逻辑，函数可以返回多个值，但基本依靠返回错误是否为空来判断函数是否执行成功，if err != nil语句较多，比较繁琐，程序没有java美观。(官方解释：提供了多个返回值，处理错误方便，如加入异常机制会要求记住一些常见异常，例如IOException，go的错误Error类型较统一方便)④[]interface{}不支持下标操作\",\"⑤struct没有构造和析构，一些资源申请和释放动作不太方便\",\"⑥仍然保留C/C++的指针操作，取地址&，取值*\"]},\"322\":{\"h\":\"1、golang 中 make 和 new 的区别？（基本必问）\",\"t\":[\"**共同点：**给变量分配内存\",\"不同点：\",\"1）作用变量类型不同，new给string,int和数组分配内存，make给切片，map，channel分配内存；\",\"2）返回类型不一样，new返回指向变量的指针，make返回变量本身；\",\"3）new 分配的空间被清零。make 分配空间后，会进行初始化；\",\"\\\\4) 字节的面试官还说了另外一个区别，就是分配的位置，在堆上还是在栈上？这块我比较模糊，大家可以自己探究下，我搜索出来的答案是golang会弱化分配的位置的概念，因为编译的时候会自动内存逃逸处理，懂的大佬帮忙补充下：make、new内存分配是在堆上还是在栈上？\"]},\"323\":{\"h\":\"2、 IO多路复用\"},\"324\":{\"h\":\"3、for range 的时候它的地址会发生变化么？\",\"t\":[\"答：在 for a,b := range c 遍历中， a 和 b 在内存中只会存在一份，即之后每次循环时遍历到的数据都是以值覆盖的方式赋给 a 和 b，a，b 的内存地址始终不变。由于有这个特性，for 循环里面如果开协程，不要直接把 a 或者 b 的地址传给协程。解决办法：在每次循环时，创建一个临时变量。\"]},\"325\":{\"h\":\"4、go defer，多个 defer 的顺序，defer 在什么时机会修改返回值？\",\"t\":[\"https://www.topgoer.cn/docs/golangxiuyang/golangxiuyang-1cmee0q64ij5p\",\"作用：defer延迟函数，释放资源，收尾工作；如释放锁，关闭文件，关闭链接；捕获panic;\",\"避坑指南：defer函数紧跟在资源打开后面，否则defer可能得不到执行，导致内存泄露。\",\"多个 defer 调用顺序是 LIFO（后入先出），defer后的操作可以理解为压入栈中\",\"defer，return，return value（函数返回值） 执行顺序：首先return，其次return value，最后defer。defer可以修改函数最终返回值，修改时机：有名返回值或者函数返回指针 参考：\",\"【Golang】Go语言defer用法大总结(含return返回机制)__奶酪的博客-CSDN博客blog.csdn.net/Cassie_zkq/article/details/108567205\",\"有名返回值\",\"func b() (i int) { defer func() { i++ fmt.Println(\\\"defer2:\\\", i) }() defer func() { i++ fmt.Println(\\\"defer1:\\\", i) }() return i //或者直接写成 return } func main() { fmt.Println(\\\"return:\\\", b()) } \",\"函数返回指针\",\"func c() *int { var i int defer func() { i++ fmt.Println(\\\"defer2:\\\", i) }() defer func() { i++ fmt.Println(\\\"defer1:\\\", i) }() return &i } func main() { fmt.Println(\\\"return:\\\", *(c())) } \"]},\"326\":{\"h\":\"5、uint 类型溢出问题\",\"t\":[\"超过最大存储值如uint8最大是255\",\"var a uint8 =255\",\"var b uint8 =1\",\"a+b = 0总之类型溢出会出现难以意料的事\",\"img\"]},\"327\":{\"h\":\"6、能介绍下 rune 类型吗？\",\"t\":[\"相当int32\",\"golang中的字符串底层实现是通过byte数组的，中文字符在unicode下占2个字节，在utf-8编码下占3个字节，而golang默认编码正好是utf-8\",\"byte 等同于int8，常用来处理ascii字符\",\"rune 等同于int32,常用来处理unicode或utf-8字符\",\"img\"]},\"328\":{\"h\":\"7、 golang 中解析 tag 是怎么实现的？反射原理是什么？(中高级肯定会问，比较难，需要自己多去总结)\",\"t\":[\"参考如下连接\",\"golang中struct关于反射tag_paladinosment的博客-CSDN博客_golang 反射tagblog.csdn.net/paladinosment/article/details/42570937\",\"type User struct { name string json:name-field age int } func main() { user := &User{\\\"John Doe The Fourth\\\", 20} field, ok := reflect.TypeOf(user).Elem().FieldByName(\\\"name\\\") if !ok { panic(\\\"Field not found\\\") } fmt.Println(getStructTag(field)) } func getStructTag(f reflect.StructField) string\",\"Go 中解析的 tag 是通过反射实现的，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力或动态知道给定数据对象的类型和结构，并有机会修改它。反射将接口变量转换成反射对象 Type 和 Value；反射可以通过反射对象 Value 还原成原先的接口变量；反射可以用来修改一个变量的值，前提是这个值可以被修改；tag是啥:结构体支持标记，name string json:name-field 就是 json:name-field 这部分\",\"gorm json yaml gRPC protobuf gin.Bind()都是通过反射来实现的\"]},\"329\":{\"h\":\"8、调用函数传入结构体时，应该传值还是指针？ （Golang 都是传值）\",\"t\":[\"Go 的函数参数传递都是值传递。所谓值传递：指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。参数传递还有引用传递，所谓引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数\",\"因为 Go 里面的 map，slice，chan 是引用类型。变量区分值类型和引用类型。所谓值类型：变量和变量的值存在同一个位置。所谓引用类型：变量和变量的值是不同的位置，变量的值存储的是对值的引用。但并不是 map，slice，chan 的所有的变量在函数内都能被修改，不同数据类型的底层存储结构和实现可能不太一样，情况也就不一样。\"]},\"330\":{\"h\":\"9、goroutine什么情况下会阻塞\",\"t\":[\"在 Go 里面阻塞主要分为以下 4 种场景：\",\"由于原子、互斥量或通道操作调用导致 Goroutine 阻塞，调度器将把当前阻塞的 Goroutine 切换出去，重新调度 LRQ 上的其他 Goroutine；\",\"由于网络请求和 IO 操作导致 Goroutine 阻塞。Go 程序提供了网络轮询器（NetPoller）来处理网络请求和 IO 操作的问题，其后台通过 kqueue（MacOS），epoll（Linux）或 iocp（Windows）来实现 IO 多路复用。通过使用 NetPoller 进行网络系统调用，调度器可以防止 Goroutine 在进行这些系统调用时阻塞 M。这可以让 M 执行 P 的 LRQ 中其他的 Goroutines，而不需要创建新的 M。执行网络系统调用不需要额外的 M，网络轮询器使用系统线程，它时刻处理一个有效的事件循环，有助于减少操作系统上的调度负载。用户层眼中看到的 Goroutine 中的“block socket”，实现了 goroutine-per-connection 简单的网络编程模式。实际上是通过 Go runtime 中的 netpoller 通过 Non-block socket + I/O 多路复用机制“模拟”出来的。\",\"当调用一些系统方法的时候（如文件 I/O），如果系统方法调用的时候发生阻塞，这种情况下，网络轮询器（NetPoller）无法使用，而进行系统调用的 G1 将阻塞当前 M1。调度器引入 其它M 来服务 M1 的P。\",\"如果在 Goroutine 去执行一个 sleep 操作，导致 M 被阻塞了。Go 程序后台有一个监控线程 sysmon，它监控那些长时间运行的 G 任务然后设置可以强占的标识符，别的 Goroutine 就可以抢先进来执行。\"]},\"331\":{\"h\":\"10、讲讲 Go 的 select 底层数据结构和一些特性？（难点，没有项目经常可能说不清，面试一般会问你项目中怎么使用select）\",\"t\":[\"答：go 的 select 为 golang 提供了多路 IO 复用机制，和其他 IO 复用一样，用于检测是否有读写事件是否 ready。linux 的系统 IO 模型有 select，poll，epoll，go 的 select 和 linux 系统 select 非常相似。\",\"select 结构组成主要是由 case 语句和执行的函数组成 select 实现的多路复用是：每个线程或者进程都先到注册和接受的 channel（装置）注册，然后阻塞，然后只有一个线程在运输，当注册的线程和进程准备好数据后，装置会根据注册的信息得到相应的数据。\",\"select 的特性\",\"1）select 操作至少要有一个 case 语句，出现读写 nil 的 channel 该分支会忽略，在 nil 的 channel 上操作则会报错。\",\"2）select 仅支持管道，而且是单协程操作。\",\"3）每个 case 语句仅能处理一个管道，要么读要么写。\",\"4）多个 case 语句的执行顺序是随机的。\",\"5）存在 default 语句，select 将不会阻塞，但是存在 default 会影响性能。\"]},\"332\":{\"h\":\"11、讲讲 Go 的 defer 底层数据结构和一些特性？\",\"t\":[\"答：每个 defer 语句都对应一个_defer 实例，多个实例使用指针连接起来形成一个单连表，保存在 gotoutine 数据结构中，每次插入_defer 实例，均插入到链表的头部，函数结束再一次从头部取出，从而形成后进先出的效果。\",\"defer 的规则总结：\",\"延迟函数的参数是 defer 语句出现的时候就已经确定了的。\",\"延迟函数执行按照后进先出的顺序执行，即先出现的 defer 最后执行。\",\"延迟函数可能操作主函数的返回值。\",\"申请资源后立即使用 defer 关闭资源是个好习惯。\"]},\"333\":{\"h\":\"12、单引号，双引号，反引号的区别？\",\"t\":[\"单引号，表示byte类型或rune类型，对应 uint8和int32类型，默认是 rune 类型。byte用来强调数据是raw data，而不是数字；而rune用来表示Unicode的code point。\",\"双引号，才是字符串，实际上是字符数组。可以用索引号访问某字节，也可以用len()函数来获取字符串所占的字节长度。\",\"反引号，表示字符串字面量，但不支持任何转义序列。字面量 raw literal string 的意思是，你定义时写的啥样，它就啥样，你有换行，它就换行。你写转义字符，它也就展示转义字符。\"]},\"334\":{\"h\":\"13、go出现panic的场景\"},\"335\":{\"h\":\"https://www.cnblogs.com/paulwhw/p/15585467.html\",\"t\":[\"数组/切片越界\",\"空指针调用。比如访问一个 nil 结构体指针的成员\",\"过早关闭 HTTP 响应体\",\"除以 0\",\"向已经关闭的 channel 发送消息\",\"重复关闭 channel\",\"关闭未初始化的 channel\",\"未初始化 map。注意访问 map 不存在的 key 不会 panic，而是返回 map 类型对应的零值，但是不能直接赋值\",\"跨协程的 panic 处理\",\"sync 计数为负数。\",\"类型断言不匹配。var a interface{} = 1; fmt.Println(a.(string)) 会 panic，建议用 s,ok := a.(string)\"]},\"336\":{\"h\":\"14、go是否支持while循环，如何实现这种机制\",\"t\":[\"https://blog.csdn.net/chengqiuming/article/details/115573947\"]},\"337\":{\"h\":\"15、go里面如何实现set？\",\"t\":[\"Go中是不提供Set类型的，Set是一个集合，其本质就是一个List，只是List里的元素不能重复。\",\"Go提供了map类型，但是我们知道，map类型的key是不能重复的，因此，我们可以利用这一点，来实现一个set。那value呢？value我们可以用一个常量来代替，比如一个空结构体，实际上空结构体不占任何内存，使用空结构体，能够帮我们节省内存空间，提高性能\",\"代码实现：https://blog.csdn.net/haodawang/article/details/80006059\"]},\"338\":{\"h\":\"16、go如何实现类似于java当中的继承机制？\",\"t\":[\"https://zhuanlan.zhihu.com/p/88480107\",\"说到继承我们都知道，在Go中没有extends关键字，也就意味着Go并没有原生级别的继承支持。这也是为什么我在文章开头用了伪继承这个词。本质上，Go使用interface实现的功能叫组合，Go是使用组合来实现的继承，说的更精确一点，是使用组合来代替的继承，举个很简单的例子:\",\"通过组合实现了继承：\",\"type Animal struct { Name string } func (a *Animal) Eat() { fmt.Printf(\\\"%v is eating\\\", a.Name) fmt.Println() } type Cat struct { *Animal } cat := &Cat{ Animal: &Animal{ Name: \\\"cat\\\", }, } cat.Eat() // cat is eating \",\"首先，我们实现了一个Animal的结构体，代表动物类。并声明了Name字段，用于描述动物的名字。\",\"然后，实现了一个以Animal为receiver的Eat方法，来描述动物进食的行为。\",\"最后，声明了一个Cat结构体，组合了Cat字段。再实例化一个猫，调用Eat方法，可以看到会正常的输出。\",\"可以看到，Cat结构体本身没有Name字段，也没有去实现Eat方法。唯一有的就是组合了Animal父类，至此，我们就证明了已经通过组合实现了继承。\",\"总结：\",\"如果一个 struct 嵌套了另一个匿名结构体，那么这个结构可以直接访问匿名结构体的属性和方法，从而实现继承。\",\"如果一个 struct 嵌套了另一个有名的结构体，那么这个模式叫做组合。\",\"如果一个 struct 嵌套了多个匿名结构体，那么这个结构可以直接访问多个匿名结构体的属性和方法，从而实现多重继承。\"]},\"339\":{\"h\":\"17、怎么去复用一个接口的方法？\",\"t\":[\"https://www.yisu.com/zixun/452409.html\"]},\"340\":{\"h\":\"18、go里面的 _\",\"t\":[\"忽略返回值\",\"比如某个函数返回三个参数，但是我们只需要其中的两个，另外一个参数可以忽略，这样的话代码可以这样写：\",\"v1, v2, _ := function(...) v1, _, _ := function(...) \",\"用在变量(特别是接口断言)\",\"type T struct{} var _ X = T{} //其中 I为interface \",\"上面用来判断 type T是否实现了X,用作类型断言，如果T没有实现接口X，则编译错误.\",\"用在import package\",\"import _ \\\"test/food\\\" \",\"引入包时，会先调用包中的初始化函数，这种使用方式仅让导入的包做初始化，而不使用包中其他功能\"]},\"341\":{\"h\":\"19、goroutine创建的时候如果要传一个参数进去有什么要注意的点？\",\"t\":[\"https://www.cnblogs.com/waken-captain/p/10496454.html\"]},\"342\":{\"h\":\"20、写go单元测试的规范？\",\"t\":[\"单元测试文件命名规则 ：\",\"单元测试需要创建单独的测试文件，不能在原有文件中书写，名字规则为 xxx_test.go。这个规则很好理解。\",\"单元测试包命令规则\",\"单元测试文件的包名为原文件的包名添加下划线接test，举例如下：\",\"// 原文件包名： package xxx // 单元测试文件包名： package xxx_test \",\"单元测试方法命名规则\",\"单元测试文件中的测试方法和原文件中的待测试的方法名相对应，以Test开头，举例如下：\",\"// 原文件方法： func Xxx(name string) error // 单元测试文件方法： func TestXxx() \",\"单元测试方法参数\",\"单元测试方法的参数必须是t *testing.T，举例如下：\",\"func TestZipFiles(t *testing.T) { ... \"]},\"343\":{\"h\":\"21、单步调试？\",\"t\":[\"https://www.jianshu.com/p/21ed30859d80\"]},\"344\":{\"h\":\"22、导入一个go的工程，有些依赖找不到，改怎么办？\",\"t\":[\"https://www.cnblogs.com/niuben/p/16182001.html\"]},\"345\":{\"h\":\"23、 值拷贝 与 引用拷贝，深拷贝 与 浅拷贝\",\"t\":[\"map，slice，chan 是引用拷贝；引用拷贝 是 浅拷贝\",\"其余的，都是 值拷贝；值拷贝 是 深拷贝\"]},\"346\":{\"h\":\"深浅拷贝的本质区别：\",\"t\":[\"是否真正获取对象实体，而不是引用\",\"深拷贝：\",\"拷贝的是数据本身，创造一个新的对象，并在内存中开辟一个新的内存地址，与原对象是完全独立的，不共享内存，修改新对象时不会影响原对象的值。释放内存时，也没有任何关联。\",\"值拷贝：\",\"接收的是 整个array的值拷贝，所以方法对array中元素的重新赋值不起作用。\",\"package main import \\\"fmt\\\" func modify(a [3]int) { a[0] = 4 fmt.Println(\\\"modify\\\",a) // modify [4 2 3] } func main() { a := [3]int{1, 2, 3} modify(a) fmt.Println(\\\"main\\\",a) // main [1 2 3] } \",\"浅拷贝：\",\"拷贝的是数据地址，只复制指向的对象的指针，新旧对象的内存地址是一样的，修改一个另一个也会变。释放内存时，同时释放。\",\"引用拷贝：\",\"函数的引用拷贝与原始的引用指向同一个数组，所以对数组中元素的修改，是有效的\",\"package main import \\\"fmt\\\" func modify(s []int) { s[0] = 4 fmt.Println(\\\"modify\\\",s) // modify [4 2 3] } func main() { s := []int{1, 2, 3} modify(s) fmt.Println(\\\"main\\\",s) // main [4 2 3] } \"]},\"347\":{\"h\":\"24、 精通Golang项目依赖Go modules\"},\"348\":{\"h\":\"25、Go 多返回值怎么实现的？\",\"t\":[\"答：Go 传参和返回值是通过 FP+offset 实现，并且存储在调用函数的栈帧中。FP 栈底寄存器，指向一个函数栈的顶部;PC 程序计数器，指向下一条执行指令;SB 指向静态数据的基指针，全局符号;SP 栈顶寄存器。\"]},\"349\":{\"h\":\"26、Go 语言中不同的类型如何比较是否相等？\",\"t\":[\"答：像 string，int，float interface 等可以通过 reflect.DeepEqual 和等于号进行比较，像 slice，struct，map 则一般使用 reflect.DeepEqual 来检测是否相等。\"]},\"350\":{\"h\":\"27、Go中init 函数的特征?\",\"t\":[\"答：一个包下可以有多个 init 函数，每个文件也可以有多个 init 函数。多个 init 函数按照它们的文件名顺序逐个初始化。应用初始化时初始化工作的顺序是，从被导入的最深层包开始进行初始化，层层递出最后到 main 包。不管包被导入多少次，包内的 init 函数只会执行一次。应用初始化时初始化工作的顺序是，从被导入的最深层包开始进行初始化，层层递出最后到 main 包。但包级别变量的初始化先于包内 init 函数的执行。\"]},\"351\":{\"h\":\"28、Go中 uintptr和 unsafe.Pointer 的区别？\",\"t\":[\"答：unsafe.Pointer 是通用指针类型，它不能参与计算，任何类型的指针都可以转化成 unsafe.Pointer，unsafe.Pointer 可以转化成任何类型的指针，uintptr 可以转换为 unsafe.Pointer，unsafe.Pointer 可以转换为 uintptr。uintptr 是指针运算的工具，但是它不能持有指针对象（意思就是它跟指针对象不能互相转换），unsafe.Pointer 是指针对象进行运算（也就是 uintptr）的桥梁。\"]},\"352\":{\"h\":\"二、slice\"},\"353\":{\"h\":\"1、数组和切片的区别 （基本必问）\",\"t\":[\"相同点：\",\"1)只能存储一组相同类型的数据结构\",\"2)都是通过下标来访问，并且有容量长度，长度通过 len 获取，容量通过 cap 获取\",\"区别：\",\"1）数组是定长，访问和复制不能超过数组定义的长度，否则就会下标越界，切片长度和容量可以自动扩容\",\"2）数组是值类型，切片是引用类型，每个切片都引用了一个底层数组，切片本身不能存储任何数据，都是这底层数组存储数据，所以修改切片的时候修改的是底层数组中的数据。切片一旦扩容，指向一个新的底层数组，内存地址也就随之改变\",\"简洁的回答：\",\"1）定义方式不一样 2）初始化方式不一样，数组需要指定大小，大小不改变 3）在函数传递中，数组切片都是值传递。\",\"数组的定义\",\"var a1 [3]int\",\"var a2 [...]int\",\"切片的定义\",\"var a1 []int\",\"var a2 :=make([]int,3,5)\",\"数组的初始化\",\"a1 := [...]int\",\"a2 := [5]int\",\"切片的初始化\",\"b:= make([]int,3,5)\"]},\"354\":{\"h\":\"2、 讲讲 Go 的 slice 底层数据结构和一些特性？\",\"t\":[\"答：Go 的 slice 底层数据结构是由一个 array 指针指向底层数组，len 表示切片长度，cap 表示切片容量。slice 的主要实现是扩容。对于 append 向 slice 添加元素时，假如 slice 容量够用，则追加新元素进去，slice.len++，返回原来的 slice。当原容量不够，则 slice 先扩容，扩容之后 slice 得到新的 slice，将元素追加进新的 slice，slice.len++，返回新的 slice。对于切片的扩容规则：当切片比较小时（容量小于 1024），则采用较大的扩容倍速进行扩容（新的扩容会是原来的 2 倍），避免频繁扩容，从而减少内存分配的次数和数据拷贝的代价。当切片较大的时（原来的 slice 的容量大于或者等于 1024），采用较小的扩容倍速（新的扩容将扩大大于或者等于原来 1.25 倍），主要避免空间浪费，网上其实很多总结的是 1.25 倍，那是在不考虑内存对齐的情况下，实际上还要考虑内存对齐，扩容是大于或者等于 1.25 倍。\",\"（关于刚才问的 slice 为什么传到函数内可能被修改，如果 slice 在函数内没有出现扩容，函数外和函数内 slice 变量指向是同一个数组，则函数内复制的 slice 变量值出现更改，函数外这个 slice 变量值也会被修改。如果 slice 在函数内出现扩容，则函数内变量的值会新生成一个数组（也就是新的 slice，而函数外的 slice 指向的还是原来的 slice，则函数内的修改不会影响函数外的 slice。）\"]},\"355\":{\"h\":\"3、golang中数组和slice作为参数的区别？slice作为参数传递有什么问题？\",\"t\":[\"https://blog.csdn.net/weixin_44387482/article/details/119763558\",\"当使用数组作为参数和返回值的时候，传进去的是值，在函数内部对数组进行修改并不会影响原数据\",\"当切片作为参数的时候穿进去的是值，也就是值传递，但是当我在函数里面修改切片的时候，我们发现源数据也会被修改，这是因为我们在切片的底层维护这一个匿名的数组，当我们把切片当成参数的时候，会重现创建一个切片，但是创建的这个切片和我们原来的数据是共享数据源的，所以在函数内被修改，源数据也会被修改\",\"数组还是切片，在函数中传递的时候如果没有指定为指针传递的话，都是值传递，但是切片在传递的过程中，有着共享底层数组的风险，所以如果在函数内部进行了更改的时候，会修改到源数据，所以我们需要根据不同的需求来处理，如果我们不希望源数据被修改话的我们可以使用copy函数复制切片后再传入，如果希望源数据被修改的话我们应该使用指针传递的方式\"]},\"356\":{\"h\":\"4、从数组中取一个相同大小的slice有成本吗？\",\"t\":[\"或者这么问：从切片中取一个相同大小的数组有成本吗？\",\"从数组中截取切片：https://blog.csdn.net/weixin_42117918/article/details/81913036\"]},\"357\":{\"h\":\"三、map相关\"},\"358\":{\"h\":\"1、map 使用注意的点，是否并发安全？\",\"t\":[\"map的类型是map[key]，key类型的ke必须是可比较的，通常情况，会选择内建的基本类型，比如整数、字符串做key的类型。如果要使用struct作为key，要保证struct对象在逻辑上是不可变的。在Go语言中，map[key]函数返回结果可以是一个值，也可以是两个值。map是无序的，如果我们想要保证遍历map时元素有序，可以使用辅助的数据结构，例如orderedmap。\",\"**第一，**一定要先初始化，否则panic\",\"**第二，**map类型是容易发生并发访问问题的。不注意就容易发生程序运行时并发读写导致的panic。 Go语言内建的map对象不是线程安全的，并发读写的时候运行时会有检查，遇到并发问题就会导致panic。\"]},\"359\":{\"h\":\"2、map 循环是有序的还是无序的？\",\"t\":[\"无序的, map 因扩张⽽重新哈希时，各键值项存储位置都可能会发生改变，顺序自然也没法保证了，所以官方避免大家依赖顺序，直接打乱处理。就是 for range map 在开始处理循环逻辑的时候，就做了随机播种\"]},\"360\":{\"h\":\"3、 map 中删除一个 key，它的内存会释放么？（常问）\",\"t\":[\"如果删除的元素是值类型，如int，float，bool，string以及数组和struct，map的内存不会自动释放\",\"如果删除的元素是引用类型，如指针，slice，map，chan等，map的内存会自动释放，但释放的内存是子元素应用类型的内存占用\",\"将map设置为nil后，内存被回收。\",\"这个问题还需要大家去搜索下答案，我记得有不一样的说法，谨慎采用本题答案。\"]},\"361\":{\"h\":\"4、怎么处理对 map 进行并发访问？有没有其他方案？ 区别是什么？\",\"t\":[\"img\",\"方式一、使用内置sync.Map，详细参考\",\"https://mbd.baidu.com/ma/s/7Hwd9yMcmbd.baidu.com/ma/s/7Hwd9yMc\",\"方式二、使用读写锁实现并发安全map\",\"https://mbd.baidu.com/ma/s/qO7b0VQUmbd.baidu.com/ma/s/qO7b0VQU\",\"https://cloud.tencent.com/developer/article/1539049\"]},\"362\":{\"h\":\"5、 nil map 和空 map 有何不同？\",\"t\":[\"1）可以对未初始化的map进行取值，但取出来的东西是空：\",\"var m1 map[string]string fmt.Println(m1[\\\"1\\\"]) \",\"2）不能对未初始化的map进行赋值，这样将会抛出一个异常：\",\"未初始化的map是nil，它与一个空map基本等价，只是nil的map不允许往里面添加值。\",\"var m1 map[string]string m1[\\\"1\\\"] = \\\"1\\\" panic: assignment to entry in nil map 因此，map是nil时，取值是不会报错的（取不到而已），但增加值会报错。 其实，还有一个区别，delete一个nil map会panic， 但是delete 空map是一个空操作（并不会panic） （这个区别在最新的Go tips中已经没有了，即：delete一个nil map也不会panic） \",\"\\\\3) 通过fmt打印map时，空map和nil map结果是一样的，都为map[]。所以，这个时候别断定map是空还是nil，而应该通过map == nil来判断。\",\"nil map 未初始化，空map是长度为空\"]},\"363\":{\"h\":\"6、map 的数据结构是什么？\",\"t\":[\"https://www.topgoer.cn/docs/gozhuanjia/gozhuanjiamap\",\"答：golang 中 map 是一个 kv 对集合。底层使用 hash table，用链表来解决冲突 ，出现冲突时，不是每一个 key 都申请一个结构通过链表串起来，而是以 bmap 为最小粒度挂载，一个 bmap 可以放 8 个 kv。在哈希函数的选择上，会在程序启动时，检测 cpu 是否支持 aes，如果支持，则使用 aes hash，否则使用 memhash。每个 map 的底层结构是 hmap，是有若干个结构为 bmap 的 bucket 组成的数组。每个 bucket 底层都采用链表结构。\"]},\"364\":{\"h\":\"hmap 的结构如下：\",\"t\":[\"type hmap struct { count int // 元素个数 flags uint8 B uint8 // 扩容常量相关字段B是buckets数组的长度的对数 2^B noverflow uint16 // 溢出的bucket个数 hash0 uint32 // hash seed buckets unsafe.Pointer // buckets 数组指针 oldbuckets unsafe.Pointer // 结构扩容的时候用于赋值的buckets数组 nevacuate uintptr // 搬迁进度 extra *mapextra // 用于扩容的指针 } \",\"下图展示一个拥有4个bucket的map：\",\"img\",\"本例中, hmap.B=2， 而hmap.buckets长度是2^B为4. 元素经过哈希运算后会落到某个bucket中进行存储。查找过程类似。\",\"bucket很多时候被翻译为桶，所谓的哈希桶实际上就是bucket。\"]},\"365\":{\"h\":\"bucket数据结构\",\"t\":[\"bucket数据结构由runtime/map.go:bmap定义：\",\"// A bucket for a Go map. type bmap struct { // tophash generally contains the top byte of the hash value // for each key in this bucket. If tophash[0] < minTopHash, // tophash[0] is a bucket evacuation state instead. tophash [bucketCnt]uint8 // Followed by bucketCnt keys and then bucketCnt elems. // NOTE: packing all the keys together and then all the elems together makes the // code a bit more complicated than alternating key/elem/key/elem/... but it allows // us to eliminate padding which would be needed for, e.g., map[int64]int8. // Followed by an overflow pointer. } \",\"这里只有一个 tophash 字段，而实际上在使用中值的类型是不固定的，甚至可以是一个自定义结构体的指针类型。这个结构体看起来可能有点让人费解，其实编译器在编译期间会动态创建一个新的同名数据结构，如下所示\",\"type bmap struct { topbits [8]uint8 keys [8]keytype values [8]valuetype pad uintptr overflow uintptr } \",\"bmap 即 bucket map 的缩写。\",\"每个bucket可以存储8个键值对。\",\"topbits 是个长度为8的数组，哈希值相同的键（准确的说是哈希值低位相同的键）存入当前bucket时会将哈希值的高位存储在该数组中，以方便后续匹配。\",\"keys 长度为8的数组，[]keytype，元素为：具体的key值。\",\"values 长度为8的数组，[]valuetype，元素为：键值对的key对应的值。\",\"pad 对齐内存使用的，不是每个bmap都有会这个字段，需要满足一定条件\",\"overflow 指针指向的是下一个bucket，据此将所有冲突的键连接起来。\",\"下图展示bucket存放8个key-value对：\",\"img\"]},\"366\":{\"h\":\"解决哈希冲突（四种方法）\"},\"367\":{\"h\":\"哈希冲突\",\"t\":[\"当有两个或以上数量的键被哈希到了同一个bucket时，我们称这些键发生了冲突。Go使用链地址法来解决键冲突。 由于每个bucket可以存放8个键值对，所以同一个bucket存放超过8个键值对时就会再创建一个键值对，用类似链表的方式将bucket连接起来。\",\"下图展示产生冲突后的map：\",\"img\",\"bucket数据结构指示下一个bucket的指针称为overflow bucket，意为当前bucket盛不下而溢出的部分。事实上哈希冲突并不是好事情，它降低了存取效率，好的哈希算法可以保证哈希值的随机性，但冲突过多也是要控制的，后面会再详细介绍。\"]},\"368\":{\"h\":\"负载因子\",\"t\":[\"负载因子用于衡量一个哈希表冲突情况，公式为：\",\"负载因子 = 键数量/bucket数量\",\"例如，对于一个bucket数量为4，包含4个键值对的哈希表来说，这个哈希表的负载因子为1.\",\"哈希表需要将负载因子控制在合适的大小，超过其阀值需要进行rehash，也即键值对重新组织：\",\"哈希因子过小，说明空间利用率低\",\"哈希因子过大，说明冲突严重，存取效率低\",\"每个哈希表的实现对负载因子容忍程度不同，比如Redis实现中负载因子大于1时就会触发rehash，而Go则在在负载因子达到6.5时才会触发rehash，因为Redis的每个bucket只能存1个键值对，而Go的bucket可能存8个键值对，所以Go可以容忍更高的负载因子。\"]},\"369\":{\"h\":\"7、是怎么实现扩容？\"},\"370\":{\"h\":\"map 的容量大小\",\"t\":[\"底层调用 makemap 函数，计算得到合适的 B，map 容量最多可容纳 6.52^B 个元素，6.5 为装载因子阈值常量。装载因子的计算公式是：装载因子=填入表中的元素个数/散列表的长度，装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。底层调用 makemap 函数，计算得到合适的 B，map 容量最多可容纳 6.52^B 个元素，6.5 为装载因子阈值常量。装载因子的计算公式是：装载因子=填入表中的元素个数/散列表的长度，装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。\"]},\"371\":{\"h\":\"触发 map 扩容的条件\",\"t\":[\"为了保证访问效率，当新元素将要添加进map时，都会检查是否需要扩容，扩容实际上是以空间换时间的手段。 触发扩容的条件有二个：\",\"负载因子 > 6.5时，也即平均每个bucket存储的键值对达到6.5个。\",\"overflow数量 > 2^15时，也即overflow数量超过32768时。\"]},\"372\":{\"h\":\"增量扩容\",\"t\":[\"当负载因子过大时，就新建一个bucket，新的bucket长度是原来的2倍，然后旧bucket数据搬迁到新的bucket。 考虑到如果map存储了数以亿计的key-value，一次性搬迁将会造成比较大的延时，Go采用逐步搬迁策略，即每次访问map时都会触发一次搬迁，每次搬迁2个键值对。\",\"下图展示了包含一个bucket满载的map(为了描述方便，图中bucket省略了value区域):\",\"img\",\"当前map存储了7个键值对，只有1个bucket。此地负载因子为7。再次插入数据时将会触发扩容操作，扩容之后再将新插入键写入新的bucket。\",\"当第8个键值对插入时，将会触发扩容，扩容后示意图如下：\",\"img\",\"hmap数据结构中oldbuckets成员指身原bucket，而buckets指向了新申请的bucket。新的键值对被插入新的bucket中。 后续对map的访问操作会触发迁移，将oldbuckets中的键值对逐步的搬迁过来。当oldbuckets中的键值对全部搬迁完毕后，删除oldbuckets。\",\"搬迁完成后的示意图如下：\",\"img\",\"数据搬迁过程中原bucket中的键值对将存在于新bucket的前面，新插入的键值对将存在于新bucket的后面。 实际搬迁过程中比较复杂，将在后续源码分析中详细介绍。\"]},\"373\":{\"h\":\"等量扩容\",\"t\":[\"所谓等量扩容，实际上并不是扩大容量，buckets数量不变，重新做一遍类似增量扩容的搬迁动作，把松散的键值对重新排列一次，以使bucket的使用率更高，进而保证更快的存取。 在极端场景下，比如不断地增删，而键值对正好集中在一小部分的bucket，这样会造成overflow的bucket数量增多，但负载因子又不高，从而无法执行增量搬迁的情况，如下图所示：\",\"img\",\"上图可见，overflow的bucket中大部分是空的，访问效率会很差。此时进行一次等量扩容，即buckets数量不变，经过重新组织后overflow的bucket数量会减少，即节省了空间又会提高访问效率。\"]},\"374\":{\"h\":\"8、查找过程\",\"t\":[\"查找过程如下：\",\"根据key值算出哈希值\",\"取哈希值低位与hmap.B取模确定bucket位置\",\"取哈希值高位在tophash数组中查询\",\"如果tophash[i]中存储值也哈希值相等，则去找到该bucket中的key值进行比较\",\"当前bucket没有找到，则继续从下个overflow的bucket中查找。\",\"如果当前处于搬迁过程，则优先从oldbuckets查找\",\"注：如果查找不到，也不会返回空值，而是返回相应类型的0值。\"]},\"375\":{\"h\":\"9、插入过程\",\"t\":[\"新元素插入过程如下：\",\"根据key值算出哈希值\",\"取哈希值低位与hmap.B取模确定bucket位置\",\"查找该key是否已经存在，如果存在则直接更新值\",\"如果没找到将key，将key插入\"]},\"376\":{\"h\":\"10、slices能作为map类型的key吗？\",\"t\":[\"当时被问的一脸懵逼，其实是这个问题的变种：golang 哪些类型可以作为map key？\",\"答案是：**在golang规范中，可比较的类型都可以作为map key；**这个问题又延伸到在：golang规范中，哪些数据类型可以比较？\",\"不能作为map key 的类型包括：\",\"slices\",\"maps\",\"functions\",\"详细参考：\",\"golang 哪些类型可以作为map keyblog.csdn.net/lanyang123456/article/details/123765745\"]},\"377\":{\"h\":\"四、接口\"},\"378\":{\"h\":\"1、 Go 语言与鸭子类型的关系\",\"t\":[\"总结一下，鸭子类型是一种动态语言的风格，在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由它\\\"当前方法和属性的集合\\\"决定。Go 作为一种静态语言，通过接口实现了 鸭子类型，实际上是 Go 的编译器在其中作了隐匿的转换工作。\"]},\"379\":{\"h\":\"2、 值接收者和指针接收者的区别\"},\"380\":{\"h\":\"方法\",\"t\":[\"方法能给用户自定义的类型添加新的行为。它和函数的区别在于方法有一个接收者，给一个函数添加一个接收者，那么它就变成了方法。接收者可以是值接收者，也可以是指针接收者。\",\"在调用方法的时候，值类型既可以调用值接收者的方法，也可以调用指针接收者的方法；指针类型既可以调用指针接收者的方法，也可以调用值接收者的方法。\",\"也就是说，不管方法的接收者是什么类型，该类型的值和指针都可以调用，不必严格符合接收者的类型。\",\"实际上，当类型和方法的接收者类型不同时，其实是编译器在背后做了一些工作，用一个表格来呈现：\",\"-\",\"值接收者\",\"指针接收者\",\"值类型调用者\",\"方法会使用调用者的一个副本，类似于“传值”\",\"使用值的引用来调用方法，上例中，qcrao.growUp() 实际上是 (&qcrao).growUp()\",\"指针类型调用者\",\"指针被解引用为值，上例中，stefno.howOld() 实际上是 (*stefno).howOld()\",\"实际上也是“传值”，方法里的操作会影响到调用者，类似于指针传参，拷贝了一份指针\"]},\"381\":{\"h\":\"值接收者和指针接收者\",\"t\":[\"前面说过，不管接收者类型是值类型还是指针类型，都可以通过值类型或指针类型调用，这里面实际上通过语法糖起作用的。\",\"先说结论：实现了接收者是值类型的方法，相当于自动实现了接收者是指针类型的方法；而实现了接收者是指针类型的方法，不会自动生成对应接收者是值类型的方法。\",\"所以，当实现了一个接收者是值类型的方法，就可以自动生成一个接收者是对应指针类型的方法，因为两者都不会影响接收者。但是，当实现了一个接收者是指针类型的方法，如果此时自动生成一个接收者是值类型的方法，原本期望对接收者的改变（通过指针实现），现在无法实现，因为值类型会产生一个拷贝，不会真正影响调用者。\",\"最后，只要记住下面这点就可以了：\",\"如果实现了接收者是值类型的方法，会隐含地也实现了接收者是指针类型的方法。\"]},\"382\":{\"h\":\"两者分别在何时使用\",\"t\":[\"如果方法的接收者是值类型，无论调用者是对象还是对象指针，修改的都是对象的副本，不影响调用者；如果方法的接收者是指针类型，则调用者修改的是指针指向的对象本身。\",\"使用指针作为方法的接收者的理由：\",\"方法能够修改接收者指向的值。\",\"避免在每次调用方法时复制该值，在值的类型为大型结构体时，这样做会更加高效。\",\"是使用值接收者还是指针接收者，不是由该方法是否修改了调用者（也就是接收者）来决定，而是应该基于该类型的本质。\",\"如果类型具备“原始的本质”，也就是说它的成员都是由 Go 语言里内置的原始类型，如字符串，整型值等，那就定义值接收者类型的方法。像内置的引用类型，如 slice，map，interface，channel，这些类型比较特殊，声明他们的时候，实际上是创建了一个 header， 对于他们也是直接定义值接收者类型的方法。这样，调用函数时，是直接 copy 了这些类型的 header，而 header 本身就是为复制设计的。\",\"如果类型具备非原始的本质，不能被安全地复制，这种类型总是应该被共享，那就定义指针接收者的方法。比如 go 源码里的文件结构体（struct File）就不应该被复制，应该只有一份实体。\"]},\"383\":{\"h\":\"3、 iface 和 eface 的区别是什么\",\"t\":[\"iface 和 eface 都是 Go 中描述接口的底层结构体，区别在于 iface 描述的接口包含方法，而 eface 则是不包含任何方法的空接口：interface{}。\",\"从源码层面看一下：\",\"type iface struct { tab *itab data unsafe.Pointer } type itab struct { inter *interfacetype _type *_type link *itab hash uint32 // copy of _type.hash. Used for type switches. bad bool // type does not implement interface inhash bool // has this itab been added to hash? unused [2]byte fun [1]uintptr // variable sized } \",\"iface 内部维护两个指针，tab 指向一个 itab 实体， 它表示接口的类型以及赋给这个接口的实体类型。data 则指向接口具体的值，一般而言是一个指向堆内存的指针。\",\"再来仔细看一下 itab 结构体：_type 字段描述了实体的类型，包括内存对齐方式，大小等；inter 字段则描述了接口的类型。fun 字段放置和接口方法对应的具体数据类型的方法地址，实现接口调用方法的动态分派，一般在每次给接口赋值发生转换时会更新此表，或者直接拿缓存的 itab。\",\"这里只会列出实体类型和接口相关的方法，实体类型的其他方法并不会出现在这里。\",\"另外，你可能会觉得奇怪，为什么 fun 数组的大小为 1，要是接口定义了多个方法可怎么办？实际上，这里存储的是第一个方法的函数指针，如果有更多的方法，在它之后的内存空间里继续存储。从汇编角度来看，通过增加地址就能获取到这些函数指针，没什么影响。顺便提一句，这些方法是按照函数名称的字典序进行排列的。\",\"再看一下 interfacetype 类型，它描述的是接口的类型：\",\"type interfacetype struct { typ _type pkgpath name mhdr []imethod } \",\"可以看到，它包装了 _type 类型，_type 实际上是描述 Go 语言中各种数据类型的结构体。我们注意到，这里还包含一个 mhdr 字段，表示接口所定义的函数列表， pkgpath 记录定义了接口的包名。\",\"这里通过一张图来看下 iface 结构体的全貌：\",\"img\",\"接着来看一下 eface 的源码：\",\"type eface struct { _type *_type data unsafe.Pointer } \",\"相比 iface，eface 就比较简单了。只维护了一个 _type 字段，表示空接口所承载的具体的实体类型。data 描述了具体的值。\",\"img\"]},\"384\":{\"h\":\"4、 接口的动态类型和动态值\",\"t\":[\"从源码里可以看到：iface包含两个字段：tab 是接口表指针，指向类型信息；data 是数据指针，则指向具体的数据。它们分别被称为动态类型和动态值。而接口值包括动态类型和动态值。\",\"【引申1】接口类型和 nil 作比较\",\"接口值的零值是指动态类型和动态值都为 nil。当仅且当这两部分的值都为 nil 的情况下，这个接口值就才会被认为 接口值 == nil。\"]},\"385\":{\"h\":\"5、 编译器自动检测类型是否实现接口\"},\"386\":{\"h\":\"6、 接口的构造过程是怎样的\"},\"387\":{\"h\":\"7、 类型转换和断言的区别\",\"t\":[\"我们知道，Go 语言中不允许隐式类型转换，也就是说 = 两边，不允许出现类型不相同的变量。\",\"类型转换、类型断言本质都是把一个类型转换成另外一个类型。不同之处在于，类型断言是对接口变量进行的操作。\"]},\"388\":{\"h\":\"类型转换\",\"t\":[\"对于类型转换而言，转换前后的两个类型要相互兼容才行。类型转换的语法为：\",\"<结果类型> := <目标类型> ( <表达式> )\",\"func main() { var i int = 9 var f float64 f = float64(i) fmt.Printf(\\\"%T, %v\\\\n\\\", f, f) f = 10.8 a := int(f) fmt.Printf(\\\"%T, %v\\\\n\\\", a, a) } \"]},\"389\":{\"h\":\"断言\",\"t\":[\"前面说过，因为空接口 interface{} 没有定义任何函数，因此 Go 中所有类型都实现了空接口。当一个函数的形参是 interface{}，那么在函数中，需要对形参进行断言，从而得到它的真实类型。\",\"断言的语法为：\",\"<目标类型的值>，<布尔参数> := <表达式>.( 目标类型 ) // 安全类型断言\",\"<目标类型的值> := <表达式>.( 目标类型 ) //非安全类型断言\",\"类型转换和类型断言有些相似，不同之处，在于类型断言是对接口进行的操作。\",\"type Student struct { Name string Age int } func main() { var i interface{} = new(Student) s, ok := i.(Student) if ok { fmt.Println(s) } } \",\"断言其实还有另一种形式，就是用在利用 switch 语句判断接口的类型。每一个 case 会被顺序地考虑。当命中一个 case 时，就会执行 case 中的语句，因此 case 语句的顺序是很重要的，因为很有可能会有多个 case 匹配的情况。\"]},\"390\":{\"h\":\"8、 接口转换的原理\",\"t\":[\"通过前面提到的 iface 的源码可以看到，实际上它包含接口的类型 interfacetype 和 实体类型的类型 _type，这两者都是 iface 的字段 itab 的成员。也就是说生成一个 itab 同时需要接口的类型和实体的类型。\",\"<接口(interface)类型， 实体类型>\",\"当判定一种类型是否满足某个接口时，Go 使用类型的方法集和接口所需要的方法集进行匹配，如果类型的方法集完全包含接口的方法集，则可认为该类型实现了该接口。\",\"例如某类型有 m 个方法，某接口有 n 个方法，则很容易知道这种判定的时间复杂度为 O(mn)，Go 会对方法集的函数按照函数名的字典序进行排序，所以实际的时间复杂度为 O(m+n)。\",\"这里我们来探索将一个接口转换给另外一个接口背后的原理，当然，能转换的原因必然是类型兼容。\",\"具体类型转空接口时，_type 字段直接复制源类型的 _type；调用 mallocgc 获得一块新内存，把值复制进去，data 再指向这块新内存。\",\"具体类型转非空接口时，入参 tab 是编译器在编译阶段预先生成好的，新接口 tab 字段直接指向入参 tab 指向的 itab；调用 mallocgc 获得一块新内存，把值复制进去，data 再指向这块新内存。\",\"而对于接口转接口，itab 调用 getitab 函数获取。只用生成一次，之后直接从 hash 表中获取。\"]},\"391\":{\"h\":\"9、 如何用 interface 实现多态\",\"t\":[\"Go 语言并没有设计诸如虚函数、纯虚函数、继承、多重继承等概念，但它通过接口却非常优雅地支持了面向对象的特性。\",\"多态是一种运行期的行为，它有以下几个特点：\",\"一种类型具有多种类型的能力\",\"允许不同的对象对同一消息做出灵活的反应\",\"以一种通用的方式对待个使用的对象\",\"非动态语言必须通过继承和接口的方式来实现\",\"main 函数里先生成 Student 和 Programmer 的对象，再将它们分别传入到函数 whatJob 和 growUp。函数中，直接调用接口函数，实际执行的时候是看最终传入的实体类型是什么，调用的是实体类型实现的函数。于是，不同对象针对同一消息就有多种表现，多态就实现了。\"]},\"392\":{\"h\":\"10、 Go 接口与 C++ 接口有何异同\",\"t\":[\"接口定义了一种规范，描述了类的行为和功能，而不做具体实现。\",\"C++ 的接口是使用抽象类来实现的，如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。纯虚函数是通过在声明中使用 “= 0” 来指定的。例如：\",\"class Shape { public: // 纯虚函数 virtual double getArea() = 0; private: string name; // 名称 }; \",\"设计抽象类的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。\",\"派生类需要明确地声明它继承自基类，并且需要实现基类中所有的纯虚函数。\",\"C++ 定义接口的方式称为“侵入式”，而 Go 采用的是 “非侵入式”，不需要显式声明，只需要实现接口定义的函数，编译器自动会识别。\",\"C++ 和 Go 在定义接口方式上的不同，也导致了底层实现上的不同。C++ 通过虚函数表来实现基类调用派生类的函数；而 Go 通过 itab 中的 fun 字段来实现接口变量调用实体类型的函数。C++ 中的虚函数表是在编译期生成的；而 Go 的 itab 中的 fun 字段是在运行期间动态生成的。原因在于，Go 中实体类型可能会无意中实现 N 多接口，很多接口并不是本来需要的，所以不能为类型实现的所有接口都生成一个 itab， 这也是“非侵入式”带来的影响；这在 C++ 中是不存在的，因为派生需要显示声明它继承自哪个基类。\"]},\"393\":{\"h\":\"五**、context相关**\",\"t\":[\"https://www.topgoer.cn/docs/gozhuanjia/chapter055.3-context\"]},\"394\":{\"h\":\"1、context 结构是什么样的？context 使用场景和用途？\",\"t\":[\"（难，也常常问你项目中怎么用，光靠记答案很难让面试官满意，反正有各种结合实际的问题）\",\"参考链接：\",\"go context详解 - 卷毛狒狒 - 博客园www.cnblogs.com/juanmaofeifei/p/14439957.html\",\"答：Go 的 Context 的数据结构包含 Deadline，Done，Err，Value，Deadline 方法返回一个 time.Time，表示当前 Context 应该结束的时间，ok 则表示有结束时间，Done 方法当 Context 被取消或者超时时候返回的一个 close 的 channel，告诉给 context 相关的函数要停止当前工作然后返回了，Err 表示 context 被取消的原因，Value 方法表示 context 实现共享数据存储的地方，是协程安全的。context 在业务中是经常被使用的，\",\"其主要的应用 ：\",\"1：上下文控制，2：多个 goroutine 之间的数据交互等，3：超时控制：到某个时间点超时，过多久超时。\"]},\"395\":{\"h\":\"六、channel相关\"},\"396\":{\"h\":\"1、channel 是否线程安全？锁用在什么地方？\",\"t\":[\"Golang的Channel,发送一个数据到Channel 和 从Channel接收一个数据 都是 原子性的。\",\"而且Go的设计思想就是:不要通过共享内存来通信，而是通过通信来共享内存，前者就是传统的加锁，后者就是Channel。\",\"也就是说，设计Channel的主要目的就是在多任务间传递数据的，这当然是安全的\"]},\"397\":{\"h\":\"2、go channel 的底层实现原理 （数据结构）\",\"t\":[\"https://juejin.cn/post/7037656471210819614\",\"https://www.topgoer.cn/docs/gozhuanjia/gochan4\"]},\"398\":{\"h\":\"数据结构\",\"t\":[\"type hchan struct { //channel分为无缓冲和有缓冲两种。 //对于有缓冲的channel存储数据，借助的是如下循环数组的结构 qcount uint // 循环数组中的元素数量 dataqsiz uint // 循环数组的长度 buf unsafe.Pointer // 指向底层循环数组的指针 elemsize uint16 //能够收发元素的大小 closed uint32 //channel是否关闭的标志 elemtype *_type //channel中的元素类型 //有缓冲channel内的缓冲数组会被作为一个“环型”来使用。 //当下标超过数组容量后会回到第一个位置，所以需要有两个字段记录当前读和写的下标位置 sendx uint // 下一次发送数据的下标位置 recvx uint // 下一次读取数据的下标位置 //当循环数组中没有数据时，收到了接收请求，那么接收数据的变量地址将会写入读等待队列 //当循环数组中数据已满时，收到了发送请求，那么发送数据的变量地址将写入写等待队列 recvq waitq // 读等待队列 sendq waitq // 写等待队列 lock mutex //互斥锁，保证读写channel时不存在并发竞争问题 } \",\"img\",\"总结hchan结构体的主要组成部分有四个：\",\"用来保存goroutine之间传递数据的循环链表。=====> buf。\",\"用来记录此循环链表当前发送或接收数据的下标值。=====> sendx和recvx。\",\"用于保存向该chan发送和从改chan接收数据的goroutine的队列。=====> sendq 和 recvq\",\"保证channel写入和读取数据时线程安全的锁。 =====> lock\"]},\"399\":{\"h\":\"3、nil、关闭的 channel、有数据的 channel，再进行读、写、关闭会怎么样？（各类变种题型，重要）\"},\"400\":{\"h\":\"Channel读写特性(15字口诀)\",\"t\":[\"首先，我们先复习一下Channel都有哪些特性？\",\"给一个 nil channel 发送数据，造成永远阻塞\",\"从一个 nil channel 接收数据，造成永远阻塞\",\"给一个已经关闭的 channel 发送数据，引起 panic\",\"从一个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回一个零值\",\"无缓冲的channel是同步的，而有缓冲的channel是非同步的\",\"以上5个特性是死东西，也可以通过口诀来记忆：“空读写阻塞，写关闭异常，读关闭空零”。\"]},\"401\":{\"h\":\"4、向 channel 发送数据和从 channel 读数据的流程是什么样的？\"},\"402\":{\"h\":\"发送流程：\",\"t\":[\"向一个channel中写数据简单过程如下：\",\"如果等待接收队列recvq不为空，说明缓冲区中没有数据或者没有缓冲区，此时直接从recvq取出G,并把数据写入，最后把该G唤醒，结束发送过程；\",\"如果缓冲区中有空余位置，将数据写入缓冲区，结束发送过程；\",\"如果缓冲区中没有空余位置，将待发送数据写入G，将当前G加入sendq，进入睡眠，等待被读goroutine唤醒；\",\"简单流程图如下：\",\"img\"]},\"403\":{\"h\":\"接收流程：\",\"t\":[\"从一个channel读数据简单过程如下：\",\"如果等待发送队列sendq不为空，且没有缓冲区，直接从sendq中取出G，把G中数据读出，最后把G唤醒，结束读取过程；\",\"如果等待发送队列sendq不为空，此时说明缓冲区已满，从缓冲区中首部读出数据，把G中数据写入缓冲区尾部，把G唤醒，结束读取过程；\",\"如果缓冲区中有数据，则从缓冲区取出数据，结束读取过程；\",\"将当前goroutine加入recvq，进入睡眠，等待被写goroutine唤醒；\",\"简单流程图如下：\",\"img\"]},\"404\":{\"h\":\"关闭channel\",\"t\":[\"关闭channel时会把recvq中的G全部唤醒，本该写入G的数据位置为nil。把sendq中的G全部唤醒，但这些G会panic。\",\"除此之外，panic出现的常见场景还有：\",\"关闭值为nil的channel\",\"关闭已经被关闭的channel\",\"向已经关闭的channel写数据\"]},\"405\":{\"h\":\"5、讲讲 Go 的 chan 底层数据结构和主要使用场景\",\"t\":[\"答：channel 的数据结构包含 qccount 当前队列中剩余元素个数，dataqsiz 环形队列长度，即可以存放的元素个数，buf 环形队列指针，elemsize 每个元素的大小，closed 标识关闭状态，elemtype 元素类型，sendx 队列下表，指示元素写入时存放到队列中的位置，recv 队列下表，指示元素从队列的该位置读出。recvq 等待读消息的 goroutine 队列，sendq 等待写消息的 goroutine 队列，lock 互斥锁，chan 不允许并发读写。\",\"无缓冲和有缓冲区别： 管道没有缓冲区，从管道读数据会阻塞，直到有协程向管道中写入数据。同样，向管道写入数据也会阻塞，直到有协程从管道读取数据。管道有缓冲区但缓冲区没有数据，从管道读取数据也会阻塞，直到协程写入数据，如果管道满了，写数据也会阻塞，直到协程从缓冲区读取数据。\",\"channel 的一些特点 1）、读写值 nil 管道会永久阻塞 2）、关闭的管道读数据仍然可以读数据 3）、往关闭的管道写数据会 panic 4）、关闭为 nil 的管道 panic 5）、关闭已经关闭的管道 panic\",\"向 channel 写数据的流程： 如果等待接收队列 recvq 不为空，说明缓冲区中没有数据或者没有缓冲区，此时直接从 recvq 取出 G,并把数据写入，最后把该 G 唤醒，结束发送过程； 如果缓冲区中有空余位置，将数据写入缓冲区，结束发送过程； 如果缓冲区中没有空余位置，将待发送数据写入 G，将当前 G 加入 sendq，进入睡眠，等待被读 goroutine 唤醒；\",\"向 channel 读数据的流程： 如果等待发送队列 sendq 不为空，且没有缓冲区，直接从 sendq 中取出 G，把 G 中数据读出，最后把 G 唤醒，结束读取过程； 如果等待发送队列 sendq 不为空，此时说明缓冲区已满，从缓冲区中首部读出数据，把 G 中数据写入缓冲区尾部，把 G 唤醒，结束读取过程； 如果缓冲区中有数据，则从缓冲区取出数据，结束读取过程；将当前 goroutine 加入 recvq，进入睡眠，等待被写 goroutine 唤醒；\",\"使用场景： 消息传递、消息过滤，信号广播，事件订阅与广播，请求、响应转发，任务分发，结果汇总，并发控制，限流，同步与异步\"]},\"406\":{\"h\":\"6、有缓存channel和无缓存channel\",\"t\":[\"https://zhuanlan.zhihu.com/p/355487940\",\"无缓存channel适用于数据要求同步的场景，而有缓存channel适用于无数据同步的场景。可以根据实现项目需求选择。\"]},\"407\":{\"h\":\"七、GMP相关\",\"t\":[\"https://www.topgoer.cn/docs/golangxiuyang/golangxiuyang-1cmeduvk27bo0\",\"https://www.mubucm.com/doc/7pukUL_nuCI-刘超\"]},\"408\":{\"h\":\"0、进程、线程、协程有什么区别？（必问）\",\"t\":[\"进程：是应用程序的启动实例，每个进程都有独立的内存空间，不同的进程通过进程间的通信方式来通信。\",\"线程：从属于进程，每个进程至少包含一个线程，线程是 CPU 调度的基本单位，多个线程之间可以共享进程的资源并通过共享内存等线程间的通信方式来通信。\",\"协程：为轻量级线程，与线程相比，协程不受操作系统的调度，协程的调度器由用户应用程序提供，协程调度器按照调度策略把协程调度到线程中运行\"]},\"409\":{\"h\":\"1、什么是 GMP？（必问）\",\"t\":[\"答：G 代表着 goroutine，P 代表着上下文处理器，M 代表 thread 线程，\",\"在 GPM 模型，有一个全局队列（Global Queue）：存放等待运行的 G，还有一个 P 的本地队列：也是存放等待运行的 G，但数量有限，不超过 256 个。\",\"GPM 的调度流程从 go func()开始创建一个 goroutine，新建的 goroutine 优先保存在 P 的本地队列中，如果 P 的本地队列已经满了，则会保存到全局队列中。\",\"M 会从 P 的队列中取一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会从其他的 MP 组合偷取一个可执行的 G 来执行，\",\"当 M 执行某一个 G 时候发生系统调用或者阻塞，M 阻塞，\",\"如果这个时候 G 在执行，runtime 会把这个线程 M 从 P 中摘除，然后创建一个新的操作系统线程来服务于这个 P，当 M 系统调用结束时，这个 G 会尝试获取一个空闲的 P 来执行，并放入到这个 P 的本地队列，如果这个线程 M 变成休眠状态，加入到空闲线程中，然后整个 G 就会被放入到全局队列中。\",\"G,P,M 的个数问题：\",\"G 的个数理论上是无限制的，但是受内存限制，\",\"P 的数量一般建议是逻辑 CPU 数量的 2 倍，\",\"由启动时环境变量GOMAXPROCS或者是由runtime的方法GOMAXPROCS()决定。这意味着在程序执行的任意时刻都只有$GOMAXPROCS个goroutine在同时运行。\",\"M 的数量\",\"go语言本身的限制：go程序启动时，会设置M的最大数量，默认10000.但是内核很难支持这么多的线程数，所以这个限制可以忽略。\",\"runtime/debug中的SetMaxThreads函数，设置M的最大数量\",\"一个M阻塞了，会创建新的M。\",\"M与P的数量没有绝对关系，一个M阻塞，P就会去创建或者切换另一个M，所以，即使P的默认数量是1，也有可能会创建很多个M出来。\",\"work stealing（工作量窃取） 机制：会优先从全局队列里进行窃取，之后会从其它的P队列里窃取一半的G，放入到本地P队列里。hand off （移交）机制：当前线程的G进行阻塞调用时，例如睡眠，则当前线程就会释放P，然后把P转交给其它空闲的线程执行，如果没有闲置的线程，则创建新的线程\"]},\"410\":{\"h\":\"2、 为什么要有 P？\",\"t\":[\"带来什么改变\",\"加了 P 之后会带来什么改变呢？我们再更显式的讲一下。\",\"每个 P 有自己的本地队列，大幅度的减轻了对全局队列的直接依赖，所带来的效果就是锁竞争的减少。而 GM 模型的性能开销大头就是锁竞争。\",\"每个 P 相对的平衡上，在 GMP 模型中也实现了 Work Stealing （工作量窃取机制）算法，如果 P 的本地队列为空，则会从全局队列或其他 P 的本地队列中窃取可运行的 G 来运行，减少空转，提高了资源利用率。\",\"为什么要有 P\",\"这时候就有小伙伴会疑惑了，如果是想实现本地队列、Work Stealing 算法，那为什么不直接在 M 上加呢，M 也照样可以实现类似的组件。为什么又再加多一个 P 组件？\",\"结合 M（系统线程） 的定位来看，若这么做，有以下问题：\",\"一般来讲，M 的数量都会多于 P。像在 Go 中，M 的数量默认是 10000，P 的默认数量的 CPU 核数。另外由于 M 的属性，也就是如果存在系统阻塞调用，阻塞了 M，又不够用的情况下，M 会不断增加。\",\"M 不断增加的话，如果本地队列挂载在 M 上，那就意味着本地队列也会随之增加。这显然是不合理的，因为本地队列的管理会变得复杂，且 Work Stealing 性能会大幅度下降。\",\"M 被系统调用阻塞后，我们是期望把他既有未执行的任务分配给其他继续运行的，而不是一阻塞就导致全部停止。\",\"因此使用 M 是不合理的，那么引入新的组件 P，把本地队列关联到 P 上，就能很好的解决这个问题。\"]},\"411\":{\"h\":\"3、调度器的设计策略\",\"t\":[\"复用线程：避免频繁的创建、销毁线程，而是对线程的复用。\",\"1）work stealing（工作量窃取）机制\",\"当本线程无可运行的G时，尝试从其他线程绑定的P偷取G，而不是销毁线程。\",\"2）hand off（移交）机制\",\"当本线程因为G进行系统调用阻塞时，线程释放绑定的P，把P转移给其他空闲的线程执行。\",\"利用并行：GOMAXPROCS设置P的数量，最多有GOMAXPROCS个线程分布在多个CPU上同时运行。GOMAXPROCS也限制了并发的程度，比如GOMAXPROCS = 核数/2，则最多利用了一半的CPU核进行并行。\",\"抢占：在coroutine中要等待一个协程主动让出CPU才执行下一个协程，在Go中，一个goroutine最多占用CPU 10ms，防止其他goroutine被饿死，这就是goroutine不同于coroutine的一个地方。\",\"全局G队列：在新的调度器中依然有全局G队列，但功能已经被弱化了，当M执行work stealing从其他P偷不到G时，它可以从全局G队列获取G。\"]},\"412\":{\"h\":\"3、抢占式调度是如何抢占的？\",\"t\":[\"基于协作式抢占\",\"基于信号量抢占\",\"就像操作系统要负责线程的调度一样，Go的runtime要负责goroutine的调度。现代操作系统调度线程都是抢占式的，我们不能依赖用户代码主动让出CPU，或者因为IO、锁等待而让出，这样会造成调度的不公平。基于经典的时间片算法，当线程的时间片用完之后，会被时钟中断给打断，调度器会将当前线程的执行上下文进行保存，然后恢复下一个线程的上下文，分配新的时间片令其开始执行。这种抢占对于线程本身是无感知的，系统底层支持，不需要开发人员特殊处理。\",\"基于时间片的抢占式调度有个明显的优点，能够避免CPU资源持续被少数线程占用，从而使其他线程长时间处于饥饿状态。goroutine的调度器也用到了时间片算法，但是和操作系统的线程调度还是有些区别的，因为整个Go程序都是运行在用户态的，所以不能像操作系统那样利用时钟中断来打断运行中的goroutine。也得益于完全在用户态实现，goroutine的调度切换更加轻量。\",\"上面这两段文字只是对调度的一个概括，具体的协作式调度、信号量调度大家还需要去详细了解，这偏底层了，大厂或者中高级开发会问。（字节就问了）\"]},\"413\":{\"h\":\"4、调度器的生命周期\",\"t\":[\"img\",\"特殊的M0和G0\"]},\"414\":{\"h\":\"M0\",\"t\":[\"M0是启动程序后的编号为0的主线程，这个M对应的实例会在全局变量runtime.m0中，不需要在heap上分配，M0负责执行初始化操作和启动第一个G， 在之后M0就和其他的M一样了。\"]},\"415\":{\"h\":\"G0\",\"t\":[\"G0是每次启动一个M都会第一个创建的gourtine，G0仅用于负责调度的G，G0不指向任何可执行的函数, 每个M都会有一个自己的G0。在调度或系统调用时会使用G0的栈空间, 全局变量的G0是M0的G0。\",\"我们来跟踪一段代码\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello world\\\") } \",\"接下来我们来针对上面的代码对调度器里面的结构做一个分析。\",\"也会经历如上图所示的过程：\",\"runtime创建最初的线程m0和goroutine g0，并把2者关联。\",\"调度器初始化：初始化m0、栈、垃圾回收，以及创建和初始化由GOMAXPROCS个P构成的P列表。\",\"示例代码中的main函数是main.main，runtime中也有1个main函数——runtime.main，代码经过编译后，runtime.main会调用main.main，程序启动时会为runtime.main创建goroutine，称它为main goroutine吧，然后把main goroutine加入到P的本地队列。\",\"启动m0，m0已经绑定了P，会从P的本地队列获取G，获取到main goroutine。\",\"G拥有栈，M根据G中的栈信息和调度信息设置运行环境\",\"M运行G\",\"G退出，再次回到M获取可运行的G，这样重复下去，直到main.main退出，runtime.main执行Defer和Panic处理，或调用runtime.exit退出程序。\",\"调度器的生命周期几乎占满了一个Go程序的一生，runtime.main的goroutine执行之前都是为调度器做准备工作，runtime.main的goroutine运行，才是调度器的真正开始，直到runtime.main结束而结束。\"]},\"416\":{\"h\":\"八、锁相关\",\"t\":[\"https://www.topgoer.cn/docs/gozhuanjia/gozhuanjiamutex\",\"https://www.topgoer.cn/docs/gozhuanjia/gozhuanjiarwmutex\"]},\"417\":{\"h\":\"1、除了 mutex 以外还有那些方式安全读写共享变量？\",\"t\":[\"* 将共享变量的读写放到一个 goroutine 中，其它 goroutine 通过 channel 进行读写操作。\",\"* 可以用个数为 1 的信号量（semaphore）实现互斥\",\"* 通过 Mutex 锁实现\"]},\"418\":{\"h\":\"2、Go 如何实现原子操作？\",\"t\":[\"答：原子操作就是不可中断的操作，外界是看不到原子操作的中间状态，要么看到原子操作已经完成，要么看到原子操作已经结束。在某个值的原子操作执行的过程中，CPU 绝对不会再去执行其他针对该值的操作，那么其他操作也是原子操作。\",\"Go 语言的标准库代码包 sync/atomic 提供了原子的读取（Load 为前缀的函数）或写入（Store 为前缀的函数）某个值（这里细节还要多去查查资料）。\",\"原子操作与互斥锁的区别\",\"1）、互斥锁是一种数据结构，用来让一个线程执行程序的关键部分，完成互斥的多个操作。\",\"2）、原子操作是针对某个值的单个互斥操作。\"]},\"419\":{\"h\":\"3、Mutex 是悲观锁还是乐观锁？悲观锁、乐观锁是什么？\",\"t\":[\"悲观锁\",\"悲观锁：当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制【Pessimistic Concurrency Control，缩写“PCC”，又名“悲观锁”】。\",\"乐观锁\",\"乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量\"]},\"420\":{\"h\":\"4、Mutex 有几种模式？\",\"t\":[\"1）正常模式\",\"当前的mutex只有一个goruntine来获取，那么没有竞争，直接返回。\",\"新的goruntine进来，如果当前mutex已经被获取了，则该goruntine进入一个先入先出的waiter队列，在mutex被释放后，waiter按照先进先出的方式获取锁。该goruntine会处于自旋状态(不挂起，继续占有cpu)。\",\"新的goruntine进来，mutex处于空闲状态，将参与竞争。新来的 goroutine 有先天的优势，它们正在 CPU 中运行，可能它们的数量还不少，所以，在高并发情况下，被唤醒的 waiter 可能比较悲剧地获取不到锁，这时，它会被插入到队列的前面。如果 waiter 获取不到锁的时间超过阈值 1 毫秒，那么，这个 Mutex 就进入到了饥饿模式。\",\"2）饥饿模式\",\"在饥饿模式下，Mutex 的拥有者将直接把锁交给队列最前面的 waiter。新来的 goroutine 不会尝试获取锁，即使看起来锁没有被持有，它也不会去抢，也不会 spin（自旋），它会乖乖地加入到等待队列的尾部。 如果拥有 Mutex 的 waiter 发现下面两种情况的其中之一，它就会把这个 Mutex 转换成正常模式:\",\"此 waiter 已经是队列中的最后一个 waiter 了，没有其它的等待锁的 goroutine 了；\",\"此 waiter 的等待时间小于 1 毫秒。\"]},\"421\":{\"h\":\"5、goroutine 的自旋占用资源如何解决\",\"t\":[\"自旋锁是指当一个线程在获取锁的时候，如果锁已经被其他线程获取，那么该线程将循环等待，然后不断地判断是否能够被成功获取，直到获取到锁才会退出循环。\",\"自旋的条件如下：\",\"1）还没自旋超过 4 次,\",\"2）多核处理器，\",\"3）GOMAXPROCS > 1，\",\"4）p 上本地 goroutine 队列为空。\",\"mutex 会让当前的 goroutine 去空转 CPU，在空转完后再次调用 CAS 方法去尝试性的占有锁资源，直到不满足自旋条件，则最终会加入到等待队列里。\"]},\"422\":{\"h\":\"九、并发相关\"},\"423\":{\"h\":\"0、讲讲 Go 中主协程如何等待其余协程退出?\",\"t\":[\"答：Go 的 sync.WaitGroup 是等待一组协程结束，sync.WaitGroup 只有 3 个方法，Add()是添加计数，Done()减去一个计数，Wait()阻塞直到所有的任务完成。Go 里面还能通过有缓冲的 channel 实现其阻塞等待一组协程结束，这个不能保证一组 goroutine 按照顺序执行，可以并发执行协程。Go 里面能通过无缓冲的 channel 实现其阻塞等待一组协程结束，这个能保证一组 goroutine 按照顺序执行，但是不能并发执行。\",\"**啰嗦一句：**循环智能二面，手写代码部分时，三个协程按交替顺序打印数字，最后题目做出来了，问我代码中Add()是什么意思，我回答的不是很清晰，这家公司就没有然后了。Add()表示协程计数，可以一次Add多个，如Add(3),可以多次Add(1);然后每个子协程必须调用done（）,这样才能保证所有子协程结束，主协程才能结束。\"]},\"424\":{\"h\":\"1、怎么控制并发数？\",\"t\":[\"第一，有缓冲通道\",\"根据通道中没有数据时读取操作陷入阻塞和通道已满时继续写入操作陷入阻塞的特性，正好实现控制并发数量。\",\"func main() { count := 10 // 最大支持并发 sum := 100 // 任务总数 wg := sync.WaitGroup{} //控制主协程等待所有子协程执行完之后再退出。 c := make(chan struct{}, count) // 控制任务并发的chan defer close(c) for i := 0; i < sum; i++ { wg.Add(1) c <- struct{}{} // 作用类似于waitgroup.Add(1) go func(j int) { defer wg.Done() fmt.Println(j) <-c // 执行完毕，释放资源 }(i) } wg.Wait() } \",\"第二，三方库实现的协程池\",\"import ( \\\"github.com/Jeffail/tunny\\\" \\\"log\\\" \\\"time\\\" ) func main() { pool := tunny.NewFunc(10, func(i interface{}) interface{} { log.Println(i) time.Sleep(time.Second) return nil }) defer pool.Close() for i := 0; i < 500; i++ { go pool.Process(i) } time.Sleep(time.Second * 4) } \"]},\"425\":{\"h\":\"2、多个 goroutine 对同一个 map 写会 panic，异常是否可以用 defer 捕获？\",\"t\":[\"可以捕获异常，但是只能捕获一次，Go语言，可以使用多值返回来返回错误。不要用异常代替错误，更不要用来控制流程。在极个别的情况下，才使用Go中引入的Exception处理：defer, panic, recover Go中，对异常处理的原则是：多用error包，少用panic\",\"defer func() { if err := recover(); err != nil { // 打印异常，关闭资源，退出此函数 fmt.Println(err) } }() \"]},\"426\":{\"h\":\"3、如何优雅的实现一个 goroutine 池\",\"t\":[\"（百度、手写代码，本人面传音控股被问道：请求数大于消费能力怎么设计协程池）\",\"这一块能啃下来，offer满天飞，这应该是保证高并发系统稳定性、高可用的核心部分之一。\",\"建议参考：\",\"Golang学习篇--协程池_Word哥的博客-CSDN博客_golang协程池blog.csdn.net/finghting321/article/details/106492915/\",\"这篇文章的目录是：\",\"\\\\1. 为什么需要协程池？\",\"\\\\2. 简单的协程池\",\"\\\\3. go-playground/pool\",\"\\\\4. ants（推荐）\",\"所以直接研究ants底层吧，省的造轮子。\"]},\"427\":{\"h\":\"4、golang实现多并发请求（发送多个get请求）\",\"t\":[\"在go语言中其实有两种方法进行协程之间的通信。一个是共享内存、一个是消息传递\",\"共享内存（互斥锁）\",\"//基本的GET请求 package main import ( \\\"fmt\\\" \\\"io/ioutil\\\" \\\"net/http\\\" \\\"time\\\" \\\"sync\\\" \\\"runtime\\\" ) // 计数器 var counter int = 0 func httpget(lock *sync.Mutex){ lock.Lock() counter++ resp, err := http.Get(\\\"http://localhost:8000/rest/api/user\\\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) fmt.Println(resp.StatusCode) if resp.StatusCode == 200 { fmt.Println(\\\"ok\\\") } lock.Unlock() } func main() { start := time.Now() lock := &sync.Mutex{} for i := 0; i < 800; i++ { go httpget(lock) } for { lock.Lock() c := counter lock.Unlock() runtime.Gosched() if c >= 800 { break } } end := time.Now() consume := end.Sub(start).Seconds() fmt.Println(\\\"程序执行耗时(s)：\\\", consume) } \",\"问题\",\"我们可以看到共享内存的方式是可以做到并发，但是我们需要利用共享变量来进行协程的通信，也就需要使用互斥锁来确保数据安全性，导致代码啰嗦，复杂话，不易维护。我们后续使用go的消息传递方式避免这些问题。\",\"消息传递（管道）\",\"//基本的GET请求 package main import ( \\\"fmt\\\" \\\"io/ioutil\\\" \\\"net/http\\\" \\\"time\\\" ) // HTTP get请求 func httpget(ch chan int){ resp, err := http.Get(\\\"http://localhost:8000/rest/api/user\\\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) fmt.Println(resp.StatusCode) if resp.StatusCode == 200 { fmt.Println(\\\"ok\\\") } ch <- 1 } // 主方法 func main() { start := time.Now() // 注意设置缓冲区大小要和开启协程的个人相等 chs := make([]chan int, 2000) for i := 0; i < 2000; i++ { chs[i] = make(chan int) go httpget(chs[i]) } for _, ch := range chs { <- ch } end := time.Now() consume := end.Sub(start).Seconds() fmt.Println(\\\"程序执行耗时(s)：\\\", consume) } \",\"总结：\",\"我们通过go语言的管道channel来实现并发请求，能够解决如何避免传统共享内存实现并发的很多问题而且效率会高于共享内存的方法。\"]},\"428\":{\"h\":\"十、GC相关\",\"t\":[\"https://www.topgoer.cn/docs/gozhuanjia/chapter044.2-garbage_collection\",\"https://www.topgoer.cn/docs/golangxiuyang/golangxiuyang-1cmee076rjgk7\"]},\"429\":{\"h\":\"1、go gc 是怎么实现的？（必问）\",\"t\":[\"答：\",\"细分常见的三个问题：1、GC机制随着golang版本变化如何变化的？2、三色标记法的流程？3、插入屏障、删除屏障，混合写屏障（具体的实现比较难描述，但你要知道屏障的作用：避免程序运行过程中，变量被误回收；减少STW的时间）4、虾皮还问了个开放性的题目：你觉得以后GC机制会怎么优化？\",\"Go 的 GC 回收有三次演进过程，Go V1.3 之前普通标记清除（mark and sweep）方法，整体过程需要启动 STW，效率极低。GoV1.5 三色标记法，堆空间启动写屏障，栈空间不启动，全部扫描之后，需要重新扫描一次栈(需要 STW)，效率普通。GoV1.8 三色标记法，混合写屏障机制：栈空间不启动（全部标记成黑色），堆空间启用写屏障，整个过程不要 STW，效率高。\",\"Go1.3 之前的版本所谓标记清除是先启动 STW 暂停，然后执行标记，再执行数据回收，最后停止 STW。Go1.3 版本标记清除做了点优化，流程是：先启动 STW 暂停，然后执行标记，停止 STW，最后再执行数据回收。\",\"Go1.5 三色标记主要是插入屏障和删除屏障，写入屏障的流程：程序开始，全部标记为白色，1）所有的对象放到白色集合，2）遍历一次根节点，得到灰色节点，3）遍历灰色节点，将可达的对象，从白色标记灰色，遍历之后的灰色标记成黑色，4）由于并发特性，此刻外界向在堆中的对象发生添加对象，以及在栈中的对象添加对象，在堆中的对象会触发插入屏障机制，栈中的对象不触发，5）由于堆中对象插入屏障，则会把堆中黑色对象添加的白色对象改成灰色，栈中的黑色对象添加的白色对象依然是白色，6）循环第 5 步，直到没有灰色节点，7）在准备回收白色前，重新遍历扫描一次栈空间，加上 STW 暂停保护栈，防止外界干扰（有新的白色会被添加成黑色）在 STW 中，将栈中的对象一次三色标记，直到没有灰色，8）停止 STW，清除白色。至于删除写屏障，则是遍历灰色节点的时候出现可达的节点被删除，这个时候触发删除写屏障，这个可达的被删除的节点也是灰色，等循环三色标记之后，直到没有灰色节点，然后清理白色，删除写屏障会造成一个对象即使被删除了最后一个指向它的指针也依旧可以活过这一轮，在下一轮 GC 中被清理掉。\",\"GoV1.8 混合写屏障规则是：\",\"1）GC 开始将栈上的对象全部扫描并标记为黑色(之后不再进行第二次重复扫描，无需 STW)，2）GC 期间，任何在栈上创建的新对象，均为黑色。3）被删除的对象标记为灰色。4）被添加的对象标记为灰色。\"]},\"430\":{\"h\":\"2、go 是 gc 算法是怎么实现的？ （得物，出现频率低）\",\"t\":[\"func GC() { n := atomic.Load(&work.cycles) gcWaitOnMark(n) gcStart(gcTrigger{kind: gcTriggerCycle, n: n + 1}) gcWaitOnMark(n + 1) for atomic.Load(&work.cycles) == n+1 && sweepone() != ^uintptr(0) { sweep.nbgsweep++ Gosched() } for atomic.Load(&work.cycles) == n+1 && atomic.Load(&mheap_.sweepers) != 0 { Gosched() } mp := acquirem() cycle := atomic.Load(&work.cycles) if cycle == n+1 || (gcphase == _GCmark && cycle == n+2) { mProf_PostSweep() } releasem(mp) } \",\"底层原理了，可能大厂，中高级才会问，参考：\",\"Golang GC算法解读_suchy_sz的博客-CSDN博客_go的gc算法blog.csdn.net/shudaqi2010/article/details/90025192\"]},\"431\":{\"h\":\"3、GC 中 stw 时机，各个阶段是如何解决的？ （百度）\",\"t\":[\"底层原理，自行百度一下，我等渣渣简历都过不了BAT，字节，虾皮，特使拉以及一些国Q还能收到面试邀约。\",\"1）在开始新的一轮 GC 周期前，需要调用 gcWaitOnMark 方法上一轮 GC 的标记结束（含扫描终止、标记、或标记终止等）。\",\"2）开始新的一轮 GC 周期，调用 gcStart 方法触发 GC 行为，开始扫描标记阶段。\",\"3）需要调用 gcWaitOnMark 方法等待，直到当前 GC 周期的扫描、标记、标记终止完成。\",\"4）需要调用 sweepone 方法，扫描未扫除的堆跨度，并持续扫除，保证清理完成。在等待扫除完毕前的阻塞时间，会调用 Gosched 让出。\",\"5）在本轮 GC 已经基本完成后，会调用 mProf_PostSweep 方法。以此记录最后一次标记终止时的堆配置文件快照。\",\"6）结束，释放 M。\"]},\"432\":{\"h\":\"4、GC 的触发时机？\",\"t\":[\"初级必问，分为系统触发和主动触发。\",\"1）gcTriggerHeap：当所分配的堆大小达到阈值（由控制器计算的触发堆的大小）时，将会触发。\",\"2）gcTriggerTime：当距离上一个 GC 周期的时间超过一定时间时，将会触发。时间周期以runtime.forcegcperiod 变量为准，默认 2 分钟。\",\"3）gcTriggerCycle：如果没有开启 GC，则启动 GC。\",\"4）手动触发的 runtime.GC 方法。\"]},\"433\":{\"h\":\"十一、内存相关\"},\"434\":{\"h\":\"内存分配原理\"},\"435\":{\"h\":\"垃圾回收原理\"},\"436\":{\"h\":\"逃逸分析\"},\"437\":{\"h\":\"Go语言的内存模型及堆的分配管理\"},\"438\":{\"h\":\"1、谈谈内存泄露，什么情况下内存会泄露？怎么定位排查内存泄漏问题？\",\"t\":[\"答：go 中的内存泄漏一般都是 goroutine 泄漏，就是 goroutine 没有被关闭，或者没有添加超时控制，让 goroutine 一只处于阻塞状态，不能被 GC。\",\"内存泄露有下面一些情况\",\"1）如果 goroutine 在执行时被阻塞而无法退出，就会导致 goroutine 的内存泄漏，一个 goroutine 的最低栈大小为 2KB，在高并发的场景下，对内存的消耗也是非常恐怖的。\",\"2）互斥锁未释放或者造成死锁会造成内存泄漏\",\"3）time.Ticker 是每隔指定的时间就会向通道内写数据。作为循环触发器，必须调用 stop 方法才会停止，从而被 GC 掉，否则会一直占用内存空间。\",\"4）字符串的截取引发临时性的内存泄漏\",\"func main() { var str0 = \\\"12345678901234567890\\\" str1 := str0[:10] } \",\"5）切片截取引起子切片内存泄漏\",\"func main() { var s0 = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} s1 := s0[:3] } \",\"6）函数数组传参引发内存泄漏【如果我们在函数传参的时候用到了数组传参，且这个数组够大（我们假设数组大小为 100 万，64 位机上消耗的内存约为 800w 字节，即 8MB 内存），或者该函数短时间内被调用 N 次，那么可想而知，会消耗大量内存，对性能产生极大的影响，如果短时间内分配大量内存，而又来不及 GC，那么就会产生临时性的内存泄漏，对于高并发场景相当可怕。】\",\"排查方式：\",\"一般通过 pprof 是 Go 的性能分析工具，在程序运行过程中，可以记录程序的运行信息，可以是 CPU 使用情况、内存使用情况、goroutine 运行情况等，当需要性能调优或者定位 Bug 时候，这些记录的信息是相当重要。\",\"当然你能说说具体的分析指标更加分咯，有的面试官就喜欢他问什么，你简洁的回答什么，不喜欢巴拉巴拉详细解释一通，比如虾P面试官，不过他考察的内容特别多，可能是为了节约时间。\"]},\"439\":{\"h\":\"2、golang 的内存逃逸吗？什么情况下会发生内存逃逸？（必问）\",\"t\":[\"答：1)本该分配到栈上的变量，跑到了堆上，这就导致了内存逃逸。2)栈是高地址到低地址，栈上的变量，函数结束后变量会跟着回收掉，不会有额外性能的开销。3)变量从栈逃逸到堆上，如果要回收掉，需要进行 gc，那么 gc 一定会带来额外的性能开销。编程语言不断优化 gc 算法，主要目的都是为了减少 gc 带来的额外性能开销，变量一旦逃逸会导致性能开销变大。\",\"内存逃逸的情况如下：\",\"1）方法内返回局部变量指针。\",\"2）向 channel 发送指针数据。\",\"3）在闭包中引用包外的值。\",\"4）在 slice 或 map 中存储指针。\",\"5）切片（扩容后）长度太大。\",\"6）在 interface 类型上调用方法。\"]},\"440\":{\"h\":\"3、请简述 Go 是如何分配内存的？\",\"t\":[\"mcache mcentral mheap mspan\",\"Go 程序启动的时候申请一大块内存，并且划分 spans，bitmap，areana 区域；arena 区域按照页划分成一个个小块，span 管理一个或者多个页，mcentral 管理多个 span 供现场申请使用；mcache 作为线程私有资源，来源于 mcentral。\",\"这里描述的比较简单，你可以自己再去搜索下更简洁完整的答案。\"]},\"441\":{\"h\":\"4、 go内存分配器\"},\"442\":{\"h\":\"5、Channel 分配在栈上还是堆上？哪些对象分配在堆上，哪些对象分配在栈上？\",\"t\":[\"Channel 被设计用来实现协程间通信的组件，其作用域和生命周期不可能仅限于某个函数内部，所以 golang 直接将其分配在堆上\",\"准确地说，你并不需要知道。Golang 中的变量只要被引用就一直会存活，存储在堆上还是栈上由内部实现决定而和具体的语法没有关系。\",\"知道变量的存储位置确实和效率编程有关系。如果可能，Golang 编译器会将函数的局部变量分配到函数栈帧（stack frame）上。然而，如果编译器不能确保变量在函数 return 之后不再被引用，编译器就会将变量分配到堆上。而且，如果一个局部变量非常大，那么它也应该被分配到堆上而不是栈上。\",\"当前情况下，如果一个变量被取地址，那么它就有可能被分配到堆上,然而，还要对这些变量做逃逸分析，如果函数 return 之后，变量不再被引用，则将其分配到栈上。\"]},\"443\":{\"h\":\"6、介绍一下大对象小对象，为什么小对象多了会造成 gc 压力？\",\"t\":[\"小于等于 32k 的对象就是小对象，其它都是大对象。一般小对象通过 mspan 分配内存；大对象则直接由 mheap 分配内存。通常小对象过多会导致 GC 三色法消耗过多的 CPU。优化思路是，减少对象分配。\",\"小对象：如果申请小对象时，发现当前内存空间不存在空闲跨度时，将会需要调用 nextFree 方法获取新的可用的对象，可能会触发 GC 行为。\",\"大对象：如果申请大于 32k 以上的大对象时，可能会触发 GC 行为。\"]},\"444\":{\"h\":\"十二、编译\"},\"445\":{\"h\":\"逃逸分析是怎么进行的\",\"t\":[\"在编译原理中，分析指针动态范围的方法称之为逃逸分析。通俗来讲，当一个对象的指针被多个方法或线程引用时，我们称这个指针发生了逃逸。\",\"Go语言的逃逸分析是编译器执行静态代码分析后，对内存管理进行的优化和简化，它可以决定一个变量是分配到堆还栈上。\",\"写过C/C++的同学都知道，调用著名的malloc和new函数可以在堆上分配一块内存，这块内存的使用和销毁的责任都在程序员。一不小心，就会发生内存泄露。\",\"Go语言里，基本不用担心内存泄露了。虽然也有new函数，但是使用new函数得到的内存不一定就在堆上。堆和栈的区别对程序员“模糊化”了，当然这一切都是Go编译器在背后帮我们完成的。\",\"Go语言逃逸分析最基本的原则是：如果一个函数返回对一个变量的引用，那么它就会发生逃逸。\",\"简单来说，编译器会分析代码的特征和代码生命周期，Go中的变量只有在编译器可以证明在函数返回后不会再被引用的，才分配到栈上，其他情况下都是分配到堆上。\",\"Go语言里没有一个关键字或者函数可以直接让变量被编译器分配到堆上，相反，编译器通过分析代码来决定将变量分配到何处。\",\"对一个变量取地址，可能会被分配到堆上。但是编译器进行逃逸分析后，如果考察到在函数返回后，此变量不会被引用，那么还是会被分配到栈上。\",\"编译器会根据变量是否被外部引用来决定是否逃逸：\",\"如果函数外部没有引用，则优先放到栈中；\",\"如果函数外部存在引用，则必定放到堆中；\",\"Go的垃圾回收，让堆和栈对程序员保持透明。真正解放了程序员的双手，让他们可以专注于业务，“高效”地完成代码编写。把那些内存管理的复杂机制交给编译器，而程序员可以去享受生活。\",\"逃逸分析这种“骚操作”把变量合理地分配到它该去的地方。即使你是用new申请到的内存，如果我发现你竟然在退出函数后没有用了，那么就把你丢到栈上，毕竟栈上的内存分配比堆上快很多；反之，即使你表面上只是一个普通的变量，但是经过逃逸分析后发现在退出函数之后还有其他地方在引用，那我就把你分配到堆上。\",\"如果变量都分配到堆上，堆不像栈可以自动清理。它会引起Go频繁地进行垃圾回收，而垃圾回收会占用比较大的系统开销（占用CPU容量的25%）。\",\"堆和栈相比，堆适合不可预知大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形成内存碎片。栈内存分配则会非常快。栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。\",\"通过逃逸分析，可以尽量把那些不需要分配到堆上的变量直接分配到栈上，堆上的变量少了，会减轻分配堆内存的开销，同时也会减少gc的压力，提高程序的运行速度。\"]},\"446\":{\"h\":\"GoRoot 和 GoPath 有什么用\",\"t\":[\"GoRoot 是 Go 的安装路径。mac 或 unix 是在 /usr/local/go 路径上，来看下这里都装了些什么：\",\"img\",\"bin 目录下面：\",\"img\",\"pkg 目录下面：\",\"img\",\"Go 工具目录如下，其中比较重要的有编译器 compile，链接器 link：\",\"img\",\"GoPath 的作用在于提供一个可以寻找 .go 源码的路径，它是一个工作空间的概念，可以设置多个目录。Go 官方要求，GoPath 下面需要包含三个文件夹：\",\"src pkg bin \",\"src 存放源文件，pkg 存放源文件编译后的库文件，后缀为 .a；bin 则存放可执行文件。\"]},\"447\":{\"h\":\"Go 编译链接过程概述\",\"t\":[\"Go 程序并不能直接运行，每条 Go 语句必须转化为一系列的低级机器语言指令，将这些指令打包到一起，并以二进制磁盘文件的形式存储起来，也就是可执行目标文件。\",\"从源文件到可执行目标文件的转化过程：\",\"img\",\"完成以上各个阶段的就是 Go 编译系统。你肯定知道大名鼎鼎的 GCC（GNU Compile Collection），中文名为 GNU 编译器套装，它支持像 C，C++，Java，Python，Objective-C，Ada，Fortran，Pascal，能够为很多不同的机器生成机器码。\",\"可执行目标文件可以直接在机器上执行。一般而言，先执行一些初始化的工作；找到 main 函数的入口，执行用户写的代码；执行完成后，main 函数退出；再执行一些收尾的工作，整个过程完毕。\",\"在接下来的文章里，我们将探索编译和运行的过程。\",\"Go 源码里的编译器源码位于 src/cmd/compile 路径下，链接器源码位于 src/cmd/link 路径下。\"]},\"448\":{\"h\":\"Go 编译相关的命令详解\",\"t\":[\"和编译相关的命令主要是：\",\"go build go install go run \"]},\"449\":{\"h\":\"go build\",\"t\":[\"go build 用来编译指定 packages 里的源码文件以及它们的依赖包，编译的时候会到 $GoPath/src/package 路径下寻找源码文件。go build 还可以直接编译指定的源码文件，并且可以同时指定多个。\",\"通过执行 go help build 命令得到 go build 的使用方法：\",\"usage: go build [-o output] [-i] [build flags] [packages] \",\"-o 只能在编译单个包的时候出现，它指定输出的可执行文件的名字。\",\"-i 会安装编译目标所依赖的包，安装是指生成与代码包相对应的 .a 文件，即静态库文件（后面要参与链接），并且放置到当前工作区的 pkg 目录下，且库文件的目录层级和源码层级一致。\",\"至于 build flags 参数，build, clean, get, install, list, run, test 这些命令会共用一套：\",\"参数\",\"作用\",\"-a\",\"强制重新编译所有涉及到的包，包括标准库中的代码包，这会重写 /usr/local/go 目录下的 .a 文件\",\"-n\",\"打印命令执行过程，不真正执行\",\"-p n\",\"指定编译过程中命令执行的并行数，n 默认为 CPU 核数\",\"-race\",\"检测并报告程序中的数据竞争问题\",\"-v\",\"打印命令执行过程中所涉及到的代码包名称\",\"-x\",\"打印命令执行过程中所涉及到的命令，并执行\",\"-work\",\"打印编译过程中的临时文件夹。通常情况下，编译完成后会被删除\",\"我们知道，Go 语言的源码文件分为三类：命令源码、库源码、测试源码。\",\"命令源码文件：是 Go 程序的入口，包含 func main() 函数，且第一行用 package main 声明属于 main 包。\",\"库源码文件：主要是各种函数、接口等，例如工具类的函数。\",\"测试源码文件：以 _test.go 为后缀的文件，用于测试程序的功能和性能。\",\"注意，go build 会忽略 *_test.go 文件。\"]},\"450\":{\"h\":\"go install\",\"t\":[\"go install 用于编译并安装指定的代码包及它们的依赖包。相比 go build，它只是多了一个“安装编译后的结果文件到指定目录”的步骤。\",\"还是使用之前 hello-world 项目的例子，我们先将 pkg 目录删掉，在项目根目录执行：\",\"go install src/main.go 或者 go install util \",\"两者都会在根目录下新建一个 pkg 目录，并且生成一个 util.a 文件。\",\"并且，在执行前者的时候，会在 GOBIN 目录下生成名为 main 的可执行文件。\",\"所以，运行 go install 命令，库源码包对应的 .a 文件会被放置到 pkg 目录下，命令源码包生成的可执行文件会被放到 GOBIN 目录。\",\"go install 在 GoPath 有多个目录的时候，会产生一些问题，具体可以去看郝林老师的 Go 命令教程，这里不展开了。\"]},\"451\":{\"h\":\"go run\",\"t\":[\"go run 用于编译并运行命令源码文件。\"]},\"452\":{\"h\":\"Go 程序启动过程是怎样的\"},\"453\":{\"h\":\"十三、框架\"},\"454\":{\"h\":\"Gin\",\"t\":[\"文档：https://gin-gonic.com/zh-cn/docs/introduction/\"]},\"455\":{\"h\":\"0、特性\",\"t\":[\"快速\",\"基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。\",\"支持中间件\",\"传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。\",\"Crash 处理\",\"Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！\",\"JSON 验证\",\"Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。\",\"路由组\",\"更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。\",\"错误管理\",\"Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。\",\"内置渲染\",\"Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。\",\"可扩展性\",\"新建一个中间件非常简单，去查看示例代码吧。\"]},\"456\":{\"h\":\"1、 gin目录结构\",\"t\":[\"文档：https://blog.csdn.net/qq_34877350/article/details/107959381\",\"├── gin │ ├── Router │ └── router.go │ ├── Middlewares │ └── corsMiddleware.go │ ├── Controllers │ └── testController.go │ ├── Services │ └── testService.go │ ├── Models │ └── testModel.go │ ├── Databases │ └── mysql.go │ ├── Sessions │ └── session.go └── main.go \",\"使用gorm访问数据库\",\"gin 为项目根目录\",\"main.go 为入口文件\",\"Router 为路由目录\",\"Middlewares 为中间件目录\",\"Controllers 为控制器目录（MVC）\",\"Services 为服务层目录，这里把DAO逻辑也写入其中，如果分开也可以\",\"Models 为模型目录\",\"Databases 为数据库初始化目录\",\"Sessions 为session初始化目录\",\"文件 引用顺序 大致如下：\",\"main.go(在main中关闭数据库) - router(Middlewares) - Controllers - Services(sessions) - Models - Databases\"]},\"457\":{\"h\":\"2、 Gin框架介绍及使用 - 李文周的博客\",\"t\":[\"文档：https://www.liwenzhou.com/posts/Go/Gin_framework/#autoid-0-0-0\"]},\"458\":{\"h\":\"3、源码\",\"t\":[\"Gin源码阅读与分析：https://www.yuque.com/iveryimportantpig/huchao/zd24cb3z2bco5304\"]},\"459\":{\"h\":\"go-zero\",\"t\":[\"文档：https://go-zero.dev/cn/docs/introduction\",\"go-zero 是一个集成了各种工程实践的 web 和 rpc 框架。通过弹性设计保障了大并发服务端的稳定性，经受了充分的实战检验。\",\"go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。\",\"使用 go-zero 的好处：\",\"轻松获得支撑千万日活服务的稳定性\",\"内建级联超时控制、限流、自适应熔断、自适应降载等微服务治理能力，无需配置和额外代码\",\"微服务治理中间件可无缝集成到其它现有框架使用\",\"极简的 API 描述，一键生成各端代码\",\"自动校验客户端请求参数合法性\",\"大量微服务治理和并发工具包\"]},\"460\":{\"h\":\"字节-CloudWeGo\",\"t\":[\"文档：https://www.cloudwego.io/zh/docs/\"]},\"461\":{\"h\":\"HTTP-Hertz\",\"t\":[\"文档：https://www.cloudwego.io/zh/docs/hertz/overview/\",\"是一个 Golang 微服务 HTTP 框架，在设计之初参考了其他开源框架 fasthttp、gin、echo 的优势， 并结合字节跳动内部的需求，使其具有高易用性、高性能、高扩展性等特点，目前在字节跳动内部已广泛使用。 如今越来越多的微服务选择使用 Golang，如果对微服务性能有要求，又希望框架能够充分满足内部的可定制化需求，Hertz 会是一个不错的选择。\",\"特点\",\"高易用性在开发过程中，快速写出来正确的代码往往是更重要的。因此，在 Hertz 在迭代过程中，积极听取用户意见，持续打磨框架，希望为用户提供一个更好的使用体验，帮助用户更快的写出正确的代码。\",\"高性能Hertz 默认使用自研的高性能网络库 Netpoll，在一些特殊场景相较于 go net，Hertz 在 QPS、时延上均具有一定优势。关于性能数据，可参考下图 Echo 数据。四个框架的对比:三个框架的对比:关于详细的性能数据，可参考 https://github.com/cloudwego/hertz-benchmark。\",\"高扩展性Hertz 采用了分层设计，提供了较多的接口以及默认的扩展实现，用户也可以自行扩展。同时得益于框架的分层设计，框架的扩展性也会大很多。目前仅将稳定的能力开源给社区，更多的规划参考 RoadMap。\",\"多协议支持Hertz 框架原生提供 HTTP1.1、ALPN 协议支持。除此之外，由于分层设计，Hertz 甚至支持自定义构建协议解析逻辑，以满足协议层扩展的任意需求。\",\"网络层切换能力Hertz 实现了 Netpoll 和 Golang 原生网络库 间按需切换能力，用户可以针对不同的场景选择合适的网络库，同时也支持以插件的方式为 Hertz 扩展网络库实现。\"]},\"462\":{\"h\":\"RPC-Kitex\",\"t\":[\"文档：https://www.cloudwego.io/zh/docs/kitex/overview/\",\"字节跳动内部的 Golang 微服务 RPC 框架，具有高性能、强可扩展的特点，在字节内部已广泛使用。如果对微服务性能有要求，又希望定制扩展融入自己的治理体系，Kitex 会是一个不错的选择。\",\"框架特点\",\"高性能使用自研的高性能网络库 Netpoll，性能相较 go net 具有显著优势。\",\"扩展性提供了较多的扩展接口以及默认扩展实现，使用者也可以根据需要自行定制扩展，具体见下面的框架扩展。\",\"多消息协议RPC 消息协议默认支持 Thrift、Kitex Protobuf、gRPC。Thrift 支持 Buffered 和 Framed 二进制协议；Kitex Protobuf 是 Kitex 自定义的 Protobuf 消息协议，协议格式类似 Thrift；gRPC 是对 gRPC 消息协议的支持，可以与 gRPC 互通。除此之外，使用者也可以扩展自己的消息协议。\",\"多传输协议传输协议封装消息协议进行 RPC 互通，传输协议可以额外透传元信息，用于服务治理，Kitex 支持的传输协议有 TTHeader、HTTP2。TTHeader 可以和 Thrift、Kitex Protobuf 结合使用；HTTP2 目前主要是结合 gRPC 协议使用，后续也会支持 Thrift。\",\"多种消息类型支持 PingPong、Oneway、双向 Streaming。其中 Oneway 目前只对 Thrift 协议支持，双向 Streaming 只对 gRPC 支持，后续会考虑支持 Thrift 的双向 Streaming。\",\"服务治理支持服务注册/发现、负载均衡、熔断、限流、重试、监控、链路跟踪、日志、诊断等服务治理模块，大部分均已提供默认扩展，使用者可选择集成。\",\"代码生成Kitex 内置代码生成工具，可支持生成 Thrift、Protobuf 以及脚手架代码。\"]},\"463\":{\"h\":\"参考并致谢\",\"t\":[\"1、可可酱 可可酱：Golang常见面试题\",\"2、Bel_Ami同学 golang 面试题(从基础到高级)\"]},\"464\":{\"c\":[\"Golang\"]},\"465\":{\"c\":[\"面试题\"]},\"466\":{\"h\":\"Go入门指南\"},\"467\":{\"h\":\"前言\",\"t\":[\"用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣\",\"对于学习 Go 编程语言的爱好者来说，这本书无疑是最适合你的一本书籍，这里包含了当前最全面的学习资源。本书通过对官方的在线文档、名人博客、书籍、相关文章以及演讲的资料收集和整理，并结合我自身在软件工程、编程语言和数据库开发的授课经验，将这些零碎的知识点组织成系统化的概念和技术分类来进行讲解。\",\"随着软件规模的不断扩大，诸多的学者和谷歌的开发者们在公司内部的软件开发过程中开始经历大量的挫折，在诸多问题上都不能给出令人满意的解决方案，尤其是在使用 C++ 来开发大型的服务端软件时，情况更是不容乐观。由于二进制文件一般都是非常巨大的，因此需要耗费大量的时间在编译这些文件上，同时编程语言的设计思想也已经非常陈旧，这些情况都充分证明了现有的编程语言已不符合时下的生产环境。尽管硬件在过去的几十年中有了飞速的发展，但人们依旧没有找到机会去改变 C++ 在软件开发的重要地位，并在实际开发过程中忍受着它所带来的令人头疼的一些问题。因此学者们坐下来总结出了现在生产环境与软件开发之间的主要矛盾，并尝试设计一门全新的编程语言来解决这些问题。\",\"以下就是他们讨论得出的对编程语言的设计要求：\",\"能够以更快的速度开发软件\",\"开发出的软件能够很好地在现代的多核计算机上工作\",\"开发出的软件能够很好地在网络环境下工作\",\"使人们能够享受软件开发的过程\",\"Go 语言就在这样的环境下诞生了，它让人感觉像是 Python 或 Ruby 这样的动态语言，但却又拥有像 C 或者 Java 这类语言的高性能和安全性。\",\"Go 语言出现的目的是希望在编程领域创造最实用的方式来进行软件开发。它并不是要用奇怪的语法和晦涩难懂的概念来从根本上推翻已有的编程语言，而是建立并改善了 C、Java、C# 中的许多语法风格。它提倡通过接口来针对面向对象编程，通过 goroutine 和 channel 来支持并发和并行编程。\",\"这本书是为那些想要学习 Go 这门全新的，迷人的和充满希望的编程语言的开发者量身定做的。当然，你在学习 Go 语言之前需要具备一些关于编程的基础知识和经验，并且拥有合适的学习环境，但你并不需要对 C 或者 Java 或其它类似的语言有非常深入的了解。\",\"对于那些熟悉 C 或者面向对象编程语言的开发者，我们将会在本书中用 Go 和一些编程语言的相关概念进行比较（书中会使用大家所熟知的缩写 “OO” 来表示面向对象）。\",\"本书将会从最基础的概念讲起，同时也会讨论一些类似在应用 goroutine 和 channel 时有多少种不同的模式，如何在 Go 语言中使用谷歌 API，如何操作内存，如何在 Go 语言中进行程序测试和如何使用模板来开发 Web 应用这些高级概念和技巧。\",\"在本书的第一部分，我们将会讨论 Go 语言的起源（第 1 章），以及如何安装 Go 语言（第 2 章）和开发环境（第 3 章）。\",\"在本书的第二部分，我们将会带领你贯穿 Go 语言的核心思想，譬如简单与复杂类型（第 4、7、8 章），控制结构（第 5 章），函数（第 6 章），结构与方法（第 10 章）和接口（第 11 章）。我们会对 Go 语言的函数式和面向对象编程进行透彻的讲解，包括如何使用 Go 语言来构造大型项目（第 9 章）。\",\"在本书的第三部分，你将会学习到如何处理不同格式的文件（第 12 章）和如何在 Go 语言中巧妙地使用错误处理机制（第 13 章）。然后我们会对 Go 语言中最值得称赞的设计 goroutine 和 channel 进行并发和多核应用的基本技巧的讲解（第 14 章）。最后，我们会讨论如何将 Go 语言应用到分布式和 Web 应用中的相关网络技巧（第 15 章）。\",\"我们会在本书的第四部分向你展示许多 Go 语言的开发模式和一些编码规范，以及一些非常有用的代码片段（第 18 章）。在前面章节完成对所有的 Go 语言技巧的学习之后，你将会学习如何构造一个完整 Go 语言项目（第 19 章），然后我们会介绍一些关于 Go 语言在云（Google App Engine）方面的应用（第 20 章）。在本书的最后一章（第 21 章），我们会讨论一些在全世界范围内已经将 Go 语言投入实际开发的公司和组织。本书将会在最后给出一些对 Go 语言爱好者的引用，Go 相关包和工具的参考，以及章节练习的答案和所有参考资源和文献的清单。\",\"Go 语言有一个被称之为 “没有废物” 的宗旨，就是将一切没有必要的东西都去掉，不能去掉的就无底线地简化，同时追求最大程度的自动化。他完美地诠释了敏捷编程的 KISS 秘诀：短小精悍！\",\"Go 语言通过改善或去除在 C、C++ 或 Java 中的一些所谓“开放”特性来让开发者们的工作更加便利。这里只举例其中的几个，比如对于变量的默认初始化，内存分配与自动回收，以及更简洁却不失健壮的控制结构。同时我们也会发现 Go 语言旨在减少不必要的编码工作，这使得 Go 语言的代码更加简洁，从而比传统的面向对象语言更容易阅读和理解。\",\"与 C++ 或 Java 这些有着庞大体系的语言相比，Go 语言简洁到可以将它整个的装入你的大脑中，而且比学习 Scala（Java 的并发语言）有更低的门槛，真可谓是 21 世纪的 C 语言！\",\"作为一门系统编程语言，你不应该为 Go 语言的大多数代码示例和练习都和控制台有着密不可分的关系而感到惊奇，因为提供平台依赖性的 GUI（用户界面）框架并不是一个简单的任务。有许多由第三方发起的 GUI 框架项目正在如火如荼地进行中，或许我们会在不久的将来看到一些可用的 Go 语言 GUI 框架。不过现阶段的 Go 语言已经提供了大量有关 Web 方面的功能，我们可以通过它强大的 http 和 template 包来达到 Web 应用的 GUI 实现。\",\"我们会经常涉及到一些关于 Go 语言的编码规范，了解和使用这些已经被广泛认同的规范应该是你学习阶段最重要的实践。我会在书中尽量使用已经讲解的概念或者技巧来解释相关的代码示例，以避免你在不了解某些高级概念的情况下而感到迷茫。\",\"我们通过 227 个完整的代码示例和书中的解释说明来对所有涉及到的概念和技巧进行彻底的讲解，你可以下载这些代码到你的电脑上运行，从而加深对概念的理解。\",\"本书会尽可能地将前后章节的内容联系起来，当然这也同时要求你通过学习不同的知识来对一个问题提出尽可能多的解决方案。记住，学习一门新语言的最佳方式就是实践，运行它的代码，修改并尝试更多的方案。因此，你绝对不可以忽略书中的 130 个代码练习，这将对你学习好 Go 语言有很大的帮助。比如，我们就为斐波那契算法提供了 13 个不同的版本，而这些版本都使用了不同的概念和技巧。\",\"你可以通过访问本书的 官方网站 下载书中的代码，并获得有关本书的勘误情况和内容更新。\",\"为了让你在成为 Go 语言大师的道路上更加顺利，我们会专注于一些特别的章节以提供 Go 语言开发模式的最佳实践，同时也会帮助初学者逃离一些语言的陷阱。第 18 章可以作为你在开发时的一个参考手册，因为当中包含了众多的有价值的代码片段以及相关的解释说明。\",\"最后要说明的是，你可以通过完整的索引来快速定位你需要阅读的章节。书中所有的代码都在 Go1.4 版本下测试通过。\",\"这里有一段来自在 C++、Java 和 Python 领域众所周知的专家 Bruce Eckel 的评论：\",\"“作为一个有着 C/C++ 背景的开发者，我在使用 Go 语言时仿佛呼吸到了新鲜空气一般，令人心旷神怡。我认为使用 Go 语言进行系统编程开发比使用 C++ 有着更显著的优势，因为它在解决一些很难用 C++ 解决的问题的同时，让我的工作变得更加高效。我并不是说 C++ 的存在是一个错误，相反地，我认为这是历史发展的必然结果。当我深陷在 C 语言这门略微比汇编语言好一点的泥潭时，我坚信任何语言的构造都不可能支持大型项目的开发。像垃圾回收或并发语言支持这类东西，在当时都是极其荒谬的主意，根本没有人在乎。C++ 向大型项目开发迈出了重要的第一步，带领我们走进这个广袤无垠的世界。很庆幸 Stroustrup 做了让 C++ 兼容 C 语言以能够让其编译 C 程序这个正确的决定。我们当时需要 C++ 的出现。”\",\"“之后我们学到了更多。我们毫无疑问地接受了垃圾回收，异常处理和虚拟机这些当年人们认为只有疯子才会想的东西。C++ 的复杂程度（新版的 C++ 甚至更加复杂）极大的影响了软件开发的高效性，这使得它再也不再适合这个时代。人们不再像过往那样认同在 C++ 中兼容使用 C 语言的方法，认为这些工作只是在浪费时间，牺牲人们的努力。就在此时，Go 语言已经成功地解决了 C++ 中那些本打算解决却未能解决的关键问题。”\",\"我非常想要向发明这门精湛的语言的 Go 开发团队表示真挚的感谢，尤其是团队的领导者 Rob Pike、Russ Cox 和 Andrew Gerrand，他们阐述的例子和说明都非常的完美。同时，我还要感谢 Miek Gieben、Frank Muller、Ryanne Dolan 和 Satish V.J. 给予我巨大的帮助，还有那些 golang-nuts 邮件列表里的所有的成员。\",\"欢迎来到 Go 语言开发的奇妙世界！\"]},\"468\":{\"h\":\"第 1 章：Go 语言的起源与发展\"},\"469\":{\"h\":\"1.1 起源与发展\",\"t\":[\"Go 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。该项目的三位领导者均是著名的 IT 工程师：Robert Griesemer，参与开发 Java HotSpot 虚拟机；Rob Pike，Go 语言项目总负责人，贝尔实验室 Unix 团队成员，参与的项目包括 Plan 9，Inferno 操作系统和 Limbo 编程语言；Ken Thompson，贝尔实验室 Unix 团队成员，C 语言、Unix 和 Plan 9 的创始人之一，与 Rob Pike 共同开发了 UTF-8 字符集规范。自 2008 年 1 月起，Ken Thompson 就开始研发一款以 C 语言为目标结果的编译器来拓展 Go 语言的设计思想。\",\"这是一个由计算机领域 “发明之父” 所组成的黄金团队，他们对系统编程语言，操作系统和并行都有着非常深刻的见解\",\"在 2008 年年中，Go 语言的设计工作接近尾声，一些员工开始以全职工作状态投入到这个项目的编译器和运行实现上。Ian Lance Taylor 也加入到了开发团队中，并于 2008 年 5 月创建了一个 gcc 前端。\",\"Russ Cox 加入开发团队后着手语言和类库方面的开发，也就是 Go 语言的标准包。在 2009 年 10 月 30 日，Rob Pike 以 Google Techtalk 的形式第一次向人们宣告了 Go 语言的存在。\",\"直到 2009 年 11 月 10 日，开发团队将 Go 语言项目以 BSD-style 授权（完全开源）正式公布了 Linux 和 Mac OS X 平台上的版本。Hector Chu 于同年 11 月 22 日公布了 Windows 版本。\",\"作为一个开源项目，Go 语言借助开源社区的有生力量达到快速地发展，并吸引更多的开发者来使用并改善它。自该开源项目发布以来，超过 200 名非谷歌员工的贡献者对 Go 语言核心部分提交了超过 1000 个修改建议。在过去的 18 个月里，又有 150 开发者贡献了新的核心代码。这俨然形成了世界上最大的开源团队，并使该项目跻身 Ohloh 前 2% 的行列。大约在 2011 年 4 月 10 日，谷歌开始抽调员工进入全职开发 Go 语言项目。开源化的语言显然能够让更多的开发者参与其中并加速它的发展速度。Andrew Gerrand 在 2010 年加入到开发团队中成为共同开发者与支持者。\",\"在 Go 语言在 2010 年 1 月 8 日被 Tiobe（闻名于它的编程语言流行程度排名）宣布为 “2009 年年度语言” 后，引起各界很大的反响。目前 Go 语言在这项排名中的最高记录是在 2017 年 1 月创下的第 13 名，流行程度 2.325%。\",\"时间轴：\",\"2007 年 9 月 21 日：雏形设计\",\"2009 年 11 月 10 日：首次公开发布\",\"2010 年 1 月 8 日：当选 2009 年年度语言\",\"2010 年 5 月：谷歌投入使用\",\"2011 年 5 月 5 日：Google App Engine 支持 Go 语言\",\"从 2010 年 5 月起，谷歌开始将 Go 语言投入到后端基础设施的实际开发中，例如开发用于管理后端复杂环境的项目。有句话叫 “吃你自己的狗食”，这也体现了谷歌确实想要投资这门语言，并认为它是有生产价值的。\",\"Go 语言的官方网站是 golang.org，这个站点采用 Python 作为前端，并且使用 Go 语言自带的工具 godoc 运行在 Google App Engine 上来作为 Web 服务器提供文本内容。在官网的首页有一个功能叫做 Go Playground，是一个 Go 代码的简单编辑器的沙盒，它可以在没有安装 Go 语言的情况下在你的浏览器中编译并运行 Go，它提供了一些示例，其中包括国际惯例 “Hello, World!”。\",\"更多的信息详见 github.com/golang/go，Go 项目 Bug 追踪和功能预期详见 github.com/golang/go/issues。\",\"Go 通过以下的 Logo 来展示它的速度，并以囊地鼠 (Gopher) 作为它的吉祥物。\",\"谷歌邮件列表 golang-nuts 非常活跃，每天的讨论和问题解答数以百计。\",\"关于 Go 语言在 Google App Engine 的应用，这里有一个单独的邮件列表 google-appengine-go，不过 2 个邮件列表的讨论内容并不是分得很清楚，都会涉及到相关的话题。go-lang.cat-v.org/ 是 Go 语言开发社区的资源站，irc.freenode.net 的 #go-nuts 是官方的 Go IRC 频道。\",\"@golang 是 Go 语言在 Twitter 的官方帐号，大家一般使用 #golang 作为话题标签。\",\"这里还有一个在 Linked-in 的小组：www.linkedin.com/groups?gid=2524765&trk=myg_ugrp_ovr。\",\"Go 编程语言的维基百科：en.wikipedia.org/wiki/Go_(programming_language)\",\"Go 语言相关资源的搜索引擎页面：gowalker.org\",\"Go 语言还有一个运行在 Google App Engine 上的 Go Tour，你也可以通过执行命令 go install go-tour.googlecode.com/hg/gotour 安装到你的本地机器上。对于中文读者，可以访问该指南的 中文版本，或通过命令 go install https://bitbucket.org/mikespook/go-tour-zh/gotour 进行安装。\"]},\"470\":{\"h\":\"1.2 语言的主要特性与发展的环境和影响因素\"},\"471\":{\"h\":\"1.2.1 影响 Go 语言发展的早期编程语言\",\"t\":[\"正如 “21 世纪的 C 语言” 这句话所说，Go 语言并不是凭空而造的，而是和 C++、Java 和 C# 一样属于 C 系。不仅如此，设计者们还汲取了其它编程语言的精粹部分融入到 Go 语言当中。\",\"在声明和包的设计方面，Go 语言受到 Pascal、Modula 和 Oberon 系语言的影响；在并发原理的设计上，Go 语言从同样受到 Tony Hoare 的 CSP（通信序列进程 Communicating Sequential Processes）理论影响的 Limbo 和 Newsqueak 的实践中借鉴了一些经验，并使用了和 Erlang 类似的机制。\",\"这是一门完全开源的编程语言，因为它使用 BSD 授权许可，所以任何人都可以进行商业软件的开发而不需要支付任何费用。\",\"尽管为了能够让目前主流的开发者们能够对 Go 语言中的类 C 语言的语法感到非常亲切而易于转型，但是它在极大程度上简化了这些语法，使得它们比 C/C++ 的语法更加简洁和干净。同时，Go 语言也拥有一些动态语言的特性，这使得使用 Python 和 Ruby 的开发者们在使用 Go 语言的时候感觉非常容易上手。\",\"下图展示了一些其它编程语言对 Go 语言的影响：\",\"图 1.3 其它编程语言对 Go 语言的影响\"]},\"472\":{\"h\":\"1.2.2 为什么要创造一门编程语言\",\"t\":[\"C/C++ 的发展速度无法跟上计算机发展的脚步，十多年来也没有出现一门与时代相符的主流系统编程语言，因此人们需要一门新的系统编程语言来弥补这个空缺，尤其是在计算机信息时代。\",\"相比计算机性能的提升，软件开发领域不被认为发展得足够快或者比硬件发展得更加成功（有许多项目均以失败告终），同时应用程序的体积始终在不断地扩大，这就迫切地需要一门具备更高层次概念的低级语言来突破现状。\",\"在 Go 语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go 语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。\"]},\"473\":{\"h\":\"1.2.3 Go 语言的发展目标\",\"t\":[\"Go 语言的主要目标是将静态语言的安全性和高效性与动态语言的易开发性进行有机结合，达到完美平衡，从而使编程变得更加有乐趣，而不是在艰难抉择中痛苦前行。\",\"因此，Go 语言是一门类型安全和内存安全的编程语言。虽然 Go 语言中仍有指针的存在，但并不允许进行指针运算。\",\"Go 语言的另一个目标是对于网络通信、并发和并行编程的极佳支持，从而更好地利用大量的分布式和多核的计算机，这一点对于谷歌内部的使用来说就非常重要了。设计者通过 goroutine 这种轻量级线程的概念来实现这个目标，然后通过 channel 来实现各个 goroutine 之间的通信。他们实现了分段栈增长和 goroutine 在线程基础上多路复用技术的自动化。\",\"这个特性显然是 Go 语言最强有力的部分，不仅支持了日益重要的多核与多处理器计算机，也弥补了现存编程语言在这方面所存在的不足。\",\"Go 语言中另一个非常重要的特性就是它的构建速度（编译和链接到机器代码的速度），一般情况下构建一个程序的时间只需要数百毫秒到几秒。作为大量使用 C++ 来构建基础设施的谷歌来说，无疑从根本上摆脱了 C++ 在构建速度上非常不理想的噩梦。这不仅极大地提升了开发者的生产力，同时也使得软件开发过程中的代码测试环节更加紧凑，而不必浪费大量的时间在等待程序的构建上。\",\"依赖管理是现今软件开发的一个重要组成部分，但是 C 语言中“头文件”的概念却导致越来越多因为依赖关系而使得构建一个大型的项目需要长达几个小时的时间。人们越来越需要一门具有严格的、简洁的依赖关系分析系统从而能够快速编译的编程语言。这正是 Go 语言采用包模型的根本原因，这个模型通过严格的依赖关系检查机制来加快程序构建的速度，提供了非常好的可量测性。\",\"整个 Go 语言标准库的编译时间一般都在 20 秒以内，其它的常规项目也只需要半秒钟的时间来完成编译工作。这种闪电般的编译速度甚至比编译 C 语言或者 Fortran 更加快，使得编译这一环节不再成为在软件开发中困扰开发人员的问题。在这之前，动态语言将快速编译作为自身的一大亮点，像 C++ 那样的静态语言一般都有非常漫长的编译和链接工作。而同样作为静态语言的 Go 语言，通过自身优良的构建机制，成功地去除了这个弊端，使得程序的构建过程变得微不足道，拥有了像脚本语言和动态语言那样的高效开发的能力。\",\"另外，Go 语言在执行速度方面也可以与 C/C++ 相提并论。\",\"由于内存问题（通常称为内存泄漏）长期以来一直伴随着 C++ 的开发者们，Go 语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题。因此尽管 Go 语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收（使用了一个简单的标记-清除算法）。\",\"尽管垃圾回收并不容易实现，但考虑这将是未来并发应用程序发展的一个重要组成部分，Go 语言的设计者们还是完成了这项艰难的任务。\",\"Go 语言还能够在运行时进行反射相关的操作。\",\"使用 go install 能够很轻松地对第三方包进行部署。\",\"此外，Go 语言还支持调用由 C 语言编写的海量库文件（第 3.9 节），从而能够将过去开发的软件进行快速迁移。\"]},\"474\":{\"h\":\"1.2.4 指导设计原则\",\"t\":[\"Go 语言通过减少关键字的数量（25 个）来简化编码过程中的混乱和复杂度。干净、整齐和简洁的语法也能够提高程序的编译速度，因为这些关键字在编译过程中少到甚至不需要符号表来协助解析。\",\"这些方面的工作都是为了减少编码的工作量，甚至可以与 Java 的简化程度相比较。\",\"Go 语言有一种极简抽象艺术家的感觉，因为它只提供了一到两种方法来解决某个问题，这使得开发者们的代码都非常容易阅读和理解。众所周知，代码的可读性是软件工程里最重要的一部分（ 译者注：代码是写给人看的，不是写给机器看的 ）。\",\"这些设计理念没有建立其它概念之上，所以并不会因为牵扯到一些概念而将某个概念复杂化，他们之间是相互独立的。\",\"Go 语言有一套完整的编码规范，你可以在 Go 语言编码规范 页面进行查看。\",\"它不像 Ruby 那样通过实现过程来定义编码规范。作为一门具有明确编码规范的语言，它要求可以采用不同的编译器如 gc 和 gccgo（第 2.1 节）进行编译工作，这对语言本身拥有更好的编码规范起到很大帮助。\",\"LALR 是 Go 语言的语法标准，你也可以在 src/cmd/internal/gc/go.y 中查看到，这种语法标准在编译时不需要符号表来协助解析。\"]},\"475\":{\"h\":\"1.2.5 语言的特性\",\"t\":[\"Go 语言从本质上（程序和结构方面）来实现并发编程。\",\"因为 Go 语言没有类和继承的概念，所以它和 Java 或 C++ 看起来并不相同。但是它通过接口 (interface) 的概念来实现多态性。Go 语言有一个清晰易懂的轻量级类型系统，在类型之间也没有层级之说。因此可以说这是一门混合型的语言。\",\"在传统的面向对象语言中，使用面向对象编程技术显得非常臃肿，它们总是通过复杂的模式来构建庞大的类型层级，这违背了编程语言应该提升生产力的宗旨。\",\"函数是 Go 语言中的基本构件，它们的使用方法非常灵活。在第六章，我们会看到 Go 语言在函数式编程方面的基本概念。\",\"Go 语言使用静态类型，所以它是类型安全的一门语言，加上通过构建到本地代码，程序的执行速度也非常快。\",\"作为强类型语言，隐式的类型转换是不被允许的，记住一条原则：让所有的东西都是显式的。\",\"Go 语言其实也有一些动态语言的特性（通过关键字 var），所以它对那些逃离 Java 和 .Net 世界而使用 Python、Ruby、PHP 和 JavaScript 的开发者们也具有很大的吸引力。\",\"Go 语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发运行 Windows 下运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go 语言做到了真正的国际化！\"]},\"476\":{\"h\":\"1.2.6 语言的用途\",\"t\":[\"Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。\",\"Go 语言一个非常好的目标就是实现所谓的复杂事件处理（CEP），这项技术要求海量并行支持，高度的抽象化和高性能。当我们进入到物联网时代，CEP 必然会成为人们关注的焦点。\",\"但是 Go 语言同时也是一门可以用于实现一般目标的语言，例如对于文本的处理，前端展现，甚至像使用脚本一样使用它。\",\"值得注意的是，因为垃圾回收和自动内存分配的原因，Go 语言不适合用来开发对实时性要求很高的软件。\",\"越来越多的谷歌内部的大型分布式应用程序都开始使用 Go 语言来开发，例如谷歌地球的一部分代码就是由 Go 语言完成的。\",\"如果你想知道一些其它组织使用 Go 语言开发的实际应用项目，你可以到 使用 Go 的组织 页面进行查看。出于隐私保护的考虑，许多公司的项目都没有展示在这个页面。我们将会在第 21 章 讨论到一个使用 Go 语言开发的大型存储区域网络 (SAN) 案例。\",\"在 Chrome 浏览器中内置了一款 Go 语言的编译器用于本地客户端 (NaCl)，这很可能会被用于在 Chrome OS 中执行 Go 语言开发的应用程序。\",\"Go 语言可以在 Intel 或 ARM 处理器上运行，因此它也可以在安卓系统下运行，例如 Nexus 系列的产品。\",\"在 Google App Engine 中使用 Go 语言：2011 年 5 月 5 日，官方发布了用于开发运行在 Google App Engine 上的 Web 应用的 Go SDK，在此之前，开发者们只能选择使用 Python 或者 Java。这主要是 David Symonds 和 Nigel Tao 努力的成果。目前最新的稳定版是基于 Go 1.4 的 SDK 1.9.18，于 2015 年 2 月 18 日发布。当前 Go 语言的稳定版本是 Go 1.4.2。\"]},\"477\":{\"h\":\"1.2.7 关于特性缺失\",\"t\":[\"许多能够在大多数面向对象语言中使用的特性 Go 语言都没有支持，但其中的一部分可能会在未来被支持。\",\"为了简化设计，不支持函数重载和操作符重载\",\"为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换\",\"Go 语言通过另一种途径实现面向对象设计（第 10-11 章）来放弃类和类型的继承\",\"尽管在接口的使用方面（第 11 章）可以实现类似变体类型的功能，但本身不支持变体类型\",\"不支持动态加载代码\",\"不支持动态链接库\",\"不支持泛型\",\"通过 recover() 和 panic() 来替代异常机制（第 13.2-13.3 节）\",\"不支持静态变量\",\"关于 Go 语言开发团队对于这些方面的讨论，你可以通过 Go 常见问题 页面查看。\"]},\"478\":{\"h\":\"1.2.8 使用 Go 语言编程\",\"t\":[\"如果你有其它语言的编程经历（面向对象编程语言，如：Java、C#、Object-C、Python、Ruby），在你进入到 Go 语言的世界之后，你将会像迷恋你的 X 语言一样无法自拔。Go 语言使用了与其它语言不同的设计模式，所以当你尝试将你的 X 语言的代码迁移到 Go 语言时，你将会非常失望，所以你需要从头开始，用 Go 的理念来思考。\",\"如果你在至高点使用 Go 的理念来重新审视和分析一个问题，你通常会找到一个适用于 Go 语言的优雅的解决方案。\"]},\"479\":{\"h\":\"1.2.9 小结\",\"t\":[\"这里列举一些 Go 语言的必杀技：\",\"简化问题，易于学习\",\"内存管理，简洁语法，易于使用\",\"快速编译，高效开发\",\"高效执行\",\"并发支持，轻松驾驭\",\"静态类型\",\"标准类库，规范统一\",\"易于部署\",\"文档全面\",\"免费开源\"]},\"480\":{\"h\":\"第 2 章：安装与运行环境\"},\"481\":{\"h\":\"2.1 平台与架构\",\"t\":[\"Go 语言开发团队开发了适用于以下操作系统的编译器：\",\"Linux\",\"FreeBSD\",\"Mac OS X（也称为 Darwin）\",\"目前有 2 个版本的编译器：Go 原生编译器 gc 和非原生编译器 gccgo，这两款编译器都是在类 Unix 系统下工作 。其中，gc 版本的编译器已经被移植到 Windows 平台上，并集成在主要发行版中，你也可以通过安装 MinGW 从而在 Windows 平台下使用 gcc 编译器。这两个编译器都是以单通道的形式工作。\",\"你可以获取以下平台上的 Go 1.4 源码和二进制文件：\",\"Linux 2.6+：amd64、386 和 arm 架构\",\"Mac OS X (Snow Leopard + Lion) ：amd64 和 386 架构\",\"Windows 2000+：amd64 和 386 架构\",\"对于非常底层的纯 Go 语言代码或者包而言，在各个操作系统平台上的可移植性是非常强的，只需要将源码拷贝到相应平台上进行编译即可，或者可以使用交叉编译来构建目标平台的应用程序（第 2.2 节）。但如果你打算使用 cgo 或者类似文件监控系统的软件，就需要根据实际情况进行相应地修改了。\",\"Go 原生编译器 gc：\",\"主要基于 Ken Thompson 先前在 Plan 9 操作系统上使用的 C 工具链。\",\"Go 语言的编译器和链接器都是使用 C 语言编写并产生本地代码，Go 不存在自我引导之类的功能。因此如果使用一个有不同指令集的编译器来构建 Go 程序，就需要针对操作系统和处理器架构（32 位操作系统或 64 位操作系统）进行区别对待。（ 译者注：Go 从 1.5 版本开始已经实现自举。Go 语言的编译器和链接器都是 Go 语言编写的）\",\"这款编译器使用非分代、无压缩和并行的方式进行编译，它的编译速度要比 gccgo 更快，产生更好的本地代码，但编译后的程序不能够使用 gcc 进行链接。\",\"编译器目前支持以下基于 Intel 或 AMD 处理器架构的程序构建。\",\"当你第一次看到这套命名系统的时候你会觉得很奇葩，不过这些命名都是来自于 Plan 9 项目。\",\"g = 编译器：将源代码编译为项目代码（程序文本） l = 链接器：将项目代码链接到可执行的二进制文件（机器代码） \",\"（相关的 C 编译器名称为 6c、8c 和 5c，相关的汇编器名称为 6a、8a 和 5a）\",\"标记 (Flags) 是指可以通过命令行设置可选参数来影响编译器或链接器的构建过程或得到一个特殊的目标结果。\",\"可用的编译器标记如下：\",\"flags: -I 针对包的目录搜索 -d 打印声明信息 -e 不限制错误打印的个数 -f 打印栈结构 -h 发生错误时进入恐慌（panic）状态 -o 指定输出文件名 // 详见第3.4节 -S 打印产生的汇编代码 -V 打印编译器版本 // 详见第2.3节 -u 禁止使用 unsafe 包中的代码 -w 打印归类后的语法解析树 -x 打印 lex tokens \",\"从 Go 1.0.3 版本开始，不再使用 8g，8l 之类的指令进行程序的构建，取而代之的是统一的 go build 和 go install 等命令，而这些指令会自动调用相关的编译器或链接器。\",\"如果你想获得更深层次的信息，你可以在目录 $GOROOT/src/cmd 下找到编译器和链接器的源代码。Go 语言本身是由 C 语言开发的，而不是 Go 语言（Go 1.5 开始自举）。词法分析程序是 GNU bison，语法分析程序是名为 $GOROOT/src/cmd/gc/go.y 的 yacc 文件，它会在同一目录输出 y.tab.{c,h} 文件。如果你想知道更多有关构建过程的信息，你可以在 $GOROOT/src/make.bash 中找到。\",\"大部分的目录都包含了名为 doc.go 的文件，这个文件提供了更多详细的信息。\",\"gccgo 编译器：\",\"一款相对于 gc 而言更加传统的编译器，使用 GCC 作为后端。GCC 是一款非常流行的 GNU 编译器，它能够构建基于众多处理器架构的应用程序。编译速度相对 gc 较慢，但产生的本地代码运行要稍微快一点。它同时也提供一些与 C 语言之间的互操作性。\",\"从 Go 1 版本开始，gc 和 gccgo 在编译方面都有等价的功能。\",\"文件扩展名与包 (package)：\",\"Go 语言源文件的扩展名很显然就是 .go。\",\"C 文件使用后缀名 .c，汇编文件使用后缀名 .s。所有的源代码文件都是通过包 (packages) 来组织。包含可执行代码的包文件在被压缩后使用扩展名 .a（AR 文档）。\",\"Go 语言的标准库（第 9.1 节）包文件在被安装后就是使用这种格式的文件。\",\"注意 当你在创建目录时，文件夹名称永远不应该包含空格，而应该使用下划线 \\\"_\\\" 或者其它一般符号代替。\"]},\"482\":{\"h\":\"2.2 Go 环境变量\",\"t\":[\"Go 开发环境依赖于一些操作系统环境变量，你最好在安装 Go 之前就已经设置好他们。如果你使用的是 Windows 的话，你完全不用进行手动设置，Go 将被默认安装在目录 c:/go 下。这里列举几个最为重要的环境变量：\",\"$GOROOT 表示 Go 在你的电脑上的安装位置，它的值一般都是 HOME/go，当然，你也可以安装在别的地方。\",\"$GOARCH 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。\",\"$GOOS 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。\",\"$GOBIN 表示编译器和链接器的安装位置，默认是GOROOT/bin，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。\",\"目标机器是指你打算运行你的 Go 应用程序的机器。\",\"Go 编译器支持交叉编译，也就是说你可以在一台机器上构建能够在不同操作系统和处理器架构上运行的应用程序，也就是说编写源代码的机器可以和目标机器有完全不同的特性（操作系统与处理器架构）。\",\"为了区分本地机器和目标机器，你可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置本地机器的操作系统名称和编译体系结构，这两个变量只有在进行交叉编译的时候才会用到，如果你不进行显示设置，他们的值会和本地机器（$GOOS 和 $GOARCH）一样。\",\"$GOPATH 默认采用和 GOROOT 一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。\",\"$GOARM 专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。\",\"$GOMAXPROCS 用于设置应用程序可使用的处理器个数与核数，详见 第 14.1.3 节。\",\"在接下来的章节中，我们将会讨论如何在 Linux、Mac OS X 和 Windows 上安装 Go 语言。在 FreeBSD 上的安装和 Linux 非常类似。开发团队正在尝试将 Go 语言移植到其它例如 OpenBSD、DragonFlyBSD、NetBSD、Plan 9、Haiku 和 Solaris 操作系统上，你可以在这个页面找到最近的动态：Go Porting Efforts。\"]},\"483\":{\"h\":\"2.3 在 Linux 上安装 Go\",\"t\":[\"如果你能够自己下载并编译 Go 的源代码的话,对你来说是非常有教育意义的，你可以根据这个页面找到安装指南和下载地址：Download the Go distribution。\",\"我们接下来也会带你一步步地完成安装过程。\",\"设置 Go 环境变量\",\"我们在 Linux 系统下一般通过文件 $HOME/.bashrc 配置自定义环境变量，根据不同的发行版也可能是文件 $HOME/.profile，然后使用 gedit 或 vi 来编辑文件内容。\",\"export GOROOT=$HOME/go \",\"为了确保相关文件在文件系统的任何地方都能被调用，你还需要添加以下内容：\",\"export PATH=$PATH:$GOROOT/bin \",\"在开发 Go 项目时，你还需要一个环境变量来保存你的工作目录。\",\"export GOPATH=$HOME/Applications/Go \",\"$GOPATH 可以包含多个工作目录，取决于你的个人情况。如果你设置了多个工作目录，那么当你在之后使用 go get（远程包安装命令）时远程包将会被安装在第一个目录下。\",\"在完成这些设置后，你需要在终端输入指令 source .bashrc 以使这些环境变量生效。然后重启终端，输入 go env 和 env 来检查环境变量是否设置正确。\",\"安装 C 工具\",\"Go 的工具链是用 C 语言编写的，因此在安装 Go 之前你需要先安装相关的 C 工具。如果你使用的是 Ubuntu 的话，你可以在终端输入以下指令（ 译者注：由于网络环境的特殊性，你可能需要将每个工具分开安装 ）。\",\"sudo apt-get install bison ed gawk gcc libc6-dev make \",\"你可以在其它发行版上使用 RPM 之类的工具。\",\"获取 Go 源代码\",\"从 官方页面 或 国内镜像 下载 Go 的源码包到你的计算机上，然后将解压后的目录 go 通过命令移动到 $GOROOT 所指向的位置。\",\"wget https://storage.googleapis.com/golang/go<VERSION>.src.tar.gz tar -zxvf go<VERSION>.src.tar.gz sudo mv go $GOROOT \",\"构建 Go\",\"在终端使用以下指令来进行编译工作。\",\"cd $GOROOT/src ./all.bash \",\"编译注意事项\",\"编译时如果出现如下报错：\",\"可能是因为 $GOROOT_BOOTSTRAP 变量没有设置。这个目录在安装 Go 1.5 版本及之后的版本时需要设置。\",\"由于在 1.4 版本后，Go 编译器实现了自举，即通过 1.4 版本来编译安装之后版本的编译器。如果不设置该环境变量的话，会产生这样一个错误 Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4. 。\",\"设置 $GOROOT_BOOTSTRAP 变量：\",\"export GOROOT_BOOTSTRAP=$HOME/go1.4 \",\"设置完成后，下载 1.4 版本的源码到该目录：\",\"git clone https://github.com/golang/go.git $HOME/go1.4 git checkout -b release-branch.go1.4 origin/release-branch.go1.4 \",\"进入 1.4 的文件夹后，进行编译：\",\"cd $HOME/go1.4/src ./make.bash \",\"1.4 编译安装好之后，进入 $GOROOT 文件夹，真正开始编译安装 Go：\",\"cd $HOME/go/src ./all.bash \",\"在完成编译之后（通常在 1 分钟以内，如果你在 B 型树莓派上编译，一般需要 1 个小时），你会在终端看到如下信息被打印：\",\"注意事项\",\"在测试 net/http 包时有一个测试会尝试连接 google.com，你可能会看到如下所示的一个无厘头的错误报告：\",\"‘make[2]: Leaving directory `/localusr/go/src/pkg/net’ \",\"如果你正在使用一个带有防火墙的机器，我建议你可以在编译过程中暂时关闭防火墙，以避免不必要的错误。\",\"解决这个问题的另一个办法是通过设置环境变量 $DISABLE_NET_TESTS 来告诉构建工具忽略 net/http 包的相关测试：\",\"export DISABLE_NET_TESTS=1 \",\"如果你完全不想运行包的测试，你可以直接运行 ./make.bash 来进行单纯的构建过程。\",\"测试安装\",\"使用你最喜爱的编辑器来输入以下内容，并保存为文件名 hello_world1.go。\",\"示例 2.1 hello_world1.go\",\"package main func main() { println(\\\"Hello\\\", \\\"world\\\") } \",\"切换相关目录到下，然后执行指令 go run hello_world1.go，将会打印信息：Hello, world。\",\"验证安装版本\",\"你可以通过在终端输入指令 go version 来打印 Go 的版本信息。\",\"如果你想要通过 Go 代码在运行时检测版本，可以通过以下例子实现。\",\"示例 2.2 version.go\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" ) func main() { fmt.Printf(\\\"%s\\\", runtime.Version()) } \",\"这段代码将会输出 go1.4.2 或类似字符串。\",\"更新版本\",\"你可以在 发布历史 页面查看到最新的稳定版。\",\"当前最新的稳定版 Go 1 系列于 2012 年 3 月 28 日发布。\",\"Go 的源代码有以下三个分支：\",\"- Go release：最新稳定版，实际开发最佳选择 - Go weekly：包含最近更新的版本，一般每周更新一次 - Go tip：永远保持最新的版本，相当于内测版 \",\"当你在使用不同的版本时，注意官方博客发布的信息，因为你所查阅的文档可能和你正在使用的版本不相符。\"]},\"484\":{\"h\":\"2.4 在 Mac OS X 上安装 Go\",\"t\":[\"如果你想要在你的 Mac 系统上安装 Go，则必须使用 Intel 64 位处理器，Go 不支持 PowerPC 处理器。\",\"你可以通过该页面查看有关在 PowerPC 处理器上的移植进度：https://codedr-go-ppc.googlecode.com/hg/。\",\"注意事项\",\"在 Mac 系统下使用到的 C 工具链是 Xcode 的一部分，因此你需要通过安装 Xcode 来完成这些工具的安装。你并不需要安装完整的 Xcode，而只需要安装它的命令行工具部分。\",\"你可以在 下载页面 页面下载到 Mac 系统下的一键安装包或源代码自行编译。\",\"通过源代码编译安装的过程与环境变量的配置与在 Linux 系统非常相似，因此不再赘述。\"]},\"485\":{\"h\":\"2.5 在 Windows 上安装 Go\",\"t\":[\"你可以在 下载页面 页面下载到 Windows 系统下的一键安装包。\",\"前期的 Windows 移植工作由 Hector Chu 完成，但目前的发行版已经由 Joe Poirier 全职维护。\",\"在完成安装包的安装之后，你只需要配置 $GOPATH 这一个环境变量就可以开始使用 Go 语言进行开发了，其它的环境变量安装包均会进行自动设置。在默认情况下，Go 将会被安装在目录 c:\\\\go 下，但如果你在安装过程中修改安装目录，则可能需要手动修改所有的环境变量的值。\",\"如果你想要测试安装，则可以使用指令 go run 运行 hello_world1.go。\",\"如果发生错误 fatal error: can’t find import: fmt 则说明你的环境变量没有配置正确。\",\"如果你想要在 Windows 下使用 cgo （调用 C 语言写的代码），则需要安装 MinGW，一般推荐安装 TDM-GCC。如果你使用的是 64 位操作系统，请务必安装 64 位版本的 MinGW。安装完成进行环境变量等相关配置即可使用。\",\"在 Windows 下运行在虚拟机里的 Linux 系统上安装 Go：\",\"如果你想要在 Windows 下的虚拟机里的 Linux 系统上安装 Go，你可以选择使用虚拟机软件 VMware，下载 VMware player，搜索并下载一个你喜欢的 Linux 发行版镜像，然后安装到虚拟机里，安装 Go 的流程参考第 2.3 节中的内容。\"]},\"486\":{\"h\":\"2.6 安装目录清单\",\"t\":[\"你的 Go 安装目录 ($GOROOT) 的文件夹结构应该如下所示：\",\"README.md, AUTHORS, CONTRIBUTORS, LICENSE\",\"/bin：包含可执行文件，如：编译器，Go 工具\",\"/doc：包含文档模版\",\"/lib：包含示例程序，代码工具，本地文档等\",\"/misc：包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例\",\"/os_arch：包含标准库的包的对象文件 (.a)\",\"/src：包含源代码构建脚本和标准库的包的完整源代码（Go 是一门开源语言）\",\"/src/cmd：包含 Go 和 C 的编译器和命令行脚本\"]},\"487\":{\"h\":\"2.7 Go 运行时 (runtime)\",\"t\":[\"尽管 Go 编译器产生的是本地可执行代码，这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 10.8 节）、栈处理、goroutine、channel、切片 (slice)、map 和反射 (reflection) 等等。\",\"runtime 主要由 C 语言编写（Go 1.5 开始自举），并且是每个 Go 包的最顶级包。你可以在目录 $GOROOT/src/runtime 中找到相关内容。\",\"垃圾回收器 Go 拥有简单却高效的标记-清除回收器。它的主要思想来源于 IBM 的可复用垃圾回收器，旨在打造一个高效、低延迟的并发回收器。目前 gccgo 还没有回收器，同时适用 gc 和 gccgo 的新回收器正在研发中。使用一门具有垃圾回收功能的编程语言不代表你可以避免内存分配所带来的问题，分配和回收内容都是消耗 CPU 资源的一种行为。\",\"Go 的可执行文件都比相对应的源代码文件要大很多，这恰恰说明了 Go 的 runtime 嵌入到了每一个可执行文件当中。当然，在部署到数量巨大的集群时，较大的文件体积也是比较头疼的问题。但总的来说，Go 的部署工作还是要比 Java 和 Python 轻松得多。因为 Go 不需要依赖任何其它文件，它只需要一个单独的静态文件，这样你也不会像使用其它语言一样在各种不同版本的依赖文件之间混淆。\"]},\"488\":{\"h\":\"2.8 Go 解释器\",\"t\":[\"因为 Go 具有像动态语言那样快速编译的能力，自然而然地就有人会问 Go 语言能否在 REPL (read-eval-print loop) 编程环境下实现。Sebastien Binet 已经使用这种环境实现了一个 Go 解释器，你可以在这个页面找到：https://github.com/sbinet/igo。\"]},\"489\":{\"h\":\"第 3 章：编辑器、集成开发环境与其它工具\",\"t\":[\"因为 Go 语言还是一门相对年轻的编程语言，所以不管是在集成开发环境 (IDE) 还是相关的插件方面，发展都不是很成熟。不过目前还是有一些 IDE 能够较好地支持 Go 的开发，有些开发工具甚至是跨平台的，你可以在 Linux、Mac OS X 或者 Windows 下工作。\",\"你可以通过查阅 编辑器和 IDE 扩展 页面来获取 Go 开发工具的最新信息。\"]},\"490\":{\"h\":\"3.1 Go 开发环境的基本要求\",\"t\":[\"这里有一个可以用来开发 Go 的集成开发环境，你期待有以下哪些特性，从而替代你使用文本编辑器写代码和命令行编译与链接程序的方式？\",\"语法高亮是必不可少的功能，这也是每个开发工具都提供配置文件来实现自定义配置的原因。\",\"可以自动保存代码，至少在每次编译前都会保存。\",\"可以显示代码所在的行数。\",\"拥有较好的项目文件纵览和导航能力，可以同时编辑多个源文件并设置书签，能够匹配括号，能够跳转到某个函数或类型的定义部分。\",\"完美的查找和替换功能，替换之前最好还能预览结果。\",\"可以注释或取消注释选中的一行或多行代码。\",\"当有编译错误时，双击错误提示可以跳转到发生错误的位置。\",\"跨平台，能够在 Linux、Mac OS X 和 Windows 下工作，这样就可以专注于一个开发环境。\",\"最好是免费的，不过有些开发者还是希望能够通过支付一定金额以获得更好的开发环境。\",\"最好是开源的。\",\"能够通过插件架构来轻易扩展和替换某个功能。\",\"尽管集成开发环境本身就是非常复杂的，但一定要让人感觉操作方便。\",\"能够通过代码模版来简化编码过程从而提升编码速度。\",\"使用 Go 项目的概念来浏览和管理项目中的文件，同时还要拥有构建系统的概念，这样才能更加方便的构建、清理或运行我们建立的程序或项目。构建出的程序需要能够通过命令行或 IDE 内部的控制台运行。\",\"拥有断点、检查变量值、单步执行、逐过程执行标识库中代码的能力。\",\"能够方便的存取最近使用过的文件或项目。\",\"拥有对包、类型、变量、函数和方法的智能代码补全的功能。\",\"能够对项目或包中的代码建立抽象语法树视图 (AST-view)。\",\"内置 Go 的相关工具。\",\"能够方便完整地查阅 Go 文档。\",\"能够方便地在不同的 Go 环境之间切换。\",\"能够导出不同格式的代码文件，如：PDF，HTML 或格式化后的代码。\",\"针对一些特定的项目有项目模板，如：Web 应用，App Engine 项目，从而能够更快地开始开发工作。\",\"具备代码重构的能力。\",\"集成像 hg 或 git 这样的版本控制工具。\",\"集成 Google App Engine 开发及调试的功能。\"]},\"491\":{\"h\":\"3.2 编辑器和集成开发环境\",\"t\":[\"这些编辑器包含了代码高亮和其它与 Go 有关的一些使用工具：Emacs、Vim、Xcode 6、KD Kate、TextWrangler、BBEdit、McEdit、TextMate、TextPad、JEdit、SciTE、Nano、Notepad++、Geany、SlickEdit、Visual Studio Code、IntelliJ IDEA 和 Sublime Text 2。\",\"你可以将 Linux 的文本编辑器 GEdit 改造成一个很好的 Go 开发工具。\",\"Sublime Text 是一个革命性的跨平台 (Linux、Mac OS X、Windows)文本编辑器，它支持编写非常多的编程语言代码。对于 Go 而言，它有一个插件叫做 GoSublime 来支持代码补全和代码模版。\",\"这里还有一些更加高级的 Go 开发工具，其中一些是以插件的形式利用本身是作为开发 Java 的工具。\",\"IntelliJ Idea Plugin 是一个 IntelliJ IDEA 的插件，具有很好的操作体验和代码补全功能。\",\"LiteIDE 这是一款专门针对 Go 开发的集成开发环境，在编辑、编译和运行 Go 程序和项目方面都有非常好的支持。同时还包括了对源代码的抽象语法树视图和一些内置工具（此开发环境由国人 vfc 大叔开发）。\",\"GoClipse 是一款 Eclipse IDE 的插件，拥有非常多的特性以及通过 GoCode 来实现代码补全功能。\",\"如果你对集成开发环境都不是很熟悉，那就使用 LiteIDE 吧，另外使用 GoClipse 或者 IntelliJ Idea Plugin 也是不错的选择。\",\"代码补全 一般都是通过内置 GoCode 实现的（如：LieteIDE、GoClipse），如果需要手动安装 GoCode，在命令行输入指令 go get -u github.com/nsf/gocode 即可（务必事先配置好 Go 环境变量） 。\",\"接下来会对这三个集成开发环境做更加详细的说明。\"]},\"492\":{\"h\":\"3.2.1 LiteIDE\",\"t\":[\"这款 IDE 的当前最新版本号为 X27，你可以从 GitHub 页面获取详情。\",\"LiteIDE 是一款非常好用的轻量级 Go 集成开发环境（基于 QT、Kate 和 SciTE），包含了跨平台开发及其它必要的特性，对代码编写、自动补全和运行调试都有极佳的支持。它采用了 Go 项目的概念来对项目文件进行浏览和管理，它还支持在各个 Go 开发环境之间随意切换以及交叉编译的功能。\",\"同时，它具备了抽象语法树视图的功能，可以清楚地纵览项目中的常量、变量、函数、不同类型以及他们的属性和方法。\",\"图 3.1 LiteIDE 代码编辑界面和抽象语法树视图\"]},\"493\":{\"h\":\"3.2.2 GoClipse\",\"t\":[\"该款插件的当前最新版本号为 0.9.1，你可以从 GitHub 页面获取详情。\",\"其依附于著名的 Eclipse 这个大型开发环境，虽然需要安装 JVM 运行环境，但却可以很容易地享有 Eclipse 本身所具有的诸多功能。这是一个非常好的编辑器，完善的代码补全、抽象语法树视图、项目管理和程序调试功能。\",\"图 3.2 GoClipse 代码编辑界面、抽象语法树视图和项目管理\"]},\"494\":{\"h\":\"3.3 调试器\",\"t\":[\"应用程序的开发过程中调试是必不可少的一个环节，因此有一个好的调试器是非常重要的，可惜的是，Go 在这方面的发展还不是很完善。目前可用的调试器是 gdb，最新版均以内置在集成开发环境 LiteIDE 和 GoClipse 中，但是该调试器的调试方式并不灵活且操作难度较大。\",\"如果你不想使用调试器，你可以按照下面的一些有用的方法来达到基本调试的目的：\",\"在合适的位置使用打印语句输出相关变量的值（print/println 和 fmt.Print/fmt.Println/fmt.Printf）。\",\"在 fmt.Printf 中使用下面的说明符来打印有关变量的相关信息：\",\"%+v 打印包括字段在内的实例的完整信息\",\"%#v 打印包括字段和限定类型名称在内的实例的完整信息\",\"%T 打印某个类型的完整说明\",\"使用 panic() 语句（第 13.2 节）来获取栈跟踪信息（直到 panic() 时所有被调用函数的列表）。\",\"使用关键字 defer 来跟踪代码执行过程（第 6.4 节）。\"]},\"495\":{\"h\":\"3.4 构建并运行 Go 程序\",\"t\":[\"在大多数 IDE 中，每次构建程序之前都会自动调用源码格式化工具 gofmt 并保存格式化后的源文件。如果构建成功则不会输出任何信息，而当发生编译时错误时，则会指明源码中具体第几行出现了什么错误，如：a declared and not used。一般情况下，你可以双击 IDE 中的错误信息直接跳转到发生错误的那一行。\",\"如果程序执行一切顺利并成功退出后，将会在控制台输出 Program exited with code 0。\",\"从 Go 1 版本开始，使用 Go 自带的更加方便的工具来构建应用程序：\",\"go build 编译自身包和依赖包\",\"go install 编译并安装自身包和依赖包\"]},\"496\":{\"h\":\"3.5 格式化代码\",\"t\":[\"Go 开发团队不想要 Go 语言像许多其它语言那样总是在为代码风格而引发无休止的争论，浪费大量宝贵的开发时间，因此他们制作了一个工具：go fmt (gofmt)。这个工具可以将你的源代码格式化成符合官方统一标准的风格，属于语法风格层面上的小型重构。遵循统一的代码风格是 Go 开发中无可撼动的铁律，因此你必须在编译或提交版本管理系统之前使用 gofmt 来格式化你的代码。\",\"尽管这种做法也存在一些争论，但使用 gofmt 后你不再需要自成一套代码风格而是和所有人使用相同的规则。这不仅增强了代码的可读性，而且在接手外部 Go 项目时，可以更快地了解其代码的含义。此外，大多数开发工具也都内置了这一功能。\",\"Go 对于代码的缩进层级方面使用 tab 还是空格并没有强制规定，一个 tab 可以代表 4 个或 8 个空格。在实际开发中，1 个 tab 应该代表 4 个空格，而在本身的例子当中，每个 tab 代表 8 个空格。至于开发工具方面，一般都是直接使用 tab 而不替换成空格。\",\"在命令行输入 gofmt –w program.go 会格式化该源文件的代码然后将格式化后的代码覆盖原始内容（如果不加参数 -w 则只会打印格式化后的结果而不重写文件）；gofmt -w *.go 会格式化并重写所有 Go 源文件；gofmt map1 会格式化并重写 map1 目录及其子目录下的所有 Go 源文件。\",\"gofmt 也可以通过在参数 -r 后面加入用双引号括起来的替换规则实现代码的简单重构，规则的格式：<原始内容> -> <替换内容>。\",\"实例：\",\"gofmt -r '(a) -> a' –w *.go \",\"上面的代码会将源文件中没有意义的括号去掉。\",\"gofmt -r 'a[n:len(a)] -> a[n:]' –w *.go \",\"上面的代码会将源文件中多余的 len(a) 去掉。（ 译者注：了解切片 (slice) 之后就明白这为什么是多余的了 ）\",\"gofmt –r 'A.Func1(a,b) -> A.Func2(b,a)' –w *.go \",\"上面的代码会将源文件中符合条件的函数的参数调换位置。\",\"如果想要了解有关 gofmt 的更多信息，请访问该页面：http://golang.org/cmd/gofmt/。\"]},\"497\":{\"h\":\"3.6 生成代码文档\",\"t\":[\"godoc 工具会从 Go 程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档。\",\"它也可以作为一个提供在线文档浏览的 web 服务器，http://golang.org 就是通过这种形式实现的。\",\"一般用法\",\"go doc package 获取包的文档注释，例如：go doc fmt 会显示使用 godoc 生成的 fmt 包的文档注释。\",\"go doc package/subpackage 获取子包的文档注释，例如：go doc container/list。\",\"go doc package function 获取某个函数在某个包中的文档注释，例如：go doc fmt Printf 会显示有关 fmt.Printf() 的使用说明。\",\"这个工具只能获取在 Go 安装目录下 ../go/src 中的注释内容。此外，它还可以作为一个本地文档浏览 web 服务器。在命令行输入 godoc -http=:6060，然后使用浏览器打开 http://localhost:6060 后，你就可以看到本地文档浏览服务器提供的页面。\",\"godoc 也可以用于生成非标准库的 Go 源码文件的文档注释（第 9.6 章）。\",\"如果想要获取更多有关 godoc 的信息，请访问该页面：http://golang.org/cmd/godoc/（在线版的第三方包 godoc 可以使用 Go Walker）。\"]},\"498\":{\"h\":\"3.7 其它工具\",\"t\":[\"Go 自带的工具集主要使用脚本和 Go 语言自身编写的，目前版本的 Go 实现了以下三个工具：\",\"go install 是安装 Go 包的工具，类似 Ruby 中的 rubygems。主要用于安装非标准库的包文件，将源代码编译成对象文件。\",\"go fix 用于将你的 Go 代码从旧的发行版迁移到最新的发行版，它主要负责简单的、重复的、枯燥无味的修改工作，如果像 API 等复杂的函数修改，工具则会给出文件名和代码行数的提示以便让开发人员快速定位并升级代码。Go 开发团队一般也使用这个工具升级 Go 内置工具以及 谷歌内部项目的代码。go fix 之所以能够正常工作是因为 Go 在标准库就提供生成抽象语法树和通过抽象语法树对代码进行还原的功能。该工具会尝试更新当前目录下的所有 Go 源文件，并在完成代码更新后在控制台输出相关的文件名称。\",\"go test 是一个轻量级的单元测试框架（第 13 章）。\"]},\"499\":{\"h\":\"3.8 Go 性能说明\",\"t\":[\"根据 Go 开发团队和基本的算法测试，Go 语言与 C 语言的性能差距大概在 10%~20% 之间（ 译者注：由于出版时间限制，该数据应为 2013 年 3 月 28 日之前产生 ）。虽然没有官方的性能标准，但是与其它各个语言相比已经拥有非常出色的表现。\",\"如果说 Go 语言的执行效率大约比 C++ 慢 20% 也许更有实际意义。保守估计在相同的环境和执行目标的情况下，Go 程序比 Java 或 Scala 应用程序要快上 2 倍，并比这两门语言占用的内存降低了 70% 。在很多情况下这种比较是没有意义的，而像谷歌这样拥有成千上万台服务器的公司都抛弃 C++ 而开始将 Go 用于生产环境才足够说明它本身所具有的优势。\",\"时下流行的语言大都是运行在虚拟机上，如：Java 和 Scala 使用的 JVM，C# 和 VB.NET 使用的 .NET CLR。尽管虚拟机的性能已经有了很大的提升，但任何使用 JIT 编译器和脚本语言解释器的编程语言（Ruby、Python、Perl 和 JavaScript）在 C 和 C++ 的绝对优势下甚至都无法在性能上望其项背。\",\"如果说 Go 比 C++ 要慢 20%，那么 Go 就要比任何非静态和编译型语言快 2 到 10 倍，并且能够更加高效地使用内存。\",\"其实比较多门语言之间的性能是一种非常猥琐的行为，因为任何一种语言都有其所擅长和薄弱的方面。例如在处理文本方面，那些只处理纯字节的语言显然要比处理 Unicode 这种更为复杂编码的语言要出色的多。有些人可能认为使用两种不同的语言实现同一个目标能够得出正确的结论，但是很多时候测试者可能对一门语言非常了解而对另一门语言只是大概明白，测试者对程序编写的手法在一定程度也会影响结果的公平性，因此测试程序应该分别由各自语言的擅长者来编写，这样才能得到具有可比性的结果。另外，像在统计学方面，人们很难避免人为因素对结果的影响，所以这在严格意义上并不是科学。还要注意的是，测试结果的可比性还要根据测试目标来区别，例如很多发展十多年的语言已经针对各类问题拥有非常成熟的类库，而作为一门新生语言的 Go 语言，并没有足够的时间来推导各类问题的最佳解决方案。如果你想获取更多有关性能的资料，请访问 Computer Language Benchmark Game（详见引用 27）。\",\"这里有一些评测结果：\",\"比较 Go 和 Python 在简单的 web 服务器方面的性能，单位为传输量每秒：\",\"原生的 Go http 包要比 web.py 快 7 至 8 倍，如果使用 web.go 框架则稍微差点，比 web.py 快 6 至 7 倍。在 Python 中被广泛使用的 tornado 异步服务器和框架在 web 环境下要比 web.py 快很多，Go 大概只比它快 1.2 至 1.5 倍（详见引用 26）。\",\"Go 和 Python 在一般开发的平均水平测试中，Go 要比 Python 3 快 25 倍左右，少占用三分之二的内存，但比 Python 大概多写一倍的代码（详见引用 27）。\",\"根据 Robert Hundt（2011 年 6 月，详见引用 28）的文章对 C++、Java、Go 和 Scala，以及 Go 开发团队的反应（详见引用 29），可以得出以下结论：\",\"Go 和 Scala 之间具有更多的可比性（都使用更少的代码），而 C++ 和 Java 都使用非常冗长的代码。\",\"Go 的编译速度要比绝大多数语言都要快，比 Java 和 C++ 快 5 至 6 倍，比 Scala 快 10 倍。\",\"Go 的二进制文件体积是最大的（每个可执行文件都包含 runtime）。\",\"在最理想的情况下，Go 能够和 C++ 一样快，比 Scala 快 2 至 3 倍，比 Java 快 5 至 10 倍。\",\"Go 在内存管理方面也可以和 C++ 相媲美，几乎只需要 Scala 所使用的一半，是 Java 的五分之一左右。\"]},\"500\":{\"h\":\"3.9 与其它语言进行交互\"},\"501\":{\"h\":\"3.9.1 与 C 进行交互\",\"t\":[\"工具 cgo 提供了对 FFI（外部函数接口）的支持，能够使用 Go 代码安全地调用 C 语言库，你可以访问 cgo 文档主页：http://golang.org/cmd/cgo。cgo 会替代 Go 编译器来产生可以组合在同一个包中的 Go 和 C 代码。在实际开发中一般使用 cgo 创建单独的 C 代码包。\",\"如果你想要在你的 Go 程序中使用 cgo，则必须在单独的一行使用 import \\\"C\\\" 来导入，一般来说你可能还需要 import \\\"unsafe\\\"。\",\"然后，你可以在 import \\\"C\\\" 之前使用注释（单行或多行注释均可）的形式导入 C 语言库（甚至有效的 C 语言代码），它们之间没有空行，例如：\",\"// #include <stdio.h> // #include <stdlib.h> import \\\"C\\\" \",\"名称 \\\"C\\\" 并不属于标准库的一部分，这只是 cgo 集成的一个特殊名称用于引用 C 的命名空间。在这个命名空间里所包含的 C 类型都可以被使用，例如 C.uint、C.long 等等，还有 libc 中的函数 C.random() 等也可以被调用。\",\"当你想要使用某个类型作为 C 中函数的参数时，必须将其转换为 C 中的类型，反之亦然，例如：\",\"var i int C.uint(i) // 从 Go 中的 int 转换为 C 中的无符号 int int(C.random()) // 从 C 中 random() 函数返回的 long 转换为 Go 中的 int \",\"下面的 2 个 Go 函数 Random() 和 Seed() 分别调用了 C 中的 C.random() 和 C.srandom()。\",\"示例 3.2 c1.go\",\"package rand // #include <stdlib.h> import \\\"C\\\" func Random() int { return int(C.random()) } func Seed(i int) { C.srandom(C.uint(i)) } \",\"C 当中并没有明确的字符串类型，如果你想要将一个 string 类型的变量从 Go 转换到 C 时，可以使用 C.CString(s)；同样，可以使用 C.GoString(cs) 从 C 转换到 Go 中的 string 类型。\",\"Go 的内存管理机制无法管理通过 C 代码分配的内存。\",\"开发人员需要通过手动调用 C.free 来释放变量的内存：\",\"defer C.free(unsafe.Pointer(Cvariable)) \",\"这一行最好紧跟在使用 C 代码创建某个变量之后，这样就不会忘记释放内存了。下面的代码展示了如何使用 cgo 创建变量、使用并释放其内存：\",\"示例 3.3 c2.go\",\"package print // #include <stdio.h> // #include <stdlib.h> import \\\"C\\\" import \\\"unsafe\\\" func Print(s string) { cs := C.CString(s) defer C.free(unsafe.Pointer(cs)) C.fputs(cs, (*C.FILE)(C.stdout)) } \",\"构建 cgo 包\",\"你可以在使用将会在第 9.5 节讲到的 Makefile 文件（因为我们使用了一个独立的包），除了使用变量 GOFILES 之外，还需要使用变量 CGOFILES 来列出需要使用 cgo 编译的文件列表。例如，示例 3.2 中的代码就可以使用包含以下内容的 Makefile 文件来编译，你可以使用 gomake 或 make：\",\"include $(GOROOT)/src/Make.inc TARG=rand CGOFILES=\\\\ c1.go\\\\ include $(GOROOT)/src/Make.pkg \"]},\"502\":{\"h\":\"3.9.2 与 C++ 进行交互\",\"t\":[\"SWIG（简化封装器和接口生成器）支持在 Linux 系统下使用 Go 代码调用 C 或者 C++ 代码。这里有一些使用 SWIG 的注意事项：\",\"编写需要封装的库的 SWIG 接口。\",\"SWIG 会产生 C 的存根函数。\",\"这些库可以使用 cgo 来调用。\",\"相关的 Go 文件也可以被自动生成。\",\"这类接口支持方法重载、多重继承以及使用 Go 代码实现 C++ 的抽象类。\",\"目前使用 SWIG 存在的一个问题是它无法支持所有的 C++ 库，比如说它就无法解析 TObject.h。\"]},\"503\":{\"h\":\"第 4 章：基本结构和基本数据类型\"},\"504\":{\"h\":\"4.1 文件名、关键字与标识符\",\"t\":[\"Go 的源文件以 .go 为后缀名存储在计算机中，这些文件名均由小写字母组成，如 scanner.go 。如果文件名由多个部分组成，则使用下划线 _ 对它们进行分隔，如 scanner_test.go 。文件名不包含空格或其他特殊字符。\",\"一个源文件可以包含任意多行的代码，Go 本身没有对源文件的大小进行限制。\",\"你会发现在 Go 代码中的几乎所有东西都有一个名称或标识符。另外，Go 语言也是区分大小写的，这与 C 家族中的其它语言相同。有效的标识符必须以字母（可以使用任何 UTF-8 编码的字符或 _）开头，然后紧跟着 0 个或多个字符或 Unicode 数字，如：X56、group1、_x23、i、өԑ12。\",\"以下是无效的标识符：\",\"1ab（以数字开头）\",\"case（Go 语言的关键字）\",\"a+b（运算符是不允许的）\",\"_ 本身就是一个特殊的标识符，被称为空白标识符。它可以像其他标识符那样用于变量的声明或赋值（任何类型都可以赋值给它），但任何赋给这个标识符的值都将被抛弃，因此这些值不能在后续的代码中使用，也不可以使用这个标识符作为变量对其它变量进行赋值或运算。\",\"在编码过程中，你可能会遇到没有名称的变量、类型或方法。虽然这不是必须的，但有时候这样做可以极大地增强代码的灵活性，这些变量被统称为匿名变量。\",\"下面列举了 Go 代码中会使用到的 25 个关键字或保留字：\",\"break\",\"default\",\"func\",\"interface\",\"select\",\"case\",\"defer\",\"go\",\"map\",\"struct\",\"chan\",\"else\",\"goto\",\"package\",\"switch\",\"const\",\"fallthrough\",\"if\",\"range\",\"type\",\"continue\",\"for\",\"import\",\"return\",\"var\",\"之所以刻意地将 Go 代码中的关键字保持的这么少，是为了简化在编译过程第一步中的代码解析。和其它语言一样，关键字不能够作标识符使用。\",\"除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数（第 6.5 节），它们的作用都将在接下来的章节中进行进一步地讲解。\",\"append\",\"bool\",\"byte\",\"cap\",\"close\",\"complex\",\"complex64\",\"complex128\",\"uint16\",\"copy\",\"false\",\"float32\",\"float64\",\"imag\",\"int\",\"int8\",\"int16\",\"uint32\",\"int32\",\"int64\",\"iota\",\"len\",\"make\",\"new\",\"nil\",\"panic\",\"uint64\",\"print\",\"println\",\"real\",\"recover\",\"string\",\"true\",\"uint\",\"uint8\",\"uintptr\",\"程序一般由关键字、常量、变量、运算符、类型和函数组成。\",\"程序中可能会使用到这些分隔符：括号 ()，中括号 [] 和大括号 {}。\",\"程序中可能会使用到这些标点符号：.、,、;、: 和 …。\",\"程序的代码通过语句来实现结构化。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。\",\"如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分，但在实际开发中我们并不鼓励这种做法。\"]},\"505\":{\"h\":\"4.2 Go 程序的基本结构和要素\",\"t\":[\"示例 4.1 hello_world.go\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello, world\\\") } \"]},\"506\":{\"h\":\"4.2.1 包的概念、导入与可见性\",\"t\":[\"包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。\",\"如同其它一些编程语言中的类库或命名空间的概念，每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 .go 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。\",\"你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main 表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。\",\"一个应用程序可以包含不同的包，而且即使你只使用 main 包也不必把所有的代码都写在一个巨大的文件里：你可以用一些较小的文件，并且在每个文件非注释的第一行都使用 package main 来指明这些文件都属于 main 包。如果你打算编译包名不是为 main 的源文件，如 pack1，编译后产生的对象文件将会是 pack1.a 而不是可执行程序。另外要注意的是，所有的包名都应该使用小写字母。\",\"标准库\",\"在 Go 的安装文件里包含了一些可以直接使用的包，即标准库。在 Windows 下，标准库的位置在 Go 根目录下的子目录 pkg\\\\windows_386 中；在 Linux 下，标准库在 Go 根目录下的子目录 pkg\\\\linux_amd64 中（如果是安装的是 32 位，则在 linux_386 目录中）。一般情况下，标准包会存放在 $GOROOT/pkg/$GOOS_$GOARCH/ 目录下。\",\"Go 的标准库包含了大量的包（如：fmt 和 os），但是你也可以创建自己的包（第 9 章）。\",\"如果想要构建一个程序，则包和包内的文件都必须以正确的顺序进行编译。包的依赖关系决定了其构建顺序。\",\"属于同一个包的源文件必须全部被一起编译，一个包即是编译时的一个单元，因此根据惯例，每个目录都只包含一个包。\",\"如果对一个包进行更改或重新编译，所有引用了这个包的客户端程序都必须全部重新编译。\",\"Go 中的包模型采用了显式依赖关系的机制来达到快速编译的目的，编译器会从后缀名为 .o 的对象文件（需要且只需要这个文件）中提取传递依赖类型的信息。\",\"如果 A.go 依赖 B.go，而 B.go 又依赖 C.go：\",\"编译 C.go, B.go, 然后是 A.go.\",\"为了编译 A.go, 编译器读取的是 B.o 而不是 C.o.\",\"这种机制对于编译大型的项目时可以显著地提升编译速度。\",\"每一段代码只会被编译一次\",\"一个 Go 程序是通过 import 关键字将一组包链接在一起。\",\"import \\\"fmt\\\" 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。包名被封闭在半角双引号 \\\"\\\" 中。如果你打算从已编译的包中导入并加载公开声明的方法，不需要插入已编译包的源代码。\",\"如果需要多个包，它们可以被分别导入：\",\"import \\\"fmt\\\" import \\\"os\\\" \",\"或：\",\"import \\\"fmt\\\"; import \\\"os\\\" \",\"但是还有更短且更优雅的方法（被称为因式分解关键字，该方法同样适用于 const、var 和 type 的声明或定义）：\",\"import ( \\\"fmt\\\" \\\"os\\\" ) \",\"它甚至还可以更短的形式，但使用 gofmt 后将会被强制换行：\",\"import (\\\"fmt\\\"; \\\"os\\\") \",\"当你导入多个包时，最好按照字母顺序排列包名，这样做更加清晰易读。\",\"如果包名不是以 . 或 / 开头，如 \\\"fmt\\\" 或者 \\\"container/list\\\"，则 Go 会在全局文件进行查找；如果包名以 ./ 开头，则 Go 会在相对目录中查找；如果包名以 / 开头（在 Windows 下也可以这样使用），则会在系统的绝对路径中查找。\",\"译者注：以相对路径在 GOPATH 下导入包会产生报错信息\",\"报错信息：local import \\\"./XXX\\\" in non-local package\",\"引用：Go programs cannot use relative import paths within a work space.\",\"注解：在 GOPATH 外可以以相对路径的形式执行 go build（go install 不可以）\",\"导入包即等同于包含了这个包的所有的代码对象。\",\"除了符号 _，包中所有代码对象的标识符必须是唯一的，以避免名称冲突。但是相同的标识符可以在不同的包中使用，因为可以使用包名来区分它们。\",\"包通过下面这个被编译器强制执行的规则来决定是否将自身的代码对象暴露给外部文件：\",\"可见性规则\",\"当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是它们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。\",\"（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。\",\"因此，在导入一个外部包后，能够且只能够访问该包中导出的对象。\",\"假设在包 pack1 中我们有一个变量或函数叫做 Thing（以 T 开头，所以它能够被导出），那么在当前包中导入 pack1 包，Thing 就可以像面向对象语言那样使用点标记来调用：pack1.Thing（pack1 在这里是不可以省略的）。\",\"因此包也可以作为命名空间使用，帮助避免命名冲突（名称冲突）：两个包中的同名变量的区别在于它们的包名，例如 pack1.Thing 和 pack2.Thing。\",\"你可以通过使用包的别名来解决包名之间的名称冲突，或者说根据你的个人喜好对包名进行重新设置，如：import fm \\\"fmt\\\"。下面的代码展示了如何使用包的别名：\",\"示例 4.2 alias.go\",\"package main import fm \\\"fmt\\\" // alias3 func main() { fm.Println(\\\"hello, world\\\") } \",\"注意事项\",\"如果你导入了一个包却没有使用它，则会在构建程序时引发错误，如 imported and not used: os，这正是遵循了 Go 的格言：“没有不必要的代码！”。\",\"包的分级声明和初始化\",\"你可以在使用 import 导入包之后定义或声明 0 个或多个常量 (const)、变量 (var) 和类型 (type)，这些对象的作用域都是全局的（在本包范围内），所以可以被本包中所有的函数调用（如 gotemplate.go 源文件中的 c 和 v），然后声明一个或多个函数 (func)。\"]},\"507\":{\"h\":\"4.2.2 函数\",\"t\":[\"这是定义一个函数最简单的格式：\",\"func functionName() \",\"你可以在括号 () 中写入 0 个或多个函数的参数（使用逗号 , 分隔），每个参数的名称后面必须紧跟着该参数的类型。\",\"main() 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。如果你的 main 包的源代码没有包含 main() 函数，则会引发构建错误 undefined: main.main。main() 函数既没有参数，也没有返回类型（与 C 家族中的其它语言恰好相反）。如果你不小心为 main() 函数添加了参数或者返回类型，将会引发构建错误：\",\"func main must have no arguments and no return values results. \",\"在程序开始执行并完成初始化后，第一个调用（程序的入口点）的函数是 main.main()（如：C 语言），该函数一旦返回就表示程序已成功执行并立即退出。\",\"函数里的代码（函数体）使用大括号 {} 括起来。\",\"左大括号 { 必须与方法的声明放在同一行，这是编译器的强制规定，否则你在使用 gofmt 时就会出现错误提示：\",\"`build-error: syntax error: unexpected semicolon or newline before {` \",\"（这是因为编译器会产生 func main() ; 这样的结果，很明显这是错误的）\",\"Go 语言虽然看起来不使用分号作为语句的结束，但实际上这一过程是由编译器自动完成，因此才会引发像上面这样的错误\",\"右大括号 } 需要被放在紧接着函数体的下一行。如果你的函数非常简短，你也可以将它们放在同一行：\",\"func Sum(a, b int) int { return a + b } \",\"对于大括号 {} 的使用规则在任何时候都是相同的（如：if 语句等）。\",\"因此符合规范的函数一般写成如下的形式：\",\"func functionName(parameter_list) (return_value_list) { … } \",\"其中：\",\"parameter_list 的形式为 (param1 type1, param2 type2, …)\",\"return_value_list 的形式为 (ret1 type1, ret2 type2, …)\",\"只有当某个函数需要被外部包调用的时候才使用大写字母开头，并遵循 Pascal 命名法；否则就遵循骆驼命名法，即第一个单词的首字母小写，其余单词的首字母大写。\",\"下面这一行调用了 fmt 包中的 Println 函数，可以将字符串输出到控制台，并在最后自动增加换行字符 \\\\n：\",\"fmt.Println（\\\"hello, world\\\"） \",\"使用 fmt.Print(\\\"hello, world\\\\n\\\") 可以得到相同的结果。\",\"Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。\",\"单纯地打印一个字符串或变量甚至可以使用预定义的方法来实现，如：print、println：print(\\\"ABC\\\")、println(\\\"ABC\\\")、println(i)（带一个变量 i）。\",\"这些函数只可以用于调试阶段，在部署程序的时候务必将它们替换成 fmt 中的相关函数。\",\"当被调用函数的代码执行到结束符 } 或返回语句时就会返回，然后程序继续执行调用该函数之后的代码。\",\"程序正常退出的代码为 0 即 Program exited with code 0；如果程序因为异常而被终止，则会返回非零值，如：1。这个数值可以用来测试是否成功执行一个程序。\"]},\"508\":{\"h\":\"4.2.3 注释\",\"t\":[\"示例 4.2 hello_world2.go\",\"package main import \\\"fmt\\\" // Package implementing formatted I/O. func main() { fmt.Printf(\\\"Καλημέρα κόσμε; or こんにちは 世界\\\\n\\\") } \",\"上面这个例子通过打印 Καλημέρα κόσμε; or こんにちは 世界 展示了如何在 Go 中使用国际化字符，以及如何使用注释。\",\"注释不会被编译，但可以通过 godoc 来使用（第 3.6 节）。\",\"单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。\",\"每一个包应该有相关注释，在 package 语句之前的块注释将被默认认为是这个包的文档说明，其中应该提供一些相关信息并对整体功能做简要的介绍。一个包可以分散在多个文件中，但是只需要在其中一个进行注释说明即可。当开发人员需要了解包的一些情况时，自然会用 godoc 来显示包的文档说明，在首行的简要注释之后可以用成段的注释来进行更详细的说明，而不必拥挤在一起。另外，在多段注释之间应以空行分隔加以区分。\",\"示例：\",\"// Package superman implements methods for saving the world. // // Experience has shown that a small number of procedures can prove // helpful when attempting to save the world. package superman \",\"几乎所有全局作用域的类型、常量、变量、函数和被导出的对象都应该有一个合理的注释。如果这种注释（称为文档注释）出现在函数前面，例如函数 Abcd，则要以 \\\"Abcd...\\\" 作为开头。\",\"示例：\",\"// enterOrbit causes Superman to fly into low Earth orbit, a position // that presents several possibilities for planet salvation. func enterOrbit() error { ... } \",\"godoc 工具（第 3.6 节）会收集这些注释并产生一个技术文档。\"]},\"509\":{\"h\":\"4.2.4 类型\",\"t\":[\"变量（或常量）包含数据，这些数据可以有不同的数据类型，简称类型。使用 var 声明的变量的值会自动初始化为该类型的零值。类型定义了某个变量的值的集合与可对其进行操作的集合。\",\"类型可以是基本类型，如：int、float、bool、string；结构化的（复合的），如：struct、array、切片 (slice)、map、通道 (channel)；只描述类型的行为的，如：interface。\",\"结构化的类型没有真正的值，它使用 nil 作为默认值（在 Objective-C 中是 nil，在 Java 中是 null，在 C 和 C++ 中是 NULL 或 0）。值得注意的是，Go 语言中不存在类型继承。\",\"函数也可以是一个确定的类型，就是以函数作为返回类型。这种类型的声明要写在函数名和可选的参数列表之后，例如：\",\"func FunctionName (a typea, b typeb) typeFunc \",\"你可以在函数体中的某处返回使用类型为 typeFunc 的变量 var：\",\"return var \",\"一个函数可以拥有多返回值，返回类型之间需要使用逗号分割，并使用小括号 () 将它们括起来，如：\",\"func FunctionName (a typea, b typeb) (t1 type1, t2 type2) \",\"示例： 函数 Atoi()（第 4.7 节）：func Atoi(s string) (i int, err error)\",\"返回的形式：\",\"return var1, var2 \",\"这种多返回值一般用于判断某个函数是否执行成功 (true/false) 或与其它返回值一同返回错误消息（详见之后的并行赋值）。\",\"使用 type 关键字可以定义你自己的类型，你可能想要定义一个结构体（第 10 章），但是也可以定义一个已经存在的类型的别名，如：\",\"type IZ int \",\"这里并不是真正意义上的别名，因为使用这种方法定义之后的类型可以拥有更多的特性，且在类型转换时必须显式转换。\",\"然后我们可以使用下面的方式声明变量：\",\"var a IZ = 5 \",\"这里我们可以看到 int 是变量 a 的底层类型，这也使得它们之间存在相互转换的可能（第 4.2.6 节）。\",\"如果你有多个类型需要定义，可以使用因式分解关键字的方式，例如：\",\"type ( IZ int FZ float64 STR string ) \",\"每个值都必须在经过编译后属于某个类型（编译器必须能够推断出所有值的类型），因为 Go 语言是一种静态类型语言。\"]},\"510\":{\"h\":\"4.2.5 Go 程序的一般结构\",\"t\":[\"下面的程序可以被顺利编译但什么都做不了，不过这很好地展示了一个 Go 程序的首选结构。这种结构并没有被强制要求，编译器也不关心 main() 函数在前还是变量的声明在前，但使用统一的结构能够在从上至下阅读 Go 代码时有更好的体验。\",\"所有的结构将在这一章或接下来的章节中进一步地解释说明，但总体思路如下：\",\"在完成包的 import 之后，开始对常量、变量和类型的定义或声明。\",\"如果存在 init() 函数的话，则对该函数进行定义（这是一个特殊的函数，每个含有该函数的包都会首先执行这个函数）。\",\"如果当前包是 main 包，则定义 main() 函数。\",\"然后定义其余的函数，首先是类型的方法，接着是按照 main() 函数中先后调用的顺序来定义相关函数，如果有很多函数，则可以按照字母顺序来进行排序。\",\"示例 4.4 gotemplate.go\",\"package main import ( \\\"fmt\\\" ) const c = \\\"C\\\" var v int = 5 type T struct{} func init() { // initialization of package } func main() { var a int Func1() // ... fmt.Println(a) } func (t T) Method1() { //... } func Func1() { // exported function Func1 //... } \",\"Go 程序的执行（程序启动）顺序如下：\",\"按顺序导入所有被 main 包引用的其它包，然后在每个包中执行如下流程：\",\"如果该包又导入了其它的包，则从第一步开始递归执行，但是每个包只会被导入一次。\",\"然后以相反的顺序在每个包中初始化常量和变量，如果该包含有 init() 函数的话，则调用该函数。\",\"在完成这一切之后，main 也执行同样的过程，最后调用 main() 函数开始执行程序。\"]},\"511\":{\"h\":\"4.2.6 类型转换\",\"t\":[\"在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于 Go 语言不存在隐式类型转换，因此所有的转换都必须显式说明，就像调用一个函数一样（类型在这里的作用可以看作是一种函数）：\",\"valueOfTypeB = typeB(valueOfTypeA) \",\"类型 B 的值 = 类型 B(类型 A 的值)\",\"示例：\",\"a := 5.0 b := int(a) \",\"但这只能在定义正确的情况下转换成功，例如从一个取值范围较小的类型转换到一个取值范围较大的类型（例如将 int16 转换为 int32）。当从一个取值范围较大的转换到取值范围较小的类型时（例如将 int32 转换为 int16 或将 float32 转换为 int），会发生精度丢失（截断）的情况。当编译器捕捉到非法的类型转换时会引发编译时错误，否则将引发运行时错误。\",\"具有相同底层类型的变量之间可以相互转换：\",\"var a IZ = 5 c := int(a) d := IZ(c) \"]},\"512\":{\"h\":\"4.2.7 Go 命名规范\",\"t\":[\"干净、可读的代码和简洁性是 Go 追求的主要目标。通过 gofmt 来强制实现统一的代码风格。Go 语言中对象的命名也应该是简洁且有意义的。像 Java 和 Python 中那样使用混合着大小写和下划线的冗长的名称会严重降低代码的可读性。名称不需要指出自己所属的包，因为在调用的时候会使用包名作为限定符。返回某个对象的函数或方法的名称一般都是使用名词，没有 Get... 之类的字符，如果是用于修改某个对象，则使用 SetName()。有必须要的话可以使用大小写混合的方式，如 MixedCaps() 或 mixedCaps()，而不是使用下划线来分割多个名称。\"]},\"513\":{\"h\":\"4.3 常量\",\"t\":[\"常量使用关键字 const 定义，用于存储不会改变的数据。\",\"存储在常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\",\"常量的定义格式：const identifier [type] = value，例如：\",\"const Pi = 3.14159 \",\"在 Go 语言中，你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\",\"显式类型定义： const b string = \\\"abc\\\"\",\"隐式类型定义： const b = \\\"abc\\\"\",\"一个没有指定类型的常量被使用时，会根据其使用环境而推断出它所需要具备的类型。换句话说，未定义类型的常量会在必要时刻根据上下文来获得相关类型。\",\"var n int f(n + 5) // 无类型的数字型常量 “5” 它的类型在这里变成了 int \",\"常量的值必须是能够在编译时就能够确定的；你可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。\",\"正确的做法：const c1 = 2/3\",\"错误的做法：const c2 = getNumber() // 引发构建错误: getNumber() used as value\",\"因为在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如：len()。\",\"数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出：\",\"const Ln2 = 0.693147180559945309417232121458\\\\ 176568075500134360255254120680009 const Log2E = 1/Ln2 // this is a precise reciprocal const Billion = 1e9 // float constant const hardEight = (1 << 100) >> 97 \",\"根据上面的例子我们可以看到，反斜杠 \\\\ 可以在常量表达式中作为多行的连接符使用。\",\"与各种类型的数字型变量相比，你无需担心常量之间的类型转换问题，因为它们都是非常理想的数字。\",\"不过需要注意的是，当常量赋值给一个精度过小的数字型变量时，可能会因为无法正确表达常量所代表的数值而导致溢出，这会在编译期间就引发错误。另外，常量也允许使用并行赋值的形式：\",\"const beef, two, c = \\\"eat\\\", 2, \\\"veg\\\" const Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = 1, 2, 3, 4, 5, 6 const ( Monday, Tuesday, Wednesday = 1, 2, 3 Thursday, Friday, Saturday = 4, 5, 6 ) \",\"常量还可以用作枚举：\",\"const ( Unknown = 0 Female = 1 Male = 2 ) \",\"现在，数字 0、1 和 2 分别代表未知性别、女性和男性。这些枚举值可以用于测试某个变量或常量的实际值，比如使用 switch/case 结构（第 5.3 节）。\",\"在这个例子中，iota 可以被用作枚举值：\",\"const ( a = iota b = iota c = iota ) \",\"第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1，并且没有赋值的常量默认会应用上一行的赋值表达式：\",\"// 赋值一个常量时，之后没赋值的常量都会应用上一行的赋值表达式 const ( a = iota // a = 0 b // b = 1 c // c = 2 d = 5 // d = 5 e // e = 5 ) // 赋值两个常量，iota 只会增长一次，而不会因为使用了两次就增长两次 const ( Apple, Banana = iota + 1, iota + 2 // Apple=1 Banana=2 Cherimoya, Durian // Cherimoya=2 Durian=3 Elderberry, Fig // Elderberry=3, Fig=4 ) // 使用 iota 结合 位运算 表示资源状态的使用案例 const ( Open = 1 << iota // 0001 Close // 0010 Pending // 0100 ) const ( _ = iota // 使用 _ 忽略不需要的 iota KB = 1 << (10 * iota) // 1 << (10*1) MB // 1 << (10*2) GB // 1 << (10*3) TB // 1 << (10*4) PB // 1 << (10*5) EB // 1 << (10*6) ZB // 1 << (10*7) YB // 1 << (10*8) ) \",\"（译者注：关于 iota 的使用涉及到非常复杂多样的情况，这里作者解释的并不清晰，因为很难对 iota 的用法进行直观的文字描述）\",\"iota 也可以用在表达式中，如：iota + 50。在每遇到一个新的常量块或单个常量声明时， iota 都会重置为 0（ 简单地讲，每遇到一次 const 关键字，iota 就重置为 0 ）。\",\"当然，常量之所以为常量就是恒定不变的量，因此我们无法在程序运行过程中修改它的值；如果你在代码中试图修改常量的值则会引发编译错误。\"]},\"514\":{\"h\":\"4.4 变量\"},\"515\":{\"h\":\"4.4.1 简介\",\"t\":[\"声明变量的一般形式是使用 var 关键字：var identifier type。\",\"需要注意的是，Go 和许多编程语言不同，它在声明变量时将变量的类型放在变量的名称之后。Go 为什么要选择这么做呢？\",\"首先，它是为了避免像 C 语言中那样含糊不清的声明形式，例如：int* a, b;。在这个例子中，只有 a 是指针而 b 不是。如果你想要这两个变量都是指针，则需要将它们分开书写（你可以在 Go 语言的声明语法 页面找到有关于这个话题的更多讨论）。\",\"而在 Go 中，则可以很轻松地将它们都声明为指针类型：\",\"var a, b *int \",\"其次，这种语法能够按照从左至右的顺序阅读，使得代码更加容易理解。\",\"示例：\",\"var a int var b bool var str string \",\"你也可以改写成这种形式：\",\"var ( a int b bool str string ) \",\"这种因式分解关键字的写法一般用于声明全局变量。\",\"当一个变量被声明之后，系统自动赋予它该类型的零值：int 为 0，float32(64) 为 0.0，bool 为 false，string 为空字符串，指针为 nil。记住，所有的内存在 Go 中都是经过初始化的。\",\"变量的命名规则遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：numShips 和 startDate。\",\"但如果你的全局变量希望能够被外部包所使用，则需要将首个单词的首字母也大写（第 4.2 节：可见性规则）。\",\"一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域。如果一个变量在函数体外声明，则被认为是全局变量，可以在整个包甚至外部包（被导出后）使用，不管你声明在哪个源文件里或在哪个源文件里调用该变量。\",\"在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。在 第 5 章，我们将会学习到像 if 和 for 这些控制结构，而在这些结构中声明的变量的作用域只在相应的代码块内。一般情况下，局部变量的作用域可以通过代码块（用大括号括起来的部分）判断。\",\"尽管变量的标识符必须是唯一的，但你可以在某个代码块的内层代码块中使用相同名称的变量，则此时外部的同名变量将会暂时隐藏（结束内部代码块的执行后隐藏的外部同名变量又会出现，而内部同名变量则被释放），你任何的操作都只会影响内部代码块的局部变量。\",\"变量可以编译期间就被赋值，赋值给变量使用运算符等号 =，当然你也可以在运行时对变量进行赋值操作。\",\"示例：\",\"a = 15 b = false \",\"一般情况下，当变量 a 和变量 b 之间类型相同时，才能进行如 a = b 的赋值。\",\"声明与赋值（初始化）语句也可以组合起来。\",\"示例：\",\"var identifier [type] = value var a int = 15 var i = 5 var b bool = false var str string = \\\"Go says hello to the world!\\\" \",\"但是 Go 编译器的智商已经高到可以根据变量的值来自动推断其类型，这有点像 Ruby 和 Python 这类动态语言，只不过它们是在运行时进行推断，而 Go 是在编译时就已经完成推断过程。因此，你还可以使用下面的这些形式来声明及初始化变量：\",\"var a = 15 var b = false var str = \\\"Go says hello to the world!\\\" \",\"或：\",\"var ( a = 15 b = false str = \\\"Go says hello to the world!\\\" numShips = 50 city string ) \",\"不过自动推断类型并不是任何时候都适用的，当你想要给变量的类型并不是自动推断出的某种类型时，你还是需要显式指定变量的类型，例如：\",\"var n int64 = 2 \",\"然而，var a 这种语法是不正确的，因为编译器没有任何可以用于自动推断类型的依据。变量的类型也可以在运行时实现自动推断，例如：\",\"var ( HOME = os.Getenv(\\\"HOME\\\") USER = os.Getenv(\\\"USER\\\") GOROOT = os.Getenv(\\\"GOROOT\\\") ) \",\"这种写法主要用于声明包级别的全局变量，当你在函数体内声明局部变量时，应使用简短声明语法 :=，例如：\",\"a := 1 \",\"下面这个例子展示了如何通过 runtime 包在运行时获取所在的操作系统类型，以及如何通过 os 包中的函数 os.Getenv() 来获取环境变量中的值，并保存到 string 类型的局部变量 path 中。\",\"示例 4.5 goos.go\",\"package main import ( \\\"fmt\\\" \\\"runtime\\\" \\\"os\\\" ) func main() { var goos string = runtime.GOOS fmt.Printf(\\\"The operating system is: %s\\\\n\\\", goos) path := os.Getenv(\\\"PATH\\\") fmt.Printf(\\\"Path is %s\\\\n\\\", path) } \",\"如果你在 Windows 下运行这段代码，则会输出 The operating system is: windows 以及相应的环境变量的值；如果你在 Linux 下运行这段代码，则会输出 The operating system is: linux 以及相应的的环境变量的值。\",\"这里用到了 Printf 的格式化输出的功能（第 4.4.3 节）。\"]},\"516\":{\"h\":\"4.4.2 值类型和引用类型\",\"t\":[\"程序中所用到的内存在计算机中使用一堆箱子来表示（这也是人们在讲解它的时候的画法），这些箱子被称为“字”。根据不同的处理器以及操作系统类型，所有的字都具有 32 位（4 字节）或 64 位（8 字节）的相同长度；所有的字都使用相关的内存地址来进行表示（以十六进制数表示）。\",\"所有像 int、float、bool 和 string 这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值：\",\"另外，像数组（第 7 章）和结构（第 10 章）这些复合类型也是值类型。\",\"当使用等号 = 将一个变量的值赋值给另一个变量时，如：j = i，实际上是在内存中将 i 的值进行了拷贝：\",\"你可以通过 &i 来获取变量 i 的内存地址（第 4.9 节），例如：0xf840000040（每次的地址都可能不一样）。值类型的变量的值存储在栈中。\",\"内存地址会根据机器的不同而有所不同，甚至相同的程序在不同的机器上执行后也会有不同的内存地址。因为每台机器可能有不同的存储器布局，并且位置分配也可能不同。\",\"更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存。\",\"一个引用类型的变量 r1 存储的是 r1 的值所在的内存地址（数字），或内存地址中第一个字所在的位置。\",\"这个内存地址被称之为指针（你可以从上图中很清晰地看到，第 4.9 节 将会详细说明），这个指针实际上也被存在另外的某一个字中。\",\"同一个引用类型的指针指向的多个字可以是在连续的内存地址中（内存布局是连续的），这也是计算效率最高的一种存储形式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址。\",\"当使用赋值语句 r2 = r1 时，只有引用（地址）被复制。\",\"如果 r1 的值被改变了，那么这个值的所有引用都会指向被修改后的内容，在这个例子中，r2 也会受到影响。\",\"在 Go 语言中，指针（第 4.9 节）属于引用类型，其它的引用类型还包括 slices（第 7 章），maps（第 8 章）和 channel（第 13 章）。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。\"]},\"517\":{\"h\":\"4.4.3 打印\",\"t\":[\"函数 Printf 可以在 fmt 包外部使用，这是因为它以大写字母 P 开头，该函数主要用于打印输出到控制台。通常使用的格式化字符串作为第一个参数：\",\"func Printf(format string, list of variables to be printed) \",\"在示例 4.5 中，格式化字符串为：\\\"The operating system is: %s\\\\n\\\"。\",\"这个格式化字符串可以含有一个或多个的格式化标识符，例如：%..，其中 .. 可以被不同类型所对应的标识符替换，如 %s 代表字符串标识符、%v 代表使用类型的默认输出格式的标识符。这些标识符所对应的值从格式化字符串后的第一个逗号开始按照相同顺序添加，如果参数超过 1 个则同样需要使用逗号分隔。使用这些占位符可以很好地控制格式化输出的文本。\",\"函数 fmt.Sprintf 与 Printf 的作用是完全相同的，不过前者将格式化后的字符串以返回值的形式返回给调用者，因此你可以在程序中使用包含变量的字符串，具体例子可以参见示例 15.4 simple_tcp_server.go。\",\"函数 fmt.Print 和 fmt.Println 会自动使用格式化标识符 %v 对字符串进行格式化，两者都会在每个参数之间自动增加空格，而后者还会在字符串的最后加上一个换行符。例如：\",\"fmt.Print(\\\"Hello:\\\", 23) \",\"将输出：Hello: 23。\"]},\"518\":{\"h\":\"4.4.4 简短形式，使用 := 赋值操作符\",\"t\":[\"我们知道可以在变量的初始化时省略变量的类型而由系统自动推断，而这个时候再在 Example 4.4.1 的最后一个声明语句写上 var 关键字就显得有些多余了，因此我们可以将它们简写为 a := 50 或 b := false。\",\"a 和 b 的类型（int 和 bool）将由编译器自动推断。\",\"这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。\",\"注意事项\",\"如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。\",\"如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。\",\"如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 a：\",\"func main() { var a string = \\\"abc\\\" fmt.Println(\\\"hello, world\\\") } \",\"尝试编译这段代码将得到错误 a declared and not used。\",\"此外，单纯地给 a 赋值也是不够的，这个值必须被使用，所以使用 fmt.Println(\\\"hello, world\\\", a) 会移除错误。\",\"但是全局变量是允许声明但不使用。\",\"其他的简短形式为：\",\"同一类型的多个变量可以声明在同一行，如：\",\"var a, b, c int \",\"(这是将类型写在标识符后面的一个重要原因)\",\"多变量可以在同一行进行赋值，如：\",\"a, b, c = 5, 7, \\\"abc\\\" \",\"上面这行假设了变量 a，b 和 c 都已经被声明，否则的话应该这样使用：\",\"a, b, c := 5, 7, \\\"abc\\\" \",\"右边的这些值以相同的顺序赋值给左边的变量，所以 a 的值是 5， b 的值是 7，c 的值是 \\\"abc\\\"。\",\"这被称为 并行 或 同时 赋值。\",\"如果你想要交换两个变量的值，则可以简单地使用 a, b = b, a。\",\"(在 Go 语言中，这样省去了使用交换函数的必要)\",\"空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。\",\"_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。\",\"并行赋值也被用于当一个函数返回多个返回值时，比如这里的 val 和错误 err 是通过调用 Func1 函数同时得到：val, err = Func1(var1)。\"]},\"519\":{\"h\":\"4.4.5 init 函数\",\"t\":[\"变量除了可以在全局声明中初始化，也可以在 init() 函数中初始化。这是一类非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 main() 函数高。\",\"每个源文件可以包含多个 init() 函数，同一个源文件中的 init() 函数会按照从上到下的顺序执行，如果一个包有多个源文件包含 init() 函数的话，则官方鼓励但不保证以文件名的顺序调用。初始化总是以单线程并且按照包的依赖关系顺序执行。\",\"一个可能的用途是在开始执行程序之前对数据进行检验或修复，以保证程序状态的正确性。\",\"示例 4.6 init.go:\",\"package trans import \\\"math\\\" var Pi float64 func init() { Pi = 4 * math.Atan(1) // init() function computes Pi } \",\"在它的 init() 函数中计算变量 Pi 的初始值。\",\"示例 4.7 user_init.go 中导入了包 trans（需要 init.go 目录为 ./trans/init.go ）并且使用到了变量 Pi：\",\"package main import ( \\\"fmt\\\" \\\"./trans\\\" ) var twoPi = 2 * trans.Pi func main() { fmt.Printf(\\\"2*Pi = %g\\\\n\\\", twoPi) // 2*Pi = 6.283185307179586 } \",\"init() 函数也经常被用在当一个程序开始之前调用后台执行的 goroutine，如下面这个例子当中的 backend()：\",\"func init() { // setup preparations go backend() } \",\"练习 推断以下程序的输出，并解释你的答案，然后编译并执行它们。\",\"练习 4.1 local_scope.go:\",\"package main var a = \\\"G\\\" func main() { n() m() n() } func n() { print(a) } func m() { a := \\\"O\\\" print(a) } \",\"练习 4.2 global_scope.go:\",\"package main var a = \\\"G\\\" func main() { n() m() n() } func n() { print(a) } func m() { a = \\\"O\\\" print(a) } \",\"练习 4.3 function_calls_function.go\",\"package main var a string func main() { a = \\\"G\\\" print(a) f1() } func f1() { a := \\\"O\\\" print(a) f2() } func f2() { print(a) } \"]},\"520\":{\"h\":\"4.5 基本类型和运算符\",\"t\":[\"我们将在这个部分讲解有关布尔型、数字型和字符型的相关知识。\",\"表达式是一种特定的类型的值，它可以由其它的值以及运算符组合而成。每个类型都定义了可以和自己结合的运算符集合，如果你使用了不在这个集合中的运算符，则会在编译时获得编译错误。\",\"一元运算符只可以用于一个值的操作（作为后缀），而二元运算符则可以和两个值或者操作数结合（作为中缀）。\",\"只有两个类型相同的值才可以和二元运算符结合，另外要注意的是，Go 是强类型语言，因此不会进行隐式转换，任何不同类型之间的转换都必须显式说明（第 4.2 节）。Go 不存在像 C 那样的运算符重载，表达式的解析顺序是从左至右。\",\"你可以在第 4.5.3 节找到有关运算符优先级的相关信息，优先级越高的运算符在条件相同的情况下将被优先执行。但是你可以通过使用括号将其中的表达式括起来，以人为地提升某个表达式的运算优先级。\"]},\"521\":{\"h\":\"4.5.1 布尔类型 bool\",\"t\":[\"一个简单的例子：var b bool = true。\",\"布尔型的值只可以是常量 true 或者 false。\",\"两个类型相同的值可以使用相等 == 或者不等 != 运算符来进行比较并获得一个布尔型的值。\",\"当相等运算符两边的值是完全相同的值的时候会返回 true，否则返回 false，并且只有在两个的值的类型相同的情况下才可以使用。\",\"示例：\",\"var aVar = 10 aVar == 5 -> false aVar == 10 -> true \",\"当不等运算符两边的值是不同的时候会返回 true，否则返回 false。\",\"示例：\",\"var aVar = 10 aVar != 5 -> true aVar != 10 -> false \",\"Go 对于值之间的比较有非常严格的限制，只有两个类型相同的值才可以进行比较，如果值的类型是接口（interface，第 11 章），它们也必须都实现了相同的接口。如果其中一个值是常量，那么另外一个值的类型必须和该常量类型相兼容的。如果以上条件都不满足，则其中一个值的类型必须在被转换为和另外一个值的类型相同之后才可以进行比较。\",\"布尔型的常量和变量也可以通过和逻辑运算符（非 !、与 &&、或 ||）结合来产生另外一个布尔值，这样的逻辑语句就其本身而言，并不是一个完整的 Go 语句。\",\"逻辑值可以被用于条件结构中的条件语句（第 5 章），以便测试某个条件是否满足。另外，与 &&、或 || 与相等 == 或不等 != 属于二元运算符，而非 ! 属于一元运算符。在接下来的内容中，我们会使用 T 来代表条件符合的语句，用 F 来代表条件不符合的语句。\",\"Go 语言中包含以下逻辑运算符：\",\"非运算符：!\",\"!T -> false !F -> true \",\"非运算符用于取得和布尔值相反的结果。\",\"与运算符：&&\",\"T && T -> true T && F -> false F && T -> false F && F -> false \",\"只有当两边的值都为 true 的时候，和运算符的结果才是 true。\",\"或运算符：||\",\"T || T -> true T || F -> true F || T -> true F || F -> false \",\"只有当两边的值都为 false 的时候，或运算符的结果才是 false，其中任意一边的值为 true 就能够使得该表达式的结果为 true。\",\"在 Go 语言中，&& 和 || 是具有快捷性质的运算符，当运算符左边表达式的值已经能够决定整个表达式的值的时候（&& 左边的值为 false，|| 左边的值为 true），运算符右边的表达式将不会被执行。利用这个性质，如果你有多个条件判断，应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算。\",\"利用括号同样可以升级某个表达式的运算优先级。\",\"在格式化输出时，你可以使用 %t 来表示你要输出的值为布尔型。\",\"布尔值（以及任何结果为布尔值的表达式）最常用在条件结构的条件语句中，例如：if、for 和 switch 结构（第 5 章）。\",\"对于布尔值的好的命名能够很好地提升代码的可读性，例如以 is 或者 Is 开头的 isSorted、isFinished、isVisible，使用这样的命名能够在阅读代码的获得阅读正常语句一样的良好体验，例如标准库中的 unicode.IsDigit(ch)（第 4.5.5 节）。\"]},\"522\":{\"h\":\"4.5.2 数字类型\"},\"523\":{\"h\":\"4.5.2.1 整型 int 和浮点型 float\",\"t\":[\"Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码（详情参见 二的补码 页面）。\",\"Go 也有基于架构的类型，例如：int、uint 和 uintptr。\",\"这些类型的长度都是根据运行程序所在的操作系统类型所决定的：\",\"int 和 uint 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。\",\"uintptr 的长度被设定为足够存放一个指针即可。\",\"Go 语言中没有 float 类型。（Go 语言中只有 float32 和 float64）没有 double 类型。\",\"与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：\",\"整数：\",\"int8（-128 -> 127）\",\"int16（-32768 -> 32767）\",\"int32（-2,147,483,648 -> 2,147,483,647）\",\"int64（-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807）\",\"无符号整数：\",\"uint8（0 -> 255）\",\"uint16（0 -> 65,535）\",\"uint32（0 -> 4,294,967,295）\",\"uint64（0 -> 18,446,744,073,709,551,615）\",\"浮点型（IEEE-754 标准）：\",\"float32（+- 1e-45 -> +- 3.4 * 1e38）\",\"float64（+- 5 _ 1e-324 -> 107 _ 1e308）\",\"int 型是计算最快的一种类型。\",\"整型的零值为 0，浮点型的零值为 0.0。\",\"float32 精确到小数点后 7 位，float64 精确到小数点后 15 位。由于精确度的缘故，你在使用 == 或者 != 来比较浮点数时应当非常小心。你最好在正式使用前测试对于精确度要求较高的运算。\",\"你应该尽可能地使用 float64，因为 math 包中所有有关数学运算的函数都会要求接收这个类型。\",\"你可以通过增加前缀 0 来表示 8 进制数（如：077），增加前缀 0x 来表示 16 进制数（如：0xFF），以及使用 e 来表示 10 的连乘（如： 1e3 = 1000，或者 6.022e23 = 6.022 x 1e23）。\",\"你可以使用 a := uint64(0) 来同时完成类型转换和赋值操作，这样 a 的类型就是 uint64。\",\"Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用，下面这个程序很好地解释了这个现象（该程序无法通过编译）：\",\"示例 4.8 type_mixing.go\",\"package main func main() { var a int var b int32 a = 15 b = a + a // 编译错误 b = b + 5 // 因为 5 是常量，所以可以通过编译 } \",\"如果你尝试编译该程序，则将得到编译错误 cannot use a + a (type int) as type int32 in assignment。\",\"同样地，int16 也不能够被隐式转换为 int32。\",\"下面这个程序展示了通过显式转换来避免这个问题（第 4.2 节）。\",\"示例 4.9 casting.go\",\"package main import \\\"fmt\\\" func main() { var n int16 = 34 var m int32 // compiler error: cannot use n (type int16) as type int32 in assignment //m = n m = int32(n) fmt.Printf(\\\"32 bit int is: %d\\\\n\\\", m) fmt.Printf(\\\"16 bit int is: %d\\\\n\\\", n) } \",\"输出：\",\"32 bit int is: 34 16 bit int is: 34 \",\"格式化说明符\",\"在格式化字符串里，%d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0nd 用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。\",\"%n.mg 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 %5.2e 来输出 3.4 的结果为 3.40e+00。\",\"数字值转换\",\"当进行类似 a32bitInt = int32(a32Float) 的转换时，小数点后的数字将被丢弃。这种情况一般发生当从取值范围较大的类型转换为取值范围较小的类型时，或者你可以写一个专门用于处理类型转换的函数来确保没有发生精度的丢失。下面这个例子展示如何安全地从 int 型转换为 int8：\",\"func Uint8FromInt(n int) (uint8, error) { if 0 <= n && n <= math.MaxUint8 { // conversion is safe return uint8(n), nil } return 0, fmt.Errorf(\\\"%d is out of the uint8 range\\\", n) } \",\"或者安全地从 float64 转换为 int：\",\"func IntFromFloat64(x float64) int { if math.MinInt32 <= x && x <= math.MaxInt32 { // x lies in the integer range whole, fraction := math.Modf(x) if fraction >= 0.5 { whole++ } return int(whole) } panic(fmt.Sprintf(\\\"%g is out of the int32 range\\\", x)) } \",\"不过如果你实际存的数字超出你要转换到的类型的取值范围的话，则会引发 panic（第 13.2 节）。\",\"问题 4.1int 和 int64 是相同的类型吗？\"]},\"524\":{\"h\":\"4.5.2.2 复数\",\"t\":[\"Go 拥有以下复数类型：\",\"complex64 (32 位实数和虚数) complex128 (64 位实数和虚数) \",\"复数使用 re+imI 来表示，其中 re 代表实数部分，im 代表虚数部分，I 代表根号负 1。\",\"示例：\",\"var c1 complex64 = 5 + 10i fmt.Printf(\\\"The value is: %v\\\", c1) // 输出： 5 + 10i \",\"如果 re 和 im 的类型均为 float32，那么类型为 complex64 的复数 c 可以通过以下方式来获得：\",\"c = complex(re, im) \",\"函数 real(c) 和 imag(c) 可以分别获得相应的实数和虚数部分。\",\"在使用格式化说明符时，可以使用 %v 来表示复数，但当你希望只表示其中的一个部分的时候需要使用 %f。\",\"复数支持和其它数字类型一样的运算。当你使用等号 == 或者不等号 != 对复数进行比较运算时，注意对精确度的把握。cmath 包中包含了一些操作复数的公共方法。如果你对内存的要求不是特别高，最好使用 complex128 作为计算类型，因为相关函数都使用这个类型的参数。\"]},\"525\":{\"h\":\"4.5.2.3 位运算\",\"t\":[\"位运算只能用于整数类型的变量，且需当它们拥有等长位模式时。\",\"%b 是用于表示位的格式化标识符。\",\"二元运算符\",\"按位与 &：\",\"对应位置上的值经过和运算结果，具体参见和运算符（第 4.5.1 节），并将 T (true) 替换为 1，将 F (false) 替换为 0\",\"1 & 1 -> 1 1 & 0 -> 0 0 & 1 -> 0 0 & 0 -> 0 \",\"按位或 |：\",\"对应位置上的值经过或运算结果，具体参见或运算符（第 4.5.1 节），并将 T (true) 替换为 1，将 F (false) 替换为 0\",\"1 | 1 -> 1 1 | 0 -> 1 0 | 1 -> 1 0 | 0 -> 0 \",\"按位异或 ^：\",\"对应位置上的值根据以下规则组合：\",\"1 ^ 1 -> 0 1 ^ 0 -> 1 0 ^ 1 -> 1 0 ^ 0 -> 0 \",\"位清除 &^：将指定位置上的值设置为 0。\",\"package main import \\\"fmt\\\" func main() { var x uint8 = 15 var y uint8 = 4 fmt.Printf(\\\"%08b\\\\n\\\", x &^ y); // 00001011 } \",\"一元运算符\",\"按位补足 ^：\",\"该运算符与异或运算符一同使用，即 m^x，对于无符号 x 使用 “全部位设置为 1” 的规则，对于有符号 x 时使用 m=-1。例如：\",\"^10 = -01 ^ 10 = -11 \",\"位左移 <<：\",\"用法：bitP << n。\",\"bitP 的位向左移动 n 位，右侧空白部分使用 0 填充；如果 n 等于 2，则结果是 2 的相应倍数，即 2 的 n 次方。例如：\",\"1 << 10 // 等于 1 KB 1 << 20 // 等于 1 MB 1 << 30 // 等于 1 GB \",\"位右移 >>：\",\"用法：bitP >> n。\",\"bitP 的位向右移动 n 位，左侧空白部分使用 0 填充；如果 n 等于 2，则结果是当前值除以 2 的 n 次方。\",\"当希望把结果赋值给第一个操作数时，可以简写为 a <<= 2 或者 b ^= a & 0xffffffff。\",\"位左移常见实现存储单位的用例\",\"使用位左移与 iota 计数配合可优雅地实现存储单位的常量枚举：\",\"type ByteSize float64 const ( _ = iota // 通过赋值给空白标识符来忽略值 KB ByteSize = 1<<(10*iota) MB GB TB PB EB ZB YB ) \",\"在通讯中使用位左移表示标识的用例\",\"type BitFlag int const ( Active BitFlag = 1 << iota // 1 << 0 == 1 Send // 1 << 1 == 2 Receive // 1 << 2 == 4 ) flag := Active | Send // == 3 \"]},\"526\":{\"h\":\"4.5.2.4 逻辑运算符\",\"t\":[\"Go 中拥有以下逻辑运算符：==、!=（第 4.5.1 节）、<、<=、>、>=。\",\"它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 bool。例如：\",\"b3 := 10 > 5 // b3 is true \"]},\"527\":{\"h\":\"4.5.2.5 算术运算符\",\"t\":[\"常见可用于整数和浮点数的二元运算符有 +、-、* 和 /。\",\"（相对于一般规则而言，Go 在进行字符串拼接时允许使用对运算符 + 的重载，但 Go 本身不允许开发者进行自定义的运算符重载）\",\"/ 对于整数运算而言，结果依旧为整数，例如：9 / 4 -> 2。\",\"取余运算符只能作用于整数：9 % 4 -> 1。\",\"整数除以 0 可能导致程序崩溃，将会导致运行时的恐慌状态（如果除以 0 的行为在编译时就能被捕捉到，则会引发编译错误）；第 13 章 将会详细讲解如何正确地处理此类情况。\",\"浮点数除以 0.0 会返回一个无穷尽的结果，使用 +Inf 表示。\",\"练习 4.4 尝试编译 divby0.go。\",\"你可以将语句 b = b + a 简写为 b += a，同样的写法也可用于 -=、*=、/=、%=。\",\"对于整数和浮点数，你可以使用一元运算符 ++（递增）和 --（递减），但只能用于后缀：\",\"i++ -> i += 1 -> i = i + 1 i-- -> i -= 1 -> i = i - 1 \",\"同时，带有 ++ 和 -- 的只能作为语句，而非表达式，因此 n = i++ 这种写法是无效的，其它像 f(i++) 或者 a[i]=b[i++] 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的。\",\"在运算时 溢出 不会产生错误，Go 会简单地将超出位数抛弃。如果你需要范围无限大的整数或者有理数（意味着只被限制于计算机内存），你可以使用标准库中的 big 包，该包提供了类似 big.Int 和 big.Rat 这样的类型（第 9.4 节）。\"]},\"528\":{\"h\":\"4.5.2.6 随机数\",\"t\":[\"一些像游戏或者统计学类的应用需要用到随机数。rand 包实现了伪随机数的生成。\",\"示例 4.10 random.go 演示了如何生成 10 个非负随机数：\",\"package main import ( \\\"fmt\\\" \\\"math/rand\\\" \\\"time\\\" ) func main() { for i := 0; i < 10; i++ { a := rand.Int() fmt.Printf(\\\"%d / \\\", a) } for i := 0; i < 5; i++ { r := rand.Intn(8) fmt.Printf(\\\"%d / \\\", r) } fmt.Println() timens := int64(time.Now().Nanosecond()) rand.Seed(timens) for i := 0; i < 10; i++ { fmt.Printf(\\\"%2.2f / \\\", 100*rand.Float32()) } } \",\"可能的输出：\",\"816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 / 1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10 / 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 / \",\"函数 rand.Float32 和 rand.Float64 返回介于 [0.0,1.0) 之间的伪随机数，其中包括 0.0 但不包括 1.0。函数 rand.Intn 返回介于 [0,n) 之间的伪随机数。\",\"你可以使用 rand.Seed(value) 函数来提供伪随机数的生成种子，一般情况下都会使用当前时间的纳秒级数字（第 4.8 节）。\"]},\"529\":{\"h\":\"4.5.3 运算符与优先级\",\"t\":[\"有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：\",\"优先级 运算符 7 ^ ! 6 * / % << >> & &^ 5 + - | ^ 4 == != < <= >= > 3 <- 2 && 1 || \",\"当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。\"]},\"530\":{\"h\":\"4.5.4 类型别名\",\"t\":[\"当你在使用某个类型时，你可以给它起另一个名字，然后你就可以在你的代码中使用新的名字（用于简化名称或解决名称冲突）。\",\"在 type TZ int 中，TZ 就是 int 类型的新名称（用于表示程序中的时区），然后就可以使用 TZ 来操作 int 类型的数据。\",\"示例 4.11 type.go\",\"package main import \\\"fmt\\\" type TZ int func main() { var a, b TZ = 3, 4 c := a + b fmt.Printf(\\\"c has the value: %d\\\", c) // 输出：c has the value: 7 } \",\"实际上，类型别名得到的新类型并非和原类型完全相同，新类型不会拥有原类型所附带的方法（第 10 章）；TZ 可以自定义一个方法用来输出更加人性化的时区信息。\",\"练习 4.5 定义一个 string 的类型别名 Rope，并声明一个该类型的变量。\"]},\"531\":{\"h\":\"4.5.5 字符类型\",\"t\":[\"严格来说，这并不是 Go 语言的一个类型，字符只是整数的特殊用例。byte 类型是 uint8 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题。例如：var ch byte = 'A'；字符使用单引号括起来。\",\"在 ASCII 码表中，'A' 的值是 65，而使用 16 进制表示则为 41，所以下面的写法是等效的：\",\"var ch byte = 65 或 var ch byte = '\\\\x41' \",\"（\\\\x 总是紧跟着长度为 2 的 16 进制数）\",\"另外一种可能的写法是 \\\\ 后面紧跟着长度为 3 的 8 进制数，例如：\\\\377。\",\"不过 Go 同样支持 Unicode（UTF-8），因此字符同样称为 Unicode 代码点或者 runes，并在内存中使用 int 来表示。在文档中，一般使用格式 U+hhhh 来表示，其中 h 表示一个 16 进制数。其实 rune 也是 Go 当中的一个类型，并且是 int32 的别名。\",\"在书写 Unicode 字符时，需要在 16 进制数之前加上前缀 \\\\u 或者 \\\\U。\",\"因为 Unicode 至少占用 2 个字节，所以我们使用 int16 或者 int 类型来表示。如果需要使用到 4 字节，则会加上 \\\\U 前缀；前缀 \\\\u 则总是紧跟着长度为 4 的 16 进制数，前缀 \\\\U 紧跟着长度为 8 的 16 进制数。\",\"示例 4.12 char.go\",\"var ch int = '\\\\u0041' var ch2 int = '\\\\u03B2' var ch3 int = '\\\\U00101234' fmt.Printf(\\\"%d - %d - %d\\\\n\\\", ch, ch2, ch3) // integer fmt.Printf(\\\"%c - %c - %c\\\\n\\\", ch, ch2, ch3) // character fmt.Printf(\\\"%X - %X - %X\\\\n\\\", ch, ch2, ch3) // UTF-8 bytes fmt.Printf(\\\"%U - %U - %U\\\", ch, ch2, ch3) // UTF-8 code point \",\"输出：\",\"65 - 946 - 1053236 A - β - r 41 - 3B2 - 101234 U+0041 - U+03B2 - U+101234 \",\"格式化说明符 %c 用于表示字符；当和字符配合使用时，%v 或 %d 会输出用于表示该字符的整数；%U 输出格式为 U+hhhh 的字符串（另一个示例见第 5.4.4 节）。\",\"包 unicode 包含了一些针对测试字符的非常有用的函数（其中 ch 代表字符）：\",\"判断是否为字母：unicode.IsLetter(ch)\",\"判断是否为数字：unicode.IsDigit(ch)\",\"判断是否为空白符号：unicode.IsSpace(ch)\",\"这些函数返回单个布尔值。包 utf8 拥有更多与 rune 类型相关的函数。\"]},\"532\":{\"h\":\"4.6 字符串\",\"t\":[\"字符串是 UTF-8 字符的一个序列（当字符为 ASCII 码时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。UTF-8 是被广泛使用的编码格式，是文本文件的标准编码，其它包括 XML 和 JSON 在内，也都使用该编码。由于该编码对占用字节长度的不定性，Go 中的字符串里面的字符也可能根据需要占用 1 至 4 个字节（示例见第 4.6 节），这与其它语言如 C++、Java 或者 Python 不同（Java 始终使用 2 个字节）。Go 这样做的好处是不仅减少了内存和硬盘空间占用，同时也不用像其它语言那样需要对使用 UTF-8 字符集的文本进行编码和解码。\",\"字符串是一种值类型，且值不可变，即创建某个文本后你无法再次修改这个文本的内容；更深入地讲，字符串是字节的定长数组。\",\"Go 支持以下 2 种形式的字面值：\",\"解释字符串：\",\"该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括：\",\"\\\\n：换行符\",\"\\\\r：回车符\",\"\\\\t：tab 键\",\"\\\\u 或 \\\\U：Unicode 字符\",\"\\\\\\\\：反斜杠自身\",\"非解释字符串：\",\"该类字符串使用反引号括起来，支持换行，例如：\",\"`This is a raw string \\\\n` 中的 `\\\\n\\\\` 会被原样输出。 \",\"和 C/C++不一样，Go 中的字符串是根据长度限定，而非特殊字符 \\\\0。\",\"string 类型的零值为长度为零的字符串，即空字符串 \\\"\\\"。\",\"一般的比较运算符（==、!=、<、<=、>=、>）通过在内存中按字节比较来实现字符串的对比。你可以通过函数 len() 来获取字符串所占的字节长度，例如：len(str)。\",\"字符串的内容（纯字节）可以通过标准索引法来获取，在中括号 [] 内写入索引，索引从 0 开始计数：\",\"字符串 str 的第 1 个字节：str[0]\",\"第 i 个字节：str[i - 1]\",\"最后 1 个字节：str[len(str)-1]\",\"需要注意的是，这种转换方案只对纯 ASCII 码的字符串有效。\",\"注意事项 获取字符串中某个字节的地址的行为是非法的，例如：&str[i]。\",\"字符串拼接符 +\",\"两个字符串 s1 和 s2 可以通过 s := s1 + s2 拼接在一起。\",\"s2 追加在 s1 尾部并生成一个新的字符串 s。\",\"你可以通过以下方式来对代码中多行的字符串进行拼接：\",\"str := \\\"Beginning of the string \\\" + \\\"second part of the string\\\" \",\"由于编译器行尾自动补全分号的缘故，加号 + 必须放在第一行。\",\"拼接的简写形式 += 也可以用于字符串：\",\"s := \\\"hel\\\" + \\\"lo,\\\" s += \\\"world!\\\" fmt.Println(s) //输出 “hello, world!” \",\"在循环中使用加号 + 拼接字符串并不是最高效的做法，更好的办法是使用函数 strings.Join()（第 4.7.10 节），有没有更好的办法了？有！使用字节缓冲（bytes.Buffer）拼接更加给力（第 7.2.6 节）！\",\"在第 7 章，我们会讲到通过将字符串看作是字节 (byte) 的切片 (slice) 来实现对其标准索引法的操作。会在第 5.4.1 节 中讲到的 for 循环只会根据索引返回字符串中的纯字节，而在第 5.4.4 节（以及第 7.6.1 节 的示例）将会展示如何使用 for-range 循环来实现对 Unicode 字符串的迭代操作。在下一节，我们会学习到许多有关字符串操作的函数和方法，同时 fmt 包中的 fmt.Sprint(x) 也可以格式化生成并返回你所需要的字符串（第 4.4.3 节）。\",\"练习 4.6count_characters.go\",\"创建一个用于统计字节和字符 (rune) 的程序，并对字符串 asSASA ddd dsjkdsjs dk 进行分析，然后再分析 asSASA ddd dsjkdsjsこん dk，最后解释两者不同的原因（提示：使用 unicode/utf8 包）。\"]},\"533\":{\"h\":\"4.7 strings 和 strconv 包\",\"t\":[\"作为一种基本数据结构，每种语言都有一些对于字符串的预定义处理函数。Go 中使用 strings 包来完成对字符串的主要操作。\"]},\"534\":{\"h\":\"4.7.1 前缀和后缀\",\"t\":[\"HasPrefix() 判断字符串 s 是否以 prefix 开头：\",\"strings.HasPrefix(s, prefix string) bool \",\"HasSuffix() 判断字符串 s 是否以 suffix 结尾：\",\"strings.HasSuffix(s, suffix string) bool \",\"示例 4.13 presuffix.go\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) func main() { var str string = \\\"This is an example of a string\\\" fmt.Printf(\\\"T/F? Does the string \\\\\\\"%s\\\\\\\" have prefix %s? \\\", str, \\\"Th\\\") fmt.Printf(\\\"%t\\\\n\\\", strings.HasPrefix(str, \\\"Th\\\")) } \",\"输出：\",\"T/F? Does the string \\\"This is an example of a string\\\" have prefix Th? true \",\"这个例子同样演示了转义字符 \\\\ 和格式化字符串的使用。\"]},\"535\":{\"h\":\"4.7.2 字符串包含关系\",\"t\":[\"Contains() 判断字符串 s 是否包含 substr：\",\"strings.Contains(s, substr string) bool \"]},\"536\":{\"h\":\"4.7.3 判断子字符串或字符在父字符串中出现的位置（索引）\",\"t\":[\"Index() 返回字符串 str 在字符串 s 中的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str：\",\"strings.Index(s, str string) int \",\"LastIndex() 返回字符串 str 在字符串 s 中最后出现位置的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str：\",\"strings.LastIndex(s, str string) int \",\"如果需要查询非 ASCII 编码的字符在父字符串中的位置，建议使用以下函数来对字符进行定位：\",\"strings.IndexRune(s string, r rune) int \",\"注: 原文为 \\\"If ch is a non-ASCII character use strings.IndexRune(s string, ch int) int.\\\" 该方法在最新版本的 Go 中定义为 func IndexRune(s string, r rune) int 实际使用中的第二个参数 rune 可以是 rune 或 int, 例如 strings.IndexRune(\\\"chicken\\\", 99) 或 strings.IndexRune(\\\"chicken\\\", rune('k')) \",\"示例 4.14 index_in_string.go\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) func main() { var str string = \\\"Hi, I'm Marc, Hi.\\\" fmt.Printf(\\\"The position of \\\\\\\"Marc\\\\\\\" is: \\\") fmt.Printf(\\\"%d\\\\n\\\", strings.Index(str, \\\"Marc\\\")) fmt.Printf(\\\"The position of the first instance of \\\\\\\"Hi\\\\\\\" is: \\\") fmt.Printf(\\\"%d\\\\n\\\", strings.Index(str, \\\"Hi\\\")) fmt.Printf(\\\"The position of the last instance of \\\\\\\"Hi\\\\\\\" is: \\\") fmt.Printf(\\\"%d\\\\n\\\", strings.LastIndex(str, \\\"Hi\\\")) fmt.Printf(\\\"The position of \\\\\\\"Burger\\\\\\\" is: \\\") fmt.Printf(\\\"%d\\\\n\\\", strings.Index(str, \\\"Burger\\\")) } \",\"输出：\",\"The position of \\\"Marc\\\" is: 8 The position of the first instance of \\\"Hi\\\" is: 0 The position of the last instance of \\\"Hi\\\" is: 14 The position of \\\"Burger\\\" is: -1 \"]},\"537\":{\"h\":\"4.7.4 字符串替换\",\"t\":[\"Replace() 用于将字符串 str 中的前 n 个字符串 old 替换为字符串 new，并返回一个新的字符串，如果 n = -1 则替换所有字符串 old 为字符串 new：\",\"strings.Replace(str, old, new string, n int) string \"]},\"538\":{\"h\":\"4.7.5 统计字符串出现次数\",\"t\":[\"Count() 用于计算字符串 str 在字符串 s 中出现的非重叠次数：\",\"strings.Count(s, str string) int \",\"示例 4.15 count_substring.go\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) func main() { var str string = \\\"Hello, how is it going, Hugo?\\\" var manyG = \\\"gggggggggg\\\" fmt.Printf(\\\"Number of H's in %s is: \\\", str) fmt.Printf(\\\"%d\\\\n\\\", strings.Count(str, \\\"H\\\")) fmt.Printf(\\\"Number of double g's in %s is: \\\", manyG) fmt.Printf(\\\"%d\\\\n\\\", strings.Count(manyG, \\\"gg\\\")) } \",\"输出：\",\"Number of H's in Hello, how is it going, Hugo? is: 2 Number of double g’s in gggggggggg is: 5 \"]},\"539\":{\"h\":\"4.7.6 重复字符串\",\"t\":[\"Repeat() 用于重复 count 次字符串 s 并返回一个新的字符串：\",\"strings.Repeat(s, count int) string \",\"示例 4.16 repeat_string.go\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) func main() { var origS string = \\\"Hi there! \\\" var newS string newS = strings.Repeat(origS, 3) fmt.Printf(\\\"The new repeated string is: %s\\\\n\\\", newS) } \",\"输出：\",\"The new repeated string is: Hi there! Hi there! Hi there! \"]},\"540\":{\"h\":\"4.7.7 修改字符串大小写\",\"t\":[\"ToLower() 将字符串中的 Unicode 字符全部转换为相应的小写字符：\",\"strings.ToLower(s) string \",\"ToUpper() 将字符串中的 Unicode 字符全部转换为相应的大写字符：\",\"strings.ToUpper(s) string \",\"示例 4.17 toupper_lower.go\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) func main() { var orig string = \\\"Hey, how are you George?\\\" var lower string var upper string fmt.Printf(\\\"The original string is: %s\\\\n\\\", orig) lower = strings.ToLower(orig) fmt.Printf(\\\"The lowercase string is: %s\\\\n\\\", lower) upper = strings.ToUpper(orig) fmt.Printf(\\\"The uppercase string is: %s\\\\n\\\", upper) } \",\"输出：\",\"The original string is: Hey, how are you George? The lowercase string is: hey, how are you george? The uppercase string is: HEY, HOW ARE YOU GEORGE? \"]},\"541\":{\"h\":\"4.7.8 修剪字符串\",\"t\":[\"你可以使用 strings.TrimSpace(s) 来剔除字符串开头和结尾的空白符号；如果你想要剔除指定字符，则可以使用 strings.Trim(s, \\\"cut\\\") 来将开头和结尾的 cut 去除掉。该函数的第二个参数可以包含任何字符，如果你只想剔除开头或者结尾的字符串，则可以使用 TrimLeft() 或者 TrimRight() 来实现。\"]},\"542\":{\"h\":\"4.7.9 分割字符串\",\"t\":[\"strings.Fields(s) 将会利用 1 个或多个空白符号来作为动态长度的分隔符将字符串分割成若干小块，并返回一个 slice，如果字符串只包含空白符号，则返回一个长度为 0 的 slice。\",\"strings.Split(s, sep) 用于自定义分割符号来对指定字符串进行分割，同样返回 slice。\",\"因为这 2 个函数都会返回 slice，所以习惯使用 for-range 循环来对其进行处理（第 7.3 节）。\"]},\"543\":{\"h\":\"4.7.10 拼接 slice 到字符串\",\"t\":[\"Join() 用于将元素类型为 string 的 slice 使用分割符号来拼接组成一个字符串：\",\"strings.Join(sl []string, sep string) string \",\"示例 4.18 strings_splitjoin.go\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) func main() { str := \\\"The quick brown fox jumps over the lazy dog\\\" sl := strings.Fields(str) fmt.Printf(\\\"Splitted in slice: %v\\\\n\\\", sl) for _, val := range sl { fmt.Printf(\\\"%s - \\\", val) } fmt.Println() str2 := \\\"GO1|The ABC of Go|25\\\" sl2 := strings.Split(str2, \\\"|\\\") fmt.Printf(\\\"Splitted in slice: %v\\\\n\\\", sl2) for _, val := range sl2 { fmt.Printf(\\\"%s - \\\", val) } fmt.Println() str3 := strings.Join(sl2,\\\";\\\") fmt.Printf(\\\"sl2 joined by ;: %s\\\\n\\\", str3) } \",\"输出：\",\"Splitted in slice: [The quick brown fox jumps over the lazy dog] The - quick - brown - fox - jumps - over - the - lazy - dog - Splitted in slice: [GO1 The ABC of Go 25] GO1 - The ABC of Go - 25 - sl2 joined by ;: GO1;The ABC of Go;25 \",\"其它有关字符串操作的文档请参阅 官方文档（ 译者注：国内用户可访问 该页面 ）。\"]},\"544\":{\"h\":\"4.7.11 从字符串中读取内容\",\"t\":[\"函数 strings.NewReader(str) 用于生成一个 Reader 并读取字符串中的内容，然后返回指向该 Reader 的指针，从其它类型读取内容的函数还有：\",\"Read() 从 []byte 中读取内容。\",\"ReadByte() 和 ReadRune() 从字符串中读取下一个 byte 或者 rune。\"]},\"545\":{\"h\":\"4.7.12 字符串与其它类型的转换\",\"t\":[\"与字符串相关的类型转换都是通过 strconv 包实现的。\",\"该包包含了一些变量用于获取程序运行的操作系统平台下 int 类型所占的位数，如：strconv.IntSize。\",\"任何类型 T 转换为字符串总是成功的。\",\"针对从数字类型转换到字符串，Go 提供了以下函数：\",\"strconv.Itoa(i int) string 返回数字 i 所表示的字符串类型的十进制数。\",\"strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string 将 64 位浮点型的数字转换为字符串，其中 fmt 表示格式（其值可以是 'b'、'e'、'f' 或 'g'），prec 表示精度，bitSize 则使用 32 表示 float32，用 64 表示 float64。\",\"将字符串转换为其它类型 tp 并不总是可能的，可能会在运行时抛出错误 parsing \\\"…\\\": invalid argument。\",\"针对从字符串类型转换为数字类型，Go 提供了以下函数：\",\"strconv.Atoi(s string) (i int, err error) 将字符串转换为 int 型。\",\"strconv.ParseFloat(s string, bitSize int) (f float64, err error) 将字符串转换为 float64 型。\",\"利用多返回值的特性，这些函数会返回 2 个值，第 1 个是转换后的结果（如果转换成功），第 2 个是可能出现的错误，因此，我们一般使用以下形式来进行从字符串到其它类型的转换：\",\"val, err = strconv.Atoi(s) \",\"在下面这个示例中，我们忽略可能出现的转换错误：\",\"示例 4.19 string_conversion.go\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { var orig string = \\\"666\\\" var an int var newS string fmt.Printf(\\\"The size of ints is: %d\\\\n\\\", strconv.IntSize) an, _ = strconv.Atoi(orig) fmt.Printf(\\\"The integer is: %d\\\\n\\\", an) an = an + 5 newS = strconv.Itoa(an) fmt.Printf(\\\"The new string is: %s\\\\n\\\", newS) } \",\"输出： 64 位系统： The size of ints is: 64 32 位系统： The size of ints is: 32 The integer is: 666 The new string is: 671\",\"在第 5.1 节，我们将会利用 if 语句来对可能出现的错误进行分类处理。\",\"更多有关该包的讨论，请参阅 官方文档（ 译者注：国内用户可访问 该页面 ）。\"]},\"546\":{\"h\":\"4.8 时间和日期\",\"t\":[\"time 包为我们提供了一个数据类型 time.Time（作为值使用）以及显示和测量时间和日期的功能函数。\",\"当前时间可以使用 time.Now() 获取，或者使用 t.Day()、t.Minute() 等等来获取时间的一部分；你甚至可以自定义时间格式化字符串，例如： fmt.Printf(\\\"%02d.%02d.%4d\\\\n\\\", t.Day(), t.Month(), t.Year()) 将会输出 21.07.2011。\",\"Duration 类型表示两个连续时刻所相差的纳秒数，类型为 int64。Location 类型映射某个时区的时间，UTC 表示通用协调世界时间。\",\"包中的一个预定义函数 func (t Time) Format(layout string) string 可以根据一个格式化字符串来将一个时间 t 转换为相应格式的字符串，你可以使用一些预定义的格式，如：time.ANSIC 或 time.RFC822。\",\"一般的格式化设计是通过对于一个标准时间的格式化描述来展现的，这听起来很奇怪（02 Jan 2006 15:04 是 Go 语言的诞生时间且自定义格式化时必须以此时间为基准），但看下面这个例子你就会一目了然：\",\"fmt.Println(t.Format(\\\"02 Jan 2006 15:04\\\")) \",\"输出：\",\"21 Jul 2011 10:31 \",\"其它有关时间操作的文档请参阅 官方文档（ 译者注：国内用户可访问 该页面 ）。\",\"示例 4.20 time.go\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) var week time.Duration func main() { t := time.Now() fmt.Println(t) // e.g. Wed Dec 21 09:52:14 +0100 RST 2011 fmt.Printf(\\\"%02d.%02d.%4d\\\\n\\\", t.Day(), t.Month(), t.Year()) // 21.12.2011 t = time.Now().UTC() fmt.Println(t) // Wed Dec 21 08:52:14 +0000 UTC 2011 fmt.Println(time.Now()) // Wed Dec 21 09:52:14 +0100 RST 2011 // calculating times: week = 60 * 60 * 24 * 7 * 1e9 // must be in nanosec week_from_now := t.Add(time.Duration(week)) fmt.Println(week_from_now) // Wed Dec 28 08:52:14 +0000 UTC 2011 // formatting times: fmt.Println(t.Format(time.RFC822)) // 21 Dec 11 0852 UTC fmt.Println(t.Format(time.ANSIC)) // Wed Dec 21 08:56:34 2011 // The time must be 2006-01-02 15:04:05 fmt.Println(t.Format(\\\"02 Jan 2006 15:04\\\")) // 21 Dec 2011 08:52 s := t.Format(\\\"20060102\\\") fmt.Println(t, \\\"=>\\\", s) // Wed Dec 21 08:52:14 +0000 UTC 2011 => 20111221 } \",\"输出的结果已经写在每行 // 的后面。\",\"如果你需要在应用程序在经过一定时间或周期执行某项任务（事件处理的特例），则可以使用 time.After() 或者 time.Ticker：我们将会在 第 14.5 节 讨论这些有趣的事情。 另外，time.Sleep(d Duration) 可以实现对某个进程（实质上是 goroutine）时长为 d 的暂停。\"]},\"547\":{\"h\":\"4.9 指针\",\"t\":[\"不像 Java 和 .NET，Go 语言为程序员提供了控制数据结构的指针的能力；但是，你不能进行指针运算。通过给予程序员基本内存布局，Go 语言允许你控制特定集合的数据结构、分配的数量以及内存访问模式，这些对构建运行良好的系统是非常重要的：指针对于性能的影响是不言而喻的，而如果你想要做的是系统编程、操作系统或者网络应用，指针更是不可或缺的一部分。\",\"由于各种原因，指针对于使用面向对象编程的现代程序员来说可能显得有些陌生，不过我们将会在这一小节对此进行解释，并在未来的章节中展开深入讨论。\",\"程序在内存中存储它的值，每个内存块（或字）有一个地址，通常用十六进制数表示，如：0x6b0820 或 0xf84001d7f0。\",\"Go 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。\",\"下面的代码片段（示例 4.9 pointer.go）可能输出 An integer: 5, its location in memory: 0x6b0820（这个值随着你每次运行程序而变化）。\",\"var i1 = 5 fmt.Printf(\\\"An integer: %d, it's location in memory: %p\\\\n\\\", i1, &i1) \",\"这个地址可以存储在一个叫做指针的特殊数据类型中，在本例中这是一个指向 int 的指针，即 i1：此处使用 *int 表示。如果我们想调用指针 intP，我们可以这样声明它：\",\"var intP *int \",\"然后使用 intP = &i1 是合法的，此时 intP 指向 i1。\",\"（指针的格式化标识符为 %p）\",\"intP 存储了 i1 的内存地址；它指向了 i1 的位置，它引用了变量 i1。\",\"一个指针变量可以指向任何一个值的内存地址 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。当然，可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 * 号（前缀）来获取指针所指向的内容，这里的 * 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。\",\"当一个指针被定义后没有分配到任何变量时，它的值为 nil。\",\"一个指针变量通常缩写为 ptr。\",\"注意事项\",\"在书写表达式类似 var p *type 时，切记在 * 号和指针名称间留有一个空格，因为 - var p*type 是语法正确的，但是在更复杂的表达式中，它容易被误认为是一个乘法表达式！\",\"符号 * 可以放在一个指针前，如 *intP，那么它将得到这个指针指向地址上所存储的值；这被称为反引用（或者内容或者间接引用）操作符；另一种说法是指针转移。\",\"对于任何一个变量 var， 如下表达式都是正确的：var == *(&var)。\",\"现在，我们应当能理解 pointer.go 的全部内容及其输出：\",\"示例 4.21 pointer.go:\",\"package main import \\\"fmt\\\" func main() { var i1 = 5 fmt.Printf(\\\"An integer: %d, its location in memory: %p\\\\n\\\", i1, &i1) var intP *int intP = &i1 fmt.Printf(\\\"The value at memory location %p is %d\\\\n\\\", intP, *intP) } \",\"输出：\",\"An integer: 5, its location in memory: 0x24f0820 The value at memory location 0x24f0820 is 5 \",\"我们可以用下图来表示内存使用的情况：\",\"程序 string_pointer.go 为我们展示了指针对 string 的例子。\",\"它展示了分配一个新的值给 *p 并且更改这个变量自己的值（这里是一个字符串）。\",\"示例 4.22 string_pointer.go\",\"package main import \\\"fmt\\\" func main() { s := \\\"good bye\\\" var p *string = &s *p = \\\"ciao\\\" fmt.Printf(\\\"Here is the pointer p: %p\\\\n\\\", p) // prints address fmt.Printf(\\\"Here is the string *p: %s\\\\n\\\", *p) // prints string fmt.Printf(\\\"Here is the string s: %s\\\\n\\\", s) // prints same string } \",\"输出：\",\"Here is the pointer p: 0x2540820 Here is the string *p: ciao Here is the string s: ciao \",\"通过对 *p 赋另一个值来更改“对象”，这样 s 也会随之更改。\",\"内存示意图如下：\",\"注意事项\",\"你不能获取字面量或常量的地址，例如：\",\"const i = 5 ptr := &i //error: cannot take the address of i ptr2 := &10 //error: cannot take the address of 10 \",\"所以说，Go 语言和 C、C++ 以及 D 语言这些低级（系统）语言一样，都有指针的概念。但是对于经常导致 C 语言内存泄漏继而程序崩溃的指针运算（所谓的指针算法，如：pointer+2，移动指针指向字符串的字节数或数组的某个位置）是不被允许的。Go 语言中的指针保证了内存安全，更像是 Java、C# 和 VB.NET 中的引用。\",\"因此 p++ 在 Go 语言的代码中是不合法的。\",\"指针的一个高级应用是你可以传递一个变量的引用（如函数的参数），这样不会传递变量的拷贝。指针传递是很廉价的，只占用 4 个或 8 个字节。当程序在工作中需要占用大量的内存，或很多变量，或者两者都有，使用指针会减少内存占用和提高效率。被指向的变量也保存在内存中，直到没有任何指针指向它们，所以从它们被创建开始就具有相互独立的生命周期。\",\"另一方面（虽然不太可能），由于一个指针导致的间接引用（一个进程执行了另一个地址），指针的过度频繁使用也会导致性能下降。\",\"指针也可以指向另一个指针，并且可以进行任意深度的嵌套，导致你可以有多级的间接引用，但在大多数情况这会使你的代码结构不清晰。\",\"如我们所见，在大多数情况下 Go 语言可以使程序员轻松创建指针，并且隐藏间接引用，如：自动反向引用。\",\"对一个空指针的反向引用是不合法的，并且会使程序崩溃：\",\"示例 4.23 testcrash.go:\",\"package main func main() { var p *int = nil *p = 0 } // in Windows: stops only with: <exit code=\\\"-1073741819\\\" msg=\\\"process crashed\\\"/> // runtime error: invalid memory address or nil pointer dereference \",\"问题 4.2 列举 Go 语言中 * 号的所有用法。\"]},\"548\":{\"h\":\"第 5 章：控制结构\",\"t\":[\"到目前为止，我们看到的 Go 程序都是从 main() 函数开始执行，然后按顺序执行该函数体中的代码。但我们经常会需要只有在满足一些特定情况时才执行某些代码，也就是说在代码里进行条件判断。针对这种需求，Go 提供了下面这些条件结构和分支结构：\",\"if-else 结构\",\"switch 结构\",\"select 结构，用于 channel 的选择（第 14.4 节）\",\"可以使用迭代或循环结构来重复执行一次或多次某段代码（任务）：\",\"for (range) 结构\",\"一些如 break 和 continue 这样的关键字可以用于中途改变循环的状态。\",\"此外，你还可以使用 return 来结束某个函数的执行，或使用 goto 和标签来调整程序的执行位置。\",\"Go 完全省略了 if、switch 和 for 结构中条件语句两侧的括号，相比 Java、C++ 和 C# 中减少了很多视觉混乱的因素，同时也使你的代码更加简洁。\"]},\"549\":{\"h\":\"5.1 if-else 结构\",\"t\":[\"if 是用于测试某个条件（布尔型或逻辑型）的语句，如果该条件成立，则会执行 if 后由大括号括起来的代码块，否则就忽略该代码块继续执行后续的代码。\",\"if condition { // do something } \",\"如果存在第二个分支，则可以在上面代码的基础上添加 else 关键字以及另一代码块，这个代码块中的代码只有在条件不满足时才会执行。if 和 else 后的两个代码块是相互独立的分支，只可能执行其中一个。\",\"if condition { // do something } else { // do something } \",\"如果存在第三个分支，则可以使用下面这种三个独立分支的形式：\",\"if condition1 { // do something } else if condition2 { // do something else } else { // catch-all or default } \",\"else-if 分支的数量是没有限制的，但是为了代码的可读性，还是不要在 if 后面加入太多的 else-if 结构。如果你必须使用这种形式，则把尽可能先满足的条件放在前面。\",\"即使当代码块之间只有一条语句时，大括号也不可被省略（尽管有些人并不赞成，但这还是符合了软件工程原则的主流做法）。\",\"关键字 if 和 else 之后的左大括号 { 必须和关键字在同一行，如果你使用了 else-if 结构，则前段代码块的右大括号 } 必须和 else-if 关键字在同一行。这两条规则都是被编译器强制规定的。\",\"非法的 Go 代码:\",\"if x{ } else { // 无效的 } \",\"要注意的是，在你使用 gofmt 格式化代码之后，每个分支内的代码都会缩进 4 个或 8 个空格，或者是 1 个 tab，并且右大括号与对应的 if 关键字垂直对齐。\",\"在有些情况下，条件语句两侧的括号是可以被省略的；当条件比较复杂时，则可以使用括号让代码更易读。条件允许是符合条件，需使用 &&、|| 或 !，你可以使用括号来提升某个表达式的运算优先级，并提高代码的可读性。\",\"一种可能用到条件语句的场景是测试变量的值，在不同的情况执行不同的语句，不过将在第 5.3 节讲到的 switch 结构会更适合这种情况。\",\"示例 5.1 booleans.go\",\"package main import \\\"fmt\\\" func main() { bool1 := true if bool1 { fmt.Printf(\\\"The value is true\\\\n\\\") } else { fmt.Printf(\\\"The value is false\\\\n\\\") } } \",\"输出： The value is true\",\"注意事项 这里不需要使用 if bool1 == true 来判断，因为 bool1 本身已经是一个布尔类型的值。\",\"这种做法一般都用在测试 true 或者有利条件时，但你也可以使用取反 ! 来判断值的相反结果，如：if !bool1 或者 if !(condition)。后者的括号大多数情况下是必须的，如这种情况：if !(var1 == var2)。\",\"当 if 结构内有 break、continue、goto 或者 return 语句时，Go 代码的常见写法是省略 else 部分（另见第 5.2 节）。无论满足哪个条件都会返回 x 或者 y 时，一般使用以下写法：\",\"if condition { return x } return y \",\"注意事项 不要同时在 if-else 结构的两个分支里都使用 return 语句，这将导致编译报错 function ends without a return statement（你可以认为这是一个编译器的 Bug 或者特性）。（ 译者注：该问题已经在 Go 1.1 中被修复或者说改进 ）\",\"这里举一些有用的例子：\",\"判断一个字符串是否为空：\",\"if str == \\\"\\\" { ... }\",\"if len(str) == 0 {...}\",\"判断运行 Go 程序的操作系统类型，这可以通过常量 runtime.GOOS 来判断（第 2.2 节）。\",\"if runtime.GOOS == \\\"windows\\\" { . .. } else { // Unix-like . .. } \",\"这段代码一般被放在 init() 函数中执行。这儿还有一段示例来演示如何根据操作系统来决定输入结束的提示：\",\"var prompt = \\\"Enter a digit, e.g. 3 \\\"+ \\\"or %s to quit.\\\" func init() { if runtime.GOOS == \\\"windows\\\" { prompt = fmt.Sprintf(prompt, \\\"Ctrl+Z, Enter\\\") } else { //Unix-like prompt = fmt.Sprintf(prompt, \\\"Ctrl+D\\\") } } \",\"函数 Abs() 用于返回一个整型数字的绝对值:\",\"func Abs(x int) int { if x < 0 { return -x } return x } \",\"isGreater 用于比较两个整型数字的大小:\",\"func isGreater(x, y int) bool { if x > y { return true } return false } \",\"在第四种情况中，if 可以包含一个初始化语句（如：给一个变量赋值）。这种写法具有固定的格式（在初始化语句后方必须加上分号）：\",\"if initialization; condition { // do something } \",\"例如:\",\"val := 10 if val > max { // do something } \",\"你也可以这样写:\",\"if val := 10; val > max { // do something } \",\"但要注意的是，使用简短方式 := 声明的变量的作用域只存在于 if 结构中（在 if 结构的大括号之间，如果使用 if-else 结构则在 else 代码块中变量也会存在）。如果变量在 if 结构之前就已经存在，那么在 if 结构中，该变量原来的值会被隐藏。最简单的解决方案就是不要在初始化语句中声明变量（见5.2 节的例 3 了解更多)。\",\"示例 5.2 ifelse.go\",\"package main import \\\"fmt\\\" func main() { var first int = 10 var cond int if first <= 0 { fmt.Printf(\\\"first is less than or equal to 0\\\\n\\\") } else if first > 0 && first < 5 { fmt.Printf(\\\"first is between 0 and 5\\\\n\\\") } else { fmt.Printf(\\\"first is 5 or greater\\\\n\\\") } if cond = 5; cond > 10 { fmt.Printf(\\\"cond is greater than 10\\\\n\\\") } else { fmt.Printf(\\\"cond is not greater than 10\\\\n\\\") } } \",\"输出：\",\"first is 5 or greater cond is not greater than 10 \",\"下面的代码片段展示了如何通过在初始化语句中获取函数 process() 的返回值，并在条件语句中作为判定条件来决定是否执行 if 结构中的代码：\",\"if value := process(data); value > max { ... } \"]},\"550\":{\"h\":\"5.2 测试多返回值函数的错误\",\"t\":[\"Go 语言的函数经常使用两个返回值来表示执行是否成功：返回某个值以及 true 表示成功；返回零值（或 nil）和 false 表示失败（第 4.4 节）。当不使用 true 或 false 的时候，也可以使用一个 error 类型的变量来代替作为第二个返回值：成功执行的话，error 的值为 nil，否则就会包含相应的错误信息（Go 语言中的错误类型为 error: var err error，我们将会在第 13 章 进行更多地讨论）。这样一来，就很明显需要用一个 if 语句来测试执行结果；由于其符号的原因，这样的形式又称之为“逗号 ok 模式”(comma, ok pattern)。\",\"在第 4.7 节 的程序 string_conversion.go 中，函数 strconv.Atoi() 的作用是将一个字符串转换为一个整数。之前我们忽略了相关的错误检查：\",\"anInt, _ = strconv.Atoi(origStr) \",\"如果 origStr 不能被转换为整数，anInt 的值会变成 0 而 _ 无视了错误，程序会继续运行。\",\"这样做是非常不好的：程序应该在最接近的位置检查所有相关的错误，至少需要暗示用户有错误发生并对函数进行返回，甚至中断程序。\",\"我们在第二个版本中对代码进行了改进：\",\"示例 1：\",\"示例 5.3 string_conversion2.go\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) func main() { var orig string = \\\"ABC\\\" // var an int var newS string // var err error fmt.Printf(\\\"The size of ints is: %d\\\\n\\\", strconv.IntSize) // anInt, err = strconv.Atoi(origStr) an, err := strconv.Atoi(orig) if err != nil { fmt.Printf(\\\"orig %s is not an integer - exiting with error\\\\n\\\", orig) return } fmt.Printf(\\\"The integer is %d\\\\n\\\", an) an = an + 5 newS = strconv.Itoa(an) fmt.Printf(\\\"The new string is: %s\\\\n\\\", newS) } \",\"这是测试 err 变量是否包含一个真正的错误（if err != nil）的习惯用法。如果确实存在错误，则会打印相应的错误信息然后通过 return 提前结束函数的执行。我们还可以使用携带返回值的 return 形式，例如 return err。这样一来，函数的调用者就可以检查函数执行过程中是否存在错误了。\",\"习惯用法\",\"value, err := pack1.Function1(param1) if err != nil { fmt.Printf(\\\"An error occured in pack1.Function1 with parameter %v\\\", param1) return err } // 未发生错误，继续执行： \",\"由于本例的函数调用者属于 main 函数，所以程序会直接停止运行。\",\"如果我们想要在错误发生的同时终止程序的运行，我们可以使用 os 包的 Exit 函数：\",\"习惯用法\",\"if err != nil { fmt.Printf(\\\"Program stopping with error %v\\\", err) os.Exit(1) } \",\"（此处的退出代码 1 可以使用外部脚本获取到）\",\"有时候，你会发现这种习惯用法被连续重复地使用在某段代码中。\",\"当没有错误发生时，代码继续运行就是唯一要做的事情，所以 if 语句块后面不需要使用 else 分支。\",\"示例 2：我们尝试通过 os.Open 方法打开一个名为 name 的只读文件：\",\"f, err := os.Open(name) if err != nil { return err } doSomething(f) // 当没有错误发生时，文件对象被传入到某个函数中 doSomething \",\"练习 5.1 尝试改写 string_conversion2.go 中的代码，要求使用 := 方法来对 err 进行赋值，哪些地方可以被修改？\",\"示例 3：可以将错误的获取放置在 if 语句的初始化部分：\",\"习惯用法\",\"if err := file.Chmod(0664); err != nil { fmt.Println(err) return err } \",\"示例 4：或者将 ok-pattern 的获取放置在 if 语句的初始化部分，然后进行判断：\",\"习惯用法\",\"if value, ok := readData(); ok { … } \",\"注意事项\",\"如果您像下面一样，没有为多返回值的函数准备足够的变量来存放结果：\",\"func mySqrt(f float64) (v float64, ok bool) { if f < 0 { return } // error case return math.Sqrt(f),true } func main() { t := mySqrt(25.0) fmt.Println(t) } \",\"您会得到一个编译错误：multiple-value mySqrt() in single-value context。\",\"正确的做法是：\",\"t, ok := mySqrt(25.0) if ok { fmt.Println(t) } \",\"注意事项 2\",\"当您将字符串转换为整数时，且确定转换一定能够成功时，可以将 Atoi() 函数进行一层忽略错误的封装：\",\"func atoi (s string) (n int) { n, _ = strconv.Atoi(s) return } \",\"实际上，fmt 包（第 4.4.3 节）最简单的打印函数也有 2 个返回值：\",\"count, err := fmt.Println(x) // number of bytes printed, nil or 0, error \",\"当打印到控制台时，可以将该函数返回的错误忽略；但当输出到文件流、网络流等具有不确定因素的输出对象时，应该始终检查是否有错误发生（另见练习 6.1b）。\"]},\"551\":{\"h\":\"5.3 switch 结构\",\"t\":[\"相比较 C 和 Java 等其它语言而言，Go 语言中的 switch 结构使用上更加灵活。它接受任意形式的表达式：\",\"switch var1 { case val1: ... case val2: ... default: ... } \",\"变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。前花括号 { 必须和 switch 关键字在同一行。\",\"您可以同时测试多个可能符合条件的值，使用逗号分割它们，例如：case val1, val2, val3。\",\"每一个 case 分支都是唯一的，从上至下逐一测试，直到匹配为止。（ Go 语言使用快速的查找算法来测试 switch 条件与 case 分支的匹配情况，直到算法匹配到某个 case 或者进入 default 条件为止。）\",\"一旦成功地匹配到某个分支，在执行完相应代码后就会退出整个 switch 代码块，也就是说您不需要特别使用 break 语句来表示结束。\",\"因此，程序也不会自动地去执行下一个分支的代码。如果在执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用 fallthrough 关键字来达到目的。\",\"因此：\",\"switch i { case 0: // 空分支，只有当 i == 0 时才会进入分支 case 1: f() // 当 i == 0 时函数不会被调用 } \",\"并且：\",\"switch i { case 0: fallthrough case 1: f() // 当 i == 0 时函数也会被调用 } \",\"在 case ...: 语句之后，您不需要使用花括号将多行语句括起来，但您可以在分支中进行任意形式的编码。当代码块只有一行时，可以直接放置在 case 语句之后。\",\"您同样可以使用 return 语句来提前结束代码块的执行。当您在 switch 语句块中使用 return 语句，并且您的函数是有返回值的，您还需要在 switch 之后添加相应的 return 语句以确保函数始终会返回。\",\"可选的 default 分支可以出现在任何顺序，但最好将它放在最后。它的作用类似与 if-else 语句中的 else，表示不符合任何已给出条件时，执行相关语句。\",\"示例 5.4 switch1.go：\",\"package main import \\\"fmt\\\" func main() { var num1 int = 100 switch num1 { case 98, 99: fmt.Println(\\\"It's equal to 98\\\") case 100: fmt.Println(\\\"It's equal to 100\\\") default: fmt.Println(\\\"It's not equal to 98 or 100\\\") } } \",\"输出：\",\"It's equal to 100 \",\"在第 12.1 节，我们会使用 switch 语句判断从键盘输入的字符（详见第 12.2 节 的 switch.go）。switch 语句的第二种形式是不提供任何被判断的值（实际上默认为判断是否为 true），然后在每个 case 分支中进行测试不同的条件。当任一分支的测试结果为 true 时，该分支的代码会被执行。这看起来非常像链式的 if-else 语句，但是在测试条件非常多的情况下，提供了可读性更好的书写方式。\",\"switch { case condition1: ... case condition2: ... default: ... } \",\"例如：\",\"switch { case i < 0: f1() case i == 0: f2() case i > 0: f3() } \",\"任何支持进行相等判断的类型都可以作为测试表达式的条件，包括 int、string、指针等。\",\"示例 5.4 switch2.go：\",\"package main import \\\"fmt\\\" func main() { var num1 int = 7 switch { case num1 < 0: fmt.Println(\\\"Number is negative\\\") case num1 > 0 && num1 < 10: fmt.Println(\\\"Number is between 0 and 10\\\") default: fmt.Println(\\\"Number is 10 or greater\\\") } } \",\"输出：\",\"Number is between 0 and 10 \",\"switch 语句的第三种形式是包含一个初始化语句：\",\"switch initialization { case val1: ... case val2: ... default: ... } \",\"这种形式可以非常优雅地进行条件判断：\",\"switch result := calculate(); { case result < 0: ... case result > 0: ... default: // 0 } \",\"在下面这个代码片段中，变量 a 和 b 被平行初始化，然后作为判断条件：\",\"switch a, b := x[i], y[j]; { case a < b: t = -1 case a == b: t = 0 case a > b: t = 1 } \",\"switch 语句还可以被用于 type-switch（详见第 11.4 节）来判断某个 interface 变量中实际存储的变量类型。\",\"问题 5.1：\",\"请说出下面代码片段输出的结果：\",\" k := 6 switch k { case 4: fmt.Println(\\\"was <= 4\\\") fallthrough case 5: fmt.Println(\\\"was <= 5\\\") fallthrough case 6: fmt.Println(\\\"was <= 6\\\") fallthrough case 7: fmt.Println(\\\"was <= 7\\\") fallthrough case 8: fmt.Println(\\\"was <= 8\\\") fallthrough default: fmt.Println(\\\"default case\\\") } \",\"练习 5.2：season.go：\",\"写一个 Season() 函数，要求接受一个代表月份的数字，然后返回所代表月份所在季节的名称（不用考虑月份的日期）。\"]},\"552\":{\"h\":\"5.4 for 结构\",\"t\":[\"如果想要重复执行某些语句，Go 语言中您只有 for 结构可以使用。不要小看它，这个 for 结构比其它语言中的更为灵活。\",\"注意事项 其它许多语言中也没有发现和 do-while 完全对等的 for 结构，可能是因为这种需求并不是那么强烈。\"]},\"553\":{\"h\":\"5.4.1 基于计数器的迭代\",\"t\":[\"文件 for1.go 中演示了最简单的基于计数器的迭代，基本形式为：\",\"for 初始化语句; 条件语句; 修饰语句 {} \",\"示例 5.6 for1.go：\",\"package main import \\\"fmt\\\" func main() { for i := 0; i < 5; i++ { fmt.Printf(\\\"This is the %d iteration\\\\n\\\", i) } } \",\"输出：\",\"This is the 0 iteration This is the 1 iteration This is the 2 iteration This is the 3 iteration This is the 4 iteration \",\"由花括号括起来的代码块会被重复执行已知次数，该次数是根据计数器（此例为 i）决定的。循环开始前，会执行且仅会执行一次初始化语句 i := 0;；这比在循环之前声明更为简短。紧接着的是条件语句 i < 5;，在每次循环开始前都会进行判断，一旦判断结果为 false，则退出循环体。最后一部分为修饰语句 i++，一般用于增加或减少计数器。\",\"这三部分组成的循环的头部，它们之间使用分号 ; 相隔，但并不需要括号 () 将它们括起来。例如：for (i = 0; i < 10; i++) { }，这是无效的代码！\",\"同样的，左花括号 { 必须和 for 语句在同一行，计数器的生命周期在遇到右花括号 } 时便终止。一般习惯使用 i、j、z 或 ix 等较短的名称命名计数器。\",\"特别注意，永远不要在循环体内修改计数器，这在任何语言中都是非常差的实践！\",\"您还可以在循环中同时使用多个计数器：\",\"for i, j := 0, N; i < j; i, j = i+1, j-1 {} \",\"这得益于 Go 语言具有的平行赋值的特性（可以查看第 7 章string_reverse.go 中反转数组的示例）。\",\"您可以将两个 for 循环嵌套起来：\",\"for i:=0; i<5; i++ { for j:=0; j<10; j++ { println(j) } } \",\"如果您使用 for 循环迭代一个 Unicode 编码的字符串，会发生什么？\",\"示例 5.7 for_string.go：\",\"package main import \\\"fmt\\\" func main() { str := \\\"Go is a beautiful language!\\\" fmt.Printf(\\\"The length of str is: %d\\\\n\\\", len(str)) for ix :=0; ix < len(str); ix++ { fmt.Printf(\\\"Character on position %d is: %c \\\\n\\\", ix, str[ix]) } str2 := \\\"日本語\\\" fmt.Printf(\\\"The length of str2 is: %d\\\\n\\\", len(str2)) for ix :=0; ix < len(str2); ix++ { fmt.Printf(\\\"Character on position %d is: %c \\\\n\\\", ix, str2[ix]) } } \",\"输出：\",\"The length of str is: 27 Character on position 0 is: G Character on position 1 is: o Character on position 2 is: Character on position 3 is: i Character on position 4 is: s Character on position 5 is: Character on position 6 is: a Character on position 7 is: Character on position 8 is: b Character on position 9 is: e Character on position 10 is: a Character on position 11 is: u Character on position 12 is: t Character on position 13 is: i Character on position 14 is: f Character on position 15 is: u Character on position 16 is: l Character on position 17 is: Character on position 18 is: l Character on position 19 is: a Character on position 20 is: n Character on position 21 is: g Character on position 22 is: u Character on position 23 is: a Character on position 24 is: g Character on position 25 is: e Character on position 26 is: ! The length of str2 is: 9 Character on position 0 is: æ Character on position 1 is:  Character on position 2 is: ¥ Character on position 3 is: æ Character on position 4 is:  Character on position 5 is: ¬ Character on position 6 is: è Character on position 7 is: ª Character on position 8 is:  \",\"如果我们打印 str 和 str2 的长度，会分别得到 27 和 9。\",\"由此我们可以发现，ASCII 编码的字符占用 1 个字节，既每个索引都指向不同的字符，而非 ASCII 编码的字符（占有 2 到 4 个字节）不能单纯地使用索引来判断是否为同一个字符。我们会在第 5.4.4 节 解决这个问题。\"]},\"554\":{\"h\":\"练习题\",\"t\":[\"练习 5.4for_loop.go\",\"使用 for 结构创建一个简单的循环。要求循环 15 次然后使用 fmt 包来打印计数器的值。\",\"使用 goto 语句重写循环，要求不能使用 for 关键字。\",\"练习 5.5for_character.go\",\"创建一个程序，要求能够打印类似下面的结果（尾行达 25 个字符为止）：\",\"G GG GGG GGGG GGGGG GGGGGG \",\"使用 2 层嵌套 for 循环。\",\"仅用 1 层 for 循环以及字符串连接。\",\"练习 5.6bitwise_complement.go\",\"使用按位补码从 0 到 10，使用位表达式 %b 来格式化输出。\",\"练习 5.7 Fizz-Buzz 问题：fizzbuzz.go\",\"写一个从 1 打印到 100 的程序，但是每当遇到 3 的倍数时，不打印相应的数字，但打印一次 \\\"Fizz\\\"。遇到 5 的倍数时，打印 Buzz 而不是相应的数字。对于同时为 3 和 5 的倍数的数，打印 FizzBuzz（提示：使用 switch 语句）。\",\"练习 5.8rectangle_stars.go\",\"使用 * 符号打印宽为 20，高为 10 的矩形。\"]},\"555\":{\"h\":\"5.4.2 基于条件判断的迭代\",\"t\":[\"for 结构的第二种形式是没有头部的条件判断迭代（类似其它语言中的 while 循环），基本形式为：for 条件语句 {}。\",\"您也可以认为这是没有初始化语句和修饰语句的 for 结构，因此 ;; 便是多余的了。\",\"Listing 5.8 for2.go：\",\"package main import \\\"fmt\\\" func main() { var i int = 5 for i >= 0 { i = i - 1 fmt.Printf(\\\"The variable i is now: %d\\\\n\\\", i) } } \",\"输出：\",\"The variable i is now: 4 The variable i is now: 3 The variable i is now: 2 The variable i is now: 1 The variable i is now: 0 The variable i is now: -1 \"]},\"556\":{\"h\":\"5.4.3 无限循环\",\"t\":[\"条件语句是可以被省略的，如 i:=0; ; i++ 或 for { } 或 for ;; { }（;; 会在使用 gofmt 时被移除）：这些循环的本质就是无限循环。最后一个形式也可以被改写为 for true { }，但一般情况下都会直接写 for { }。\",\"如果 for 循环的头部没有条件语句，那么就会认为条件永远为 true，因此循环体内必须有相关的条件判断以确保会在某个时刻退出循环。\",\"想要直接退出循环体，可以使用 break 语句（第 5.5 节）或 return 语句直接返回（第 6.1 节）。\",\"但这两者之间有所区别，break 只是退出当前的循环体，而 return 语句提前对函数进行返回，不会执行后续的代码。\",\"无限循环的经典应用是服务器，用于不断等待和接受新的请求。\",\"for t, err = p.Token(); err == nil; t, err = p.Token() { ... } \"]},\"557\":{\"h\":\"5.4.4 for-range 结构\",\"t\":[\"这是 Go 特有的一种的迭代结构，您会发现它在许多情况下都非常有用。它可以迭代任何一个集合（包括数组和 map，详见第 7 和 8 章）。语法上很类似其它语言中的 foreach 语句，但您依旧可以获得每次迭代所对应的索引。一般形式为：for ix, val := range coll { }。\",\"要注意的是，val 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值（译者注：如果 val 为指针，则会产生指针的拷贝，依旧可以修改集合中的原值）。一个字符串是 Unicode 编码的字符（或称之为 rune）集合，因此您也可以用它迭代字符串：\",\"for pos, char := range str { ... } \",\"每个 rune 字符和索引在 for-range 循环中是一一对应的。它能够自动根据 UTF-8 规则识别 Unicode 编码的字符。\",\"示例 5.9 range_string.go：\",\"package main import \\\"fmt\\\" func main() { str := \\\"Go is a beautiful language!\\\" fmt.Printf(\\\"The length of str is: %d\\\\n\\\", len(str)) for pos, char := range str { fmt.Printf(\\\"Character on position %d is: %c \\\\n\\\", pos, char) } fmt.Println() str2 := \\\"Chinese: 日本語\\\" fmt.Printf(\\\"The length of str2 is: %d\\\\n\\\", len(str2)) for pos, char := range str2 { fmt.Printf(\\\"character %c starts at byte position %d\\\\n\\\", char, pos) } fmt.Println() fmt.Println(\\\"index int(rune) rune char bytes\\\") for index, rune := range str2 { fmt.Printf(\\\"%-2d %d %U '%c' % X\\\\n\\\", index, rune, rune, rune, []byte(string(rune))) } } \",\"输出：\",\"The length of str is: 27 Character on position 0 is: G Character on position 1 is: o Character on position 2 is: Character on position 3 is: i Character on position 4 is: s Character on position 5 is: Character on position 6 is: a Character on position 7 is: Character on position 8 is: b Character on position 9 is: e Character on position 10 is: a Character on position 11 is: u Character on position 12 is: t Character on position 13 is: i Character on position 14 is: f Character on position 15 is: u Character on position 16 is: l Character on position 17 is: Character on position 18 is: l Character on position 19 is: a Character on position 20 is: n Character on position 21 is: g Character on position 22 is: u Character on position 23 is: a Character on position 24 is: g Character on position 25 is: e Character on position 26 is: ! The length of str2 is: 18 character C starts at byte position 0 character h starts at byte position 1 character i starts at byte position 2 character n starts at byte position 3 character e starts at byte position 4 character s starts at byte position 5 character e starts at byte position 6 character : starts at byte position 7 character starts at byte position 8 character 日 starts at byte position 9 character 本 starts at byte position 12 character 語 starts at byte position 15 index int(rune) rune char bytes 0 67 U+0043 'C' 43 1 104 U+0068 'h' 68 2 105 U+0069 'i' 69 3 110 U+006E 'n' 6E 4 101 U+0065 'e' 65 5 115 U+0073 's' 73 6 101 U+0065 'e' 65 7 58 U+003A ':' 3A 8 32 U+0020 ' ' 20 9 26085 U+65E5 '日' E6 97 A5 12 26412 U+672C '本' E6 9C AC 15 35486 U+8A9E '語' E8 AA 9E \",\"请将输出结果和 Listing 5.7（for_string.go）进行对比。\",\"我们可以看到，常用英文字符使用 1 个字节表示，而汉字（译者注：严格来说，“Chinese: 日本語”的 Chinese 应该是 Japanese）使用 3 个字符表示。\",\"练习 5.9 以下程序的输出结果是什么？\",\"for i := 0; i < 5; i++ { var v int fmt.Printf(\\\"%d \\\", v) v = 5 } \",\"问题 5.2： 请描述以下 for 循环的输出结果：\",\"for i := 0; ; i++ { fmt.Println(\\\"Value of i is now:\\\", i) } \",\"for i := 0; i < 3; { fmt.Println(\\\"Value of i:\\\", i) } \",\"s := \\\"\\\" for ; s != \\\"aaaaa\\\"; { fmt.Println(\\\"Value of s:\\\", s) s = s + \\\"a\\\" } \",\"for i, j, s := 0, 5, \\\"a\\\"; i < 3 && j < 100 && s != \\\"aaaaa\\\"; i, j, s = i+1, j+1, s + \\\"a\\\" { fmt.Println(\\\"Value of i, j, s:\\\", i, j, s) } \"]},\"558\":{\"h\":\"5.5 break 与 continue\",\"t\":[\"您可以使用 break 语句重写 for2.go 的代码：\",\"示例 5.10 for3.go：\",\"for { i = i - 1 fmt.Printf(\\\"The variable i is now: %d\\\\n\\\", i) if i < 0 { break } } \",\"因此每次迭代都会对条件进行检查（i < 0），以此判断是否需要停止循环。如果退出条件满足，则使用 break 语句退出循环。\",\"一个 break 的作用范围为该语句出现后的最内部的结构，它可以被用于任何形式的 for 循环（计数器、条件判断等）。但在 switch 或 select 语句中（详见第 13 章），break 语句的作用结果是跳过整个代码块，执行后续的代码。\",\"下面的示例中包含了嵌套的循环体（for4.go），break 只会退出最内层的循环：\",\"示例 5.11 for4.go：\",\"package main func main() { for i:=0; i<3; i++ { for j:=0; j<10; j++ { if j>5 { break } print(j) } print(\\\" \\\") } } \",\"输出：\",\"012345 012345 012345 \",\"关键字 continue 忽略剩余的循环体而直接进入下一次循环的过程，但不是无条件执行下一次循环，执行之前依旧需要满足循环的判断条件。\",\"示例 5.12 for5.go：\",\"package main func main() { for i := 0; i < 10; i++ { if i == 5 { continue } print(i) print(\\\" \\\") } } \",\"输出：\",\"0 1 2 3 4 6 7 8 9 \",\"显然，5 被跳过了。\",\"另外，关键字 continue 只能被用于 for 循环中。\"]},\"559\":{\"h\":\"5.6 标签与 goto\",\"t\":[\"for、switch 或 select 语句都可以配合标签 (label) 形式的标识符使用，即某一行第一个以冒号 (:) 结尾的单词（gofmt 会将后续代码自动移至下一行）。\",\"示例 5.13 for6.go：\",\"（标签的名称是大小写敏感的，为了提升可读性，一般建议使用全部大写字母）\",\"package main import \\\"fmt\\\" func main() { LABEL1: for i := 0; i <= 5; i++ { for j := 0; j <= 5; j++ { if j == 4 { continue LABEL1 } fmt.Printf(\\\"i is: %d, and j is: %d\\\\n\\\", i, j) } } } \",\"本例中，continue 语句指向 LABEL1，当执行到该语句的时候，就会跳转到 LABEL1 标签的位置。\",\"您可以看到当 j==4 和 j==5 的时候，没有任何输出：标签的作用对象为外部循环，因此 i 会直接变成下一个循环的值，而此时 j 的值就被重设为 0，即它的初始值。如果将 continue 改为 break，则不会只退出内层循环，而是直接退出外层循环了。另外，还可以使用 goto 语句和标签配合使用来模拟循环。\",\"示例 5.14 goto.go：\",\"package main func main() { i:=0 HERE: print(i) i++ if i==5 { return } goto HERE } \",\"上面的代码会输出 01234。\",\"使用逆向的 goto 会很快导致意大利面条式的代码，所以不应当使用而选择更好的替代方案。\",\"特别注意 使用标签和 goto 语句是不被鼓励的：它们会很快导致非常糟糕的程序设计，而且总有更加可读的替代方案来实现相同的需求。\",\"一个建议使用 goto 语句的示例会在第 15.1 章 的 simple_tcp_server.go 中出现：示例中在发生读取错误时，使用 goto 来跳出无限读取循环并关闭相应的客户端链接。\",\"定义但未使用标签会导致编译错误：label … defined and not used。\",\"如果您必须使用 goto，应当只使用正序的标签（标签位于 goto 语句之后），但注意标签和 goto 语句之间不能出现定义新变量的语句，否则会导致编译失败。\",\"示例 5.15 goto2.go：\",\"// compile error goto2.go:8: goto TARGET jumps over declaration of b at goto2.go:8 package main import \\\"fmt\\\" func main() { a := 1 goto TARGET // compile error b := 9 TARGET: b += a fmt.Printf(\\\"a is %v *** b is %v\\\", a, b) } \",\"问题 5.3 请描述下面 for 循环的输出：\",\"i := 0 for { //since there are no checks, this is an infinite loop if i >= 3 { break } //break out of this for loop when this condition is met fmt.Println(\\\"Value of i is:\\\", i) i++ } fmt.Println(\\\"A statement just after for loop.\\\") \",\"for i := 0; i<7 ; i++ { if i%2 == 0 { continue } fmt.Println(\\\"Odd:\\\", i) } \"]},\"560\":{\"h\":\"第 6 章：函数 (function)\",\"t\":[\"函数是 Go 里面的基本代码块：Go 函数的功能非常强大，以至于被认为拥有函数式编程语言的多种特性。在这一章，我们将对 第 4.2.2 节 所简要描述的函数进行详细的讲解。\"]},\"561\":{\"h\":\"6.1 介绍\",\"t\":[\"每一个程序都包含很多的函数：函数是基本的代码块。\",\"Go 是编译型语言，所以函数编写的顺序是无关紧要的；鉴于可读性的需求，最好把 main() 函数写在文件的前面，其他函数按照一定逻辑顺序进行编写（例如函数被调用的顺序）。\",\"编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的任务（那就是函数）来解决。而且，同一个任务（函数）可以被调用多次，有助于代码重用。\",\"（事实上，好的程序是非常注意 DRY 原则的，即不要重复你自己 (Don't Repeat Yourself)，意思是执行特定任务的代码只能在程序里面出现一次。）\",\"当函数执行到代码块最后一行（} 之前）或者 return 语句的时候会退出，其中 return 语句可以带有零个或多个参数；这些参数将作为返回值（参考 第 6.2 节）供调用者使用。简单的 return 语句也可以用来结束 for 死循环，或者结束一个协程 (goroutine)。\",\"Go 里面有三种类型的函数：\",\"普通的带有名字的函数\",\"匿名函数或者 lambda 函数（参考 第 6.8 节）\",\"方法（Methods，参考 第 10.6 节）\",\"除了 main()、init() 函数外，其它所有类型的函数都可以有参数与返回值。函数参数、返回值以及它们的类型被统称为函数签名。\",\"作为提醒，提前介绍一个语法：\",\"这样是不正确的 Go 代码：\",\"func g() { } \",\"它必须是这样的：\",\"func g() { } \",\"函数被调用的基本格式如下：\",\"pack1.Function(arg1, arg2, …, argn) \",\"Function 是 pack1 包里面的一个函数，括号里的是被调用函数的实参 (argument)：这些值被传递给被调用函数的形参（parameter，参考第 6.2 节）。函数被调用的时候，这些实参将被复制（简单而言）然后传递给被调用函数。函数一般是在其他函数里面被调用的，这个其他函数被称为调用函数 (calling function)。函数能多次调用其他函数，这些被调用函数按顺序（简单而言）执行，理论上，函数调用其他函数的次数是无穷的（直到函数调用栈被耗尽）。\",\"一个简单的函数调用其他函数的例子：\",\"示例 6.1 greeting.go\",\"package main func main() { println(\\\"In main before calling greeting\\\") greeting() println(\\\"In main after calling greeting\\\") } func greeting() { println(\\\"In greeting: Hi!!!!!\\\") } \",\"代码输出：\",\"In main before calling greeting In greeting: Hi!!!!! In main after calling greeting \",\"函数可以将其他函数调用作为它的参数，只要这个被调用函数的返回值个数、返回值类型和返回值的顺序与调用函数所需求的实参是一致的，例如：\",\"假设 f1 需要 3 个参数 f1(a, b, c int)，同时 f2 返回 3 个参数 f2(a, b int) (int, int, int)，就可以这样调用 f1：f1(f2(a, b))。\",\"函数重载 (function overloading) 指的是可以编写多个同名函数，只要它们拥有不同的形参/或者不同的返回值，在 Go 里面函数重载是不被允许的。这将导致一个编译错误：\",\"funcName redeclared in this book, previous declaration at lineno \",\"Go 语言不支持这项特性的主要原因是函数重载需要进行多余的类型匹配影响性能；没有重载意味着只是一个简单的函数调度。所以你需要给不同的函数使用不同的名字，我们通常会根据函数的特征对函数进行命名（参考 第 11.12.5 节）。\",\"如果需要申明一个在外部定义的函数，你只需要给出函数名与函数签名，不需要给出函数体：\",\"func flushICache(begin, end uintptr) // implemented externally \",\"函数也可以以申明的方式被使用，作为一个函数类型，就像：\",\"type binOp func(int, int) int \",\"在这里，不需要函数体 {}。\",\"函数是一等值 (first-class value)：它们可以赋值给变量，就像 add := binOp 一样。\",\"这个变量知道自己指向的函数的签名，所以给它赋一个具有不同签名的函数值是不可能的。\",\"函数值 (functions value) 之间可以相互比较：如果它们引用的是相同的函数或者都是 nil 的话，则认为它们是相同的函数。函数不能在其它函数里面声明（不能嵌套），不过我们可以通过使用匿名函数（参考 第 6.8 节）来破除这个限制。\",\"目前 Go 没有泛型 (generic) 的概念，也就是说它不支持那种支持多种类型的函数。不过在大部分情况下可以通过接口 (interface)，特别是空接口与类型选择（type switch，参考 第 11.12 节）与/或者通过使用反射（reflection，参考 第 6.8 节）来实现相似的功能。使用这些技术将导致代码更为复杂、性能更为低下，所以在非常注意性能的的场合，最好是为每一个类型单独创建一个函数，而且代码可读性更强。\"]},\"562\":{\"h\":\"6.2 函数参数与返回值\",\"t\":[\"函数能够接收参数供自己使用，也可以返回零个或多个值（我们通常把返回多个值称为返回一组值）。相比与 C、C++、Java 和 C#，多值返回是 Go 的一大特性，为我们判断一个函数是否正常执行（参考 第 5.2 节）提供了方便。\",\"我们通过 return 关键字返回一组值。事实上，任何一个有返回值（单个或多个）的函数都必须以 return 或 panic（参考 第 13 章）结尾。\",\"在函数块里面，return 之后的语句都不会执行。如果一个函数需要返回值，那么这个函数里面的每一个代码分支 (code-path) 都要有 return 语句。\",\"问题 6.1：下面的函数将不会被编译，为什么呢？大家可以试着纠正过来。\",\"func (st *Stack) Pop() int { v := 0 for ix := len(st) - 1; ix >= 0; ix-- { if v = st[ix]; v != 0 { st[ix] = 0 return v } } } \",\"函数定义时，它的形参一般是有名字的，不过我们也可以定义没有形参名的函数，只有相应的形参类型，就像这样：func f(int, int, float64)。\",\"没有参数的函数通常被称为 niladic 函数 (niladic function)，就像 main.main()。\"]},\"563\":{\"h\":\"6.2.1 按值传递 (call by value) 按引用传递 (call by reference)\",\"t\":[\"Go 默认使用按值传递来传递参数，也就是传递参数的副本。函数接收参数副本之后，在使用变量的过程中可能对副本的值进行更改，但不会影响到原来的变量，比如 Function(arg1)。\",\"如果你希望函数可以直接修改参数的值，而不是对参数的副本进行操作，你需要将参数的地址（变量名前面添加 & 符号，比如 &variable）传递给函数，这就是按引用传递，比如 Function(&arg1)，此时传递给函数的是一个指针。如果传递给函数的是一个指针，指针的值（一个地址）会被复制，但指针的值所指向的地址上的值不会被复制；我们可以通过这个指针的值来修改这个值所指向的地址上的值。（译者注：指针也是变量类型，有自己的地址和值，通常指针的值指向一个变量的地址。所以，按引用传递也是按值传递。）\",\"几乎在任何情况下，传递指针（一个 32 位或者 64 位的值）的消耗都比传递副本来得少。\",\"在函数调用时，像切片 (slice)、字典 (map)、接口 (interface)、通道 (channel) 这样的引用类型都是默认使用引用传递（即使没有显式的指出指针）。\",\"有些函数只是完成一个任务，并没有返回值。我们仅仅是利用了这种函数的副作用 (side-effect)，就像输出文本到终端，发送一个邮件或者是记录一个错误等。\",\"但是绝大部分的函数还是带有返回值的。\",\"如下，simple_function.go 里的 MultiPly3Nums 函数带有三个形参，分别是 a、b、c，还有一个 int 类型的返回值（被注释的代码具有和未注释部分同样的功能，只是多引入了一个本地变量）：\",\"示例 6.2 simple_function.go\",\"package main import \\\"fmt\\\" func main() { fmt.Printf(\\\"Multiply 2 * 5 * 6 = %d\\\\n\\\", MultiPly3Nums(2, 5, 6)) // var i1 int = MultiPly3Nums(2, 5, 6) // fmt.Printf(\\\"MultiPly 2 * 5 * 6 = %d\\\\n\\\", i1) } func MultiPly3Nums(a int, b int, c int) int { // var product int = a * b * c // return product return a * b * c } \",\"输出显示：\",\"Multiply 2 * 5 * 6 = 60 \",\"如果一个函数需要返回四到五个值，我们可以传递一个切片给函数（如果返回值具有相同类型）或者是传递一个结构体（如果返回值具有不同的类型）。因为传递一个指针允许直接修改变量的值，消耗也更少。\",\"问题 6.2：\",\"如下的两个函数调用有什么不同：\",\"(A) func DoSomething(a *A) { b = a } (B) func DoSomething(a A) { b = &a } \"]},\"564\":{\"h\":\"6.2.2 命名的返回值 (named return variables)\",\"t\":[\"如下 multiple_return.go 里的函数带有一个 int 参数，返回两个 int 值；其中一个函数的返回值在函数调用时就已经被赋予了一个初始零值。\",\"getX2AndX3 与 getX2AndX3_2 两个函数演示了如何使用非命名返回值与命名返回值的特性。当需要返回多个非命名返回值时，需要使用 () 把它们括起来，比如 (int, int)。\",\"命名返回值作为结果形参 (result parameters) 被初始化为相应类型的零值，当需要返回的时候，我们只需要一条简单的不带参数的 return 语句。需要注意的是，即使只有一个命名返回值，也需要使用 () 括起来（参考第 6.6 节 的 fibonacci.go 函数）。\",\"示例 6.3 multiple_return.go\",\"package main import \\\"fmt\\\" var num int = 10 var numx2, numx3 int func main() { numx2, numx3 = getX2AndX3(num) PrintValues() numx2, numx3 = getX2AndX3_2(num) PrintValues() } func PrintValues() { fmt.Printf(\\\"num = %d, 2x num = %d, 3x num = %d\\\\n\\\", num, numx2, numx3) } func getX2AndX3(input int) (int, int) { return 2 * input, 3 * input } func getX2AndX3_2(input int) (x2 int, x3 int) { x2 = 2 * input x3 = 3 * input // return x2, x3 return } \",\"输出结果：\",\"num = 10, 2x num = 20, 3x num = 30 num = 10, 2x num = 20, 3x num = 30 \",\"提示：\",\"虽然 return 或 return var 都是可以的，但是 return var = expression（表达式） 会引发一个编译错误：\",\"syntax error: unexpected =, expecting semicolon or newline or }。\",\"即使函数使用了命名返回值，你依旧可以无视它而返回明确的值。\",\"任何一个非命名返回值（使用非命名返回值是很糟的编程习惯）在 return 语句里面都要明确指出包含返回值的变量或是一个可计算的值（就像上面警告所指出的那样）。\",\"尽量使用命名返回值：会使代码更清晰、更简短，同时更加容易读懂。\",\"练习 6.1 mult_returnval.go\",\"编写一个函数，接收两个整数，然后返回它们的和、积与差。编写两个版本，一个是非命名返回值，一个是命名返回值。\",\"练习 6.2 error_returnval.go\",\"编写一个名字为 MySqrt() 的函数，计算一个 float64 类型浮点数的平方根，如果参数是一个负数的话将返回一个错误。编写两个版本，一个是非命名返回值，一个是命名返回值。\"]},\"565\":{\"h\":\"6.2.3 空白符 (blank identifier)\",\"t\":[\"空白符用来匹配一些不需要的值，然后丢弃掉，下面的 blank_identifier.go 就是很好的例子。\",\"ThreeValues 是拥有三个返回值的不需要任何参数的函数，在下面的例子中，我们将第一个与第三个返回值赋给了 i1 与 f1。第二个返回值赋给了空白符 _，然后自动丢弃掉。\",\"示例 6.4 blank_identifier.go\",\"package main import \\\"fmt\\\" func main() { var i1 int var f1 float32 i1, _, f1 = ThreeValues() fmt.Printf(\\\"The int: %d, the float: %f \\\\n\\\", i1, f1) } func ThreeValues() (int, int, float32) { return 5, 6, 7.5 } \",\"输出结果：\",\"The int: 5, the float: 7.500000 \",\"另外一个示例，函数接收两个参数，比较它们的大小，然后按小-大的顺序返回这两个数，示例代码为 minmax.go。\",\"示例 6.5 minmax.go\",\"package main import \\\"fmt\\\" func main() { var min, max int min, max = MinMax(78, 65) fmt.Printf(\\\"Minmium is: %d, Maximum is: %d\\\\n\\\", min, max) } func MinMax(a int, b int) (min int, max int) { if a < b { min = a max = b } else { // a = b or a < b min = b max = a } return } \",\"输出结果：\",\"Minimum is: 65, Maximum is 78 \"]},\"566\":{\"h\":\"6.2.4 改变外部变量 (outside variable)\",\"t\":[\"传递指针给函数不但可以节省内存（因为没有复制变量的值），而且赋予了函数直接修改外部变量的能力，所以被修改的变量不再需要使用 return 返回。如下的例子，reply 是一个指向 int 变量的指针，通过这个指针，我们在函数内修改了这个 int 变量的数值。\",\"示例 6.6 side_effect.go\",\"package main import ( \\\"fmt\\\" ) // this function changes reply: func Multiply(a, b int, reply *int) { *reply = a * b } func main() { n := 0 reply := &n Multiply(10, 5, reply) fmt.Println(\\\"Multiply:\\\", *reply) // Multiply: 50 } \",\"这仅仅是个指导性的例子，当需要在函数内改变一个占用内存比较大的变量时，性能优势就更加明显了。然而，如果不小心使用的话，传递一个指针很容易引发一些不确定的事，所以，我们要十分小心那些可以改变外部变量的函数，在必要时，需要添加注释以便其他人能够更加清楚的知道函数里面到底发生了什么。\"]},\"567\":{\"h\":\"6.3 传递变长参数\",\"t\":[\"如果函数的最后一个参数是采用 ...type 的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。\",\"func myFunc(a, b, arg ...int) {} \",\"这个函数接受一个类似于切片 (slice) 的参数（详见第 7 章），该参数可以通过第 5.4.4 节 中提到的 for 循环结构迭代。\",\"示例函数和调用：\",\"func Greeting(prefix string, who ...string) Greeting(\\\"hello:\\\", \\\"Joe\\\", \\\"Anna\\\", \\\"Eileen\\\") \",\"在 Greeting() 函数中，变量 who 的值为 []string{\\\"Joe\\\", \\\"Anna\\\", \\\"Eileen\\\"}。\",\"如果参数被存储在一个 slice 类型的变量 slice 中，则可以通过 slice... 的形式来传递参数，调用变参函数。\",\"示例 6.7 varnumpar.go\",\"package main import \\\"fmt\\\" func main() { x := min(1, 3, 2, 0) fmt.Printf(\\\"The minimum is: %d\\\\n\\\", x) slice := []int{7,9,3,5,1} x = min(slice...) fmt.Printf(\\\"The minimum in the slice is: %d\\\", x) } func min(s ...int) int { if len(s)==0 { return 0 } min := s[0] for _, v := range s { if v < min { min = v } } return min } \",\"输出：\",\"The minimum is: 0 The minimum in the slice is: 1 \",\"练习 6.3varargs.go\",\"写一个函数，该函数接受一个变长参数并对每个元素进行换行打印。\",\"一个接受变长参数的函数可以将这个参数作为其它函数的参数进行传递：\",\"func F1(s ...string) { F2(s...) F3(s) } func F2(s ...string) { } func F3(s []string) { } \",\"变长参数可以作为对应类型的 slice 进行二次传递。\",\"但是如果变长参数的类型并不是都相同的呢？使用 5 个参数来进行传递并不是很明智的选择，有 2 种方案可以解决这个问题：\",\"使用结构（详见第 10 章）：\",\"定义一个结构类型，假设它叫 Options，用以存储所有可能的参数：\",\"type Options struct { par1 type1, par2 type2, ... } \",\"函数 F1() 可以使用正常的参数 a 和 b，以及一个没有任何初始化的 Options 结构： F1(a, b, Options {})。如果需要对选项进行初始化，则可以使用 F1(a, b, Options {par1:val1, par2:val2})。\",\"使用空接口：\",\"如果一个变长参数的类型没有被指定，则可以使用默认的空接口 interface{}，这样就可以接受任何类型的参数（详见第 11.9 节 ）。该方案不仅可以用于长度未知的参数，还可以用于任何不确定类型的参数。一般而言我们会使用一个 for-range 循环以及 switch 结构对每个参数的类型进行判断：\",\"func typecheck(..,..,values … interface{}) { for _, value := range values { switch v := value.(type) { case int: … case float: … case string: … case bool: … default: … } } } \"]},\"568\":{\"h\":\"6.4 defer 和追踪\",\"t\":[\"关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 return 语句同样可以包含一些操作，而不是单纯地返回某个值）。\",\"关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 finally 语句块，它一般用于释放某些已分配的资源。\",\"示例 6.8 defer.go：\",\"package main import \\\"fmt\\\" func main() { function1() } func function1() { fmt.Printf(\\\"In function1 at the top\\\\n\\\") defer function2() fmt.Printf(\\\"In function1 at the bottom!\\\\n\\\") } func function2() { fmt.Printf(\\\"Function2: Deferred until the end of the calling function!\\\") } \",\"输出：\",\"In Function1 at the top In Function1 at the bottom! Function2: Deferred until the end of the calling function! \",\"请将 defer 关键字去掉并对比输出结果。\",\"使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 0：\",\"func a() { i := 0 defer fmt.Println(i) i++ return } \",\"当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：\",\"func f() { for i := 0; i < 5; i++ { defer fmt.Printf(\\\"%d \\\", i) } } \",\"上面的代码将会输出：4 3 2 1 0。\",\"关键字 defer 允许我们进行一些函数执行完成后的收尾工作，例如：\",\"关闭文件流 （详见 第 12.2 节）\",\"// open a file defer file.Close() \",\"解锁一个加锁的资源 （详见 第 9.3 节）\",\"mu.Lock() defer mu.Unlock() \",\"打印最终报告\",\"printHeader() defer printFooter() \",\"关闭数据库链接\",\"// open a database connection defer disconnectFromDB() \",\"合理使用 defer 语句能够使得代码更加简洁。\",\"以下代码模拟了上面描述的第 4 种情况：\",\"package main import \\\"fmt\\\" func main() { doDBOperations() } func connectToDB() { fmt.Println(\\\"ok, connected to db\\\") } func disconnectFromDB() { fmt.Println(\\\"ok, disconnected from db\\\") } func doDBOperations() { connectToDB() fmt.Println(\\\"Defering the database disconnect.\\\") defer disconnectFromDB() //function called here with defer fmt.Println(\\\"Doing some DB operations ...\\\") fmt.Println(\\\"Oops! some crash or network error ...\\\") fmt.Println(\\\"Returning from function here!\\\") return //terminate the program // deferred function executed here just before actually returning, even if // there is a return or abnormal termination before } \",\"输出：\",\"ok, connected to db Defering the database disconnect. Doing some DB operations ... Oops! some crash or network error ... Returning from function here! ok, disconnected from db \",\"使用 defer 语句实现代码追踪\",\"一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：\",\"func trace(s string) { fmt.Println(\\\"entering:\\\", s) } func untrace(s string) { fmt.Println(\\\"leaving:\\\", s) } \",\"以下代码展示了何时调用这两个函数：\",\"示例 6.10 defer_tracing.go:\",\"package main import \\\"fmt\\\" func trace(s string) { fmt.Println(\\\"entering:\\\", s) } func untrace(s string) { fmt.Println(\\\"leaving:\\\", s) } func a() { trace(\\\"a\\\") defer untrace(\\\"a\\\") fmt.Println(\\\"in a\\\") } func b() { trace(\\\"b\\\") defer untrace(\\\"b\\\") fmt.Println(\\\"in b\\\") a() } func main() { b() } \",\"输出：\",\"entering: b in b entering: a in a leaving: a leaving: b \",\"上面的代码还可以修改为更加简便的版本（示例 6.11 defer_tracing2.go）：\",\"package main import \\\"fmt\\\" func trace(s string) string { fmt.Println(\\\"entering:\\\", s) return s } func un(s string) { fmt.Println(\\\"leaving:\\\", s) } func a() { defer un(trace(\\\"a\\\")) fmt.Println(\\\"in a\\\") } func b() { defer un(trace(\\\"b\\\")) fmt.Println(\\\"in b\\\") a() } func main() { b() } \",\"使用 defer 语句来记录函数的参数与返回值\",\"下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 defer_logvalues.go）：\",\"package main import ( \\\"io\\\" \\\"log\\\" ) func func1(s string) (n int, err error) { defer func() { log.Printf(\\\"func1(%q) = %d, %v\\\", s, n, err) }() return 7, io.EOF } func main() { func1(\\\"Go\\\") } \",\"输出：\",\"Output: 2011/10/04 10:46:11 func1(\\\"Go\\\") = 7, EOF \"]},\"569\":{\"h\":\"6.5 内置函数\",\"t\":[\"Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len()、cap() 和 append()，或必须用于系统级的操作，例如：panic()。因此，它们需要直接获得编译器的支持。\",\"以下是一个简单的列表，我们会在后面的章节中对它们进行逐个深入的讲解。\",\"名称\",\"说明\",\"close()\",\"用于管道通信\",\"len()、cap()\",\"len() 用于返回某个类型的长度或数量（字符串、数组、切片、map 和管道）；cap() 是容量的意思，用于返回某个类型的最大容量（只能用于数组、切片和管道，不能用于 map）\",\"new()、make()\",\"new() 和 make() 均是用于分配内存：new() 用于值类型和用户定义的类型，如自定义结构，make 用于内置引用类型（切片、map 和管道）。它们的用法就像是函数，但是将类型作为参数：new(type)、make(type)。new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针（详见第 10.1 节）。它也可以被用于基本类型：v := new(int)。make(T) 返回类型 T 的初始化之后的值，因此它比 new() 进行更多的工作（详见第 7.2.3/4 节、第 8.1.1 节和第 14.2.1 节）。new() 是一个函数，不要忘记它的括号。\",\"copy()、append()\",\"用于复制和连接切片\",\"panic()、recover()\",\"两者均用于错误处理机制\",\"print()、println()\",\"底层打印函数（详见第 4.2 节），在部署环境中建议使用 fmt 包\",\"complex()、real ()、imag()\",\"用于创建和操作复数（详见第 4.5.2.2 节）\"]},\"570\":{\"h\":\"6.6 递归函数\",\"t\":[\"当一个函数在其函数体内调用自身，则称之为递归。最经典的例子便是计算斐波那契数列，即前两个数为 1，从第三个数开始每个数均为前两个数之和。\",\"数列如下所示：\",\"1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, … \",\"下面的程序可用于生成该数列（示例 6.13 fibonacci.go）：\",\"package main import \\\"fmt\\\" func main() { result := 0 for i := 0; i <= 10; i++ { result = fibonacci(i) fmt.Printf(\\\"fibonacci(%d) is: %d\\\\n\\\", i, result) } } func fibonacci(n int) (res int) { if n <= 1 { res = 1 } else { res = fibonacci(n-1) + fibonacci(n-2) } return } \",\"输出：\",\"fibonacci(0) is: 1 fibonacci(1) is: 1 fibonacci(2) is: 2 fibonacci(3) is: 3 fibonacci(4) is: 5 fibonacci(5) is: 8 fibonacci(6) is: 13 fibonacci(7) is: 21 fibonacci(8) is: 34 fibonacci(9) is: 55 fibonacci(10) is: 89 \",\"许多问题都可以使用优雅的递归来解决，比如说著名的快速排序算法。\",\"在使用递归函数时经常会遇到的一个重要问题就是栈溢出：一般出现在大量的递归调用导致的程序栈内存分配耗尽。这个问题可以通过一个名为 懒惰求值 的技术解决，在 Go 语言中，我们可以使用管道 (channel) 和 goroutine（详见第 14.8 节）来实现。练习 14.12 也会通过这个方案来优化斐波那契数列的生成问题。\",\"Go 语言中也可以使用相互调用的递归函数：多个函数之间相互调用形成闭环。因为 Go 语言编译器的特殊性，这些函数的声明顺序可以是任意的。下面这个简单的例子展示了函数 odd() 和 even() 之间的相互调用（示例 6.14 mut_recurs.go）：\",\"package main import ( \\\"fmt\\\" ) func main() { fmt.Printf(\\\"%d is even: is %t\\\\n\\\", 16, even(16)) // 16 is even: is true fmt.Printf(\\\"%d is odd: is %t\\\\n\\\", 17, odd(17)) // 17 is odd: is true fmt.Printf(\\\"%d is odd: is %t\\\\n\\\", 18, odd(18)) // 18 is odd: is false } func even(nr int) bool { if nr == 0 { return true } return odd(RevSign(nr) - 1) } func odd(nr int) bool { if nr == 0 { return false } return even(RevSign(nr) - 1) } func RevSign(nr int) int { if nr < 0 { return -nr } return nr } \"]},\"571\":{\"h\":\"练习题\",\"t\":[\"练习 6.4fibonacci2.go\",\"重写本节中生成斐波那契数列的程序并返回两个命名返回值（详见第 6.2 节），即数列中的位置和对应的值，例如 5 与 4，89 与 10。\",\"练习 6.510to1_recursive.go\",\"使用递归函数从 10 打印到 1。\",\"练习 6.6factorial.go\",\"实现一个输出前 30 个整数的阶乘的程序。\",\"n 的阶乘定义为：n! = n * (n-1)!, 0! = 1，因此它非常适合使用递归函数来实现。\",\"然后，使用命名返回值来实现这个程序的第二个版本。\",\"特别注意的是，使用 int 类型最多只能计算到 12 的阶乘，因为一般情况下 int 类型的大小为 32 位，继续计算会导致溢出错误。那么，如何才能解决这个问题呢？\",\"最好的解决方案就是使用 big 包（详见第 9.4 节）。\"]},\"572\":{\"h\":\"6.7 将函数作为参数\",\"t\":[\"函数可以作为其它函数的参数进行传递，然后在其它函数内调用执行，一般称之为回调。下面是一个将函数作为参数的简单例子（function_parameter.go）：\",\"package main import ( \\\"fmt\\\" ) func main() { callback(1, Add) } func Add(a, b int) { fmt.Printf(\\\"The sum of %d and %d is: %d\\\\n\\\", a, b, a+b) } func callback(y int, f func(int, int)) { f(y, 2) // this becomes Add(1, 2) } \",\"输出：\",\"The sum of 1 and 2 is: 3 \",\"将函数作为参数的最好的例子是函数 strings.IndexFunc()：\",\"该函数的签名是 func IndexFunc(s string, f func(c rune) bool) int，它的返回值是字符串 s 中第一个使函数 f(c) 返回 true 的 Unicode 字符的索引值。如果找不到，则返回 -1。\",\"例如 strings.IndexFunc(line, unicode.IsSpace) 就会返回 line 中第一个空白字符的索引值。当然，您也可以书写自己的函数：\",\"func IsAscii(c int) bool { if c > 255 { return false } return true } \",\"在第 14.10.1 节 中，我们将会根据一个客户端/服务端程序作为示例对这个用法进行深入讨论。\",\"type binOp func(a, b int) int func run(op binOp, req *Request) { … } \",\"练习 6.7strings_map.go\",\"包 strings 中的 Map() 函数和 strings.IndexFunc() 一样都是非常好的使用例子。请学习它的源代码并基于该函数书写一个程序，要求将指定文本内的所有非 ASCII 字符替换成问号 '?' 或空格 ' '。您需要怎么做才能删除这些字符呢？\"]},\"573\":{\"h\":\"6.8 闭包\",\"t\":[\"当我们不希望给函数起名字的时候，可以使用匿名函数，例如：func(x, y int) int { return x + y }。\",\"这样的一个函数不能够独立存在（编译器会返回错误：non-declaration statement outside function body），但可以被赋值于某个变量，即保存函数的地址到变量中：fplus := func(x, y int) int { return x + y }，然后通过变量名对函数进行调用：fplus(3,4)。\",\"当然，您也可以直接对匿名函数进行调用：func(x, y int) int { return x + y } (3, 4)。\",\"下面是一个计算从 1 到 100 万整数的总和的匿名函数：\",\"func() { sum := 0 for i := 1; i <= 1e6; i++ { sum += i } }() \",\"表示参数列表的第一对括号必须紧挨着关键字 func，因为匿名函数没有名称。花括号 {} 涵盖着函数体，最后的一对括号表示对该匿名函数的调用。\",\"下面的例子展示了如何将匿名函数赋值给变量并对其进行调用（function_literal.go）：\",\"package main import \\\"fmt\\\" func main() { f() } func f() { for i := 0; i < 4; i++ { g := func(i int) { fmt.Printf(\\\"%d \\\", i) } g(i) fmt.Printf(\\\" - g is of type %T and has value %v\\\\n\\\", g, g) } } \",\"输出：\",\"0 - g is of type func(int) and has value 0x681a80 1 - g is of type func(int) and has value 0x681b00 2 - g is of type func(int) and has value 0x681ac0 3 - g is of type func(int) and has value 0x681400 \",\"我们可以看到变量 g 代表的是 func(int)，变量的值是一个内存地址。\",\"所以我们实际上拥有的是一个函数值：匿名函数可以被赋值给变量并作为值使用。\",\"练习 6.8 在 main() 函数中写一个用于打印 Hello World 字符串的匿名函数并赋值给变量 fv，然后调用该函数并打印变量 fv 的类型。\",\"匿名函数像所有函数一样可以接受或不接受参数。下面的例子展示了如何传递参数到匿名函数中：\",\"func (u string) { fmt.Println(u) … }(v) \",\"请学习以下示例并思考（return_defer.go）：函数 f 返回时，变量 ret 的值是什么？\",\"package main import \\\"fmt\\\" func f() (ret int) { defer func() { ret++ }() return 1 } func main() { fmt.Println(f()) } \",\"变量 ret 的值为 2，因为 ret++ 是在执行 return 1 语句后发生的。\",\"这可用于在返回语句之后修改返回的 error 时使用。\",\"defer 语句和匿名函数\",\"关键字 defer （详见第 6.4 节）经常配合匿名函数使用，它可以用于改变函数的命名返回值。\",\"匿名函数还可以配合 go 关键字来作为 goroutine 使用（详见第 14 章和第 16.9 节）。\",\"匿名函数同样被称之为闭包（函数式语言的术语）：它们被允许调用定义在其它环境下的变量。闭包可使得某个函数捕捉到一些外部状态，例如：函数被创建时的状态。另一种表示方式为：一个闭包继承了函数所声明时的作用域。这种状态（作用域内的变量）都被共享到闭包的环境中，因此这些变量可以在闭包中被操作，直到被销毁，详见第 6.9 节 中的示例。闭包经常被用作包装函数：它们会预先定义好 1 个或多个参数以用于包装，详见下一节中的示例。另一个不错的应用就是使用闭包来完成更加简洁的错误检查（详见第 16.10.2 节）。\"]},\"574\":{\"h\":\"6.9 应用闭包：将函数作为返回值\",\"t\":[\"在程序 function_return.go 中我们将会看到函数 Add2() 和 Adder() 均会返回签名为 func(b int) int 的函数：\",\"func Add2() (func(b int) int) func Adder(a int) (func(b int) int) \",\"函数 Add2() 不接受任何参数，但函数 Adder() 接受一个 int 类型的整数作为参数。\",\"我们也可以将 Adder() 返回的函数存到变量中 (function_return.go)。\",\"package main import \\\"fmt\\\" func main() { // make an Add2 function, give it a name p2, and call it: p2 := Add2() fmt.Printf(\\\"Call Add2 for 3 gives: %v\\\\n\\\", p2(3)) // make a special Adder function, a gets value 2: TwoAdder := Adder(2) fmt.Printf(\\\"The result is: %v\\\\n\\\", TwoAdder(3)) } func Add2() func(b int) int { return func(b int) int { return b + 2 } } func Adder(a int) func(b int) int { return func(b int) int { return a + b } } \",\"输出：\",\"Call Add2 for 3 gives: 5 The result is: 5 \",\"下例为一个略微不同的实现 (function_closure.go)：\",\"package main import \\\"fmt\\\" func main() { var f = Adder() fmt.Print(f(1), \\\" - \\\") fmt.Print(f(20), \\\" - \\\") fmt.Print(f(300)) } func Adder() func(int) int { var x int return func(delta int) int { x += delta return x } } \",\"函数 Adder() 现在被赋值到变量 f 中（类型为 func(int) int）。\",\"输出：\",\"1 - 21 - 321 \",\"三次调用函数 f 的过程中函数 Adder() 中变量 delta 的值分别为：1、20 和 300。\",\"我们可以看到，在多次调用中，变量 x 的值是被保留的，即 0 + 1 = 1，然后 1 + 20 = 21，最后 21 + 300 = 321：闭包函数保存并积累其中的变量的值，不管外部函数退出与否，它都能够继续操作外部函数中的局部变量。\",\"这些局部变量同样可以是参数，例如之前例子中的 Adder(as int)。\",\"这些例子清楚地展示了如何在 Go 语言中使用闭包。\",\"在闭包中使用到的变量可以是在闭包函数体内声明的，也可以是在外部函数声明的：\",\"var g int go func(i int) { s := 0 for j := 0; j < i; j++ { s += j } g = s }(1000) // Passes argument 1000 to the function literal. \",\"这样闭包函数就能够被应用到整个集合的元素上，并修改它们的值。然后这些变量就可以用于表示或计算全局或平均值。\",\"练习 6.9fibonacci_closure\",\"不使用递归但使用闭包改写第 6.6 节中的斐波那契数列程序。\",\"练习 6.10\",\"学习并理解以下程序的工作原理：\",\"一个返回值为另一个函数的函数可以被称之为工厂函数，这在您需要创建一系列相似的函数的时候非常有用：书写一个工厂函数而不是针对每种情况都书写一个函数。下面的函数演示了如何动态返回追加后缀的函数：\",\"func MakeAddSuffix(suffix string) func(string) string { return func(name string) string { if !strings.HasSuffix(name, suffix) { return name + suffix } return name } } \",\"现在，我们可以生成如下函数：\",\"addBmp := MakeAddSuffix(\\\".bmp\\\") addJpeg := MakeAddSuffix(\\\".jpeg\\\") \",\"然后调用它们：\",\"addBmp(\\\"file\\\") // returns: file.bmp addJpeg(\\\"file\\\") // returns: file.jpeg \",\"可以返回其它函数的函数和接受其它函数作为参数的函数均被称之为高阶函数，是函数式语言的特点。我们已经在第 6.7 节中得知函数也是一种值，因此很显然 Go 语言具有一些函数式语言的特性。闭包在 Go 语言中非常常见，常用于 goroutine 和管道操作（详见第 14.8-14.9 节）。在第 11.14 节的程序中，我们将会看到 Go 语言中的函数在处理混合对象时的强大能力。\"]},\"575\":{\"h\":\"6.10 使用闭包调试\",\"t\":[\"当您在分析和调试复杂的程序时，无数个函数在不同的代码文件中相互调用，如果这时候能够准确地知道哪个文件中的具体哪个函数正在执行，对于调试是十分有帮助的。您可以使用 runtime 或 log 包中的特殊函数来实现这样的功能。包 runtime 中的函数 Caller() 提供了相应的信息，因此可以在需要的时候实现一个 where() 闭包函数来打印函数执行的位置：\",\"where := func() { _, file, line, _ := runtime.Caller(1) log.Printf(\\\"%s:%d\\\", file, line) } where() // some code where() // some more code where() \",\"您也可以设置 log 包中的 flag 参数来实现：\",\"log.SetFlags(log.Llongfile) log.Print(\\\"\\\") \",\"或使用一个更加简短版本的 where() 函数：\",\"var where = log.Print func func1() { where() ... some code where() ... some code where() } \"]},\"576\":{\"h\":\"6.11 计算函数执行时间\",\"t\":[\"有时候，能够知道一个计算执行消耗的时间是非常有意义的，尤其是在对比和基准测试中。最简单的一个办法就是在计算开始之前设置一个起始时间，再记录计算结束时的结束时间，最后计算它们的差值，就是这个计算所消耗的时间。想要实现这样的做法，可以使用 time 包中的 Now() 和 Sub() 函数：\",\"start := time.Now() longCalculation() end := time.Now() delta := end.Sub(start) fmt.Printf(\\\"longCalculation took this amount of time: %s\\\\n\\\", delta) \",\"您可以查看示例 6.20 fibonacci.go 作为实例学习。\",\"如果您对一段代码进行了所谓的优化，请务必对它们之间的效率进行对比再做出最后的判断。在接下来的章节中，我们会学习如何进行有价值的优化操作。\"]},\"577\":{\"h\":\"6.12 通过内存缓存来提升性能\",\"t\":[\"当在进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序（详见第 6.6 和 6.11 节）：\",\"要计算数列中第 n 个数字，需要先得到之前两个数的值，但很明显绝大多数情况下前两个数的值都是已经计算过的。即每个更后面的数都是基于之前计算结果的重复计算，正如示例 6.11 fibonnaci.go 所展示的那样。\",\"而我们要做就是将第 n 个数的值存在数组中索引为 n 的位置（详见第 7 章），然后在数组中查找是否已经计算过，如果没有找到，则再进行计算。\",\"程序 Listing 6.17 - fibonacci_memoization.go 就是依照这个原则实现的，下面是计算到第 40 位数字的性能对比：\",\"普通写法：4.730270 秒\",\"内存缓存：0.001000 秒\",\"内存缓存的优势显而易见，而且您还可以将它应用到其它类型的计算中，例如使用 map（详见第 7 章）而不是数组或切片（Listing 6.21 - fibonacci_memoization.go）：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) const LIM = 41 var fibs [LIM]uint64 func main() { var result uint64 = 0 start := time.Now() for i := 0; i < LIM; i++ { result = fibonacci(i) fmt.Printf(\\\"fibonacci(%d) is: %d\\\\n\\\", i, result) } end := time.Now() delta := end.Sub(start) fmt.Printf(\\\"longCalculation took this amount of time: %s\\\\n\\\", delta) } func fibonacci(n int) (res uint64) { // memoization: check if fibonacci(n) is already known in array: if fibs[n] != 0 { res = fibs[n] return } if n <= 1 { res = 1 } else { res = fibonacci(n-1) + fibonacci(n-2) } fibs[n] = res return } \",\"内存缓存的技术在使用计算成本相对昂贵的函数时非常有用（不仅限于例子中的递归），譬如大量进行相同参数的运算。这种技术还可以应用于纯函数中，即相同输入必定获得相同输出的函数。\"]},\"578\":{\"h\":\"第 7 章：数组(array)与切片(slice)\",\"t\":[\"这章我们开始剖析 集合，它是可以包含大量条目 (item) 的数据结构，例如数组、切片和 map。从这看到 Go 明显受到 Python 的影响。\",\"以 [] 符号标识的数组类型几乎在所有的编程语言中都是一个基本主力。Go 语言中的数组也是类似的，只是有一些特点。Go 没有 C 那么灵活，但是拥有切片 (slice) 类型。这是一种建立在 Go 语言数组类型之上的抽象，要想理解切片我们必须先理解数组。数组有特定的用处，但是却有一些呆板，所以在 Go 语言的代码里并不是特别常见。相对的，切片确实随处可见的。它们构建在数组之上并且提供更强大的能力和便捷。\"]},\"579\":{\"h\":\"7.1 声明和初始化\"},\"580\":{\"h\":\"7.1.1 概念\",\"t\":[\"数组是具有相同 唯一类型 的一组已编号且长度固定的数据项序列（这是一种同构的数据结构）；这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。数组长度必须是一个常量表达式，并且必须是一个非负整数。数组长度也是数组类型的一部分，所以 [5]int 和 [10]int 是属于不同类型的。数组的编译时值初始化是按照数组顺序完成的（如下）。\",\"注意事项 如果我们想让数组元素类型为任意类型的话可以使用空接口作为类型（参考 第 11 章）。当使用值时我们必须先做一个类型判断（参考 第 11 章）。\",\"数组元素可以通过 索引（位置）来读取（或者修改），索引从 0 开始，第一个元素索引为 0，第二个索引为 1，以此类推（数组以 0 开始在所有类 C 语言中是相似的）。元素的数目（也称为长度或者数组大小）必须是固定的并且在声明该数组时就给出（编译时需要知道数组长度以便分配内存）；数组长度最大为 2GB。\",\"声明的格式是：\",\"var identifier [len]type \",\"例如：\",\"var arr1 [5]int \",\"在内存中的结构是：\",\"每个元素是一个整型值，当声明数组时所有的元素都会被自动初始化为默认值 0。\",\"arr1 的长度是 5，索引范围从 0 到 len(arr1)-1。\",\"第一个元素是 arr1[0]，第三个元素是 arr1[2]；总体来说索引 i 代表的元素是 arr1[i]，最后一个元素是 arr1[len(arr1)-1]。\",\"对索引项为 i 的数组元素赋值可以这么操作：arr[i] = value，所以数组是 可变的。\",\"只有有效的索引可以被使用，当使用等于或者大于 len(arr1) 的索引时：如果编译器可以检测到，会给出索引超限的提示信息；如果检测不到的话编译会通过而运行时会 panic():（参考第 13 章）\",\"runtime error: index out of range \",\"由于索引的存在，遍历数组的方法自然就是使用 for 结构：\",\"通过 for 初始化数组项\",\"通过 for 打印数组元素\",\"通过 for 依次处理元素\",\"示例 7.1 for_arrays.go\",\"package main import \\\"fmt\\\" func main() { var arr1 [5]int for i:=0; i < len(arr1); i++ { arr1[i] = i * 2 } for i:=0; i < len(arr1); i++ { fmt.Printf(\\\"Array at index %d is %d\\\\n\\\", i, arr1[i]) } } \",\"输出结果：\",\"Array at index 0 is 0 Array at index 1 is 2 Array at index 2 is 4 Array at index 3 is 6 Array at index 4 is 8 \",\"for 循环中的条件非常重要：i < len(arr1)，如果写成 i <= len(arr1) 的话会产生越界错误。\",\"IDIOM:\",\"for i:=0; i < len(arr1); i++｛ arr1[i] = ... } \",\"也可以使用 for-range 的生成方式：\",\"IDIOM:\",\"for i,_:= range arr1 { ... } \",\"在这里 i 也是数组的索引。当然这两种 for 结构对于切片（slices）（参考 第 7 章）来说也同样适用。\",\"问题 7.1 下面代码段的输出是什么？\",\"a := [...]string{\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"} for i := range a { fmt.Println(\\\"Array item\\\", i, \\\"is\\\", a[i]) } \",\"Go 语言中的数组是一种 值类型（不像 C/C++ 中是指向首元素的指针），所以可以通过 new() 来创建： var arr1 = new([5]int)。\",\"那么这种方式和 var arr2 [5]int 的区别是什么呢？arr1 的类型是 *[5]int，而 arr2 的类型是 [5]int。\",\"这样的结果就是当把一个数组赋值给另一个时，需要再做一次数组内存的拷贝操作。例如：\",\"arr2 := *arr1 arr2[2] = 100 \",\"这样两个数组就有了不同的值，在赋值后修改 arr2 不会对 arr1 生效。\",\"所以在函数中数组作为参数传入时，如 func1(arr2)，会产生一次数组拷贝，func1() 方法不会修改原始的数组 arr2。\",\"如果你想修改原数组，那么 arr2 必须通过 & 操作符以引用方式传过来，例如 func1(&arr2)，下面是一个例子：\",\"示例 7.2 pointer_array.go:\",\"package main import \\\"fmt\\\" func f(a [3]int) { fmt.Println(a) } func fp(a *[3]int) { fmt.Println(a) } func main() { var ar [3]int f(ar) // passes a copy of ar fp(&ar) // passes a pointer to ar } \",\"输出结果：\",\"[0 0 0] &[0 0 0] \",\"另一种方法就是生成数组切片并将其传递给函数（详见第 7.1.4 节）。\",\"练习\",\"练习 7.1：array_value.go:\",\"证明当数组赋值时，发生了数组内存拷贝。\",\"练习 7.2：for_array.go:\",\"写一个循环并用下标给数组赋值（从 0 到 15）并且将数组打印在屏幕上。\",\"练习 7.3：fibonacci_array.go:\",\"在第 6.6 节 我们看到了一个递归计算 Fibonacci 数值的方法。但是通过数组我们可以更快的计算出 Fibonacci 数。完成该方法并打印出前 50 个 Fibonacci 数字。\"]},\"581\":{\"h\":\"7.1.2 数组常量\",\"t\":[\"如果数组值已经提前知道了，那么可以通过 数组常量 的方法来初始化数组，而不用依次使用 []= 方法（所有的组成元素都有相同的常量语法）。\",\"示例 7.3 array_literals.go\",\"package main import \\\"fmt\\\" func main() { // var arrAge = [5]int{18, 20, 15, 22, 16} // var arrLazy = [...]int{5, 6, 7, 8, 22} // var arrLazy = []int{5, 6, 7, 8, 22} //注：初始化得到的实际上是切片slice var arrKeyValue = [5]string{3: \\\"Chris\\\", 4: \\\"Ron\\\"} // var arrKeyValue = []string{3: \\\"Chris\\\", 4: \\\"Ron\\\"} //注：初始化得到的实际上是切片slice for i:=0; i < len(arrKeyValue); i++ { fmt.Printf(\\\"Person at %d is %s\\\\n\\\", i, arrKeyValue[i]) } } \",\"第一种变化：\",\"var arrAge = [5]int{18, 20, 15, 22, 16} \",\"注意 [5]int 可以从左边起开始忽略：[10]int {1, 2, 3} :这是一个有 10 个元素的数组，除了前三个元素外其他元素都为 0。\",\"第二种变化：\",\"var arrLazy = [...]int{5, 6, 7, 8, 22} \",\"... 同样可以忽略，从技术上说它们其实变成了切片。\",\"第三种变化：key: value 语法\",\"var arrKeyValue = [5]string{3: \\\"Chris\\\", 4: \\\"Ron\\\"} \",\"只有索引 3 和 4 被赋予实际的值，其他元素都被设置为空的字符串，所以输出结果为：\",\"Person at 0 is Person at 1 is Person at 2 is Person at 3 is Chris Person at 4 is Ron \",\"在这里数组长度同样可以写成 ...。\",\"你可以取任意数组常量的地址来作为指向新实例的指针。\",\"示例 7.4 pointer_array2.go\",\"package main import \\\"fmt\\\" func fp(a *[3]int) { fmt.Println(a) } func main() { for i := 0; i < 3; i++ { fp(&[3]int{i, i * i, i * i * i}) } } \",\"输出结果：\",\"&[0 0 0] &[1 1 1] &[2 4 8] \",\"几何点（或者数学向量）是一个使用数组的经典例子。为了简化代码通常使用一个别名：\",\"type Vector3D [3]float32 var vec Vector3D \"]},\"582\":{\"h\":\"7.1.3 多维数组\",\"t\":[\"数组通常是一维的，但是可以用来组装成多维数组，例如：[3][5]int，[2][2][2]float64。\",\"内部数组总是长度相同的。Go 语言的多维数组是矩形式的（唯一的例外是切片的数组，参见第 7.2.5 节。\",\"示例 7.5 multidim_array.go\",\"package main const ( WIDTH = 1920 HEIGHT = 1080 ) type pixel int var screen [WIDTH][HEIGHT]pixel func main() { for y := 0; y < HEIGHT; y++ { for x := 0; x < WIDTH; x++ { screen[x][y] = 0 } } } \"]},\"583\":{\"h\":\"7.1.4 将数组传递给函数\",\"t\":[\"把一个大数组传递给函数会消耗很多内存。有两种方法可以避免这种情况：\",\"传递数组的指针\",\"使用数组的切片\",\"接下来的例子阐明了第一种方法：\",\"示例 7.6 array_sum.go\",\"package main import \\\"fmt\\\" func main() { array := [3]float64{7.0, 8.5, 9.1} x := Sum(&array) // Note the explicit address-of operator // to pass a pointer to the array fmt.Printf(\\\"The sum of the array is: %f\\\", x) } func Sum(a *[3]float64) (sum float64) { for _, v := range a { // derefencing *a to get back to the array is not necessary! sum += v } return } \",\"输出结果：\",\"The sum of the array is: 24.600000 \",\"但这在 Go 中并不常用，通常使用切片（参考 第 7.2 节）。\"]},\"584\":{\"h\":\"7.2 切片\"},\"585\":{\"h\":\"7.2.1 概念\",\"t\":[\"切片 (slice) 是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型（因此更类似于 C/C++ 中的数组类型，或者 Python 中的 list 类型）。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内。切片提供了一个相关数组的动态窗口。\",\"切片是可索引的，并且可以由 len() 函数获取长度。\",\"给定项的切片索引可能比相关数组的相同元素的索引小。和数组不同的是，切片的长度可以在运行时修改，最小为 0， 最大为相关数组的长度：切片是一个 长度可变的数组。\",\"切片提供了计算容量的函数 cap() 可以测量切片最长可以达到多少：它等于切片的长度 + 数组除切片之外的长度。如果 s 是一个切片，cap(s) 就是从 s[0] 到数组末尾的数组长度。切片的长度永远不会超过它的容量，所以对于切片 s 来说该不等式永远成立：0 <= len(s) <= cap(s)。\",\"多个切片如果表示同一个数组的片段，它们可以共享数据；因此一个切片和相关数组的其他切片是共享存储的，相反，不同的数组总是代表不同的存储。数组实际上是切片的构建块。\",\"优点 因为切片是引用，所以它们不需要使用额外的内存并且比使用数组更有效率，所以在 Go 代码中切片比数组更常用。\",\"声明切片的格式是： var identifier []type（不需要说明长度）。\",\"一个切片在未初始化之前默认为 nil，长度为 0。\",\"切片的初始化格式是：var slice1 []type = arr1[start:end]。\",\"这表示 slice1 是由数组 arr1 从 start 索引到 end-1 索引之间的元素构成的子集（切分数组，start:end 被称为切片表达式）。所以 slice1[0] 就等于 arr1[start]。这可以在 arr1 被填充前就定义好。\",\"如果某个人写：var slice1 []type = arr1[:] 那么 slice1 就等于完整的 arr1 数组（所以这种表示方式是 arr1[0:len(arr1)] 的一种缩写）。另外一种表述方式是：slice1 = &arr1。\",\"arr1[2:] 和 arr1[2:len(arr1)] 相同，都包含了数组从第三个到最后的所有元素。\",\"arr1[:3] 和 arr1[0:3] 相同，包含了从第一个到第三个元素（不包括第四个）。\",\"如果你想去掉 slice1 的最后一个元素，只要 slice1 = slice1[:len(slice1)-1]。\",\"一个由数字 1、2、3 组成的切片可以这么生成：s := [3]int{1,2,3}[:]（注：应先用 s := [3]int{1, 2, 3} 生成数组, 再使用 s[:] 转成切片）甚至更简单的 s := []int{1,2,3}。\",\"s2 := s[:] 是用切片组成的切片，拥有相同的元素，但是仍然指向相同的相关数组。\",\"一个切片 s 可以这样扩展到它的大小上限：s = s[:cap(s)]，如果再扩大的话就会导致运行时错误（参见第 7.7 节）。\",\"对于每一个切片（包括 string），以下状态总是成立的：\",\"s == s[:i] + s[i:] // i是一个整数且: 0 <= i <= len(s) len(s) <= cap(s) \",\"切片也可以用类似数组的方式初始化：var x = []int{2, 3, 5, 7, 11}。这样就创建了一个长度为 5 的数组并且创建了一个相关切片。\",\"切片在内存中的组织方式实际上是一个有 3 个域的结构体：指向相关数组的指针，切片长度以及切片容量。下图给出了一个长度为 2，容量为 4 的切片 y。\",\"y[0] = 3 且 y[1] = 5。\",\"切片 y[0:4] 由 元素 3，5，7 和 11 组成。\",\"示例 7.7 array_slices.go\",\"package main import \\\"fmt\\\" func main() { var arr1 [6]int var slice1 []int = arr1[2:5] // item at index 5 not included! // load the array with integers: 0,1,2,3,4,5 for i := 0; i < len(arr1); i++ { arr1[i] = i } // print the slice for i := 0; i < len(slice1); i++ { fmt.Printf(\\\"Slice at %d is %d\\\\n\\\", i, slice1[i]) } fmt.Printf(\\\"The length of arr1 is %d\\\\n\\\", len(arr1)) fmt.Printf(\\\"The length of slice1 is %d\\\\n\\\", len(slice1)) fmt.Printf(\\\"The capacity of slice1 is %d\\\\n\\\", cap(slice1)) // grow the slice slice1 = slice1[0:4] for i := 0; i < len(slice1); i++ { fmt.Printf(\\\"Slice at %d is %d\\\\n\\\", i, slice1[i]) } fmt.Printf(\\\"The length of slice1 is %d\\\\n\\\", len(slice1)) fmt.Printf(\\\"The capacity of slice1 is %d\\\\n\\\", cap(slice1)) // grow the slice beyond capacity //slice1 = slice1[0:7 ] // panic: runtime error: slice bound out of range } \",\"输出：\",\"Slice at 0 is 2 Slice at 1 is 3 Slice at 2 is 4 The length of arr1 is 6 The length of slice1 is 3 The capacity of slice1 is 4 Slice at 0 is 2 Slice at 1 is 3 Slice at 2 is 4 Slice at 3 is 5 The length of slice1 is 4 The capacity of slice1 is 4 \",\"如果 s2 是一个切片，你可以将 s2 向后移动一位 s2 = s2[1:]，但是末尾没有移动。切片只能向后移动，s2 = s2[-1:] 会导致编译错误。切片不能被重新分片以获取数组的前一个元素。\",\"注意 绝对不要用指针指向切片。切片本身已经是一个引用类型，所以它本身就是一个指针！！\",\"问题 7.2： 给定切片 b:= []byte{'g', 'o', 'l', 'a', 'n', 'g'}，那么 b[1:4]、b[:2]、b[2:] 和 b[:] 分别是什么？\"]},\"586\":{\"h\":\"7.2.2 将切片传递给函数\",\"t\":[\"如果你有一个函数需要对数组做操作，你可能总是需要把参数声明为切片。当你调用该函数时，把数组分片，创建为一个切片引用并传递给该函数。这里有一个计算数组元素和的方法:\",\"func sum(a []int) int { s := 0 for i := 0; i < len(a); i++ { s += a[i] } return s } func main() { var arr = [5]int{0, 1, 2, 3, 4} sum(arr[:]) } \"]},\"587\":{\"h\":\"7.2.3 用 make() 创建一个切片\",\"t\":[\"当相关数组还没有定义时，我们可以使用 make() 函数来创建一个切片，同时创建好相关数组：var slice1 []type = make([]type, len)。\",\"也可以简写为 slice1 := make([]type, len)，这里 len 是数组的长度并且也是 slice 的初始长度。\",\"所以定义 s2 := make([]int, 10)，那么 cap(s2) == len(s2) == 10。\",\"make() 接受 2 个参数：元素的类型以及切片的元素个数。\",\"如果你想创建一个 slice1，它不占用整个数组，而只是占用以 len 为个数个项，那么只要：slice1 := make([]type, len, cap)。\",\"make() 的使用方式是：func make([]T, len, cap)，其中 cap 是可选参数。\",\"所以下面两种方法可以生成相同的切片:\",\"make([]int, 50, 100) new([100]int)[0:50] \",\"下图描述了使用 make() 方法生成的切片的内存结构：\",\"示例 7.8 make_slice.go\",\"package main import \\\"fmt\\\" func main() { var slice1 []int = make([]int, 10) // load the array/slice: for i := 0; i < len(slice1); i++ { slice1[i] = 5 * i } // print the slice: for i := 0; i < len(slice1); i++ { fmt.Printf(\\\"Slice at %d is %d\\\\n\\\", i, slice1[i]) } fmt.Printf(\\\"\\\\nThe length of slice1 is %d\\\\n\\\", len(slice1)) fmt.Printf(\\\"The capacity of slice1 is %d\\\\n\\\", cap(slice1)) } \",\"输出：\",\"Slice at 0 is 0 Slice at 1 is 5 Slice at 2 is 10 Slice at 3 is 15 Slice at 4 is 20 Slice at 5 is 25 Slice at 6 is 30 Slice at 7 is 35 Slice at 8 is 40 Slice at 9 is 45 The length of slice1 is 10 The capacity of slice1 is 10 \",\"因为字符串是纯粹不可变的字节数组，它们也可以被切分成切片。\",\"练习 7.4： fibonacci_funcarray.go: 为练习 7.3 写一个新的版本，主函数调用一个使用序列个数作为参数的函数，该函数返回一个大小为序列个数的 Fibonacci 切片。\"]},\"588\":{\"h\":\"7.2.4 new() 和 make() 的区别\",\"t\":[\"看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。\",\"new(T) 为每个新的类型 T 分配一片内存，初始化为 0 并且返回类型为 *T 的内存地址：这种方法 返回一个指向类型为 T，值为 0 的地址的指针，它适用于值类型如数组和结构体（参见第 10 章）；它相当于 &T{}。\",\"make(T)返回一个类型为 T 的初始值，它只适用于 3 种内建的引用类型：切片、map 和 channel（参见第 8 章和第 13 章）。\",\"换言之，new() 函数分配内存，make() 函数初始化；下图给出了区别：\",\"在图 7.3 的第一幅图中：\",\"var p *[]int = new([]int) // *p == nil; with len and cap 0 p := new([]int) \",\"在第二幅图中， p := make([]int, 0) ，切片 已经被初始化，但是指向一个空的数组。\",\"以上两种方式实用性都不高。下面的方法：\",\"var v []int = make([]int, 10, 50) \",\"或者\",\"v := make([]int, 10, 50) \",\"这样分配一个有 50 个 int 值的数组，并且创建了一个长度为 10，容量为 50 的切片 v，该切片指向数组的前 10 个元素。\",\"问题 7.3 给定 s := make([]byte, 5)，len(s) 和 cap(s) 分别是多少？s = s[2:4]，len(s) 和 cap(s) 又分别是多少？\",\"问题 7.4 假设 s1 := []byte{'p', 'o', 'e', 'm'} 且 s2 := s1[2:]，s2 的值是多少？如果我们执行 s2[1] = 't'，s1 和 s2 现在的值又分别是多少？\",\"译者注：如何理解 new、make、slice、map、channel 的关系\",\"1.slice、map 以及 channel 都是 golang 内建的一种引用类型，三者在内存中存在多个组成部分， 需要对内存组成部分初始化后才能使用，而 make 就是对三者进行初始化的一种操作方式\",\"2. new 获取的是存储指定变量内存地址的一个变量，对于变量内部结构并不会执行相应的初始化操作， 所以 slice、map、channel 需要 make 进行初始化并获取对应的内存地址，而非 new 简单的获取内存地址\"]},\"589\":{\"h\":\"7.2.5 多维切片\",\"t\":[\"和数组一样，切片通常也是一维的，但是也可以由一维组合成高维。通过分片的分片（或者切片的数组），长度可以任意动态变化，所以 Go 语言的多维切片可以任意切分。而且，内层的切片必须单独分配（通过 make() 函数）。\"]},\"590\":{\"h\":\"7.2.6 bytes 包\",\"t\":[\"类型 []byte 的切片十分常见，Go 语言有一个 bytes 包专门用来提供这种类型的操作方法。\",\"bytes 包和字符串包十分类似（参见第 4.7 节）。而且它还包含一个十分有用的类型 Buffer:\",\"import \\\"bytes\\\" type Buffer struct { ... } \",\"这是一个长度可变的 bytes 的 buffer，提供 Read() 和 Write() 方法，因为读写长度未知的 bytes 最好使用 buffer。\",\"Buffer 可以这样定义：var buffer bytes.Buffer。\",\"或者使用 new() 获得一个指针：var r *bytes.Buffer = new(bytes.Buffer)。\",\"或者通过函数：func NewBuffer(buf []byte) *Buffer，创建一个 Buffer 对象并且用 buf 初始化好；NewBuffer 最好用在从 buf 读取的时候使用。\",\"通过 buffer 串联字符串\",\"类似于 Java 的 StringBuilder 类。\",\"在下面的代码段中，我们创建一个 buffer，通过 buffer.WriteString(s) 方法将字符串 s 追加到后面，最后再通过 buffer.String() 方法转换为 string：\",\"var buffer bytes.Buffer for { if s, ok := getNextString(); ok { //method getNextString() not shown here buffer.WriteString(s) } else { break } } fmt.Print(buffer.String(), \\\"\\\\n\\\") \",\"这种实现方式比使用 += 要更节省内存和 CPU，尤其是要串联的字符串数目特别多的时候。\",\"练习 7.5\",\"给定切片 sl，将一个 []byte 数组追加到 sl 后面。写一个函数 Append(slice, data []byte) []byte，该函数在 sl 不能存储更多数据的时候自动扩容。\",\"练习 7.6\",\"把一个缓存 buf 分片成两个切片：第一个是前 n 个 bytes，后一个是剩余的，用一行代码实现。\"]},\"591\":{\"h\":\"7.3 For-range 结构\",\"t\":[\"这种构建方法可以应用于数组和切片:\",\"for ix, value := range slice1 { ... } \",\"第一个返回值 ix 是数组或者切片的索引，第二个是在该索引位置的值；他们都是仅在 for 循环内部可见的局部变量。value 只是 slice1 某个索引位置的值的一个拷贝，不能用来修改 slice1 该索引位置的值。\",\"示例 7.9 slices_forrange.go\",\"package main import \\\"fmt\\\" func main() { var slice1 []int = make([]int, 4) slice1[0] = 1 slice1[1] = 2 slice1[2] = 3 slice1[3] = 4 for ix, value := range slice1 { fmt.Printf(\\\"Slice at %d is: %d\\\\n\\\", ix, value) } } \",\"示例 7.10 slices_forrange2.go\",\"package main import \\\"fmt\\\" func main() { seasons := []string{\\\"Spring\\\", \\\"Summer\\\", \\\"Autumn\\\", \\\"Winter\\\"} for ix, season := range seasons { fmt.Printf(\\\"Season %d is: %s\\\\n\\\", ix, season) } var season string for _, season = range seasons { fmt.Printf(\\\"%s\\\\n\\\", season) } } \",\"slices*forrange2.go 给出了一个关于字符串的例子， * 可以用于忽略索引。\",\"如果你只需要索引，你可以忽略第二个变量，例如：\",\"for ix := range seasons { fmt.Printf(\\\"%d\\\", ix) } // Output: 0 1 2 3 \",\"如果你需要修改 seasons[ix] 的值可以使用这个版本。\",\"多维切片下的 for-range：\",\"通过计算行数和矩阵值可以很方便的写出如（参考第 7.1.3 节）的 for 循环来，例如（参考第 7.5 节的例子 multidim_array.go）：\",\"for row := range screen { for column := range screen[row] { screen[row][column] = 1 } } \",\"问题 7.5 假设我们有如下数组：items := [...]int{10, 20, 30, 40, 50}\",\"a) 如果我们写了如下的 for 循环，那么执行完 for 循环后的 items 的值是多少？如果你不确定的话可以测试一下:)\",\"for _, item := range items { item *= 2 } \",\"b) 如果 a) 无法正常工作，写一个 for 循环让值可以变成自身的两倍。\",\"问题 7.6 通过使用省略号操作符 ... 来实现累加方法。\",\"练习 7.7sum_array.go\",\"a) 写一个 Sum() 函数，传入参数为一个 float32 数组成的数组 arrF，返回该数组的所有数字和。\",\"如果把数组修改为切片的话代码要做怎样的修改？如果用切片形式方法实现不同长度数组的的和呢？\",\"b) 写一个 SumAndAverage() 方法，返回两个 int 和 float32 类型的未命名变量的和与平均值。\",\"练习 7.8min_max.go\",\"写一个 minSlice() 方法，传入一个 int 的切片并且返回最小值，再写一个 maxSlice() 方法返回最大值。\"]},\"592\":{\"h\":\"7.4 切片重组 (reslice)\",\"t\":[\"我们已经知道切片创建的时候通常比相关数组小，例如：\",\"slice1 := make([]type, start_length, capacity) \",\"其中 start_length 作为切片初始长度而 capacity 作为相关数组的长度。\",\"这么做的好处是我们的切片在达到容量上限后可以扩容。改变切片长度的过程称之为切片重组 reslicing，做法如下：slice1 = slice1[0:end]，其中 end 是新的末尾索引（即长度）。\",\"将切片扩展 1 位可以这么做：\",\"sl = sl[0:len(sl)+1] \",\"切片可以反复扩展直到占据整个相关数组。\",\"示例 7.11 reslicing.go\",\"package main import \\\"fmt\\\" func main() { slice1 := make([]int, 0, 10) // load the slice, cap(slice1) is 10: for i := 0; i < cap(slice1); i++ { slice1 = slice1[0:i+1] slice1[i] = i fmt.Printf(\\\"The length of slice is %d\\\\n\\\", len(slice1)) } // print the slice: for i := 0; i < len(slice1); i++ { fmt.Printf(\\\"Slice at %d is %d\\\\n\\\", i, slice1[i]) } } \",\"输出结果：\",\"The length of slice is 1 The length of slice is 2 The length of slice is 3 The length of slice is 4 The length of slice is 5 The length of slice is 6 The length of slice is 7 The length of slice is 8 The length of slice is 9 The length of slice is 10 Slice at 0 is 0 Slice at 1 is 1 Slice at 2 is 2 Slice at 3 is 3 Slice at 4 is 4 Slice at 5 is 5 Slice at 6 is 6 Slice at 7 is 7 Slice at 8 is 8 Slice at 9 is 9 \",\"另一个例子：\",\"var ar = [10]int{0,1,2,3,4,5,6,7,8,9} var a = ar[5:7] // reference to subarray {5,6} - len(a) is 2 and cap(a) is 5 \",\"将 a 重新分片：\",\"a = a[0:4] // ref of subarray {5,6,7,8} - len(a) is now 4 but cap(a) is still 5 \",\"问题 7.7\",\"如果 a 是一个切片，那么 a[n:n] 的长度是多少？\",\"a[n:n+1] 的长度又是多少？\"]},\"593\":{\"h\":\"7.5 切片的复制与追加\",\"t\":[\"如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。下面的代码描述了从拷贝切片的 copy 函数和向切片追加新元素的 append() 函数。\",\"示例 7.12 copy_append_slice.go\",\"package main import \\\"fmt\\\" func main() { slFrom := []int{1, 2, 3} slTo := make([]int, 10) n := copy(slTo, slFrom) fmt.Println(slTo) fmt.Printf(\\\"Copied %d elements\\\\n\\\", n) // n == 3 sl3 := []int{1, 2, 3} sl3 = append(sl3, 4, 5, 6) fmt.Println(sl3) } \",\"func append(s[]T, x ...T) []T 其中 append() 方法将 0 个或多个具有相同类型 s 的元素追加到切片后面并且返回新的切片；追加的元素必须和原切片的元素是同类型。如果 s 的容量不足以存储新增元素，append() 会分配新的切片来保证已有切片元素和新增元素的存储。因此，返回的切片可能已经指向一个不同的相关数组了。append() 方法总是返回成功，除非系统内存耗尽了。\",\"如果你想将切片 y 追加到切片 x 后面，只要将第二个参数扩展成一个列表即可：x = append(x, y...)。\",\"注意： append() 在大多数情况下很好用，但是如果你想完全掌控整个追加过程，你可以实现一个这样的 AppendByte() 方法：\",\"func AppendByte(slice []byte, data ...byte) []byte { m := len(slice) n := m + len(data) if n > cap(slice) { // if necessary, reallocate // allocate double what's needed, for future growth. newSlice := make([]byte, (n+1)*2) copy(newSlice, slice) slice = newSlice } slice = slice[0:n] copy(slice[m:n], data) return slice } \",\"func copy(dst, src []T) int 方法将类型为 T 的切片从源地址 src 拷贝到目标地址 dst，覆盖 dst 的相关元素，并且返回拷贝的元素个数。源地址和目标地址可能会有重叠。拷贝个数是 src 和 dst 的长度最小值。如果 src 是字符串那么元素类型就是 byte。如果你还想继续使用 src，在拷贝结束后执行 src = dst。\",\"练习 7.9magnify_slice.go\",\"给定一个切片 s []int 和一个 int 类型的因子 factor，扩展 s 使其长度为 len(s) * factor。\",\"**练习 7.10 ** filter_slice.go\",\"用顺序函数过滤容器：s 是前 10 个整型的切片。构造一个函数 Filter，第一个参数是 s，第二个参数是一个 fn func(int) bool，返回满足函数 fn 的元素切片。通过 fn 测试方法测试当整型值是偶数时的情况。\",\"练习 7.11insert_slice.go\",\"写一个函数 InsertStringSlice() 将切片插入到另一个切片的指定位置。\",\"练习 7.12remove_slice.go\",\"写一个函数 RemoveStringSlice() 将从 start 到 end 索引的元素从切片中移除。\"]},\"594\":{\"h\":\"7.6 字符串、数组和切片的应用\"},\"595\":{\"h\":\"7.6.1 从字符串生成字节切片\",\"t\":[\"假设 s 是一个字符串（本质上是一个字节数组），那么就可以直接通过 c := []byte(s) 来获取一个字节的切片 c 。另外，您还可以通过 copy() 函数来达到相同的目的：copy(dst []byte, src string)。\",\"同样的，还可以使用 for-range 来获得每个元素（Listing 7.13 — for_string.go）：\",\"package main import \\\"fmt\\\" func main() { s := \\\"\\\\u00ff\\\\u754c\\\" for i, c := range s { fmt.Printf(\\\"%d:%c \\\", i, c) } } \",\"输出：\",\"0:ÿ 2:界 \",\"我们知道，Unicode 字符会占用 2 个字节，有些甚至需要 3 个或者 4 个字节来进行表示。如果发现错误的 UTF8 字符，则该字符会被设置为 U+FFFD 并且索引向前移动一个字节。和字符串转换一样，您同样可以使用 c := []int32(s) 语法，这样切片中的每个 int 都会包含对应的 Unicode 代码，因为字符串中的每次字符都会对应一个整数。类似的，您也可以将字符串转换为元素类型为 rune 的切片：r := []rune(s)。\",\"可以通过代码 len([]int32(s)) 来获得字符串中字符的数量，但使用 utf8.RuneCountInString(s) 效率会更高一点。(参考 count_characters.go)\",\"您还可以将一个字符串追加到某一个字节切片的尾部：\",\"var b []byte var s string b = append(b, s...) \"]},\"596\":{\"h\":\"7.6.2 获取字符串的某一部分\",\"t\":[\"使用 substr := str[start:end] 可以从字符串 str 获取到从索引 start 开始到 end-1 位置的子字符串。同样的，str[start:] 则表示获取从 start 开始到 len(str)-1 位置的子字符串。而 str[:end] 表示获取从 0 开始到 end-1 的子字符串。\"]},\"597\":{\"h\":\"7.6.3 字符串和切片的内存结构\",\"t\":[\"在内存中，一个字符串实际上是一个双字结构，即一个指向实际数据的指针和记录字符串长度的整数（见图 7.4）。因为指针对用户来说是完全不可见，因此我们可以依旧把字符串看做是一个值类型，也就是一个字符数组。\",\"字符串 string s = \\\"hello\\\" 和子字符串 t = s[2:3] 在内存中的结构可以用下图表示：\"]},\"598\":{\"h\":\"7.6.4 修改字符串中的某个字符\",\"t\":[\"Go 语言中的字符串是不可变的，也就是说 str[index] 这样的表达式是不可以被放在等号左侧的。如果尝试运行 str[i] = 'D' 会得到错误：cannot assign to str[i]。\",\"因此，您必须先将字符串转换成字节数组，然后再通过修改数组中的元素值来达到修改字符串的目的，最后将字节数组转换回字符串格式。\",\"例如，将字符串 \\\"hello\\\" 转换为 \\\"cello\\\"：\",\"s := \\\"hello\\\" c := []byte(s) c[0] = 'c' s2 := string(c) // s2 == \\\"cello\\\" \",\"所以，您可以通过操作切片来完成对字符串的操作。\"]},\"599\":{\"h\":\"7.6.5 字节数组对比函数\",\"t\":[\"下面的 Compare() 函数会返回两个字节数组字典顺序的整数对比结果，即 0 if a == b, -1 if a < b, 1 if a > b。\",\"func Compare(a, b[]byte) int { for i:=0; i < len(a) && i < len(b); i++ { switch { case a[i] > b[i]: return 1 case a[i] < b[i]: return -1 } } // 数组的长度可能不同 switch { case len(a) < len(b): return -1 case len(a) > len(b): return 1 } return 0 // 数组相等 } \"]},\"600\":{\"h\":\"7.6.6 搜索及排序切片和数组\",\"t\":[\"标准库提供了 sort 包来实现常见的搜索和排序操作。您可以使用 sort 包中的函数 func Ints(a []int) 来实现对 int 类型的切片排序。例如 sort.Ints(arri)，其中变量 arri 就是需要被升序排序的数组或切片。为了检查某个数组是否已经被排序，可以通过函数 IntsAreSorted(a []int) bool 来检查，如果返回 true 则表示已经被排序。\",\"类似的，可以使用函数 func Float64s(a []float64) 来排序 float64 的元素，或使用函数 func Strings(a []string) 排序字符串元素。\",\"想要在数组或切片中搜索一个元素，该数组或切片必须先被排序（因为标准库的搜索算法使用的是二分法）。然后，您就可以使用函数 func SearchInts(a []int, n int) int 进行搜索，并返回对应结果的索引值。\",\"当然，还可以搜索 float64 和字符串：\",\"func SearchFloat64s(a []float64, x float64) int func SearchStrings(a []string, x string) int \",\"您可以通过查看 官方文档 来获取更详细的信息。\",\"这就是如何使用 sort 包的方法，我们会在第 11.7 节 对它的细节进行深入，并实现一个属于我们自己的版本。\"]},\"601\":{\"h\":\"7.6.7 append() 函数常见操作\",\"t\":[\"我们在第 7.5 节提到的 append() 非常有用，它能够用于各种方面的操作：\",\"将切片 b 的元素追加到切片 a 之后：a = append(a, b...)\",\"复制切片 a 的元素到新的切片 b 上：\",\"b = make([]T, len(a)) copy(b, a) \",\"删除位于索引 i 的元素：a = append(a[:i], a[i+1:]...)\",\"切除切片 a 中从索引 i 至 j 位置的元素：a = append(a[:i], a[j:]...)\",\"为切片 a 扩展 j 个元素长度：a = append(a, make([]T, j)...)\",\"在索引 i 的位置插入元素 x：a = append(a[:i], append([]T{x}, a[i:]...)...)\",\"在索引 i 的位置插入长度为 j 的新切片：a = append(a[:i], append(make([]T, j), a[i:]...)...)\",\"在索引 i 的位置插入切片 b 的所有元素：a = append(a[:i], append(b, a[i:]...)...)\",\"取出位于切片 a 最末尾的元素 x：x, a = a[len(a)-1], a[:len(a)-1]\",\"将元素 x 追加到切片 a：a = append(a, x)\",\"因此，您可以使用切片和 append() 操作来表示任意可变长度的序列。\",\"从数学的角度来看，切片相当于向量，如果需要的话可以定义一个向量作为切片的别名来进行操作。\",\"如果您需要更加完整的方案，可以学习一下 Eleanor McHugh 编写的几个包：slices、chain 和 lists。\"]},\"602\":{\"h\":\"7.6.8 切片和垃圾回收\",\"t\":[\"切片的底层指向一个数组，该数组的实际容量可能要大于切片所定义的容量。只有在没有任何切片指向的时候，底层的数组内存才会被释放，这种特性有时会导致程序占用多余的内存。\",\"示例 函数 FindDigits() 将一个文件加载到内存，然后搜索其中所有的数字并返回一个切片。\",\"var digitRegexp = regexp.MustCompile(\\\"[0-9]+\\\") func FindDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) return digitRegexp.Find(b) } \",\"这段代码可以顺利运行，但返回的 []byte 指向的底层是整个文件的数据。只要该返回的切片不被释放，垃圾回收器就不能释放整个文件所占用的内存。换句话说，一点点有用的数据却占用了整个文件的内存。\",\"想要避免这个问题，可以通过拷贝我们需要的部分到一个新的切片中：\",\"func FindDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) b = digitRegexp.Find(b) c := make([]byte, len(b)) copy(c, b) return c } \",\"事实上，上面这段代码只能找到第一个匹配正则表达式的数字串。要想找到所有的数字，可以尝试下面这段代码：\",\"func FindFileDigits(filename string) []byte { fileBytes, _ := ioutil.ReadFile(filename) b := digitRegexp.FindAll(fileBytes, len(fileBytes)) c := make([]byte, 0) for _, bytes := range b { c = append(c, bytes...) } return c } \",\"练习 7.12split_string.go\",\"编写一个函数，要求其接受两个参数，原始字符串 str 和分割索引 i，然后返回两个分割后的字符串。\",\"练习 7.13string_split2.go\",\"假设有字符串 str，那么 str[len(str)/2:] + str[:len(str)/2] 的结果是什么？\",\"练习 7.14string_reverse.go\",\"编写一个程序，要求能够反转字符串，即将 \\\"Google\\\" 转换成 \\\"elgooG\\\"（提示：使用 []byte 类型的切片）。\",\"如果您使用两个切片来实现反转，请再尝试使用一个切片（提示：使用交换法）。\",\"如果您想要反转 Unicode 编码的字符串，请使用 []int32 类型的切片。\",\"练习 7.15Q29_uniq.go\",\"编写一个程序，要求能够遍历一个字符数组，并将当前字符和前一个字符不相同的字符拷贝至另一个数组。\",\"练习 7.16bubblesort.go\",\"编写一个程序，使用冒泡排序的方法排序一个包含整数的切片（算法的定义可参考 维基百科）。\",\"练习 7.17map_function.go\",\"在函数式编程语言中，一个 map-function 是指能够接受一个函数原型和一个列表，并使用列表中的值依次执行函数原型，公式为：map ( F(), (e1,e2, . . . ,en) ) = ( F(e1), F(e2), ... F(en) )。\",\"编写一个函数 mapFunc 要求接受以下 2 个参数：\",\"一个将整数乘以 10 的函数\",\"一个整数列表\",\"最后返回保存运行结果的整数列表。\"]},\"603\":{\"h\":\"第 8 章：Map\",\"t\":[\"map 是一种特殊的数据结构：一种元素对 (pair) 的无序集合，pair 的一个元素是 key，对应的另一个元素是 value，所以这个结构也称为关联数组或字典。这是一种快速寻找值的理想结构：给定 key，对应的 value 可以迅速定位。\",\"map 这种数据结构在其他编程语言中也称为字典 (Python) 、hash 和 HashTable 等。\"]},\"604\":{\"h\":\"8.1 声明、初始化和 make\"},\"605\":{\"h\":\"8.1.1 概念\",\"t\":[\"map 是引用类型，可以使用如下声明：\",\"var map1 map[keytype]valuetype var map1 map[string]int \",\"（[keytype] 和 valuetype 之间允许有空格，但是 gofmt 移除了空格）\",\"在声明的时候不需要知道 map 的长度，map 是可以动态增长的。\",\"未初始化的 map 的值是 nil。\",\"key 可以是任意可以用 == 或者 != 操作符比较的类型，比如 string、int、float32(64)。所以数组、切片和结构体不能作为 key (译者注：含有数组切片的结构体不能作为 key，只包含内建类型的 struct 是可以作为 key 的），但是指针和接口类型可以。如果要用结构体作为 key 可以提供 Key() 和 Hash() 方法，这样可以通过结构体的域计算出唯一的数字或者字符串的 key。\",\"value 可以是任意类型的；通过使用空接口类型（详见第 11.9 节），我们可以存储任意值，但是使用这种类型作为值时需要先做一次类型断言（详见第 11.3 节）。\",\"map 传递给函数的代价很小：在 32 位机器上占 4 个字节，64 位机器上占 8 个字节，无论实际上存储了多少数据。通过 key 在 map 中寻找值是很快的，比线性查找快得多，但是仍然比从数组和切片的索引中直接读取要慢 100 倍；所以如果你很在乎性能的话还是建议用切片来解决问题。\",\"map 也可以用函数作为自己的值，这样就可以用来做分支结构（详见第 5 章）：key 用来选择要执行的函数。\",\"如果 key1 是 map1 的 key，那么 map1[key1] 就是对应 key1 的值，就如同数组索引符号一样（数组可以视为一种简单形式的 map，key 是从 0 开始的整数）。\",\"key1 对应的值可以通过赋值符号来设置为 val1：map1[key1] = val1。\",\"令 v := map1[key1] 可以将 key1 对应的值赋值给 v；如果 map 中没有 key1 存在，那么 v 将被赋值为 map1 的值类型的空值。\",\"常用的 len(map1) 方法可以获得 map 中的 pair 数目，这个数目是可以伸缩的，因为 map-pairs 在运行时可以动态添加和删除。\",\"示例 8.1 make_maps.go\",\"package main import \\\"fmt\\\" func main() { var mapLit map[string]int //var mapCreated map[string]float32 var mapAssigned map[string]int mapLit = map[string]int{\\\"one\\\": 1, \\\"two\\\": 2} mapCreated := make(map[string]float32) mapAssigned = mapLit mapCreated[\\\"key1\\\"] = 4.5 mapCreated[\\\"key2\\\"] = 3.14159 mapAssigned[\\\"two\\\"] = 3 fmt.Printf(\\\"Map literal at \\\\\\\"one\\\\\\\" is: %d\\\\n\\\", mapLit[\\\"one\\\"]) fmt.Printf(\\\"Map created at \\\\\\\"key2\\\\\\\" is: %f\\\\n\\\", mapCreated[\\\"key2\\\"]) fmt.Printf(\\\"Map assigned at \\\\\\\"two\\\\\\\" is: %d\\\\n\\\", mapLit[\\\"two\\\"]) fmt.Printf(\\\"Map literal at \\\\\\\"ten\\\\\\\" is: %d\\\\n\\\", mapLit[\\\"ten\\\"]) } \",\"输出结果：\",\"Map literal at \\\"one\\\" is: 1 Map created at \\\"key2\\\" is: 3.141590 Map assigned at \\\"two\\\" is: 3 Mpa literal at \\\"ten\\\" is: 0 \",\"mapLit 说明了 map literals 的使用方法： map 可以用 {key1: val1, key2: val2} 的描述方法来初始化，就像数组和结构体一样。\",\"map 是 引用类型 的： 内存用 make() 方法来分配。\",\"map 的初始化：var map1 = make(map[keytype]valuetype)。\",\"或者简写为：map1 := make(map[keytype]valuetype)。\",\"上面例子中的 mapCreated 就是用这种方式创建的：mapCreated := make(map[string]float32)。\",\"相当于：mapCreated := map[string]float32{}。\",\"mapAssigned 也是 mapLit 的引用，对 mapAssigned 的修改也会影响到 mapLit 的值。\",\"不要使用 new()，永远用 make() 来构造 map\",\"注意 如果你错误地使用 new() 分配了一个引用对象，你会获得一个空引用的指针，相当于声明了一个未初始化的变量并且取了它的地址：\",\"mapCreated := new(map[string]float32) \",\"接下来当我们调用：mapCreated[\\\"key1\\\"] = 4.5 的时候，编译器会报错：\",\"invalid operation: mapCreated[\\\"key1\\\"] (index of type *map[string]float32). \",\"为了说明值可以是任意类型的，这里给出了一个使用 func() int 作为值的 map：\",\"示例 8.2 map_func.go\",\"package main import \\\"fmt\\\" func main() { mf := map[int]func() int{ 1: func() int { return 10 }, 2: func() int { return 20 }, 5: func() int { return 50 }, } fmt.Println(mf) } \",\"输出结果为：map[1:0x10903be0 5:0x10903ba0 2:0x10903bc0]: 整型都被映射到函数地址。\"]},\"606\":{\"h\":\"8.1.2 map 容量\",\"t\":[\"和数组不同，map 可以根据新增的 key-value 对动态的伸缩，因此它不存在固定长度或者最大限制。但是你也可以选择标明 map 的初始容量 capacity，就像这样：make(map[keytype]valuetype, cap)。例如：\",\"map2 := make(map[string]float32, 100) \",\"当 map 增长到容量上限的时候，如果再增加新的 key-value 对，map 的大小会自动加 1。所以出于性能的考虑，对于大的 map 或者会快速扩张的 map，即使只是大概知道容量，也最好先标明。\",\"这里有一个 map 的具体例子，即将音阶和对应的音频映射起来：\",\"noteFrequency := map[string]float32 { \\\"C0\\\": 16.35, \\\"D0\\\": 18.35, \\\"E0\\\": 20.60, \\\"F0\\\": 21.83, \\\"G0\\\": 24.50, \\\"A0\\\": 27.50, \\\"B0\\\": 30.87, \\\"A4\\\": 440} \"]},\"607\":{\"h\":\"8.1.3 用切片作为 map 的值\",\"t\":[\"既然一个 key 只能对应一个 value，而 value 又是一个原始类型，那么如果一个 key 要对应多个值怎么办？例如，当我们要处理 Unix 机器上的所有进程，以父进程（pid 为整型）作为 key，所有的子进程（以所有子进程的 pid 组成的切片）作为 value。通过将 value 定义为 []int 类型或者其他类型的切片，就可以优雅地解决这个问题。\",\"这里有一些定义这种 map 的例子：\",\"mp1 := make(map[int][]int) mp2 := make(map[int]*[]int) \"]},\"608\":{\"h\":\"8.2 测试键值对是否存在及删除元素\",\"t\":[\"测试 map1 中是否存在 key1：\",\"在例子 8.1 中，我们已经见过可以使用 val1 = map1[key1] 的方法获取 key1 对应的值 val1。如果 map 中不存在 key1，val1 就是一个值类型的空值。\",\"这就会给我们带来困惑了：现在我们没法区分到底是 key1 不存在还是它对应的 value 就是空值。\",\"为了解决这个问题，我们可以这么用：val1, isPresent = map1[key1]\",\"isPresent 返回一个 bool 值：如果 key1 存在于 map1，val1 就是 key1 对应的 value 值，并且 isPresent 为 true；如果 key1 不存在，val1 就是一个空值，并且 isPresent 会返回 false。\",\"如果你只是想判断某个 key 是否存在而不关心它对应的值到底是多少，你可以这么做：\",\"_, ok := map1[key1] // 如果key1存在则ok == true，否则ok为false \",\"或者和 if 混合使用：\",\"if _, ok := map1[key1]; ok { // ... } \",\"从 map1 中删除 key1：\",\"直接 delete(map1, key1) 就可以。\",\"如果 key1 不存在，该操作不会产生错误。\",\"示例 8.4 map_testelement.go\",\"package main import \\\"fmt\\\" func main() { var value int var isPresent bool map1 := make(map[string]int) map1[\\\"New Delhi\\\"] = 55 map1[\\\"Beijing\\\"] = 20 map1[\\\"Washington\\\"] = 25 value, isPresent = map1[\\\"Beijing\\\"] if isPresent { fmt.Printf(\\\"The value of \\\\\\\"Beijing\\\\\\\" in map1 is: %d\\\\n\\\", value) } else { fmt.Printf(\\\"map1 does not contain Beijing\\\") } value, isPresent = map1[\\\"Paris\\\"] fmt.Printf(\\\"Is \\\\\\\"Paris\\\\\\\" in map1 ?: %t\\\\n\\\", isPresent) fmt.Printf(\\\"Value is: %d\\\\n\\\", value) // delete an item: delete(map1, \\\"Washington\\\") value, isPresent = map1[\\\"Washington\\\"] if isPresent { fmt.Printf(\\\"The value of \\\\\\\"Washington\\\\\\\" in map1 is: %d\\\\n\\\", value) } else { fmt.Println(\\\"map1 does not contain Washington\\\") } } \",\"输出结果：\",\"The value of \\\"Beijing\\\" in map1 is: 20 Is \\\"Paris\\\" in map1 ?: false Value is: 0 map1 does not contain Washington \"]},\"609\":{\"h\":\"8.3 for-range 的配套用法\",\"t\":[\"可以使用 for 循环读取 map：\",\"for key, value := range map1 { ... } \",\"第一个返回值 key 是 map 中的 key 值，第二个返回值则是该 key 对应的 value 值；这两个都是仅 for 循环内部可见的局部变量。其中第一个返回值 key 值是一个可选元素。如果你只关心值，可以这么使用：\",\"for _, value := range map1 { ... } \",\"如果只想获取 key，你可以这么使用：\",\"for key := range map1 { fmt.Printf(\\\"key is: %d\\\\n\\\", key) } \",\"示例 8.5 maps_forrange.go：\",\"package main import \\\"fmt\\\" func main() { map1 := make(map[int]float32) map1[1] = 1.0 map1[2] = 2.0 map1[3] = 3.0 map1[4] = 4.0 for key, value := range map1 { fmt.Printf(\\\"key is: %d - value is: %f\\\\n\\\", key, value) } } \",\"输出结果：\",\"key is: 3 - value is: 3.000000 key is: 1 - value is: 1.000000 key is: 4 - value is: 4.000000 key is: 2 - value is: 2.000000 \",\"注意 map 不是按照 key 的顺序排列的，也不是按照 value 的序排列的。\",\"译者注：map 的本质是散列表，而 map 的增长扩容会导致重新进行散列，这就可能使 map 的遍历结果在扩容前后变得不可靠，Go 设计者为了让大家不依赖遍历的顺序，每次遍历的起点--即起始 bucket 的位置不一样，即不让遍历都从某个固定的 bucket0 开始，所以即使未扩容时我们遍历出来的 map 也总是无序的。\",\"问题 8.1： 下面这段代码的输出是什么？\",\"capitals := map[string] string {\\\"France\\\":\\\"Paris\\\", \\\"Italy\\\":\\\"Rome\\\", \\\"Japan\\\":\\\"Tokyo\\\" } for key := range capitals { fmt.Println(\\\"Map item: Capital of\\\", key, \\\"is\\\", capitals[key]) } \",\"练习 8.1map_days.go\",\"创建一个 map 来保存每周 7 天的名字，将它们打印出来并且测试是否存在 \\\"Tuesday\\\" 和 \\\"Hollyday\\\"。\"]},\"610\":{\"h\":\"8.4 map 类型的切片\",\"t\":[\"假设我们想获取一个 map 类型的切片，我们必须使用两次 make() 函数，第一次分配切片，第二次分配切片中每个 map 元素（参见下面的例子 8.4）。\",\"示例 8.4 maps_forrange2.go：\",\"package main import \\\"fmt\\\" func main() { // Version A: items := make([]map[int]int, 5) for i:= range items { items[i] = make(map[int]int, 1) items[i][1] = 2 } fmt.Printf(\\\"Version A: Value of items: %v\\\\n\\\", items) // Version B: NOT GOOD! items2 := make([]map[int]int, 5) for _, item := range items2 { item = make(map[int]int, 1) // item is only a copy of the slice element. item[1] = 2 // This 'item' will be lost on the next iteration. } fmt.Printf(\\\"Version B: Value of items: %v\\\\n\\\", items2) } \",\"输出结果：\",\"Version A: Value of items: [map[1:2] map[1:2] map[1:2] map[1:2] map[1:2]] Version B: Value of items: [map[] map[] map[] map[] map[]] \",\"需要注意的是，应当像 A 版本那样通过索引使用切片的 map 元素。在 B 版本中获得的项只是 map 值的一个拷贝而已，所以真正的 map 元素没有得到初始化。\"]},\"611\":{\"h\":\"8.5 map 的排序\",\"t\":[\"map 默认是无序的，不管是按照 key 还是按照 value 默认都不排序（详见第 8.3 节）。\",\"如果你想为 map 排序，需要将 key（或者 value）拷贝到一个切片，再对切片排序（使用 sort 包，详见第 7.6.6 节），然后可以使用切片的 for-range 方法打印出所有的 key 和 value。\",\"下面有一个示例：\",\"示例 8.6 sort_map.go：\",\"// the telephone alphabet: package main import ( \\\"fmt\\\" \\\"sort\\\" ) var ( barVal = map[string]int{\\\"alpha\\\": 34, \\\"bravo\\\": 56, \\\"charlie\\\": 23, \\\"delta\\\": 87, \\\"echo\\\": 56, \\\"foxtrot\\\": 12, \\\"golf\\\": 34, \\\"hotel\\\": 16, \\\"indio\\\": 87, \\\"juliet\\\": 65, \\\"kili\\\": 43, \\\"lima\\\": 98} ) func main() { fmt.Println(\\\"unsorted:\\\") for k, v := range barVal { fmt.Printf(\\\"Key: %v, Value: %v / \\\", k, v) } keys := make([]string, len(barVal)) i := 0 for k, _ := range barVal { keys[i] = k i++ } sort.Strings(keys) fmt.Println() fmt.Println(\\\"sorted:\\\") for _, k := range keys { fmt.Printf(\\\"Key: %v, Value: %v / \\\", k, barVal[k]) } } \",\"输出结果：\",\"unsorted: Key: bravo, Value: 56 / Key: echo, Value: 56 / Key: indio, Value: 87 / Key: juliet, Value: 65 / Key: alpha, Value: 34 / Key: charlie, Value: 23 / Key: delta, Value: 87 / Key: foxtrot, Value: 12 / Key: golf, Value: 34 / Key: hotel, Value: 16 / Key: kili, Value: 43 / Key: lima, Value: 98 / sorted: Key: alpha, Value: 34 / Key: bravo, Value: 56 / Key: charlie, Value: 23 / Key: delta, Value: 87 / Key: echo, Value: 56 / Key: foxtrot, Value: 12 / Key: golf, Value: 34 / Key: hotel, Value: 16 / Key: indio, Value: 87 / Key: juliet, Value: 65 / Key: kili, Value: 43 / Key: lima, Value: 98 / \",\"但是如果你想要一个排序的列表，那么最好使用结构体切片，这样会更有效：\",\"type name struct { key string value int } \"]},\"612\":{\"h\":\"8.6 将 map 的键值对调\",\"t\":[\"这里对调是指调换 key 和 value。如果 map 的值类型可以作为 key 且所有的 value 是唯一的，那么通过下面的方法可以简单的做到键值对调。\",\"示例 8.7 invert_map.go：\",\"package main import ( \\\"fmt\\\" ) var ( barVal = map[string]int{\\\"alpha\\\": 34, \\\"bravo\\\": 56, \\\"charlie\\\": 23, \\\"delta\\\": 87, \\\"echo\\\": 56, \\\"foxtrot\\\": 12, \\\"golf\\\": 34, \\\"hotel\\\": 16, \\\"indio\\\": 87, \\\"juliet\\\": 65, \\\"kili\\\": 43, \\\"lima\\\": 98} ) func main() { invMap := make(map[int]string, len(barVal)) for k, v := range barVal { invMap[v] = k } fmt.Println(\\\"inverted:\\\") for k, v := range invMap { fmt.Printf(\\\"Key: %v, Value: %v / \\\", k, v) } } \",\"输出结果：\",\"inverted: Key: 34, Value: golf / Key: 23, Value: charlie / Key: 16, Value: hotel / Key: 87, Value: delta / Key: 98, Value: lima / Key: 12, Value: foxtrot / Key: 43, Value: kili / Key: 56, Value: bravo / Key: 65, Value: juliet / \",\"如果原始 value 值不唯一那这么做肯定会出问题；这种情况下不会报错，但是当遇到不唯一的 key 时应当直接停止对调，且此时对调后的 map 很可能没有包含原 map 的所有键值对！一种解决方法就是仔细检查唯一性并且使用多值 map，比如使用 map[int][]string 类型。\",\"练习 8.2map_drinks.go\",\"构造一个将英文饮料名映射为法语（或者任意你的母语）的集合；先打印所有的饮料，然后打印原名和翻译后的名字。接下来按照英文名排序后再打印出来。\"]},\"613\":{\"h\":\"第 9 章：包 (package)\",\"t\":[\"本章主要针对 Go 语言的包展开讲解。\"]},\"614\":{\"h\":\"9.1 标准库\",\"t\":[\"像 fmt、os 等这样具有常用功能的内置包在 Go 语言中有 150 个以上，它们被称为标准库，大部分(一些底层的除外)内置于 Go 本身。完整列表可以在 Go Walker 查看。\",\"在贯穿本书的例子和练习中，我们都是用标准库的包。可以通过查阅第 350 页包中的内容快速找到相关的包的实例。这里我们只是按功能进行分组来介绍这些包的简单用途，我们不会深入讨论他们的内部结构。\",\"unsafe: 包含了一些打破 Go 语言“类型安全”的命令，一般的程序中不会被使用，可用在 C/C++ 程序的调用中。\",\"syscall-os-os/exec:\",\"os: 提供给我们一个平台无关性的操作系统功能接口，采用类 Unix 设计，隐藏了不同操作系统间的差异，让不同的文件系统和操作系统对象表现一致。\",\"os/exec: 提供我们运行外部操作系统命令和程序的方式。\",\"syscall: 底层的外部包，提供了操作系统底层调用的基本接口。\",\"通过一个 Go 程序让 Linux 重启来体现它的能力。\",\"示例 9.1 reboot.go：\",\"package main import ( \\\"syscall\\\" ) const LINUX_REBOOT_MAGIC1 uintptr = 0xfee1dead const LINUX_REBOOT_MAGIC2 uintptr = 672274793 const LINUX_REBOOT_CMD_RESTART uintptr = 0x1234567 func main() { syscall.Syscall(syscall.SYS_REBOOT, LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, LINUX_REBOOT_CMD_RESTART) } \",\"archive/tar 和 /zip-compress：压缩（解压缩）文件功能。\",\"fmt-io-bufio-path/filepath-flag:\",\"fmt: 提供了格式化输入输出功能。\",\"io: 提供了基本输入输出功能，大多数是围绕系统功能的封装。\",\"bufio: 缓冲输入输出功能的封装。\",\"path/filepath: 用来操作在当前系统中的目标文件名路径。\",\"flag: 对命令行参数的操作。\",\"strings-strconv-unicode-regexp-bytes:\",\"strings: 提供对字符串的操作。\",\"strconv: 提供将字符串转换为基础类型的功能。\",\"unicode: 为 unicode 型的字符串提供特殊的功能。\",\"regexp: 正则表达式功能。\",\"bytes: 提供对字符型分片的操作。\",\"index/suffixarray: 子字符串快速查询。\",\"math-math/cmath-math/big-math/rand-sort:\",\"math: 基本的数学函数。\",\"math/cmath: 对复数的操作。\",\"math/rand: 伪随机数生成。\",\"sort: 为数组排序和自定义集合。\",\"math/big: 大数的实现和计算。\",\"container-/list-ring-heap: 实现对集合的操作。\",\"list: 双链表。\",\"ring: 环形链表。\",\"下面代码演示了如何遍历一个链表(当 l 是 *List)：\",\"for e := l.Front(); e != nil; e = e.Next() { //do something with e.Value } \",\"time-log:\",\"time: 日期和时间的基本操作。 \"]},\"615\":{\"h\":\"日期函数(Time)\",\"t\":[\"时间和日期是我们编程中经常会用到的，在golang中time包提供了时间的显示和测量用的函数。 \"]},\"616\":{\"h\":\"time.Now 获取当前时间\",\"t\":[\"timeObj := time.Now() year := timeObj.Year() month := timeObj.Month() day := timeObj.Day() fmt.Printf(\\\"%d-%02d-%02d \\\\n\\\", year, month, day) \"]},\"617\":{\"h\":\"格式化日期\",\"t\":[\"时间类型有一个自带的方法 Format进行格式化 需要注意的是Go语言中格式化时间模板不是长久的 Y-m-d H:M:S 而是使用Go的诞生时间 2006年1月2日 15点04分 （记忆口诀：2006 1 2 3 4 5） \",\"/** 时间类型有一个自带的方法 Format进行格式化 需要注意的是Go语言中格式化时间模板不是长久的 Y-m-d H:M:S 而是使用Go的诞生时间 2006年1月2日 15点04分 （记忆口诀：2006 1 2 3 4 5） */ timeObj2 := time.Now() // 24小时值 （15表示二十四小时） fmt.Println(timeObj2.Format(\\\"2006-01-02 15:04:05\\\")) // 12小时制 fmt.Println(timeObj2.Format(\\\"2006-01-02 03:04:05\\\")) \"]},\"618\":{\"h\":\"获取当前时间戳\",\"t\":[\"时间戳是自1070年1月1日（08:00:00GMT）至当前时间的总毫秒数。它也被称为Unix时间戳 \",\"/** 获取当前时间戳 */ timeObj3 := time.Now() // 获取毫秒时间戳 unixTime := timeObj3.Unix() // 获取纳秒时间戳 unixNaTime := timeObj3.UnixNano() \"]},\"619\":{\"h\":\"时间戳转日期字符串\",\"t\":[\"通过将时间戳我们可以转换成日期字符串 \",\"// 时间戳转换年月日时分秒（一个参数是秒，另一个参数是毫秒） var timeObj4 = time.Unix(1595289901, 0) var timeStr = timeObj4.Format(\\\"2006-01-02 15:04:05\\\") fmt.Println(timeStr) \"]},\"620\":{\"h\":\"日期字符串转换成时间戳\",\"t\":[\"// 日期字符串转换成时间戳 var timeStr2 = \\\"2020-07-21 08:10:05\\\"; var tmp = \\\"2006-01-02 15:04:05\\\" timeObj5, _ := time.ParseInLocation(tmp, timeStr2, time.Local) fmt.Println(timeObj5.Unix()) \"]},\"621\":{\"h\":\"时间间隔\",\"t\":[\"time.Duration是time包定义的一个类型，它代表两个时间点之间经过的时间，以纳秒为单位。time.Duration表示一段时间间隔，可表示的最大长度段大约290年。 time包中定义的时间间隔类型的常量如下： \",\"image-20200721081402315\"]},\"622\":{\"h\":\"时间操作函数\",\"t\":[\"我们在日常的编码过程中可能会遇到要求时间+时间间隔的需求，Go语言的时间对象有提供Add方法如下 \",\"func (t Time) Add(d Duration)Time \",\"例如\",\"// 时间相加 now := time.Now() // 当前时间加1个小时后 later := now.Add(time.Hour) fmt.Println(later) \",\"同理的方法还有：时间差、判断相等 \"]},\"623\":{\"h\":\"定时器\",\"t\":[\"方式1：使用time.NewTicker（时间间隔）来设置定时器 \",\"// 定时器, 定义一个1秒间隔的定时器 ticker := time.NewTicker(time.Second) n := 0 for i := range ticker.C { fmt.Println(i) n++ if n>5 { // 终止定时器 ticker.Stop() return } } \",\"方式2：time.Sleep(time.Second)来实现定时器 \",\"for { time.Sleep(time.Second) fmt.Println(\\\"一秒后\\\") } \",\"log: 记录程序运行时产生的日志，我们将在后面的章节使用它。\",\"encoding/json-encoding/xml-text/template:\",\"encoding/json: 读取并解码和写入并编码 JSON 数据。\",\"encoding/xml: 简单的 XML1.0 解析器，有关 JSON 和 XML 的实例请查阅第 12.9/10 章节。\",\"text/template:生成像 HTML 一样的数据与文本混合的数据驱动模板（参见第 15.7 节）。\",\"net-net/http-html:（参见第 15 章）\",\"net: 网络数据的基本操作。\",\"http: 提供了一个可扩展的 HTTP 服务器和基础客户端，解析 HTTP 请求和回复。\",\"html: HTML5 解析器。\",\"runtime: Go 程序运行时的交互操作，例如垃圾回收和协程创建。\",\"reflect: 实现通过程序运行时反射，让程序操作任意类型的变量。\",\"exp 包中有许多将被编译为新包的实验性的包。在下次稳定版本发布的时候，它们将成为独立的包。如果前一个版本已经存在了，它们将被作为过时的包被回收。然而 Go1.0 发布的时候并没有包含过时或者实验性的包。\",\"练习 9.1Q20_linked_list.go\",\"使用 container/list 包实现一个双向链表，将 101、102 和 103 放入其中并打印出来。\",\"练习 9.2size_int.go\",\"通过使用 unsafe 包中的方法来测试你电脑上一个整型变量占用多少个字节。\"]},\"624\":{\"h\":\"9.2 regexp 包\",\"t\":[\"正则表达式语法和使用的详细信息请参考 维基百科。\",\"在下面的程序里，我们将在字符串中对正则表达式模式 (pattern) 进行匹配。\",\"如果是简单模式，使用 Match() 方法便可：\",\"ok, _ := regexp.Match(pat, []byte(searchIn)) \",\"变量 ok 将返回 true 或者 false，我们也可以使用 MatchString()：\",\"ok, _ := regexp.MatchString(pat, searchIn) \",\"更多方法中，必须先将正则模式通过 Compile() 方法返回一个 Regexp 对象。然后我们将掌握一些匹配，查找，替换相关的功能。\",\"示例 9.2 pattern.go：\",\"package main import ( \\\"fmt\\\" \\\"regexp\\\" \\\"strconv\\\" ) func main() { //目标字符串 searchIn := \\\"John: 2578.34 William: 4567.23 Steve: 5632.18\\\" pat := \\\"[0-9]+.[0-9]+\\\" //正则 f := func(s string) string { v, _ := strconv.ParseFloat(s, 32) return strconv.FormatFloat(v*2, 'f', 2, 32) } if ok, _ := regexp.Match(pat, []byte(searchIn)); ok { fmt.Println(\\\"Match Found!\\\") } re, _ := regexp.Compile(pat) //将匹配到的部分替换为\\\"##.#\\\" str := re.ReplaceAllString(searchIn, \\\"##.#\\\") fmt.Println(str) //参数为函数时 str2 := re.ReplaceAllStringFunc(searchIn, f) fmt.Println(str2) } \",\"输出结果：\",\"Match Found! John: ##.# William: ##.# Steve: ##.# John: 5156.68 William: 9134.46 Steve: 11264.36 \",\"Compile() 函数也可能返回一个错误，我们在使用时忽略对错误的判断是因为我们确信自己正则表达式是有效的。当用户输入或从数据中获取正则表达式的时候，我们有必要去检验它的正确性。另外我们也可以使用 MustCompile() 方法，它可以像 Compile() 方法一样检验正则的有效性，但是当正则不合法时程序将 panic()（详情查看第 13.2 节）。\"]},\"625\":{\"h\":\"9.3 锁和 sync 包\",\"t\":[\"在一些复杂的程序中，通常通过不同线程执行不同应用来实现程序的并发。当不同线程要使用同一个变量时，经常会出现一个问题：无法预知变量被不同线程修改的顺序！（这通常被称为资源竞争，指不同线程对同一变量使用的竞争）显然这无法让人容忍，那我们该如何解决这个问题呢？\",\"经典的做法是一次只能让一个线程对共享变量进行操作。当变量被一个线程改变时（临界区），我们为它上锁，直到这个线程执行完成并解锁后，其他线程才能访问它。\",\"特别是我们之前章节学习的 map 类型是不存在锁的机制来实现这种效果（出于对性能的考虑），所以 map 类型是非线程安全的。当并行访问一个共享的 map 类型的数据，map 数据将会出错。\",\"在 Go 语言中这种锁的机制是通过 sync 包中 Mutex 来实现的。sync 来源于 \\\"synchronized\\\" 一词，这意味着线程将有序的对同一变量进行访问。\",\"sync.Mutex 是一个互斥锁，它的作用是守护在临界区入口来确保同一时间只能有一个线程进入临界区。\",\"假设 info 是一个需要上锁的放在共享内存中的变量。通过包含 Mutex 来实现的一个典型例子如下：\",\"import \\\"sync\\\" type Info struct { mu sync.Mutex // ... other fields, e.g.: Str string } \",\"如果一个函数想要改变这个变量可以这样写:\",\"func Update(info *Info) { info.mu.Lock() // critical section: info.Str = // new value // end critical section info.mu.Unlock() } \",\"还有一个很有用的例子是通过 Mutex 来实现一个可以上锁的共享缓冲器:\",\"type SyncedBuffer struct { lock sync.Mutex buffer bytes.Buffer } \",\"在 sync 包中还有一个 RWMutex 锁：它能通过 RLock() 来允许同一时间多个线程对变量进行读操作，但是只能一个线程进行写操作。如果使用 Lock() 将和普通的 Mutex 作用相同。包中还有一个方便的 Once 类型变量的方法 once.Do(call)，这个方法确保被调用函数只能被调用一次。\",\"相对简单的情况下，通过使用 sync 包可以解决同一时间只能一个线程访问变量或 map 类型数据的问题。如果这种方式导致程序明显变慢或者引起其他问题，我们要重新思考来通过 goroutines 和 channels 来解决问题，这是在 Go 语言中所提倡用来实现并发的技术。我们将在第 14 章对其深入了解，并在第 14.7 节中对这两种方式进行比较。\"]},\"626\":{\"h\":\"9.4 精密计算和 big 包\",\"t\":[\"我们知道有些时候通过编程的方式去进行计算是不精确的。如果你使用 Go 语言中的 float64 类型进行浮点运算，返回结果将精确到 15 位，足以满足大多数的任务。当对超出 int64 或者 uint64 类型这样的大数进行计算时，如果对精度没有要求，float32 或者 float64 可以胜任，但如果对精度有严格要求的时候，我们不能使用浮点数，在内存中它们只能被近似的表示。\",\"对于整数的高精度计算 Go 语言中提供了 big 包，被包含在 math 包下：有用来表示大整数的 big.Int 和表示大有理数的 big.Rat 类型（可以表示为 2/5 或 3.1416 这样的分数，而不是无理数或 π）。这些类型可以实现任意位类型的数字，只要内存足够大。缺点是更大的内存和处理开销使它们使用起来要比内置的数字类型慢很多。\",\"大的整型数字是通过 big.NewInt(n) 来构造的，其中 n 为 int64 类型整数。而大有理数是通过 big.NewRat(n, d) 方法构造。n（分子）和 d（分母）都是 int64 型整数。因为 Go 语言不支持运算符重载，所以所有大数字类型都有像是 Add() 和 Mul() 这样的方法。它们作用于作为 receiver 的整数和有理数，大多数情况下它们修改 receiver 并以 receiver 作为返回结果。因为没有必要创建 big.Int 类型的临时变量来存放中间结果，所以运算可以被链式地调用，并节省内存。\",\"示例 9.2 big.go：\",\"// big.go package main import ( \\\"fmt\\\" \\\"math\\\" \\\"math/big\\\" ) func main() { // Here are some calculations with bigInts: im := big.NewInt(math.MaxInt64) in := im io := big.NewInt(1956) ip := big.NewInt(1) ip.Mul(im, in).Add(ip, im).Div(ip, io) fmt.Printf(\\\"Big Int: %v\\\\n\\\", ip) // Here are some calculations with bigInts: rm := big.NewRat(math.MaxInt64, 1956) rn := big.NewRat(-1956, math.MaxInt64) ro := big.NewRat(19, 56) rp := big.NewRat(1111, 2222) rq := big.NewRat(1, 1) rq.Mul(rm, rn).Add(rq, ro).Mul(rq, rp) fmt.Printf(\\\"Big Rat: %v\\\\n\\\", rq) } /* Output: Big Int: 43492122561469640008497075573153004 Big Rat: -37/112 */ \",\"输出结果：\",\"Big Int: 43492122561469640008497075573153004 Big Rat: -37/112 \"]},\"627\":{\"h\":\"9.5 自定义包和可见性\",\"t\":[\"包是 Go 语言中代码组织和代码编译的主要方式。关于它们的很多基本信息已经在 4.2 章节中给出，最引人注目的便是可见性。现在我们来看看具体如何来使用自己写的包。在下一节，我们将回顾一些标准库中的包，自定义的包和标准库以外的包。\",\"当写自己包的时候，要使用短小的不含有 _（下划线）的小写单词来为文件命名。这里有个简单例子来说明包是如何相互调用以及可见性是如何实现的。\",\"当前目录下（examples/chapter_9/book/）有一个名为 package_mytest.go 的程序, 它使用了自定义包 pack1 中 pack1.go 的代码。这段程序（连同编译链接生成的 pack1.a）存放在当前目录下一个名为 pack1 的文件夹下。所以链接器将包的对象和主程序对象链接在一起。\",\"示例 9.4 pack1.go：\",\"package pack1 var Pack1Int int = 42 var pack1Float = 3.14 func ReturnStr() string { return \\\"Hello main!\\\" } \",\"它包含了一个整型变量 Pack1Int 和一个返回字符串的函数 ReturnStr。这段程序在运行时不做任何的事情，因为它没有一个 main 函数。\",\"在主程序 package_mytest.go 中这个包通过声明的方式被导入, 只到包的目录一层。\",\"import \\\"./pack1\\\" \",\"import 的一般格式如下:\",\"import \\\"包的路径或 URL 地址\\\" \",\"例如：\",\"import \\\"github.com/org1/pack1” \",\"路径是指当前目录的相对路径。\",\"示例 9.5 package_mytest.go：\",\"package main import ( \\\"fmt\\\" \\\"./pack1\\\" ) func main() { var test1 string test1 = pack1.ReturnStr() fmt.Printf(\\\"ReturnStr from package1: %s\\\\n\\\", test1) fmt.Printf(\\\"Integer from package1: %d\\\\n\\\", pack1.Pack1Int) // fmt.Printf(\\\"Float from package1: %f\\\\n\\\", pack1.pack1Float) } \",\"输出结果：\",\"ReturnStr from package1: Hello main! Integer from package1: 42 \",\"如果包 pack1 和我们的程序在同一路径下，我们可以通过 \\\"import ./pack1\\\" 这样的方式来引入，但这不被视为一个好的方法。\",\"下面的代码试图访问一个未引用的变量或者函数，甚至没有编译。将会返回一个错误：\",\"fmt.Printf(\\\"Float from package1: %f\\\\n\\\", pack1.pack1Float) \",\"错误： cannot refer to unexported name pack1.pack1Float\",\"主程序利用的包必须在主程序编写之前被编译。主程序中每个 pack1 项目都要通过包名来使用：pack1.Item。具体使用方法请参见示例 4.6 和 4.7。\",\"因此，按照惯例，子目录和包之间有着密切的联系：为了区分，不同包存放在不同的目录下，每个包（所有属于这个包中的 go 文件）都存放在和包名相同的子目录下：\",\"Import with . :\",\"import . \\\"./pack1\\\"\",\"当使用 . 作为包的别名时，你可以不通过包名来使用其中的项目。例如：test := ReturnStr()。\",\"在当前的命名空间导入 pack1 包，一般是为了具有更好的测试效果。\",\"Import with _ :\",\"import _ \\\"./pack1/pack1\\\" \",\"pack1 包只导入其副作用，也就是说，只执行它的 init() 函数并初始化其中的全局变量。\",\"导入外部安装包:\",\"如果你要在你的应用中使用一个或多个外部包，首先你必须使用 go install（参见第 9.7 节）在你的本地机器上安装它们。\",\"假设你想使用 http://codesite.ext/author/goExample/goex 这种托管在 Google Code、GitHub 和 Launchpad 等代码网站上的包。\",\"你可以通过如下命令安装：\",\"go install codesite.ext/author/goExample/goex \",\"将一个名为 codesite.ext/author/goExample/goex 的 map 安装在 $GOROOT/src/ 目录下。\",\"通过以下方式，一次性安装，并导入到你的代码中：\",\"import goex \\\"codesite.ext/author/goExample/goex\\\" \",\"因此该包的 URL 将用作导入路径。\",\"在 http://golang.org/cmd/goinstall/ 的 go install 文档中列出了一些广泛被使用的托管在网络代码仓库的包的导入路径\",\"包的初始化:\",\"程序的执行开始于导入包，初始化 main 包然后调用 main() 函数。\",\"一个没有导入的包将通过分配初始值给所有的包级变量和调用源码中定义的包级 init() 函数来初始化。一个包可能有多个 init() 函数甚至在一个源码文件中。它们的执行是无序的。这是最好的例子来测定包的值是否只依赖于相同包下的其他值或者函数。\",\"init() 函数是不能被调用的。\",\"导入的包在包自身初始化前被初始化，而一个包在程序执行中只能初始化一次。\",\"编译并安装一个包（参见第 9.7 节）：\",\"在 Linux/OS X 下可以用类似第 3.9 节的 Makefile 脚本做到这一点：\",\"include $(GOROOT)/src/Make.inc TARG=pack1 GOFILES=\\\\ pack1.go\\\\ pack1b.go\\\\ include $(GOROOT)/src/Make.pkg \",\"通过 chmod 777 ./Makefile 确保它的可执行性。\",\"上面脚本内的 include 语句引入了相应的功能，将自动检测机器的架构并调用正确的编译器和链接器。\",\"然后终端执行 make 或 gomake 工具：他们都会生成一个包含静态库 pack1.a 的 _obj 目录。\",\"go install（参见第 9.7 节，从 Go1 的首选方式）同样复制 pack1.a 到本地的 $GOROOT/pkg 的目录中一个以操作系统为名的子目录下。像 import \\\"pack1\\\" 代替 import \\\"path to pack1\\\"，这样只通过名字就可以将包在程序中导入。\",\"当第 13 章 我们遇到使用测试工具进行测试的时候我们将重新回到自己的包的制作和编译这个话题。\",\"问题 9.1\",\"a）一个包能分成多个源文件么？\",\"b）一个源文件是否能包含多个包？\",\"练习 9.3main_greetings.go\",\"创建一个程序 main_greetings.go 能够和用户说 \\\"Good Day\\\" 或者 \\\"Good Night\\\"。不同的问候应该放到单独的 greetings 包中。\",\"在同一个包中创建一个 IsAM 函数返回一个布尔值用来判断当前时间是 AM 还是 PM，同样创建 IsAfternoon 和 IsEvening 函数。\",\"使用 main_greetings 作出合适的问候（提示：使用 time 包）。\",\"练习 9.4 创建一个程序 main_oddven.go 判断前 100 个整数是不是偶数，将判断所用的函数编写在 even 包里。\",\"练习 9.5 使用第 6.6 节的斐波那契程序：\",\"1）将斐波那契功能放入自己的 fibo 包中并通过主程序调用它，存储最后输入的值在函数的全局变量。\",\"2）扩展 fibo 包将通过调用斐波那契的时候，操作也作为一个参数。实验 \\\"+\\\" 和 \\\"*\\\"\",\"main_fibo.go / fibonacci.go\"]},\"628\":{\"h\":\"9.6 为自定义包使用 godoc\",\"t\":[\"godoc 工具（第 3.6 节）在显示自定义包中的注释也有很好的效果：注释必须以 // 开始并无空行放在声明（包，类型，函数）前。godoc 会为每个文件生成一系列的网页。\",\"例如：\",\"在 doc_examples 目录下我们有第 11.7 节中的用来排序的 go 文件，文件中有一些注释（文件需要未编译）\",\"命令行下进入目录下并输入命令：\",\"godoc -http=:6060 -goroot=\\\".\\\"\",\"（. 是指当前目录，-goroot 参数可以是 /path/to/my/package1 这样的形式指出 package1 在你源码中的位置或接受用冒号形式分隔的路径，无根目录的路径为相对于当前目录的相对路径）\",\"在浏览器打开地址：http://localhost:6060\",\"然后你会看到本地的 godoc 页面（详见第 3.6 节）从左到右一次显示出目录中的包：\",\"doc_example: doc_example | Packages | Commands | Specification \",\"下面是链接到源码和所有对象时有序概述（所以是很好的浏览和查找源代码的方式），连同文件/注释：\",\"sort 包\",\"func Float64sAreSorted type IntArray func IntsAreSortedfunc IsSortedfunc Sort func (IntArray) Len func SortFloat64s func (IntArray) Less func SortInts func (IntArray) Swap func SortStrings type Interface func StringsAreSorted type StringArray type Float64Array func (StringArray) Len func (Float64Array) Len func (StringArray) Less func (Float64Array) Less func (StringArray) Swap func (Float64Array) Swap // Other packages import \\\"doc_example\\\" \",\"使用通用的接口排序:\",\"func Float64sAreSorted[Top] func Float64sAreSorted(a []float64) bool func IntsAreSorted[Top] func IntsAreSorted(a []int) bool func IsSorted[Top] func IsSorted(data Interface) bool Test if data is sorted func Sort[Top] func Sort(data Interface) General sort function func SortInts[Top] func SortInts(a []int) Convenience wrappers for common cases: type IntArray[Top] Convenience types for common cases: IntArray type IntArray []int \",\"如果你在一个团队中工作，并且源代码树被存储在网络硬盘上，就可以使用 godoc 给所有团队成员连续文档的支持。通过设置 sync_minutes=n，你甚至可以让它每 n 分钟自动更新您的文档！\"]},\"629\":{\"h\":\"9.7 使用 go install 安装自定义包\",\"t\":[\"go install 是 Go 中自动包安装工具：如需要将包安装到本地它会从远端仓库下载包：检出、编译和安装一气呵成。\",\"在包安装前的先决条件是要自动处理包自身依赖关系的安装。被依赖的包也会安装到子目录下，但是没有文档和示例：可以到网上浏览。\",\"go install 使用了 GOPATH 变量（详见第 2.2 节）。\",\"远端包（详见第 9.5 节）：\",\"假设我们要安装一个有趣的包 tideland（它包含了许多帮助示例，参见项目主页）。\",\"因为我们需要创建目录在 Go 安装目录下，所以我们需要使用 root 或者 su 的身份执行命令。\",\"确保 Go 环境变量已经设置在 root 用户下的 ./bashrc 文件中。\",\"使用命令安装：go install tideland-cgl.googlecode.com/hg。\",\"可执行文件 hg.a 将被放到 $GOROOT/pkg/linux_amd64/tideland-cgl.googlecode.com 目录下，源码文件被放置在 $GOROOT/src/tideland-cgl.googlecode.com/hg 目录下，同样有个 hg.a 放置在 _obj 的子目录下。\",\"现在就可以在 go 代码中使用这个包中的功能了，例如使用包名 cgl 导入：\",\"import cgl \\\"tideland-cgl.googlecode.com/hg\\\" \",\"从 Go1 起 go install 安装 Google Code 的导入路径形式是：\\\"code.google.com/p/tideland-cgl\\\"\",\"升级到新的版本：\",\"更新到新版本的 Go 之后本地安装包的二进制文件将全被删除。如果你想更新，重编译、重安装所有的 go 安装包可以使用：go install -a。\",\"go 的版本发布的很频繁，所以需要注意发布版本和包的兼容性。go1 之后都是自己编译自己了。\",\"go install 同样可以使用 go install 编译链接并安装本地自己的包（详见第 9.8.2 节）。\",\"更多信息可以在 官方网站 找到。\"]},\"630\":{\"h\":\"9.8 自定义包的目录结构、go install 和 go test\",\"t\":[\"为了示范，我们创建了一个名为 uc 的简单包，它含有一个 UpperCase 函数将字符串的所有字母转换为大写。当然这并不值得创建一个自定义包，同样的功能已被包含在 strings 包里，但是同样的技巧也可以应用在更复杂的包中。\"]},\"631\":{\"h\":\"9.8.1 自定义包的目录结构\",\"t\":[\"下面的结构给了你一个好的示范（uc 代表通用包名, 名字为粗体的代表目录，斜体代表可执行文件）:\",\"/home/user/goprograms ucmain.go (uc 包主程序) Makefile (ucmain 的 makefile) ucmain src/uc (包含 uc 包的 go 源码) uc.go uc_test.go Makefile (包的 makefile) uc.a _obj uc.a _test uc.a bin (包含最终的执行文件) ucmain pkg/linux_amd64 uc.a (包的目标文件) \",\"将你的项目放在 goprograms 目录下(你可以创建一个环境变量 GOPATH，详见第 2.2/3 章节：在 .profile 和 .bashrc 文件中添加 export GOPATH=/home/user/goprograms)，而你的项目将作为 src 的子目录。uc 包中的功能在 uc.go 中实现。\",\"示例 9.6 uc.go：\",\"package uc import \\\"strings\\\" func UpperCase(str string) string { return strings.ToUpper(str) } \",\"包通常附带一个或多个测试文件，在这我们创建了一个 uc_test.go 文件，如第 9.8 节所述。\",\"示例 9.7 test.go\",\"package uc import \\\"testing\\\" type ucTest struct { in, out string } var ucTests = []ucTest { ucTest{\\\"abc\\\", \\\"ABC\\\"}, ucTest{\\\"cvo-az\\\", \\\"CVO-AZ\\\"}, ucTest{\\\"Antwerp\\\", \\\"ANTWERP\\\"}, } func TestUC(t *testing.T) { for _, ut := range ucTests { uc := UpperCase(ut.in) if uc != ut.out { t.Errorf(\\\"UpperCase(%s) = %s, must be %s\\\", ut.in, uc, ut.out) } } } \",\"通过指令编译并安装包到本地：go install uc, 这会将 uc.a 复制到 pkg/linux_amd64 下面。\",\"另外，使用 make ，通过以下内容创建一个包的 Makefile 在 src/uc 目录下:\",\"include $(GOROOT)/src/Make.inc TARG=uc GOFILES=\\\\ uc.go\\\\ include $(GOROOT)/src/Make.pkg \",\"在该目录下的命令行调用: gomake\",\"这将创建一个 _obj 目录并将包编译生成的存档 uc.a 放在该目录下。\",\"这个包可以通过 go test 测试。\",\"创建一个 uc.a 的测试文件在目录下，输出为 PASS 时测试通过。\",\"在第 13.8 节我们将给出另外一个测试例子并进行深入研究。\",\"备注：有可能你当前的用户不具有足够的资格使用 go install（没有权限）。这种情况下，选择 root 用户 su。确保 Go 环境变量和 Go 源码路径也设置给 su，同样也适用你的普通用户（详见第 2.3 节）。\",\"接下来我们创建主程序 ucmain.go:\",\"示例 9.8 ucmain.go：\",\"package main import ( \\\"./src/uc\\\" \\\"fmt\\\" ) func main() { str1 := \\\"USING package uc!\\\" fmt.Println(uc.UpperCase(str1)) } \",\"然后在这个目录下输入 go install。\",\"另外复制 uc.a 到 /home/user/goprograms 目录并创建一个 Makefile 并写入文本：\",\"include $(GOROOT)/src/Make.inc TARG=ucmain GOFILES=\\\\ ucmain.go\\\\ include $(GOROOT)/src/Make.cmd \",\"执行 gomake 编译 ucmain.go 生成可执行文件 ucmain\",\"运行 ./ucmain 显示: USING PACKAGE UC!。\"]},\"632\":{\"h\":\"9.8.2 本地安装包\",\"t\":[\"本地包在用户目录下，使用给出的目录结构，以下命令用来从源码安装本地包：\",\"go install /home/user/goprograms/src/uc # 编译安装 uc cd /home/user/goprograms/uc go install ./uc # 编译安装 uc（和之前的指令一样） cd .. go install . # 编译安装 ucmain \",\"安装到 $GOPATH 下：\",\"如果我们想安装的包在系统上的其他 Go 程序中被使用，它一定要安装到 $GOPATH 下。 这样做，在 .profile 和 .bashrc 中设置 export GOPATH=/home/user/goprograms。\",\"然后执行 go install uc 将会复制包存档到 $GOPATH/pkg/LINUX_AMD64/uc。\",\"现在，uc 包可以通过 import \\\"uc\\\" 在任何 Go 程序中被引用。\"]},\"633\":{\"h\":\"9.8.3 依赖系统的代码\",\"t\":[\"在不同的操作系统上运行的程序以不同的代码实现是非常少见的：绝大多数情况下语言和标准库解决了大部分的可移植性问题。\",\"你有一个很好的理由去写平台特定的代码，例如汇编语言。这种情况下，按照下面的约定是合理的：\",\"prog1.go prog1_linux.go prog1_darwin.go prog1_windows.go \",\"prog1.go 定义了不同操作系统通用的接口，并将系统特定的代码写到 prog1*os.go 中。 对于 Go 工具你可以指定 prog1*$GOOS.go 或 prog1_$GOARCH.go 或在平台 Makefile 中：prog1*$(GOOS).go\\\\ 或 prog1*$(GOARCH).go\\\\。\"]},\"634\":{\"h\":\"9.9 通过 Git 打包和安装\"},\"635\":{\"h\":\"9.9.1 安装到 GitHub\",\"t\":[\"以上的方式对于本地包来说是可以的，但是我们如何打包代码到开发者圈子呢？那么我们需要一个云端的源码的版本控制系统，比如著名的 Git。\",\"在 Linux 和 OS X 的机器上 Git 是默认安装的，在 Windows 上你必须先自行安装，参见 GitHub 帮助页面。\",\"这里将通过为第 9.8 节中的 uc 包创建一个 git 仓库作为演示\",\"进入到 uc 包目录下并创建一个 Git 仓库在里面: git init。\",\"信息提示: Initialized empty git repository in $PWD/uc。\",\"每一个 Git 项目都需要一个对包进行描述的 README.md 文件，所以需要打开你的文本编辑器（gedit、notepad 或 LiteIde）并添加一些说明进去。\",\"添加所有文件到仓库：git add README.md uc.go uc_test.go Makefile。\",\"标记为第一个版本：git commit -m \\\"initial rivision\\\"。\",\"现在必须登录 GitHub 网站。\",\"如果您还没有账号，可以去注册一个开源项目的免费帐号。输入正确的帐号密码和有效的邮箱地址并进一步创建用户。然后你将获得一个 Git 命令的列表。本地仓库的操作命令已经完成。一个优秀的系统在你遇到任何问题的时候将 引导你。\",\"在云端创建一个新的 uc 仓库;发布的指令为（NNNN 替代用户名）:\",\"git remote add origin git@github.com:NNNN/uc.git git push -u origin master \",\"操作完成后检查 GitHub 上的包页面: http://github.com/NNNN/uc。\"]},\"636\":{\"h\":\"9.9.2 从 GitHub 安装\",\"t\":[\"如果有人想安装您的远端项目到本地机器，打开终端并执行（NNNN 是你在 GitHub 上的用户名）：go get github.com/NNNN/uc。\",\"这样现在这台机器上的其他 Go 应用程序也可以通过导入路径：\\\"github.com/NNNN/uc\\\" 代替 \\\"./uc/uc\\\" 来使用。\",\"也可以将其缩写为：import uc \\\"github.com/NNNN/uc\\\"。\",\"然后修改 Makefile: 将 TARG=uc 替换为 TARG=github.com/NNNN/uc。\",\"Gomake（和 go install）将通过 $GOPATH 下的本地版本进行工作。\",\"网站和版本控制系统的其他的选择(括号中为网站所使用的版本控制系统)：\",\"BitBucket(hg/Git)\",\"GitHub(Git)\",\"Google Code(hg/Git/svn)\",\"Launchpad(bzr)\",\"版本控制系统可以选择你熟悉的或者本地使用的代码版本控制。Go 核心代码的仓库是使用 Mercurial(hg) 来控制的，所以它是一个最可能保证你可以得到开发者项目中最好的软件。Git 也很出名，同样也适用。如果你从未使用过版本控制，这些网站有一些很好的帮助并且你可以通过在谷歌搜索 \\\"{name} tutorial\\\"（name 为你想要使用的版本控制系统）得到许多很好的教程。\"]},\"637\":{\"h\":\"9.10 Go 的外部包和项目\",\"t\":[\"现在我们知道如何使用 Go 以及它的标准库了，但是 Go 的生态要比这大的多。当着手自己的 Go 项目时，最好先查找下是否有些存在的第三方的包或者项目能不能使用。大多数可以通过 go install 来进行安装。\",\"Go Walker 支持根据包名在海量数据中查询。\",\"目前已经有许多非常好的外部库，如：\",\"MySQL(GoMySQL), PostgreSQL(go-pgsql), MongoDB (mgo, gomongo), CouchDB (couch-go), ODBC (godbcl), Redis (redis.go) and SQLite3 (gosqlite) database drivers\",\"SDL bindings\",\"Google's Protocal Buffers(goprotobuf)\",\"XML-RPC(go-xmlrpc)\",\"Twitter(twitterstream)\",\"OAuth libraries(GoAuth)\"]},\"638\":{\"h\":\"9.11 在 Go 程序中使用外部库\",\"t\":[\"（本节我们将创建一个 Web 应用和它的 Google App Engine 版本，在第 19 和 21 章分别说明，当你阅读到这些章节时可以再回到这个例子。)\",\"当开始一个新项目或增加新的功能到现有的项目，你可以通过在应用程序中使用已经存在的库来节省开发时间。为了做到这一点，你必须理解库的 API（应用编程接口），那就是：库中有哪些方法可以调用，如何调用。你可能没有这个库的源代码，但作者肯定有记载的 API 以及详细介绍了如何使用它。\",\"作为一个例子，我们将使用谷歌的 API 的 urlshortener 编写一个小程序：你可以尝试一下在 http://goo.gl/ 输入一个像 \\\"http://www.destandaard.be\\\" 这样的 URL，你会看到一个像 \\\"http://goo.gl/O9SUO\\\" 这样更短的 URL 返回，也就是说，在 Twitter 之类的服务中这是非常容易嵌入的。谷歌 urlshortener 服务的文档可以在 \\\"http://code.google.com/apis/urlshortener/\\\" 找到。(第 19 章，我们将开发自己版本的 urlshortener)。\",\"谷歌将这项技术提供给其他开发者，我们可以在我们自己的应用程序中调用 API （释放到指定的限制）。他们也生成了一个 Go 语言客户端库使调用变得更容易。\",\"备注：谷歌让通过使用 Google API Go 客户端服务的开发者生活变得更简单，Go 客户端程序自动生成于 Google 库的 JSON 描述。更多详情在 项目页面 查看。\",\"下载并安装 Go 客户端库: 将通过 go install 实现。但是首先要验证环境变量中是否含有 GOPATH 变量，因为外部源码将被下载到 $GOPATH/src 目录下并被安装到 $GOPATH/PKG/\\\"machine_arch\\\"/ 目录下。\",\"我们将通过在终端调用以下命令来安装 API:\",\"go install google.golang.org/api/urlshortener/v1 \",\"go install 将下载源码，编译并安装包\",\"使用 urlshortener 服务的 web 程序: 现在我们可以通过导入并赋予别名来使用已安装的包：\",\"import \\\"google.golang.org/api/urlshortener/v1\\\" \",\"现在我们写一个 Web 应用（参见第 15 章 4-8 节）通过表单实现短地址和长地址的相互转换。我们将使用 template 包并写三个处理函数：root() 函数通过执行表单模板来展示表单，short() 函数将长地址转换为短地址，long() 函数逆向转换。\",\"要调用 urlshortener 接口必须先通过 http 包中的默认客户端创建一个服务实例 urlshortenerSvc：\",\"urlshortenerSvc, _ := urlshortener.New(http.DefaultClient) \",\"我们通过调用服务中的 Url.Insert 中的 Do 方法传入包含长地址的 Url 数据结构从而获取短地址：\",\"url, _ := urlshortenerSvc.Url.Insert(&urlshortener.Url{LongUrl: longUrl}).Do() \",\"返回 url 的 Id 便是我们需要的短地址。\",\"我们通过调用服务中的 Url.Get 中的 Do 方法传入包含短地址的 Url 数据结构从而获取长地址：\",\"url, error := urlshortenerSvc.Url.Get(shwortUrl).Do() \",\"返回的长地址便是转换前的原始地址。\",\"示例 9.9 urlshortener.go\",\"package main import ( \\\"fmt\\\" \\\"net/http\\\" \\\"text/template\\\" \\\"google.golang.org/api/urlshortener/v1\\\" ) func main() { http.HandleFunc(\\\"/\\\", root) http.HandleFunc(\\\"/short\\\", short) http.HandleFunc(\\\"/long\\\", long) http.ListenAndServe(\\\"localhost:8080\\\", nil) } // the template used to show the forms and the results web page to the user var rootHtmlTmpl = template.Must(template.New(\\\"rootHtml\\\").Parse(` <html><body> <h1>URL SHORTENER</h1> {{if .}}{{.}}<br /><br />{{end}} <form action=\\\"/short\\\" type=\\\"POST\\\"> Shorten this: <input type=\\\"text\\\" name=\\\"longUrl\\\" /> <input type=\\\"submit\\\" value=\\\"Give me the short URL\\\" /> </form> <br /> <form action=\\\"/long\\\" type=\\\"POST\\\"> Expand this: http://goo.gl/<input type=\\\"text\\\" name=\\\"shortUrl\\\" /> <input type=\\\"submit\\\" value=\\\"Give me the long URL\\\" /> </form> </body></html> `)) func root(w http.ResponseWriter, r *http.Request) { rootHtmlTmpl.Execute(w, nil) } func short(w http.ResponseWriter, r *http.Request) { longUrl := r.FormValue(\\\"longUrl\\\") urlshortenerSvc, _ := urlshortener.New(http.DefaultClient) url, _ := urlshortenerSvc.Url.Insert(&urlshortener.Url{LongUrl: longUrl,}).Do() rootHtmlTmpl.Execute(w, fmt.Sprintf(\\\"Shortened version of %s is : %s\\\", longUrl, url.Id)) } func long(w http.ResponseWriter, r *http.Request) { shortUrl := \\\"http://goo.gl/\\\" + r.FormValue(\\\"shortUrl\\\") urlshortenerSvc, _ := urlshortener.New(http.DefaultClient) url, err := urlshortenerSvc.Url.Get(shortUrl).Do() if err != nil { fmt.Println(\\\"error: %v\\\", err) return } rootHtmlTmpl.Execute(w, fmt.Sprintf(\\\"Longer version of %s is : %s\\\", shortUrl, url.LongUrl)) } \",\"执行这段代码：\",\"go run urlshortener.go \",\"通过浏览 http://localhost:8080/ 的页面来测试。\",\"为了代码的简洁我们并没有检测返回的错误状态，但是在真实的生产环境的应用中一定要做检测。\",\"将应用放入 Google App Engine，我们只需要在之前的代码中作出如下改变：\",\"package main -> package urlshort func main() -> func init() \",\"创建一个和包同名的目录 urlshort，并将以下两个安装目录复制到这个目录：\",\"google.golang.org/api/urlshortener google.golang.org/api/googleapi \",\"此外还要配置下配置文件 app.yaml，内容如下：\",\"application: urlshort version: 0-1-test runtime: go api_version: 3 handlers: - url: /.* script: _go_app \",\"现在你可以到你的项目目录并在终端运行：dev_appserver.py urlshort\",\"在浏览器打开你的 Web 应用：http://localhost:8080。\"]},\"639\":{\"h\":\"第 10 章：结构体 (struct) 与方法 (method)\",\"t\":[\"Go 通过类型别名 (alias types) 和结构体的形式支持用户自定义类型，或者叫定制类型。一个带属性的结构体试图表示一个现实世界中的实体。结构体是复合类型 (composite types)，当需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据，就好像它是一个独立实体的一部分。结构体也是值类型，因此可以通过 new 函数来创建。\",\"组成结构体类型的那些数据称为 字段 (fields)。每个字段都有一个类型和一个名字；在一个结构体中，字段名字必须是唯一的。\",\"结构体的概念在软件工程上旧的术语叫 ADT（抽象数据类型：Abstract Data Type），在一些老的编程语言中叫 记录 (Record)，比如 Cobol，在 C 家族的编程语言中它也存在，并且名字也是 struct，在面向对象的编程语言中，跟一个无方法的轻量级类一样。不过因为 Go 语言中没有类的概念，因此在 Go 中结构体有着更为重要的地位。\"]},\"640\":{\"h\":\"10.1 结构体定义\",\"t\":[\"结构体定义的一般方式如下：\",\"type identifier struct { field1 type1 field2 type2 ... } \",\"type T struct {a, b int} 也是合法的语法，它更适用于简单的结构体。\",\"结构体里的字段都有 名字，像 field1、field2 等，如果字段在代码中从来也不会被用到，那么可以命名它为 _。\",\"结构体的字段可以是任何类型，甚至是结构体本身（参考第 10.5 节），也可以是函数或者接口（参考第 11 章）。可以声明结构体类型的一个变量，然后像下面这样给它的字段赋值：\",\"var s T s.a = 5 s.b = 8 \",\"数组可以看作是一种结构体类型，不过它使用下标而不是具名的字段。\",\"使用 new()\",\"使用 new() 函数给一个新的结构体变量分配内存，它返回指向已分配内存的指针：var t *T = new(T)，如果需要可以把这条语句放在不同的行（比如定义是包范围的，但是分配却没有必要在开始就做）。\",\"var t *T t = new(T) \",\"写这条语句的惯用方法是：t := new(T)，变量 t 是一个指向 T 的指针，此时结构体字段的值是它们所属类型的零值。\",\"声明 var t T 也会给 t 分配内存，并零值化内存，但是这个时候 t 是类型 T 。在这两种方式中，t 通常被称做类型 T 的一个实例 (instance) 或对象 (object)。\",\"示例 10.1 structs_fields.go 给出了一个非常简单的例子：\",\"package main import \\\"fmt\\\" type struct1 struct { i1 int f1 float32 str string } func main() { ms := new(struct1) ms.i1 = 10 ms.f1 = 15.5 ms.str= \\\"Chris\\\" fmt.Printf(\\\"The int is: %d\\\\n\\\", ms.i1) fmt.Printf(\\\"The float is: %f\\\\n\\\", ms.f1) fmt.Printf(\\\"The string is: %s\\\\n\\\", ms.str) fmt.Println(ms) } \",\"输出：\",\"The int is: 10 The float is: 15.500000 The string is: Chris &{10 15.5 Chris} \",\"使用 fmt.Println() 打印一个结构体的默认输出可以很好的显示它的内容，类似使用 %v 选项。\",\"就像在面向对象语言所作的那样，可以使用点号符给字段赋值：structname.fieldname = value。\",\"同样的，使用点号符可以获取结构体字段的值：structname.fieldname。\",\"在 Go 语言中这叫 选择器 (selector)。无论变量是一个结构体类型还是一个结构体类型指针，都使用同样的 选择器符 (selector-notation) 来引用结构体的字段：\",\"type myStruct struct { i int } var v myStruct // v 是结构体类型变量 var p *myStruct // p 是指向一个结构体类型变量的指针 v.i p.i \",\"初始化一个结构体实例（一个结构体字面量：struct-literal）的更简短和惯用的方式如下：\",\" ms := &struct1{10, 15.5, \\\"Chris\\\"} // 此时 ms 的类型是 *struct1 \",\"或者：\",\" var ms struct1 ms = struct1{10, 15.5, \\\"Chris\\\"} \",\"混合字面量语法 (composite literal syntax) &struct1{a, b, c} 是一种简写，底层仍然会调用 new()，这里值的顺序必须按照字段顺序来写。在下面的例子中能看到可以通过在值的前面放上字段名来初始化字段的方式。表达式 new(Type) 和 &Type{} 是等价的。\",\"时间间隔（开始和结束时间以秒为单位）是使用结构体的一个典型例子：\",\"type Interval struct { start int end int } \",\"初始化方式：\",\"intr := Interval{0, 3} (A) intr := Interval{end:5, start:1} (B) intr := Interval{end:5} (C) \",\"在 (A) 中，值必须以字段在结构体定义时的顺序给出，& 不是必须的。(B) 显示了另一种方式，字段名加一个冒号放在值的前面，这种情况下值的顺序不必一致，并且某些字段还可以被忽略掉，就像 (C) 中那样。\",\"结构体类型和字段的命名遵循可见性规则（第 4.2 节），一个导出的结构体类型中有些字段是导出的，另一些不是，这是可能的。\",\"下图说明了结构体类型实例和一个指向它的指针的内存布局：\",\"type Point struct { x, y int } \",\"使用 new() 初始化：\",\"作为结构体字面量初始化：\",\"类型 struct1 在定义它的包 pack1 中必须是唯一的，它的完全类型名是：pack1.struct1。\",\"下面的例子 Listing 10.2—person.go 显示了一个结构体 Person，一个方法 upPerson()，方法有一个类型为 *Person 的参数（因此对象本身是可以被改变的），以及三种调用这个方法的不同方式：\",\"package main import ( \\\"fmt\\\" \\\"strings\\\" ) type Person struct { firstName string lastName string } func upPerson(p *Person) { p.firstName = strings.ToUpper(p.firstName) p.lastName = strings.ToUpper(p.lastName) } func main() { // 1-struct as a value type: var pers1 Person pers1.firstName = \\\"Chris\\\" pers1.lastName = \\\"Woodward\\\" upPerson(&pers1) fmt.Printf(\\\"The name of the person is %s %s\\\\n\\\", pers1.firstName, pers1.lastName) // 2—struct as a pointer: pers2 := new(Person) pers2.firstName = \\\"Chris\\\" pers2.lastName = \\\"Woodward\\\" (*pers2).lastName = \\\"Woodward\\\" // 这是合法的 upPerson(pers2) fmt.Printf(\\\"The name of the person is %s %s\\\\n\\\", pers2.firstName, pers2.lastName) // 3—struct as a literal: pers3 := &Person{\\\"Chris\\\",\\\"Woodward\\\"} upPerson(pers3) fmt.Printf(\\\"The name of the person is %s %s\\\\n\\\", pers3.firstName, pers3.lastName) } \",\"输出：\",\"The name of the person is CHRIS WOODWARD The name of the person is CHRIS WOODWARD The name of the person is CHRIS WOODWARD \",\"在上面例子的第二种情况中，可以直接通过指针，像 pers2.lastName = \\\"Woodward\\\" 这样给结构体字段赋值，没有像 C++ 中那样需要使用 -> 操作符，Go 会自动做这样的转换。\",\"注意也可以通过解指针的方式来设置值：(*pers2).lastName = \\\"Woodward\\\"\",\"结构体的内存布局\",\"Go 语言中，结构体和它所包含的数据在内存中是以连续块的形式存在的，即使结构体中嵌套有其他的结构体，这在性能上带来了很大的优势。不像 Java 中的引用类型，一个对象和它里面包含的对象可能会在不同的内存空间中，这点和 Go 语言中的指针很像。下面的例子清晰地说明了这些情况：\",\"type Rect1 struct {Min, Max Point } type Rect2 struct {Min, Max *Point } \",\"递归结构体\",\"结构体类型可以通过引用自身来定义。这在定义链表或二叉树的元素（通常叫节点）时特别有用，此时节点包含指向临近节点的链接（地址）。如下所示，链表中的 su，树中的 ri 和 le 分别是指向别的节点的指针。\",\"链表：\",\"这块的 data 字段用于存放有效数据（比如 float64），su 指针指向后继节点。\",\"Go 代码：\",\"type Node struct { data float64 su *Node } \",\"链表中的第一个元素叫 head，它指向第二个元素；最后一个元素叫 tail，它没有后继元素，所以它的 su 为 nil 值。当然真实的链接会有很多数据节点，并且链表可以动态增长或收缩。\",\"同样地可以定义一个双向链表，它有一个前趋节点 pr 和一个后继节点 su：\",\"type Node struct { pr *Node data float64 su *Node } \",\"二叉树：\",\"二叉树中每个节点最多能链接至两个节点：左节点 (le) 和右节点 (ri)，这两个节点本身又可以有左右节点，依次类推。树的顶层节点叫根节点 (root)，底层没有子节点的节点叫叶子节点 (leaves)，叶子节点的 le 和 ri 指针为 nil 值。在 Go 中可以如下定义二叉树：\",\"type Tree struct { le *Tree data float64 ri *Tree } \",\"结构体转换\",\"Go 中的类型转换遵循严格的规则。当为结构体定义了一个 alias 类型时，此结构体类型和它的 alias 类型都有相同的底层类型，它们可以如示例 10.3 那样互相转换，同时需要注意其中非法赋值或转换引起的编译错误。\",\"示例 10.3：\",\"package main import \\\"fmt\\\" type number struct { f float32 } type nr number // alias type func main() { a := number{5.0} b := nr{5.0} // var i float32 = b // compile-error: cannot use b (type nr) as type float32 in assignment // var i = float32(b) // compile-error: cannot convert b (type nr) to type float32 // var c number = b // compile-error: cannot use b (type nr) as type number in assignment // needs a conversion: var c = number(b) fmt.Println(a, b, c) } \",\"输出：\",\"{5} {5} {5} \",\"练习 10.1vcard.go：\",\"定义结构体 Address 和 VCard，后者包含一个人的名字、地址编号、出生日期和图像，试着选择正确的数据类型。构建一个自己的 vcard 并打印它的内容。\",\"提示： VCard 必须包含住址，它应该以值类型还是以指针类型放在 VCard 中呢？ 第二种会好点，因为它占用内存少。包含一个名字和两个指向地址的指针的 Address 结构体可以使用 %v 打印： {Kersschot 0x126d2b80 0x126d2be0} \",\"练习 10.2personex1.go：\",\"修改 personex1.go，使它的参数 upPerson 不是一个指针，解释下二者的区别。\",\"练习 10.3point.go：\",\"使用坐标 X、Y 定义一个二维 Point 结构体。同样地，对一个三维点使用它的极坐标定义一个 Polar 结构体。实现一个 Abs() 方法来计算一个 Point 表示的向量的长度，实现一个 Scale() 方法，它将点的坐标乘以一个尺度因子（提示：使用 math 包里的 Sqrt() 函数）(function Scale that multiplies the coordinates of a point with a scale factor)。\",\"练习 10.4rectangle.go：\",\"定义一个 Rectangle 结构体，它的长和宽是 int 类型，并定义方法 Area() 和 Perimeter()，然后进行测试。\"]},\"641\":{\"h\":\"10.2 使用工厂方法创建结构体实例\"},\"642\":{\"h\":\"10.2.1 结构体工厂\",\"t\":[\"Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现 “构造子工厂”方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以 new... 或 New... 开头。假设定义了如下的 File 结构体类型：\",\"type File struct { fd int // 文件描述符 name string // 文件名 } \",\"下面是这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针：\",\"func NewFile(fd int, name string) *File { if fd < 0 { return nil } return &File{fd, name} } \",\"然后这样调用它：\",\"f := NewFile(10, \\\"./test.txt\\\") \",\"在 Go 语言中常常像上面这样在工厂方法里使用初始化来简便的实现构造函数。\",\"如果 File 是一个结构体类型，那么表达式 new(File) 和 &File{} 是等价的。\",\"这可以和大多数面向对象编程语言中笨拙的初始化方式做个比较：File f = new File(...)。\",\"我们可以说是工厂实例化了类型的一个对象，就像在基于类的 OO 语言中那样。\",\"如果想知道结构体类型 T 的一个实例占用了多少内存，可以使用：size := unsafe.Sizeof(T{})。\",\"如何强制使用工厂方法\",\"通过应用可见性规则参考 4.2.1 节、9.5 节 就可以禁止使用 new() 函数，强制用户使用工厂方法，从而使类型变成私有的，就像在面向对象语言中那样。\",\"type matrix struct { ... } func NewMatrix(params) *matrix { m := new(matrix) // 初始化 m return m } \",\"在其他包里使用工厂方法：\",\"package main import \\\"matrix\\\" ... wrong := new(matrix.matrix) // 编译失败（matrix 是私有的） right := matrix.NewMatrix(...) // 实例化 matrix 的唯一方式 \"]},\"643\":{\"h\":\"10.2.2 map 和 struct vs new() 和 make()\",\"t\":[\"new() 和 make() 这两个内置函数已经在第 7.2.4 节通过切片的例子说明过一次。\",\"现在为止我们已经见到了可以使用 make() 的三种类型中的其中两个：\",\"slices / maps / channels（见第 14 章） \",\"下面的例子说明了在映射上使用 new() 和 make() 的区别以及可能发生的错误：\",\"示例 10.4 new_make.go（不能编译）\",\"package main type Foo map[string]string type Bar struct { thingOne string thingTwo int } func main() { // OK y := new(Bar) (*y).thingOne = \\\"hello\\\" (*y).thingTwo = 1 // NOT OK z := make(Bar) // 编译错误：cannot make type Bar (*z).thingOne = \\\"hello\\\" (*z).thingTwo = 1 // OK x := make(Foo) x[\\\"x\\\"] = \\\"goodbye\\\" x[\\\"y\\\"] = \\\"world\\\" // NOT OK u := new(Foo) (*u)[\\\"x\\\"] = \\\"goodbye\\\" // 运行时错误!! panic: assignment to entry in nil map (*u)[\\\"y\\\"] = \\\"world\\\" } \",\"试图 make() 一个结构体变量，会引发一个编译错误，这还不是太糟糕，但是 new() 一个 map 并试图向其填充数据，将会引发运行时错误！ 因为 new(Foo) 返回的是一个指向 nil 的指针，它尚未被分配内存。所以在使用 map 时要特别谨慎。\"]},\"644\":{\"h\":\"10.3 使用自定义包中的结构体\",\"t\":[\"下面的例子中，main.go 使用了一个结构体，它来自 struct_pack 下的包 structPack。\",\"示例 10.5 structPack.go：\",\"package structPack type ExpStruct struct { Mi1 int Mf1 float32 } \",\"示例 10.6 main.go：\",\"package main import ( \\\"fmt\\\" \\\"./struct_pack/structPack\\\" ) func main() { struct1 := new(structPack.ExpStruct) struct1.Mi1 = 10 struct1.Mf1 = 16. fmt.Printf(\\\"Mi1 = %d\\\\n\\\", struct1.Mi1) fmt.Printf(\\\"Mf1 = %f\\\\n\\\", struct1.Mf1) } \",\"输出：\",\"Mi1 = 10 Mf1 = 16.000000 \"]},\"645\":{\"h\":\"10.4 带标签的结构体\",\"t\":[\"结构体中的字段除了有名字和类型外，还可以有一个可选的标签 (tag)：它是一个附属于字段的字符串，可以是文档或其他的重要标记。标签的内容不可以在一般的编程中使用，只有包 reflect 能获取它。我们将在下一章（第 11.10 节中深入的探讨 reflect 包，它可以在运行时自省类型、属性和方法，比如：在一个变量上调用 reflect.TypeOf() 可以获取变量的正确类型，如果变量是一个结构体类型，就可以通过 Field 来索引结构体的字段，然后就可以使用 Tag 属性。\",\"示例 10.7 struct_tag.go：\",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) type TagType struct { // tags field1 bool \\\"An important answer\\\" field2 string \\\"The name of the thing\\\" field3 int \\\"How much there are\\\" } func main() { tt := TagType{true, \\\"Barak Obama\\\", 1} for i := 0; i < 3; i++ { refTag(tt, i) } } func refTag(tt TagType, ix int) { ttType := reflect.TypeOf(tt) ixField := ttType.Field(ix) fmt.Printf(\\\"%v\\\\n\\\", ixField.Tag) } \",\"输出：\",\"An important answer The name of the thing How much there are \"]},\"646\":{\"h\":\"10.5 匿名字段和内嵌结构体\"},\"647\":{\"h\":\"10.5.1 定义\",\"t\":[\"结构体可以包含一个或多个 匿名（或内嵌）字段，即这些字段没有显式的名字，只有字段的类型是必须的，此时类型就是字段的名字。匿名字段本身可以是一个结构体类型，即 结构体可以包含内嵌结构体。\",\"可以粗略地将这个和面向对象语言中的继承概念相比较，随后将会看到它被用来模拟类似继承的行为。Go 语言中的继承是通过内嵌或组合来实现的，所以可以说，在 Go 语言中，相比较于继承，组合更受青睐。\",\"考虑如下的程序：\",\"示例 10.8 structs_anonymous_fields.go：\",\"package main import \\\"fmt\\\" type innerS struct { in1 int in2 int } type outerS struct { b int c float32 int // anonymous field innerS //anonymous field } func main() { outer := new(outerS) outer.b = 6 outer.c = 7.5 outer.int = 60 outer.in1 = 5 outer.in2 = 10 fmt.Printf(\\\"outer.b is: %d\\\\n\\\", outer.b) fmt.Printf(\\\"outer.c is: %f\\\\n\\\", outer.c) fmt.Printf(\\\"outer.int is: %d\\\\n\\\", outer.int) fmt.Printf(\\\"outer.in1 is: %d\\\\n\\\", outer.in1) fmt.Printf(\\\"outer.in2 is: %d\\\\n\\\", outer.in2) // 使用结构体字面量 outer2 := outerS{6, 7.5, 60, innerS{5, 10}} fmt.Println(\\\"outer2 is:\\\", outer2) } \",\"输出：\",\"outer.b is: 6 outer.c is: 7.500000 outer.int is: 60 outer.in1 is: 5 outer.in2 is: 10 outer2 is:{6 7.5 60 {5 10}} \",\"通过类型 outer.int 的名字来获取存储在匿名字段中的数据，于是可以得出一个结论：在一个结构体中对于每一种数据类型只能有一个匿名字段。\"]},\"648\":{\"h\":\"10.5.2 内嵌结构体\",\"t\":[\"同样地结构体也是一种数据类型，所以它也可以作为一个匿名字段来使用，如同上面例子中那样。外层结构体通过 outer.in1 直接进入内层结构体的字段，内嵌结构体甚至可以来自其他包。内层结构体被简单的插入或者内嵌进外层结构体。这个简单的“继承”机制提供了一种方式，使得可以从另外一个或一些类型继承部分或全部实现。\",\"另外一个例子：\",\"示例 10.9 embedd_struct.go：\",\"package main import \\\"fmt\\\" type A struct { ax, ay int } type B struct { A bx, by float32 } func main() { b := B{A{1, 2}, 3.0, 4.0} fmt.Println(b.ax, b.ay, b.bx, b.by) fmt.Println(b.A) } \",\"输出：\",\"1 2 3 4 {1 2} \",\"练习 10.5anonymous_struct.go：\",\"创建一个结构体，它有一个具名的 float32 字段，2 个匿名字段，类型分别是 int 和 string。通过结构体字面量新建一个结构体实例并打印它的内容。\"]},\"649\":{\"h\":\"10.5.3 命名冲突\",\"t\":[\"当两个字段拥有相同的名字（可能是继承来的名字）时该怎么办呢？\",\"外层名字会覆盖内层名字（但是两者的内存空间都保留），这提供了一种重载字段或方法的方式；\",\"如果相同的名字在同一级别出现了两次，如果这个名字被程序使用了，将会引发一个错误（不使用没关系）。没有办法来解决这种问题引起的二义性，必须由程序员自己修正。\",\"例子：\",\"type A struct {a int} type B struct {a, b int} type C struct {A; B} var c C \",\"规则 2：使用 c.a 是错误的，到底是 c.A.a 还是 c.B.a 呢？会导致编译器错误：ambiguous DOT reference c.a disambiguate with either c.A.a or c.B.a。\",\"type D struct {B; b float32} var d D \",\"规则 1：使用 d.b 是没问题的：它是 float32，而不是 B 的 b。如果想要内层的 b 可以通过 d.B.b 得到。\"]},\"650\":{\"h\":\"10.6 方法\"},\"651\":{\"h\":\"10.6.1 方法是什么\",\"t\":[\"在 Go 语言中，结构体就像是类的一种简化形式，那么面向对象程序员可能会问：类的方法在哪里呢？在 Go 中有一个概念，它和方法有着同样的名字，并且大体上意思相同：Go 方法是作用在接收者 (receiver) 上的一个函数，接收者是某种类型的变量。因此方法是一种特殊类型的函数。\",\"接收者类型可以是（几乎）任何类型，不仅仅是结构体类型：任何类型都可以有方法，甚至可以是函数类型，可以是 int、bool、string 或数组的别名类型。但是接收者不能是一个接口类型（参考第 11 章），因为接口是一个抽象定义，但是方法却是具体实现；如果这样做会引发一个编译错误：invalid receiver type...。\",\"最后接收者不能是一个指针类型，但是它可以是任何其他允许类型的指针。\",\"一个类型加上它的方法等价于面向对象中的一个类。一个重要的区别是：在 Go 中，类型的代码和绑定在它上面的方法的代码可以不放置在一起，它们可以存在在不同的源文件，唯一的要求是：它们必须是同一个包的。\",\"类型 T（或 *T）上的所有方法的集合叫做类型 T（或 *T）的方法集 (method set)。\",\"因为方法是函数，所以同样的，不允许方法重载，即对于一个类型只能有一个给定名称的方法。但是如果基于接收者类型，是有重载的：具有同样名字的方法可以在 2 个或多个不同的接收者类型上存在，比如在同一个包里这么做是允许的：\",\"func (a *denseMatrix) Add(b Matrix) Matrix func (a *sparseMatrix) Add(b Matrix) Matrix \",\"别名类型没有原始类型上已经定义过的方法。\",\"定义方法的一般格式如下：\",\"func (recv receiver_type) methodName(parameter_list) (return_value_list) { ... } \",\"在方法名之前，func 关键字之后的括号中指定 receiver。\",\"如果 recv 是 receiver 的实例，Method1 是它的方法名，那么方法调用遵循传统的 object.name 选择器符号：recv.Method1()。\",\"如果 recv 是一个指针，Go 会自动解引用。\",\"如果方法不需要使用 recv 的值，可以用 _ 替换它，比如：\",\"func (_ receiver_type) methodName(parameter_list) (return_value_list) { ... } \",\"recv 就像是面向对象语言中的 this 或 self，但是 Go 中并没有这两个关键字。随个人喜好，你可以使用 this 或 self 作为 receiver 的名字。下面是一个结构体上的简单方法的例子：\",\"示例 10.10 method1 .go：\",\"package main import \\\"fmt\\\" type TwoInts struct { a int b int } func main() { two1 := new(TwoInts) two1.a = 12 two1.b = 10 fmt.Printf(\\\"The sum is: %d\\\\n\\\", two1.AddThem()) fmt.Printf(\\\"Add them to the param: %d\\\\n\\\", two1.AddToParam(20)) two2 := TwoInts{3, 4} fmt.Printf(\\\"The sum is: %d\\\\n\\\", two2.AddThem()) } func (tn *TwoInts) AddThem() int { return tn.a + tn.b } func (tn *TwoInts) AddToParam(param int) int { return tn.a + tn.b + param } \",\"输出：\",\"The sum is: 22 Add them to the param: 42 The sum is: 7 \",\"下面是非结构体类型上方法的例子：\",\"示例 10.11 method2.go：\",\"package main import \\\"fmt\\\" type IntVector []int func (v IntVector) Sum() (s int) { for _, x := range v { s += x } return } func main() { fmt.Println(IntVector{1, 2, 3}.Sum()) // 输出是6 } \",\"练习 10.6employee_salary.go\",\"定义结构体 employee，它有一个 salary 字段，给这个结构体定义一个方法 giveRaise 来按照指定的百分比增加薪水。\",\"练习 10.7iteration_list.go\",\"下面这段代码有什么错？\",\"package main import \\\"container/list\\\" func (p *list.List) Iter() { // ... } func main() { lst := new(list.List) for _= range lst.Iter() { } } \",\"类型和作用在它上面定义的方法必须在同一个包里定义，这就是为什么不能在 int、float32(64) 或类似这些的类型上定义方法。试图在 int 类型上定义方法会得到一个编译错误：\",\"cannot define new methods on non-local type int \",\"比如想在 time.Time 上定义如下方法：\",\"func (t time.Time) first3Chars() string { return time.LocalTime().String()[0:3] } \",\"类型在其他的，或是非本地的包里定义，在它上面定义方法都会得到和上面同样的错误。\",\"但是有一个间接的方式：可以先定义该类型（比如：int 或 float32(64)）的别名类型，然后再为别名类型定义方法。或者像下面这样将它作为匿名类型嵌入在一个新的结构体中。当然方法只在这个别名类型上有效。\",\"示例 10.12 method_on_time.go：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) type myTime struct { time.Time //anonymous field } func (t myTime) first3Chars() string { return t.Time.String()[0:3] } func main() { m := myTime{time.Now()} // 调用匿名 Time 上的 String 方法 fmt.Println(\\\"Full time now:\\\", m.String()) // 调用 myTime.first3Chars fmt.Println(\\\"First 3 chars:\\\", m.first3Chars()) } /* Output: Full time now: Mon Oct 24 15:34:54 Romance Daylight Time 2011 First 3 chars: Mon */ \"]},\"652\":{\"h\":\"10.6.2 函数和方法的区别\",\"t\":[\"函数将变量作为参数：Function1(recv)\",\"方法在变量上被调用：recv.Method1()\",\"在接收者是指针时，方法可以改变接收者的值（或状态），这点函数也可以做到（当参数作为指针传递，即通过引用调用时，函数也可以改变参数的状态）。\",\"不要忘记 Method1() 后边的括号 ()，否则会引发编译器错误：method recv.Method1 is not an expression, must be called\",\"接收者必须有一个显式的名字，这个名字必须在方法中被使用。\",\"receiver_type 叫做 （接收者）基本类型，这个类型必须在和方法同样的包中被声明。\",\"在 Go 中，（接收者）类型关联的方法不写在类型结构里面，就像类那样；耦合更加宽松；类型和方法之间的关联由接收者来建立。\",\"方法没有和数据定义（结构体）混在一起：它们是正交的类型；表示（数据）和行为（方法）是独立的。\"]},\"653\":{\"h\":\"10.6.3 指针或值作为接收者\",\"t\":[\"鉴于性能的原因，recv 最常见的是一个指向 receiver_type 的指针（因为我们不想要一个实例的拷贝，如果按值调用的话就会是这样），特别是在 receiver 类型是结构体时，就更是如此了。\",\"如果想要方法改变接收者的数据，就在接收者的指针类型上定义该方法。否则，就在普通的值类型上定义方法。\",\"下面的例子 pointer_value.go 作了说明：change()接受一个指向 B 的指针，并改变它内部的成员；write() 通过拷贝接受 B 的值并只输出 B 的内容。注意 Go 为我们做了探测工作，我们自己并没有指出是否在指针上调用方法，Go 替我们做了这些事情。b1 是值而 b2 是指针，方法都支持运行了。\",\"示例 10.13 pointer_value.go：\",\"package main import ( \\\"fmt\\\" ) type B struct { thing int } func (b *B) change() { b.thing = 1 } func (b B) write() string { return fmt.Sprint(b) } func main() { var b1 B // b1 是值 b1.change() fmt.Println(b1.write()) b2 := new(B) // b2 是指针 b2.change() fmt.Println(b2.write()) } /* 输出： {1} {1} */ \",\"试着在 write() 中改变接收者 b 的值：将会看到它可以正常编译，但是开始的 b 没有被改变。\",\"我们知道方法将指针作为接收者不是必须的，如下面的例子，我们只是需要 Point3 的值来做计算：\",\"type Point3 struct { x, y, z float64 } // A method on Point3 func (p Point3) Abs() float64 { return math.Sqrt(p.x*p.x + p.y*p.y + p.z*p.z) } \",\"这样做稍微有点昂贵，因为 Point3 是作为值传递给方法的，因此传递的是它的拷贝，这在 Go 中是合法的。也可以在指向这个类型的指针上调用此方法（会自动解引用）。\",\"假设 p3 定义为一个指针：p3 := &Point{ 3, 4, 5}。\",\"可以使用 p3.Abs() 来替代 (*p3).Abs()。\",\"像例子 10.10 (method1.go) 中接收者类型是 *TwoInts 的方法 AddThem()，它能在类型 TwoInts 的值上被调用，这是自动间接发生的。\",\"因此 two2.AddThem 可以替代 (&two2).AddThem()。\",\"在值和指针上调用方法：\",\"可以有连接到类型的方法，也可以有连接到类型指针的方法。\",\"但是这没关系：对于类型 T，如果在 \\\\*T 上存在方法 Meth()，并且 t 是这个类型的变量，那么 t.Meth() 会被自动转换为 (&t).Meth()。\",\"指针方法和值方法都可以在指针或非指针上被调用，如下面程序所示，类型 List 在值上有一个方法 Len()，在指针上有一个方法 Append()，但是可以看到两个方法都可以在两种类型的变量上被调用。\",\"示例 10.14 methodset1.go：\",\"package main import ( \\\"fmt\\\" ) type List []int func (l List) Len() int { return len(l) } func (l *List) Append(val int) { *l = append(*l, val) } func main() { // 值 var lst List lst.Append(1) fmt.Printf(\\\"%v (len: %d)\\\", lst, lst.Len()) // [1] (len: 1) // 指针 plst := new(List) plst.Append(2) fmt.Printf(\\\"%v (len: %d)\\\", plst, plst.Len()) // &[2] (len: 1) } \"]},\"654\":{\"h\":\"10.6.4 方法和未导出字段\",\"t\":[\"考虑 person2.go 中的 person 包：类型 Person 被明确的导出了，但是它的字段没有被导出。例如在 use_person2.go 中 p.firstName 就是错误的。该如何在另一个程序中修改或者只是读取一个 Person 的名字呢？\",\"这可以通过面向对象语言一个众所周知的技术来完成：提供 getter() 和 setter() 方法。对于 setter() 方法使用 Set... 前缀，对于 getter() 方法只使用成员名。\",\"示例 10.15 person2.go：\",\"package person type Person struct { firstName string lastName string } func (p *Person) FirstName() string { return p.firstName } func (p *Person) SetFirstName(newName string) { p.firstName = newName } \",\"示例 10.16 use_person2.go：\",\"package main import ( \\\"./person\\\" \\\"fmt\\\" ) func main() { p := new(person.Person) // p.firstName undefined // (cannot refer to unexported field or method firstName) // p.firstName = \\\"Eric\\\" p.SetFirstName(\\\"Eric\\\") fmt.Println(p.FirstName()) // Output: Eric } \",\"并发访问对象\",\"对象的字段（属性）不应该由 2 个或 2 个以上的不同线程在同一时间去改变。如果在程序发生这种情况，为了安全并发访问，可以使用包 sync（参考第 9.3 节中的方法。在第 14.17 节中我们会通过 goroutines 和 channels 探索另一种方式。\"]},\"655\":{\"h\":\"10.6.5 内嵌类型的方法和继承\",\"t\":[\"当一个匿名类型被内嵌在结构体中时，匿名类型的可见方法也同样被内嵌，这在效果上等同于外层类型 继承 了这些方法：将父类型放在子类型中来实现亚型。这个机制提供了一种简单的方式来模拟经典面向对象语言中的子类和继承相关的效果，也类似 Ruby 中的混入 (mixin)。\",\"下面是一个示例（可以在练习 10.8 中进一步学习）：假定有一个 Engine 接口类型，一个 Car 结构体类型，它包含一个 Engine 类型的匿名字段：\",\"type Engine interface { Start() Stop() } type Car struct { Engine } \",\"我们可以构建如下的代码：\",\"func (c *Car) GoToWorkIn() { // get in car c.Start() // drive to work c.Stop() // get out of car } \",\"下面是 method3.go 的完整例子，它展示了内嵌结构体上的方法可以直接在外层类型的实例上调用：\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) type Point struct { x, y float64 } func (p *Point) Abs() float64 { return math.Sqrt(p.x*p.x + p.y*p.y) } type NamedPoint struct { Point name string } func main() { n := &NamedPoint{Point{3, 4}, \\\"Pythagoras\\\"} fmt.Println(n.Abs()) // 打印 5 } \",\"内嵌将一个已存在类型的字段和方法注入到了另一个类型里：匿名字段上的方法“晋升”成为了外层类型的方法。当然类型可以有只作用于本身实例而不作用于内嵌“父”类型上的方法。\",\"可以覆写方法（像字段一样）：和内嵌类型方法具有同样名字的外层类型的方法会覆写内嵌类型对应的方法。\",\"在示例 10.18 method4.go 中添加：\",\"func (n *NamedPoint) Abs() float64 { return n.Point.Abs() * 100. } \",\"现在 fmt.Println(n.Abs()) 会打印 500。\",\"因为一个结构体可以嵌入多个匿名类型，所以实际上我们可以有一个简单版本的多重继承，就像：type Child struct { Father; Mother}。在第 10.6.7 节中会进一步讨论这个问题。\",\"结构体内嵌和自己在同一个包中的结构体时，可以彼此访问对方所有的字段和方法。\",\"练习 10.8inheritance_car.go\",\"创建一个上面 Car 和 Engine 可运行的例子，并且给 Car 类型一个 wheelCount 字段和一个 numberOfWheels() 方法。\",\"创建一个 Mercedes 类型，它内嵌 Car，并新建 Mercedes 的一个实例，然后调用它的方法。\",\"然后仅在 Mercedes 类型上创建方法 sayHiToMerkel() 并调用它。\"]},\"656\":{\"h\":\"10.6.6 如何在类型中嵌入功能\",\"t\":[\"主要有两种方法来实现在类型中嵌入功能：\",\"A：聚合（或组合）：包含一个所需功能类型的具名字段。\",\"B：内嵌：内嵌（匿名地）所需功能类型，像前一节 10.6.5 所演示的那样。\",\"为了使这些概念具体化，假设有一个 Customer 类型，我们想让它通过 Log 类型来包含日志功能，Log 类型只是简单地包含一个累积的消息（当然它可以是复杂的）。如果想让特定类型都具备日志功能，你可以实现一个这样的 Log 类型，然后将它作为特定类型的一个字段，并提供 Log()，它返回这个日志的引用。\",\"方式 A 可以通过如下方法实现（使用了第 10.7 节中的 String() 功能）：\",\"示例 10.19 embed_func1.go：\",\"package main import ( \\\"fmt\\\" ) type Log struct { msg string } type Customer struct { Name string log *Log } func main() { c := new(Customer) c.Name = \\\"Barak Obama\\\" c.log = new(Log) c.log.msg = \\\"1 - Yes we can!\\\" // shorter c = &Customer{\\\"Barak Obama\\\", &Log{\\\"1 - Yes we can!\\\"}} // fmt.Println(c) &{Barak Obama 1 - Yes we can!} c.Log().Add(\\\"2 - After me the world will be a better place!\\\") //fmt.Println(c.log) fmt.Println(c.Log()) } func (l *Log) Add(s string) { l.msg += \\\"\\\\n\\\" + s } func (l *Log) String() string { return l.msg } func (c *Customer) Log() *Log { return c.log } \",\"输出：\",\"1 - Yes we can! 2 - After me the world will be a better place! \",\"相对的方式 B 可能会像这样 (embed_func2.go)：\",\"package main import ( \\\"fmt\\\" ) type Log struct { msg string } type Customer struct { Name string Log } func main() { c := &Customer{\\\"Barak Obama\\\", Log{\\\"1 - Yes we can!\\\"}} c.Add(\\\"2 - After me the world will be a better place!\\\") fmt.Println(c) } func (l *Log) Add(s string) { l.msg += \\\"\\\\n\\\" + s } func (l *Log) String() string { return l.msg } func (c *Customer) String() string { return c.Name + \\\"\\\\nLog:\\\" + fmt.Sprintln(c.Log.String()) } \",\"输出：\",\"Barak Obama Log:1 - Yes we can! 2 - After me the world will be a better place! \",\"内嵌的类型不需要指针，Customer 也不需要 Add 方法，它使用 Log 的 Add 方法，Customer 有自己的 String 方法，并且在它里面调用了 Log 的 String 方法。\",\"如果内嵌类型嵌入了其他类型，也是可以的，那些类型的方法可以直接在外层类型中使用。\",\"因此一个好的策略是创建一些小的、可复用的类型作为一个工具箱，用于组成域类型。\"]},\"657\":{\"h\":\"10.6.7 多重继承\",\"t\":[\"多重继承指的是类型获得多个父类型行为的能力，它在传统的面向对象语言中通常是不被实现的（C++ 和 Python 例外）。因为在类继承层次中，多重继承会给编译器引入额外的复杂度。但是在 Go 语言中，通过在类型中嵌入所有必要的父类型，可以很简单的实现多重继承。\",\"作为一个例子，假设有一个类型 CameraPhone，通过它可以 Call()，也可以 TakeAPicture()，但是第一个方法属于类型 Phone，第二个方法属于类型 Camera。\",\"只要嵌入这两个类型就可以解决这个问题，如下所示 (mult_inheritance.go)：\",\"package main import ( \\\"fmt\\\" ) type Camera struct{} func (c *Camera) TakeAPicture() string { return \\\"Click\\\" } type Phone struct{} func (p *Phone) Call() string { return \\\"Ring Ring\\\" } type CameraPhone struct { Camera Phone } func main() { cp := new(CameraPhone) fmt.Println(\\\"Our new CameraPhone exhibits multiple behaviors...\\\") fmt.Println(\\\"It exhibits behavior of a Camera: \\\", cp.TakeAPicture()) fmt.Println(\\\"It works like a Phone too: \\\", cp.Call()) } \",\"输出：\",\"Our new CameraPhone exhibits multiple behaviors... It exhibits behavior of a Camera: Click It works like a Phone too: Ring Ring \",\"练习 10.9point_methods.go：\",\"从 point.go 开始（第 10.1 节的练习）：使用方法来实现 Abs() 和 Scale()函数，Point 作为方法的接收者类型。也为 Point3 和 Polar 实现 Abs() 方法。完成了 point.go 中同样的事情，只是这次通过方法。\",\"练习 10.10inherit_methods.go：\",\"定义一个结构体类型 Base，它包含一个字段 id，方法 Id() 返回 id，方法 SetId() 修改 id。结构体类型 Person 包含 Base，及 FirstName 和 LastName 字段。结构体类型 Employee 包含一个 Person 和 salary 字段。\",\"创建一个 employee 实例，然后显示它的 id。\",\"练习 10.11magic.go：\",\"首先预测一下下面程序的结果，然后动手实验下：\",\"package main import ( \\\"fmt\\\" ) type Base struct{} func (Base) Magic() { fmt.Println(\\\"base magic\\\") } func (self Base) MoreMagic() { self.Magic() self.Magic() } type Voodoo struct { Base } func (Voodoo) Magic() { fmt.Println(\\\"voodoo magic\\\") } func main() { v := new(Voodoo) v.Magic() v.MoreMagic() } \"]},\"658\":{\"h\":\"10.6.8 通用方法和方法命名\",\"t\":[\"在编程中一些基本操作会一遍又一遍的出现，比如打开 (Open)、关闭 (Close)、读 (Read)、写 (Write)、排序(Sort) 等等，并且它们都有一个大致的意思：打开 (Open)可以作用于一个文件、一个网络连接、一个数据库连接等等。具体的实现可能千差万别，但是基本的概念是一致的。在 Go 语言中，通过使用接口（参考第 11 章），标准库广泛的应用了这些规则，在标准库中这些通用方法都有一致的名字，比如 Open()、Read()、Write()等。想写规范的 Go 程序，就应该遵守这些约定，给方法合适的名字和签名，就像那些通用方法那样。这样做会使 Go 开发的软件更加具有一致性和可读性。比如：如果需要一个 convert-to-string() 方法，应该命名为 String()，而不是 ToString()（参考第 10.7 节）。\"]},\"659\":{\"h\":\"10.6.9 和其他面向对象语言比较 Go 的类型和方法\",\"t\":[\"在如 C++、Java、C# 和 Ruby 这样的面向对象语言中，方法在类的上下文中被定义和继承：在一个对象上调用方法时，运行时会检测类以及它的超类中是否有此方法的定义，如果没有会导致异常发生。\",\"在 Go 语言中，这样的继承层次是完全没必要的：如果方法在此类型定义了，就可以调用它，和其他类型上是否存在这个方法没有关系。在这个意义上，Go 具有更大的灵活性。\",\"下面的模式就很好的说明了这个问题：\",\"Go 不需要一个显式的类定义，如同 Java、C++、C# 等那样，相反地，“类”是通过提供一组作用于一个共同类型的方法集来隐式定义的。类型可以是结构体或者任何用户自定义类型。\",\"比如：我们想定义自己的 Integer 类型，并添加一些类似转换成字符串的方法，在 Go 中可以如下定义：\",\"type Integer int func (i *Integer) String() string { return strconv.Itoa(int(*i)) } \",\"在 Java 或 C# 中，这个方法需要和类 Integer 的定义放在一起，在 Ruby 中可以直接在基本类型 int 上定义这个方法。\",\"总结\",\"在 Go 中，类型就是类（数据和关联的方法）。Go 不知道类似面向对象语言的类继承的概念。继承有两个好处：代码复用和多态。\",\"在 Go 中，代码复用通过组合和委托实现，多态通过接口的使用来实现：有时这也叫 组件编程 (Component Programming)。\",\"许多开发者说相比于类继承，Go 的接口提供了更强大、却更简单的多态行为。\",\"备注\",\"如果真的需要更多面向对象的能力，看一下 goop 包 (Go Object-Oriented Programming)，它由 Scott Pakin 编写: 它给 Go 提供了 JavaScript 风格的对象（基于原型的对象），并且支持多重继承和类型独立分派，通过它可以实现你喜欢的其他编程语言里的一些结构。\",\"问题 10.1\",\"我们在某个类型的变量上使用点号调用一个方法：variable.method()，在使用 Go 以前，在哪儿碰到过面向对象的点号？\",\"问题 10.2\",\"a）假设定义： type Integer int，完成 get() 方法的方法体: func (p Integer) get() int { ... }。\",\"b）定义： func f(i int) {}; var v Integer ，如何就 v 作为参数调用 f？\",\"c）假设 Integer 定义为 type Integer struct {n int}，完成 get() 方法的方法体：func (p Integer) get() int { ... }。\",\"d）对于新定义的 Integer，和 b）中同样的问题。\"]},\"660\":{\"h\":\"10.7 类型的 String() 方法和格式化描述符\",\"t\":[\"当定义了一个有很多方法的类型时，十之八九你会使用 String() 方法来定制类型的字符串形式的输出，换句话说：一种可阅读性和打印性的输出。如果类型定义了 String() 方法，它会被用在 fmt.Printf() 中生成默认的输出：等同于使用格式化描述符 %v 产生的输出。还有 fmt.Print() 和 fmt.Println() 也会自动使用 String() 方法。\",\"我们使用第 10.4 节中程序的类型来进行测试：\",\"示例 10.22 method_string.go：\",\"package main import ( \\\"fmt\\\" \\\"strconv\\\" ) type TwoInts struct { a int b int } func main() { two1 := new(TwoInts) two1.a = 12 two1.b = 10 fmt.Printf(\\\"two1 is: %v\\\\n\\\", two1) fmt.Println(\\\"two1 is:\\\", two1) fmt.Printf(\\\"two1 is: %T\\\\n\\\", two1) fmt.Printf(\\\"two1 is: %#v\\\\n\\\", two1) } func (tn *TwoInts) String() string { return \\\"(\\\" + strconv.Itoa(tn.a) + \\\"/\\\" + strconv.Itoa(tn.b) + \\\")\\\" } \",\"输出：\",\"two1 is: (12/10) two1 is: (12/10) two1 is: *main.TwoInts two1 is: &main.TwoInts{a:12, b:10} \",\"当你广泛使用一个自定义类型时，最好为它定义 String()方法。从上面的例子也可以看到，格式化描述符 %T 会给出类型的完全规格，%#v 会给出实例的完整输出，包括它的字段（在程序自动生成 Go 代码时也很有用）。\",\"备注\",\"不要在 String() 方法里面调用涉及 String() 方法的方法，它会导致意料之外的错误，比如下面的例子，它导致了一个无限递归调用（TT.String() 调用 fmt.Sprintf，而 fmt.Sprintf 又会反过来调用 TT.String()），很快就会导致内存溢出：\",\"type TT float64 func (t TT) String() string { return fmt.Sprintf(\\\"%v\\\", t) } t.String() \",\"练习 10.12type_string.go\",\"给定结构体类型 T:\",\"type T struct { a int b float32 c string } \",\"值 t: t := &T{7, -2.35, \\\"abc\\\\tdef\\\"}。给 T 定义 String()，使得 fmt.Printf(\\\"%v\\\\n\\\", t) 输出：7 / -2.350000 / \\\"abc\\\\tdef\\\"。\",\"练习 10.13celsius.go\",\"为 float64 定义一个别名类型 Celsius，并给它定义 String()，它输出一个十进制数和 °C 表示的温度值。\",\"练习 10.14days.go\",\"为 int 定义一个别名类型 Day，定义一个字符串数组它包含一周七天的名字，为类型 Day 定义 String() 方法，它输出星期几的名字。使用 iota 定义一个枚举常量用于表示一周的中每天（MO、TU...）。\",\"练习 10.15timezones.go\",\"为 int 定义别名类型 TZ，定义一些常量表示时区，比如 UTC，定义一个 map，它将时区的缩写映射为它的全称，比如：UTC -> \\\"Universal Greenwich time\\\"。为类型 TZ 定义 String() 方法，它输出时区的全称。\",\"练习 10.16stack_arr.go / stack_struct.go\",\"实现栈 (stack) 数据结构：\",\"它的格子包含数据，比如整数 i、j、k 和 l 等等，格子从底部（索引 0）至顶部（索引 n）来索引。这个例子中假定 n = 3，那么一共有 4 个格子。\",\"一个新栈中所有格子的值都是 0。\",\"将一个新值放到栈的最顶部一个空（包括零）的格子中，这叫做 push。\",\"获取栈的最顶部一个非空（非零）的格子的值，这叫做 pop。 现在可以理解为什么栈是一个后进先出 (LIFO) 的结构了吧。\",\"为栈定义一个 Stack 类型，并为它定义 Push 和 Pop 方法，再为它定义 String() 方法（用于调试）输出栈的内容，比如：[0:i] [1:j] [2:k] [3:l]。\",\"1）stack_arr.go：使用长度为 4 的 int 数组作为底层数据结构。\",\"2） stack_struct.go：使用包含一个索引和一个 int 数组的结构体作为底层数据结构，索引表示第一个空闲的位置。\",\"3）使用常量 LIMIT 代替上面表示元素个数的 4 重新实现上面的 1）和 2），使它们更具有一般性。\"]},\"661\":{\"h\":\"10.8 垃圾回收和 SetFinalizer\",\"t\":[\"Go 开发者不需要写代码来释放程序中不再使用的变量和结构占用的内存，在 Go 运行时中有一个独立的进程，即垃圾收集器 (GC)，会处理这些事情，它搜索不再使用的变量然后释放它们的内存。可以通过 runtime 包访问 GC 进程。\",\"通过调用 runtime.GC() 函数可以显式的触发 GC，但这只在某些罕见的场景下才有用，比如当内存资源不足时调用 runtime.GC()，它会在此函数执行的点上立即释放一大片内存，此时程序可能会有短时的性能下降（因为 GC 进程在执行）。\",\"如果想知道当前的内存状态，可以使用：\",\"// fmt.Printf(\\\"%d\\\\n\\\", runtime.MemStats.Alloc/1024) // 此处代码在 Go 1.5.1下不再有效，更正为 var m runtime.MemStats runtime.ReadMemStats(&m) fmt.Printf(\\\"%d Kb\\\\n\\\", m.Alloc / 1024) \",\"上面的程序会给出已分配内存的总量，单位是 Kb。进一步的测量参考 文档页面。\",\"如果需要在一个对象 obj 被从内存移除前执行一些特殊操作，比如写到日志文件中，可以通过如下方式调用函数来实现：\",\"runtime.SetFinalizer(obj, func(obj *typeObj)) \",\"func(obj *typeObj) 需要一个 typeObj 类型的指针参数 obj，特殊操作会在它上面执行。func 也可以是一个匿名函数。\",\"在对象被 GC 进程选中并从内存中移除以前，SetFinalizer 都不会执行，即使程序正常结束或者发生错误。\",\"练习 10.17main_stack.go\",\"从练习 10.16 开始（它基于结构体实现了一个栈结构），为栈的实现 (stack_struct.go) 创建一个单独的包 stack，并从 main 包 main.stack.go 中调用它。\"]},\"662\":{\"h\":\"第 11 章：接口 (interface) 与反射 (reflection)\",\"t\":[\"本章介绍 Go 语言中接口和反射的相关内容。\",\"Go 语言不是一种 “传统” 的面向对象编程语言：它里面没有类和继承的概念。\",\"但是 Go 语言里有非常灵活的 接口 概念，通过它可以实现很多面向对象的特性。接口提供了一种方式来 说明 对象的行为：如果谁能搞定这件事，它就可以用在这儿。\",\"接口定义了一组方法（方法集），但是这些方法不包含（实现）代码：它们没有被实现（它们是抽象的）。接口里也不能包含变量。\",\"通过如下格式定义接口：\",\"type Namer interface { Method1(param_list) return_type Method2(param_list) return_type ... } \",\"上面的 Namer 是一个 接口类型。\",\"（按照约定，只包含一个方法的）接口的名字由方法名加 er 后缀组成，例如 Printer、Reader、Writer、Logger、Converter 等等。还有一些不常用的方式（当后缀 er 不合适时），比如 Recoverable，此时接口名以 able 结尾，或者以 I 开头（像 .NET 或 Java 中那样）。\",\"Go 语言中的接口都很简短，通常它们会包含 0 个、最多 3 个方法。\",\"不像大多数面向对象编程语言，在 Go 语言中接口可以有值，一个接口类型的变量或一个 接口值 ：var ai Namer，ai 是一个多字（multiword）数据结构，它的值是 nil。它本质上是一个指针，虽然不完全是一回事。指向接口值的指针是非法的，它们不仅一点用也没有，还会导致代码错误。\",\"此处的方法指针表是通过运行时反射能力构建的。\",\"类型（比如结构体）可以实现某个接口的方法集；这个实现可以描述为，该类型的变量上的每一个具体方法所组成的集合，包含了该接口的方法集。实现了 Namer 接口的类型的变量可以赋值给 ai（即 receiver 的值），方法表指针（method table ptr）就指向了当前的方法实现。当另一个实现了 Namer 接口的类型的变量被赋给 ai，receiver 的值和方法表指针也会相应改变。\",\"类型不需要显式声明它实现了某个接口：接口被隐式地实现。多个类型可以实现同一个接口。\",\"实现某个接口的类型（除了实现接口方法外）可以有其他的方法。\",\"一个类型可以实现多个接口。\",\"接口类型可以包含一个实例的引用， 该实例的类型实现了此接口（接口是动态类型）。\",\"即使接口在类型之后才定义，二者处于不同的包中，被单独编译：只要类型实现了接口中的方法，它就实现了此接口。\",\"所有这些特性使得接口具有很大的灵活性。\",\"第一个例子：\",\"示例 11.1 interfaces.go：\",\"package main import \\\"fmt\\\" type Shaper interface { Area() float32 } type Square struct { side float32 } func (sq *Square) Area() float32 { return sq.side * sq.side } func main() { sq1 := new(Square) sq1.side = 5 var areaIntf Shaper areaIntf = sq1 // shorter,without separate declaration: // areaIntf := Shaper(sq1) // or even: // areaIntf := sq1 fmt.Printf(\\\"The square has area: %f\\\\n\\\", areaIntf.Area()) } \",\"输出：\",\"The square has area: 25.000000 \",\"上面的程序定义了一个结构体 Square 和一个接口 Shaper，接口有一个方法 Area()。\",\"在 main() 方法中创建了一个 Square 的实例。在主程序外边定义了一个接收者类型是 Square 方法的 Area()，用来计算正方形的面积：结构体 Square 实现了接口 Shaper 。\",\"所以可以将一个 Square 类型的变量赋值给一个接口类型的变量：areaIntf = sq1 。\",\"现在接口变量包含一个指向 Square 变量的引用，通过它可以调用 Square 上的方法 Area()。当然也可以直接在 Square 的实例上调用此方法，但是在接口实例上调用此方法更令人兴奋，它使此方法更具有一般性。接口变量里包含了接收者实例的值和指向对应方法表的指针。\",\"这是 多态 的 Go 版本，多态是面向对象编程中一个广为人知的概念：根据当前的类型选择正确的方法，或者说：同一种类型在不同的实例上似乎表现出不同的行为。\",\"如果 Square 没有实现 Area() 方法，编译器将会给出清晰的错误信息：\",\"cannot use sq1 (type *Square) as type Shaper in assignment: *Square does not implement Shaper (missing Area method) \",\"如果 Shaper 有另外一个方法 Perimeter()，但是 Square 没有实现它，即使没有人在 Square 实例上调用这个方法，编译器也会给出上面同样的错误。\",\"扩展一下上面的例子，类型 Rectangle 也实现了 Shaper 接口。接着创建一个 Shaper 类型的数组，迭代它的每一个元素并在上面调用 Area() 方法，以此来展示多态行为：\",\"示例 11.2 interfaces_poly.go：\",\"package main import \\\"fmt\\\" type Shaper interface { Area() float32 } type Square struct { side float32 } func (sq *Square) Area() float32 { return sq.side * sq.side } type Rectangle struct { length, width float32 } func (r Rectangle) Area() float32 { return r.length * r.width } func main() { r := Rectangle{5, 3} // Area() of Rectangle needs a value q := &Square{5} // Area() of Square needs a pointer // shapes := []Shaper{Shaper(r), Shaper(q)} // or shorter shapes := []Shaper{r, q} fmt.Println(\\\"Looping through shapes for area ...\\\") for n, _ := range shapes { fmt.Println(\\\"Shape details: \\\", shapes[n]) fmt.Println(\\\"Area of this shape is: \\\", shapes[n].Area()) } } \",\"输出：\",\"Looping through shapes for area ... Shape details: {5 3} Area of this shape is: 15 Shape details: &{5} Area of this shape is: 25 \",\"在调用 shapes[n].Area() 这个时，只知道 shapes[n] 是一个 Shaper 对象，最后它摇身一变成为了一个 Square 或 Rectangle 对象，并且表现出了相对应的行为。\",\"也许从现在开始你将看到通过接口如何产生 更干净、更简单 及 更具有扩展性 的代码。在 11.12.3 中将看到在开发中为类型添加新的接口是多么的容易。\",\"下面是一个更具体的例子：有两个类型 stockPosition 和 car，它们都有一个 getValue() 方法，我们可以定义一个具有此方法的接口 valuable。接着定义一个使用 valuable 类型作为参数的函数 showValue()，所有实现了 valuable 接口的类型都可以用这个函数。\",\"示例 11.3 valuable.go：\",\"package main import \\\"fmt\\\" type stockPosition struct { ticker string sharePrice float32 count float32 } /* method to determine the value of a stock position */ func (s stockPosition) getValue() float32 { return s.sharePrice * s.count } type car struct { make string model string price float32 } /* method to determine the value of a car */ func (c car) getValue() float32 { return c.price } /* contract that defines different things that have value */ type valuable interface { getValue() float32 } func showValue(asset valuable) { fmt.Printf(\\\"Value of the asset is %f\\\\n\\\", asset.getValue()) } func main() { var o valuable = stockPosition{\\\"GOOG\\\", 577.20, 4} showValue(o) o = car{\\\"BMW\\\", \\\"M3\\\", 66500} showValue(o) } \",\"输出：\",\"Value of the asset is 2308.800049 Value of the asset is 66500.000000 \",\"一个标准库的例子\",\"io 包里有一个接口类型 Reader:\",\"type Reader interface { Read(p []byte) (n int, err error) } \",\"定义变量 r： var r io.Reader\",\"那么就可以写如下的代码：\",\" var r io.Reader r = os.Stdin // see 12.1 r = bufio.NewReader(r) r = new(bytes.Buffer) f,_ := os.Open(\\\"test.txt\\\") r = bufio.NewReader(f) \",\"上面 r 右边的类型都实现了 Read() 方法，并且有相同的方法签名，r 的静态类型是 io.Reader。\",\"备注\",\"有的时候，也会以一种稍微不同的方式来使用接口这个词：从某个类型的角度来看，它的接口指的是：它的所有导出方法，只不过没有显式地为这些导出方法额外定一个接口而已。\",\"练习 11.1simple_interface.go：\",\"定义一个接口 Simpler，它有一个 Get() 方法和一个 Set()，Get() 返回一个整型值，Set() 有一个整型参数。创建一个结构体类型 Simple 实现这个接口。\",\"接着定一个函数，它有一个 Simpler 类型的参数，调用参数的 Get() 和 Set() 方法。在 main 函数里调用这个函数，看看它是否可以正确运行。\",\"练习 11.2interfaces_poly2.go：\",\"a) 扩展 interfaces_poly.go 中的例子，添加一个 Circle 类型\",\"b) 使用一个抽象类型 Shape（没有字段） 实现同样的功能，它实现接口 Shaper，然后在其他类型里内嵌此类型。扩展 10.6.5 中的例子来说明覆写。\",\"一个接口可以包含一个或多个其他的接口，这相当于直接将这些内嵌接口的方法列举在外层接口中一样。\",\"比如接口 File 包含了 ReadWrite 和 Lock 的所有方法，它还额外有一个 Close() 方法。\",\"type ReadWrite interface { Read(b Buffer) bool Write(b Buffer) bool } type Lock interface { Lock() Unlock() } type File interface { ReadWrite Lock Close() } \",\"一个接口类型的变量 varI 中可以包含任何类型的值，必须有一种方式来检测它的 动态 类型，即运行时在变量中存储的值的实际类型。在执行过程中动态类型可能会有所不同，但是它总是可以分配给接口变量本身的类型。通常我们可以使用 类型断言 来测试在某个时刻 varI 是否包含类型 T 的值：\",\"v := varI.(T) // unchecked type assertion \",\"varI 必须是一个接口变量，否则编译器会报错：invalid type assertion: varI.(T) (non-interface type (type of varI) on left) 。\",\"类型断言可能是无效的，虽然编译器会尽力检查转换是否有效，但是它不可能预见所有的可能性。如果转换在程序运行时失败会导致错误发生。更安全的方式是使用以下形式来进行类型断言：\",\"if v, ok := varI.(T); ok { // checked type assertion Process(v) return } // varI is not of type T \",\"如果转换合法，v 是 varI 转换到类型 T 的值，ok 会是 true；否则 v 是类型 T 的零值，ok 是 false，也没有运行时错误发生。\",\"应该总是使用上面的方式来进行类型断言。\",\"多数情况下，我们可能只是想在 if 中测试一下 ok 的值，此时使用以下的方法会是最方便的：\",\"if _, ok := varI.(T); ok { // ... } \",\"示例 11.4 type_interfaces.go：\",\"package main import ( \\\"fmt\\\" \\\"math\\\" ) type Square struct { side float32 } type Circle struct { radius float32 } type Shaper interface { Area() float32 } func main() { var areaIntf Shaper sq1 := new(Square) sq1.side = 5 areaIntf = sq1 // Is Square the type of areaIntf? if t, ok := areaIntf.(*Square); ok { fmt.Printf(\\\"The type of areaIntf is: %T\\\\n\\\", t) } if u, ok := areaIntf.(*Circle); ok { fmt.Printf(\\\"The type of areaIntf is: %T\\\\n\\\", u) } else { fmt.Println(\\\"areaIntf does not contain a variable of type Circle\\\") } } func (sq *Square) Area() float32 { return sq.side * sq.side } func (ci *Circle) Area() float32 { return ci.radius * ci.radius * math.Pi } \",\"输出：\",\"The type of areaIntf is: *main.Square areaIntf does not contain a variable of type Circle \",\"程序中定义了一个新类型 Circle，它也实现了 Shaper 接口。 if t, ok := areaIntf.(*Square); ok 测试 areaIntf 里是否有一个包含 *Square 类型的变量，结果是确定的；然后我们测试它是否包含一个 *Circle 类型的变量，结果是否定的。\",\"备注\",\"如果忽略 areaIntf.(*Square) 中的 * 号，会导致编译错误：impossible type assertion: Square does not implement Shaper (Area method has pointer receiver)。\",\"接口变量的类型也可以使用一种特殊形式的 switch 来检测：type-switch （下面是示例 11.4 的第二部分）：\",\"switch t := areaIntf.(type) { case *Square: fmt.Printf(\\\"Type Square %T with value %v\\\\n\\\", t, t) case *Circle: fmt.Printf(\\\"Type Circle %T with value %v\\\\n\\\", t, t) case nil: fmt.Printf(\\\"nil value: nothing to check?\\\\n\\\") default: fmt.Printf(\\\"Unexpected type %T\\\\n\\\", t) } \",\"输出：\",\"Type Square *main.Square with value &{5} \",\"变量 t 得到了 areaIntf 的值和类型，所有 case 语句中列举的类型（nil 除外）都必须实现对应的接口（在上例中即 Shaper），如果被检测类型没有在 case 语句列举的类型中，就会执行 default 语句。\",\"可以用 type-switch 进行运行时类型分析，但是在 type-switch 不允许有 fallthrough 。\",\"如果仅仅是测试变量的类型，不用它的值，那么就可以不需要赋值语句，比如：\",\"switch areaIntf.(type) { case *Square: case *Circle: ... default: } \",\"下面的代码片段展示了一个类型分类函数，它有一个可变长度参数，可以是任意类型的数组，它会根据数组元素的实际类型执行不同的动作：\",\"func classifier(items ...interface{}) { for i, x := range items { switch x.(type) { case bool: fmt.Printf(\\\"Param #%d is a bool\\\\n\\\", i) case float64: fmt.Printf(\\\"Param #%d is a float64\\\\n\\\", i) case int, int64: fmt.Printf(\\\"Param #%d is a int\\\\n\\\", i) case nil: fmt.Printf(\\\"Param #%d is a nil\\\\n\\\", i) case string: fmt.Printf(\\\"Param #%d is a string\\\\n\\\", i) default: fmt.Printf(\\\"Param #%d is unknown\\\\n\\\", i) } } } \",\"可以这样调用此方法：classifier(13, -14.3, \\\"BELGIUM\\\", complex(1, 2), nil, false) 。\",\"在处理来自于外部的、类型未知的数据时，比如解析诸如 JSON 或 XML 编码的数据，类型测试和转换会非常有用。\",\"在示例 12.17 (xml.go) 中解析 XML 文档时，我们就会用到 type-switch。\",\"练习 11.4simple_interface2.go：\",\"接着练习 11.1 中的内容，创建第二个类型 RSimple，它也实现了接口 Simpler，写一个函数 fi()，使它可以区分 Simple 和 RSimple 类型的变量。\",\"这是 11.3 类型断言中的一个特例：假定 v 是一个值，然后我们想测试它是否实现了 Stringer 接口，可以这样做：\",\"type Stringer interface { String() string } if sv, ok := v.(Stringer); ok { fmt.Printf(\\\"v implements String(): %s\\\\n\\\", sv.String()) // note: sv, not v } \",\"Print() 函数就是如此检测类型是否可以打印自身的。\",\"接口是一种契约，实现类型必须满足它，它描述了类型的行为，规定类型可以做什么。接口彻底将类型能做什么，以及如何做分离开来，使得相同接口的变量在不同的时刻表现出不同的行为，这就是多态的本质。\",\"编写参数是接口变量的函数，这使得它们更具有一般性。\",\"使用接口使代码更具有普适性。\",\"标准库里到处都使用了这个原则，如果对接口概念没有良好的把握，是不可能理解它是如何构建的。\",\"在接下来的章节中，我们会讨论两个重要的例子，试着去深入理解它们，这样你就可以更好的应用上面的原则。\",\"在第 10.6.3 节及例子 methodset1.go 中我们看到，作用于变量上的方法实际上是不区分变量到底是指针还是值的。当碰到接口类型值时，这会变得有点复杂，原因是接口变量中存储的具体值是不可寻址的，幸运的是，如果使用不当编译器会给出错误。考虑下面的程序：\",\"示例 11.5 methodset2.go：\",\"package main import ( \\\"fmt\\\" ) type List []int func (l List) Len() int { return len(l) } func (l *List) Append(val int) { *l = append(*l, val) } type Appender interface { Append(int) } func CountInto(a Appender, start, end int) { for i := start; i <= end; i++ { a.Append(i) } } type Lener interface { Len() int } func LongEnough(l Lener) bool { return l.Len()*10 > 42 } func main() { // A bare value var lst List // compiler error: // cannot use lst (type List) as type Appender in argument to CountInto: // List does not implement Appender (Append method has pointer receiver) // CountInto(lst, 1, 10) if LongEnough(lst) { // VALID: Identical receiver type fmt.Printf(\\\"- lst is long enough\\\\n\\\") } // A pointer value plst := new(List) CountInto(plst, 1, 10) // VALID: Identical receiver type if LongEnough(plst) { // VALID: a *List can be dereferenced for the receiver fmt.Printf(\\\"- plst is long enough\\\\n\\\") } } \",\"讨论\",\"在 lst 上调用 CountInto 时会导致一个编译器错误，因为 CountInto 需要一个 Appender，而它的方法 Append 只定义在指针上。 在 lst 上调用 LongEnough 是可以的，因为 Len 定义在值上。\",\"在 plst 上调用 CountInto 是可以的，因为 CountInto 需要一个 Appender，并且它的方法 Append 定义在指针上。 在 plst 上调用 LongEnough 也是可以的，因为指针会被自动解引用。\",\"总结\",\"在接口上调用方法时，必须有和方法定义时相同的接收者类型或者是可以根据具体类型 P 直接辨识的：\",\"指针方法可以通过指针调用\",\"值方法可以通过值调用\",\"接收者是值的方法可以通过指针调用，因为指针会首先被解引用\",\"接收者是指针的方法不可以通过值调用，因为存储在接口中的值没有地址\",\"将一个值赋值给一个接口时，编译器会确保所有可能的接口方法都可以在此值上被调用，因此不正确的赋值在编译期就会失败。\",\"译注\",\"Go 语言规范定义了接口方法集的调用规则：\",\"类型 *T 的可调用方法集包含接受者为 *T 或 T 的所有方法集\",\"类型 T 的可调用方法集包含接受者为 T 的所有方法\",\"类型 T 的可调用方法集不包含接受者为 *T 的方法\",\"一个很好的例子是来自标准库的 sort 包，要对一组数字或字符串排序，只需要实现三个方法：反映元素个数的 Len() 方法、比较第 i 和 j 个元素的 Less(i, j) 方法以及交换第 i 和 j 个元素的 Swap(i, j) 方法。\",\"排序函数的算法只会使用到这三个方法（可以使用任何排序算法来实现，此处我们使用冒泡排序）：\",\"func Sort(data Sorter) { for pass := 1; pass < data.Len(); pass++ { for i := 0;i < data.Len() - pass; i++ { if data.Less(i+1, i) { data.Swap(i, i + 1) } } } } \",\"Sort 函数接收一个接口类型的参数：Sorter ，它声明了这些方法：\",\"type Sorter interface { Len() int Less(i, j int) bool Swap(i, j int) } \",\"参数中的 int 是待排序序列长度的类型，而不是说要排序的对象一定要是一组 int。i 和 j 表示元素的整型索引，长度也是整型的。\",\"现在如果我们想对一个 int 数组进行排序，所有必须做的事情就是：为数组定一个类型并在它上面实现 Sorter 接口的方法：\",\"type IntArray []int func (p IntArray) Len() int { return len(p) } func (p IntArray) Less(i, j int) bool { return p[i] < p[j] } func (p IntArray) Swap(i, j int) { p[i], p[j] = p[j], p[i] } \",\"下面是调用排序函数的一个具体例子：\",\"data := []int{74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586, -5467984, 7586} a := sort.IntArray(data) //conversion to type IntArray from package sort sort.Sort(a) \",\"完整的、可运行的代码可以在 sort.go 和 sortmain.go 里找到。\",\"同样的原理，排序函数可以用于一个浮点型数组，一个字符串数组，或者一个表示每周各天的结构体 dayArray。\",\"示例 11.6 sort.go：\",\"package sort type Sorter interface { Len() int Less(i, j int) bool Swap(i, j int) } func Sort(data Sorter) { for pass := 1; pass < data.Len(); pass++ { for i := 0; i < data.Len()-pass; i++ { if data.Less(i+1, i) { data.Swap(i, i+1) } } } } func IsSorted(data Sorter) bool { n := data.Len() for i := n - 1; i > 0; i-- { if data.Less(i, i-1) { return false } } return true } // Convenience types for common cases type IntArray []int func (p IntArray) Len() int { return len(p) } func (p IntArray) Less(i, j int) bool { return p[i] < p[j] } func (p IntArray) Swap(i, j int) { p[i], p[j] = p[j], p[i] } type StringArray []string func (p StringArray) Len() int { return len(p) } func (p StringArray) Less(i, j int) bool { return p[i] < p[j] } func (p StringArray) Swap(i, j int) { p[i], p[j] = p[j], p[i] } // Convenience wrappers for common cases func SortInts(a []int) { Sort(IntArray(a)) } func SortStrings(a []string) { Sort(StringArray(a)) } func IntsAreSorted(a []int) bool { return IsSorted(IntArray(a)) } func StringsAreSorted(a []string) bool { return IsSorted(StringArray(a)) } \",\"示例 11.7 sortmain.go：\",\"package main import ( \\\"./sort\\\" \\\"fmt\\\" ) func ints() { data := []int{74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586, -5467984, 7586} a := sort.IntArray(data) //conversion to type IntArray sort.Sort(a) if !sort.IsSorted(a) { panic(\\\"fails\\\") } fmt.Printf(\\\"The sorted array is: %v\\\\n\\\", a) } func strings() { data := []string{\\\"monday\\\", \\\"friday\\\", \\\"tuesday\\\", \\\"wednesday\\\", \\\"sunday\\\", \\\"thursday\\\", \\\"\\\", \\\"saturday\\\"} a := sort.StringArray(data) sort.Sort(a) if !sort.IsSorted(a) { panic(\\\"fail\\\") } fmt.Printf(\\\"The sorted array is: %v\\\\n\\\", a) } type day struct { num int shortName string longName string } type dayArray struct { data []*day } func (p *dayArray) Len() int { return len(p.data) } func (p *dayArray) Less(i, j int) bool { return p.data[i].num < p.data[j].num } func (p *dayArray) Swap(i, j int) { p.data[i], p.data[j] = p.data[j], p.data[i] } func days() { Sunday := day{0, \\\"SUN\\\", \\\"Sunday\\\"} Monday := day{1, \\\"MON\\\", \\\"Monday\\\"} Tuesday := day{2, \\\"TUE\\\", \\\"Tuesday\\\"} Wednesday := day{3, \\\"WED\\\", \\\"Wednesday\\\"} Thursday := day{4, \\\"THU\\\", \\\"Thursday\\\"} Friday := day{5, \\\"FRI\\\", \\\"Friday\\\"} Saturday := day{6, \\\"SAT\\\", \\\"Saturday\\\"} data := []*day{&Tuesday, &Thursday, &Wednesday, &Sunday, &Monday, &Friday, &Saturday} a := dayArray{data} sort.Sort(&a) if !sort.IsSorted(&a) { panic(\\\"fail\\\") } for _, d := range data { fmt.Printf(\\\"%s \\\", d.longName) } fmt.Printf(\\\"\\\\n\\\") } func main() { ints() strings() days() } \",\"输出：\",\"The sorted array is: [-5467984 -784 0 0 42 59 74 238 905 959 7586 7586 9845] The sorted array is: [ friday monday saturday sunday thursday tuesday wednesday] Sunday Monday Tuesday Wednesday Thursday Friday Saturday \",\"备注：\",\"panic(\\\"fail\\\") 用于停止处于在非正常情况下的程序（详细请参考第 13 章），当然也可以先打印一条信息，然后调用 os.Exit(1) 来停止程序。\",\"上面的例子帮助我们进一步了解了接口的意义和使用方式。对于基本类型的排序，标准库已经提供了相关的排序函数，所以不需要我们再重复造轮子了。对于一般性的排序，sort 包定义了一个接口：\",\"type Interface interface { Len() int Less(i, j int) bool Swap(i, j int) } \",\"这个接口总结了需要用于排序的抽象方法，函数 Sort(data Interface) 用来对此类对象进行排序，可以用它们来实现对其他类型的数据（非基本类型）进行排序。在上面的例子中，我们也是这么做的，不仅可以对 int 和 string 序列进行排序，也可以对用户自定义类型 dayArray 进行排序。\",\"练习 11.5interfaces_ext.go：\",\"a). 继续扩展程序，定义类型 Triangle，让它实现 AreaInterface 接口。通过计算一个特定三角形的面积来进行测试（三角形面积=0.5 _ (底 _ 高)）\",\"b). 定义一个新接口 PeriInterface，它有一个 Perimeter 方法。让 Square 实现这个接口，并通过一个 Square 示例来测试它。\",\"练习 11.6point_interfaces.go：\",\"继续 10.3 中的练习 point_methods.go，定义接口 Magnitude，它有一个方法 Abs()。让 Point、Point3 及 Polar 实现此接口。通过接口类型变量使用方法做 point.go 中同样的事情。\",\"练习 11.7float_sort.go / float_sortmain.go：\",\"类似 11.7 和示例 11.3/4，定义一个包 float64，并在包里定义类型 Float64Array，然后让它实现 Sorter 接口用来对 float64 数组进行排序。\",\"另外提供如下方法：\",\"NewFloat64Array()：创建一个包含 25 个元素的数组变量（参考 10.2 ）\",\"List()：返回数组格式化后的字符串，并在 String() 方法中调用它，这样就不用显式地调用 List() 来打印数组（参考 10.7）\",\"Fill()：创建一个包含 10 个随机浮点数的数组（参考 4.5.2.6）\",\"在主程序中新建一个此类型的变量，然后对它排序并进行测试。\",\"练习 11.8sort.go / sort_persons.go：\",\"定义一个结构体 Person，它有两个字段：firstName 和 lastName，为 []Person 定义类型 Persons 。让 Persons 实现 Sorter 接口并进行测试。\",\"读和写是软件中很普遍的行为，提起它们会立即想到读写文件、缓存（比如字节或字符串切片）、标准输入输出、标准错误以及网络连接、管道等等，或者读写我们的自定义类型。为了让代码尽可能通用，Go 采取了一致的方式来读写数据。\",\"io 包提供了用于读和写的接口 io.Reader 和 io.Writer：\",\"type Reader interface { Read(p []byte) (n int, err error) } type Writer interface { Write(p []byte) (n int, err error) } \",\"只要类型实现了读写接口，提供 Read 和 Write 方法，就可以从它读取数据，或向它写入数据。一个对象要是可读的，它必须实现 io.Reader 接口，这个接口只有一个签名是 Read(p []byte) (n int, err error) 的方法，它从调用它的对象上读取数据，并把读到的数据放入参数中的字节切片中，然后返回读取的字节数和一个 error 对象，如果没有错误发生返回 nil，如果已经到达输入的尾端，会返回 io.EOF(\\\"EOF\\\")，如果读取的过程中发生了错误，就会返回具体的错误信息。类似地，一个对象要是可写的，它必须实现 io.Writer 接口，这个接口也只有一个签名是 Write(p []byte) (n int, err error) 的方法，它将指定字节切片中的数据写入调用它的对象里，然后返回实际写入的字节数和一个 error 对象（如果没有错误发生就是 nil）。\",\"io 包里的 Readers 和 Writers 都是不带缓冲的，bufio 包里提供了对应的带缓冲的操作，在读写 UTF-8 编码的文本文件时它们尤其有用。在第 12 章我们会看到很多在实战中使用它们的例子。\",\"在实际编程中尽可能的使用这些接口，会使程序变得更通用，可以在任何实现了这些接口的类型上使用读写方法。\",\"例如一个 JPEG 图形解码器，通过一个 Reader 参数，它可以解码来自磁盘、网络连接或以 gzip 压缩的 HTTP 流中的 JPEG 图形数据，或者其他任何实现了 Reader 接口的对象。\"]},\"663\":{\"h\":\"11.9.1 概念\",\"t\":[\"空接口或者最小接口 不包含任何方法，它对实现不做任何要求：\",\"type Any interface {} \",\"任何其他类型都实现了空接口（它不仅仅像 Java/C# 中 Object 引用类型），any 或 Any 是空接口一个很好的别名或缩写。\",\"空接口类似 Java/C# 中所有类的基类： Object 类，二者的目标也很相近。\",\"可以给一个空接口类型的变量 var val interface {} 赋任何类型的值。\",\"示例 11.8 empty_interface.go：\",\"package main import \\\"fmt\\\" var i = 5 var str = \\\"ABC\\\" type Person struct { name string age int } type Any interface{} func main() { var val Any val = 5 fmt.Printf(\\\"val has the value: %v\\\\n\\\", val) val = str fmt.Printf(\\\"val has the value: %v\\\\n\\\", val) pers1 := new(Person) pers1.name = \\\"Rob Pike\\\" pers1.age = 55 val = pers1 fmt.Printf(\\\"val has the value: %v\\\\n\\\", val) switch t := val.(type) { case int: fmt.Printf(\\\"Type int %T\\\\n\\\", t) case string: fmt.Printf(\\\"Type string %T\\\\n\\\", t) case bool: fmt.Printf(\\\"Type boolean %T\\\\n\\\", t) case *Person: fmt.Printf(\\\"Type pointer to Person %T\\\\n\\\", t) default: fmt.Printf(\\\"Unexpected type %T\\\", t) } } \",\"输出：\",\"val has the value: 5 val has the value: ABC val has the value: &{Rob Pike 55} Type pointer to Person *main.Person \",\"在上面的例子中，接口变量 val 被依次赋予一个 int，string 和 Person 实例的值，然后使用 type-switch 来测试它的实际类型。每个 interface {} 变量在内存中占据两个字长：一个用来存储它包含的类型，另一个用来存储它包含的数据或者指向数据的指针。\",\"示例 emptyint_switch.go 说明了空接口在 type-switch 中联合 lambda 函数的用法：\",\"package main import \\\"fmt\\\" type specialString string var whatIsThis specialString = \\\"hello\\\" func TypeSwitch() { testFunc := func(any interface{}) { switch v := any.(type) { case bool: fmt.Printf(\\\"any %v is a bool type\\\", v) case int: fmt.Printf(\\\"any %v is an int type\\\", v) case float32: fmt.Printf(\\\"any %v is a float32 type\\\", v) case string: fmt.Printf(\\\"any %v is a string type\\\", v) case specialString: fmt.Printf(\\\"any %v is a special String!\\\", v) default: fmt.Println(\\\"unknown type!\\\") } } testFunc(whatIsThis) } func main() { TypeSwitch() } \",\"输出：\",\"any hello is a special String! \",\"练习 11.9simple_interface3.go：\",\"继续练习 11.2，在它中添加一个 gI() 函数，它不再接受 Simpler 类型的参数，而是接受一个空接口参数。然后通过类型断言判断参数是否是 Simpler 类型。最后在 main 使用 gI() 取代 fI() 函数并调用它。确保你的代码足够安全。\"]},\"664\":{\"h\":\"11.9.2 构建通用类型或包含不同类型变量的数组\",\"t\":[\"在 7.6.6 中我们看到了能被搜索和排序的 int 数组、float 数组以及 string 数组，那么对于其他类型的数组呢，是不是我们必须得自己编程实现它们？\",\"现在我们知道该怎么做了，就是通过使用空接口。让我们给空接口定一个别名类型 Element：type Element interface{}\",\"然后定义一个容器类型的结构体 Vector，它包含一个 Element 类型元素的切片：\",\"type Vector struct { a []Element } \",\"Vector 里能放任何类型的变量，因为任何类型都实现了空接口，实际上 Vector 里放的每个元素可以是不同类型的变量。我们为它定义一个 At() 方法用于返回第 i 个元素：\",\"func (p *Vector) At(i int) Element { return p.a[i] } \",\"再定一个 Set() 方法用于设置第 i 个元素的值：\",\"func (p *Vector) Set(i int, e Element) { p.a[i] = e } \",\"Vector 中存储的所有元素都是 Element 类型，要得到它们的原始类型（unboxing：拆箱）需要用到类型断言。TODO：The compiler rejects assertions guaranteed to fail，类型断言总是在运行时才执行，因此它会产生运行时错误。\",\"练习 11.10min_interface.go / minmain.go：\",\"仿照 11.7 中开发的 Sorter 接口，创建一个 Miner 接口并实现一些必要的操作。函数 Min() 接受一个 Miner 类型变量的集合，然后计算并返回集合中最小的元素。\"]},\"665\":{\"h\":\"11.9.3 复制数据切片至空接口切片\",\"t\":[\"假设你有一个 myType 类型的数据切片，你想将切片中的数据复制到一个空接口切片中，类似：\",\"var dataSlice []myType = FuncReturnSlice() var interfaceSlice []interface{} = dataSlice \",\"可惜不能这么做，编译时会出错：cannot use dataSlice (type []myType) as type []interface { } in assignment。\",\"原因是它们俩在内存中的布局是不一样的（参考 Go wiki）。\",\"必须使用 for-range 语句来一个一个显式地赋值：\",\"var dataSlice []myType = FuncReturnSlice() var interfaceSlice []interface{} = make([]interface{}, len(dataSlice)) for i, d := range dataSlice { interfaceSlice[i] = d } \"]},\"666\":{\"h\":\"11.9.4 通用类型的节点数据结构\",\"t\":[\"在 10.1 中我们遇到了诸如列表和树这样的数据结构，在它们的定义中使用了一种叫节点的递归结构体类型，节点包含一个某种类型的数据字段。现在可以使用空接口作为数据字段的类型，这样我们就能写出通用的代码。下面是实现一个二叉树的部分代码：通用定义、用于创建空节点的 NewNode 方法，及设置数据的 SetData 方法。\",\"示例 11.10 node_structures.go：\",\"package main import \\\"fmt\\\" type Node struct { le *Node data interface{} ri *Node } func NewNode(left, right *Node) *Node { return &Node{left, nil, right} } func (n *Node) SetData(data interface{}) { n.data = data } func main() { root := NewNode(nil, nil) root.SetData(\\\"root node\\\") // make child (leaf) nodes: a := NewNode(nil, nil) a.SetData(\\\"left node\\\") b := NewNode(nil, nil) b.SetData(\\\"right node\\\") root.le = a root.ri = b fmt.Printf(\\\"%v\\\\n\\\", root) // Output: &{0x125275f0 root node 0x125275e0} } \"]},\"667\":{\"h\":\"11.9.5 接口到接口\",\"t\":[\"一个接口的值可以赋值给另一个接口变量，只要底层类型实现了必要的方法。这个转换是在运行时进行检查的，转换失败会导致一个运行时错误：这是 Go 语言动态的一面，可以拿它和 Ruby 和 Python 这些动态语言相比较。\",\"假定：\",\"var ai AbsInterface // declares method Abs() type SqrInterface interface { Sqr() float } var si SqrInterface pp := new(Point) // say *Point implements Abs, Sqr var empty interface{} \",\"那么下面的语句和类型断言是合法的：\",\"empty = pp // everything satisfies empty ai = empty.(AbsInterface) // underlying value pp implements Abs() // (runtime failure otherwise) si = ai.(SqrInterface) // *Point has Sqr() even though AbsInterface doesn’t empty = si // *Point implements empty set // Note: statically checkable so type assertion not necessary. \",\"下面是函数调用的一个例子：\",\"type myPrintInterface interface { print() } func f3(x myInterface) { x.(myPrintInterface).print() // type assertion to myPrintInterface } \",\"x 转换为 myPrintInterface 类型是完全动态的：只要 x 的底层类型（动态类型）定义了 print 方法这个调用就可以正常运行（译注：若 x 的底层类型未定义 print 方法，此处类型断言会导致 panic，最佳实践应该为 if mpi, ok := x.(myPrintInterface); ok { mpi.print() }，参考 11.3 章节）。\"]},\"668\":{\"h\":\"11.10.1 方法和类型的反射\",\"t\":[\"在 10.4 节我们看到可以通过反射来分析一个结构体。本节我们进一步探讨强大的反射功能。反射是用程序检查其所拥有的结构，尤其是类型的一种能力；这是元编程的一种形式。反射可以在运行时检查类型和变量，例如：它的大小、它的方法以及它能“动态地”调用这些方法。这对于没有源代码的包尤其有用。这是一个强大的工具，除非真得有必要，否则应当避免使用或小心使用。\",\"变量的最基本信息就是类型和值：反射包的 Type 用来表示一个 Go 类型，反射包的 Value 为 Go 值提供了反射接口。\",\"两个简单的函数，reflect.TypeOf 和 reflect.ValueOf，返回被检查对象的类型和值。例如，x 被定义为：var x float64 = 3.4，那么 reflect.TypeOf(x) 返回 float64，reflect.ValueOf(x) 返回 <float64 Value>\",\"实际上，反射是通过检查一个接口的值，变量首先被转换成空接口。这从下面两个函数签名能够很明显的看出来：\",\"func TypeOf(i interface{}) Type func ValueOf(i interface{}) Value \",\"接口的值包含一个 type 和 value。\",\"反射可以从接口值反射到对象，也可以从对象反射回接口值。\",\"reflect.Type 和 reflect.Value 都有许多方法用于检查和操作它们。一个重要的例子是 Value 有一个 Type() 方法返回 reflect.Value 的 Type 类型。另一个是 Type 和 Value 都有 Kind() 方法返回一个常量来表示类型：Uint、Float64、Slice 等等。同样 Value 有叫做 Int() 和 Float() 的方法可以获取存储在内部的值（跟 int64 和 float64 一样）\",\"const ( Invalid Kind = iota Bool Int Int8 Int16 Int32 Int64 Uint Uint8 Uint16 Uint32 Uint64 Uintptr Float32 Float64 Complex64 Complex128 Array Chan Func Interface Map Ptr Slice String Struct UnsafePointer ) \",\"对于 float64 类型的变量 x，如果 v:=reflect.ValueOf(x)，那么 v.Kind() 返回 reflect.Float64 ，所以下面的表达式是 true：v.Kind() == reflect.Float64\",\"Kind() 总是返回底层类型：\",\"type MyInt int var m MyInt = 5 v := reflect.ValueOf(m) \",\"方法 v.Kind() 返回 reflect.Int。\",\"变量 v 的 Interface() 方法可以得到还原（接口）值，所以可以这样打印 v 的值：fmt.Println(v.Interface())\",\"尝试运行下面的代码：\",\"示例 11.11 reflect1.go：\",\"// blog: Laws of Reflection package main import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { var x float64 = 3.4 fmt.Println(\\\"type:\\\", reflect.TypeOf(x)) v := reflect.ValueOf(x) fmt.Println(\\\"value:\\\", v) fmt.Println(\\\"type:\\\", v.Type()) fmt.Println(\\\"kind:\\\", v.Kind()) fmt.Println(\\\"value:\\\", v.Float()) fmt.Println(v.Interface()) fmt.Printf(\\\"value is %5.2e\\\\n\\\", v.Interface()) y := v.Interface().(float64) fmt.Println(y) } \",\"输出：\",\"type: float64 value: 3.4 type: float64 kind: float64 value: 3.4 3.4 value is 3.40e+00 3.4 \",\"x 是一个 float64 类型的值，reflect.ValueOf(x).Float() 返回这个 float64 类型的实际值；同样的适用于 Int(), Bool(), Complex(), String()\"]},\"669\":{\"h\":\"11.10.2 通过反射修改（设置）值\",\"t\":[\"继续前面的例子（参阅 11.9 reflect2.go），假设我们要把 x 的值改为 3.1415。Value 有一些方法可以完成这个任务，但是必须小心使用：v.SetFloat(3.1415)。\",\"这将产生一个错误：reflect.Value.SetFloat using unaddressable value。\",\"为什么会这样呢？问题的原因是 v 不是可设置的（这里并不是说值不可寻址）。是否可设置是 Value 的一个属性，并且不是所有的反射值都有这个属性：可以使用 CanSet() 方法测试是否可设置。\",\"在例子中我们看到 v.CanSet() 返回 false： settability of v: false\",\"当 v := reflect.ValueOf(x) 函数通过传递一个 x 拷贝创建了 v，那么 v 的改变并不能更改原始的 x。要想 v 的更改能作用到 x，那就必须传递 x 的地址 v = reflect.ValueOf(&x)。\",\"通过 Type() 我们看到 v 现在的类型是 *float64 并且仍然是不可设置的。\",\"要想让其可设置我们需要使用 Elem() 函数，这间接地使用指针：v = v.Elem()\",\"现在 v.CanSet() 返回 true 并且 v.SetFloat(3.1415) 设置成功了！\",\"示例 11.12 reflect2.go：\",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { var x float64 = 3.4 v := reflect.ValueOf(x) // setting a value: // v.SetFloat(3.1415) // Error: will panic: reflect.Value.SetFloat using unaddressable value fmt.Println(\\\"settability of v:\\\", v.CanSet()) v = reflect.ValueOf(&x) // Note: take the address of x. fmt.Println(\\\"type of v:\\\", v.Type()) fmt.Println(\\\"settability of v:\\\", v.CanSet()) v = v.Elem() fmt.Println(\\\"The Elem of v is: \\\", v) fmt.Println(\\\"settability of v:\\\", v.CanSet()) v.SetFloat(3.1415) // this works! fmt.Println(v.Interface()) fmt.Println(v) } \",\"输出：\",\"settability of v: false type of v: *float64 settability of v: false The Elem of v is: <float64 Value> settability of v: true 3.1415 <float64 Value> \",\"反射中有些内容是需要用地址去改变它的状态的。\"]},\"670\":{\"h\":\"11.10.3 反射结构\",\"t\":[\"有些时候需要反射一个结构类型。NumField() 方法返回结构内的字段数量；通过一个 for 循环用索引取得每个字段的值 Field(i)。\",\"我们同样能够调用签名在结构上的方法，例如，使用索引 n 来调用：Method(n).Call(nil)。\",\"示例 11.13 reflect_struct.go：\",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) type NotknownType struct { s1, s2, s3 string } func (n NotknownType) String() string { return n.s1 + \\\" - \\\" + n.s2 + \\\" - \\\" + n.s3 } // variable to investigate: var secret interface{} = NotknownType{\\\"Ada\\\", \\\"Go\\\", \\\"Oberon\\\"} func main() { value := reflect.ValueOf(secret) // <main.NotknownType Value> typ := reflect.TypeOf(secret) // main.NotknownType // alternative: // typ := value.Type() // main.NotknownType fmt.Println(typ) knd := value.Kind() // struct fmt.Println(knd) // iterate through the fields of the struct: for i := 0; i < value.NumField(); i++ { fmt.Printf(\\\"Field %d: %v\\\\n\\\", i, value.Field(i)) // error: panic: reflect.Value.SetString using value obtained using unexported field // value.Field(i).SetString(\\\"C#\\\") } // call the first method, which is String(): results := value.Method(0).Call(nil) fmt.Println(results) // [Ada - Go - Oberon] } \",\"输出：\",\"main.NotknownType struct Field 0: Ada Field 1: Go Field 2: Oberon [Ada - Go - Oberon] \",\"但是如果尝试更改一个值，会得到一个错误：\",\"panic: reflect.Value.SetString using value obtained using unexported field \",\"这是因为结构中只有被导出字段（首字母大写）才是可设置的；来看下面的例子：\",\"示例 11.14 reflect_struct2.go：\",\"package main import ( \\\"fmt\\\" \\\"reflect\\\" ) type T struct { A int B string } func main() { t := T{23, \\\"skidoo\\\"} s := reflect.ValueOf(&t).Elem() typeOfT := s.Type() for i := 0; i < s.NumField(); i++ { f := s.Field(i) fmt.Printf(\\\"%d: %s %s = %v\\\\n\\\", i, typeOfT.Field(i).Name, f.Type(), f.Interface()) } s.Field(0).SetInt(77) s.Field(1).SetString(\\\"Sunset Strip\\\") fmt.Println(\\\"t is now\\\", t) } \",\"输出：\",\"0: A int = 23 1: B string = skidoo t is now {77 Sunset Strip} \",\"附录 37 深入阐述了反射概念。\",\"在 Go 语言的标准库中，前几节所述的反射的功能被大量地使用。举个例子，fmt 包中的 Printf()（以及其他格式化输出函数）都会使用反射来分析它的 ... 参数。\",\"Printf() 的函数声明为：\",\"func Printf(format string, args ... interface{}) (n int, err error) \",\"Printf() 中的 ... 参数为空接口类型。Printf() 使用反射包来解析这个参数列表。所以，Printf() 能够知道它每个参数的类型。因此格式化字符串中只有 %d 而没有 %u 和 %ld，因为它知道这个参数是 unsigned 还是 long。这也是为什么 Print() 和 Println() 在没有格式字符串的情况下还能如此漂亮地输出。\",\"为了让大家更加具体地了解 Printf() 中的反射，我们实现了一个简单的通用输出函数。其中使用了 type-switch 来推导参数类型，并根据类型来输出每个参数的值（这里用了 10.7 节中练习 10.13 的部分代码）\",\"示例 11.15 print.go：\",\"package main import ( \\\"os\\\" \\\"strconv\\\" ) type Stringer interface { String() string } type Celsius float64 func (c Celsius) String() string { return strconv.FormatFloat(float64(c),'f', 1, 64) + \\\" °C\\\" } type Day int var dayName = []string{\\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\", \\\"Saturday\\\", \\\"Sunday\\\"} func (day Day) String() string { return dayName[day] } func print(args ...interface{}) { for i, arg := range args { if i > 0 {os.Stdout.WriteString(\\\" \\\")} switch a := arg.(type) { // type switch case Stringer: os.Stdout.WriteString(a.String()) case int: os.Stdout.WriteString(strconv.Itoa(a)) case string: os.Stdout.WriteString(a) // more types default: os.Stdout.WriteString(\\\"???\\\") } } } func main() { print(Day(1), \\\"was\\\", Celsius(18.36)) // Tuesday was 18.4 °C } \",\"在 12.8 节中我们将阐释 fmt.Fprintf() 是怎么运用同样的反射原则的。\"]},\"671\":{\"h\":\"11.12.1 Go 的动态类型\",\"t\":[\"在经典的面向对象语言（像 C++，Java 和 C#）中数据和方法被封装为类的概念：类包含它们两者，并且不能剥离。\",\"Go 没有类：数据（结构体或更一般的类型）和方法是一种松耦合的正交关系。\",\"Go 中的接口跟 Java/C# 类似：都是必须提供一个指定方法集的实现。但是更加灵活通用：任何提供了接口方法实现代码的类型都隐式地实现了该接口，而不用显式地声明。\",\"和其它语言相比，Go 是唯一结合了接口值，静态类型检查（是否该类型实现了某个接口），运行时动态转换的语言，并且不需要显式地声明类型是否满足某个接口。该特性允许我们在不改变已有的代码的情况下定义和使用新接口。\",\"接收一个（或多个）接口类型作为参数的函数，其实参可以是任何实现了该接口的类型的变量。 实现了某个接口的类型可以被传给任何以此接口为参数的函数。\",\"类似于 Python 和 Ruby 这类动态语言中的动态类型 (duck typing)；这意味着对象可以根据提供的方法被处理（例如，作为参数传递给函数），而忽略它们的实际类型：它们能做什么比它们是什么更重要。\",\"这在程序 duck_dance.go 中得以阐明，函数 DuckDance() 接受一个 IDuck 接口类型变量。仅当 DuckDance() 被实现了 IDuck 接口的类型调用时程序才能编译通过。\",\"示例 11.16 duck_dance.go：\",\"package main import \\\"fmt\\\" type IDuck interface { Quack() Walk() } func DuckDance(duck IDuck) { for i := 1; i <= 3; i++ { duck.Quack() duck.Walk() } } type Bird struct { // ... } func (b *Bird) Quack() { fmt.Println(\\\"I am quacking!\\\") } func (b *Bird) Walk() { fmt.Println(\\\"I am walking!\\\") } func main() { b := new(Bird) DuckDance(b) } \",\"输出：\",\"I am quacking! I am walking! I am quacking! I am walking! I am quacking! I am walking! \",\"如果 Bird 没有实现 Walk()（把它注释掉），会得到一个编译错误：\",\"cannot use b (type *Bird) as type IDuck in function argument: *Bird does not implement IDuck (missing Walk method) \",\"如果对 cat 调用函数 DuckDance()，Go 会提示编译错误，但是 Python 和 Ruby 会以运行时错误结束。\"]},\"672\":{\"h\":\"11.12.2 动态方法调用\",\"t\":[\"像 Python，Ruby 这类语言，动态类型是延迟绑定的（在运行时进行）：方法只是用参数和变量简单地调用，然后在运行时才解析（它们很可能有像 responds_to 这样的方法来检查对象是否可以响应某个方法，但是这也意味着更大的编码量和更多的测试工作）\",\"Go 的实现与此相反，通常需要编译器静态检查的支持：当变量被赋值给一个接口类型的变量时，编译器会检查其是否实现了该接口的所有函数。如果方法调用作用于像 interface{} 这样的“泛型”上，你可以通过类型断言（参见 11.3 节）来检查变量是否实现了相应接口。\",\"例如，你用不同的类型表示 XML 输出流中的不同实体。然后我们为 XML 定义一个如下的“写”接口（甚至可以把它定义为私有接口）：\",\"type xmlWriter interface { WriteXML(w io.Writer) error } \",\"现在我们可以实现适用于该流类型的任何变量的 StreamXML() 函数，并用类型断言检查传入的变量是否实现了该接口；如果没有，我们就调用内建的 encodeToXML() 来完成相应工作：\",\"// Exported XML streaming function. func StreamXML(v interface{}, w io.Writer) error { if xw, ok := v.(xmlWriter); ok { // It’s an xmlWriter, use method of asserted type. return xw.WriteXML(w) } // No implementation, so we have to use our own function (with perhaps reflection): return encodeToXML(v, w) } // Internal XML encoding function. func encodeToXML(v interface{}, w io.Writer) error { // ... } \",\"Go 在这里用了和 gob 相同的机制：定义了两个接口 GobEncoder 和 GobDecoder。这样就允许类型自己实现从流编解码的具体方式；如果没有实现就使用标准的反射方式。\",\"因此 Go 提供了动态语言的优点，却没有其他动态语言在运行时可能发生错误的缺点。\",\"对于动态语言非常重要的单元测试来说，这样即可以减少单元测试的部分需求，又可以发挥相当大的作用。\",\"Go 的接口提高了代码的分离度，改善了代码的复用性，使得代码开发过程中的设计模式更容易实现。用 Go 接口还能实现“依赖注入模式”。\"]},\"673\":{\"h\":\"11.12.3 接口的提取\",\"t\":[\"提取接口是非常有用的设计模式，可以减少需要的类型和方法数量，而且不需要像传统的基于类的面向对象语言那样维护整个的类层次结构。\",\"Go 接口可以让开发者找出自己写的程序中的类型。假设有一些拥有共同行为的对象，并且开发者想要抽象出这些行为，这时就可以创建一个接口来使用。\",\"我们来扩展 11.1 节的示例 11.2 interfaces_poly.go，假设我们需要一个新的接口 TopologicalGenus，用来给 shape 排序（这里简单地实现为返回 int）。我们需要做的是给想要满足接口的类型实现 Rank() 方法：\",\"示例 11.17 multi_interfaces_poly.go：\",\"//multi_interfaces_poly.go package main import \\\"fmt\\\" type Shaper interface { Area() float32 } type TopologicalGenus interface { Rank() int } type Square struct { side float32 } func (sq *Square) Area() float32 { return sq.side * sq.side } func (sq *Square) Rank() int { return 1 } type Rectangle struct { length, width float32 } func (r Rectangle) Area() float32 { return r.length * r.width } func (r Rectangle) Rank() int { return 2 } func main() { r := Rectangle{5, 3} // Area() of Rectangle needs a value q := &Square{5} // Area() of Square needs a pointer shapes := []Shaper{r, q} fmt.Println(\\\"Looping through shapes for area ...\\\") for n, _ := range shapes { fmt.Println(\\\"Shape details: \\\", shapes[n]) fmt.Println(\\\"Area of this shape is: \\\", shapes[n].Area()) } topgen := []TopologicalGenus{r, q} fmt.Println(\\\"Looping through topgen for rank ...\\\") for n, _ := range topgen { fmt.Println(\\\"Shape details: \\\", topgen[n]) fmt.Println(\\\"Topological Genus of this shape is: \\\", topgen[n].Rank()) } } \",\"输出：\",\"Looping through shapes for area ... Shape details: {5 3} Area of this shape is: 15 Shape details: &{5} Area of this shape is: 25 Looping through topgen for rank ... Shape details: {5 3} Topological Genus of this shape is: 2 Shape details: &{5} Topological Genus of this shape is: 1 \",\"所以你不用提前设计出所有的接口；整个设计可以持续演进，而不用废弃之前的决定。类型要实现某个接口，它本身不用改变，你只需要在这个类型上实现新的方法。\"]},\"674\":{\"h\":\"11.12.4 显式地指明类型实现了某个接口\",\"t\":[\"如果你希望满足某个接口的类型显式地声明它们实现了这个接口，你可以向接口的方法集中添加一个具有描述性名字的方法。例如：\",\"type Fooer interface { Foo() ImplementsFooer() } \",\"类型 Bar 必须实现 ImplementsFooer 方法来满足 Fooer 接口，以清楚地记录这个事实。\",\"type Bar struct{} func (b Bar) ImplementsFooer() {} func (b Bar) Foo() {} \",\"大部分代码并不使用这样的约束，因为它限制了接口的实用性。\",\"但是有些时候，这样的约束在大量相似的接口中被用来解决歧义。\"]},\"675\":{\"h\":\"11.12.5 空接口和函数重载\",\"t\":[\"在 6.1 节中, 我们看到函数重载是不被允许的。在 Go 语言中函数重载可以用可变参数 ...T 作为函数最后一个参数来实现（参见 6.3 节）。如果我们把 T 换为空接口，那么可以知道任何类型的变量都是满足 T (空接口）类型的，这样就允许我们传递任何数量任何类型的参数给函数，即重载的实际含义。\",\"函数 fmt.Printf 就是这样做的：\",\"fmt.Printf(format string, a ...interface{}) (n int, errno error) \",\"这个函数通过枚举 slice 类型的实参动态确定所有参数的类型，并查看每个类型是否实现了 String() 方法，如果是就用于产生输出信息。我们可以回到 11.10 节查看这些细节。\"]},\"676\":{\"h\":\"11.12.6 接口的继承\",\"t\":[\"当一个类型包含（内嵌）另一个类型（实现了一个或多个接口）的指针时，这个类型就可以使用（另一个类型）所有的接口方法。\",\"例如：\",\"type Task struct { Command string *log.Logger } \",\"这个类型的工厂方法像这样：\",\"func NewTask(command string, logger *log.Logger) *Task { return &Task{command, logger} } \",\"当 log.Logger 实现了 Log() 方法后，Task 的实例 task 就可以调用该方法：\",\"task.Log() \",\"类型可以通过继承多个接口来提供像多重继承一样的特性：\",\"type ReaderWriter struct { *io.Reader *io.Writer } \",\"上面概述的原理被应用于整个 Go 包，多态用得越多，代码就相对越少（参见 12.8 节）。这被认为是 Go 编程中的重要的最佳实践。\",\"有用的接口可以在开发的过程中被归纳出来。添加新接口非常容易，因为已有的类型不用变动（仅仅需要实现新接口的方法）。已有的函数可以扩展为使用接口类型的约束性参数：通常只有函数签名需要改变。对比基于类的 OO 类型的语言在这种情况下则需要适应整个类层次结构的变化。\",\"练习 11.11：map_function_interface.go：\",\"在练习 7.13 中我们定义了一个 map() 函数来使用 int 切片 (map_function.go)。\",\"通过空接口和类型断言，现在我们可以写一个可以应用于许多类型的泛型的 map() 函数，为 int 和 string 构建一个把 int 值加倍和将字符串值与其自身连接（译者注：即 \\\"abc\\\" 变成 \\\"abcabc\\\" ）的 map() 函数 mapFunc()。\",\"提示：为了可读性可以定义一个 interface{} 的别名，比如：type obj interface{}。\",\"练习 11.12：map_function_interface_var.go：\",\"稍微改变练习 11.11，允许 mapFunc() 接收不定数量的 items。\",\"练习 11.13：main_stack.go—stack/stack_general.go：\",\"在练习 10.16 和 10.17 中我们开发了一些栈结构类型。但是它们被限制为某种固定的内建类型。现在用一个元素类型是 interface{}（空接口）的切片开发一个通用的栈类型。\",\"实现下面的栈方法：\",\"Len() int IsEmpty() bool Push(x interface{}) Pop() (interface{}, error) \",\"Pop() 改变栈并返回最顶部的元素；Top() 只返回最顶部元素。\",\"在主程序中构建一个充满不同类型元素的栈，然后弹出并打印所有元素的值。\",\"我们总结一下前面看到的：Go 没有类，而是松耦合的类型、方法对接口的实现。\",\"OO 语言最重要的三个方面分别是：封装、继承和多态，在 Go 中它们是怎样表现的呢？\",\"封装（数据隐藏）：和别的 OO 语言有 4 个或更多的访问层次相比，Go 把它简化为了 2 层（参见 4.2 节的可见性规则）:\",\"1）包范围内的：通过标识符首字母小写，对象只在它所在的包内可见\",\"2）可导出的：通过标识符首字母大写，对象对所在包以外也可见\",\"类型只拥有自己所在包中定义的方法。\",\"继承：用组合实现：内嵌一个（或多个）包含想要的行为（字段和方法）的类型；多重继承可以通过内嵌多个类型实现\",\"多态：用接口实现：某个类型的实例可以赋给它所实现的任意接口类型的变量。类型和接口是松耦合的，并且多重继承可以通过实现多个接口实现。Go 接口不是 Java 和 C# 接口的变体，而且接口间是不相关的，并且是大规模编程和可适应的演进型设计的关键。\",\"通常你在应用中定义了一个结构体，那么你也可能需要这个结构体的（指针）对象集合，比如：\",\"type Any interface{} type Car struct { Model string Manufacturer string BuildYear int // ... } type Cars []*Car \",\"然后我们就可以使用高阶函数，实际上也就是把函数作为定义所需方法（其他函数）的参数，例如：\",\"1）定义一个通用的 Process() 函数，它接收一个作用于每一辆 car 的 f 函数作参数：\",\"// Process all cars with the given function f: func (cs Cars) Process(f func(car *Car)) { for _, c := range cs { f(c) } } \",\"2）在上面的基础上，实现一个查找函数来获取子集合，并在 Process() 中传入一个闭包执行（这样就可以访问局部切片 cars）：\",\"// Find all cars matching a given criteria. func (cs Cars) FindAll(f func(car *Car) bool) Cars { cars := make([]*Car, 0) cs.Process(func(c *Car) { if f(c) { cars = append(cars, c) } }) return cars } \",\"3）实现对应作用的功效 (Map-functionality)，从每个 car 对象当中产出某些东西：\",\"// Process cars and create new data. func (cs Cars) Map(f func(car *Car) Any) []Any { result := make([]Any, 0) ix := 0 cs.Process(func(c *Car) { result[ix] = f(c) ix++ }) return result } \",\"现在我们可以定义下面这样的具体查询：\",\"allNewBMWs := allCars.FindAll(func(car *Car) bool { return (car.Manufacturer == \\\"BMW\\\") && (car.BuildYear > 2010) }) \",\"4）我们也可以根据参数返回不同的函数。也许我们想根据不同的厂商添加汽车到不同的集合，但是这（这种映射关系）可能会是会改变的。所以我们可以定义一个函数来产生特定的添加函数和 map 集：\",\"func MakeSortedAppender(manufacturers []string)(func(car *Car),map[string]Cars) { // Prepare maps of sorted cars. sortedCars := make(map[string]Cars) for _, m := range manufacturers { sortedCars[m] = make([]*Car, 0) } sortedCars[\\\"Default\\\"] = make([]*Car, 0) // Prepare appender function: appender := func(c *Car) { if _, ok := sortedCars[c.Manufacturer]; ok { sortedCars[c.Manufacturer] = append(sortedCars[c.Manufacturer], c) } else { sortedCars[\\\"Default\\\"] = append(sortedCars[\\\"Default\\\"], c) } } return appender, sortedCars } \",\"现在我们可以用它把汽车分类为独立的集合，像这样：\",\"manufacturers := []string{\\\"Ford\\\", \\\"Aston Martin\\\", \\\"Land Rover\\\", \\\"BMW\\\", \\\"Jaguar\\\"} sortedAppender, sortedCars := MakeSortedAppender(manufacturers) allUnsortedCars.Process(sortedAppender) BMWCount := len(sortedCars[\\\"BMW\\\"]) \",\"我们让这些代码在下面的程序 cars.go 中执行：\",\"示例 11.18 cars.go：\",\"// cars.go package main import ( \\\"fmt\\\" ) type Any interface{} type Car struct { Model string Manufacturer string BuildYear int // ... } type Cars []*Car func main() { // make some cars: ford := &Car{\\\"Fiesta\\\", \\\"Ford\\\", 2008} bmw := &Car{\\\"XL 450\\\", \\\"BMW\\\", 2011} merc := &Car{\\\"D600\\\", \\\"Mercedes\\\", 2009} bmw2 := &Car{\\\"X 800\\\", \\\"BMW\\\", 2008} // query: allCars := Cars([]*Car{ford, bmw, merc, bmw2}) allNewBMWs := allCars.FindAll(func(car *Car) bool { return (car.Manufacturer == \\\"BMW\\\") && (car.BuildYear > 2010) }) fmt.Println(\\\"AllCars: \\\", allCars) fmt.Println(\\\"New BMWs: \\\", allNewBMWs) // manufacturers := []string{\\\"Ford\\\", \\\"Aston Martin\\\", \\\"Land Rover\\\", \\\"BMW\\\", \\\"Jaguar\\\"} sortedAppender, sortedCars := MakeSortedAppender(manufacturers) allCars.Process(sortedAppender) fmt.Println(\\\"Map sortedCars: \\\", sortedCars) BMWCount := len(sortedCars[\\\"BMW\\\"]) fmt.Println(\\\"We have \\\", BMWCount, \\\" BMWs\\\") } // Process all cars with the given function f: func (cs Cars) Process(f func(car *Car)) { for _, c := range cs { f(c) } } // Find all cars matching a given criteria. func (cs Cars) FindAll(f func(car *Car) bool) Cars { cars := make([]*Car, 0) cs.Process(func(c *Car) { if f(c) { cars = append(cars, c) } }) return cars } // Process cars and create new data. func (cs Cars) Map(f func(car *Car) Any) []Any { result := make([]Any, len(cs)) ix := 0 cs.Process(func(c *Car) { result[ix] = f(c) ix++ }) return result } func MakeSortedAppender(manufacturers []string) (func(car *Car), map[string]Cars) { // Prepare maps of sorted cars. sortedCars := make(map[string]Cars) for _, m := range manufacturers { sortedCars[m] = make([]*Car, 0) } sortedCars[\\\"Default\\\"] = make([]*Car, 0) // Prepare appender function: appender := func(c *Car) { if _, ok := sortedCars[c.Manufacturer]; ok { sortedCars[c.Manufacturer] = append(sortedCars[c.Manufacturer], c) } else { sortedCars[\\\"Default\\\"] = append(sortedCars[\\\"Default\\\"], c) } } return appender, sortedCars } \",\"输出：\",\"AllCars: [0xf8400038a0 0xf840003bd0 0xf840003ba0 0xf840003b70] New BMWs: [0xf840003bd0] Map sortedCars: map[Default:[0xf840003ba0] Jaguar:[] Land Rover:[] BMW:[0xf840003bd0 0xf840003b70] Aston Martin:[] Ford:[0xf8400038a0]] We have 2 BMWs \"]},\"677\":{\"h\":\"第 12 章：读写数据\",\"t\":[\"除了 fmt 和 os 包，我们还需要用到 bufio 包来处理缓冲的输入和输出。\",\"我们如何读取用户的键盘（控制台）输入呢？从键盘和标准输入 os.Stdin 读取输入，最简单的办法是使用 fmt 包提供的 Scan... 和 Sscan... 开头的函数。请看以下程序：\",\"示例 12.1 readinput1.go：\",\"// 从控制台读取输入: package main import \\\"fmt\\\" var ( firstName, lastName, s string i int f float32 input = \\\"56.12 / 5212 / Go\\\" format = \\\"%f / %d / %s\\\" ) func main() { fmt.Println(\\\"Please enter your full name: \\\") fmt.Scanln(&firstName, &lastName) // fmt.Scanf(\\\"%s %s\\\", &firstName, &lastName) fmt.Printf(\\\"Hi %s %s!\\\\n\\\", firstName, lastName) // Hi Chris Naegels fmt.Sscanf(input, format, &f, &i, &s) fmt.Println(\\\"From the string we read: \\\", f, i, s) // 输出结果: From the string we read: 56.12 5212 Go } \",\"Scanln() 扫描来自标准输入的文本，将空格分隔的值依次存放到后续的参数内，直到碰到换行。Scanf() 与其类似，除了 Scanf() 的第一个参数用作格式字符串，用来决定如何读取。Sscan... 和以 Sscan... 开头的函数则是从字符串读取，除此之外，与 Scanf() 相同。如果这些函数读取到的结果与您预想的不同，您可以检查成功读入数据的个数和返回的错误。\",\"您也可以使用 bufio 包提供的缓冲读取器 (buffered reader) 来读取数据，正如以下例子所示：\",\"示例 12.2 readinput2.go：\",\"package main import ( \\\"fmt\\\" \\\"bufio\\\" \\\"os\\\" ) var inputReader *bufio.Reader var input string var err error func main() { inputReader = bufio.NewReader(os.Stdin) fmt.Println(\\\"Please enter some input: \\\") input, err = inputReader.ReadString('\\\\n') if err == nil { fmt.Printf(\\\"The input was: %s\\\\n\\\", input) } } \",\"inputReader 是一个指向 bufio.Reader 的指针。inputReader := bufio.NewReader(os.Stdin) 这行代码，将会创建一个读取器，并将其与标准输入绑定。\",\"bufio.NewReader() 构造函数的签名为：func NewReader(rd io.Reader) *Reader\",\"该函数的实参可以是满足 io.Reader 接口的任意对象（任意包含有适当的 Read() 方法的对象，请参考章节 11.8），函数返回一个新的带缓冲的 io.Reader 对象，它将从指定读取器（例如 os.Stdin）读取内容。\",\"返回的读取器对象提供一个方法 ReadString(delim byte)，该方法从输入中读取内容，直到碰到 delim 指定的字符，然后将读取到的内容连同 delim 字符一起放到缓冲区。\",\"ReadString 返回读取到的字符串，如果碰到错误则返回 nil。如果它一直读到文件结束，则返回读取到的字符串和 io.EOF。如果读取过程中没有碰到 delim 字符，将返回错误 err != nil。\",\"在上面的例子中，我们会读取键盘输入，直到回车键 (\\\\n) 被按下。\",\"屏幕是标准输出 os.Stdout；os.Stderr 用于显示错误信息，大多数情况下等同于 os.Stdout。\",\"一般情况下，我们会省略变量声明，而使用 :=，例如：\",\"inputReader := bufio.NewReader(os.Stdin) input, err := inputReader.ReadString('\\\\n') \",\"我们将从现在开始使用这种写法。\",\"第二个例子从键盘读取输入，使用了 switch 语句：\",\"示例 12.3 switch_input.go：\",\"package main import ( \\\"fmt\\\" \\\"os\\\" \\\"bufio\\\" ) func main() { inputReader := bufio.NewReader(os.Stdin) fmt.Println(\\\"Please enter your name:\\\") input, err := inputReader.ReadString('\\\\n') if err != nil { fmt.Println(\\\"There were errors reading, exiting program.\\\") return } fmt.Printf(\\\"Your name is %s\\\", input) // For Unix: test with delimiter \\\"\\\\n\\\", for Windows: test with \\\"\\\\r\\\\n\\\" switch input { case \\\"Philip\\\\r\\\\n\\\": fmt.Println(\\\"Welcome Philip!\\\") case \\\"Chris\\\\r\\\\n\\\": fmt.Println(\\\"Welcome Chris!\\\") case \\\"Ivo\\\\r\\\\n\\\": fmt.Println(\\\"Welcome Ivo!\\\") default: fmt.Printf(\\\"You are not welcome here! Goodbye!\\\") } // version 2: switch input { case \\\"Philip\\\\r\\\\n\\\": fallthrough case \\\"Ivo\\\\r\\\\n\\\": fallthrough case \\\"Chris\\\\r\\\\n\\\": fmt.Printf(\\\"Welcome %s\\\\n\\\", input) default: fmt.Printf(\\\"You are not welcome here! Goodbye!\\\\n\\\") } // version 3: switch input { case \\\"Philip\\\\r\\\\n\\\", \\\"Ivo\\\\r\\\\n\\\": fmt.Printf(\\\"Welcome %s\\\\n\\\", input) default: fmt.Printf(\\\"You are not welcome here! Goodbye!\\\\n\\\") } } \",\"注意：Unix 和 Windows 的行结束符是不同的！\",\"练习\",\"练习 12.1:word_letter_count.go\",\"编写一个程序，从键盘读取输入。当用户输入 'S' 的时候表示输入结束，这时程序输出 3 个数字： i) 输入的字符的个数，包括空格，但不包括 '\\\\r' 和 '\\\\n' ii) 输入的单词的个数 iii) 输入的行数\",\"练习 12.2:calculator.go\",\"编写一个简单的逆波兰式计算器，它接受用户输入的整型数（最大值 999999）和运算符 +、-、*、/。 输入的格式为：number1 ENTER number2 ENTER operator ENTER --> 显示结果 当用户输入字符 'q' 时，程序结束。请使用您在练习 11.13 中开发的 stack 包。\"]},\"678\":{\"h\":\"12.2.1 读文件\",\"t\":[\"在 Go 语言中，文件使用指向 os.File 类型的指针来表示的，也叫做文件句柄。我们在前面章节使用到过标准输入 os.Stdin 和标准输出 os.Stdout，他们的类型都是 *os.File。让我们来看看下面这个程序：\",\"示例 12.4 fileinput.go：\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"io\\\" \\\"os\\\" ) func main() { inputFile, inputError := os.Open(\\\"input.dat\\\") if inputError != nil { fmt.Printf(\\\"An error occurred on opening the inputfile\\\\n\\\" + \\\"Does the file exist?\\\\n\\\" + \\\"Have you got access to it?\\\\n\\\") return // exit the function on error } defer inputFile.Close() inputReader := bufio.NewReader(inputFile) for { inputString, readerError := inputReader.ReadString('\\\\n') fmt.Printf(\\\"The input was: %s\\\", inputString) if readerError == io.EOF { return } } } \",\"变量 inputFile 是 *os.File 类型的。该类型是一个结构，表示一个打开文件的描述符（文件句柄）。然后，使用 os 包里的 Open() 函数来打开一个文件。该函数的参数是文件名，类型为 string。在上面的程序中，我们以只读模式打开 input.dat 文件。\",\"如果文件不存在或者程序没有足够的权限打开这个文件，Open 函数会返回一个错误：inputFile, inputError = os.Open(\\\"input.dat\\\")。如果文件打开正常，我们就使用 defer inputFile.Close() 语句确保在程序退出前关闭该文件。然后，我们使用 bufio.NewReader() 来获得一个读取器变量。\",\"通过使用 bufio 包提供的读取器（写入器也类似），如上面程序所示，我们可以很方便的操作相对高层的 string 对象，而避免了去操作比较底层的字节。\",\"接着，我们在一个无限循环中使用 ReadString('\\\\n') 或 ReadBytes('\\\\n') 将文件的内容逐行（行结束符 '\\\\n'）读取出来。\",\"注意： 在之前的例子中，我们看到，Unix 和 Linux 的行结束符是 \\\\n，而 Windows 的行结束符是 \\\\r\\\\n。在使用 ReadString 和 ReadBytes 方法的时候，我们不需要关心操作系统的类型，直接使用 \\\\n 就可以了。另外，我们也可以使用 ReadLine() 方法来实现相同的功能。\",\"一旦读取到文件末尾，变量 readerError 的值将变成非空（事实上，其值为常量 io.EOF），我们就会执行 return 语句从而退出循环。\",\"其他类似函数：\",\"1) 将整个文件的内容读到一个字符串里：\",\"如果您想这么做，可以使用 io/ioutil 包里的 ioutil.ReadFile() 方法，该方法第一个返回值的类型是 []byte，里面存放读取到的内容，第二个返回值是错误，如果没有错误发生，第二个返回值为 nil。请看示例 12.5。类似的，函数 WriteFile() 可以将 []byte 的值写入文件。\",\"示例 12.5 read_write_file1.go：\",\"package main import ( \\\"fmt\\\" \\\"io/ioutil\\\" \\\"os\\\" ) func main() { inputFile := \\\"products.txt\\\" outputFile := \\\"products_copy.txt\\\" buf, err := ioutil.ReadFile(inputFile) if err != nil { fmt.Fprintf(os.Stderr, \\\"File Error: %s\\\\n\\\", err) // panic(err.Error()) } fmt.Printf(\\\"%s\\\\n\\\", string(buf)) err = ioutil.WriteFile(outputFile, buf, 0644) // oct, not hex if err != nil { panic(err.Error()) } } \",\"2) 带缓冲的读取\",\"在很多情况下，文件的内容是不按行划分的，或者干脆就是一个二进制文件。在这种情况下，ReadString() 就无法使用了，我们可以使用 bufio.Reader 的 Read()，它只接收一个参数：\",\"buf := make([]byte, 1024) ... n, err := inputReader.Read(buf) if (n == 0) { break} \",\"变量 n 的值表示读取到的字节数.\",\"3) 按列读取文件中的数据\",\"如果数据是按列排列并用空格分隔的，你可以使用 fmt 包提供的以 FScan... 开头的一系列函数来读取他们。请看以下程序，我们将 3 列的数据分别读入变量 v1、v2 和 v3 内，然后分别把他们添加到切片的尾部。\",\"示例 12.6 read_file2.go：\",\"package main import ( \\\"fmt\\\" \\\"os\\\" ) func main() { file, err := os.Open(\\\"products2.txt\\\") if err != nil { panic(err) } defer file.Close() var col1, col2, col3 []string for { var v1, v2, v3 string _, err := fmt.Fscanln(file, &v1, &v2, &v3) // scans until newline if err != nil { break } col1 = append(col1, v1) col2 = append(col2, v2) col3 = append(col3, v3) } fmt.Println(col1) fmt.Println(col2) fmt.Println(col3) } \",\"输出结果：\",\"[ABC FUNC GO] [40 56 45] [150 280 356] \",\"注意：path 包里包含一个子包叫 filepath，这个子包提供了跨平台的函数，用于处理文件名和路径。例如 Base() 函数用于获得路径中的最后一个元素（不包含后面的分隔符）：\",\"import \\\"path/filepath\\\" filename := filepath.Base(path) \",\"练习 12.3：read_csv.go\",\"文件 products.txt 的内容如下：\",\"\\\"The ABC of Go\\\";25.5;1500 \\\"Functional Programming with Go\\\";56;280 \\\"Go for It\\\";45.9;356 \\\"The Go Way\\\";55;500 \",\"每行的第一个字段为标题，第二个字段为价格，第三个字段为数量。内容的格式基本与 示例 12.3c 的相同，除了分隔符改成了分号。请读取出文件的内容，创建一个结构用于存取一行的数据，然后使用结构的切片，并把数据打印出来。\",\"关于解析 CSV 文件，encoding/csv 包提供了相应的功能。具体请参考 http://golang.org/pkg/encoding/csv/ 。\"]},\"679\":{\"h\":\"12.2.2 compress 包：读取压缩文件\",\"t\":[\"compress 包提供了读取压缩文件的功能，支持的压缩文件格式为：bzip2、flate、gzip、lzw 和 zlib。\",\"下面的程序展示了如何读取一个 gzip 文件。\",\"示例 12.7 gzipped.go：\",\"package main import ( \\\"fmt\\\" \\\"bufio\\\" \\\"os\\\" \\\"compress/gzip\\\" ) func main() { fName := \\\"MyFile.gz\\\" var r *bufio.Reader fi, err := os.Open(fName) if err != nil { fmt.Fprintf(os.Stderr, \\\"%v, Can't open %s: error: %s\\\\n\\\", os.Args[0], fName, err) os.Exit(1) } defer fi.Close() fz, err := gzip.NewReader(fi) if err != nil { r = bufio.NewReader(fi) } else { r = bufio.NewReader(fz) } for { line, err := r.ReadString('\\\\n') if err != nil { fmt.Println(\\\"Done reading file\\\") os.Exit(0) } fmt.Println(line) } } \"]},\"680\":{\"h\":\"12.2.3 写文件\",\"t\":[\"请看以下程序：\",\"示例 12.8 fileoutput.go：\",\"package main import ( \\\"os\\\" \\\"bufio\\\" \\\"fmt\\\" ) func main () { // var outputWriter *bufio.Writer // var outputFile *os.File // var outputError os.Error // var outputString string outputFile, outputError := os.OpenFile(\\\"output.dat\\\", os.O_WRONLY|os.O_CREATE, 0666) if outputError != nil { fmt.Printf(\\\"An error occurred with file opening or creation\\\\n\\\") return } defer outputFile.Close() outputWriter := bufio.NewWriter(outputFile) outputString := \\\"hello world!\\\\n\\\" for i:=0; i<10; i++ { outputWriter.WriteString(outputString) } outputWriter.Flush() } \",\"除了文件句柄，我们还需要 bufio 的 Writer。我们以只写模式打开文件 output.dat，如果文件不存在则自动创建：\",\"outputFile, outputError := os.OpenFile(\\\"output.dat\\\", os.O_WRONLY|os.O_CREATE, 0666) \",\"可以看到，OpenFile 函数有三个参数：文件名、一个或多个标志（使用逻辑运算符 | 连接），使用的文件权限。\",\"我们通常会用到以下标志：\",\"os.O_RDONLY：只读\",\"os.O_WRONLY：只写\",\"os.O_CREATE：创建：如果指定文件不存在，就创建该文件。\",\"os.O_TRUNC：截断：如果指定文件已存在，就将该文件的长度截为 0 。\",\"在读文件的时候，文件的权限是被忽略的，所以在使用 OpenFile() 时传入的第三个参数可以用 0 。而在写文件时，不管是 Unix 还是 Windows，都需要使用 0666。\",\"然后，我们创建一个写入器（缓冲区）对象：\",\"outputWriter := bufio.NewWriter(outputFile) \",\"接着，使用一个 for 循环，将字符串写入缓冲区，写 10 次：outputWriter.WriteString(outputString)\",\"缓冲区的内容紧接着被完全写入文件：outputWriter.Flush()\",\"如果写入的东西很简单，我们可以使用 fmt.Fprintf(outputFile, \\\"Some test data.\\\\n\\\") 直接将内容写入文件。fmt 包里的 F... 开头的 Print() 函数可以直接写入任何 io.Writer，包括文件（请参考章节 12.8)。\",\"程序 filewrite.go 展示了不使用 fmt.FPrintf() 函数，使用其他函数如何写文件：\",\"示例 12.8 filewrite.go：\",\"package main import \\\"os\\\" func main() { os.Stdout.WriteString(\\\"hello, world\\\\n\\\") f, _ := os.OpenFile(\\\"test\\\", os.O_CREATE|os.O_WRONLY, 0666) defer f.Close() f.WriteString(\\\"hello, world in a file\\\\n\\\") } \",\"使用 os.Stdout.WriteString(\\\"hello, world\\\\n\\\")，我们可以输出到屏幕。\",\"我们以只写模式创建或打开文件 \\\"test\\\" ，并且忽略了可能发生的错误：f, _ := os.OpenFile(\\\"test\\\", os.O_CREATE|os.O_WRONLY, 0666)\",\"我们不使用缓冲区，直接将内容写入文件：f.WriteString()\",\"练习 12.4：wiki_part1.go\",\"（这是一个独立的练习，但是同时也是为章节 15.4 做准备）\",\"程序中的数据结构如下，是一个包含以下字段的结构:\",\"type Page struct { Title string Body []byte } \",\"请给这个结构编写一个 save() 方法，将 Title 作为文件名、Body 作为文件内容，写入到文本文件中。\",\"再编写一个 load() 函数，接收的参数是字符串 title，该函数读取出与 title 对应的文本文件。请使用 *Page 做为参数，因为这个结构可能相当巨大，我们不想在内存中拷贝它。请使用 ioutil 包里的函数（参考章节 12.2.1）。\",\"如何拷贝一个文件到另一个文件？最简单的方式就是使用 io 包：\",\"示例 12.10 filecopy.go：\",\"// filecopy.go package main import ( \\\"fmt\\\" \\\"io\\\" \\\"os\\\" ) func main() { CopyFile(\\\"target.txt\\\", \\\"source.txt\\\") fmt.Println(\\\"Copy done!\\\") } func CopyFile(dstName, srcName string) (written int64, err error) { src, err := os.Open(srcName) if err != nil { return } defer src.Close() dst, err := os.Create(dstName) if err != nil { return } defer dst.Close() return io.Copy(dst, src) } \",\"注意 defer 的使用：当打开 dst 文件时发生了错误，那么 defer 仍然能够确保 src.Close() 执行。如果不这么做，src 文件会一直保持打开状态并占用资源。\"]},\"681\":{\"h\":\"12.4.1 os 包\",\"t\":[\"os 包中有一个 string 类型的切片变量 os.Args，用来处理一些基本的命令行参数，它在程序启动后读取命令行输入的参数。来看下面的打招呼程序：\",\"示例 12.11 os_args.go：\",\"// os_args.go package main import ( \\\"fmt\\\" \\\"os\\\" \\\"strings\\\" ) func main() { who := \\\"Alice \\\" if len(os.Args) > 1 { who += strings.Join(os.Args[1:], \\\" \\\") } fmt.Println(\\\"Good Morning\\\", who) } \",\"我们在 IDE 或编辑器中直接运行这个程序输出：Good Morning Alice\",\"我们在命令行运行 os_args 或 ./os_args 会得到同样的结果。\",\"但是我们在命令行加入参数，像这样：os_args John Bill Marc Luke，将得到这样的输出：Good Morning Alice John Bill Marc Luke\",\"这个命令行参数会放置在切片 os.Args[] 中（以空格分隔），从索引 1 开始（os.Args[0] 放的是程序本身的名字，在本例中是 os_args）。函数 strings.Join 以空格为间隔连接这些参数。\",\"练习 12.5：hello_who.go\",\"写一个“Hello World”的变种程序：把人的名字作为程序命令行执行的一个参数，比如： hello_who Evan Michael Laura 那么会输出 Hello Evan Michael Laura!\"]},\"682\":{\"h\":\"12.4.2 flag 包\",\"t\":[\"flag 包有一个扩展功能用来解析命令行选项。但是通常被用来替换基本常量，例如，在某些情况下我们希望在命令行给常量一些不一样的值。（参看 19 章的项目）\",\"在 flag 包中有一个 Flag 是被定义成一个含有如下字段的结构体：\",\"type Flag struct { Name string // name as it appears on command line Usage string // help message Value Value // value as set DefValue string // default value (as text); for usage message } \",\"下面的程序 echo.go 模拟了 Unix 的 echo 功能：\",\"package main import ( \\\"flag\\\" // command line option parser \\\"os\\\" ) var NewLine = flag.Bool(\\\"n\\\", false, \\\"print newline\\\") // echo -n flag, of type *bool const ( Space = \\\" \\\" Newline = \\\"\\\\n\\\" ) func main() { flag.PrintDefaults() flag.Parse() // Scans the arg list and sets up flags var s string = \\\"\\\" for i := 0; i < flag.NArg(); i++ { if i > 0 { s += \\\" \\\" if *NewLine { // -n is parsed, flag becomes true s += Newline } } s += flag.Arg(i) } os.Stdout.WriteString(s) } \",\"flag.Parse() 扫描参数列表（或者常量列表）并设置 flag, flag.Arg(i) 表示第 i 个参数。Parse() 之后 flag.Arg(i) 全部可用，flag.Arg(0) 就是第一个真实的 flag，而不是像 os.Args(0) 放置程序的名字。\",\"flag.Narg() 返回参数的数量。解析后 flag 或常量就可用了。flag.Bool() 定义了一个默认值是 false 的 flag：当在命令行出现了第一个参数（这里是 'n'），flag 被设置成 true（NewLine 是 *bool 类型）。flag 被解引用到 *NewLine，所以当值是 true 时将添加一个 Newline(\\\"\\\\n\\\")。\",\"flag.PrintDefaults() 打印 flag 的使用帮助信息，本例中打印的是：\",\"-n=false: print newline \",\"flag.VisitAll(fn func(*Flag)) 是另一个有用的功能：按照字典顺序遍历 flag，并且对每个标签调用 fn （参考 15.8 章的例子）\",\"当在命令行 (Windows) 中执行：echo.exe A B C，将输出：A B C；执行 echo.exe -n A B C，将输出：\",\"A B C \",\"每个字符的输出都新起一行，每次都在输出的数据前面打印使用帮助信息：-n=false: print newline。\",\"对于 flag.Bool 你可以设置布尔型 flag 来测试你的代码，例如定义一个 flag processedFlag:\",\"var processedFlag = flag.Bool(\\\"proc\\\", false, \\\"nothing processed yet\\\") \",\"在后面用如下代码来测试：\",\"if *processedFlag { // found flag -proc r = process() } \",\"要给 flag 定义其它类型，可以使用 flag.Int()，flag.Float64()，flag.String()。\",\"在第 15.8 章你将找到一个具体的例子。\",\"在下面的例子中，我们结合使用了缓冲读取文件和命令行 flag 解析这两项技术。如果不加参数，那么你输入什么屏幕就打印什么。\",\"参数被认为是文件名，如果文件存在的话就打印文件内容到屏幕。命令行执行 cat test 测试输出。\",\"示例 12.11 cat.go：\",\"package main import ( \\\"bufio\\\" \\\"flag\\\" \\\"fmt\\\" \\\"io\\\" \\\"os\\\" ) func cat(r *bufio.Reader) { for { buf, err := r.ReadBytes('\\\\n') fmt.Fprintf(os.Stdout, \\\"%s\\\", buf) if err == io.EOF { break } } return } func main() { flag.Parse() if flag.NArg() == 0 { cat(bufio.NewReader(os.Stdin)) } for i := 0; i < flag.NArg(); i++ { f, err := os.Open(flag.Arg(i)) if err != nil { fmt.Fprintf(os.Stderr, \\\"%s:error reading from %s: %s\\\\n\\\", os.Args[0], flag.Arg(i), err.Error()) continue } cat(bufio.NewReader(f)) f.Close() } } \",\"在 12.6 章节，我们将看到如何使用缓冲写入。\",\"练习 12.6：cat_numbered.go\",\"扩展 cat.go 例子，使用 flag 添加一个选项，目的是为每一行头部加入一个行号。使用 cat -n test 测试输出。\",\"切片提供了 Go 中处理 I/O 缓冲的标准方式，下面 cat 函数的第二版中，在一个切片缓冲内使用无限 for 循环（直到文件尾部 EOF）读取文件，并写入到标准输出（os.Stdout）。\",\"func cat(f *os.File) { const NBUF = 512 var buf [NBUF]byte for { switch nr, err := f.Read(buf[:]); { case nr < 0: fmt.Fprintf(os.Stderr, \\\"cat: error reading: %s\\\\n\\\", err.Error()) os.Exit(1) case nr == 0: // EOF return case nr > 0: if nw, ew := os.Stdout.Write(buf[0:nr]); nw != nr { fmt.Fprintf(os.Stderr, \\\"cat: error writing: %s\\\\n\\\", ew.Error()) } } } } \",\"上面的代码来自于 cat2.go，使用了 os 包中的 os.File 和 Read 方法；cat2.go 与 cat.go 具有同样的功能。\",\"示例 12.14 cat2.go：\",\"package main import ( \\\"flag\\\" \\\"fmt\\\" \\\"os\\\" ) func cat(f *os.File) { const NBUF = 512 var buf [NBUF]byte for { switch nr, err := f.Read(buf[:]); true { case nr < 0: fmt.Fprintf(os.Stderr, \\\"cat: error reading: %s\\\\n\\\", err.Error()) os.Exit(1) case nr == 0: // EOF return case nr > 0: if nw, ew := os.Stdout.Write(buf[0:nr]); nw != nr { fmt.Fprintf(os.Stderr, \\\"cat: error writing: %s\\\\n\\\", ew.Error()) } } } } func main() { flag.Parse() // Scans the arg list and sets up flags if flag.NArg() == 0 { cat(os.Stdin) } for i := 0; i < flag.NArg(); i++ { f, err := os.Open(flag.Arg(i)) if f == nil { fmt.Fprintf(os.Stderr, \\\"cat: can't open %s: error %s\\\\n\\\", flag.Arg(i), err) os.Exit(1) } cat(f) f.Close() } } \",\"defer 关键字（参看 6.4）对于在函数结束时关闭打开的文件非常有用，例如下面的代码片段：\",\"func data(name string) string { f, _ := os.OpenFile(name, os.O_RDONLY, 0) defer f.Close() // idiomatic Go code! contents, _ := ioutil.ReadAll(f) return string(contents) } \",\"在函数 return 后执行了 f.Close()\",\"例子程序 io_interfaces.go 很好的阐述了 io 包中的接口概念。\",\"示例 12.15 io_interfaces.go：\",\"// interfaces being used in the GO-package fmt package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"os\\\" ) func main() { // unbuffered fmt.Fprintf(os.Stdout, \\\"%s\\\\n\\\", \\\"hello world! - unbuffered\\\") // buffered: os.Stdout implements io.Writer buf := bufio.NewWriter(os.Stdout) // and now so does buf. fmt.Fprintf(buf, \\\"%s\\\\n\\\", \\\"hello world! - buffered\\\") buf.Flush() } \",\"输出：\",\"hello world! - unbuffered hello world! - buffered \",\"下面是 fmt.Fprintf() 函数的实际签名\",\"func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) \",\"不是写入一个文件，而是写入一个 io.Writer 接口类型的变量，下面是 Writer 接口在 io 包中的定义：\",\"type Writer interface { Write(p []byte) (n int, err error) } \",\"fmt.Fprintf() 依据指定的格式向第一个参数内写入字符串，第一个参数必须实现了 io.Writer 接口。Fprintf() 能够写入任何类型，只要其实现了 Write 方法，包括 os.Stdout，文件（例如 os.File），管道，网络连接，通道等等。同样地，也可以使用 bufio 包中缓冲写入。bufio 包中定义了 type Writer struct{...} 。\",\"bufio.Writer 实现了 Write() 方法：\",\"func (b *Writer) Write(p []byte) (nn int, err error) \",\"它还有一个工厂函数：传给它一个 io.Writer 类型的参数，它会返回一个带缓冲的 bufio.Writer 类型的 io.Writer ：\",\"func NewWriter(wr io.Writer) (b *Writer) \",\"适合任何形式的缓冲写入。\",\"在缓冲写入的最后千万不要忘了使用 Flush()，否则最后的输出不会被写入。\",\"在 15.2-15.8 章节，我们将使用 fmt.Fprint() 函数向 http.ResponseWriter 写入，其同样实现了 io.Writer 接口。\",\"练习 12.7：remove_3till5char.go\",\"下面的代码有一个输入文件 goprogram，然后以每一行为单位读取，从读取的当前行中截取第 3 到第 5 的字节写入另一个文件。然而当你运行这个程序，输出的文件却是个空文件。找出程序逻辑中的 bug，修正它并测试。\",\"package main import ( \\\"bufio\\\" \\\"fmt\\\" \\\"os\\\" \\\"io\\\" ) func main() { inputFile, _ := os.Open(\\\"goprogram\\\") outputFile, _ := os.OpenFile(\\\"goprogramT\\\", os.O_WRONLY|os.O_CREATE, 0666) defer inputFile.Close() defer outputFile.Close() inputReader := bufio.NewReader(inputFile) outputWriter := bufio.NewWriter(outputFile) for { inputString, _, readerError := inputReader.ReadLine() if readerError == io.EOF { fmt.Println(\\\"EOF\\\") return } outputString := string(inputString[2:5]) + \\\"\\\\r\\\\n\\\" _, err := outputWriter.WriteString(outputString) if err != nil { fmt.Println(err) return } } fmt.Println(\\\"Conversion done\\\") } \",\"数据结构要在网络中传输或保存到文件，就必须对其编码和解码；目前存在很多编码格式：JSON，XML，gob，Google 缓冲协议等等。Go 语言支持所有这些编码格式；在后面的章节，我们将讨论前三种格式。\",\"结构可能包含二进制数据，如果将其作为文本打印，那么可读性是很差的。另外结构内部可能包含匿名字段，而不清楚数据的用意。\",\"通过把数据转换成纯文本，使用命名的字段来标注，让其具有可读性。这样的数据格式可以通过网络传输，而且是与平台无关的，任何类型的应用都能够读取和输出，不与操作系统和编程语言的类型相关。\",\"下面是一些术语说明：\",\"数据结构 --> 指定格式 = 序列化 或 编码（传输之前）\",\"指定格式 --> 数据结构 = 反序列化 或 解码（传输之后）\",\"序列化是在内存中把数据转换成指定格式（数据 -> 字符串），反之亦然（字符串 -> 数据）。\",\"编码也是一样的，只是输出一个数据流（实现了 io.Writer 接口）；解码是从一个数据流（实现了 io.Reader）输出到一个数据结构。\",\"我们都比较熟悉 XML 格式(参阅 12.10)；但有些时候 JSON（JavaScript Object Notation，参阅 http://json.org）被作为首选，主要是由于其格式上非常简洁。通常 JSON 被用于 web 后端和浏览器之间的通讯，但是在其它场景也同样的有用。\",\"这是一个简短的 JSON 片段：\",\"{ \\\"Person\\\": { \\\"FirstName\\\": \\\"Laura\\\", \\\"LastName\\\": \\\"Lynn\\\" } } \",\"尽管 XML 被广泛的应用，但是 JSON 更加简洁、轻量（占用更少的内存、磁盘及网络带宽）和更好的可读性，这也使它越来越受欢迎。\",\"Go 语言的 json 包可以让你在程序中方便的读取和写入 JSON 数据。\",\"我们将在下面的例子里使用 json 包，并使用练习 10.1 vcard.go 中一个简化版本的 Address 和 VCard 结构（为了简单起见，我们忽略了很多错误处理，不过在实际应用中你必须要合理的处理这些错误，参阅 13 章）。\",\"示例 12.16 json.go：\",\"// json.go package main import ( \\\"encoding/json\\\" \\\"fmt\\\" \\\"log\\\" \\\"os\\\" ) type Address struct { Type string City string Country string } type VCard struct { FirstName string LastName string Addresses []*Address Remark string } func main() { pa := &Address{\\\"private\\\", \\\"Aartselaar\\\", \\\"Belgium\\\"} wa := &Address{\\\"work\\\", \\\"Boom\\\", \\\"Belgium\\\"} vc := VCard{\\\"Jan\\\", \\\"Kersschot\\\", []*Address{pa, wa}, \\\"none\\\"} // fmt.Printf(\\\"%v: \\\\n\\\", vc) // {Jan Kersschot [0x126d2b80 0x126d2be0] none}: // JSON format: js, _ := json.Marshal(vc) fmt.Printf(\\\"JSON format: %s\\\", js) // using an encoder: file, _ := os.OpenFile(\\\"vcard.json\\\", os.O_CREATE|os.O_WRONLY, 0666) defer file.Close() enc := json.NewEncoder(file) err := enc.Encode(vc) if err != nil { log.Println(\\\"Error in encoding json\\\") } } \",\"json.Marshal() 的函数签名是 func Marshal(v interface{}) ([]byte, error)，下面是数据编码后的 JSON 文本（实际上是一个 []byte）：\",\"{ \\\"FirstName\\\": \\\"Jan\\\", \\\"LastName\\\": \\\"Kersschot\\\", \\\"Addresses\\\": [{ \\\"Type\\\": \\\"private\\\", \\\"City\\\": \\\"Aartselaar\\\", \\\"Country\\\": \\\"Belgium\\\" }, { \\\"Type\\\": \\\"work\\\", \\\"City\\\": \\\"Boom\\\", \\\"Country\\\": \\\"Belgium\\\" }], \\\"Remark\\\": \\\"none\\\" } \",\"出于安全考虑，在 web 应用中最好使用 json.MarshalforHTML() 函数，其对数据执行 HTML 转码，所以文本可以被安全地嵌在 HTML <script> 标签中。\",\"json.NewEncoder() 的函数签名是 func NewEncoder(w io.Writer) *Encoder，返回的 Encoder 类型的指针可调用方法 Encode(v interface{})，将数据对象 v 的 json 编码写入 io.Writerw 中。\",\"JSON 与 Go 类型对应如下：\",\"bool 对应 JSON 的 boolean\",\"float64 对应 JSON 的 number\",\"string 对应 JSON 的 string\",\"nil 对应 JSON 的 null\",\"不是所有的数据都可以编码为 JSON 类型，只有验证通过的数据结构才能被编码：\",\"JSON 对象只支持字符串类型的 key；要编码一个 Go map 类型，map 必须是 map[string]T（T 是 json 包中支持的任何类型）\",\"Channel，复杂类型和函数类型不能被编码\",\"不支持循环数据结构；它将引起序列化进入一个无限循环\",\"指针可以被编码，实际上是对指针指向的值进行编码（或者指针是 nil）\"]},\"683\":{\"h\":\"反序列化：\",\"t\":[\"json.Unmarshal() 的函数签名是 func Unmarshal(data []byte, v interface{}) error 把 JSON 解码为数据结构。\",\"示例 12.16 中对 vc 编码后的数据为 js ，对其解码时，我们首先创建结构 VCard 用来保存解码的数据：var v VCard 并调用 json.Unmarshal(js, &v)，解析 []byte 中的 JSON 数据并将结果存入指针 &v 指向的值。\",\"虽然反射能够让 JSON 字段去尝试匹配目标结构字段；但是只有真正匹配上的字段才会填充数据。字段没有匹配不会报错，而是直接忽略掉。\",\"（练习 15.2b twitter_status_json.go 中用到了 Unmarshal()）\"]},\"684\":{\"h\":\"解码任意的数据：\",\"t\":[\"json 包使用 map[string]interface{} 和 []interface{} 储存任意的 JSON 对象和数组；其可以被反序列化为任何的 JSON blob 存储到接口值中。\",\"来看这个 JSON 数据，被存储在变量 b 中：\",\"b := []byte(`{\\\"Name\\\": \\\"Wednesday\\\", \\\"Age\\\": 6, \\\"Parents\\\": [\\\"Gomez\\\", \\\"Morticia\\\"]}`) \",\"不用理解这个数据的结构，我们可以直接使用 Unmarshal() 把这个数据编码并保存在接口值中：\",\"var f interface{} err := json.Unmarshal(b, &f) \",\"f 指向的值是一个 map，key 是一个字符串，value 是自身存储作为空接口类型的值：\",\"map[string]interface{} { \\\"Name\\\": \\\"Wednesday\\\", \\\"Age\\\": 6, \\\"Parents\\\": []interface{} { \\\"Gomez\\\", \\\"Morticia\\\", }, } \",\"要访问这个数据，我们可以使用类型断言\",\"m := f.(map[string]interface{}) \",\"我们可以通过 for range 语法和 type switch 来访问其实际类型：\",\"for k, v := range m { switch vv := v.(type) { case string: fmt.Println(k, \\\"is string\\\", vv) case int: fmt.Println(k, \\\"is int\\\", vv) case []interface{}: fmt.Println(k, \\\"is an array:\\\") for i, u := range vv { fmt.Println(i, u) } default: fmt.Println(k, \\\"is of a type I don’t know how to handle\\\") } } \",\"通过这种方式，你可以处理未知的 JSON 数据，同时可以确保类型安全。\"]},\"685\":{\"h\":\"解码数据到结构\",\"t\":[\"如果我们事先知道 JSON 数据，我们可以定义一个适当的结构并对 JSON 数据反序列化。下面的例子中，我们将定义：\",\"type FamilyMember struct { Name string Age int Parents []string } \",\"并对其反序列化：\",\"var m FamilyMember err := json.Unmarshal(b, &m) \",\"程序实际上是分配了一个新的切片。这是一个典型的反序列化引用类型（指针、切片和 map）的例子。\"]},\"686\":{\"h\":\"编码和解码流\",\"t\":[\"json 包提供 Decoder 和 Encoder 类型来支持常用 JSON 数据流读写。NewDecoder() 和 NewEncoder() 函数分别封装了 io.Reader 和 io.Writer 接口。\",\"func NewDecoder(r io.Reader) *Decoder func NewEncoder(w io.Writer) *Encoder \",\"要想把 JSON 直接写入文件，可以使用 json.NewEncoder 初始化文件（或者任何实现 io.Writer 的类型），并调用 Encode()；反过来与其对应的是使用 json.NewDecoder 和 Decode() 函数：\",\"func NewDecoder(r io.Reader) *Decoder func (dec *Decoder) Decode(v interface{}) error \",\"来看下接口是如何对实现进行抽象的：数据结构可以是任何类型，只要其实现了某种接口，目标或源数据要能够被编码就必须实现 io.Writer 或 io.Reader 接口。由于 Go 语言中到处都实现了 Reader 和 Writer，因此 Encoder 和 Decoder 可被应用的场景非常广泛，例如读取或写入 HTTP 连接、websockets 或文件。\",\"下面是与 12.9 节 JSON 例子等价的 XML 版本：\",\"<Person> <FirstName>Laura</FirstName> <LastName>Lynn</LastName> </Person> \",\"如同 json 包一样，也有 xml.Marshal() 和 xml.Unmarshal() 从 XML 中编码和解码数据；但这个更通用，可以从文件中读取和写入（或者任何实现了 io.Reader 和 io.Writer 接口的类型）\",\"和 JSON 的方式一样，XML 数据可以序列化为结构，或者从结构反序列化为 XML 数据；这些可以在例子 15.8（twitter_status.go）中看到。\",\"encoding/xml 包实现了一个简单的 XML 解析器（SAX），用来解析 XML 数据内容。下面的例子说明如何使用解析器：\",\"示例 12.17 xml.go：\",\"// xml.go package main import ( \\\"encoding/xml\\\" \\\"fmt\\\" \\\"strings\\\" ) var t, token xml.Token var err error func main() { input := \\\"<Person><FirstName>Laura</FirstName><LastName>Lynn</LastName></Person>\\\" inputReader := strings.NewReader(input) p := xml.NewDecoder(inputReader) for t, err = p.Token(); err == nil; t, err = p.Token() { switch token := t.(type) { case xml.StartElement: name := token.Name.Local fmt.Printf(\\\"Token name: %s\\\\n\\\", name) for _, attr := range token.Attr { attrName := attr.Name.Local attrValue := attr.Value fmt.Printf(\\\"An attribute is: %s %s\\\\n\\\", attrName, attrValue) // ... } case xml.EndElement: fmt.Println(\\\"End of token\\\") case xml.CharData: content := string([]byte(token)) fmt.Printf(\\\"This is the content: %v\\\\n\\\", content) // ... default: // ... } } } \",\"输出：\",\"Token name: Person Token name: FirstName This is the content: Laura End of token Token name: LastName This is the content: Lynn End of token End of token \",\"包中定义了若干 XML 标签类型：StartElement，Chardata（这是从开始标签到结束标签之间的实际文本），EndElement，Comment，Directive 或 ProcInst。\",\"包中同样定义了一个结构解析器：NewParser() 方法持有一个 io.Reader（这里具体类型是 strings.NewReader）并生成一个解析器类型的对象。还有一个 Token() 方法返回输入流里的下一个 XML token。在输入流的结尾处，会返回 (nil,io.EOF)\",\"XML 文本被循环处理直到 Token() 返回一个错误，因为已经到达文件尾部，再没有内容可供处理了。通过一个 type-switch 可以根据一些 XML 标签进一步处理。Chardata 中的内容只是一个 []byte，通过字符串转换让其变得可读性强一些。\",\"Gob 是 Go 自己的以二进制形式序列化和反序列化程序数据的格式；可以在 encoding 包中找到。这种格式的数据简称为 Gob （即 Go binary 的缩写）。类似于 Python 的 \\\"pickle\\\" 和 Java 的 \\\"Serialization\\\"。\",\"Gob 通常用于远程方法调用（RPCs，参见 15.9 节的 rpc 包）参数和结果的传输，以及应用程序和机器之间的数据传输。 它和 JSON 或 XML 有什么不同呢？Gob 特定地用于纯 Go 的环境中，例如，两个用 Go 写的服务之间的通信。这样的话服务可以被实现得更加高效和优化。 Gob 不是可外部定义，语言无关的编码方式。因此它的首选格式是二进制，而不是像 JSON 和 XML 那样的文本格式。 Gob 并不是一种不同于 Go 的语言，而是在编码和解码过程中用到了 Go 的反射。\",\"Gob 文件或流是完全自描述的：里面包含的所有类型都有一个对应的描述，并且总是可以用 Go 解码，而不需要了解文件的内容。\",\"只有可导出的字段会被编码，零值会被忽略。在解码结构体的时候，只有同时匹配名称和可兼容类型的字段才会被解码。当源数据类型增加新字段后，Gob 解码客户端仍然可以以这种方式正常工作：解码客户端会继续识别以前存在的字段。并且还提供了很大的灵活性，比如在发送者看来，整数被编码成没有固定长度的可变长度，而忽略具体的 Go 类型。\",\"假如在发送者这边有一个有结构 T：\",\"type T struct { X, Y, Z int } var t = T{X: 7, Y: 0, Z: 8} \",\"而在接收者这边可以用一个结构体 U 类型的变量 u 来接收这个值：\",\"type U struct { X, Y *int8 } var u U \",\"在接收者中，X 的值是 7，Y 的值是 0（Y 的值并没有从 t 中传递过来，因为它是零值）\",\"和 JSON 的使用方式一样，Gob 使用通用的 io.Writer 接口，通过 NewEncoder() 函数创建 Encoder 对象并调用 Encode()；相反的过程使用通用的 io.Reader 接口，通过 NewDecoder() 函数创建 Decoder 对象并调用 Decode()。\",\"我们把示例 12.12 的信息写进名为 vcard.gob 的文件作为例子。这会产生一个文本可读数据和二进制数据的混合，当你试着在文本编辑中打开的时候会看到。\",\"在示例 12.18 中你会看到一个编解码，并且以字节缓冲模拟网络传输的简单例子：\",\"示例 12.18 gob1.go：\",\"// gob1.go package main import ( \\\"bytes\\\" \\\"fmt\\\" \\\"encoding/gob\\\" \\\"log\\\" ) type P struct { X, Y, Z int Name string } type Q struct { X, Y *int32 Name string } func main() { // Initialize the encoder and decoder. Normally enc and dec would be // bound to network connections and the encoder and decoder would // run in different processes. var network bytes.Buffer // Stand-in for a network connection enc := gob.NewEncoder(&network) // Will write to network. dec := gob.NewDecoder(&network) // Will read from network. // Encode (send) the value. err := enc.Encode(P{3, 4, 5, \\\"Pythagoras\\\"}) if err != nil { log.Fatal(\\\"encode error:\\\", err) } // Decode (receive) the value. var q Q err = dec.Decode(&q) if err != nil { log.Fatal(\\\"decode error:\\\", err) } fmt.Printf(\\\"%q: {%d,%d}\\\\n\\\", q.Name, q.X, q.Y) } // Output: \\\"Pythagoras\\\": {3,4} \",\"示例 12.19 gob2.go 编码到文件：\",\"// gob2.go package main import ( \\\"encoding/gob\\\" \\\"log\\\" \\\"os\\\" ) type Address struct { Type string City string Country string } type VCard struct { FirstName string LastName string Addresses []*Address Remark string } var content string func main() { pa := &Address{\\\"private\\\", \\\"Aartselaar\\\",\\\"Belgium\\\"} wa := &Address{\\\"work\\\", \\\"Boom\\\", \\\"Belgium\\\"} vc := VCard{\\\"Jan\\\", \\\"Kersschot\\\", []*Address{pa,wa}, \\\"none\\\"} // fmt.Printf(\\\"%v: \\\\n\\\", vc) // {Jan Kersschot [0x126d2b80 0x126d2be0] none}: // using an encoder: file, _ := os.OpenFile(\\\"vcard.gob\\\", os.O_CREATE|os.O_WRONLY, 0666) defer file.Close() enc := gob.NewEncoder(file) err := enc.Encode(vc) if err != nil { log.Println(\\\"Error in encoding gob\\\") } } \",\"练习 12.8：degob.go：\",\"写一个程序读取 vcard.gob 文件，解码并打印它的内容。\",\"通过网络传输的数据必须加密，以防止被 hacker（黑客）读取或篡改，并且保证发出的数据和收到的数据检验和一致。 鉴于 Go 母公司的业务，我们毫不惊讶地看到 Go 的标准库为该领域提供了超过 30 个的包：\",\"hash 包：实现了 adler32、crc32、crc64 和 fnv 校验；\",\"crypto 包：实现了其它的 hash 算法，比如 md4、md5、sha1 等。以及完整地实现了 aes、blowfish、rc4、rsa、xtea 等加密算法。\",\"下面的示例用 sha1 和 md5 计算并输出了一些校验值。\",\"示例 12.20 hash_sha1.go：\",\"// hash_sha1.go package main import ( \\\"fmt\\\" \\\"crypto/sha1\\\" \\\"io\\\" \\\"log\\\" ) func main() { hasher := sha1.New() io.WriteString(hasher, \\\"test\\\") b := []byte{} fmt.Printf(\\\"Result: %x\\\\n\\\", hasher.Sum(b)) fmt.Printf(\\\"Result: %d\\\\n\\\", hasher.Sum(b)) // hasher.Reset() data := []byte(\\\"We shall overcome!\\\") n, err := hasher.Write(data) if n!=len(data) || err!=nil { log.Printf(\\\"Hash write error: %v / %v\\\", n, err) } checksum := hasher.Sum(b) fmt.Printf(\\\"Result: %x\\\\n\\\", checksum) } \",\"输出：\",\"Result: a94a8fe5ccb19ba61c4c0873d391e987982fbbd3 Result: [169 74 143 229 204 177 155 166 28 76 8 115 211 145 233 135 152 47 187 211] Result: e2222bfc59850bbb00a722e764a555603bb59b2a \",\"通过调用 sha1.New() 创建了一个新的 hash.Hash 对象，用来计算 SHA1 校验值。Hash 类型实际上是一个接口，它实现了 io.Writer 接口：\",\"type Hash interface { // Write (via the embedded io.Writer interface) adds more data to the running hash. // It never returns an error. io.Writer // Sum appends the current hash to b and returns the resulting slice. // It does not change the underlying hash state. Sum(b []byte) []byte // Reset resets the Hash to its initial state. Reset() // Size returns the number of bytes Sum will return. Size() int // BlockSize returns the hash's underlying block size. // The Write method must be able to accept any amount // of data, but it may operate more efficiently if all writes // are a multiple of the block size. BlockSize() int } \",\"通过 io.WriteString 或 hasher.Write 将给定的 []byte 附加到当前的 hash.Hash 对象中。\",\"练习 12.9：hash_md5.go：\",\"在示例 12.20 中检验 md5 算法。\"]},\"687\":{\"h\":\"第 13 章：错误处理与测试\",\"t\":[\"Go 没有像 Java 和 .NET 那样的 try/catch 异常机制：不能执行抛异常操作。但是有一套 defer-panic-and-recover 机制（参见 13.2-13.3 节）。\",\"Go 的设计者觉得 try/catch 机制的使用太泛滥了，而且从底层向更高的层级抛异常太耗费资源。他们给 Go 设计的机制也可以“捕捉”异常，但是更轻量，并且只应该作为（处理错误的）最后的手段。\",\"Go 是怎么处理普通错误的呢？通过在函数和方法中返回错误对象作为它们的唯一或最后一个返回值——如果返回 nil，则没有错误发生——并且主调 (calling) 函数总是应该检查收到的错误。\",\"永远不要忽略错误，否则可能会导致程序崩溃！！\",\"处理错误并且在函数发生错误的地方给用户返回错误信息：照这样处理就算真的出了问题，你的程序也能继续运行并且通知给用户。panic() 和 recover() 是用来处理真正的异常（无法预测的错误）而不是普通的错误。\",\"库函数通常必须返回某种错误提示给主调函数。\",\"在前面的章节中我们了解了 Go 检查和报告错误条件的惯有方式：\",\"产生错误的函数会返回两个变量，一个值和一个错误码；如果后者是 nil 就是成功，非 nil 就是发生了错误。\",\"为了防止发生错误时正在执行的函数（如果有必要的话甚至会是整个程序）被中止，在调用函数后必须检查错误。\",\"下面这段来自 pack1 包的代码 Func1() 测试了它的返回值：\",\"if value, err := pack1.Func1(param1); err != nil { fmt.Printf(\\\"Error %s in pack1.Func1 with parameter %v\\\", err.Error(), param1) return // or: return err } else { // Process(value) } \",\"为了更清晰的代码，应该总是使用包含错误值变量的 if 复合语句\",\"上例除了 fmt.Printf() 还可以使用 log 中对应的方法（参见 13.3 节和 15.2 节），如果程序中止也没关系的话甚至可以使用 panic()（参见后面的章节）。\",\"Go 有一个预先定义的 error 接口类型\",\"type error interface { Error() string } \",\"错误值用来表示异常状态；我们可以在 5.2 节中看到它的标准用法。处理文件操作的例子可以在 12 章找到；我们将在 15 章看到网络操作的例子。errors 包中有一个 errorString 结构体实现了 error 接口。当程序处于错误状态时可以用 os.Exit(1) 来中止运行。\"]},\"688\":{\"h\":\"13.1.1 定义错误\",\"t\":[\"任何时候当你需要一个新的错误类型，都可以用 errors 包（必须先 import）的 errors.New() 函数接收合适的错误信息来创建，像下面这样：\",\"err := errors.New(\\\"math - square root of negative number\\\") \",\"在示例 13.1 中你可以看到一个简单的用例：\",\"示例 13.1 errors.go：\",\"// errors.go package main import ( \\\"errors\\\" \\\"fmt\\\" ) var errNotFound error = errors.New(\\\"Not found error\\\") func main() { fmt.Printf(\\\"error: %v\\\", errNotFound) } // error: Not found error \",\"可以把它用于计算平方根函数的参数测试：\",\"func Sqrt(f float64) (float64, error) { if f < 0 { return 0, errors.New (\\\"math - square root of negative number\\\") } // implementation of Sqrt } \",\"你可以像下面这样调用 Sqrt() 函数：\",\"if f, err := Sqrt(-1); err != nil { fmt.Printf(\\\"Error: %s\\\\n\\\", err) } \",\"由于 fmt.Printf 会自动调用 String() 方法 （参见 10.7 节），所以错误信息 “Error: math - square root of negative number” 会打印出来。通常（错误信息）都会有像 Error:... 这样的前缀，所以你的错误信息不要以大写字母开头（注：英文只有句首单词首字母大写，这里应当是考虑到这一点）。\",\"在大部分情况下自定义错误结构类型很有意义的，可以包含除了（低层级的）错误信息以外的其它有用信息，例如，正在进行的操作（打开文件等），全路径或名字。看下面例子中 os.Open() 操作触发的 PathError 错误：\",\"// PathError records an error and the operation and file path that caused it. type PathError struct { Op string // \\\"open\\\", \\\"unlink\\\", etc. Path string // The associated file. Err error // Returned by the system call. } func (e *PathError) Error() string { return e.Op + \\\" \\\" + e.Path + \\\": \\\"+ e.Err.Error() } \",\"如果有不同错误条件可能发生，那么对实际的错误使用类型断言或类型判断（type-switch）是很有用的，并且可以根据错误场景做一些补救和恢复操作。\",\"// err != nil if e, ok := err.(*os.PathError); ok { // remedy situation } \",\"或：\",\"switch err := err.(type) { case ParseError: PrintParseError(err) case PathError: PrintPathError(err) ... default: fmt.Printf(\\\"Not a special error, just %s\\\\n\\\", err) } \",\"作为第二个例子考虑用 json 包的情况。当 json.Decode() 在解析 JSON 文档发生语法错误时，指定返回一个 SyntaxError 类型的错误：\",\"type SyntaxError struct { msg string // description of error // error occurred after reading Offset bytes, from which line and columnnr can be obtained Offset int64 } func (e *SyntaxError) Error() string { return e.msg } \",\"在调用代码中你可以像这样用类型断言测试错误是不是上面的类型：\",\"if serr, ok := err.(*json.SyntaxError); ok { line, col := findLine(f, serr.Offset) return fmt.Errorf(\\\"%s:%d:%d: %v\\\", f.Name(), line, col, err) } \",\"包也可以用额外的方法 (methods)定义特定的错误，比如 net.Error：\",\"package net type Error interface { Timeout() bool // Is the error a timeout? Temporary() bool // Is the error temporary? } \",\"在 15.1 节 我们可以看到怎么使用它。\",\"正如你所看到的一样，所有的例子都遵循同一种命名规范：错误类型以 ...Error 结尾，错误变量以 err... 或 Err... 开头或者直接叫 err 或 Err。\",\"syscall 是低阶外部包，用来提供系统基本调用的原始接口。它们返回封装整数类型错误码的 syscall.Errno；类型 syscall.Errno 实现了 Error 接口。\",\"大部分 syscall 函数都返回一个结果和可能的错误，比如：\",\"r, err := syscall.Open(name, mode, perm) if err != nil { fmt.Println(err.Error()) } \",\"os 包也提供了一套像 os.EINAL 这样的标准错误，它们基于 syscall 错误：\",\"var ( EPERM Error = Errno(syscall.EPERM) ENOENT Error = Errno(syscall.ENOENT) ESRCH Error = Errno(syscall.ESRCH) EINTR Error = Errno(syscall.EINTR) EIO Error = Errno(syscall.EIO) ... ) \"]},\"689\":{\"h\":\"13.1.2 用 fmt 创建错误对象\",\"t\":[\"通常你想要返回包含错误参数的更有信息量的字符串，例如：可以用 fmt.Errorf() 来实现：它和 fmt.Printf() 完全一样，接收一个或多个格式占位符的格式化字符串和相应数量的占位变量。和打印信息不同的是它用信息生成错误对象。\",\"比如在前面的平方根例子中使用：\",\"if f < 0 { return 0, fmt.Errorf(\\\"math: square root of negative number %g\\\", f) } \",\"第二个例子：从命令行读取输入时，如果加了 --help 或 -h 标志，我们可以用有用的信息产生一个错误：\",\"if len(os.Args) > 1 && (os.Args[1] == \\\"-h\\\" || os.Args[1] == \\\"--help\\\") { err = fmt.Errorf(\\\"usage: %s infile.txt outfile.txt\\\", filepath.Base(os.Args[0])) return } \",\"当发生像数组下标越界或类型断言失败这样的运行错误时，Go 运行时会触发运行时 panic，伴随着程序的崩溃抛出一个 runtime.Error 接口类型的值。这个错误值有个 RuntimeError() 方法用于区别普通错误。\",\"panic() 可以直接从代码初始化：当错误条件（我们所测试的代码）很严苛且不可恢复，程序不能继续运行时，可以使用 panic() 函数产生一个中止程序的运行时错误。panic() 接收一个做任意类型的参数，通常是字符串，在程序死亡时被打印出来。Go 运行时负责中止程序并给出调试信息。在示例 13.2 panic.go 中阐明了它的工作方式：\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Starting the program\\\") panic(\\\"A severe error occurred: stopping the program!\\\") fmt.Println(\\\"Ending the program\\\") } \",\"输出如下：\",\"Starting the program panic: A severe error occurred: stopping the program! panic PC=0x4f3038 runtime.panic+0x99 /go/src/pkg/runtime/proc.c:1032 runtime.panic(0x442938, 0x4f08e8) main.main+0xa5 E:/Go/GoBoek/code examples/chapter 13/panic.go:8 main.main() runtime.mainstart+0xf 386/asm.s:84 runtime.mainstart() runtime.goexit /go/src/pkg/runtime/proc.c:148 runtime.goexit() ---- Error run E:/Go/GoBoek/code examples/chapter 13/panic.exe with code Crashed ---- Program exited with code -1073741783 \",\"一个检查程序是否被已知用户启动的具体例子：\",\"var user = os.Getenv(\\\"USER\\\") func check() { if user == \\\"\\\" { panic(\\\"Unknown user: no value for $USER\\\") } } \",\"可以在导入包的 init() 函数中检查这些。\",\"当发生错误必须中止程序时，panic() 可以用于错误处理模式：\",\"if err != nil { panic(\\\"ERROR occurred:\\\" + err.Error()) } \",\"Go panicking：\",\"在多层嵌套的函数调用中调用 panic()，可以马上中止当前函数的执行，所有的 defer 语句都会保证执行并把控制权交还给接收到 panic 的函数调用者。这样向上冒泡直到最顶层，并执行（每层的） defer，在栈顶处程序崩溃，并在命令行中用传给 panic() 的值报告错误情况：这个终止过程就是 panicking。\",\"标准库中有许多包含 Must 前缀的函数，像 regexp.MustComplie() 和 template.Must()；当正则表达式或模板中转入的转换字符串导致错误时，这些函数会 panic()。\",\"不能随意地用 panic() 中止程序，必须尽力补救错误让程序能继续执行。\",\"正如名字一样，这个 (recover()) 内建函数被用于从 panic 或错误场景中恢复：让程序可以从 panicking 重新获得控制权，停止终止过程进而恢复正常执行。\",\"recover 只能在 defer 修饰的函数（参见 6.4 节）中使用：用于取得 panic() 调用中传递过来的错误值，如果是正常执行，调用 recover() 会返回 nil，且没有其它效果。\",\"总结：panic() 会导致栈被展开直到 defer 修饰的 recover() 被调用或者程序中止。\",\"下面例子中的 protect() 函数调用函数参数 g 来保护调用者防止从 g 中抛出的运行时 panic，并展示 panic 中的信息：\",\"func protect(g func()) { defer func() { log.Println(\\\"done\\\") // Println executes normally even if there is a panic if err := recover(); err != nil { log.Printf(\\\"run time panic: %v\\\", err) } }() log.Println(\\\"start\\\") g() // possible runtime-error } \",\"这跟 Java 和 .NET 这样的语言中的 catch 块类似。\",\"log 包实现了简单的日志功能：默认的 log 对象向标准错误输出中写入并打印每条日志信息的日期和时间。除了 Println 和 Printf 函数，其它的致命性函数都会在写完日志信息后调用 os.Exit(1)，那些退出函数也是如此。而 Panic 效果的函数会在写完日志信息后调用 panic()；可以在程序必须中止或发生了临界错误时使用它们，就像当 web 服务器不能启动时那样（参见 15.4 节 中的例子）。\",\"log 包用那些方法 (methods) 定义了一个 Logger 接口类型，如果你想自定义日志系统的话可以参考 http://golang.org/pkg/log/#Logger 。\",\"这是一个展示 panic()，defer 和 recover() 怎么结合使用的完整例子：\",\"示例 13.3 panic_recover.go：\",\"// panic_recover.go package main import ( \\\"fmt\\\" ) func badCall() { panic(\\\"bad end\\\") } func test() { defer func() { if e := recover(); e != nil { fmt.Printf(\\\"Panicing %s\\\\r\\\\n\\\", e) } }() badCall() fmt.Printf(\\\"After bad call\\\\r\\\\n\\\") // <-- would not reach } func main() { fmt.Printf(\\\"Calling test\\\\r\\\\n\\\") test() fmt.Printf(\\\"Test completed\\\\r\\\\n\\\") } \",\"输出：\",\"Calling test Panicing bad end Test completed \",\"defer-panic()-recover() 在某种意义上也是一种像 if，for 这样的控制流机制。\",\"Go 标准库中许多地方都用了这个机制，例如，json 包中的解码和 regexp 包中的 Complie() 函数。Go 库的原则是即使在包的内部使用了 panic()，在它的对外接口 (API) 中也必须用 recover() 处理成显式返回的错误。\",\"这是所有自定义包实现者应该遵守的最佳实践：\",\"1）在包内部，总是应该从 panic 中 recover：不允许显式的超出包范围的 panic()\",\"2）向包的调用者返回错误值（而不是 panic）。\",\"在包内部，特别是在非导出函数中有很深层次的嵌套调用时，将 panic 转换成 error 来告诉调用方为何出错，是很实用的（且提高了代码可读性）。\",\"下面的代码则很好地阐述了这一点。我们有一个简单的 parse 包（示例 13.4）用来把输入的字符串解析为整数切片；这个包有自己特殊的 ParseError。\",\"当没有东西需要转换或者转换成整数失败时，这个包会 panic()（在函数 fields2numbers() 中）。但是可导出的 Parse() 函数会从 panic() 中 recover() 并用所有这些信息返回一个错误给调用者。为了演示这个过程，在 panic_recover.go 中 调用了 parse 包（示例 13.5）；不可解析的字符串会导致错误并被打印出来。\",\"示例 13.4 parse.go：\",\"// parse.go package parse import ( \\\"fmt\\\" \\\"strings\\\" \\\"strconv\\\" ) // A ParseError indicates an error in converting a word into an integer. type ParseError struct { Index int // The index into the space-separated list of words. Word string // The word that generated the parse error. Err error // The raw error that precipitated this error, if any. } // String returns a human-readable error message. func (e *ParseError) String() string { return fmt.Sprintf(\\\"pkg parse: error parsing %q as int\\\", e.Word) } // Parse parses the space-separated words in in put as integers. func Parse(input string) (numbers []int, err error) { defer func() { if r := recover(); r != nil { var ok bool err, ok = r.(error) if !ok { err = fmt.Errorf(\\\"pkg: %v\\\", r) } } }() fields := strings.Fields(input) numbers = fields2numbers(fields) return } func fields2numbers(fields []string) (numbers []int) { if len(fields) == 0 { panic(\\\"no words to parse\\\") } for idx, field := range fields { num, err := strconv.Atoi(field) if err != nil { panic(&ParseError{idx, field, err}) } numbers = append(numbers, num) } return } \",\"示例 13.5 panic_package.go：\",\"// panic_package.go package main import ( \\\"fmt\\\" \\\"./parse/parse\\\" ) func main() { var examples = []string{ \\\"1 2 3 4 5\\\", \\\"100 50 25 12.5 6.25\\\", \\\"2 + 2 = 4\\\", \\\"1st class\\\", \\\"\\\", } for _, ex := range examples { fmt.Printf(\\\"Parsing %q:\\\\n \\\", ex) nums, err := parse.Parse(ex) if err != nil { fmt.Println(err) // here String() method from ParseError is used continue } fmt.Println(nums) } } \",\"输出：\",\"Parsing \\\"1 2 3 4 5\\\": [1 2 3 4 5] Parsing \\\"100 50 25 12.5 6.25\\\": pkg: pkg parse: error parsing \\\"12.5\\\" as int Parsing \\\"2 + 2 = 4\\\": pkg: pkg parse: error parsing \\\"+\\\" as int Parsing \\\"1st class\\\": pkg: pkg parse: error parsing \\\"1st\\\" as int Parsing \\\"\\\": pkg: no words to parse \",\"每当函数返回时，我们应该检查是否有错误发生：但是这会导致重复乏味的代码。结合 defer/panic/recover 机制和闭包可以得到一个我们马上要讨论的更加优雅的模式。不过这个模式只有当所有的函数都是同一种签名时可用，这样就有相当大的限制。一个很好的使用它的例子是 web 应用，所有的处理函数都是下面这样：\",\"func handler1(w http.ResponseWriter, r *http.Request) { ... } \",\"假设所有的函数都有这样的签名：\",\"func f(a type1, b type2) \",\"参数的数量和类型是不相关的。\",\"我们给这个类型一个名字：\",\"fType1 = func f(a type1, b type2) \",\"在我们的模式中使用了两个帮助函数：\",\"1）check()：这是用来检查是否有错误和 panic 发生的函数：\",\"func check(err error) { if err != nil { panic(err) } } \",\"2）errorhandler()：这是一个包装函数。接收一个 fType1 类型的函数 fn 并返回一个调用 fn 的函数。里面就包含有 defer/recover 机制，这在 13.3 节中有相应描述。\",\"func errorHandler(fn fType1) fType1 { return func(a type1, b type2) { defer func() { if err, ok := recover().(error); ok { log.Printf(\\\"run time panic: %v\\\", err) } }() fn(a, b) } } \",\"当错误发生时会 recover 并打印在日志中；除了简单的打印，应用也可以用 template 包（参见 15.7 节）为用户生成自定义的输出。check() 函数会在所有的被调函数中调用，像这样：\",\"func f1(a type1, b type2) { ... f, _, err := // call function/method check(err) t, err := // call function/method check(err) _, err2 := // call function/method check(err2) ... } \",\"通过这种机制，所有的错误都会被 recover，并且调用函数后的错误检查代码也被简化为调用 check(err) 即可。在这种模式下，不同的错误处理必须对应不同的函数类型；它们（错误处理）可能被隐藏在错误处理包内部。可选的更加通用的方式是用一个空接口类型的切片作为参数和返回值。\",\"我们会在 15.5 节 的 web 应用中使用这种模式。\",\"练习 13.1：recover_dividebyzero.go\",\"用示例 13.3 中的编码模式通过整数除以 0 触发一个运行时 panic。\",\"练习 13.2：panic_defer.go\",\"阅读下面的完整程序。不要执行它，写出程序的输出结果。然后编译执行并验证你的预想。\",\"// panic_defer.go package main import \\\"fmt\\\" func main() { f() fmt.Println(\\\"Returned normally from f.\\\") } func f() { defer func() { if r := recover(); r != nil { fmt.Println(\\\"Recovered in f\\\", r) } }() fmt.Println(\\\"Calling g.\\\") g(0) fmt.Println(\\\"Returned normally from g.\\\") } func g(i int) { if i > 3 { fmt.Println(\\\"Panicking!\\\") panic(fmt.Sprintf(\\\"%v\\\", i)) } defer fmt.Println(\\\"Defer in g\\\", i) fmt.Println(\\\"Printing in g\\\", i) g(i + 1) } \",\"输出：\",\"Calling g. Printing in g 0 Printing in g 1 Printing in g 2 Printing in g 3 Panicking! Defer in g 3 Defer in g 2 Defer in g 1 Defer in g 0 Recovered in f 4 Returned normally from f. \",\"练习 13.3：panic_defer_convint.go\",\"写一个 ConvertInt64ToInt() 函数把 int64 值转换为 int 值，如果发生错误（提示：参见 4.5.2.1 节）就 panic() 。然后在函数 IntFromInt64 中调用这个函数并 recover()，返回一个整数和一个错误。请测试这个函数！\",\"os 包有一个 StartProcess 函数可以调用或启动外部系统命令和二进制可执行文件；它的第一个参数是要运行的进程，第二个参数用来传递选项或参数，第三个参数是含有系统环境基本信息的结构体。\",\"这个函数返回被启动进程的 id (pid)，或者启动失败返回错误。\",\"exec 包中也有同样功能的更简单的结构体和函数；主要是 exec.Command(name string, arg ...string) 和 Run()。首先需要用系统命令或可执行文件的名字创建一个 Command 对象，然后用这个对象作为接收者调用 Run()。下面的程序（因为是执行 Linux 命令，只能在 Linux 下面运行）演示了它们的使用：\",\"示例 13.6 exec.go：\",\"// exec.go package main import ( \\\"fmt\\\" \\\"os/exec\\\" \\\"os\\\" ) func main() { // 1) os.StartProcess // /*********************/ /* Linux: */ env := os.Environ() procAttr := &os.ProcAttr{ Env: env, Files: []*os.File{ os.Stdin, os.Stdout, os.Stderr, }, } // 1st example: list files pid, err := os.StartProcess(\\\"/bin/ls\\\", []string{\\\"ls\\\", \\\"-l\\\"}, procAttr) if err != nil { fmt.Printf(\\\"Error %v starting process!\\\", err) // os.Exit(1) } fmt.Printf(\\\"The process id is %v\\\", pid) \",\"输出：\",\"The process id is &{2054 0}total 2056 -rwxr-xr-x 1 ivo ivo 1157555 2011-07-04 16:48 Mieken_exec -rw-r--r-- 1 ivo ivo 2124 2011-07-04 16:48 Mieken_exec.go -rw-r--r-- 1 ivo ivo 18528 2011-07-04 16:48 Mieken_exec_go_.6 -rwxr-xr-x 1 ivo ivo 913920 2011-06-03 16:13 panic.exe -rw-r--r-- 1 ivo ivo 180 2011-04-11 20:39 panic.go \",\"// 2nd example: show all processes pid, err = os.StartProcess(\\\"/bin/ps\\\", []string{\\\"ps\\\", \\\"-e\\\", \\\"-opid,ppid,comm\\\"}, procAttr) if err != nil { fmt.Printf(\\\"Error %v starting process!\\\", err) // os.Exit(1) } fmt.Printf(\\\"The process id is %v\\\", pid) \",\"// 2) exec.Run // /***************/ // Linux: OK, but not for ls ? // cmd := exec.Command(\\\"ls\\\", \\\"-l\\\") // no error, but doesn't show anything ? // cmd := exec.Command(\\\"ls\\\") // no error, but doesn't show anything ? cmd := exec.Command(\\\"gedit\\\") // this opens a gedit-window err = cmd.Run() if err != nil { fmt.Printf(\\\"Error %v executing command!\\\", err) os.Exit(1) } fmt.Printf(\\\"The command is %v\\\", cmd) // The command is &{/bin/ls [ls -l] [] <nil> <nil> <nil> 0xf840000210 <nil> true [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [] [] 0xf8400128c0} } // in Windows: uitvoering: Error fork/exec /bin/ls: The system cannot find the path specified. starting process! \",\"首先所有的包都应该有一定的必要文档，然后同样重要的是对包的测试。\",\"在第 3 章中提到了 Go 的测试工具 gotest， 我们已经在 9.8 节中使用过了。这里我们会用更多的例子进行详细说明。\",\"名为 testing 的包被专门用来进行自动化测试，日志和错误报告。并且还包含一些基准测试函数的功能。\",\"备注：gotest 是 Unix bash 脚本，所以在 Windows 下你需要配置 MINGW 环境（参见 2.5 节）；在 Windows 环境下把所有的 pkg/linux_amd64 替换成 pkg/windows。\",\"对一个包做（单元）测试，需要写一些可以频繁（每次更新后）执行的小块测试单元来检查代码的正确性。于是我们必须写一些 Go 源文件来测试代码。测试程序必须属于被测试的包，并且文件名满足这种形式 *_test.go，所以测试代码和包中的业务代码是分开的。\",\"_test 程序不会被普通的 Go 编译器编译，所以当放应用部署到生产环境时它们不会被部署；只有 gotest 会编译所有的程序：普通程序和测试程序。\",\"测试文件中必须导入 \\\"testing\\\" 包，并写一些名字以 TestZzz 打头的全局函数，这里的 Zzz 是被测试函数的字母描述，如 TestFmtInterface()，TestPayEmployees() 等。\",\"测试函数必须有这种形式的头部：\",\"func TestAbcde(t *testing.T) \",\"T 是传给测试函数的结构类型，用来管理测试状态，支持格式化测试日志，如 t.Log，t.Error，t.ErrorF 等。在函数的结尾把输出跟想要的结果对比，如果不等就打印一个错误，成功的测试则直接返回。\",\"用下面这些函数来通知测试失败：\",\"1）func (t *T) Fail()\",\" 标记测试函数为失败，然后继续执行（剩下的测试）。 \",\"2）func (t *T) FailNow()\",\" 标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。 \",\"3）func (t *T) Log(args ...interface{})\",\" args 被用默认的格式格式化并打印到错误日志中。 \",\"4）func (t *T) Fatal(args ...interface{})\",\" 结合 先执行 3），然后执行 2）的效果。 \",\"运行 go test 来编译测试程序，并执行程序中所有的 TestZZZ 函数。如果所有的测试都通过会打印出 PASS。\",\"gotest 可以接收一个或多个函数程序作为参数，并指定一些选项。\",\"结合 --chatty 或 -v 选项，每个执行的测试函数以及测试状态会被打印。\",\"例如：\",\"go test fmt_test.go --chatty === RUN fmt.TestFlagParser --- PASS: fmt.TestFlagParser === RUN fmt.TestArrayPrinter --- PASS: fmt.TestArrayPrinter ... \",\"testing 包中有一些类型和函数可以用来做简单的基准测试；测试代码中必须包含以 BenchmarkZzz 打头的函数并接收一个 *testing.B 类型的参数，比如：\",\"func BenchmarkReverse(b *testing.B) { ... } \",\"命令 go test –test.bench=.* 会运行所有的基准测试函数；代码中的函数会被调用 N 次（N 是非常大的数，如 N = 1000000），并展示 N 的值和函数执行的平均时间，单位为 ns（纳秒，ns/op）。如果是用 testing.Benchmark() 调用这些函数，直接运行程序即可。\",\"具体可以参见 14.16 节 中用 goroutines 运行基准测试的例子以及练习 13.4：string_reverse_test.go\",\"在练习 9.4 中你写了一个叫 main_oddeven.go 的程序用来测试前 100 个整数是否是偶数。这个函数属于 even 包。\",\"下面是一种可能的方案：\",\"示例 13.7 even_main.go：\",\"package main import ( \\\"fmt\\\" \\\"even/even\\\" ) func main() { for i:=0; i<=100; i++ { fmt.Printf(\\\"Is the integer %d even? %v\\\\n\\\", i, even.Even(i)) } } \",\"上面使用了 even.go 中的 even 包：\",\"示例 13.8 even/even.go：\",\"package even func Even(i int) bool { // Exported function return i%2 == 0 } func Odd(i int) bool { // Exported function return i%2 != 0 } \",\"在 even 包的路径下，我们创建一个名为 oddeven_test.go 的测试程序：\",\"示例 13.9 even/oddeven_test.go：\",\"package even import \\\"testing\\\" func TestEven(t *testing.T) { if !Even(10) { t.Log(\\\" 10 must be even!\\\") t.Fail() } if Even(7) { t.Log(\\\" 7 is not even!\\\") t.Fail() } } func TestOdd(t *testing.T) { if !Odd(11) { t.Log(\\\" 11 must be odd!\\\") t.Fail() } if Odd(10) { t.Log(\\\" 10 is not odd!\\\") t.Fail() } } \",\"由于测试需要具体的输入用例且不可能测试到所有的用例（非常像一个无穷的数），所以我们必须对要使用的测试用例思考再三。\",\"至少应该包括：\",\"正常的用例\",\"反面的用例（错误的输入，如用负数或字母代替数字，没有输入等）\",\"边界检查用例（如果参数的取值范围是 0 到 1000，检查 0 和 1000 的情况）\",\"可以直接执行 go install 安装 even 或者创建一个 以下内容的 Makefile：\",\"include $(GOROOT)/src/Make.inc TARG=even GOFILES=\\\\ even.go\\\\ include $(GOROOT)/src/Make.pkg \",\"然后执行 make（或 gomake）命令来构建归档文件 even.a\",\"测试代码不能在 GOFILES 参数中引用，因为我们不希望生成的程序中有测试代码。如果包含了测试代码，go test 会给出错误提示！go test 会生成一个单独的包含测试代码的 _test 程序。\",\"现在我们可以用命令：go test（或 make test）来测试 even 包。\",\"因为示例 13.5 中的测试函数不会调用 t.Log 和 t.Fail，所以会得到一个 PASS 的结果。在这个简单例子中一切都正常执行。\",\"为了看到失败时的输出，把函数 TestEven() 改为：\",\"func TestEven(t *testing.T) { if Even(10) { t.Log(\\\"Everything OK: 10 is even, just a test to see failed output!\\\") t.Fail() } } \",\"现在会调用 t.Log 和 t.Fail，得到的结果如下：\",\"--- FAIL: even.TestEven (0.00 seconds) Everything OK: 10 is even, just a test to see failed output! FAIL \",\"练习 13.4：string_reverse_test.go\",\"为练习 7.14 string_reverse.go 写一个单元测试。\",\"把 string_reverse 放到自己的包 strev 中，只包含一个可导出函数 Reverse()。\",\"实现并测试它。\",\"编写测试代码时，一个较好的办法是把测试的输入数据和期望的结果写在一起组成一个数据表：表中的每条记录都是一个含有输入和期望值的完整测试用例，有时还可以结合像测试名字这样的额外信息来让测试输出更多的信息。\",\"实际测试时简单迭代表中的每条记录，并执行必要的测试。这在练习 13.4 中有具体的应用。\",\"可以抽象为下面的代码段：\",\"var tests = []struct{ // Test table in string out string }{ {\\\"in1\\\", \\\"exp1\\\"}, {\\\"in2\\\", \\\"exp2\\\"}, {\\\"in3\\\", \\\"exp3\\\"}, ... } func TestFunction(t *testing.T) { for i, tt := range tests { s := FuncToBeTested(tt.in) if s != tt.out { t.Errorf(\\\"%d. %q => %q, wanted: %q\\\", i, tt.in, s, tt.out) } } } \",\"如果大部分函数都可以写成这种形式，那么写一个帮助函数 verify() 对实际测试会很有帮助：\",\"func verify(t *testing.T, testnum int, testcase, input, output, expected string) { if expected != output { t.Errorf(\\\"%d. %s with input = %s: output %s != %s\\\", testnum, testcase, input, output, expected) } } \",\"TestFunction() 则变为：\",\"func TestFunction(t *testing.T) { for i, tt := range tests { s := FuncToBeTested(tt.in) verify(t, i, \\\"FuncToBeTested: \\\", tt.in, s, tt.out) } } \"]},\"690\":{\"h\":\"13.10.1 时间和内存消耗\",\"t\":[\"可以用这个便捷脚本 xtime 来测量：\",\"#!/bin/sh /usr/bin/time -f '%Uu %Ss %er %MkB %C' \\\"$@\\\" \",\"在 Unix 命令行中像这样使用 xtime goprogexec，这里的 progexec 是一个 Go 可执行程序，这句命令行输出类似：56.63u 0.26s 56.92r 1642640kB progexec，分别对应用户时间，系统时间，实际时间和最大内存占用。\"]},\"691\":{\"h\":\"13.10.2 用 go test 调试\",\"t\":[\"如果代码使用了 Go 中 testing 包的基准测试功能，我们可以用 gotest 标准的 -cpuprofile 和 -memprofile 标志向指定文件写入 CPU 或 内存使用情况报告。\",\"使用方式：go test -x -v -cpuprofile=prof.out -file x_test.go\",\"编译执行 x_test.go 中的测试，并向 prof.out 文件中写入 cpu 性能分析信息。\"]},\"692\":{\"h\":\"13.10.3 用 pprof 调试\",\"t\":[\"你可以在单机程序 progexec 中引入 runtime/pprof 包；这个包以 pprof 可视化工具需要的格式写入运行时报告数据。对于 CPU 性能分析来说你需要添加一些代码：\",\"var cpuprofile = flag.String(\\\"cpuprofile\\\", \\\"\\\", \\\"write cpu profile to file\\\") func main() { flag.Parse() if *cpuprofile != \\\"\\\" { f, err := os.Create(*cpuprofile) if err != nil { log.Fatal(err) } pprof.StartCPUProfile(f) defer pprof.StopCPUProfile() } ... \",\"代码定义了一个名为 cpuprofile 的 flag，调用 Go flag 库来解析命令行 flag，如果命令行设置了 cpuprofile flag，则开始 CPU 性能分析并把结果重定向到那个文件（os.Create 用拿到的名字创建了用来写入分析数据的文件）。这个分析程序最后需要在程序退出之前调用 StopCPUProfile() 来刷新挂起的写操作到文件中；我们用 defer 来保证这一切会在 main() 返回时触发。\",\"现在用这个 flag 运行程序：progexec -cpuprofile=progexec.prof\",\"然后可以像这样用 gopprof 工具：gopprof progexec progexec.prof\",\"gopprof 程序是 Google pprofC++ 分析器的一个轻微变种；关于此工具更多的信息，参见https://github.com/gperftools/gperftools 。\",\"如果开启了 CPU 性能分析，Go 程序会以大约每秒 100 次的频率阻塞，并记录当前执行的 goroutine 栈上的程序计数器样本。\",\"此工具一些有趣的命令：\",\"1）topN\",\"用来展示分析结果中最开头的 N 份样本，例如：top5 它会展示在程序运行期间调用最频繁的 5 个函数，输出如下：\",\"Total: 3099 samples 626 20.2% 20.2% 626 20.2% scanblock 309 10.0% 30.2% 2839 91.6% main.FindLoops ... \",\"第 5 列表示函数的调用频度。\",\"2）web 或 web 函数名\",\"该命令生成一份 SVG 格式的分析数据图表，并在网络浏览器中打开它（还有一个 gv 命令可以生成 PostScript 格式的数据，并在 GhostView 中打开，这个命令需要安装 graphviz）。函数被表示成不同的矩形（被调用越多，矩形越大），箭头指示函数调用链。\",\"3）list 函数名 或 weblist 函数名\",\"展示对应函数名的代码行列表，第 2 列表示当前行执行消耗的时间，这样就很好地指出了运行过程中消耗最大的代码。\",\"如果发现函数 runtime.mallocgc（分配内存并执行周期性的垃圾回收）调用频繁，那么是应该进行内存分析的时候了。找出垃圾回收频繁执行的原因，和内存大量分配的根源。\",\"为了做到这一点必须在合适的地方添加下面的代码：\",\"var memprofile = flag.String(\\\"memprofile\\\", \\\"\\\", \\\"write memory profile to this file\\\") ... CallToFunctionWhichAllocatesLotsOfMemory() if *memprofile != \\\"\\\" { f, err := os.Create(*memprofile) if err != nil { log.Fatal(err) } pprof.WriteHeapProfile(f) f.Close() return } \",\"用 -memprofile flag 运行这个程序：progexec -memprofile=progexec.mprof\",\"然后你可以像这样再次使用 gopprof 工具：gopprof progexec progexec.mprof\",\"top5，list 函数名 等命令同样适用，只不过现在是以 Mb 为单位测量内存分配情况，这是 top 命令输出的例子：\",\"Total: 118.3 MB 66.1 55.8% 55.8% 103.7 87.7% main.FindLoops 30.5 25.8% 81.6% 30.5 25.8% main.*LSG·NewLoop ... \",\"从第 1 列可以看出，最上面的函数占用了最多的内存。\",\"同样有一个报告内存分配计数的有趣工具：\",\"gopprof --inuse_objects progexec progexec.mprof \",\"对于 web 应用来说，有标准的 HTTP 接口可以分析数据。在 HTTP 服务中添加\",\"import _ \\\"http/pprof\\\" \",\"会为 /debug/pprof/ 下的一些 URL 安装处理器。然后你可以用一个唯一的参数——你服务中的分析数据的 URL 来执行 gopprof 命令——它会下载并执行在线分析。\",\"gopprof http://localhost:6060/debug/pprof/profile # 30-second CPU profile gopprof http://localhost:6060/debug/pprof/heap # heap profile \",\"在 Go-blog（引用 15）中有一篇很好的文章用具体的例子进行了分析：分析 Go 程序（2011 年 6 月）。\"]},\"693\":{\"h\":\"第 14 章：协程 (goroutine) 与通道 (channel)\",\"t\":[\"作为一门 21 世纪的语言，Go 原生支持应用之间的通信（网络，客户端和服务端，分布式计算，参见第 15 章和程序的并发。程序可以在不同的处理器和计算机上同时执行不同的代码段。Go 语言为构建并发程序的基本代码块是协程 (goroutine) 与通道 (channel)。他们需要语言，编译器，和 runtime 的支持。Go 语言提供的垃圾回收器对并发编程至关重要。\",\"不要通过共享内存来通信，而通过通信来共享内存。\",\"通信强制协作。\"]},\"694\":{\"h\":\"14.1.1 什么是协程\",\"t\":[\"一个应用程序是运行在机器上的一个进程；进程是一个运行在自己内存地址空间里的独立执行体。一个进程由一个或多个操作系统线程组成，这些线程其实是共享同一个内存地址空间的一起工作的执行体。几乎所有'正式'的程序都是多线程的，以便让用户或计算机不必等待，或者能够同时服务多个请求（如 Web 服务器），或增加性能和吞吐量（例如，通过对不同的数据集并行执行代码）。一个并发程序可以在一个处理器或者内核上使用多个线程来执行任务，但是只有同一个程序在某个时间点同时运行在多核或者多处理器上才是真正的并行。\",\"并行是一种通过使用多处理器以提高速度的能力。所以并发程序可以是并行的，也可以不是。\",\"公认的，使用多线程的应用难以做到准确，最主要的问题是内存中的数据共享，它们会被多线程以无法预知的方式进行操作，导致一些无法重现或者随机的结果（称作竞态）。\",\"不要使用全局变量或者共享内存，它们会给你的代码在并发运算的时候带来危险。\",\"解决之道在于同步不同的线程，对数据加锁，这样同时就只有一个线程可以变更数据。在 Go 的标准库 sync 中有一些工具用来在低级别的代码中实现加锁；我们在第 9.3 节中讨论过这个问题。不过过去的软件开发经验告诉我们这会带来更高的复杂度，更容易使代码出错以及更低的性能，所以这个经典的方法明显不再适合现代多核/多处理器编程：thread-per-connection 模型不够有效。\",\"Go 更倾向于其他的方式，在诸多比较合适的范式中，有个被称作 Communicating Sequential Processes（顺序通信处理）（CSP, C. Hoare 发明的）还有一个叫做 message passing-model（消息传递）（已经运用在了其他语言中，比如 Erlang）。\",\"在 Go 中，应用程序并发处理的部分被称作 goroutines（协程），它可以进行更有效的并发运算。在协程和操作系统线程之间并无一对一的关系：协程是根据一个或多个线程的可用性，映射（多路复用，执行于）在他们之上的；协程调度器在 Go 运行时很好的完成了这个工作。\",\"协程工作在相同的地址空间中，所以共享内存的方式一定是同步的；这个可以使用 sync 包来实现（参见第 9.3 节），不过我们很不鼓励这样做：Go 使用 channels 来同步协程（可以参见第 14.2 节等章节）\",\"当系统调用（比如等待 I/O）阻塞协程时，其他协程会继续在其他线程上工作。协程的设计隐藏了许多线程创建和管理方面的复杂工作。\",\"协程是轻量的，比线程更轻。它们痕迹非常不明显（使用少量的内存和资源）：使用 4K 的栈内存就可以在堆中创建它们。因为创建非常廉价，必要的时候可以轻松创建并运行大量的协程（在同一个地址空间中 100,000 个连续的协程）。并且它们对栈进行了分割，从而动态的增加（或缩减）内存的使用；栈的管理是自动的，但不是由垃圾回收器管理的，而是在协程退出后自动释放。\",\"协程可以运行在多个操作系统线程之间，也可以运行在线程之内，让你可以很小的内存占用就可以处理大量的任务。由于操作系统线程上的协程时间片，你可以使用少量的操作系统线程就能拥有任意多个提供服务的协程，而且 Go 运行时可以聪明的意识到哪些协程被阻塞了，暂时搁置它们并处理其他协程。\",\"存在两种并发方式：确定性的（明确定义排序）和非确定性的（加锁/互斥从而未定义排序）。Go 的协程和通道理所当然的支持确定性的并发方式（例如通道具有一个 sender 和一个 receiver）。我们会在第 14.7 节中使用一个常见的算法问题（工人问题）来对比两种处理方式。\",\"协程是通过使用关键字 go 调用（执行）一个函数或者方法来实现的（也可以是匿名或者 lambda 函数）。这样会在当前的计算过程中开始一个同时进行的函数，在相同的地址空间中并且分配了独立的栈，比如：go sum(bigArray)，在后台计算总和。\",\"协程的栈会根据需要进行伸缩，不出现栈溢出；开发者不需要关心栈的大小。当协程结束的时候，它会静默退出：用来启动这个协程的函数不会得到任何的返回值。\",\"任何 Go 程序都必须有的 main() 函数也可以看做是一个协程，尽管它并没有通过 go 来启动。协程可以在程序初始化的过程中运行（在 init() 函数中）。\",\"在一个协程中，比如它需要进行非常密集的运算，你可以在运算循环中周期的使用 runtime.Gosched()：这会让出处理器，允许运行其他协程；它并不会使当前协程挂起，所以它会自动恢复执行。使用 Gosched() 可以使计算均匀分布，使通信不至于迟迟得不到响应。\"]},\"695\":{\"h\":\"14.1.2 并发和并行的差异\",\"t\":[\"Go 的并发原语提供了良好的并发设计基础：表达程序结构以便表示独立地执行的动作；所以 Go 的重点不在于并行的首要位置：并发程序可能是并行的，也可能不是。并行是一种通过使用多处理器以提高速度的能力。但往往是，一个设计良好的并发程序在并行方面的表现也非常出色。\",\"在当前的运行时（2012 年一月）实现中，Go 默认没有并行指令，只有一个独立的核心或处理器被专门用于 Go 程序，不论它启动了多少个协程；所以这些协程是并发运行的，但他们不是并行运行的：同一时间只有一个协程会处在运行状态。\",\"这个情况在以后可能会发生改变，不过届时，为了使你的程序可以使用多个核心运行，这时协程就真正的是并行运行了，你必须使用 GOMAXPROCS 变量。\",\"这会告诉运行时有多少个协程同时执行。\",\"并且只有 gc 编译器真正实现了协程，适当的把协程映射到操作系统线程。使用 gccgo 编译器，会为每一个协程创建操作系统线程。\"]},\"696\":{\"h\":\"14.1.3 使用 GOMAXPROCS\",\"t\":[\"在 gc 编译器下（6g 或者 8g）你必须设置 GOMAXPROCS 为一个大于默认值 1 的数值来允许运行时支持使用多于 1 个的操作系统线程，所有的协程都会共享同一个线程除非将 GOMAXPROCS 设置为一个大于 1 的数。当 GOMAXPROCS 大于 1 时，会有一个线程池管理许多的线程。通过 gccgo 编译器 GOMAXPROCS 有效的与运行中的协程数量相等。假设 n 是机器上处理器或者核心的数量。如果你设置环境变量 GOMAXPROCS>=n，或者执行 runtime.GOMAXPROCS(n)，接下来协程会被分割（分散）到 n 个处理器上。更多的处理器并不意味着性能的线性提升。有这样一个经验法则，对于 n 个核心的情况设置 GOMAXPROCS 为 n-1 以获得最佳性能，也同样需要遵守这条规则：协程的数量 > 1 + GOMAXPROCS > 1。\",\"所以如果在某一时间只有一个协程在执行，不要设置 GOMAXPROCS！\",\"还有一些通过实验观察到的现象：在一台 1 颗 CPU 的笔记本电脑上，增加 GOMAXPROCS 到 9 会带来性能提升。在一台 32 核的机器上，设置 GOMAXPROCS=8 会达到最好的性能，在测试环境中，更高的数值无法提升性能。如果设置一个很大的 GOMAXPROCS 只会带来轻微的性能下降；设置 GOMAXPROCS=100，使用 top 命令和 H 选项查看到只有 7 个活动的线程。\",\"增加 GOMAXPROCS 的数值对程序进行并发计算是有好处的；\",\"请看 goroutine_select2.go\",\"总结：GOMAXPROCS 等同于（并发的）线程数量，在一台核心数多于 1 个的机器上，会尽可能有等同于核心数的线程在并行运行。\"]},\"697\":{\"h\":\"14.1.4 如何用命令行指定使用的核心数量\",\"t\":[\"使用 flags 包，如下：\",\"var numCores = flag.Int(\\\"n\\\", 2, \\\"number of CPU cores to use\\\") \",\"在 main() 中：\",\"flag.Parse() runtime.GOMAXPROCS(*numCores) \",\"协程可以通过调用 runtime.Goexit() 来停止，尽管这样做几乎没有必要。\",\"示例 14.1-goroutine1.go 介绍了概念：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { fmt.Println(\\\"In main()\\\") go longWait() go shortWait() fmt.Println(\\\"About to sleep in main()\\\") // sleep works with a Duration in nanoseconds (ns) ! time.Sleep(10 * 1e9) fmt.Println(\\\"At the end of main()\\\") } func longWait() { fmt.Println(\\\"Beginning longWait()\\\") time.Sleep(5 * 1e9) // sleep for 5 seconds fmt.Println(\\\"End of longWait()\\\") } func shortWait() { fmt.Println(\\\"Beginning shortWait()\\\") time.Sleep(2 * 1e9) // sleep for 2 seconds fmt.Println(\\\"End of shortWait()\\\") } \",\"输出：\",\"In main() About to sleep in main() Beginning longWait() Beginning shortWait() End of shortWait() End of longWait() At the end of main() // after 10s \",\"main()，longWait() 和 shortWait() 三个函数作为独立的处理单元按顺序启动，然后开始并行运行。每一个函数都在运行的开始和结束阶段输出了消息。为了模拟他们运算的时间消耗，我们使用了 time 包中的 Sleep 函数。Sleep() 可以按照指定的时间来暂停函数或协程的执行，这里使用了纳秒（ns，符号 1e9 表示 1 乘 10 的 9 次方，e=指数）。\",\"他们按照我们期望的顺序打印出了消息，几乎都一样，可是我们明白这是模拟出来的，以并行的方式。我们让 main() 函数暂停 10 秒从而确定它会在另外两个协程之后结束。如果不这样（如果我们让 main() 函数停止 4 秒），main() 会提前结束，longWait() 则无法完成。如果我们不在 main() 中等待，协程会随着程序的结束而消亡。\",\"当 main() 函数返回的时候，程序退出：它不会等待任何其他非 main 协程的结束。这就是为什么在服务器程序中，每一个请求都会启动一个协程来处理，server() 函数必须保持运行状态。通常使用一个无限循环来达到这样的目的。\",\"另外，协程是独立的处理单元，一旦陆续启动一些协程，你无法确定他们是什么时候真正开始执行的。你的代码逻辑必须独立于协程调用的顺序。\",\"为了对比使用一个线程，连续调用的情况，移除 go 关键字，重新运行程序。\",\"现在输出：\",\"In main() Beginning longWait() End of longWait() Beginning shortWait() End of shortWait() About to sleep in main() At the end of main() // after 17 s \",\"协程更有用的一个例子应该是在一个非常长的数组中查找一个元素。\",\"将数组分割为若干个不重复的切片，然后给每一个切片启动一个协程进行查找计算。这样许多并行的协程可以用来进行查找任务，整体的查找时间会缩短（除以协程的数量）。\"]},\"698\":{\"h\":\"14.1.5 Go 协程 (goroutines) 和协程 (coroutines)\",\"t\":[\"（译者注：标题中的“Go 协程 (goroutines)”即是 14 章讲的协程，指的是 Go 语言中的协程。而“协程(coroutines)”指的是其他语言中的协程概念，仅在本节出现。）\",\"在其他语言中，比如 C#，Lua 或者 Python 都有协程的概念。这个名字表明它和 Go 协程有些相似，不过有两点不同：\",\"Go 协程意味着并行（或者可以以并行的方式部署），协程一般来说不是这样的\",\"Go 协程通过通道来通信；协程通过让出和恢复操作来通信\",\"Go 协程比协程更强大，也很容易从协程的逻辑复用到 Go 协程。\"]},\"699\":{\"h\":\"14.2.1 概念\",\"t\":[\"在第一个例子中，协程是独立执行的，他们之间没有通信。他们必须通信才会变得更有用：彼此之间发送和接收信息并且协调/同步他们的工作。协程可以使用共享变量来通信，但是很不提倡这样做，因为这种方式给所有的共享内存的多线程都带来了困难。\",\"而 Go 有一种特殊的类型，通道（channel），就像一个可以用于发送类型化数据的管道，由其负责协程之间的通信，从而避开所有由共享内存导致的陷阱；这种通过通道进行通信的方式保证了同步性。数据在通道中进行传递：在任何给定时间，一个数据被设计为只有一个协程可以对其访问，所以不会发生数据竞争。 数据的所有权（可以读写数据的能力）也因此被传递。\",\"工厂的传送带是个很有用的例子。一个机器（生产者协程）在传送带上放置物品，另外一个机器（消费者协程）拿到物品并打包。\",\"通道服务于通信的两个目的：值的交换，同步的，保证了两个计算（协程）任何时候都是可知状态。\",\"通常使用这样的格式来声明通道：var identifier chan datatype\",\"未初始化的通道的值是 nil。\",\"所以通道只能传输一种类型的数据，比如 chan int 或者 chan string，所有的类型都可以用于通道，空接口 interface{} 也可以，甚至可以（有时非常有用）创建通道的通道。\",\"通道实际上是类型化消息的队列：使数据得以传输。它是先进先出(FIFO) 的结构所以可以保证发送给他们的元素的顺序（有些人知道，通道可以比作 Unix shells 中的双向管道 (two-way pipe) ）。通道也是引用类型，所以我们使用 make() 函数来给它分配内存。这里先声明了一个字符串通道 ch1，然后创建了它（实例化）：\",\"var ch1 chan string ch1 = make(chan string) \",\"当然可以更短： ch1 := make(chan string)。\",\"这里我们构建一个 int 通道的通道： chanOfChans := make(chan chan int)。\",\"或者函数通道：funcChan := make(chan func())（相关示例请看第 14.17 节）。\",\"所以通道是第一类对象：可以存储在变量中，作为函数的参数传递，从函数返回以及通过通道发送它们自身。另外它们是类型化的，允许类型检查，比如尝试使用整数通道发送一个指针。\"]},\"700\":{\"h\":\"14.2.2 通信操作符 <-\",\"t\":[\"这个操作符直观的标示了数据的传输：信息按照箭头的方向流动。\",\"流向通道（发送）\",\"ch <- int1 表示：用通道 ch 发送变量 int1（双目运算符，中缀 = 发送）\",\"从通道流出（接收），三种方式：\",\"int2 = <- ch 表示：变量 int2 从通道 ch（一元运算的前缀操作符，前缀 = 接收）接收数据（获取新值）；假设 int2 已经声明过了，如果没有的话可以写成：int2 := <- ch。\",\"<- ch 可以单独调用获取通道的（下一个）值，当前值会被丢弃，但是可以用来验证，所以以下代码是合法的：\",\"if <- ch != 1000{ ... } \",\"同一个操作符 <- 既用于发送也用于接收，但 Go 会根据操作对象弄明白该干什么 。虽非强制要求，但为了可读性通道的命名通常以 ch 开头或者包含 chan 。通道的发送和接收都是原子操作：它们总是互不干扰地完成。下面的示例展示了通信操作符的使用。\",\"示例 14.2-goroutine2.go\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { ch := make(chan string) go sendData(ch) go getData(ch) time.Sleep(1e9) } func sendData(ch chan string) { ch <- \\\"Washington\\\" ch <- \\\"Tripoli\\\" ch <- \\\"London\\\" ch <- \\\"Beijing\\\" ch <- \\\"Tokyo\\\" } func getData(ch chan string) { var input string // time.Sleep(2e9) for { input = <-ch fmt.Printf(\\\"%s \\\", input) } } \",\"输出：\",\"Washington Tripoli London Beijing tokyo \",\"main() 函数中启动了两个协程：sendData() 通过通道 ch 发送了 5 个字符串，getData() 按顺序接收它们并打印出来。\",\"如果 2 个协程需要通信，你必须给他们同一个通道作为参数才行。\",\"尝试一下如果注释掉 time.Sleep(1e9) 会如何。\",\"我们发现协程之间的同步非常重要：\",\"main() 等待了 1 秒让两个协程完成，如果不这样，sendData() 就没有机会输出。\",\"getData() 使用了无限循环：它随着 sendData() 的发送完成和 ch 变空也结束了。\",\"如果我们移除一个或所有 go 关键字，程序无法运行，Go 运行时会抛出 panic：\",\"---- Error run E:/Go/Goboek/code examples/chapter 14/goroutine2.exe with code Crashed ---- Program exited with code -2147483645: panic: all goroutines are asleep-deadlock! \",\"为什么会这样？运行时 (runtime) 会检查所有的协程（像本例中只有一个）是否在等待着什么东西（可从某个通道读取或者写入某个通道），这意味着程序将无法继续执行。这是死锁 (deadlock) 的一种形式，而运行时 (runtime) 可以为我们检测到这种情况。\",\"注意：不要使用打印状态来表明通道的发送和接收顺序：由于打印状态和通道实际发生读写的时间延迟会导致和真实发生的顺序不同。\",\"练习 14.4：解释一下为什么如果在函数 getData() 的一开始插入 time.Sleep(2e9)，不会出现错误但也没有输出呢。\"]},\"701\":{\"h\":\"14.2.3 通道阻塞\",\"t\":[\"默认情况下，通信是同步且无缓冲的：在有接受者接收数据之前，发送不会结束。可以想象一个无缓冲的通道在没有空间来保存数据的时候：必须要一个接收者准备好接收通道的数据然后发送者可以直接把数据发送给接收者。所以通道的发送/接收操作在对方准备好之前是阻塞的：\",\"1）对于同一个通道，发送操作（协程或者函数中的），在接收者准备好之前是阻塞的：如果 ch 中的数据无人接收，就无法再给通道传入其他数据：新的输入无法在通道非空的情况下传入。所以发送操作会等待 ch 再次变为可用状态：就是通道值被接收时（可以传入变量）。\",\"2）对于同一个通道，接收操作是阻塞的（协程或函数中的），直到发送者可用：如果通道中没有数据，接收者就阻塞了。\",\"尽管这看上去是非常严格的约束，实际在大部分情况下工作的很不错。\",\"程序 channel_block.go 验证了以上理论，一个协程在无限循环中给通道发送整数数据。不过因为没有接收者，只输出了一个数字 0。\",\"示例 14.3-channel_block.go\",\"package main import \\\"fmt\\\" func main() { ch1 := make(chan int) go pump(ch1) // pump hangs fmt.Println(<-ch1) // prints only 0 } func pump(ch chan int) { for i := 0; ; i++ { ch <- i } } \",\"输出：\",\"0 \",\"pump() 函数为通道提供数值，也被叫做生产者。\",\"为通道解除阻塞定义了 suck() 函数来在无限循环中读取通道，参见示例 14.4-channel_block2.go：\",\"func suck(ch chan int) { for { fmt.Println(<-ch) } } \",\"在 main() 中使用协程开始它：\",\"go pump(ch1) go suck(ch1) time.Sleep(1e9) \",\"给程序 1 秒的时间来运行：输出了上万个整数。\",\"练习 14.1：channel_block3.go：写一个通道证明它的阻塞性，开启一个协程接收通道的数据，持续 15 秒，然后给通道放入一个值。在不同的阶段打印消息并观察输出。\"]},\"702\":{\"h\":\"14.2.4 通过一个（或多个）通道交换数据进行协程同步。\",\"t\":[\"通信是一种同步形式：通过通道，两个协程在通信（协程会合）中某刻同步交换数据。无缓冲通道成为了多个协程同步的完美工具。\",\"甚至可以在通道两端互相阻塞对方，形成了叫做死锁的状态。Go 运行时会检查并 panic()，停止程序。死锁几乎完全是由糟糕的设计导致的。\",\"无缓冲通道会被阻塞。设计无阻塞的程序可以避免这种情况，或者使用带缓冲的通道。\",\"练习 14.2： blocking.go\",\"解释为什么下边这个程序会导致 panic：所有的协程都休眠了 - 死锁！\",\"package main import ( \\\"fmt\\\" ) func f1(in chan int) { fmt.Println(<-in) } func main() { out := make(chan int) out <- 2 go f1(out) } \"]},\"703\":{\"h\":\"14.2.5 同步通道-使用带缓冲的通道\",\"t\":[\"一个无缓冲通道只能包含 1 个元素，有时显得很局限。我们给通道提供了一个缓存，可以在扩展的 make 命令中设置它的容量，如下：\",\"buf := 100 ch1 := make(chan string, buf) \",\"buf 是通道可以同时容纳的元素（这里是 string）个数\",\"在缓冲满载（缓冲被全部使用）之前，给一个带缓冲的通道发送数据是不会阻塞的，而从通道读取数据也不会阻塞，直到缓冲空了。\",\"缓冲容量和类型无关，所以可以（尽管可能导致危险）给一些通道设置不同的容量，只要他们拥有同样的元素类型。内置的 cap() 函数可以返回缓冲区的容量。\",\"如果容量大于 0，通道就是异步的了：缓冲满载（发送）或变空（接收）之前通信不会阻塞，元素会按照发送的顺序被接收。如果容量是 0 或者未设置，通信仅在收发双方准备好的情况下才可以成功。\",\"同步：ch :=make(chan type, value)\",\"value == 0 -> synchronous, unbuffered （阻塞）\",\"value > 0 -> asynchronous, buffered（非阻塞）取决于 value 元素\",\"若使用通道的缓冲，你的程序会在“请求”激增的时候表现更好：更具弹性，专业术语叫：更具有伸缩性(scalable)。在设计算法时首先考虑使用无缓冲通道，只在不确定的情况下使用缓冲。\",\"练习 14.3：channel_buffer.go：给 channel_block3.go 的通道增加缓冲并观察输出有何不同。\"]},\"704\":{\"h\":\"14.2.6 协程中用通道输出结果\",\"t\":[\"为了知道计算何时完成，可以通过信道回报。在例子 go sum(bigArray) 中，要这样写：\",\"ch := make(chan int) go sum(bigArray, ch) // bigArray puts the calculated sum on ch // .. do something else for a while sum := <- ch // wait for, and retrieve the sum \",\"也可以使用通道来达到同步的目的，这个很有效的用法在传统计算机中称为信号量 (semaphore)。或者换个方式：通过通道发送信号告知处理已经完成（在协程中）。\",\"在其他协程运行时让 main 程序无限阻塞的通常做法是在 main() 函数的最后放置一个 select {}。\",\"也可以使用通道让 main 程序等待协程完成，就是所谓的信号量模式，我们会在接下来的部分讨论。\"]},\"705\":{\"h\":\"14.2.7 信号量模式\",\"t\":[\"下边的片段阐明：协程通过在通道 ch 中放置一个值来处理结束的信号。main() 协程等待 <-ch 直到从中获取到值。\",\"我们期望从这个通道中获取返回的结果，像这样：\",\"func compute(ch chan int){ ch <- someComputation() // when it completes, signal on the channel. } func main(){ ch := make(chan int) // allocate a channel. go compute(ch) // start something in a goroutines doSomethingElseForAWhile() result := <- ch } \",\"这个信号也可以是其他的，不返回结果，比如下面这个协程中的匿名函数 (lambda) 协程：\",\"ch := make(chan int) go func(){ // doSomething ch <- 1 // Send a signal; value does not matter }() doSomethingElseForAWhile() <- ch // Wait for goroutine to finish; discard sent value. \",\"或者等待两个协程完成，每一个都会对切片 s 的一部分进行排序，片段如下：\",\"done := make(chan bool) // doSort is a lambda function, so a closure which knows the channel done: doSort := func(s []int){ sort(s) done <- true } i := pivot(s) go doSort(s[:i]) go doSort(s[i:]) <-done <-done \",\"下边的代码，用完整的信号量模式对长度为 N 的 float64 切片进行了 N 个 doSomething() 计算并同时完成，通道 sem 分配了相同的长度（且包含空接口类型的元素），待所有的计算都完成后，发送信号（通过放入值）。在循环中从通道 sem 不停的接收数据来等待所有的协程完成。\",\"type Empty interface {} var empty Empty ... data := make([]float64, N) res := make([]float64, N) sem := make(chan Empty, N) ... for i, xi := range data { go func (i int, xi float64) { res[i] = doSomething(i, xi) sem <- empty } (i, xi) } // wait for goroutines to finish for i := 0; i < N; i++ { <-sem } \",\"注意上述代码中闭合函数的用法：i、xi 都是作为参数传入闭合函数的，这一做法使得每个协程（译者注：在其启动时）获得一份 i 和 xi 的单独拷贝，从而向闭合函数内部屏蔽了外层循环中的 i 和 xi 变量；否则，for 循环的下一次迭代会更新所有协程中 i 和 xi 的值。另一方面，切片 res 没有传入闭合函数，因为协程不需要 res 的单独拷贝。切片 res 也在闭合函数中但并不是参数。\"]},\"706\":{\"h\":\"14.2.8 实现并行的 for 循环\",\"t\":[\"在上一部分章节 14.2.7 的代码片段中：for 循环的每一个迭代是并行完成的：\",\"for i, v := range data { go func (i int, v float64) { doSomething(i, v) ... } (i, v) } \",\"在 for 循环中并行计算迭代可能带来很好的性能提升。不过所有的迭代都必须是独立完成的。有些语言比如 Fortress 或者其他并行框架以不同的结构实现了这种方式，在 Go 中用协程实现起来非常容易：\"]},\"707\":{\"h\":\"14.2.9 用带缓冲通道实现一个信号量\",\"t\":[\"信号量是实现互斥锁（排外锁）常见的同步机制，限制对资源的访问，解决读写问题，比如没有实现信号量的 sync 的 Go 包，使用带缓冲的通道可以轻松实现：\",\"带缓冲通道的容量和要同步的资源容量相同\",\"通道的长度（当前存放的元素个数）与当前资源被使用的数量相同\",\"容量减去通道的长度就是未处理的资源个数（标准信号量的整数值）\",\"不用管通道中存放的是什么，只关注长度；因此我们创建了一个长度可变但容量为 0（字节）的通道：\",\"type Empty interface {} type semaphore chan Empty \",\"将可用资源的数量 N 来初始化信号量 semaphore：sem = make(semaphore, N)\",\"然后直接对信号量进行操作：\",\"// acquire n resources func (s semaphore) P(n int) { e := new(Empty) for i := 0; i < n; i++ { s <- e } } // release n resources func (s semaphore) V(n int) { for i:= 0; i < n; i++{ <- s } } \",\"可以用来实现一个互斥的例子：\",\"/* mutexes */ func (s semaphore) Lock() { s.P(1) } func (s semaphore) Unlock(){ s.V(1) } /* signal-wait */ func (s semaphore) Wait(n int) { s.P(n) } func (s semaphore) Signal() { s.V(1) } \",\"练习 14.5：gosum.go：用这种习惯用法写一个程序，开启一个协程来计算 2 个整数的和并等待计算结果并打印出来。\",\"练习 14.6：producer_consumer.go：用这种习惯用法写一个程序，有两个协程，第一个提供数字 0，10，20，...，90 并将他们放入通道，第二个协程从通道中读取并打印。main() 等待两个协程完成后再结束。\",\"习惯用法：通道工厂模式\",\"编程中常见的另外一种模式如下：不将通道作为参数传递给协程，而用函数来生成一个通道并返回（工厂角色）；函数内有个匿名函数被协程调用。\",\"在 channel_block2.go 加入这种模式便有了示例 14.5-channel_idiom.go：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { stream := pump() go suck(stream) time.Sleep(1e9) } func pump() chan int { ch := make(chan int) go func() { for i := 0; ; i++ { ch <- i } }() return ch } func suck(ch chan int) { for { fmt.Println(<-ch) } } \"]},\"708\":{\"h\":\"14.2.10 给通道使用 for 循环\",\"t\":[\"for 循环的 range 语句可以用在通道 ch 上，便可以从通道中获取值，像这样：\",\"for v := range ch { fmt.Printf(\\\"The value is %v\\\\n\\\", v) } \",\"它从指定通道中读取数据直到通道关闭，才继续执行下边的代码。很明显，另外一个协程必须写入 ch（不然代码就阻塞在 for 循环了），而且必须在写入完成后才关闭。suck() 函数可以这样写，且在协程中调用这个动作，程序变成了这样：\",\"示例 14.6-channel_idiom2.go：\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func main() { suck(pump()) time.Sleep(1e9) } func pump() chan int { ch := make(chan int) go func() { for i := 0; ; i++ { ch <- i } }() return ch } func suck(ch chan int) { go func() { for v := range ch { fmt.Println(v) } }() } \",\"习惯用法：通道迭代器模式\",\"这个模式用到了后边 14.6 章示例 producer_consumer.go 的生产者-消费者模式。通常，需要从包含了地址索引字段 items 的容器给通道填入元素。为容器的类型定义一个方法 Iter()，返回一个只读的通道（参见第 14.2.11 节）items，如下：\",\"func (c *container) Iter () <- chan item { ch := make(chan item) go func () { for i:= 0; i < c.Len(); i++{ // or use a for-range loop ch <- c.items[i] } } () return ch } \",\"在协程里，一个 for 循环迭代容器 c 中的元素（对于树或图的算法，这种简单的 for 循环可以替换为深度优先搜索）。\",\"调用这个方法的代码可以这样迭代容器：\",\"for x := range container.Iter() { ... } \",\"其运行在自己启动的协程中，所以上边的迭代用到了一个通道和两个协程（可能运行在不同的线程上）。 这样我们就有了一个典型的生产者-消费者模式。如果在程序结束之前，向通道写值的协程未完成工作，则这个协程不会被垃圾回收；这是设计使然。这种看起来并不符合预期的行为正是由通道这种线程安全的通信方式所导致的。如此一来，一个协程为了写入一个永远无人读取的通道而被挂起就成了一个 bug ，而并非你预想中的那样被悄悄回收掉 (garbage-collected) 了。\",\"习惯用法：生产者消费者模式\",\"假设你有 Produce() 函数来产生 Consume() 函数需要的值。它们都可以运行在独立的协程中，生产者在通道中放入给消费者读取的值。整个处理过程可以替换为无限循环：\",\"for { Consume(Produce()) } \"]},\"709\":{\"h\":\"14.2.11 通道的方向\",\"t\":[\"通道类型可以用注解来表示它只发送或者只接收：\",\"var send_only chan<- int // channel can only receive data var recv_only <-chan int // channel can only send data \",\"只接收的通道 (<-chan T) 无法关闭，因为关闭通道是发送者用来表示不再给通道发送值了，所以对只接收通道是没有意义的。通道创建的时候都是双向的，但也可以分配给有方向的通道变量，就像以下代码：\",\"var c = make(chan int) // bidirectional go source(c) go sink(c) func source(ch chan<- int){ for { ch <- 1 } } func sink(ch <-chan int) { for { <-ch } } \",\"习惯用法：管道和选择器模式\",\"更具体的例子还有协程处理它从通道接收的数据并发送给输出通道：\",\"sendChan := make(chan int) receiveChan := make(chan string) go processChannel(sendChan, receiveChan) func processChannel(in <-chan int, out chan<- string) { for inValue := range in { result := ... /// processing inValue out <- result } } \",\"通过使用方向注解来限制协程对通道的操作。\",\"这里有一个来自 Go 指导的很赞的例子，打印了输出的素数，使用选择器（‘筛’）作为它的算法。每个 prime 都有一个选择器，如下图：\",\"版本 1：示例 14.7-sieve1.go\",\"// Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file.package main package main import \\\"fmt\\\" // Send the sequence 2, 3, 4, ... to channel 'ch'. func generate(ch chan int) { for i := 2; ; i++ { ch <- i // Send 'i' to channel 'ch'. } } // Copy the values from channel 'in' to channel 'out', // removing those divisible by 'prime'. func filter(in, out chan int, prime int) { for { i := <-in // Receive value of new variable 'i' from 'in'. if i%prime != 0 { out <- i // Send 'i' to channel 'out'. } } } // The prime sieve: Daisy-chain filter processes together. func main() { ch := make(chan int) // Create a new channel. go generate(ch) // Start generate() as a goroutine. for { prime := <-ch fmt.Print(prime, \\\" \\\") ch1 := make(chan int) go filter(ch, ch1, prime) ch = ch1 } } \",\"协程 filter(in, out chan int, prime int) 拷贝整数到输出通道，丢弃掉可以被 prime 整除的数字。然后每个 prime 又开启了一个新的协程，生成器和选择器并发请求。\",\"输出：\",\"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013... \",\"第二个版本引入了上边的习惯用法：函数 sieve()、generate() 和 filter() 都是工厂；它们创建通道并返回，而且使用了协程的 lambda 函数。main() 函数现在短小清晰：它调用 sieve() 返回了包含素数的通道，然后通过 fmt.Println(<-primes) 打印出来。\",\"版本 2：示例 14.8-sieve2.go\",\"// Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. package main import ( \\\"fmt\\\" ) // Send the sequence 2, 3, 4, ... to returned channel func generate() chan int { ch := make(chan int) go func() { for i := 2; ; i++ { ch <- i } }() return ch } // Filter out input values divisible by 'prime', send rest to returned channel func filter(in chan int, prime int) chan int { out := make(chan int) go func() { for { if i := <-in; i%prime != 0 { out <- i } } }() return out } func sieve() chan int { out := make(chan int) go func() { ch := generate() for { prime := <-ch ch = filter(ch, prime) out <- prime } }() return out } func main() { primes := sieve() for { fmt.Println(<-primes) } } \",\"通道可以被显式的关闭；尽管它们和文件不同：不必每次都关闭。只有在当需要告诉接收者不会再提供新的值的时候，才需要关闭通道。只有发送者需要关闭通道，接收者永远不会需要。\",\"继续看示例 goroutine2.go（示例 14.2）：我们如何在通道的 sendData() 完成的时候发送一个信号，getData() 又如何检测到通道是否关闭或阻塞？\",\"第一个可以通过函数 close(ch) 来完成：这个将通道标记为无法通过发送操作 <- 接受更多的值；给已经关闭的通道发送或者再次关闭都会导致运行时的 panic()。在创建一个通道后使用 defer 语句是个不错的办法（类似这种情况）：\",\"ch := make(chan float64) defer close(ch) \",\"第二个问题可以使用逗号 ok 模式用来检测通道是否被关闭。\",\"如何来检测可以收到没有被阻塞（或者通道没有被关闭）？\",\"v, ok := <-ch // ok is true if v received value \",\"通常和 if 语句一起使用：\",\"if v, ok := <-ch; ok { process(v) } \",\"或者在 for 循环中接收的时候，当关闭的时候使用 break：\",\"v, ok := <-ch if !ok { break } process(v) \",\"而检测通道当前是否阻塞，需要使用 select（参见第 14.4 节）。\",\"select { case v, ok := <-ch: if ok { process(v) } else { fmt.Println(\\\"The channel is closed\\\") } default: fmt.Println(\\\"The channel is blocked\\\") } \",\"在示例程序 14.2 中使用这些可以改进为版本 goroutine3.go，输出相同。\",\"实现非阻塞通道的读取，需要使用 select（参见第 14.4 节）。\",\"示例 14.9-goroutine3.go：\",\"package main import \\\"fmt\\\" func main() { ch := make(chan string) go sendData(ch) getData(ch) } func sendData(ch chan string) { ch <- \\\"Washington\\\" ch <- \\\"Tripoli\\\" ch <- \\\"London\\\" ch <- \\\"Beijing\\\" ch <- \\\"Tokio\\\" close(ch) } func getData(ch chan string) { for { input, open := <-ch if !open { break } fmt.Printf(\\\"%s \\\", input) } } \",\"改变了以下代码：\",\"现在只有 sendData() 是协程，getData() 和 main() 在同一个线程中：\",\"go sendData(ch) getData(ch) \",\"在 sendData() 函数的最后，关闭了通道：\",\"func sendData(ch chan string) { ch <- \\\"Washington\\\" ch <- \\\"Tripoli\\\" ch <- \\\"London\\\" ch <- \\\"Beijing\\\" ch <- \\\"Tokio\\\" close(ch) } \",\"在 for 循环的 getData() 中，在每次接收通道的数据之前都使用 if !open 来检测：\",\"for { input, open := <-ch if !open { break } fmt.Printf(\\\"%s \\\", input) } \",\"使用 for-range 语句来读取通道是更好的办法，因为这会自动检测通道是否关闭：\",\"for input := range ch { process(input) } \",\"阻塞和生产者-消费者模式：\",\"在第 14.2.10 节的通道迭代器中，两个协程经常是一个阻塞另外一个。如果程序工作在多核心的机器上，大部分时间只用到了一个处理器。可以通过使用带缓冲（缓冲空间大于 0）的通道来改善。比如，缓冲大小为 100，迭代器在阻塞之前，至少可以从容器获得 100 个元素。如果消费者协程在独立的内核运行，就有可能让协程不会出现阻塞。\",\"由于容器中元素的数量通常是已知的，需要让通道有足够的容量放置所有的元素。这样，迭代器就不会阻塞（尽管消费者协程仍然可能阻塞）。然而，这实际上加倍了迭代容器所需要的内存使用量，所以通道的容量需要限制一下最大值。记录运行时间和性能测试可以帮助你找到最小的缓存容量带来最好的性能。\"]},\"710\":{\"h\":\"第 15 章：网络、模板与网页应用\"},\"711\":{\"h\":\"第 16 章：常见的陷阱与错误\"},\"712\":{\"h\":\"第 17 章：模式\"},\"713\":{\"h\":\"第 18 章：出于性能考虑的实用代码片段\"},\"714\":{\"h\":\"第 19 章：构建一个完整的应用程序\"},\"715\":{\"h\":\"第 20 章：Go 语言在 Google App Engine 的使用\"},\"716\":{\"h\":\"第 21 章：真实世界中 Go 的使用\"},\"717\":{\"c\":[\"Golang\"]},\"718\":{\"c\":[\"Docs\"]},\"719\":{\"h\":\"Java Docs\"},\"720\":{\"h\":\"1. Java简介\"},\"721\":{\"h\":\"*. JDK21\"},\"722\":{\"h\":\"*.1 虚拟线程\"},\"723\":{\"h\":\"*. 常用的正则匹配规则\",\"t\":[\"\\\\s 表示空白字符。包括，空格，制表符等 \\\\s+ 可匹配至少一个Space。 \\\\s* 匹配0到多个Space \"]},\"724\":{\"h\":\"*. Java Swing JFileChooser(文件选择器)\"},\"725\":{\"h\":\"*.1 常用API\",\"t\":[\"// 实例化 JFileChooser fileChooser = new JFileChooser(); //打开确认按钮文本是“打开”的文件选择器 fileChooser.showOpenDialog(null); //打开确认按钮文本是“保存”的文件选择器 fileChooser.showSaveDialog(null); // 拿到文件系统 FileSystemView fsv = FileSystemView.getFileSystemView(); // 设置过滤器 FileNameExtensionFilter fileNameExtensionFilter = new FileNameExtensionFilter(\\\"all\\\",\\\"txt\\\",\\\"exe\\\"); // 修改为英文 JFileChooser.setDefaultLocale(Locale.US); // 设置当前工作目录为桌面 fileChooser.setCurrentDirectory(fsv.getHomeDirectory()); // 设置标头 fileChooser.setDialogTitle(\\\"select\\\"); // 设置文件选择类型 fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES); // 设置多文件选择模式 fileChooser.setMultiSelectionEnabled(true); // 移除所有文件过滤模式 fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter()); // 添加文件过滤 fileChooser.setFileFilter(fileNameExtensionFilter); // 拿到操作结果 int result = fileChooser.showOpenDialog(null); // 判断操作结果 if(result == JFileChooser.APPROVE_OPTION) { // 打印所选文件路径 System.out.println(\\\"path: \\\" + Arrays.toString(fileChooser.getSelectedFiles())); } \"]},\"726\":{\"h\":\"*.2 设置默认打开的路径为桌面\",\"t\":[\"/** * JFileChooser fileChooser = new JFileChooser()，这个括号里面是可以传路径参数的 */ //直接传参 FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser fileChooser = new JFileChooser(fsv); fileChooser.showOpenDialog(null); //间接参数 FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(fsv.getHomeDirectory()); fileChooser.showOpenDialog(null); \"]},\"727\":{\"h\":\"*.3 拿到选择的文件路径\",\"t\":[\"/** * JFileChooser 的返回值，代表着不同的状态，例如：用户点了取消按钮或者打开/保存。 * 所以比较返回值即可，加入下面这两行，即可拿到当前状态： * int result = fileChooser.showOpenDialog(null); * if(result == JFileChooser.APPROVE_OPTION) * 加入下面这一行，即可拿到路径： * fileChooser.getSelectedFile().getAbsolutePath() */ FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()); int result = fileChooser.showOpenDialog(null); if(result == JFileChooser.APPROVE_OPTION) { System.out.println(\\\"path: \\\" + fileChooser.getSelectedFile().getAbsolutePath()); } \"]},\"728\":{\"h\":\"*.4 如何选择文件夹\",\"t\":[\"/** * fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); * 上面这行是JFileChooser 的选择类型样例：它的选择类型有基本的三种：文件、文件夹、文件和文件夹。 */ FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()); fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); int result = fileChooser.showOpenDialog(null); if(result == JFileChooser.APPROVE_OPTION) { System.out.println(\\\"path: \\\" + fileChooser.getSelectedFile().getAbsolutePath()); } \"]},\"729\":{\"h\":\"*.5 如何过滤文件\",\"t\":[\"/** * 写一个过滤器 * FileNameExtensionFilter fileFilter = new FileNameExtensionFilter (“exe file”,“exe”); * 添加这个过滤器 * fileChooser.setFileFilter(fileFilter); */ FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()); fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); FileNameExtensionFilter fileFilter = new FileNameExtensionFilter (\\\"*.png\\\",\\\"png\\\"); fileChooser.setFileFilter(fileFilter); int result = fileChooser.showOpenDialog(null); if(result == JFileChooser.APPROVE_OPTION) { System.out.println(\\\"path: \\\" + fileChooser.getSelectedFile().getAbsolutePath()); } \"]},\"730\":{\"h\":\"*.6 如何将页面修改为英文\",\"t\":[\"/** * JFileChooser.setDefaultLocale(Locale.US); */ FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser.setDefaultLocale(Locale.US); JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()); fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); FileNameExtensionFilter fileFilter = new FileNameExtensionFilter (\\\"*.png\\\",\\\"png\\\"); fileChooser.setFileFilter(fileFilter); int result = fileChooser.showOpenDialog(null); if(result == JFileChooser.APPROVE_OPTION) { System.out.println(\\\"path: \\\" + fileChooser.getSelectedFile().getAbsolutePath()); } \"]},\"731\":{\"h\":\"*.7 如何选择多个文件\",\"t\":[\"/** * fileChooser.setMultiSelectionEnabled(true); */ FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser.setDefaultLocale(Locale.US); JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory()); fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); fileChooser.setMultiSelectionEnabled(true); int result = fileChooser.showOpenDialog(null); if(result == JFileChooser.APPROVE_OPTION) { System.out.println(\\\"path: \\\" + Arrays.toString(fileChooser.getSelectedFiles())); } \"]},\"732\":{\"h\":\"*.8 如何去掉所有文件选项\",\"t\":[\"/** * fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter()); */ FileSystemView fsv = FileSystemView.getFileSystemView(); JFileChooser.setDefaultLocale(Locale.US); JFileChooser fileChooser = new JFileChooser(); fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter()); fileChooser.setCurrentDirectory(fsv.getHomeDirectory()); int result = fileChooser.showOpenDialog(null); if(result == JFileChooser.APPROVE_OPTION) { System.out.println(\\\"path: \\\" + fileChooser.getSelectedFile()); } \"]},\"733\":{\"c\":[\"Java\"]},\"734\":{\"c\":[\"Docs\"]},\"735\":{\"h\":\"SpringBoot Docs\"},\"736\":{\"h\":\"1.SpringBoot简介\"},\"737\":{\"c\":[\"SpringBoot\"]},\"738\":{\"c\":[\"Docs\"]},\"739\":{\"h\":\"SpringCloud Docs\"},\"740\":{\"h\":\"1.SpringCloud简介\"},\"741\":{\"c\":[\"SpringCloud\"]},\"742\":{\"c\":[\"Docs\"]},\"743\":{\"h\":\"Spring Framework Docs\"},\"744\":{\"h\":\"1.Spring Framework简介\"},\"745\":{\"c\":[\"Spring\"]},\"746\":{\"c\":[\"Docs\"]},\"747\":{\"h\":\"TypeScript Docs\"},\"748\":{\"h\":\"1. TypeScript编译和运行\"},\"749\":{\"h\":\"1.1. 编译(ts => js)\",\"t\":[\"npm install -g tsc tsc main.ts \"]},\"750\":{\"h\":\"1.2. 运行\",\"t\":[\"npm install -g tsx tsx main.ts \"]},\"751\":{\"h\":\"2. 变量声明\"},\"752\":{\"h\":\"2.1. let 声明\",\"t\":[\"let str: string = '声明变量'; \"]},\"753\":{\"h\":\"2.2 const 声明\",\"t\":[\"const STR: string = '声明常量，不再进行赋值'; \"]},\"754\":{\"h\":\"3. 基础类型\"},\"755\":{\"h\":\"3.1. 布尔值 boolean\",\"t\":[\"true or false\",\"let flag: boolean = false; \"]},\"756\":{\"h\":\"3.2. 数字 number\",\"t\":[\"TypeScript里的所有数字都是浮点数\",\"let num: number = 123; \"]},\"757\":{\"h\":\"3.3. 字符串 string\",\"t\":[\"let str: string = \\\"gaoyang\\\"; //模板字符串:被反引号包围（ `），并且以${ expr }这种形式嵌入表达式 let say: string = `my name is ${str}`; \"]},\"758\":{\"h\":\"3.4. 数组\",\"t\":[\"第一种，可以在元素类型后面接上 []\",\"let arr1: number[] = [123, 123, 123]; \",\"第二种，使用数组泛型 Array<元素类型>\",\"let arr2: Array<number> = [123, 123, 123]; \"]},\"759\":{\"h\":\"3.5. 元组 Tuple\",\"t\":[\"元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。\",\"//声明 let tup :[string,number]; tup = [\\\"a\\\",1]; //访问元素 console.log(tup[0].substr(1)); \"]},\"760\":{\"h\":\"3.6. 枚举 enum\",\"t\":[\"默认情况下，从0开始为元素编号。或者，全部都采用手动赋值。\",\"//声明 enum x { Red,Greed,Blue } //由枚举名字找到枚举值 let a:x= x.Blue; console.log(a); //由枚举值找到枚举名字 let name:string = x[0]; console.log(name); \"]},\"761\":{\"h\":\"3.7. any\",\"t\":[\"在编程阶段还不清楚类型的变量指定一个类型。与object类型相似， 但是object类型的变量只是允许你给它赋任意值，但是却不能够在它上面调用任意的方法，即便它真的有这些方法。\",\"let notSure: any = 4; notSure = \\\"maybe a string instead\\\"; notSure = false; \"]},\"762\":{\"h\":\"3.8. object\",\"t\":[\"object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。\",\"declare function create(o: object | null): void; create({ prop: 0 }); // OK create(null); // OK create(42); // Error create(\\\"string\\\"); // Error create(false); // Error create(undefined); // Error \"]},\"763\":{\"h\":\"3.9. void\",\"t\":[\"void类型像是与any类型相反，它表示没有任何类型。\",\"function warnUser(): void { console.log(\\\"This is my warning message\\\"); } \"]},\"764\":{\"h\":\"3.10. null 和 undefined\",\"t\":[\"和 void相似，它们的本身的类型用处不是很大。默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。\",\"let u: undefined = undefined; let n: null = null; \"]},\"765\":{\"h\":\"3.11. never\",\"t\":[\"never类型表示的是那些永不存在的值的类型。\",\"// 返回never的函数必须存在无法达到的终点 function error(message: string): never { throw new Error(message); } // 推断的返回值类型为never function fail() { return error(\\\"Something failed\\\"); } // 返回never的函数必须存在无法达到的终点 function infiniteLoop(): never { while (true) { } } \"]},\"766\":{\"h\":\"3.12. 类型断言\",\"t\":[\"强制类型转换\",\"//方式一：<>语法 let someValue: any = \\\"this is a string\\\"; let strLength1: number = (<string>someValue).length; //方式二：as语法 let strLength2: number = (someValue as string).length; \"]},\"767\":{\"h\":\"4. 接口 interface\",\"t\":[\"TypeScript的核心原则之一是对值所具有的结构进行类型检查。\",\"接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。\"]},\"768\":{\"h\":\"4.1. 声明\",\"t\":[\"interface User { name:string; age:number; } function getUserAgeByName(user:User) { console.log(user.name,user.age) } let people = {name:\\\"gaoyang\\\",age:18} getUserAgeByName(people) \"]},\"769\":{\"h\":\"4.2. 可选属性\",\"t\":[\"接口里的属性不全都是必需的，有些是只在某些条件下存在，或者根本不存在。\",\"即给函数传入的参数对象中只有部分属性赋值了\",\"interface User { name:string; age:number; //可选属性 sex?:string } \"]},\"770\":{\"h\":\"4.3. 只读属性\",\"t\":[\"一些对象属性只能在对象刚刚创建的时候修改其值。\",\"interface Point { readonly x: number; readonly y: number; } //赋值后属性不能再改变 let p1: Point = { x: 10, y: 20 }; \",\"TypeScript具有ReadonlyArray< T >类型，它与Array< T >相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：\",\"let a: number[] = [1, 2, 3, 4]; let ro: ReadonlyArray<number> = a; ro[0] = 12; // error! ro.push(5); // error! ro.length = 100; // error! a = ro; // error! a = ro as number[]; // ok! \"]},\"771\":{\"h\":\"5. 类 class\"},\"772\":{\"h\":\"5.1. 类结构\",\"t\":[\"class User { name: string; constructor(name:string) { this.name = name; } getName():string{ return this.name; } } let people:User = new User(\\\"gaoyang\\\") console.log(perple.getName()) \"]},\"773\":{\"h\":\"5.2. 继承\"},\"774\":{\"c\":[\"TypeScript\"]},\"775\":{\"c\":[\"Docs\"]},\"776\":{\"h\":\"Github Action Docs\"},\"777\":{\"h\":\"1.Github Action简介\"},\"778\":{\"c\":[\"Github Action\"]},\"779\":{\"c\":[\"Docs\"]},\"780\":{\"h\":\"Docker Docs\"},\"781\":{\"h\":\"Docker简介\"},\"782\":{\"h\":\"*Docker镜像上传Github\",\"t\":[\"登录 :\",\"您可以使用 docker 登录命令，通过 Docker 向 GitHub Packages 验证。\",\"为确保凭据安全，建议将个人访问令牌保存在您计算机上的本地文件中，然后使用 Docker 的 --password-stdin 标志从本地文件读取您的令牌。\",\"echo [token] | docker login ghcr.io -u [GithubName] --password-stdin \",\"上传镜像:\",\"1.准备镜像(最后面有个.)将 OWNER 替换为拥有仓库的用户或组织帐户的名称(使用小 写)，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映像的名称，将 VERSION 替换为构建时的包版本。 而 VERSION 使用构建时的软件包版本。\",\"docker build -t ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION . \",\"2.使用 docker images 确定 docker 映像的名称和 ID。\",\"docker images \",\"3.使用 Docker 映像 ID 标记 docker 映像.\",\"docker tag IMAGE_ID:VERSION ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION \",\"4.上传\",\"docker push ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:VERSION \",\"下载镜像:\",\"您可以使用 docker pull 命令从 GitHub Packages 安装 Docker 映像，将 OWNER 替换为拥有仓库的 用户或组织帐户的名称，将 REPOSITORY 替换为包含项目的仓库的名称，将 IMAGE_NAME 替换为包或映 像的名称，并将 TAG_NAME 替换为要安装的映像的标记。\",\"docker pull ghcr.io/OWNER/REPOSITORY(可不写)/IMAGE_NAME:TAG_NAME \"]},\"783\":{\"c\":[\"Docker\"]},\"784\":{\"c\":[\"Docs\"]},\"785\":{\"h\":\"Kubernetes Docs\"},\"786\":{\"h\":\"1. Kubernetes简介\"},\"787\":{\"h\":\"2. Kubernetes安装\"},\"788\":{\"h\":\"2.1 minikube\"},\"789\":{\"h\":\"2.2 集群部署\"},\"790\":{\"h\":\"3. Kubernetes组件\"},\"791\":{\"c\":[\"Kubernetes\"]},\"792\":{\"c\":[\"Docs\"]},\"793\":{\"h\":\"算法\"},\"794\":{\"c\":[\"数据结构与算法\"]},\"795\":{\"c\":[\"算法\"]},\"796\":{\"h\":\"数据结构\"},\"797\":{\"c\":[\"数据结构与算法\"]},\"798\":{\"c\":[\"数据结构\"]},\"799\":{\"h\":\"设计模式\"},\"800\":{\"h\":\"一、单例模式\"},\"801\":{\"h\":\"简介\",\"t\":[\"单例模式确保类只有一个实例，而且自行实例化并向整个系统提供这个实例。\",\"在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。\"]},\"802\":{\"h\":\"特点\",\"t\":[\"单例类只能有一个实例。\",\"单例类必须自己创建自己的唯一实例。\",\"单例类必须给所有其他对象提供这一实例。\"]},\"803\":{\"h\":\"实现方式\",\"t\":[\"饿汉式（静态常量） \",\"优点：在类装载的时候完成实例化\",\"缺点：由于在类装载的时候完成实例化，不使用会造成内存浪费。\",\"public class User { private static final User USER = new User(); private User(){} public static User getInstance(){ return USER; } } \",\"饿汉式（静态代码块） \",\"优点：在类装载的时候完成实例化\",\"缺点：由于在类装载的时候完成实例化，不使用会造成内存浪费。\",\"public class User { private static User user; { user = new User(); } private User(){} public static User getInstance(){ return user; } } \",\"懒汉式（线程不安全） \",\"优点：使用时再加载\",\"缺点：多线程下，线程不安全\",\"public class User { private static User user; private User(){} public static User getInstance(){ if (user==null){ user = new User(); } return user; } } \",\"懒汉式（同步方法） \",\"优点：使用时再加载，线程安全\",\"缺点：效率低\",\"public class User { private static User user; private User(){} public static synchronized User getInstance(){ if (user==null){ user = new User(); } return user; } } \",\"懒汉式（同步代码块） \",\"优点：使用时再加载，线程安全\",\"缺点：假如一个线程进入了if (user == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。\",\"public class User { private static User user; private User(){} public static synchronized User getInstance(){ if (user==null){ user = new User(); } return user; } } \",\"双重检查（推荐使用Double-Check） \",\"优点：线程安全；延迟加载；效率较高。\",\"public class User { private static volatile User user; private User(){} public static User getInstance(){ if (user==null){ synchronized(User.class){ user = new User(); } } return user; } } \",\"静态内部类（推荐使用） \",\"优点：这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。 类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。 避免了线程不安全，延迟加载，效率高。\",\"public class User { private User(){} private static class UserInstance { private static final User USER = new User(); } public static User getInstance(){ return UserInstance.USER; } } \",\"枚举（推荐使用） \",\"优点：借助JDK1.5中添加的枚举来实现单例模式。因为Java虚拟机会保证枚举对象的唯一性，因此每一个枚举类型和定义的枚举变量在JVM中都是唯一的。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。\",\"public enum User { INSTANCE; public void businessMethod() { System.out.println(\\\"我是一个单例！\\\"); } } \"]},\"804\":{\"c\":[\"设计模式\"]},\"805\":{\"c\":[\"设计模式\"]},\"806\":{\"h\":\"Git Docs\"},\"807\":{\"h\":\"1.Git简介\"},\"808\":{\"h\":\"2.Git结构及基础命令\",\"t\":[\"工作区（写代码） == git add ==> 暂存区（临时存储） == git commit ==> 本地区（历史版本） == git push ==> 远程库（代码托管、本地维护） == git clone ==> 克隆远程库到本地 == git pull ==》 拉取远程库到本地 == git fork ==》复制远程库 == git pull request ==> 提交拉取请求给远程库 == git merge ==> 提交合并请求，审核通过进行合并 \"]},\"809\":{\"h\":\"3.代码托管中心\",\"t\":[\"》局域网 》》GitLab服务器 》外网 》》GitHub 》》码云 \"]},\"810\":{\"h\":\"4.本地库初始化\",\"t\":[\"命令：git init 效果：生成.git目录 \"]},\"811\":{\"h\":\"5.设置签名\",\"t\":[\"用户名：gy Email地址: 111111111@qq.com 项目级别/仓库级别：仅仅在当前本地范围内有效 git config user.name \\\"xxx\\\" git config user.email \\\"xxx@qq.com\\\" 系统用户级别： 登录当前操作系统的作用范围 git config user.name --global \\\"xxx\\\" git config user.email --global \\\"xxx@qq.com\\\" 优先级别：就近原则：项目级别优先于系统级别（必须两者其一） \"]},\"812\":{\"h\":\"6.查看工作区、暂存区状态\",\"t\":[\"命令：git status \"]},\"813\":{\"h\":\"7.将工作区的“新建/修改”添加到暂存区\",\"t\":[\"命令: git add <file> \"]},\"814\":{\"h\":\"8.将提交至暂存区的代码回退到工作区\",\"t\":[\"命令：git rm --cached <file> \"]},\"815\":{\"h\":\"9.暂存区的内容提交至本地库\",\"t\":[\"命令：git commit <file> ####填写提交信息####### i xxxxxxxx :wq ########### or 命令：git commit -m \\\"提交信息\\\" <file> \"]},\"816\":{\"h\":\"10.提交本地库后修改文件后进行撤销操作\",\"t\":[\"命令：git restore <file> \"]},\"817\":{\"h\":\"11.修改文件后的提交操作\",\"t\":[\"命令：git add <file> and/or git commit <file> \"]},\"818\":{\"h\":\"12.查看历史记录操作\",\"t\":[\"完整： 命令：git log 多屏显示：空格向下翻页 b向上翻页 q退出 简洁： 命令：git log --pretty=oneline 命令：git log --oneline 只显示当前版本后的记录操作 命令：git log reflog \"]},\"819\":{\"h\":\"13.前进后退版本 -------------------\",\"t\":[\"基于索引值操作 git reset --hard [局部索引值] 使用^符号,只能后退（一个^符号表示退一步） 后退一步： git reset --hard HEAD^ 后退二步： git reset --hard HEAD^^ 使用~符号，只能后退（补上^符号的缺陷） 后退N步： git reset --hard HEAD~N \"]},\"820\":{\"h\":\"14.reset命令的三个参数\",\"t\":[\"--soft 仅仅在本地库移动HEAD指针 --mixed 在本地库移动HEAD指针 重置暂存区 --hard 在本地库中移动HEAD指针 重置暂存区 重置工作区 \"]},\"821\":{\"h\":\"15.删除文件并找回\",\"t\":[\"前提：删除前，文件存在时的状态提交到本地库 操作：git reset --hard [指针位置] 删除操作已经提交到本地库：指针位置指向历史记录 删除操作尚未提交到本地库：指针位置使用HEAD \"]},\"822\":{\"h\":\"16.比较文件差异\",\"t\":[\"git diff HEAD [文件名] 将工作区中的文件与暂存区进行比较 git diff HEAD [本地库中的历史版本][文件名] 将工作区的文件和本地库历史记录进行比较 git diff HEAD 比较多个文件 \"]},\"823\":{\"h\":\"17.查看分支\",\"t\":[\"命令：git branch -v \"]},\"824\":{\"h\":\"18.创建分支\",\"t\":[\"命令：git branch <分支名> \"]},\"825\":{\"h\":\"19.切换分支\",\"t\":[\"命令：git checkout <分支名> \"]},\"826\":{\"h\":\"20.合并分支\",\"t\":[\"命令：git merge hot_fix **必须先切换到要合并的分支上面 \"]},\"827\":{\"h\":\"21.仓库地址备忘录查看\",\"t\":[\"命令：git remote -v 添加：git remote add origin xxxxxxxxxxxxxx 《别名》《地址》 删除：git remote remove origin xxxxxxxxxxxxxx 《别名》《地址》 \"]},\"828\":{\"h\":\"22.推送远程库\",\"t\":[\"命令：git push origin master **报错：fatal: unable to access 'https://github.com/gaoyang0514/JavaBase.git/': OpenSSL SSL_read: Connection was aborted, errno 10053 **原因：服务器的SSL证书没有经过第三方机构的签署 **解决方式：全局使用 git config --global http.sslVerify \\\"false\\\" git config --global https.sslVerify \\\"false\\\" 命令，然后在cd到对应目录push \"]},\"829\":{\"h\":\"23.远程库拉取\",\"t\":[\"pull = fetch + merge 抓取：不更改本地，可以先进行查看，确定后再merge 命令：git fetch origin master <远程地址别名> <远程分支名> 合并：更改本地 命令：git merge origin/master <远程地址别名>/<远程分支名> \"]},\"830\":{\"h\":\"24.解决冲突\",\"t\":[\"注意：如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取。 如果拉取下来后如果进去冲突状态，则按照“分支冲突解决”，操作解决即可。 \"]},\"831\":{\"h\":\"25.跨团队协作\",\"t\":[\"复制远程库： 命令：git fork 申请合并远程库 命令：git pull request \"]},\"832\":{\"h\":\"26.Github DNS\",\"t\":[\"#GitHub: 140.82.112.3 github.com 140.82.112.4 github.com 140.82.113.3 github.com 140.82.113.4 github.com 140.82.114.3 github.com 140.82.114.4 github.com 140.82.112.25 alive.github.com 140.82.112.26 alive.github.com 140.82.113.25 alive.github.com 140.82.113.26 alive.github.com 140.82.114.25 alive.github.com 140.82.114.26 alive.github.com 140.82.112.5 api.github.com 140.82.112.6 api.github.com 140.82.113.5 api.github.com 140.82.113.6 api.github.com 140.82.114.5 api.github.com 140.82.114.6 api.github.com 140.82.112.21 collector.github.com 140.82.112.22 collector.github.com 140.82.113.21 collector.github.com 140.82.113.22 collector.github.com 140.82.114.21 collector.github.com 140.82.114.22 collector.github.com 140.82.112.3 gist.github.com 140.82.112.4 gist.github.com 140.82.113.3 gist.github.com 140.82.113.4 gist.github.com 140.82.114.3 gist.github.com 140.82.114.4 gist.github.com 185.199.108.154 github.githubassets.com 185.199.109.154 github.githubassets.com 185.199.110.154 github.githubassets.com 185.199.111.154 github.githubassets.com 185.199.108.133 github.Githubusercontent.com 185.199.109.133 github.Githubusercontent.com 185.199.110.133 github.Githubusercontent.com 185.199.111.133 github.Githubusercontent.com 185.199.108.133 raw.githubusercontent.com 185.199.109.133 raw.githubusercontent.com 185.199.110.133 raw.githubusercontent.com 185.199.111.133 raw.githubusercontent.com 185.199.108.133 avatars.githubusercontent.com 185.199.109.133 avatars.githubusercontent.com 185.199.110.133 avatars.githubusercontent.com 185.199.111.133 avatars.githubusercontent.com 185.199.108.133 user-images.githubusercontent.com 185.199.109.133 user-images.githubusercontent.com 185.199.110.133 user-images.githubusercontent.com 185.199.111.133 user-images.githubusercontent.com 185.199.108.133 camo.githubusercontent.com 185.199.109.133 camo.githubusercontent.com 185.199.110.133 camo.githubusercontent.com 185.199.111.133 camo.githubusercontent.com 185.199.108.133 objects.githubusercontent.com 185.199.109.133 objects.githubusercontent.com 185.199.110.133 objects.githubusercontent.com 185.199.111.133 objects.githubusercontent.com \"]},\"833\":{\"c\":[\"Git\"]},\"834\":{\"c\":[\"Docs\"]},\"835\":{\"h\":\"Kafka Docs\"},\"836\":{\"h\":\"1.Kafka简介\"},\"837\":{\"c\":[\"Kafka\"]},\"838\":{\"c\":[\"Docs\"]},\"839\":{\"h\":\"RabbitMQ Docs\"},\"840\":{\"h\":\"1.RabbitMQ简介\"},\"841\":{\"c\":[\"RabbitMQ\"]},\"842\":{\"c\":[\"Docs\"]},\"843\":{\"h\":\"JSON Web Token\"},\"844\":{\"h\":\"1 介绍\",\"t\":[\"JSON Web Token，简称 JWT（\\\"jot\\\"），是在空间受限的环境中安全传递请求的标准。它已进入所有主要的网络框架。简洁、紧凑和可用性是其架构的主要特点。尽管更复杂的系统仍在使用，但 JWT 的应用范围非常广泛。在这本小手册中，我们将介绍 JWT 架构最重要的方面，包括其二进制表示法和用于构建 JWT 的算法，同时还将介绍 JWT 在行业中的常用方法。\"]},\"845\":{\"h\":\"1.1 什么是JSON Web Token?\",\"t\":[\"JSON Web Token的外观如下（为便于阅读插入了换行符）\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ \",\"虽然这看起来像胡言乱语，它实际上是一个非常紧凑的，一系列Claims的打印表示，连同Signatures以验证其真实性。\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" } { \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true } \",\"Claims是对某一方或某一对象的定义或断言。其中一些声明及其含义是JWT规范的一部分。其他由用户定义。JWT 背后的神奇之处在于，它将某些在某些常见操作中非常有用的声明标准化了。例如，这些常见操作之一是确定某些当事人的身份。因此，JWT 中的一个标准说法是sub(subject),我们将在第3章深入探讨每种标准claims。 JWT 的另一个关键点是可以对其进行Signatures,使用JSON Web Signatures(JWS,RFC 75156)对它们进行Signatures或使用JSON Web Encryption(JWE, RFC 75167)对它们进行加密的可能性。jwt与JWS和JWE一起，为许多不同的问题提供了强大、安全的解决方案。\"]},\"846\":{\"h\":\"1.2 它解决了什么问题?\",\"t\":[\"虽然 JWT 的主要目的是在双方之间传输请求，但可以说其中最重要的方面是以一种简单、可选择验证或加密的容器格式的形式进行标准化工作。过去，人们曾私下或公开地实施过针对同一问题的特别解决方案。此外，还有一些较早的标准，用于建立对某些当事人的声明。JWT 带来的是一种简单、实用的标准容器格式。 虽然目前给出的定义有点抽象，但不难想象它们可以如何使用：登录系统（当然也可能有其他用途）。我们将在第 2 章中进一步探讨实际应用。其中一些应用包括: • Authentication • Authorization • Federated identity • Client-side sessions (“stateless” sessions) • Client-side secrets\"]},\"847\":{\"h\":\"2 实际应用(大致翻译未完成)\",\"t\":[\"在深入了解 JWT 的结构和构造之前，我们先来看看几个实际应用。本章将让您了解目前业界常用的基于 JWT 的解决方案的复杂性（或简单性）。为方便起见，所有代码均可从公共存储库中获取。请注意，以下演示并非用于生产。测试用例、日志记录和安全最佳实践都是生产就绪代码所必需的。这些示例仅用于教育目的,因此保持简单扼要。\"]},\"848\":{\"h\":\"2.1 Client-side/Stateless Sessions\",\"t\":[\"所谓的Stateless Sessions实际上只不过是客户端数据。这种应用的关键在于使用Signatures和可能的加密来验证和保护会话内容。客户端数据容易被篡改。因此，后端必须非常小心地处理这些数据。\",\"JWT 通过 JWS 和 JWE 可以提供各种类型的Signatures和加密。Signatures用于验证数据是否被篡改。加密有助于保护数据不被第三方读取\",\"大多数情况下，Sessions只需要Signatures。换句话说，当存储在其中的数据被第三方读取时，没有任何安全或隐私问题。通常可以由第三方安全地阅读的权利要求的一个常见示例是sub要求(“subject”)。主题声明通常将一方识别为另一方(想想用户id或电子邮件)。这并不要求声明是唯一的。换句话说，可能需要额外的声明来唯一地标识用户。这是留给用户决定的。 一个可能不宜公开的权利要求可能是代表用户购物车的 \\\"物品 \\\"权利要求。购物车中可能装满了用户即将购买的物品，因此与用户的会话相关联。如果这些物品存储在未加密的 JWT 中，第三方（客户端脚本）可能会获取这些物品，从而引发隐私问题。\"]},\"849\":{\"h\":\"3 JSON Web Token 详解\",\"t\":[\"如第 1 章所述，所有 JWT 都由三个不同的元素构成：头、有效载荷和Signatures/加密数据。前两个元素是具有特定结构的 JSON 对象。第三个元素取决于用于Signatures或加密的算法，如果是未加密的 JWT，则省略。JWT 可以用一种称为 JWS/JWE 紧凑序列化的紧凑表示法进行编码。\",\"JWS 和 JWE 规范定义了第三种序列化格式，即 JSON 序列化，这是一种非紧凑型表示法，允许在同一个 JWT 中使用多个Signatures或接收方。第 4 章和第 5 章对此有详细解释。\",\"紧凑型序列化是对前两个 JSON 元素（标头和有效载荷）的 UTF-8 字节以及Signatures或加密数据（本身不是 JSON 对象）的 Base64 URL 安全编码。这些数据也是 Base64-URL 编码。这三个元素之间用点（\\\".\\\"）隔开。\",\"JWT 使用对 URL 安全的 Base64 编码变体。这种编码基本上是用 \\\"+\\\"和\\\"/\\\"字符分别代替\\\"-\\\"和\\\"_\\\"字符。同时也去掉了填充。这种变体被称为 base64url 。请注意，本文档中所有对 Base64 编码的引用都是指这种变体。\",\"生成的序列是一个可打印的字符串，如下所示（为了便于阅读，插入了换行符）：\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ \",\"请注意分隔 JWT 三个元素的圆点（按顺序：报头、有效载荷和Signatures）。\",\"在本例中，解码后的报文头(header)为:\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" } \",\"解码后的有效载荷(payload)为:\",\"{ \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true } \",\"而验证Signatures所需的密钥(secret)是保密的。\"]},\"850\":{\"h\":\"3.1 The Header\",\"t\":[\"每个 JWT 都带有一个header（也称为 JOSE header），其中包含对自身的声明。这些声明确定了所使用的算法、JWT 是否已Signatures或加密，以及一般情况下如何解析 JWT 的其余部分。 根据有关 JWT 的类型，标头中可能有更多字段是必填的。例如，加密 JWT 包含密钥加密和内容加密所用加密算法的信息。未加密的 JWT 则没有这些字段。 未加密 JWT header的唯一强制声明是算法声明：\",\"alg：用于签署或解密此 JWT 的主要算法。\",\"对于未加密的 JWT，该声明的值必须设为 none。\",\"可选的header声明包括 typ 和 cty 声明：\",\"typ：JWT 本身的媒体类型。该参数仅用于帮助 JWT 与携带 JOSE header 的其他对象混合使用。实际上，这种情况很少发生。如果存在，则应将其设置为 JWT 的值\",\"cty：内容类型。大多数 JWT 的有效载荷(payload)都包含特定声明和任意数据。在这种情况下，不得设置内容类型声明。对于有效载荷本(payload)身就是 JWT（嵌套 JWT）的情况，则必须存在该声明并携带 JWT 值。这就告诉实现者需要进一步处理嵌套的 JWT。嵌套 JWT 很少见，因此头中很少会出现 cty 声明。\",\"因此，对于未加密的 JWT header 的内容很简单：\",\"{ \\\"alg\\\": \\\"none\\\" } \",\"编码为:\",\"eyJhbGciOiJub25lIn0\",\"可以在标头中添加用户定义的附加声明。这通常用处有限，除非在解密前的加密 JWT 中需要某些特定于用户的元数据。\"]},\"851\":{\"h\":\"3.2 The Payload\",\"t\":[\"{ \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true } \",\"有效载荷(Payload)通常是添加用户数据的元素。此外，规范中定义的某些声明也可能出现在其中。与标头(Header)一样，有效载荷(Payload)也是一个 JSON 对象。尽管特定声明有明确的含义，但没有任何声明是强制性的。JWT 规范规定，实施不理解的主张应被忽略。具有特定含义的声明称为注册声明。\"]},\"852\":{\"h\":\"3.2.1 Registered Claims\",\"t\":[\"iss：来自单词 issuer。一个区分大小写的字符串或 URI，用于唯一标识 JWT 的签发方。它的解释与应用程序有关（没有管理签发方的中央机构）。\",\"sub：来自 subject（主题）一词。一个区分大小写的字符串或 URI，用于唯一标识该 JWT 所含信息的相关方。换句话说，该 JWT 中包含的权利要求是关于该方的声明。JWT 规范规定，在签发方的上下文中，该权利要求必须是唯一的，如果无法做到这一点，则必须是全球唯一的。该声明的处理与应用程序有关。\",\"aud：来自 audience 一词。可以是单个区分大小写的字符串或 URI，也可以是此类值的数组，用于唯一标识此 JWT 的预期收件人。换句话说，当出现这种说法时，读取此 JWT 中数据的一方必须在 aud 说法中找到自己或忽略 JWT 中包含的数据。与 iss 和 sub 权利要求一样，该权利要求也是针对特定应用的。\",\"exp：取自 expiration（时间）一词。一个代表特定日期和时间的数字，格式为 POSIX 所定义的 \\\"自纪元起的秒数\\\"。这一说法设定了该 JWT 被视为无效的确切时间。某些实现可能会允许时钟之间存在一定的偏差（认为 JWT 在过期日期后的几分钟内有效）。\",\"nbf：从非之前（时间）开始。与 exp 声明相反。根据 POSIX 的定义，以 \\\"自纪元起的秒数 \\\"格式表示特定日期和时间的数字。该声明设定了该 JWT 被视为有效的确切时间。当前时间和日期必须等于或晚于该日期和时间。某些实现可能允许一定的偏差。\",\"iat：来自发布时间（时间）。代表该 JWT 发布的具体日期和时间的数字（格式与 exp 和 nbf 相同）。\",\"jti：来自 JWT ID。代表此 JWT 唯一标识符的字符串。该标识可用于区分具有其他类似内容的 JWT（例如防止重放）。能否保证唯一性取决于实施。\",\"您可能已经注意到，所有名称都很短。这符合设计要求之一：使 JWT 尽可能小。\",\"字符串或 URI：根据 JWT 规范，URI 被解释为包含:字符的任何字符串。有效值的提供取决于实现。\"]},\"853\":{\"h\":\"3.2.2 Public and Private Claims\",\"t\":[\"所有不属于已注册Claims部分的Claims都属于私人Claims或公共Claims。\",\"私人Claims：是由 JWT 用户（消费者和生产者）定义的要求。换句话说，这些是用于特定情况的特殊要求。因此，必须注意防止碰撞。\",\"公共Claims：是指在IANA JSON Web Token Claims注册（用户可在此注册其Claims，从而防止碰撞）注册的Claims，或使用抗碰撞名称（例如，在名称前加上命名空间）命名的权利要求。\",\"实际上，大多数申请要么是注册申请，要么是私人申请。一般来说，大多数 JWT 的发布都有特定的目的和明确的潜在用户。这样，挑选抗碰撞名称的工作就变得简单了。\",\"正如在 JSON 解析规则中一样，重复请求（重复的 JSON 键）的处理方法是只保留最后出现的有效请求。JWT 规范还允许实现将重复声明的 JWT 视为无效。在实践中，如果您不确定将处理您的 JWT 的实现，请注意避免重复声明。\"]},\"854\":{\"h\":\"3.3 不安全的JWT\",\"t\":[\"根据我们目前所学到的知识，可以构建不安全的 JWT。这是最简单的 JWT，由一个简单（通常是静态）的标头组成：\",\"{ \\\"alg\\\": \\\"none\\\" } \",\"和用户定义的有效载荷。例如\",\"{ \\\"sub\\\": \\\"user123\\\", \\\"session\\\": \\\"ch72gsb320000udocl363eofy\\\", \\\"name\\\": \\\"Pretty Name\\\", \\\"lastpage\\\": \\\"/views/settings\\\" } \",\"由于没有Signatures或加密，该 JWT 编码为简单的两个元素（为便于阅读插入了换行符）：\",\"eyJhbGciOiJub25lIn0. eyJzdWIiOiJ1c2VyMTIzIiwic2Vzc2lvbiI6ImNoNzJnc2IzMjAwMDB1ZG9jbDM2M 2VvZnkiLCJuYW1lIjoiUHJldHR5IE5hbWUiLCJsYXN0cGFnZSI6Ii92aWV3cy9zZXR0aW5ncyJ9. \",\"像上图这样不安全的 JWT 可能适合客户端使用。例如，如果Session ID 是一个难以猜测的数字，而其余数据仅用于客户端构建视图，那么使用Signatures就是多余的。单页面网络应用程序可以使用这些数据为用户构建一个具有 \\\"漂亮 \\\"名称的视图，而不会在用户被重定向到上次访问的页面时对后台造成影响。即使恶意用户修改了这些数据，也不会得到任何好处。\",\"注意紧凑表示法中的尾点（.）。由于没有Signatures，它只是一个空字符串。但仍添加了点。\",\"但实际上，不安全的 JWT 并不多见。\"]},\"855\":{\"h\":\"3.4 编码不安全的JWT\",\"t\":[\"要从header和payload的 JSON 版本得出紧凑的表示，请执行以下步骤：\",\"将header作为其 UTF-8 表示形式的字节数组。JWT 规范不要求在编码前对 JSON 进行精简或去除无意义的字符（如空白）。\",\"使用 Base64-URL 算法对字节数组进行编码，去掉尾部的等号 (=)。\",\"将payload作为其 UTF-8 表示形式的字节数组。JWT 规范不要求在编码前对 JSON 进行精简或去除无意义字符（如空白）。\",\"使用 Base64-URL 算法对字节数组进行编码，去掉尾部的等号 (=)。\",\"将生成的字符串连接起来，首先是header，然后是\\\".\\\"字符，最后是payload。\",\"在编码之前，必须对header和payload进行验证（验证是否存在所需的Claims以及是否正确使用了每项Claims）。\"]},\"856\":{\"h\":\"3.5 解码不安全的JWT\",\"t\":[\"要从紧凑的序列化形式得到 JSON 表示形式，请执行以下步骤：\",\"找到第一个句点\\\". \\\"字符。\",\"使用 Base64-URL 算法解码字符串。结果就是 JWT header。\",\"取步骤 1 中句号之后的字符串。\",\"使用 Base64-URL 算法对字符串进行解码。结果就是 JWT payload。\",\"可以根据需要添加空白，对生成的 JSON 字符串进行 \\\"修饰\\\"。\"]},\"857\":{\"h\":\"4 JSON Web Signatures\",\"t\":[\"JSON Web Signatures可能是 JWT 最有用的功能。通过将简单的数据格式与一系列定义明确的Signatures算法相结合，JWT 正迅速成为客户端与中间人之间安全共享数据的理想格式。\",\"Signatures的目的是让一方或多方确定 JWT 的真实性。这里的真实性是指 JWT 中包含的数据未被篡改。换句话说，任何可以进行Signatures检查的一方都可以信赖 JWT 提供的内容。需要强调的是，Signatures并不能阻止其他方读取 JWT 中的内容。这正是加密的目的所在，我们将在第 5 章的后面部分谈到这一点。\",\"检查 JWT Signatures的过程称为验证或验证令牌。当header和payload中指定的所有限制都得到满足时，该令牌就被认为是有效的。这是 JWT 的一个非常重要的方面：实现者必须检查 JWT，直至其header和payload（以及用户要求的任何内容）都符合要求为止。因此，即使 JWT 没有Signatures（如果header的算法声明设置为none），它也可能被认为是有效的。此外，即使 JWT 具有有效Signatures，也可能因其他原因而被视为无效（例如，根据过期声明，它可能已经过期）。针对已签名 JWT 的一种常见攻击方式是剥离签名，然后更改标头，使其成为不安全的 JWT。用户有责任确保根据自己的要求验证 JWT\"]},\"858\":{\"h\":\"4.1 已签名 JWT 的结构\",\"t\":[\"我们在第 3 章中介绍了 JWT 的结构。在此，我们将对其进行回顾，并特别注意其签名组件 已签名的 JWT 由三个元素组成：header、payload和signature（为便于阅读插入了换行符）：\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ \",\"解码和解码前两个元素（header和payload）的过程与不安全的 JWT 相同。算法和示例代码见第 3 章末尾。\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" } { \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true } \",\"不过，已签名的 JWT 还带有一个附加元素：signature。该元素出现在紧凑序列化形式中最后一个点（.）之后。根据 JWS 规范，有多种类型的签名算法可供选择，因此这些八进制数的解释方式也各不相同。JWS 规范要求所有符合该规范的实现都必须支持一种算法：\",\"使用 SHA-256 的 HMAC，在 JWA 规范中称为 HS256\",\"该规范还定义了一系列推荐算法:\",\"使用 SHA-256 的 RSASSA PKCS1 v1.5，在 JWA 规范中称为 RS256。\",\"ECDSA 使用 P-256 和 SHA-256，在 JWA 规范中称为 ES256。 \",\"JWA 是 JSON Web 算法规范，RFC 75182\",\"第 7 章将详细介绍这些算法。在本章中，我们将重点讨论这些算法的实际使用问题.\",\"规范支持的其他可选算法包括:\",\"HS384、HS512：HS256 算法的 SHA-384 和 SHA-512 变体。\",\"RS384、RS512：RS256 算法的 SHA-384 和 SHA-512 变体。\",\"ES384、ES512：ES256 算法的 SHA-384 和 SHA-512 变体。\",\"PS256、PS384、PS512：RSASSA-PSS + MGF1 与 SHA256/384/512 变体。\",\"从本质上讲，这些都是所需和推荐的三种主要算法的变体。这些缩写词的含义将在第 7 章中更加清晰。\"]},\"859\":{\"h\":\"4.1.1 紧凑序列化算法概述\",\"t\":[\"为了从总体上讨论这些算法，让我们先在 JavaScript环境中定义一些函数：\",\"base64：使用 Base64-URL 算法接收一个八进制数组并返回一个新的八进制数组的函数。\",\"utf8：该函数接收任意编码的文本，并返回UTF-8编码的八进制数组。\",\"JSON.stringify：一个接收 JavaScript 对象并将其序列化为字符串形式（JSON）的函数。\",\"sha256：该函数使用 SHA-256 算法获取一个八进制数组并返回一个新的八进制数组。\",\"hmac：该函数使用 HMAC 算法，接收一个 SHA 函数、一个八进制数组和一个密文，并返回一个新的八进制数组。\",\"rsassa：使用 RSASSA 算法，获取 SHA 函数、八进制数组和私钥并返回新八进制数组的函数。\",\"适用于基于 HMAC 的签名算法：\",\"const encodedHeader = base64(utf8(JSON.stringify(header))); const encodedPayload = base64(utf8(JSON.stringify(payload))); const signature = base64(hmac(`${encodedHeader}.${encodedPayload}`, secret, sha256)); const jwt = `${encodedHeader}.${encodedPayload}.${signature}`; \",\"对于公钥签名算法：\",\"const encodedHeader = base64(utf8(JSON.stringify(header))); const encodedPayload = base64(utf8(JSON.stringify(payload))); const signature = base64(rsassa(`${encodedHeader}.${encodedPayload}`, privateKey, sha256)); const jwt = `${encodedHeader}.${encodedPayload}.${signature}`; \",\" 这些算法的全部细节见第 7 章。\"]},\"860\":{\"h\":\"4.1.2 签名算法的实用性\",\"t\":[\"所有签名算法的目的都是一样的：提供一种方法来确定 JWT 所含数据的真实性。它们的实现方式各有不同。 密钥散列消息验证码（HMAC）是一种使用加密散列函数将特定有效载荷与秘密结合起来的算法。其结果是，只有在生成方和验证方都知道秘密的情况下，才能使用该代码验证信息。换句话说，HMAC 允许通过共享秘密来验证信息。 HS256 是最常用的 JWT 签名算法，其中使用的加密散列函数是 SHA-256。第 7 章将详细解释 SHA-256。加密散列函数接收任意长度的信息，并产生固定长度的输出。相同的信息将始终产生相同的输出。散列函数的加密部分确保从函数输出中恢复原始信息在数学上是不可行的。因此，加密散列函数是一种单向函数，可用于识别信息而无需实际共享信息。信息的细微变化（例如一个字节）都会产生完全不同的输出。 RSASSA 是 RSA 算法 （在第 7 章中解释）的一种变体，适用于签名。RSA 是一种公钥算法。公钥算法生成两个密钥：一个公钥和一个私钥。在这种特定的算法变体中，私人密钥既可用于创建签名信息，也可用于验证其真实性。而公钥只能用来验证信息的真实性。因此，这种方案允许一对多信息的安全分发。接收方可以通过保存一份与信息相关的公开密钥副本来验证信息的真实性，但不能用它创建新信息。这与 HMAC 等共享密钥签名方案有不同的使用场景。使用 HMAC + SHA-256，任何可以验证信息的一方也可以创建新信息。例如，如果合法用户变成了恶意用户，他或她就可以修改信息而不被其他方察觉。而使用公钥方案，恶意用户只能拥有自己的公钥，因此无法用它创建新的签名信息。\",\"公钥加密允许其他使用场景。例如，使用同一种 RSA 算法的变体，就可以用公钥加密信息。只有使用私人密钥才能解密这些信息。这样就可以构建一个多对一的安全通信通道。这种变体用于加密 JWT，在***\",\"*** 椭圆曲线数字签名算法（ECDSA）是 RSA 的替代算法。该算法也生成一对公钥和私钥，但其背后的数学原理不同。与 RSA 相比，ECDSA 算法对硬件的要求更低，但却能提供类似的安全保证。 我们将在第 7 章详细研究这些算法。\"]},\"861\":{\"h\":\"4.1.3 JWS Header Claims\",\"t\":[\"JWS 允许在特殊用例中强制标头携带更多声明。例如，对于公钥签名算法，就有可能将公钥的 URL 嵌入到声明中。下面是 JWS 标记可用的已注册标头声明列表。所有这些权利要求都是不安全 JWT 可用权利要求的补充，可根据已签名 JWT 的使用方式选择是否使用。\"]},\"862\":{\"c\":[\"JSON Web Token\"]},\"863\":{\"c\":[\"Docs\"]},\"864\":{\"h\":\"OpenID Connect Core 1.0\"},\"865\":{\"h\":\"摘要\",\"t\":[\"OpenID Connect 1.0是OAuth 2.0协议之上的一个简单身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。\",\"本规范定义了OpenID Connect的核心功能:建立在OAuth 2.0之上的认证，并使用Claims来交流关于终端用户的信息。它还描述了使用OpenID Connect的安全和隐私注意事项。\"]},\"866\":{\"h\":\"1. 简介\",\"t\":[\"OpenID Connect 1.0是OAuth 2.0 [RFC6749]协议之上的一个简单的身份层。它使客户能够根据授权服务器执行的认证来验证最终用户的身份，并以可互操作的、类似REST的方式获得最终用户的基本资料信息。\",\"OpenID Connect Core 1.0规范定义了OpenID Connect的核心功能：建立在OAuth 2.0之上的认证，以及使用Claims来交流关于终端用户的信息。它还描述了使用OpenID Connect的安全和隐私考虑。\",\"作为背景，OAuth 2.0授权框架[RFC6749]和OAuth 2.0承载令牌使用[RFC6750]规范为第三方应用程序提供了一个通用框架，以获得和使用对HTTP资源的有限访问。它们定义了获得和使用访问令牌访问资源的机制，但没有定义提供身份信息的标准方法。值得注意的是，如果不对OAuth 2.0进行剖析，它就无法提供关于终端用户的认证信息。希望读者能熟悉这些规范。\",\"OpenID Connect将认证作为OAuth 2.0授权过程的一个扩展来实现。客户端通过在授权请求中包含openid范围值来请求使用该扩展。有关所执行的认证的信息将以JSON Web Token（JWT）[JWT]的形式返回，称为ID Token（见第2节）。实施OpenID Connect的OAuth 2.0认证服务器也被称为OpenID提供商（OP,OpenID Provider）。使用OpenID Connect的OAuth 2.0客户端也被称为信赖方（RPs,Relying Parties）。\",\"本规范假定信赖方已经获得了有关 OpenID 提供商的配置信息，包括其授权端点和令牌端点的位置。这些信息通常是通过 OpenID Connect Discovery 1.0 [OpenID.Discovery] 中描述的 \\\"发现 \\\"获得的，也可以通过其他机制获得。\",\"同样，本规范假定信赖方已经获得了足够的凭证并提供了使用 OpenID 提供者所需的信息。这通常是通过动态注册完成的，如 OpenID Connect 动态客户端注册 1.0 [OpenID.Registration] 中所述，也可以通过其他机制获得。\"]},\"867\":{\"h\":\"1.1. 需求、符号和约定\",\"t\":[\"本文中关键字“必须”、“必须不”、“要求”、“应当”、“不应当”、“应该”、“不应该”、“建议”、“不建议”、“可能”和“可选”(\\\"MUST\\\", \\\"MUST NOT\\\", \\\"REQUIRED\\\", \\\"SHALL\\\", \\\"SHALL NOT\\\", \\\"SHOULD\\\", \\\"SHOULD NOT\\\", \\\"RECOMMENDED\\\", \\\"NOT RECOMMENDED\\\", \\\"MAY\\\", and \\\"OPTIONAL\\\")的解释请参见RFC2119 [RFC2119]。\",\"在本文档的.txt版本中，值被加了引号，以表明它们将被视为字面意思。在协议信息中使用这些值时，引号不能作为值的一部分使用。在本文档的HTML版本中，要按字面意思理解的值是通过使用这种固定宽度的字体来表示的。\",\"本规范中所有对JSON网络签名（JWS）[JWS]和JSON网络加密（JWE）[JWE]数据结构的使用都是利用JWS紧凑序列化或JWE紧凑序列化;JWS JSON序列化和JWE JSON序列化不被使用。\"]},\"868\":{\"h\":\"1.2. 术语\",\"t\":[\"本规范使用 OAuth 2.0 [RFC6749] 定义的术语:\",\"\\\"Access Token 访问令牌\\\"、\\\"Authorization Code授权代码\\\"、\\\"Authorization Endpoint授权端点\\\"、\\\"Authorization Grant授权授予\\\"、\\\"Authorization Server授权服务器\\\"、\\\"Client客户端\\\"、\\\"Client Authentication客户端认证\\\"、\\\"Client Identifier客户端标识符\\\"、\\\"Client Secret客户端秘密\\\"、\\\"Grant Type授权类型\\\"、\\\"Protected Resource受保护资源\\\"、\\\"Redirection URI重定向 URI\\\"、\\\"Refresh Token刷新令牌\\\"、\\\"Resource Owner资源所有者\\\"、\\\"Resource Server资源服务器\\\"、\\\"Response Type响应类型 \\\"以及 \\\"Token Endpoint令牌端点\\\"\",\"由JSON Web Token (JWT) [JWT]所定义的术语:\",\"\\\"Claim Name (要求名称)\\\"、\\\"Claim Value(要求值)\\\"、\\\"JSON Web Token（JWT）\\\"、\\\"JWT Claims Set (JWT要求集)\\\"、\\\"Nested JWT (JWT嵌套)\\\"\",\"由JSON Web Signature (JWS) [JWS]所定义的术语:\",\"\\\"Header Parameter(标头参数) \\\"和 \\\"JOSE Header (JOSE头) \\\"。\",\"由RFC2616[RFC2616]定义的术语:\",\"\\\"User Agent(用户代理)\\\"\",\"由OAuth 2.0多重响应类型编码实践[OAuth.Responses]所定义的术语：\",\"\\\"Response Mode(响应模式)\\\"\",\"本规范还定义了以下术语:\",\"Authentication (身份验证):\",\"用于对实体和所提交的身份之间的约束力达到足够的信心的过程。\",\"Authentication Request (身份验证请求):\",\"OAuth 2.0授权请求使用OpenID Connect定义的扩展参数和作用域，请求授权服务器（即OpenID Connect提供商）对客户（即OpenID Connect信赖方）进行认证。\",\"Authentication Context (身份验证上下文):\",\"信赖方在对认证响应做出权利决定之前可以要求的信息。这种背景可以包括但不限于实际使用的认证方法或保证级别，如ISO/IEC 29115[ISO29115]实体认证保证级别。\",\"Authentication Context Class (身份验证上下文类):\",\"在特定情况下被认为是相互对等的一套认证方法或程序。\",\"Authentication Context Class Reference (身份验证上下文类参考):\",\"认证上下文类的标识符。\",\"Authorization Code Flow (授权代码流程):\",\"OAuth 2.0流程中，授权码从授权端点返回，所有令牌从令牌端点返回。\",\"Authorization Request (授权请求):\",\"如[RFC6749]所定义的OAuth 2.0授权请求。\",\"Claim (断言):\",\"关于一个实体的断言的信息片段。\",\"Claim Type (索赔类型):\",\"用于表示索赔值的语法。本规范定义了正常的、聚集的和分布的索赔类型。\",\"Claims Provider (要求供应商):\",\"能够返回关于实体的索赔的服务器。\",\"Credential (凭证):\",\"作为有权使用某一身份或其他资源的证据而提出的数据。\",\"End-User (终端用户):\",\"人类的参与者。\",\"Entity (实体)：\",\"具有独立的和不同的存在，并且可以在一个环境中被识别的东西。终端用户是实体的一个例子。\",\"Essential Claim (基本要求)：\",\"由客户指定的索赔，以确保最终用户要求的具体任务的顺利授权体验。\",\"Hybrid Flow (混合流)：\",\"OAuth 2.0流程中，授权码从授权端点返回，一些令牌从授权端点返回，其他则从令牌端点返回。\",\"ID Token (标识牌)：\",\"JSON网络令牌（JWT）[JWT]，包含关于认证事件的声明。它可能包含其他的要求。\",\"Identifier (标识符)：\",\"该值在特定上下文中唯一地表征一个实体。\",\"Identity (身份)：\",\"与实体相关的属性集。\",\"Implicit Flow (隐式流)：\",\"OAuth 2.0流程中，所有的令牌都从授权端点返回，既不使用令牌端点也不使用授权码。\",\"Issuer (发行人)：\",\"发布一组Claims的实体。\",\"Issuer Identifier (发行者标识符)：\",\"颁发者的可验证标识符。发布者标识符是一个大小写敏感的URL，使用https方案，包含方案、主机和可选的端口号和路径组件，没有查询或片段组件。\",\"Message (消息)\",\"OpenID依赖方和OpenID提供者之间的请求或响应。\",\"OpenID Provider (OP) (OpenID提供者(OP))\",\"OAuth 2.0授权服务器，能够对最终用户进行身份验证，并向依赖方提供关于身份验证事件和最终用户的声明。\",\"Request Object (请求对象)\",\"包含一组请求参数作为声明的JWT。\",\"Request URI (请求URI)\",\"引用包含请求对象的资源的URL。请求URI内容必须能被授权服务器检索到。\",\"Pairwise Pseudonymous Identifier (PPID) (成对假名标识符(PPID))\",\"向依赖方标识实体的标识符，该标识符不能与实体在另一个依赖方的PPID相关联。\",\"Personally Identifiable Information (PII) (个人身份资料(PII))\",\"可用于识别与该等信息相关的自然人的信息，或(b)与该等信息相关的自然人直接或间接相关的信息。\",\"Relying Party (RP) (依赖方(RP))\",\"OAuth 2.0客户端应用程序需要终端用户身份验证和来自OpenID提供者的声明。\",\"Sector Identifier (企业标识符)\",\"依赖方的组织使用的URL的主机组件，作为依赖方的成对主题标识符计算的输入。\",\"Self-Issued OpenID Provider (自发OpenID提供者)\",\"发布自签名ID令牌的个人的、自托管的OpenID提供者。\",\"Subject Identifier (对象标识符)\",\"在颁发者中为最终用户在本地唯一且从未重新分配的标识符，该标识符将被客户端使用。\",\"UserInfo Endpoint (用户信息端点)\",\"受保护的资源，当客户端向其提供访问令牌时，返回有关由相应授权授予表示的最终用户的授权信息。UserInfo端点URL必须使用https方案，并且可以包含端口、路径和查询参数组件。\",\"Validation (验证)\",\"旨在建立一个结构的健全性或正确性的过程。\",\"Verification (验证)\",\"旨在检验或证明事实或价值的真实性或准确性的过程\",\"Voluntary Claim (自愿要求)\",\"客户指定的声明对于最终用户要求的特定任务是有用的，但不是必要的。\"]},\"869\":{\"h\":\"1.3. 概述\",\"t\":[\"OpenID连接协议，抽象地说，遵循以下步骤。\",\"RP(客户端)向OpenID提供者(OP)发送一个请求。\",\"OP对终端用户进行认证并获得授权。\",\"OP响应一个ID令牌，通常是一个访问令牌。\",\"RP可以向UserInfo端点发送带有访问令牌的请求。\",\"UserInfo端点返回关于最终用户的声明。\",\"这些步骤如下图所示:\",\"+--------+ +--------+ | | | | | |---------(1) AuthN Request-------->| | | | | | | | +--------+ | | | | | | | | | | | End- |<--(2) AuthN & AuthZ-->| | | | | User | | | | RP | | | | OP | | | +--------+ | | | | | | | |<--------(3) AuthN Response--------| | | | | | | |---------(4) UserInfo Request----->| | | | | | | |<--------(5) UserInfo Response-----| | | | | | +--------+ +--------+ \",\"OpenID Connect对OAuth 2.0的主要扩展是ID Token数据结构，以使最终用户能够得到认证。ID Token是一个安全令牌，它包含关于授权服务器在使用客户端时对终端用户进行认证的要求，以及可能的其他要求。ID Token表示为JSON Web Token(JWT)。\",\"在OpenID Connect使用的所有OAuth 2.0流程中，ID Token中使用了以下要求:\",\"iss\",\"必需的。Issuer响应的颁发者标识符。iss值是一个大小写敏感的URL，使用https方案，包含方案、主机和可选的端口号和路径组件，没有查询或片段组件。\",\"sub\",\"必需的。对象标识符。在发行方内部为最终用户提供的本地唯一且从未重新分配的标识符，用于客户端使用，例如24400320或AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4。它的长度不能超过255个ASCII字符。sub是区分大小写的字符串。\",\"aud\",\"必需的。此ID令牌所针对的受众。它必须包含依赖方的OAuth 2.0 client_id作为受众值。它还可以包含其他受众的标识符。在一般情况下，aud值是一个区分大小写的字符串数组。在常见的特殊情况下，当只有一个受众时，aud值可以是一个区分大小写的字符串。\",\"exp\",\"必需的。在ID令牌不能被接受处理的过期时间或之后。此参数的处理要求当前日期/时间必须在值中列出的过期日期/时间之前。实现者可以提供一些小的回旋余地，通常不超过几分钟，以考虑时钟倾斜。它的值是一个JSON数字，表示从1970-01-01T0:0:0Z (UTC)到日期/时间的秒数。参见RFC3339 [RFC3339]了解有关一般日期/时间和特别UTC的详细信息。\",\"iat\",\"必需的。JWT发布的时间。它的值是一个JSON数字，表示从1970-01-01T0:0:0Z (UTC)到日期/时间的秒数。\",\"auth_time\",\"发生最终用户身份验证的时间。它的值是一个JSON数字，表示从1970-01-01T0:0:0Z (UTC)到日期/时间的秒数。当max_age请求或者auth_time作为Essential Claim请求时，这个Claim是REQUIRED;否则，它的包含是可选的。auth_time声明在语义上对应于OpenID 2.0的响应参数。\",\"nonce\",\"用于将客户端会话与ID令牌相关联并减轻重放攻击的字符串值。该值未经修改地从身份验证请求传递到ID令牌。如果出现在ID令牌中，客户端必须验证nonce声明值是否等于认证请求中发送的nonce参数的值。如果在认证请求中出现，授权服务器必须在ID令牌中包含一个nonce声明，声明值是在认证请求中发送的nonce值。授权服务器不应该对所使用的nonce值执行其他处理。nonce值是区分大小写的字符串。\",\"acr\",\"可选的。认证上下文类引用。指定身份验证上下文类参考值的字符串，该值标识执行身份验证时满足的身份验证上下文类。“0”表示终端用户认证不符合ISO/IEC 29115 [ISO29115]级别1的要求。例如，使用长期存在的浏览器cookie进行身份验证就是使用“级别0”是合适的一个例子。级别为0的身份验证不应该用于授权访问任何具有货币价值的资源。这对应于OpenID 2.0的PAPE [OpenID. PAPE]。 nist_auth_level 0。应该使用绝对URI或RFC6711 [RFC6711]注册名称作为acr值;已注册的名称绝对不能与已注册的名称具有不同的含义。使用此声明的各方需要就所使用的值的含义达成一致，这些值可能与上下文有关。acr是区分大小写的字符串。\",\"amr\",\"可选的。认证方法参考。JSON字符串数组，这些字符串是身份验证中使用的身份验证方法的标识符。例如，值可能表明同时使用了密码和OTP身份验证方法。在amr声明中使用的特定值的定义超出了本规范的范围。使用此声明的各方需要就所使用的值的含义达成一致，这些值可能与上下文有关。amr值是一个区分大小写的字符串数组。\",\"azp\",\"可选的。授权方-向其发出ID令牌的一方。如果存在，它必须包含此方的OAuth 2.0客户端ID。只有当ID令牌具有单一受众价值且受众不同于被授权方时，才需要此声明。即使被授权的一方是唯一的观众，也可以包括它。azp值是一个区分大小写的字符串，包含一个StringOrURI值。\",\"ID令牌可能包含其他声明。任何不被理解的声明必须被忽略。有关本规范定义的其他权利要求，请参见第3.1.3.6、3.3.2.11、5.1和7.4节。\",\"ID令牌必须使用JWS [JWS]进行签名，并且可选地分别使用JWS [JWS]和JWE [JWE]进行签名和加密，从而提供身份验证、完整性、不可否认性和可选的机密性(参见第16.14节)。如果ID令牌是加密的，它必须被签名，然后加密，结果是嵌套的JWT，如[JWT]中定义的那样。ID令牌绝对不能使用none作为alg值，除非所使用的响应类型从授权端点返回没有ID令牌(例如在使用授权代码流时)，并且客户端在注册时明确要求使用none。\",\"ID令牌不应该使用JWS或JWE x5u, x5c, jku或jwk头参数字段。相反，根据第10节，使用Discovery和Registration参数提前传递对所使用的键的引用。\",\"下面是ID令牌中索赔集(JWT索赔集)的一个非规范示例:\",\" { \\\"iss\\\": \\\"https://server.example.com\\\", \\\"sub\\\": \\\"24400320\\\", \\\"aud\\\": \\\"s6BhdRkqt3\\\", \\\"nonce\\\": \\\"n-0S6_WzA2Mj\\\", \\\"exp\\\": 1311281970, \\\"iat\\\": 1311280970, \\\"auth_time\\\": 1311280969, \\\"acr\\\": \\\"urn:mace:incommon:iap:silver\\\" } \",\"OpenID Connect执行身份验证以登录最终用户或确定最终用户已经登录。OpenID Connect以安全的方式将服务器执行的身份验证结果返回给客户端，以便客户端可以依赖它。因此，在这种情况下，客户端被称为依赖方(RP)。\",\"认证结果以ID令牌的形式返回，如第2节中定义的那样。它具有声明，表示诸如发行者、主题标识符、身份验证到期时间等信息。\",\"身份验证可以遵循三种路径之一:授权代码流(response_type= Code)、隐式流(response_type=id_token token或response_type=id_token)或混合流(使用OAuth 2.0多响应类型编码实践[OAuth. responses]中定义的其他响应类型值)。这些流决定如何将ID令牌和访问令牌返回给客户端。\",\"下面的非规范表总结了这三种流的特征。该表旨在为在特定上下文中选择哪个流提供一些指导。\",\"Property\",\"Authorization Code Flow\",\"Implicit Flow\",\"Hybrid Flow\",\"从授权端点返回的所有令牌\",\"×\",\"√\",\"×\",\"从令牌端点返回的所有令牌\",\"√\",\"×\",\"×\",\"没有向用户代理显示令牌\",\"√\",\"×\",\"×\",\"客户端可以验证\",\"√\",\"×\",\"√\",\"可能会刷新令牌\",\"√\",\"×\",\"√\",\"一次往返的通信\",\"×\",\"√\",\"×\",\"大多数服务器到服务器的通信\",\"√\",\"×\",\"不同\",\"使用的流由授权请求中包含的response_type值决定。这些response_type值选择以下流:\",\"\\\"response_type\\\" value\",\"Flow\",\"code\",\"Authorization Code Flow\",\"id_token\",\"Implicit Flow\",\"id_token token\",\"Implicit Flow\",\"code id_token\",\"Hybrid Flow\",\"code token\",\"Hybrid Flow\",\"code id_token token\",\"Hybrid Flow\",\"除了OAuth 2.0 [RFC6749]定义的代码响应类型值外，其他所有的值都在OAuth 2.0多响应类型编码实践[OAuth.Responses)规范。注意:虽然OAuth 2.0还为隐式流定义了令牌响应类型值，但OpenID连接不使用此响应类型，因为不会返回ID令牌。\"]},\"870\":{\"h\":\"3.1. 使用授权代码流进行身份验证\",\"t\":[\"本节描述了如何使用授权码流执行身份验证。当使用授权码流时，所有令牌都是从令牌端点返回的。\",\"授权码流将授权码返回给客户端，客户端可以直接将其交换为ID令牌和访问令牌。这样做的好处是不会将任何令牌暴露给用户代理，也不会暴露给可能访问用户代理的其他恶意应用程序。授权服务器还可以在将授权码交换为访问令牌之前对客户端进行身份验证。授权码流适用于能够在自己和授权服务器之间安全维护客户端密码的客户端。\"]},\"871\":{\"h\":\"3.1.1. 授权码流步骤\",\"t\":[\"授权代码流执行以下步骤。\",\"客户端准备一个包含所需请求参数的身份验证请求。\",\"客户端将请求发送到授权服务器。\",\"授权服务器对终端用户进行认证。\",\"授权服务器获得最终用户同意/授权。\",\"授权服务器用授权代码将最终用户发送回客户端。\",\"客户端在令牌端点使用授权码请求响应。\",\"客户端接收到响应体中包含ID令牌和访问令牌的响应。\",\"客户端验证ID令牌并检索最终用户的主题标识符。\"]},\"872\":{\"h\":\"3.1.2. 授权端点\",\"t\":[\"授权端点执行最终用户的身份验证。这是通过将用户代理发送到授权服务器的授权端点进行身份验证和授权来实现的，使用OAuth 2.0定义的请求参数和OpenID Connect定义的附加参数和参数值。\",\"与授权端点的通信必须使用TLS。有关使用TLS的更多信息，请参阅第16.17节。\"]},\"873\":{\"h\":\"3.1.2.1. 身份验证请求\",\"t\":[\"身份验证请求是OAuth 2.0授权请求，它请求授权服务器对最终用户进行身份验证。\",\"授权服务器必须支持在授权端点使用RFC2616 [RFC2616]中定义的HTTP GET和POST方法。客户端可以使用HTTP GET或POST方法向授权服务器发送授权请求。如果使用HTTP GET方法，请求参数将使用URI查询字符串序列化序列化，参见章节13.1。如果使用HTTP POST方法，请求参数将使用表单序列化(参见章节13.2)进行序列化。\",\"OpenID连接使用授权代码流中的以下OAuth 2.0请求参数:\",\"scope\",\"必需的。OpenID连接请求必须包含OpenID范围值。如果openid范围值不存在，则行为完全未指定。可能会出现其他范围值。不能被实现理解的作用域值应该被忽略。有关本规范定义的其他范围值，请参见第5.4节和第11节。\",\"response_type\",\"必需的。OAuth 2.0响应类型值，它确定要使用的授权处理流，包括从使用的端点返回哪些参数。使用授权代码流时，此值为Code。\",\"client_id\",\"必需的。在授权服务器上有效的OAuth 2.0客户端标识符。\",\"redirect_uri\",\"必需的。将响应发送到的重定向URI。这个URI必须精确匹配预先在OpenID提供者中注册的客户端的重定向URI值之一，并按照RFC3986第6.2.1节的描述进行匹配。当使用这个流时，重定向URI应该使用https方案;但是，它可以使用http方案，前提是客户端类型是机密的，就像OAuth 2.0的2.1节中定义的那样，并且在这种情况下OP允许使用http重定向uri。重定向URI可以使用另一种方案，例如用于标识本机应用程序的回调的方案。\",\"state\",\"推荐。用于维护请求和回调之间的状态的不透明值。通常，通过加密方式将该参数的值与浏览器cookie绑定，可以缓解跨站点请求伪造(CSRF、XSRF)。\",\"OpenID连接还使用以下OAuth 2.0请求参数，该参数在OAuth 2.0多响应类型编码实践[OAuth.Responses]:\",\"response_mode\",\"可选的。通知授权服务器将用于从授权端点返回参数的机制。当请求的响应模式为响应类型指定的默认模式时，不建议使用此参数。\",\"该规范还定义了以下请求参数:\",\"nonce\",\"可选的。用于将客户端会话与ID令牌相关联并减轻重放攻击的字符串值。该值未经修改地从身份验证请求传递到ID令牌。在nonce值中必须存在足够的熵，以防止攻击者猜测值。有关实现注意事项，请参见15.5.2节。\",\"display\",\"可选的。指定授权服务器如何向最终用户显示身份验证和同意用户界面页面的ASCII字符串值。定义的值为: \",\"page \",\"授权服务器应该显示与完整的用户代理页面视图一致的身份验证和同意UI。如果不指定display参数，则默认显示方式为display。\",\"popup \",\"授权服务器应该显示与弹出的用户代理窗口一致的身份验证和同意UI。弹出式User Agent窗口的大小应该适合以登录为重点的对话框，并且不应该遮住它弹出的整个窗口。\",\"touch \",\"授权服务器应该显示与使用触摸界面的设备一致的身份验证和同意UI。\",\"wap \",\"授权服务器应该显示与“功能手机”类型显示一致的身份验证和同意UI。\",\"授权服务器还可以尝试检测用户代理的功能并显示适当的显示。\",\"prompt \",\"可选的。空格分隔、区分大小写的ASCII字符串值列表，用于指定授权服务器是否提示最终用户进行重新身份验证和同意。定义的值为: \",\"none \",\"授权服务器绝对不能显示任何身份验证或同意用户界面页面。如果最终用户尚未进行身份验证，或客户端未对请求的索赔要求获得预先配置的同意，或未满足处理请求的其他条件，则返回错误。错误代码通常是login_required、interaction_required或章节3.1.2.6中定义的其他代码。这可以用作检查现有身份验证和/或同意的方法。\",\"login \",\"授权服务器应提示最终用户重新进行身份验证。如果它不能重新验证最终用户，它必须返回一个错误，通常是login_required。\",\"consent \",\"授权服务器在向客户端返回信息之前应提示最终用户同意。如果它不能获得同意，它必须返回一个错误，通常是consent_required。\",\"select_account \",\"授权服务器应该提示最终用户选择一个用户帐户。这使得在授权服务器上拥有多个帐户的最终用户可以在可能拥有当前会话的多个帐户中进行选择。如果它不能获得最终用户做出的帐户选择，它必须返回一个错误，通常是account_selection_required。\",\"客户端可以使用prompt参数来确保终端用户仍然存在于当前会话中，或者引起对请求的注意。如果此参数不包含任何其他值，则返回错误。\",\"max_age \",\"可选的。最大认证年龄。指定自OP最后一次主动验证终端用户以来允许的运行时间(以秒为单位)。如果运行时间大于此值，OP必须尝试主动重新验证终端用户。max_age请求参数对应OpenID 2.0 PAPE。max_auth_age请求参数)当使用max_age时，返回的ID令牌必须包含auth_time Claim Value。\",\"ui_locales \",\"可选的。用户界面的最终用户首选语言和脚本，以空格分隔的BCP47 [RFC5646]语言标记值列表表示，按首选项排序。例如，值“fr- ca fr en”表示首选在加拿大使用的法语，然后是法语(没有地区指定)，最后是英语(没有地区指定)。如果OpenID提供者不支持所请求的部分或全部区域设置，则不应导致错误。\",\"id_token_hint \",\"可选的。先前由授权服务器发出的ID令牌被作为终端用户当前或过去与客户端经过身份验证的会话的提示传递。如果由ID令牌标识的最终用户已登录或已被请求登录，则授权服务器将返回积极响应;否则，它应该返回一个错误，例如login_required。在可能的情况下，当prompt=none使用时，id_token_hint应该出现，如果不使用则可能返回invalid_request错误;但是，服务器应该在可能的情况下成功响应，\",\"login_hint \",\"可选的。向授权服务器提示终端用户登录时可能使用的登录标识符(如有必要)。如果RP首先向最终用户询问他们的电子邮件地址(或其他标识符)，然后希望将该值作为提示传递给发现的授权服务，则可以使用此提示。建议提示值与用于发现的值匹配。这个值也可以是phone_number声明中指定格式的电话号码。该参数的使用由OP自行决定。\",\"acr_values \",\"可选的。请求的认证上下文类参考值。空格分隔的字符串，指定请求授权服务器用于处理此身份验证请求的acr值，这些值按优先级顺序显示。执行的身份验证所满足的身份验证上下文类作为acr声明值返回，如第2节所述。通过此参数，acr索赔被请求为自愿索赔。\",\"其他参数可能被发送。有关本规范定义的其他授权请求参数和参数值，请参见第3.2.2、3.3.2、5.2、5.5、6和7.2.1节。\",\"下面是客户端HTTP 302重定向响应的非规范示例，它触发用户代理向授权端点发出身份验证请求(仅为显示目的在值中使用换行):\",\"HTTP/1.1 302 Found Location: https://server.example.com/authorize? response_type=code &scope=openid%20profile%20email &client_id=s6BhdRkqt3 &state=af0ifjsldkj &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb \",\"下面是用户代理发送到授权服务器的非规范示例请求，以响应上面客户端的HTTP 302重定向响应(仅为显示目的在值中使用换行):\",\" GET /authorize? response_type=code &scope=openid%20profile%20email &client_id=s6BhdRkqt3 &state=af0ifjsldkj &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1 Host: server.example.com \"]},\"874\":{\"h\":\"3.1.2.2. 验证请求验证\",\"t\":[\"授权服务器必须按照以下方式验证收到的请求:\",\"授权服务器必须根据OAuth 2.0规范验证所有OAuth 2.0参数。\",\"验证是否存在scope参数并包含openid范围值。(如果没有openid范围值，请求可能仍然是有效的OAuth 2.0请求，但不是openid连接请求。)\",\"授权服务器必须验证是否存在所有必需的参数，并且它们的使用符合此规范。\",\"如果sub(subject)声明被请求为ID令牌的特定值，授权服务器必须仅在由该子值标识的最终用户与授权服务器有活动会话或已作为请求的结果进行了身份验证时才发送正面响应。授权服务器绝对不能为不同的用户回复ID令牌或访问令牌，即使他们与授权服务器有活动会话。如果实现支持Claim参数，可以使用id_token_hint参数发出这样的请求，也可以像第5.5.1节中描述的那样请求特定的Claim Value。\",\"根据OAuth 2.0 [RFC6749]的规定，授权服务器应该忽略不可识别的请求参数。\",\"如果授权服务器遇到任何错误，它必须返回一个错误响应，参见章节3.1.2.6。\"]},\"875\":{\"h\":\"3.1.2.3. 授权服务器对最终用户进行认证\",\"t\":[\"如果请求有效，授权服务器将尝试对最终用户进行身份验证或确定最终用户是否已经过身份验证，这取决于所使用的请求参数值。授权服务器用于验证最终用户的方法(例如用户名和密码、会话cookie等)超出了本规范的范围。授权服务器可以显示身份验证用户界面，这取决于使用的请求参数值和使用的身份验证方法。\",\"在以下情况下，授权服务器必须尝试验证最终用户:\",\"最终用户尚未经过身份验证。\",\"身份验证请求包含值为login的提示参数。在这种情况下，授权服务器必须重新验证最终用户，即使最终用户已经通过了身份验证。\",\"在以下情况下，授权服务器绝对不能与最终用户交互:\",\"认证请求包含值为none的提示参数。在这种情况下，如果最终用户尚未经过身份验证或无法进行静默身份验证，授权服务器必须返回一个错误。\",\"在与最终用户交互时，授权服务器必须采取适当的措施防止跨站请求伪造和点击劫持，如OAuth 2.0 [RFC6749]第10.12和10.13节所述。\"]},\"876\":{\"h\":\"3.1.2.4. 授权服务器获得最终用户同意/授权\",\"t\":[\"一旦最终用户通过身份验证，授权服务器必须在向依赖方发布信息之前获得授权决定。在使用的请求参数允许的情况下，可以通过与最终用户进行互动对话，明确同意的内容，或通过处理请求的条件或其他方式(例如，通过先前的行政同意)确定同意。第2节和5.3节描述了信息发布机制。\"]},\"877\":{\"h\":\"3.1.2.5. 认证响应成功\",\"t\":[\"身份验证响应是OP的授权端点返回的OAuth 2.0授权响应消息，用于响应RP发送的授权请求消息。\",\"当使用授权码流时，授权响应必须返回OAuth 2.0 [RFC6749] 4.1.2节中定义的参数，通过使用application/x-www-form-urlencoded格式将它们作为查询参数添加到授权请求中指定的redirect_uri中，除非指定了不同的响应模式。\",\"下面是使用此流的一个非规范示例成功响应(仅为显示目的在值中使用换行):\",\" HTTP/1.1 302 Found Location: https://client.example.org/cb? code=SplxlOBeZQQYbYS6WxSbIA &state=af0ifjsldkj \",\"有关授权码内容的实施说明，请参见章节15.5.1。\"]},\"878\":{\"h\":\"3.1.2.6. 认证错误响应\",\"t\":[\"身份验证错误响应是从OP的授权端点返回的OAuth 2.0授权错误响应消息，以响应由RP发送的授权请求消息。\",\"如果最终用户拒绝请求或最终用户认证失败，OP(授权服务器)将使用OAuth 2.0 [RFC6749] 4.1.2.1节中定义的错误响应参数通知RP(客户端)。(与RFC 6749无关的HTTP错误将使用适当的HTTP状态码返回给用户代理。)\",\"除非重定向URI无效，否则授权服务器将使用适当的错误和状态参数将客户端返回到授权请求中指定的重定向URI。其他参数不应返回。\",\"除OAuth 2.0 4.1.2.1中定义的错误码外，本规范还定义了以下错误码:\",\"interaction_required \",\"授权服务器需要某种形式的最终用户交互才能继续。当认证请求中的提示参数值为none时，此错误可能返回，但如果不显示终端用户交互的用户界面，则无法完成认证请求。\",\"login_required \",\"授权服务器需要终端用户身份验证。当认证请求中的提示参数值为none时，此错误可能返回，但如果不显示终端用户认证的用户界面，则无法完成认证请求。\",\"account_selection_required \",\"终端用户必须在授权服务器上选择一个会话。最终用户可以在授权服务器上使用不同的关联帐户进行身份验证，但最终用户没有选择会话。当身份验证请求中的提示参数值为none时，可能会返回此错误，但如果不显示用户界面提示会话使用，身份验证请求就无法完成。\",\"consent_required \",\"授权服务器需要最终用户的同意。当认证请求中的提示参数值为none时，可能会返回此错误，但如果没有显示最终用户同意的用户界面，则无法完成认证请求。\",\"invalid_request_uri \",\"授权请求中的request_uri返回错误或包含无效数据。\",\"invalid_request_object \",\"请求参数包含无效的请求对象。\",\"request_not_supported \",\"OP不支持使用第6节中定义的请求参数。\",\"request_uri_not_supported \",\"OP不支持使用第6节中定义的request_uri参数。\",\"registration_not_supported \",\"OP不支持使用章节7.2.1中定义的注册参数。\",\"错误响应参数如下:\",\"error \",\"必需的。错误代码。\",\"error_description \",\"可选的。人类可读的ASCII编码错误的文本描述。\",\"error_uri \",\"可选的。包含有关错误的附加信息的网页的URI。\",\"state \",\"OAuth 2.0状态值。如果授权请求包含状态参数，则为REQUIRED。设置为从客户端接收的值。\",\"使用授权代码流时，错误响应参数被添加到重定向URI的查询组件中，除非指定了不同的响应模式。\",\"下面是使用此流的一个非规范的错误响应示例(仅为显示目的在值中使用换行):\",\" HTTP/1.1 302 Found Location: https://client.example.org/cb? error=invalid_request &error_description= Unsupported%20response_type%20value &state=af0ifjsldkj \"]},\"879\":{\"h\":\"3.1.2.7. 验证响应验证\",\"t\":[\"当使用授权码流时，客户端必须根据RFC 6749验证响应，特别是章节4.1.2和10.12。\"]},\"880\":{\"h\":\"3.1.3. Token Endpoint (令牌端点)\",\"t\":[\"为了获得访问令牌、ID令牌和可选的刷新令牌，RP(客户端)在使用授权码流时向令牌端点发送令牌请求以获得令牌响应，如OAuth 2.0 [RFC6749]第3.2节所述。\",\"与令牌端点的通信必须使用TLS。有关使用TLS的更多信息，请参阅第16.17节。\"]},\"881\":{\"h\":\"3.1.3.1. Token Request (令牌请求)\",\"t\":[\"客户端通过使用grant_type值authorization_code向令牌端点提供授权授权(以授权代码的形式)来发出令牌请求，如OAuth 2.0 [RFC6749]的4.1.3节所述。如果客户端是机密客户端，那么它必须使用为其client_id注册的身份验证方法向令牌端点进行身份验证，如第9节所述。\",\"客户端使用HTTP POST方法和表单序列化将参数发送到令牌端点，根据章节13.2，如OAuth 2.0 [RFC6749]章节4.1.3所述。\",\"下面是一个令牌请求的非规范示例(仅为显示目的在值中使用换行):\",\" POST /token HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb \"]},\"882\":{\"h\":\"3.1.3.2. 令牌请求验证\",\"t\":[\"授权服务器必须按如下方式验证令牌请求:\",\"如果客户端被颁发客户端凭据，或者如果客户端使用另一种客户端身份验证方法，请根据第9节进行身份验证。\",\"确保授权代码已颁发给已验证的客户端。\",\"验证授权码是否有效。\",\"如果可能，验证授权码以前没有使用过。\",\"确保redirect_uri参数值与初始授权请求中包含的redirect_uri参数值相同。如果只有一个已注册的redirect_uri值而没有出现redirect_uri参数值，授权服务器可能会返回一个错误(因为客户端应该包含了该参数)，也可能不会出现错误(因为OAuth 2.0允许在这种情况下省略该参数)。\",\"验证所使用的授权码是在响应OpenID连接身份验证请求时发出的(以便从令牌端点返回ID令牌)。\"]},\"883\":{\"h\":\"3.1.3.3. Token成功响应\",\"t\":[\"在从客户端接收并验证有效的授权令牌请求后，授权服务器将返回一个成功的响应，其中包括一个ID令牌和一个访问令牌。成功响应中的参数定义在OAuth 2.0 [RFC6749]的4.1.4节中。响应使用application/json媒体类型。\",\"OAuth 2.0 Token _type响应参数值必须是承载型，如OAuth 2.0承载令牌使用[RFC6750]中所述，除非已经与客户端协商了另一种令牌类型。服务器应该支持持名令牌类型;其他令牌类型的使用超出了本规范的范围。\",\"除了OAuth 2.0指定的响应参数外，响应中必须包含以下参数:\",\"id_token \",\"ID与已认证会话关联的令牌值。\",\"所有包含令牌、秘密或其他敏感信息的令牌响应必须包括以下HTTP响应报头字段和值:\",\"Header Name\",\"Header Value\",\"Cache-Control\",\"no-store\",\"Pragma\",\"no-cache\",\"下面是一个成功的令牌响应的非规范示例。本例中的ID令牌签名可以使用附录A.7中的密钥进行验证。\",\" HTTP/1.1 200 OK Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \\\"access_token\\\": \\\"SlAV32hkKG\\\", \\\"token_type\\\": \\\"Bearer\\\", \\\"refresh_token\\\": \\\"8xLOxBtZp8\\\", \\\"expires_in\\\": 3600, \\\"id_token\\\": \\\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5 NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4 XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\\\" } \",\"根据OAuth 2.0 [RFC6749]的规定，客户端应该忽略不可识别的响应参数。\"]},\"884\":{\"h\":\"3.1.3.4. 令牌错误响应\",\"t\":[\"如果令牌请求无效或未经授权，授权服务器将构造错误响应。令牌错误响应的参数定义在OAuth 2.0 [RFC6749]的5.2节中。HTTP响应体使用application/json媒体类型，HTTP响应代码为400。\",\"下面是一个非规范的Token Error Response示例:\",\" HTTP/1.1 400 Bad Request Content-Type: application/json Cache-Control: no-store Pragma: no-cache { \\\"error\\\": \\\"invalid_request\\\" } \"]},\"885\":{\"h\":\"3.1.3.5. 令牌响应验证\",\"t\":[\"客户端必须按如下方式验证令牌响应:\",\"请遵循RFC 6749中的验证规则，特别是章节5.1和章节10.12中的验证规则。\",\"遵循章节3.1.3.7中的ID Token验证规则。\",\"遵循章节3.1.3.8中的访问令牌验证规则。\"]},\"886\":{\"h\":\"3.1.3.6. ID Token (标识牌)\",\"t\":[\"ID Token的内容如第2节所述。当使用授权码流时，以下ID令牌声明的这些附加要求适用:\",\"at_hash \",\"可选的。访问令牌哈希值。它的值是access_token值的ASCII表示的八字节哈希的最左半部分的base64url编码，其中使用的哈希算法是ID令牌的JOSE报头的alg头参数中使用的哈希算法。例如，如果alg是RS256，则使用SHA-256哈希access_token值，然后取最左边的128位并用base64url对其进行编码。at_hash值是区分大小写的字符串。\"]},\"887\":{\"h\":\"3.1.3.7. ID Token 验证\",\"t\":[\"客户端必须在令牌响应中以以下方式验证ID令牌:\",\"如果ID令牌是加密的，则使用客户端在OP用于加密ID令牌的注册期间指定的密钥和算法对其解密。如果在注册时与OP协商加密，并且ID令牌没有加密，RP应该拒绝它。\",\"OpenID提供者的发行者标识符(通常在发现期间获得)必须与iss(发行者)声明的值完全匹配。\",\"客户端必须验证aud (audience) Claim是否包含其在由iss (Issuer) Claim标识为受众的颁发者处注册的client_id值。aud (audience)声明可以包含一个包含多个元素的数组。如果ID令牌没有将客户端列为有效受众，或者它包含了客户端不信任的其他受众，ID令牌必须被拒绝。\",\"如果ID令牌包含多个受众，客户端应该验证azp声明是否存在。\",\"如果出现azp(被授权方)索赔，客户端应验证其client_id是否为索赔值。\",\"如果ID令牌是通过客户端和令牌端点(在此流程中)之间的直接通信接收到的，则可以使用TLS服务器验证来验证颁发者，而不是检查令牌签名。客户端必须使用JWT alg头参数中指定的算法，根据JWS [JWS]验证所有其他ID令牌的签名。客户端必须使用颁发者提供的密钥。\",\"alg值应该是RS256的默认值，或者是注册过程中客户端在id_token_signed_response_alg参数中发送的算法。\",\"如果JWT alg头参数使用基于MAC的算法，如HS256、HS384或HS512，则使用aud (audience) Claim中包含的client_id对应的client_secret的UTF-8表示形式的字节作为验证签名的密钥。对于基于MAC的算法，如果aud是多值，或者azp值与aud值不同，则行为未指定。\",\"当前时间必须在exp Claim所表示的时间之前。\",\"iat Claim可用于拒绝发出距离当前时间太远的令牌，从而限制为防止攻击而需要存储nonce的时间。可接受的范围是客户特定的。\",\"如果在身份验证请求中发送了一个nonce值，则必须出现一个nonce Claim，并检查其值以验证它与在身份验证请求中发送的值相同。客户端应该检查nonce值是否有重放攻击。检测重放攻击的精确方法是特定于客户端的。\",\"如果要求acr索赔，客户应检查所断言的索赔价值是否适当。acr声明值的含义和处理超出了本规范的范围。\",\"如果请求了auth_time Claim，无论是通过对该Claim的特定请求还是使用max_age参数，客户端都应该检查auth_time Claim值，并在确定距离最后一次最终用户身份验证已经经过了太长时间时请求重新身份验证。\"]},\"888\":{\"h\":\"3.1.3.8. 访问令牌验证\",\"t\":[\"在使用授权码流时，如果ID令牌包含at_hash声明，客户端可以使用它来验证访问令牌，方法与隐式流相同，如3.2.2.9节所定义，但使用从令牌端点返回的ID令牌和访问令牌。\"]},\"889\":{\"h\":\"3.2. 使用隐式流进行身份验证\",\"t\":[\"介绍如何使用隐式流进行身份验证。当使用隐式流时，所有令牌都从授权端点返回;没有使用令牌端点。\",\"隐式流主要用于使用脚本语言在浏览器中实现的客户端。访问令牌和ID令牌直接返回给客户端，这可能会将它们暴露给最终用户和有权访问最终用户的用户代理的应用程序。授权服务器不执行客户端身份验证。\"]},\"890\":{\"h\":\"3.2.1. 隐式流程步骤\",\"t\":[\"隐式流遵循以下步骤:\",\"客户端准备一个包含所需请求参数的身份验证请求。\",\"客户端将请求发送到授权服务器。\",\"授权服务器对终端用户进行认证。\",\"授权服务器获得最终用户同意/授权。\",\"授权服务器将终端用户发送回客户端，并使用ID令牌(如果请求的话)和访问令牌。\",\"客户端验证ID令牌并检索最终用户的主题标识符。\"]},\"891\":{\"h\":\"3.2.2. 授权端点\",\"t\":[\"在使用隐式流时，授权端点的使用方式与第3.1.2节中定义的授权代码流相同，除了本节中指定的不同之处。\"]},\"892\":{\"h\":\"3.2.2.1. 身份验证请求\",\"t\":[\"认证请求的定义见章节3.1.2.1，除了这些认证请求参数使用如下:\",\"response_type \",\"必需的。OAuth 2.0响应类型值，它确定要使用的授权处理流，包括从使用的端点返回哪些参数。使用隐式流时，此值为id_token token或id_token。这两个值的含义都在OAuth 2.0多响应类型编码实践[OAuth. responses]中定义。当取值为id_token时，返回No Access Token。 注意:虽然OAuth 2.0还为隐式流定义了令牌响应类型值，但OpenID连接不使用此响应类型，因为不会返回ID令牌。\",\"redirect_uri \",\"必需的。将响应发送到的重定向URI。这个URI必须精确匹配预先在OpenID提供者中注册的客户端的重定向URI值之一，并按照RFC3986第6.2.1节的描述进行匹配。当使用此流时，重定向URI绝对不能使用http方案，除非客户端是本地应用程序，在这种情况下，它可以使用带有localhost作为主机名的http:方案。\",\"nonce \",\"必需的。用于将客户端会话与ID令牌相关联并减轻重放攻击的字符串值。该值未经修改地从身份验证请求传递到ID令牌。在nonce值中必须存在足够的熵，以防止攻击者猜测值。有关实现注意事项，请参见15.5.2节。\"]},\"893\":{\"h\":\"3.2.2.2. 验证请求验证\"},\"894\":{\"h\":\"3.2.2.3. 授权服务器对最终用户进行认证\"},\"895\":{\"h\":\"3.2.2.4. 授权服务器获得最终用户同意/授权\"},\"896\":{\"h\":\"3.2.2.5. 认证响应成功\"},\"897\":{\"h\":\"3.2.2.6. 认证错误响应\"},\"898\":{\"h\":\"3.2.2.7. 重定向URI片段处理\"},\"899\":{\"h\":\"3.2.2.8. 验证响应验证\"},\"900\":{\"h\":\"3.2.2.9. 访问令牌验证\"},\"901\":{\"h\":\"3.2.2.10. 标识牌\"},\"902\":{\"h\":\"3.2.2.11. ID令牌验证\"},\"903\":{\"h\":\"3.3. 使用混合流进行身份验证\"},\"904\":{\"h\":\"3.3.1. 混合流程步骤\"},\"905\":{\"h\":\"3.3.2. 授权端点\"},\"906\":{\"h\":\"3.3.2.1. 身份验证请求\"},\"907\":{\"h\":\"3.3.2.2. 验证请求验证\"},\"908\":{\"h\":\"3.3.2.3. 授权服务器对最终用户进行认证\"},\"909\":{\"h\":\"3.3.2.4. 授权服务器获得最终用户同意/授权\"},\"910\":{\"h\":\"3.3.2.5. 认证响应成功\"},\"911\":{\"h\":\"3.3.2.6. 认证错误响应\"},\"912\":{\"h\":\"3.3.2.7. 重定向URI片段处理\"},\"913\":{\"h\":\"3.3.2.8. 验证响应验证\"},\"914\":{\"h\":\"3.3.2.9. 访问令牌验证\"},\"915\":{\"h\":\"3.3.2.10. 授权码验证\"},\"916\":{\"h\":\"3.3.2.11. 标识牌\"},\"917\":{\"h\":\"3.3.2.12. ID令牌验证\"},\"918\":{\"h\":\"3.3.3. 令牌端点\"},\"919\":{\"h\":\"3.3.3.1. 令牌的请求\"},\"920\":{\"h\":\"3.3.3.2. 令牌请求验证\"},\"921\":{\"h\":\"3.3.3.3. Token成功响应\"},\"922\":{\"h\":\"3.3.3.4. 令牌错误响应\"},\"923\":{\"h\":\"3.3.3.5. 令牌响应验证\"},\"924\":{\"h\":\"3.3.3.6. 标识牌\"},\"925\":{\"h\":\"3.3.3.7. ID令牌验证\"},\"926\":{\"h\":\"3.3.3.8. 访问令牌\"},\"927\":{\"h\":\"3.3.3.9. 访问令牌验证\"},\"928\":{\"h\":\"5.1. 标准要求\"},\"929\":{\"h\":\"5.1.1. 解决索赔\"},\"930\":{\"h\":\"5.1.2. 额外的要求\"},\"931\":{\"h\":\"5.2. 索赔语言和脚本\"},\"932\":{\"h\":\"5.3. 用户信息端点\"},\"933\":{\"h\":\"5.3.1. 用户信息请求\"},\"934\":{\"h\":\"5.3.2. UserInfo成功响应\"},\"935\":{\"h\":\"5.3.3. UserInfo错误响应\"},\"936\":{\"h\":\"5.3.4. UserInfo响应验证\"},\"937\":{\"h\":\"5.4. 使用范围值请求声明\"},\"938\":{\"h\":\"5.5. 使用\\\" Claims \\\"请求参数请求索赔\"},\"939\":{\"h\":\"5.5.1. 个别索偿申请\"},\"940\":{\"h\":\"5.5.1.1. 请求“acr”索赔\"},\"941\":{\"h\":\"5.5.2. 个人索赔的语言和脚本\"},\"942\":{\"h\":\"5.6. 索赔类型\"},\"943\":{\"h\":\"5.6.1. 正常的索赔\"},\"944\":{\"h\":\"5.6.2. 聚合和分布式索赔\"},\"945\":{\"h\":\"5.6.2.1. 综合申索的例子\"},\"946\":{\"h\":\"5.6.2.2. 分布式索赔示例\"},\"947\":{\"h\":\"5.7. 索赔稳定性和唯一性\"},\"948\":{\"h\":\"6.1. 按值传递请求对象\"},\"949\":{\"h\":\"6.1.1. 使用\\\" Request \\\"请求参数请求\"},\"950\":{\"h\":\"6.2. 通过引用传递请求对象\"},\"951\":{\"h\":\"6.2.1. URL引用请求对象\"},\"952\":{\"h\":\"6.2.2. 使用“request_uri”请求参数请求\"},\"953\":{\"h\":\"6.2.3. 授权服务器获取请求对象\"},\"954\":{\"h\":\"6.2.4. “request_uri”原理\"},\"955\":{\"h\":\"6.3. 验证基于jwt的请求\"},\"956\":{\"h\":\"6.3.1. 加密请求对象\"},\"957\":{\"h\":\"6.3.2. 已签名请求对象\"},\"958\":{\"h\":\"6.3.3. 请求参数组装和验证\"},\"959\":{\"h\":\"7.1. 自发OpenID提供者发现\"},\"960\":{\"h\":\"7.2. 自发OpenID提供者注册\"},\"961\":{\"h\":\"7.2.1. 使用“注册”请求参数提供信息\"},\"962\":{\"h\":\"7.3. 自发OpenID提供者请求\"},\"963\":{\"h\":\"7.4. 自发OpenID提供者响应\"},\"964\":{\"h\":\"7.5. 自发ID令牌验证\"},\"965\":{\"h\":\"8.1. 成对标识算法\"},\"966\":{\"h\":\"10.1. 签署\"},\"967\":{\"h\":\"10.1.1. 旋转非对称签名密钥\"},\"968\":{\"h\":\"10.2. 加密\"},\"969\":{\"h\":\"10.2.1.\"},\"970\":{\"c\":[\"OpenID Connect\"]},\"971\":{\"c\":[\"OpenID Connect Core 1.0\"]},\"972\":{\"h\":\"Maven Docs\"},\"973\":{\"h\":\"1.Maven简介\"},\"974\":{\"c\":[\"Maven\"]},\"975\":{\"c\":[\"Docs\"]},\"976\":{\"h\":\"Nodejs Docs\"},\"977\":{\"h\":\"1. Nodejs简介\"},\"978\":{\"h\":\"2. Nodejs安装\"},\"979\":{\"h\":\"2.1. 配置全局安装模块 node_global 环境变量\",\"t\":[\"在Nodejs安装目录中新建node_global目录\",\" npm config set prefix \\\"%安装目录%\\\\node_global\\\" \"]},\"980\":{\"h\":\"2.2. 配置缓存目录 node_cache 环境变量\",\"t\":[\"在Nodejs安装目录中新建node_cache目录\",\" npm config set cache \\\"%安装目录%\\\\node_cache\\\" \"]},\"981\":{\"h\":\"2.3. 配置全局系统变量\",\"t\":[\"在系统变量中新建环境变量NODE_PATH\",\"值设置为 %安装目录%\\\\node_global\"]},\"982\":{\"h\":\"2.4. 修改用户变量\",\"t\":[\"将path中的默认全局安装模块修改为自定义目录node_global\"]},\"983\":{\"h\":\"2.5. 验证安装\",\"t\":[\"重启，更新环境变量\",\"全局安装typescript模块,查看全局安装模块目录下是否有vue\",\"npm install -g typescript # -g 表示全局安装 \"]},\"984\":{\"h\":\"2.6. npm换国内源\",\"t\":[\"查看源： npm config get registry\",\"修改源： npm config set registry http://registry.npmmirror.com\"]},\"985\":{\"c\":[\"Nodejs\"]},\"986\":{\"c\":[\"Docs\"]},\"987\":{\"h\":\"Blog\"},\"988\":{\"h\":\"Database\"},\"989\":{\"h\":\"Golang\"},\"990\":{\"h\":\"O I D C\"}},\"dirtCount\":0,\"index\":[[\"旋转非对称签名密钥\",{\"0\":{\"967\":1}}],[\"额外的要求\",{\"0\":{\"930\":1}}],[\"秘密或其他敏感信息的令牌响应必须包括以下http响应报头字段和值\",{\"1\":{\"883\":1}}],[\"秘诀\",{\"1\":{\"467\":1}}],[\"弹出式user\",{\"1\":{\"873\":1}}],[\"√\",{\"1\":{\"869\":9}}],[\"×\",{\"1\":{\"869\":11}}],[\"级别为0的身份验证不应该用于授权访问任何具有货币价值的资源\",{\"1\":{\"869\":1}}],[\"级别0\",{\"1\":{\"869\":1}}],[\"级别1的要求\",{\"1\":{\"869\":1}}],[\"遵循章节3\",{\"1\":{\"885\":2}}],[\"遵循以下步骤\",{\"1\":{\"869\":1}}],[\"遵循统一的代码风格是\",{\"1\":{\"496\":1}}],[\"概述\",{\"0\":{\"869\":1}}],[\"概念\",{\"0\":{\"580\":1,\"585\":1,\"605\":1,\"663\":1,\"699\":1},\"1\":{\"662\":1}}],[\"概念提供了一种不同的方法\",{\"1\":{\"312\":1}}],[\"概念的编程范式\",{\"1\":{\"310\":1}}],[\"客户应检查所断言的索赔价值是否适当\",{\"1\":{\"887\":1}}],[\"客户指定的声明对于最终用户要求的特定任务是有用的\",{\"1\":{\"868\":1}}],[\"客户端都应该检查auth\",{\"1\":{\"887\":1}}],[\"客户端应验证其client\",{\"1\":{\"887\":1}}],[\"客户端应该检查nonce值是否有重放攻击\",{\"1\":{\"887\":1}}],[\"客户端应该验证azp声明是否存在\",{\"1\":{\"887\":1}}],[\"客户端应该忽略不可识别的响应参数\",{\"1\":{\"883\":1}}],[\"客户端使用http\",{\"1\":{\"881\":1}}],[\"客户端通过使用grant\",{\"1\":{\"881\":1}}],[\"客户端通过在授权请求中包含openid范围值来请求使用该扩展\",{\"1\":{\"866\":1}}],[\"客户端必须使用颁发者提供的密钥\",{\"1\":{\"887\":1}}],[\"客户端必须使用jwt\",{\"1\":{\"887\":1}}],[\"客户端必须验证aud\",{\"1\":{\"887\":1}}],[\"客户端必须验证nonce声明值是否等于认证请求中发送的nonce参数的值\",{\"1\":{\"869\":1}}],[\"客户端必须在令牌响应中以以下方式验证id令牌\",{\"1\":{\"887\":1}}],[\"客户端必须按如下方式验证令牌响应\",{\"1\":{\"885\":1}}],[\"客户端必须根据rfc\",{\"1\":{\"879\":1}}],[\"客户端验证id令牌并检索最终用户的主题标识符\",{\"1\":{\"871\":1,\"890\":1}}],[\"客户端接收到响应体中包含id令牌和访问令牌的响应\",{\"1\":{\"871\":1}}],[\"客户端接收服务器返回的jwt\",{\"1\":{\"38\":1}}],[\"客户端在令牌端点使用授权码请求响应\",{\"1\":{\"871\":1}}],[\"客户端将请求发送到授权服务器\",{\"1\":{\"871\":1,\"890\":1}}],[\"客户端将在与服务器交互中都会带jwt\",{\"1\":{\"38\":1}}],[\"客户端准备一个包含所需请求参数的身份验证请求\",{\"1\":{\"871\":1,\"890\":1}}],[\"客户端可以使用它来验证访问令牌\",{\"1\":{\"888\":1}}],[\"客户端可以使用prompt参数来确保终端用户仍然存在于当前会话中\",{\"1\":{\"873\":1}}],[\"客户端可以使用http\",{\"1\":{\"873\":1}}],[\"客户端可以直接将其交换为id令牌和访问令牌\",{\"1\":{\"870\":1}}],[\"客户端可以验证\",{\"1\":{\"869\":1}}],[\"客户端被称为依赖方\",{\"1\":{\"869\":1}}],[\"客户端脚本\",{\"1\":{\"848\":1}}],[\"客户端数据容易被篡改\",{\"1\":{\"848\":1}}],[\"客户端和服务端\",{\"1\":{\"693\":1}}],[\"客户端库\",{\"1\":{\"638\":1}}],[\"客户端程序自动生成于\",{\"1\":{\"638\":1}}],[\"客户端程序需要先导入这个包\",{\"1\":{\"506\":1}}],[\"客户端服务的开发者生活变得更简单\",{\"1\":{\"638\":1}}],[\"客户端也需要服务端的secret\",{\"1\":{\"39\":1}}],[\"客户端同样可以验证签名\",{\"1\":{\"39\":1}}],[\"客户端grpc请求服务端端口\",{\"1\":{\"4\":1}}],[\"客户端\",{\"1\":{\"4\":1,\"869\":1,\"878\":1,\"880\":1}}],[\"旨在检验或证明事实或价值的真实性或准确性的过程\",{\"1\":{\"868\":1}}],[\"旨在建立一个结构的健全性或正确性的过程\",{\"1\":{\"868\":1}}],[\"旨在打造一个高效\",{\"1\":{\"487\":1}}],[\"企业标识符\",{\"1\":{\"868\":1}}],[\"颁发者的可验证标识符\",{\"1\":{\"868\":1}}],[\"凭证\",{\"1\":{\"868\":1}}],[\"索赔稳定性和唯一性\",{\"0\":{\"947\":1}}],[\"索赔语言和脚本\",{\"0\":{\"931\":1}}],[\"索赔\",{\"0\":{\"940\":1},\"1\":{\"887\":1}}],[\"索赔类型\",{\"0\":{\"942\":1},\"1\":{\"868\":1}}],[\"索引表示第一个空闲的位置\",{\"1\":{\"660\":1}}],[\"索引之间的元素构成的子集\",{\"1\":{\"585\":1}}],[\"索引到\",{\"1\":{\"585\":1}}],[\"索引范围从\",{\"1\":{\"580\":1}}],[\"索引从\",{\"1\":{\"532\":1,\"580\":1}}],[\"索引是个前提\",{\"1\":{\"306\":1}}],[\"索引是对数据库表中一或多个列的值进行排序的结构\",{\"1\":{\"209\":1}}],[\"索引优化\",{\"1\":{\"281\":1}}],[\"索引分为主键索引和非主键索引两种\",{\"1\":{\"235\":1}}],[\"索引命中只能是相等的情况\",{\"1\":{\"226\":1}}],[\"索引只能用于查找\",{\"1\":{\"226\":1}}],[\"索引只有精确匹配索引所有列的查询才有效\",{\"1\":{\"217\":1}}],[\"索引最好既满足排序\",{\"1\":{\"225\":1}}],[\"索引包含所有需要查询的字段的值\",{\"1\":{\"224\":1}}],[\"索引不是越多越好\",{\"1\":{\"219\":1}}],[\"索引基本原则\",{\"0\":{\"219\":1}}],[\"索引策略\",{\"0\":{\"218\":1}}],[\"索引中包含指向数据存储位置的指针\",{\"1\":{\"212\":1}}],[\"索引存储在另一个位置\",{\"1\":{\"212\":1}}],[\"索引才会被使用\",{\"1\":{\"212\":1}}],[\"索引列的值必须唯一\",{\"1\":{\"212\":1}}],[\"索引就会经常不命中\",{\"1\":{\"211\":1}}],[\"索引能够轻易将查询性能提升几个数量级\",{\"1\":{\"211\":1}}],[\"索引需要占用额外的物理空间\",{\"1\":{\"210\":1}}],[\"索引的元素从切片中移除\",{\"1\":{\"593\":1}}],[\"索引的选择性是指\",{\"1\":{\"221\":1}}],[\"索引的数据结构\",{\"0\":{\"213\":1}}],[\"索引的类型\",{\"0\":{\"212\":1}}],[\"索引的缺点\",{\"1\":{\"210\":1}}],[\"索引的优点\",{\"1\":{\"210\":1}}],[\"索引的优缺点\",{\"0\":{\"210\":1}}],[\"索引可以简单如一个列\",{\"1\":{\"226\":1}}],[\"索引可以将随机\",{\"1\":{\"210\":1}}],[\"索引可以帮助服务器避免排序和临时表\",{\"1\":{\"210\":1}}],[\"索引大大减少了服务器需要扫描的数据量\",{\"1\":{\"210\":1}}],[\"索引和约束\",{\"0\":{\"208\":1}}],[\"索引\",{\"0\":{\"106\":1,\"536\":1},\"1\":{\"212\":1,\"580\":1,\"660\":2}}],[\"索引等\",{\"1\":{\"91\":1}}],[\"认证请求的定义见章节3\",{\"1\":{\"892\":1}}],[\"认证请求包含值为none的提示参数\",{\"1\":{\"875\":1}}],[\"认证错误响应\",{\"0\":{\"878\":1,\"897\":1,\"911\":1}}],[\"认证响应成功\",{\"0\":{\"877\":1,\"896\":1,\"910\":1}}],[\"认证结果以id令牌的形式返回\",{\"1\":{\"869\":1}}],[\"认证方法参考\",{\"1\":{\"869\":1}}],[\"认证上下文类引用\",{\"1\":{\"869\":1}}],[\"认证上下文类的标识符\",{\"1\":{\"868\":1}}],[\"认为\",{\"1\":{\"852\":1}}],[\"认为这些工作只是在浪费时间\",{\"1\":{\"467\":1}}],[\"术语\",{\"0\":{\"868\":1}}],[\"希望读者能熟悉这些规范\",{\"1\":{\"866\":1}}],[\"希望为用户提供一个更好的使用体验\",{\"1\":{\"461\":1}}],[\"椭圆曲线数字签名算法\",{\"1\":{\"860\":1}}],[\"恶意用户只能拥有自己的公钥\",{\"1\":{\"860\":1}}],[\"散列函数的加密部分确保从函数输出中恢复原始信息在数学上是不可行的\",{\"1\":{\"860\":1}}],[\"散列表的性能会下降\",{\"1\":{\"370\":2}}],[\"散列表的长度\",{\"1\":{\"370\":2}}],[\"漂亮\",{\"1\":{\"854\":1}}],[\"视为无效\",{\"1\":{\"853\":1}}],[\"视图的作用\",{\"1\":{\"103\":1}}],[\"视图是虚拟的表\",{\"1\":{\"103\":1}}],[\"视图是基于\",{\"1\":{\"103\":1}}],[\"视图\",{\"0\":{\"103\":1},\"1\":{\"91\":1}}],[\"挑选抗碰撞名称的工作就变得简单了\",{\"1\":{\"853\":1}}],[\"私人密钥既可用于创建签名信息\",{\"1\":{\"860\":1}}],[\"私人claims\",{\"1\":{\"853\":1}}],[\"私钥对儿\",{\"1\":{\"26\":1}}],[\"身就是\",{\"1\":{\"850\":1}}],[\"身份\",{\"1\":{\"868\":1}}],[\"身份证号码和微信登录等\",{\"1\":{\"72\":1}}],[\"身份验证错误响应是从op的授权端点返回的oauth\",{\"1\":{\"878\":1}}],[\"身份验证响应是op的授权端点返回的oauth\",{\"1\":{\"877\":1}}],[\"身份验证可以遵循三种路径之一\",{\"1\":{\"869\":1}}],[\"身份验证到期时间等信息\",{\"1\":{\"869\":1}}],[\"身份验证上下文类参考\",{\"1\":{\"868\":1}}],[\"身份验证上下文类\",{\"1\":{\"868\":1}}],[\"身份验证上下文\",{\"1\":{\"868\":1}}],[\"身份验证请求就无法完成\",{\"1\":{\"878\":1}}],[\"身份验证请求包含值为login的提示参数\",{\"1\":{\"875\":1}}],[\"身份验证请求是oauth\",{\"1\":{\"873\":1}}],[\"身份验证请求\",{\"0\":{\"873\":1,\"892\":1,\"906\":1},\"1\":{\"868\":1}}],[\"身份验证\",{\"1\":{\"6\":1,\"868\":1}}],[\"隔开\",{\"1\":{\"849\":1}}],[\"隔离级别\",{\"1\":{\"239\":1}}],[\"隔离级别下\",{\"1\":{\"235\":1}}],[\"隔离性\",{\"1\":{\"237\":1,\"243\":1}}],[\"购物车中可能装满了用户即将购买的物品\",{\"1\":{\"848\":1}}],[\"权利要求一样\",{\"1\":{\"852\":1}}],[\"权利要求\",{\"1\":{\"848\":1}}],[\"权限code代码\",{\"1\":{\"72\":2}}],[\"权限类别\",{\"1\":{\"72\":1}}],[\"权限介绍\",{\"1\":{\"72\":1}}],[\"权限名称\",{\"1\":{\"72\":1}}],[\"权限唯一code代码\",{\"1\":{\"72\":1}}],[\"权限id\",{\"1\":{\"72\":3}}],[\"权限表\",{\"1\":{\"72\":4}}],[\"权限分类\",{\"1\":{\"71\":1}}],[\"权限分配的单位与载体\",{\"1\":{\"70\":1}}],[\"权限配置分类\",{\"1\":{\"70\":1}}],[\"权限约束\",{\"1\":{\"70\":1}}],[\"权限点不直接分配给用户\",{\"1\":{\"70\":1}}],[\"权限点\",{\"1\":{\"70\":1}}],[\"权限映射\",{\"1\":{\"65\":1}}],[\"权限与角色相关联\",{\"1\":{\"64\":1}}],[\"权限控制\",{\"0\":{\"154\":1,\"190\":1}}],[\"权限控制过于分散的问题而诞生的\",{\"1\":{\"62\":1}}],[\"权限控制表\",{\"1\":{\"60\":1}}],[\"权限的代号\",{\"1\":{\"60\":1}}],[\"权限标识\",{\"1\":{\"60\":1}}],[\"权限\",{\"1\":{\"60\":1,\"65\":1,\"66\":1,\"71\":1,\"72\":1}}],[\"物品\",{\"1\":{\"848\":1}}],[\"申请合并远程库\",{\"1\":{\"831\":1}}],[\"申请资源后立即使用\",{\"1\":{\"332\":1}}],[\"抓取\",{\"1\":{\"829\":1}}],[\"合并\",{\"1\":{\"829\":1}}],[\"合并分支\",{\"0\":{\"826\":1}}],[\"合理使用\",{\"1\":{\"568\":1}}],[\"补上^符号的缺陷\",{\"1\":{\"819\":1}}],[\"填写提交信息\",{\"1\":{\"815\":1}}],[\"填充\",{\"1\":{\"525\":2}}],[\"局部索引值\",{\"1\":{\"819\":1}}],[\"局部变量的作用域可以通过代码块\",{\"1\":{\"515\":1}}],[\"局域网\",{\"1\":{\"809\":1}}],[\"审核通过进行合并\",{\"1\":{\"808\":1}}],[\"审批\",{\"1\":{\"70\":1}}],[\"克隆远程库到本地\",{\"1\":{\"808\":1}}],[\"历史版本\",{\"1\":{\"808\":1}}],[\"临时存储\",{\"1\":{\"808\":1}}],[\"临界区\",{\"1\":{\"625\":1}}],[\"借助jdk1\",{\"1\":{\"803\":1}}],[\"借助的是如下循环数组的结构\",{\"1\":{\"398\":1}}],[\"延迟加载\",{\"1\":{\"803\":2}}],[\"延迟函数可能操作主函数的返回值\",{\"1\":{\"332\":1}}],[\"延迟函数执行按照后进先出的顺序执行\",{\"1\":{\"332\":1}}],[\"延迟函数的参数是\",{\"1\":{\"332\":1}}],[\"懒汉式\",{\"1\":{\"803\":3}}],[\"懒惰求值\",{\"1\":{\"570\":1}}],[\"静态内部类\",{\"1\":{\"803\":1}}],[\"静态代码块\",{\"1\":{\"803\":1}}],[\"静态常量\",{\"1\":{\"803\":1}}],[\"静态类型检查\",{\"1\":{\"671\":1}}],[\"静态类型\",{\"1\":{\"479\":1}}],[\"饿汉式\",{\"1\":{\"803\":2}}],[\"映像\",{\"1\":{\"782\":3}}],[\"映像的名称和\",{\"1\":{\"782\":1}}],[\"映射\",{\"1\":{\"694\":1}}],[\"映射表\",{\"1\":{\"249\":1}}],[\"准备镜像\",{\"1\":{\"782\":1}}],[\"准确地说\",{\"1\":{\"442\":1}}],[\"准确的说是哈希值低位相同的键\",{\"1\":{\"365\":1}}],[\"枚举\",{\"0\":{\"760\":1},\"1\":{\"803\":1}}],[\"元组类型允许表示一个已知元素数量和类型的数组\",{\"1\":{\"759\":1}}],[\"元组\",{\"0\":{\"759\":1}}],[\"元素会按照发送的顺序被接收\",{\"1\":{\"703\":1}}],[\"元素没有得到初始化\",{\"1\":{\"610\":1}}],[\"元素的类型以及切片的元素个数\",{\"1\":{\"587\":1}}],[\"元素的数目\",{\"1\":{\"580\":1}}],[\"元素\",{\"1\":{\"585\":1,\"610\":2,\"703\":1,\"849\":1}}],[\"元素类型\",{\"1\":{\"405\":1}}],[\"元素为\",{\"1\":{\"365\":2}}],[\"元素经过哈希运算后会落到某个bucket中进行存储\",{\"1\":{\"364\":1}}],[\"元素个数\",{\"1\":{\"364\":1}}],[\"拿到选择的文件路径\",{\"0\":{\"727\":1}}],[\"拿到操作结果\",{\"1\":{\"725\":1}}],[\"拿到文件系统\",{\"1\":{\"725\":1}}],[\"拿到物品并打包\",{\"1\":{\"699\":1}}],[\"匹配0到多个space\",{\"1\":{\"723\":1}}],[\"匹配的情况\",{\"1\":{\"389\":1}}],[\"匹配的\",{\"1\":{\"166\":1,\"202\":1}}],[\"制表符等\",{\"1\":{\"723\":1}}],[\"迭代器就不会阻塞\",{\"1\":{\"709\":1}}],[\"迭代器在阻塞之前\",{\"1\":{\"709\":1}}],[\"迭代它的每一个元素并在上面调用\",{\"1\":{\"662\":1}}],[\"丢弃掉可以被\",{\"1\":{\"709\":1}}],[\"丢失修改\",{\"1\":{\"238\":1}}],[\"筛\",{\"1\":{\"709\":1}}],[\"筛选\",{\"1\":{\"305\":1}}],[\"筛选分组\",{\"1\":{\"305\":1}}],[\"待所有的计算都完成后\",{\"1\":{\"705\":1}}],[\"待处理\",{\"0\":{\"6\":1}}],[\"专业术语叫\",{\"1\":{\"703\":1}}],[\"专门针对基于\",{\"1\":{\"482\":1}}],[\"激增的时候表现更好\",{\"1\":{\"703\":1}}],[\"形成了叫做死锁的状态\",{\"1\":{\"702\":1}}],[\"形式的标识符使用\",{\"1\":{\"559\":1}}],[\"形式\",{\"1\":{\"550\":1}}],[\"虽非强制要求\",{\"1\":{\"700\":1}}],[\"虽然oauth\",{\"1\":{\"869\":1,\"892\":1}}],[\"虽然目前给出的定义有点抽象\",{\"1\":{\"846\":1}}],[\"虽然反射能够让\",{\"1\":{\"683\":1}}],[\"虽然编译器会尽力检查转换是否有效\",{\"1\":{\"662\":1}}],[\"虽然不完全是一回事\",{\"1\":{\"662\":1}}],[\"虽然不太可能\",{\"1\":{\"547\":1}}],[\"虽然不是每个问题都是搜索问题\",{\"1\":{\"6\":1}}],[\"虽然没有官方的性能标准\",{\"1\":{\"499\":1}}],[\"虽然需要安装\",{\"1\":{\"493\":1}}],[\"虽然也有new函数\",{\"1\":{\"445\":1}}],[\"虽然引入了defer\",{\"1\":{\"321\":1}}],[\"虽然有些库还不是很好\",{\"1\":{\"320\":1}}],[\"虽然\",{\"1\":{\"215\":1,\"473\":1,\"564\":1,\"846\":1}}],[\"虽然这看起来像胡言乱语\",{\"1\":{\"845\":1}}],[\"虽然这不是必须的\",{\"1\":{\"504\":1}}],[\"虽然这可能会在短期内缓解摩擦\",{\"1\":{\"75\":1}}],[\"虽然这些努力可能会起到快速修复的作用\",{\"1\":{\"75\":1}}],[\"虽然使用\",{\"1\":{\"72\":1}}],[\"虽然会提示输入密码\",{\"1\":{\"52\":1}}],[\"彼此之间发送和接收信息并且协调\",{\"1\":{\"699\":1}}],[\"乘\",{\"1\":{\"697\":1}}],[\"颗\",{\"1\":{\"696\":1}}],[\"暂存区的内容提交至本地库\",{\"0\":{\"815\":1}}],[\"暂存区状态\",{\"0\":{\"812\":1}}],[\"暂存区\",{\"1\":{\"808\":1}}],[\"暂时搁置它们并处理其他协程\",{\"1\":{\"694\":1}}],[\"暂停保护栈\",{\"1\":{\"429\":1}}],[\"暂停\",{\"1\":{\"429\":2}}],[\"展示对应函数名的代码行列表\",{\"1\":{\"692\":1}}],[\"展示了不使用\",{\"1\":{\"680\":1}}],[\"展示了如何在\",{\"1\":{\"508\":1}}],[\"箭头指示函数调用链\",{\"1\":{\"692\":1}}],[\"矩形越大\",{\"1\":{\"692\":1}}],[\"份样本\",{\"1\":{\"692\":1}}],[\"边界检查用例\",{\"1\":{\"689\":1}}],[\"纳秒\",{\"1\":{\"689\":1}}],[\"剩下的测试\",{\"1\":{\"689\":1}}],[\"演示了它们的使用\",{\"1\":{\"689\":1}}],[\"演示了如何生成\",{\"1\":{\"528\":1}}],[\"阅读下面的完整程序\",{\"1\":{\"689\":1}}],[\"效果\",{\"1\":{\"810\":1}}],[\"效果的函数会在写完日志信息后调用\",{\"1\":{\"689\":1}}],[\"效率较高\",{\"1\":{\"803\":1}}],[\"效率低\",{\"1\":{\"803\":1}}],[\"效率会更高一点\",{\"1\":{\"595\":1}}],[\"效率高\",{\"1\":{\"429\":1,\"803\":1}}],[\"效率普通\",{\"1\":{\"429\":1}}],[\"效率极低\",{\"1\":{\"429\":1}}],[\"效率\",{\"0\":{\"274\":1},\"1\":{\"320\":1}}],[\"效率更高\",{\"1\":{\"216\":1}}],[\"块类似\",{\"1\":{\"689\":1}}],[\"伴随着程序的崩溃抛出一个\",{\"1\":{\"689\":1}}],[\"英文只有句首单词首字母大写\",{\"1\":{\"688\":1}}],[\"照这样处理就算真的出了问题\",{\"1\":{\"687\":1}}],[\"捕捉\",{\"1\":{\"687\":1}}],[\"捕获\",{\"0\":{\"425\":1}}],[\"捕获panic\",{\"1\":{\"325\":1}}],[\"附加到当前的\",{\"1\":{\"686\":1}}],[\"附录\",{\"1\":{\"670\":1}}],[\"校验值\",{\"1\":{\"686\":1}}],[\"校验\",{\"1\":{\"686\":1}}],[\"校门\",{\"1\":{\"63\":1}}],[\"母公司的业务\",{\"1\":{\"686\":1}}],[\"黑客\",{\"1\":{\"686\":1}}],[\"零值会被忽略\",{\"1\":{\"686\":1}}],[\"储存任意的\",{\"1\":{\"684\":1}}],[\"磁盘及网络带宽\",{\"1\":{\"682\":1}}],[\"磁盘使用情况\",{\"1\":{\"248\":1}}],[\"轻量\",{\"1\":{\"682\":1}}],[\"轻松得多\",{\"1\":{\"487\":1}}],[\"轻松驾驭\",{\"1\":{\"479\":1}}],[\"轻松获得支撑千万日活服务的稳定性\",{\"1\":{\"459\":1}}],[\"轻松\",{\"1\":{\"320\":1}}],[\"片段如下\",{\"1\":{\"705\":1}}],[\"片段\",{\"1\":{\"682\":1}}],[\"序列化是在内存中把数据转换成指定格式\",{\"1\":{\"682\":1}}],[\"序列化\",{\"1\":{\"682\":1,\"849\":1}}],[\"序列进行排序\",{\"1\":{\"662\":1}}],[\"找出垃圾回收频繁执行的原因\",{\"1\":{\"692\":1}}],[\"找出程序逻辑中的\",{\"1\":{\"682\":1}}],[\"找到第一个句点\",{\"1\":{\"856\":1}}],[\"找到\",{\"1\":{\"447\":1,\"629\":1,\"638\":1}}],[\"找到lxssmanager右键重新启动即可\",{\"1\":{\"50\":1}}],[\"找到服务选项卡\",{\"1\":{\"50\":1}}],[\"找到前期保存的数据\",{\"1\":{\"28\":1}}],[\"仍然能够确保\",{\"1\":{\"680\":1}}],[\"稍微改变练习\",{\"1\":{\"676\":1}}],[\"已注册的名称绝对不能与已注册的名称具有不同的含义\",{\"1\":{\"869\":1}}],[\"已签名请求对象\",{\"0\":{\"957\":1}}],[\"已签名的\",{\"1\":{\"858\":2}}],[\"已签名\",{\"0\":{\"858\":1}}],[\"已有的函数可以扩展为使用接口类型的约束性参数\",{\"1\":{\"676\":1}}],[\"已经声明过了\",{\"1\":{\"700\":1}}],[\"已经运用在了其他语言中\",{\"1\":{\"694\":1}}],[\"已经被初始化\",{\"1\":{\"588\":1}}],[\"已经使用这种环境实现了一个\",{\"1\":{\"488\":1}}],[\"已经基本完成后\",{\"1\":{\"431\":1}}],[\"已经是队列中的最后一个\",{\"1\":{\"420\":1}}],[\"已经把一组的数据聚合成为了一条记录\",{\"1\":{\"304\":1}}],[\"却没有其他动态语言在运行时可能发生错误的缺点\",{\"1\":{\"672\":1}}],[\"却更简单的多态行为\",{\"1\":{\"659\":1}}],[\"泛型\",{\"1\":{\"672\":1}}],[\"跟\",{\"1\":{\"668\":1}}],[\"跟一个无方法的轻量级类一样\",{\"1\":{\"639\":1}}],[\"仿照\",{\"1\":{\"664\":1}}],[\"拆箱\",{\"1\":{\"664\":1}}],[\"拆分为多个库\",{\"1\":{\"248\":1}}],[\"采取了一致的方式来读写数据\",{\"1\":{\"662\":1}}],[\"采用类\",{\"1\":{\"614\":1}}],[\"采用了分层设计\",{\"1\":{\"461\":1}}],[\"采用的是\",{\"1\":{\"392\":1}}],[\"采用较小的扩容倍速\",{\"1\":{\"354\":1}}],[\"采用行级锁和\",{\"1\":{\"303\":1}}],[\"底\",{\"1\":{\"662\":1}}],[\"底层没有子节点的节点叫叶子节点\",{\"1\":{\"640\":1}}],[\"底层仍然会调用\",{\"1\":{\"640\":1}}],[\"底层的外部包\",{\"1\":{\"614\":1}}],[\"底层的数组内存才会被释放\",{\"1\":{\"602\":1}}],[\"底层打印函数\",{\"1\":{\"569\":1}}],[\"底层原理\",{\"1\":{\"431\":1}}],[\"底层原理了\",{\"1\":{\"430\":1}}],[\"底层调用\",{\"1\":{\"370\":2}}],[\"底层都采用链表结构\",{\"1\":{\"363\":1}}],[\"底层使用\",{\"1\":{\"363\":1}}],[\"底层数据结构和主要使用场景\",{\"0\":{\"405\":1}}],[\"底层数据结构和一些特性\",{\"0\":{\"331\":1,\"332\":1,\"354\":1}}],[\"底层数据结构是由一个\",{\"1\":{\"354\":1}}],[\"译注\",{\"1\":{\"662\":1,\"667\":1}}],[\"译者注\",{\"1\":{\"474\":1,\"481\":1,\"483\":1,\"496\":1,\"499\":1,\"506\":1,\"513\":1,\"543\":1,\"545\":1,\"546\":1,\"549\":1,\"557\":2,\"563\":1,\"588\":1,\"605\":1,\"609\":1,\"676\":1,\"698\":1,\"705\":1}}],[\"格子从底部\",{\"1\":{\"660\":1}}],[\"格式与\",{\"1\":{\"852\":1}}],[\"格式表示特定日期和时间的数字\",{\"1\":{\"852\":1}}],[\"格式的数据\",{\"1\":{\"692\":1}}],[\"格式的分析数据图表\",{\"1\":{\"692\":1}}],[\"格式\",{\"1\":{\"682\":1}}],[\"格式化描述符\",{\"1\":{\"660\":1}}],[\"格式化日期\",{\"0\":{\"617\":1}}],[\"格式化说明符\",{\"1\":{\"523\":1,\"531\":1}}],[\"格式化字符串为\",{\"1\":{\"517\":1}}],[\"格式化代码之后\",{\"1\":{\"549\":1}}],[\"格式化代码\",{\"0\":{\"496\":1}}],[\"格式为\",{\"1\":{\"1\":1,\"852\":1}}],[\"°c\",{\"1\":{\"660\":1,\"670\":2}}],[\"风格的对象\",{\"1\":{\"659\":1}}],[\"及设置数据的\",{\"1\":{\"666\":1}}],[\"及\",{\"1\":{\"657\":1,\"662\":2}}],[\"及以后的版本\",{\"1\":{\"482\":1}}],[\"功能手机\",{\"1\":{\"873\":1}}],[\"功能\",{\"1\":{\"656\":1,\"682\":1}}],[\"功能强大\",{\"1\":{\"296\":1}}],[\"父\",{\"1\":{\"655\":1}}],[\"父级用户组id\",{\"1\":{\"73\":1}}],[\"父级权限id\",{\"1\":{\"72\":2}}],[\"晋升\",{\"1\":{\"655\":1}}],[\"探索另一种方式\",{\"1\":{\"654\":1}}],[\"鉴于\",{\"1\":{\"686\":1}}],[\"鉴于性能的原因\",{\"1\":{\"653\":1}}],[\"鉴于可读性的需求\",{\"1\":{\"561\":1}}],[\"混在一起\",{\"1\":{\"652\":1}}],[\"混合流程步骤\",{\"0\":{\"904\":1}}],[\"混合流\",{\"1\":{\"868\":1}}],[\"混合字面量语法\",{\"1\":{\"640\":1}}],[\"混合使用\",{\"1\":{\"608\":1}}],[\"混合写屏障规则是\",{\"1\":{\"429\":1}}],[\"混合写屏障机制\",{\"1\":{\"429\":1}}],[\"混合写屏障\",{\"1\":{\"429\":1}}],[\"耦合更加宽松\",{\"1\":{\"652\":1}}],[\"叫做\",{\"1\":{\"652\":1}}],[\"别名\",{\"1\":{\"827\":2}}],[\"别名类型没有原始类型上已经定义过的方法\",{\"1\":{\"651\":1}}],[\"别的线程是无法进入的\",{\"1\":{\"803\":1}}],[\"别的\",{\"1\":{\"330\":1}}],[\"考虑下面的程序\",{\"1\":{\"662\":1}}],[\"考虑\",{\"1\":{\"654\":1}}],[\"考虑如下的程序\",{\"1\":{\"647\":1}}],[\"考虑到如果map存储了数以亿计的key\",{\"1\":{\"372\":1}}],[\"匿名地\",{\"1\":{\"656\":1}}],[\"匿名类型的可见方法也同样被内嵌\",{\"1\":{\"655\":1}}],[\"匿名字段上的方法\",{\"1\":{\"655\":1}}],[\"匿名字段本身可以是一个结构体类型\",{\"1\":{\"647\":1}}],[\"匿名字段和内嵌结构体\",{\"0\":{\"646\":1}}],[\"匿名\",{\"1\":{\"647\":1}}],[\"匿名函数同样被称之为闭包\",{\"1\":{\"573\":1}}],[\"匿名函数还可以配合\",{\"1\":{\"573\":1}}],[\"匿名函数像所有函数一样可以接受或不接受参数\",{\"1\":{\"573\":1}}],[\"匿名函数可以被赋值给变量并作为值使用\",{\"1\":{\"573\":1}}],[\"匿名函数或者\",{\"1\":{\"561\":1}}],[\"试着去深入理解它们\",{\"1\":{\"662\":1}}],[\"试着在\",{\"1\":{\"653\":1}}],[\"试着选择正确的数据类型\",{\"1\":{\"640\":1}}],[\"试图在\",{\"1\":{\"651\":1}}],[\"试图\",{\"1\":{\"643\":1}}],[\"家族的编程语言中它也存在\",{\"1\":{\"639\":1}}],[\"家族中的其它语言恰好相反\",{\"1\":{\"507\":1}}],[\"家族中的其它语言一样以分号\",{\"1\":{\"504\":1}}],[\"家族中的其它语言相同\",{\"1\":{\"504\":1}}],[\"仓库地址备忘录查看\",{\"0\":{\"827\":1}}],[\"仓库级别\",{\"1\":{\"811\":1}}],[\"仓库\",{\"1\":{\"635\":1}}],[\"仓库在里面\",{\"1\":{\"635\":1}}],[\"仓库作为演示\",{\"1\":{\"635\":1}}],[\"仓库中有人提出过\",{\"1\":{\"51\":1}}],[\"绝大多数情况下语言和标准库解决了大部分的可移植性问题\",{\"1\":{\"633\":1}}],[\"绝对不要用指针指向切片\",{\"1\":{\"585\":1}}],[\"绝对不会再去执行其他针对该值的操作\",{\"1\":{\"418\":1}}],[\"绝对值\",{\"1\":{\"149\":1,\"182\":1}}],[\"备注\",{\"1\":{\"631\":1,\"638\":1,\"659\":1,\"660\":1,\"662\":3,\"689\":1}}],[\"斜体代表可执行文件\",{\"1\":{\"631\":1}}],[\"升级到新的版本\",{\"1\":{\"629\":1}}],[\"升序\",{\"1\":{\"122\":1,\"134\":1}}],[\"起\",{\"1\":{\"629\":1}}],[\"起源与发展\",{\"0\":{\"469\":1}}],[\"远程库拉取\",{\"0\":{\"829\":1}}],[\"远程库\",{\"1\":{\"808\":1}}],[\"远程包安装命令\",{\"1\":{\"483\":1}}],[\"远端包\",{\"1\":{\"629\":1}}],[\"脚本\",{\"1\":{\"689\":1}}],[\"脚本做到这一点\",{\"1\":{\"627\":1}}],[\"脚本就会自动的将一切准备工作做好\",{\"1\":{\"51\":1}}],[\"连续调用的情况\",{\"1\":{\"697\":1}}],[\"连同signatures以验证其真实性\",{\"1\":{\"845\":1}}],[\"连同文件\",{\"1\":{\"628\":1}}],[\"连同编译链接生成的\",{\"1\":{\"627\":1}}],[\"连接和组合\",{\"0\":{\"169\":1}}],[\"连接起来的\",{\"1\":{\"138\":1,\"172\":1}}],[\"连接可以替换子查询\",{\"1\":{\"137\":1,\"170\":1}}],[\"连接用于连接多个表\",{\"1\":{\"137\":1,\"170\":1}}],[\"连接\",{\"0\":{\"137\":1,\"170\":1},\"1\":{\"84\":1,\"680\":1,\"686\":1}}],[\"π\",{\"1\":{\"626\":1}}],[\"足以满足大多数的任务\",{\"1\":{\"626\":1}}],[\"定时器\",{\"0\":{\"623\":1},\"1\":{\"623\":1}}],[\"定义的值为\",{\"1\":{\"873\":2}}],[\"定义的代码响应类型值外\",{\"1\":{\"869\":1}}],[\"定义的术语\",{\"1\":{\"868\":2}}],[\"定义的要求\",{\"1\":{\"853\":1}}],[\"定义特定的错误\",{\"1\":{\"688\":1}}],[\"定义错误\",{\"0\":{\"688\":1}}],[\"定义其它类型\",{\"1\":{\"682\":1}}],[\"定义了一个\",{\"1\":{\"689\":1}}],[\"定义了一个默认值是\",{\"1\":{\"682\":1}}],[\"定义了两个接口\",{\"1\":{\"672\":1}}],[\"定义了\",{\"1\":{\"667\":1}}],[\"定义了不同操作系统通用的接口\",{\"1\":{\"633\":1}}],[\"定义接口\",{\"1\":{\"662\":1}}],[\"定义接口的方式称为\",{\"1\":{\"392\":1}}],[\"定义类型\",{\"1\":{\"662\":2}}],[\"定义在指针上\",{\"1\":{\"662\":1}}],[\"定义在值上\",{\"1\":{\"662\":1}}],[\"定义变量\",{\"1\":{\"662\":1}}],[\"定义一些常量表示时区\",{\"1\":{\"660\":1}}],[\"定义一个通用的\",{\"1\":{\"676\":1}}],[\"定义一个如下的\",{\"1\":{\"672\":1}}],[\"定义一个包\",{\"1\":{\"662\":1}}],[\"定义一个新接口\",{\"1\":{\"662\":1}}],[\"定义一个接口\",{\"1\":{\"662\":1}}],[\"定义一个枚举常量用于表示一周的中每天\",{\"1\":{\"660\":1}}],[\"定义一个字符串数组它包含一周七天的名字\",{\"1\":{\"660\":1}}],[\"定义一个别名类型\",{\"1\":{\"660\":2}}],[\"定义一个结构体\",{\"1\":{\"662\":1}}],[\"定义一个结构体类型\",{\"1\":{\"657\":1}}],[\"定义一个结构类型\",{\"1\":{\"567\":1}}],[\"定义一个二维\",{\"1\":{\"640\":1}}],[\"定义一个1秒间隔的定时器\",{\"1\":{\"623\":1}}],[\"定义一个\",{\"1\":{\"530\":1,\"640\":1,\"660\":1}}],[\"定义别名类型\",{\"1\":{\"660\":1}}],[\"定义方法的一般格式如下\",{\"1\":{\"651\":1}}],[\"定义方式不一样\",{\"1\":{\"353\":1}}],[\"定义结构体\",{\"1\":{\"640\":1,\"651\":1}}],[\"定义为一个指针\",{\"1\":{\"653\":1}}],[\"定义为\",{\"1\":{\"607\":1,\"659\":1}}],[\"定义但未使用标签会导致编译错误\",{\"1\":{\"559\":1}}],[\"定义\",{\"0\":{\"647\":1},\"1\":{\"513\":1,\"659\":1,\"660\":3}}],[\"定义和生成工具\",{\"1\":{\"459\":1}}],[\"定义游标\",{\"1\":{\"168\":2,\"204\":2}}],[\"定义存储过程的语法格式\",{\"1\":{\"162\":1,\"198\":1}}],[\"伪随机数生成\",{\"1\":{\"614\":1}}],[\"缓冲大小为\",{\"1\":{\"709\":1}}],[\"缓冲空间大于\",{\"1\":{\"709\":1}}],[\"缓冲满载\",{\"1\":{\"703\":1}}],[\"缓冲容量和类型无关\",{\"1\":{\"703\":1}}],[\"缓冲被全部使用\",{\"1\":{\"703\":1}}],[\"缓冲协议等等\",{\"1\":{\"682\":1}}],[\"缓冲的标准方式\",{\"1\":{\"682\":1}}],[\"缓冲区的内容紧接着被完全写入文件\",{\"1\":{\"680\":1}}],[\"缓冲区\",{\"1\":{\"680\":1}}],[\"缓冲输入输出功能的封装\",{\"1\":{\"614\":1}}],[\"缓存\",{\"1\":{\"662\":1,\"801\":1}}],[\"缓存更高效\",{\"1\":{\"268\":1}}],[\"缓存可以带来的查询性能提升将会是非常明显的\",{\"1\":{\"265\":1}}],[\"缓存重复查询的数据\",{\"1\":{\"265\":1}}],[\"压缩的\",{\"1\":{\"662\":1}}],[\"压缩\",{\"1\":{\"614\":1}}],[\"压力\",{\"0\":{\"443\":1}}],[\"压力就很大\",{\"1\":{\"246\":1}}],[\"隐藏了不同操作系统间的差异\",{\"1\":{\"614\":1}}],[\"隐式流遵循以下步骤\",{\"1\":{\"890\":1}}],[\"隐式流程步骤\",{\"0\":{\"890\":1}}],[\"隐式流主要用于使用脚本语言在浏览器中实现的客户端\",{\"1\":{\"889\":1}}],[\"隐式流\",{\"1\":{\"868\":1,\"869\":1}}],[\"隐式类型定义\",{\"1\":{\"513\":1}}],[\"隐式的类型转换是不被允许的\",{\"1\":{\"475\":1}}],[\"见第2节\",{\"1\":{\"866\":1}}],[\"见第\",{\"1\":{\"643\":1}}],[\"见图\",{\"1\":{\"597\":1}}],[\"见5\",{\"1\":{\"549\":1}}],[\"界\",{\"1\":{\"595\":1}}],[\"ÿ\",{\"1\":{\"595\":1}}],[\"构造函数的签名为\",{\"1\":{\"677\":1}}],[\"构造子工厂\",{\"1\":{\"642\":1}}],[\"构造一个将英文饮料名映射为法语\",{\"1\":{\"612\":1}}],[\"构造一个函数\",{\"1\":{\"593\":1}}],[\"构建一个完整的应用程序\",{\"0\":{\"714\":1}}],[\"构建一个把\",{\"1\":{\"676\":1}}],[\"构建一个自己的\",{\"1\":{\"640\":1}}],[\"构建通用类型或包含不同类型变量的数组\",{\"0\":{\"664\":1}}],[\"构建并运行\",{\"0\":{\"495\":1}}],[\"构建出的程序需要能够通过命令行或\",{\"1\":{\"490\":1}}],[\"构建\",{\"1\":{\"483\":1,\"501\":1}}],[\"覆盖\",{\"1\":{\"593\":1}}],[\"覆盖索引\",{\"0\":{\"224\":1}}],[\"转码\",{\"1\":{\"682\":1}}],[\"转成切片\",{\"1\":{\"585\":1}}],[\"转换失败会导致一个运行时错误\",{\"1\":{\"667\":1}}],[\"转换成\",{\"1\":{\"602\":1,\"689\":1}}],[\"转换成正常模式\",{\"1\":{\"420\":1}}],[\"转换到类型\",{\"1\":{\"662\":1}}],[\"转换到\",{\"1\":{\"501\":2}}],[\"转换前后的两个类型要相互兼容才行\",{\"1\":{\"388\":1}}],[\"转换为相应格式的字符串\",{\"1\":{\"546\":1}}],[\"转换为字符串总是成功的\",{\"1\":{\"545\":1}}],[\"转换为\",{\"1\":{\"501\":2,\"511\":3,\"523\":1,\"598\":1,\"667\":1}}],[\"转换为语音值\",{\"1\":{\"147\":1,\"180\":1}}],[\"转换为小写或者大写\",{\"1\":{\"147\":1,\"180\":1}}],[\"终止定时器\",{\"1\":{\"623\":1}}],[\"终止索引标识的项不包括在切片内\",{\"1\":{\"585\":1}}],[\"终端用户必须在授权服务器上选择一个会话\",{\"1\":{\"878\":1}}],[\"终端用户是实体的一个例子\",{\"1\":{\"868\":1}}],[\"终端用户\",{\"1\":{\"868\":1}}],[\"终端\",{\"1\":{\"52\":1}}],[\"几何点\",{\"1\":{\"581\":1}}],[\"几乎都一样\",{\"1\":{\"697\":1}}],[\"几乎\",{\"1\":{\"651\":1}}],[\"几乎在任何情况下\",{\"1\":{\"563\":1}}],[\"几乎所有\",{\"1\":{\"694\":1}}],[\"几乎所有全局作用域的类型\",{\"1\":{\"508\":1}}],[\"几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持\",{\"1\":{\"240\":1}}],[\"几乎只需要\",{\"1\":{\"499\":1}}],[\"几乎能满足所有类型的需求\",{\"1\":{\"63\":1}}],[\"证明当数组赋值时\",{\"1\":{\"580\":1}}],[\"譬如大量进行相同参数的运算\",{\"1\":{\"577\":1}}],[\"譬如简单与复杂类型\",{\"1\":{\"467\":1}}],[\"秒的时间来运行\",{\"1\":{\"701\":1}}],[\"秒让两个协程完成\",{\"1\":{\"700\":1}}],[\"秒从而确定它会在另外两个协程之后结束\",{\"1\":{\"697\":1}}],[\"秒\",{\"1\":{\"577\":2,\"697\":1,\"701\":1}}],[\"秒以内\",{\"1\":{\"473\":1}}],[\"涵盖着函数体\",{\"1\":{\"573\":1}}],[\"花括号\",{\"1\":{\"573\":1}}],[\"闭包函数来打印函数执行的位置\",{\"1\":{\"575\":1}}],[\"闭包函数保存并积累其中的变量的值\",{\"1\":{\"574\":1}}],[\"闭包在\",{\"1\":{\"574\":1}}],[\"闭包经常被用作包装函数\",{\"1\":{\"573\":1}}],[\"闭包可使得某个函数捕捉到一些外部状态\",{\"1\":{\"573\":1}}],[\"闭包\",{\"0\":{\"573\":1}}],[\"积与差\",{\"1\":{\"564\":1}}],[\"积极听取用户意见\",{\"1\":{\"461\":1}}],[\"消费者和生产者\",{\"1\":{\"853\":1}}],[\"消费者模式\",{\"1\":{\"708\":2,\"709\":1}}],[\"消费者协程\",{\"1\":{\"699\":1}}],[\"消耗也更少\",{\"1\":{\"563\":1}}],[\"消息\",{\"1\":{\"868\":1}}],[\"消息协议的支持\",{\"1\":{\"462\":1}}],[\"消息协议\",{\"1\":{\"462\":1}}],[\"消息协议默认支持\",{\"1\":{\"462\":1}}],[\"消息过滤\",{\"1\":{\"405\":1}}],[\"消息传递\",{\"1\":{\"405\":1,\"427\":1,\"694\":1}}],[\"死锁\",{\"1\":{\"702\":1}}],[\"死锁几乎完全是由糟糕的设计导致的\",{\"1\":{\"702\":1}}],[\"死循环\",{\"1\":{\"561\":1}}],[\"死活跑不起来\",{\"1\":{\"320\":1}}],[\"介绍如何使用隐式流进行身份验证\",{\"1\":{\"889\":1}}],[\"介绍了概念\",{\"1\":{\"697\":1}}],[\"介绍\",{\"0\":{\"561\":1,\"844\":1}}],[\"介绍一下大对象小对象\",{\"0\":{\"443\":1}}],[\"語\",{\"1\":{\"557\":2}}],[\"始终为集合中对应索引的值拷贝\",{\"1\":{\"557\":1}}],[\"始终使用\",{\"1\":{\"532\":1}}],[\"想想用户id或电子邮件\",{\"1\":{\"848\":1}}],[\"想写规范的\",{\"1\":{\"658\":1}}],[\"想要避免这个问题\",{\"1\":{\"602\":1}}],[\"想要在数组或切片中搜索一个元素\",{\"1\":{\"600\":1}}],[\"想要实现这样的做法\",{\"1\":{\"576\":1}}],[\"想要直接退出循环体\",{\"1\":{\"556\":1}}],[\"想怎么玩就怎么玩\",{\"1\":{\"320\":1}}],[\"便可以从通道中获取值\",{\"1\":{\"708\":1}}],[\"便是我们需要的短地址\",{\"1\":{\"638\":1}}],[\"便是多余的了\",{\"1\":{\"555\":1}}],[\"便因为\",{\"1\":{\"63\":1}}],[\"尾行达\",{\"1\":{\"554\":1}}],[\"尾部并生成一个新的字符串\",{\"1\":{\"532\":1}}],[\"\",{\"1\":{\"553\":1}}],[\"ª\",{\"1\":{\"553\":1}}],[\"è\",{\"1\":{\"553\":1}}],[\"¬\",{\"1\":{\"553\":1}}],[\"\",{\"1\":{\"553\":1}}],[\"¥\",{\"1\":{\"553\":1}}],[\"\",{\"1\":{\"553\":1}}],[\"æ\",{\"1\":{\"553\":2}}],[\"永远不要忽略错误\",{\"1\":{\"687\":1}}],[\"永远不要在循环体内修改计数器\",{\"1\":{\"553\":1}}],[\"永远用\",{\"1\":{\"605\":1}}],[\"永远保持最新的版本\",{\"1\":{\"483\":1}}],[\"紧凑序列化算法概述\",{\"0\":{\"859\":1}}],[\"紧凑序列化的紧凑表示法进行编码\",{\"1\":{\"849\":1}}],[\"紧凑型序列化是对前两个\",{\"1\":{\"849\":1}}],[\"紧凑和可用性是其架构的主要特点\",{\"1\":{\"844\":1}}],[\"紧接着的是条件语句\",{\"1\":{\"553\":1}}],[\"紧跟着长度为\",{\"1\":{\"531\":1}}],[\"习惯用法\",{\"1\":{\"550\":4,\"707\":1,\"708\":2,\"709\":1}}],[\"逗号\",{\"1\":{\"550\":1}}],[\"需求\",{\"0\":{\"867\":1}}],[\"需使用\",{\"1\":{\"549\":1}}],[\"需要强调的是\",{\"1\":{\"857\":1}}],[\"需要让通道有足够的容量放置所有的元素\",{\"1\":{\"709\":1}}],[\"需要从包含了地址索引字段\",{\"1\":{\"708\":1}}],[\"需要写一些可以频繁\",{\"1\":{\"689\":1}}],[\"需要用到类型断言\",{\"1\":{\"664\":1}}],[\"需要一个\",{\"1\":{\"661\":1,\"662\":2}}],[\"需要一级安全许可\",{\"1\":{\"62\":1}}],[\"需要将\",{\"1\":{\"611\":1}}],[\"需要对内存组成部分初始化后才能使用\",{\"1\":{\"588\":1}}],[\"需要对形参进行断言\",{\"1\":{\"389\":1}}],[\"需要再做一次数组内存的拷贝操作\",{\"1\":{\"580\":1}}],[\"需要先得到之前两个数的值\",{\"1\":{\"577\":1}}],[\"需要先获得写锁\",{\"1\":{\"231\":1}}],[\"需要添加注释以便其他人能够更加清楚的知道函数里面到底发生了什么\",{\"1\":{\"566\":1}}],[\"需要使用\",{\"1\":{\"564\":1,\"709\":2}}],[\"需要使用service来启动\",{\"1\":{\"51\":1}}],[\"需要在\",{\"1\":{\"531\":1}}],[\"需要被放在紧接着函数体的下一行\",{\"1\":{\"507\":1}}],[\"需要且只需要这个文件\",{\"1\":{\"506\":1}}],[\"需要进行\",{\"1\":{\"439\":1}}],[\"需要调用\",{\"1\":{\"431\":3}}],[\"需要\",{\"1\":{\"429\":1,\"519\":1,\"561\":1,\"588\":1}}],[\"需要重新扫描一次栈\",{\"1\":{\"429\":1}}],[\"需要满足一定条件\",{\"1\":{\"365\":1}}],[\"需要自己多去总结\",{\"0\":{\"328\":1}}],[\"需要注意的是go语言中格式化时间模板不是长久的\",{\"1\":{\"617\":2}}],[\"需要注意的是\",{\"1\":{\"303\":1,\"515\":1,\"532\":1,\"564\":1,\"585\":1,\"610\":1}}],[\"需要通过\",{\"1\":{\"299\":1}}],[\"需要删除第一行和第三行\",{\"1\":{\"288\":1}}],[\"需要根据实际情况权衡\",{\"1\":{\"283\":1}}],[\"需要根据具体应用场景来权衡\",{\"1\":{\"164\":1,\"200\":1}}],[\"需要应用程序在事务控制上做灵活设计\",{\"1\":{\"254\":1}}],[\"需要数据迁移\",{\"1\":{\"249\":1}}],[\"需要考虑分表了\",{\"1\":{\"247\":1}}],[\"需要更新索引空间\",{\"1\":{\"211\":1}}],[\"需要执行的语句\",{\"1\":{\"162\":1,\"198\":1}}],[\"需要深思熟虑的实施\",{\"1\":{\"75\":1}}],[\"需要了解组织结构知识\",{\"1\":{\"75\":1}}],[\"需要出场的地方了\",{\"1\":{\"39\":1}}],[\"需要指定一个密钥\",{\"1\":{\"36\":1}}],[\"符号和约定\",{\"0\":{\"867\":1}}],[\"符号标识的数组类型几乎在所有的编程语言中都是一个基本主力\",{\"1\":{\"578\":1}}],[\"符号打印宽为\",{\"1\":{\"554\":1}}],[\"符号\",{\"1\":{\"547\":1,\"563\":1,\"697\":1}}],[\"讨论\",{\"1\":{\"662\":1}}],[\"讨论这些有趣的事情\",{\"1\":{\"546\":1}}],[\"讨论到一个使用\",{\"1\":{\"476\":1}}],[\"国内用户可访问\",{\"1\":{\"543\":1,\"545\":1,\"546\":1}}],[\"国内镜像\",{\"1\":{\"483\":1}}],[\"修饰\",{\"1\":{\"856\":1}}],[\"修饰的\",{\"1\":{\"689\":1}}],[\"修饰的函数\",{\"1\":{\"689\":1}}],[\"修饰语句\",{\"1\":{\"553\":1}}],[\"修正它并测试\",{\"1\":{\"682\":1}}],[\"修剪字符串\",{\"0\":{\"541\":1}}],[\"修改源\",{\"1\":{\"984\":1}}],[\"修改用户变量\",{\"0\":{\"982\":1}}],[\"修改文件后的提交操作\",{\"0\":{\"817\":1}}],[\"修改为英文\",{\"1\":{\"725\":1}}],[\"修改\",{\"0\":{\"813\":1},\"1\":{\"640\":1,\"657\":1}}],[\"修改字符串中的某个字符\",{\"0\":{\"598\":1}}],[\"修改字符串大小写\",{\"0\":{\"540\":1}}],[\"修改并尝试更多的方案\",{\"1\":{\"467\":1}}],[\"修改的都是对象的副本\",{\"1\":{\"382\":1}}],[\"修改一个另一个也会变\",{\"1\":{\"346\":1}}],[\"修改一个数据\",{\"1\":{\"238\":1}}],[\"修改新对象时不会影响原对象的值\",{\"1\":{\"346\":1}}],[\"修改时机\",{\"1\":{\"325\":1}}],[\"修改时间\",{\"1\":{\"72\":6,\"73\":3}}],[\"修改了一个记录中的信息\",{\"1\":{\"288\":1}}],[\"修改异常\",{\"1\":{\"288\":1}}],[\"修改账户名\",{\"0\":{\"156\":1,\"192\":1}}],[\"修改列\",{\"0\":{\"102\":1}}],[\"修改数据表\",{\"0\":{\"99\":1}}],[\"修改人\",{\"1\":{\"72\":6,\"73\":3}}],[\"修改权限\",{\"1\":{\"6\":2}}],[\"修改配置文件\",{\"1\":{\"4\":1}}],[\"修改log目录权限\",{\"1\":{\"3\":1}}],[\"拼接\",{\"0\":{\"543\":1}}],[\"拼接更加给力\",{\"1\":{\"532\":1}}],[\"拼接字符串并不是最高效的做法\",{\"1\":{\"532\":1}}],[\"拼接的简写形式\",{\"1\":{\"532\":1}}],[\"拼接在一起\",{\"1\":{\"532\":1}}],[\"拼接速度快\",{\"1\":{\"274\":1}}],[\"纯字节\",{\"1\":{\"532\":1}}],[\"纯虚函数是通过在声明中使用\",{\"1\":{\"392\":1}}],[\"纯虚函数\",{\"1\":{\"391\":1,\"392\":1}}],[\"β\",{\"1\":{\"531\":1}}],[\"码云\",{\"1\":{\"809\":1}}],[\"码的字符串有效\",{\"1\":{\"532\":1}}],[\"码时则占用\",{\"1\":{\"532\":1}}],[\"码表中\",{\"1\":{\"531\":1}}],[\"码中的大写字母\",{\"1\":{\"506\":1}}],[\"溢出\",{\"1\":{\"527\":1}}],[\"溢出的bucket个数\",{\"1\":{\"364\":1}}],[\"递归结构体\",{\"1\":{\"640\":1}}],[\"递归函数\",{\"0\":{\"570\":1}}],[\"递归创建\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"6\":2}}],[\"递减\",{\"1\":{\"527\":1}}],[\"递增\",{\"1\":{\"527\":1}}],[\"浮点数除以\",{\"1\":{\"527\":1}}],[\"浮点型的零值为\",{\"1\":{\"523\":1}}],[\"浮点型\",{\"1\":{\"523\":1}}],[\"浮点型和复数\",{\"1\":{\"513\":1}}],[\"^=\",{\"1\":{\"525\":1}}],[\"^10\",{\"1\":{\"525\":1}}],[\"^\",{\"1\":{\"525\":9,\"529\":3}}],[\"^uintptr\",{\"1\":{\"430\":1}}],[\"|<\",{\"1\":{\"869\":3}}],[\"|\",{\"1\":{\"525\":6,\"529\":1,\"543\":1,\"628\":3,\"680\":1,\"762\":1,\"782\":1,\"869\":66}}],[\"||\",{\"1\":{\"274\":1,\"430\":1,\"521\":9,\"529\":1,\"549\":1,\"686\":1,\"689\":1}}],[\"精密计算和\",{\"0\":{\"626\":1}}],[\"精确到小数点后\",{\"1\":{\"523\":2}}],[\"精通golang项目依赖go\",{\"0\":{\"347\":1}}],[\"布尔型或逻辑型\",{\"1\":{\"549\":1}}],[\"布尔型的常量和变量也可以通过和逻辑运算符\",{\"1\":{\"521\":1}}],[\"布尔型的值只可以是常量\",{\"1\":{\"521\":1}}],[\"布尔值\",{\"0\":{\"755\":1},\"1\":{\"521\":1}}],[\"布尔类型\",{\"0\":{\"521\":1}}],[\"推送远程库\",{\"0\":{\"828\":1}}],[\"推断的返回值类型为never\",{\"1\":{\"765\":1}}],[\"推断以下程序的输出\",{\"1\":{\"519\":1}}],[\"推荐使用\",{\"1\":{\"803\":2}}],[\"推荐使用double\",{\"1\":{\"803\":1}}],[\"推荐\",{\"1\":{\"426\":1,\"873\":1}}],[\"练习题\",{\"0\":{\"554\":1,\"571\":1}}],[\"练习\",{\"1\":{\"519\":4,\"527\":1,\"530\":1,\"532\":1,\"550\":1,\"551\":1,\"554\":5,\"557\":1,\"564\":2,\"567\":1,\"570\":1,\"571\":3,\"572\":1,\"573\":1,\"574\":2,\"580\":4,\"587\":1,\"590\":2,\"591\":2,\"593\":4,\"602\":6,\"609\":1,\"612\":1,\"623\":2,\"627\":3,\"640\":4,\"648\":1,\"651\":2,\"655\":1,\"657\":3,\"660\":5,\"661\":1,\"662\":7,\"663\":1,\"664\":1,\"676\":3,\"677\":3,\"678\":1,\"680\":1,\"681\":1,\"682\":2,\"683\":1,\"686\":2,\"689\":4,\"700\":1,\"701\":1,\"702\":1,\"703\":1,\"707\":2}}],[\"尝试一下如果注释掉\",{\"1\":{\"700\":1}}],[\"尝试运行下面的代码\",{\"1\":{\"668\":1}}],[\"尝试改写\",{\"1\":{\"550\":1}}],[\"尝试编译\",{\"1\":{\"527\":1}}],[\"尝试编译这段代码将得到错误\",{\"1\":{\"518\":1}}],[\"尝试从其他线程绑定的p偷取g\",{\"1\":{\"411\":1}}],[\"地址编号\",{\"1\":{\"640\":1}}],[\"地址\",{\"1\":{\"516\":1,\"627\":1,\"640\":1,\"827\":2}}],[\"地完成代码编写\",{\"1\":{\"445\":1}}],[\"判断语句块\",{\"1\":{\"803\":1}}],[\"判断操作结果\",{\"1\":{\"725\":1}}],[\"判断前\",{\"1\":{\"627\":1}}],[\"判断相等\",{\"1\":{\"622\":1}}],[\"判断运行\",{\"1\":{\"549\":1}}],[\"判断一个字符串是否为空\",{\"1\":{\"549\":1}}],[\"判断子字符串或字符在父字符串中出现的位置\",{\"0\":{\"536\":1}}],[\"判断字符串\",{\"1\":{\"534\":2,\"535\":1}}],[\"判断是否为空白符号\",{\"1\":{\"531\":1}}],[\"判断是否为数字\",{\"1\":{\"531\":1}}],[\"判断是否为字母\",{\"1\":{\"531\":1}}],[\"判断\",{\"1\":{\"515\":1}}],[\"判断保存的格式是\",{\"1\":{\"42\":1}}],[\"忽略剩余的循环体而直接进入下一次循环的过程\",{\"1\":{\"558\":1}}],[\"忽略不需要的\",{\"1\":{\"513\":1}}],[\"忽略返回值\",{\"1\":{\"340\":1}}],[\"女性和男性\",{\"1\":{\"513\":1}}],[\"显卡的驱动程序对象常被设计成单例\",{\"1\":{\"801\":1}}],[\"显式地指明类型实现了某个接口\",{\"0\":{\"674\":1}}],[\"显式类型定义\",{\"1\":{\"513\":1}}],[\"显示结果\",{\"1\":{\"677\":1}}],[\"显示了一个结构体\",{\"1\":{\"640\":1}}],[\"显示了另一种方式\",{\"1\":{\"640\":1}}],[\"显示\",{\"1\":{\"631\":1}}],[\"显然这无法让人容忍\",{\"1\":{\"625\":1}}],[\"显然\",{\"1\":{\"472\":1,\"558\":1}}],[\"显然就不适用了\",{\"1\":{\"164\":1,\"200\":1}}],[\"追加到切片\",{\"1\":{\"593\":1,\"601\":1}}],[\"追加到后面\",{\"1\":{\"590\":1}}],[\"追加的元素必须和原切片的元素是同类型\",{\"1\":{\"593\":1}}],[\"追加在\",{\"1\":{\"532\":1}}],[\"追求的主要目标\",{\"1\":{\"512\":1}}],[\"追踪和功能预期详见\",{\"1\":{\"469\":1}}],[\"截断\",{\"1\":{\"511\":1,\"680\":1}}],[\"こんにちは\",{\"1\":{\"508\":2}}],[\"κόσμε\",{\"1\":{\"508\":2}}],[\"καλημέρα\",{\"1\":{\"508\":2}}],[\"命名的权利要求\",{\"1\":{\"853\":1}}],[\"命名的返回值\",{\"0\":{\"564\":1}}],[\"命名冲突\",{\"0\":{\"649\":1}}],[\"命名返回值作为结果形参\",{\"1\":{\"564\":1}}],[\"命名规范\",{\"0\":{\"512\":1}}],[\"命名法\",{\"1\":{\"507\":1}}],[\"命令从\",{\"1\":{\"782\":1}}],[\"命令中设置它的容量\",{\"1\":{\"703\":1}}],[\"命令和\",{\"1\":{\"696\":1}}],[\"命令输出的例子\",{\"1\":{\"692\":1}}],[\"命令可以生成\",{\"1\":{\"692\":1}}],[\"命令来构建归档文件\",{\"1\":{\"689\":1}}],[\"命令行中像这样使用\",{\"1\":{\"690\":1}}],[\"命令行执行\",{\"1\":{\"682\":1}}],[\"命令行下进入目录下并输入命令\",{\"1\":{\"628\":1}}],[\"命令的列表\",{\"1\":{\"635\":1}}],[\"命令教程\",{\"1\":{\"450\":1}}],[\"命令源码包生成的可执行文件会被放到\",{\"1\":{\"450\":1}}],[\"命令源码文件\",{\"1\":{\"449\":1}}],[\"命令源码\",{\"1\":{\"449\":1}}],[\"命令得到\",{\"1\":{\"449\":1}}],[\"命令式和函数式编程语言\",{\"1\":{\"317\":1}}],[\"命令\",{\"1\":{\"166\":1,\"202\":1,\"450\":1,\"689\":2,\"692\":1,\"810\":1,\"812\":1,\"813\":1,\"814\":1,\"815\":2,\"816\":1,\"817\":1,\"818\":4,\"823\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"828\":2,\"829\":2,\"831\":2}}],[\"命令会使用\",{\"1\":{\"51\":1}}],[\"帮助页面\",{\"1\":{\"635\":1}}],[\"帮助避免命名冲突\",{\"1\":{\"506\":1}}],[\"帮助用户更快的写出正确的代码\",{\"1\":{\"461\":1}}],[\"报头\",{\"1\":{\"849\":1}}],[\"报错\",{\"1\":{\"828\":1}}],[\"报错信息\",{\"1\":{\"506\":1}}],[\"报告这个\",{\"1\":{\"455\":1}}],[\"输出相同\",{\"1\":{\"709\":1}}],[\"输出了上万个整数\",{\"1\":{\"701\":1}}],[\"输出如下\",{\"1\":{\"689\":1,\"692\":1}}],[\"输出到一个数据结构\",{\"1\":{\"682\":1}}],[\"输出到控制台\",{\"1\":{\"507\":1}}],[\"输出的文件却是个空文件\",{\"1\":{\"682\":1}}],[\"输出的结果已经写在每行\",{\"1\":{\"546\":1}}],[\"输出流中的不同实体\",{\"1\":{\"672\":1}}],[\"输出栈的内容\",{\"1\":{\"660\":1}}],[\"输出是6\",{\"1\":{\"651\":1}}],[\"输出为\",{\"1\":{\"631\":1}}],[\"输出结果为\",{\"1\":{\"605\":1}}],[\"输出结果\",{\"1\":{\"564\":1,\"565\":2,\"580\":2,\"581\":1,\"583\":1,\"592\":1,\"605\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"624\":1,\"626\":1,\"627\":1,\"677\":1,\"678\":1}}],[\"输出显示\",{\"1\":{\"563\":1}}],[\"输出格式为\",{\"1\":{\"531\":1}}],[\"输出科学计数表示法\",{\"1\":{\"523\":1}}],[\"输出浮点数\",{\"1\":{\"523\":1}}],[\"输出\",{\"1\":{\"506\":1,\"523\":1,\"524\":1,\"530\":1,\"531\":1,\"532\":1,\"534\":1,\"536\":1,\"538\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":1,\"546\":1,\"547\":2,\"549\":2,\"551\":2,\"553\":2,\"555\":1,\"557\":1,\"558\":2,\"567\":1,\"568\":4,\"570\":1,\"572\":1,\"573\":1,\"574\":2,\"585\":1,\"587\":1,\"595\":1,\"640\":3,\"644\":1,\"645\":1,\"647\":1,\"648\":1,\"651\":1,\"653\":1,\"656\":2,\"657\":1,\"660\":2,\"662\":6,\"663\":2,\"668\":1,\"669\":1,\"670\":2,\"671\":1,\"673\":1,\"676\":1,\"682\":1,\"686\":2,\"689\":4,\"697\":1,\"700\":1,\"701\":1,\"709\":1}}],[\"输入的格式为\",{\"1\":{\"677\":1}}],[\"输入的行数\",{\"1\":{\"677\":1}}],[\"输入的单词的个数\",{\"1\":{\"677\":1}}],[\"输入的字符的个数\",{\"1\":{\"677\":1}}],[\"输入呢\",{\"1\":{\"677\":1}}],[\"输入一个像\",{\"1\":{\"638\":1}}],[\"输入正确的帐号密码和有效的邮箱地址并进一步创建用户\",{\"1\":{\"635\":1}}],[\"输入\",{\"1\":{\"483\":1,\"506\":1}}],[\"告诉\",{\"1\":{\"506\":1}}],[\"告诉给\",{\"1\":{\"394\":1}}],[\"括号中为网站所使用的版本控制系统\",{\"1\":{\"636\":1}}],[\"括号里的是被调用函数的实参\",{\"1\":{\"561\":1}}],[\"括号\",{\"1\":{\"504\":1}}],[\"括起来\",{\"1\":{\"128\":1,\"507\":1,\"564\":1}}],[\"өԑ12\",{\"1\":{\"504\":1}}],[\"少占用三分之二的内存\",{\"1\":{\"499\":1}}],[\"少用panic\",{\"1\":{\"425\":1}}],[\"异步服务器和框架在\",{\"1\":{\"499\":1}}],[\"异常机制\",{\"1\":{\"687\":1}}],[\"异常处理和虚拟机这些当年人们认为只有疯子才会想的东西\",{\"1\":{\"467\":1}}],[\"异常是否可以用\",{\"0\":{\"425\":1}}],[\"异常\",{\"0\":{\"288\":1},\"1\":{\"687\":1}}],[\"快很多\",{\"1\":{\"499\":1}}],[\"快\",{\"1\":{\"499\":7}}],[\"快速编译\",{\"1\":{\"472\":1,\"479\":1}}],[\"快速写出来正确的代码往往是更重要的\",{\"1\":{\"461\":1}}],[\"快速\",{\"1\":{\"455\":1}}],[\"快速的编译时间\",{\"1\":{\"320\":1}}],[\"慢\",{\"1\":{\"499\":1}}],[\"枯燥无味的修改工作\",{\"1\":{\"498\":1}}],[\"浪费大量宝贵的开发时间\",{\"1\":{\"496\":1}}],[\"抽象地说\",{\"1\":{\"869\":1}}],[\"抽象数据类型\",{\"1\":{\"639\":1}}],[\"抽象语法树视图和项目管理\",{\"1\":{\"493\":1}}],[\"抽象语法树视图\",{\"1\":{\"493\":1}}],[\"抽象类不能被用于实例化对象\",{\"1\":{\"392\":1}}],[\"务必事先配置好\",{\"1\":{\"491\":1}}],[\"吧\",{\"1\":{\"491\":1}}],[\"针对已签名\",{\"1\":{\"857\":1}}],[\"针对这种需求\",{\"1\":{\"548\":1}}],[\"针对从字符串类型转换为数字类型\",{\"1\":{\"545\":1}}],[\"针对从数字类型转换到字符串\",{\"1\":{\"545\":1}}],[\"针对一些特定的项目有项目模板\",{\"1\":{\"490\":1}}],[\"针对包的目录搜索\",{\"1\":{\"481\":1}}],[\"逐过程执行标识库中代码的能力\",{\"1\":{\"490\":1}}],[\"逐行比较\",{\"1\":{\"217\":1}}],[\"集\",{\"1\":{\"676\":1}}],[\"集合\",{\"1\":{\"557\":1,\"578\":1}}],[\"集成的一个特殊名称用于引用\",{\"1\":{\"501\":1}}],[\"集成开发环境\",{\"1\":{\"492\":1}}],[\"集成开发环境与其它工具\",{\"0\":{\"489\":1}}],[\"集成\",{\"1\":{\"490\":1}}],[\"集成像\",{\"1\":{\"490\":1}}],[\"集群部署\",{\"0\":{\"789\":1}}],[\"集群不同的数据库实例上执行\",{\"1\":{\"251\":1}}],[\"集群\",{\"0\":{\"259\":1},\"1\":{\"251\":1}}],[\"嵌入到声明中\",{\"1\":{\"861\":1}}],[\"嵌入到了每一个可执行文件当中\",{\"1\":{\"487\":1}}],[\"嵌套\",{\"1\":{\"850\":2}}],[\"嵌套了多个匿名结构体\",{\"1\":{\"338\":1}}],[\"嵌套了另一个有名的结构体\",{\"1\":{\"338\":1}}],[\"嵌套了另一个匿名结构体\",{\"1\":{\"338\":1}}],[\"资源的一种行为\",{\"1\":{\"487\":1}}],[\"资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上\",{\"1\":{\"240\":1}}],[\"拥有相同的元素\",{\"1\":{\"585\":1}}],[\"拥有更多与\",{\"1\":{\"531\":1}}],[\"拥有以下复数类型\",{\"1\":{\"524\":1}}],[\"拥有非常多的特性以及通过\",{\"1\":{\"491\":1}}],[\"拥有对包\",{\"1\":{\"490\":1}}],[\"拥有断点\",{\"1\":{\"490\":1}}],[\"拥有较好的项目文件纵览和导航能力\",{\"1\":{\"490\":1}}],[\"拥有简单却高效的标记\",{\"1\":{\"487\":1}}],[\"拥有了像脚本语言和动态语言那样的高效开发的能力\",{\"1\":{\"473\":1}}],[\"型整数\",{\"1\":{\"626\":1}}],[\"型的字符串提供特殊的功能\",{\"1\":{\"614\":1}}],[\"型\",{\"1\":{\"545\":2}}],[\"型转换为\",{\"1\":{\"523\":1}}],[\"型是计算最快的一种类型\",{\"1\":{\"523\":1}}],[\"型树莓派上编译\",{\"1\":{\"483\":1}}],[\"型触发器中\",{\"1\":{\"166\":3,\"202\":3}}],[\"汇编文件使用后缀名\",{\"1\":{\"481\":1}}],[\"汇总\",{\"0\":{\"150\":1,\"183\":1}}],[\"词法分析程序是\",{\"1\":{\"481\":1}}],[\"禁止使用\",{\"1\":{\"481\":1}}],[\"详解\",{\"0\":{\"849\":1}}],[\"详情查看第\",{\"1\":{\"624\":1}}],[\"详情参见\",{\"1\":{\"523\":1}}],[\"详见下一节中的示例\",{\"1\":{\"573\":1}}],[\"详见之后的并行赋值\",{\"1\":{\"509\":1}}],[\"详见引用\",{\"1\":{\"499\":5}}],[\"详见\",{\"1\":{\"482\":1,\"568\":2}}],[\"详见第\",{\"1\":{\"551\":2,\"557\":1,\"558\":1,\"567\":3,\"569\":4,\"570\":1,\"571\":2,\"573\":4,\"574\":1,\"577\":3,\"580\":1,\"605\":3,\"611\":2,\"628\":1,\"629\":3,\"631\":2}}],[\"详见第2\",{\"1\":{\"481\":1}}],[\"详见第3\",{\"1\":{\"481\":1}}],[\"详细请参考第\",{\"1\":{\"662\":1}}],[\"详细参考\",{\"1\":{\"361\":1,\"376\":1}}],[\"详细程度\",{\"1\":{\"317\":1}}],[\"详细内容浏览官方文档\",{\"1\":{\"52\":1}}],[\"状态\",{\"1\":{\"481\":1}}],[\"机器上的所有进程\",{\"1\":{\"607\":1}}],[\"机器代码\",{\"1\":{\"481\":1}}],[\"机制和闭包可以得到一个我们马上要讨论的更加优雅的模式\",{\"1\":{\"689\":1}}],[\"机制的使用太泛滥了\",{\"1\":{\"687\":1}}],[\"机制提供了一种方式\",{\"1\":{\"648\":1}}],[\"机制\",{\"1\":{\"303\":1,\"409\":2,\"411\":2,\"687\":1,\"689\":1}}],[\"产生错误的函数会返回两个变量\",{\"1\":{\"687\":1}}],[\"产生的输出\",{\"1\":{\"660\":1}}],[\"产生更好的本地代码\",{\"1\":{\"481\":1}}],[\"产生并发不一致性问题主要原因是破坏了事务的隔离性\",{\"1\":{\"238\":1}}],[\"位可以这么做\",{\"1\":{\"592\":1}}],[\"位置的元素\",{\"1\":{\"601\":1}}],[\"位置的子字符串\",{\"1\":{\"596\":2}}],[\"位置\",{\"1\":{\"580\":1}}],[\"位数字的性能对比\",{\"1\":{\"577\":1}}],[\"位的值\",{\"1\":{\"563\":1}}],[\"位或者\",{\"1\":{\"563\":1}}],[\"位机器上占\",{\"1\":{\"605\":2}}],[\"位机器上占用\",{\"1\":{\"547\":2}}],[\"位机上消耗的内存约为\",{\"1\":{\"438\":1}}],[\"位系统\",{\"1\":{\"545\":2}}],[\"位浮点型的数字转换为字符串\",{\"1\":{\"545\":1}}],[\"位右移\",{\"1\":{\"525\":1}}],[\"位左移常见实现存储单位的用例\",{\"1\":{\"525\":1}}],[\"位左移\",{\"1\":{\"525\":1}}],[\"位清除\",{\"1\":{\"525\":1}}],[\"位实数和虚数\",{\"1\":{\"524\":2}}],[\"位运算只能用于整数类型的变量\",{\"1\":{\"525\":1}}],[\"位运算\",{\"0\":{\"525\":1},\"1\":{\"513\":1}}],[\"位\",{\"1\":{\"506\":1,\"516\":2,\"523\":5,\"525\":2,\"571\":1,\"626\":1}}],[\"位版本的\",{\"1\":{\"485\":1}}],[\"位处理器\",{\"1\":{\"484\":1}}],[\"位操作系统上\",{\"1\":{\"523\":2}}],[\"位操作系统\",{\"1\":{\"481\":1,\"485\":1}}],[\"位操作系统或\",{\"1\":{\"481\":1}}],[\"免费开源\",{\"1\":{\"479\":1}}],[\"规范为第三方应用程序提供了一个通用框架\",{\"1\":{\"866\":1}}],[\"规范支持的其他可选算法包括\",{\"1\":{\"858\":1}}],[\"规范中称为\",{\"1\":{\"858\":3}}],[\"规范中定义的某些声明也可能出现在其中\",{\"1\":{\"851\":1}}],[\"规范要求所有符合该规范的实现都必须支持一种算法\",{\"1\":{\"858\":1}}],[\"规范不要求在编码前对\",{\"1\":{\"855\":2}}],[\"规范还允许实现将重复声明的\",{\"1\":{\"853\":1}}],[\"规范\",{\"1\":{\"852\":1,\"858\":1,\"869\":1}}],[\"规范规定\",{\"1\":{\"851\":1,\"852\":1}}],[\"规范定义了第三种序列化格式\",{\"1\":{\"849\":1}}],[\"规范统一\",{\"1\":{\"479\":1}}],[\"规则\",{\"1\":{\"649\":2}}],[\"规则识别\",{\"1\":{\"557\":1}}],[\"规则的格式\",{\"1\":{\"496\":1}}],[\"规定类型可以做什么\",{\"1\":{\"662\":1}}],[\"规定只能读取已经提交的快照\",{\"1\":{\"234\":1}}],[\"规定没有给列赋值时的默认值\",{\"1\":{\"112\":1}}],[\"规定了7个官方字段\",{\"1\":{\"35\":1}}],[\"易于部署\",{\"1\":{\"479\":1}}],[\"易于使用\",{\"1\":{\"479\":1}}],[\"易于学习\",{\"1\":{\"479\":1}}],[\"易于开发\",{\"1\":{\"472\":1}}],[\"许多开发者说相比于类继承\",{\"1\":{\"659\":1}}],[\"许多问题都可以使用优雅的递归来解决\",{\"1\":{\"570\":1}}],[\"许多能够在大多数面向对象语言中使用的特性\",{\"1\":{\"477\":1}}],[\"许多公司的项目都没有展示在这个页面\",{\"1\":{\"476\":1}}],[\"努力的成果\",{\"1\":{\"476\":1}}],[\"浏览器中内置了一款\",{\"1\":{\"476\":1}}],[\"浏览器发起请求获取用户资料\",{\"1\":{\"30\":1}}],[\"浏览器发起请求登陆\",{\"1\":{\"30\":1}}],[\"案例\",{\"1\":{\"476\":1}}],[\"世界\",{\"1\":{\"508\":2}}],[\"世界而使用\",{\"1\":{\"475\":1}}],[\"世纪的语言\",{\"1\":{\"693\":1}}],[\"世纪的\",{\"1\":{\"467\":1,\"471\":1}}],[\"众所周知\",{\"1\":{\"474\":1}}],[\"干净\",{\"1\":{\"474\":1,\"512\":1}}],[\"动态客户端注册\",{\"1\":{\"866\":1}}],[\"动态方法调用\",{\"0\":{\"672\":1}}],[\"动态地\",{\"1\":{\"668\":1}}],[\"动态类型是延迟绑定的\",{\"1\":{\"672\":1}}],[\"动态类型\",{\"1\":{\"667\":1}}],[\"动态\",{\"1\":{\"662\":1}}],[\"动态语言将快速编译作为自身的一大亮点\",{\"1\":{\"473\":1}}],[\"动物\",{\"1\":{\"315\":2}}],[\"达到完美平衡\",{\"1\":{\"473\":1}}],[\"究竟是使用执行速度快但是编译速度并不理想的语言\",{\"1\":{\"472\":1}}],[\"软件开发领域不被认为发展得足够快或者比硬件发展得更加成功\",{\"1\":{\"472\":1}}],[\"图形数据\",{\"1\":{\"662\":1}}],[\"图形解码器\",{\"1\":{\"662\":1}}],[\"图\",{\"1\":{\"471\":1,\"492\":1,\"493\":1}}],[\"图中bucket省略了value区域\",{\"1\":{\"372\":1}}],[\"系列于\",{\"1\":{\"483\":1}}],[\"系列的产品\",{\"1\":{\"476\":1}}],[\"系语言的影响\",{\"1\":{\"471\":1}}],[\"系\",{\"1\":{\"471\":1}}],[\"系统用户级别\",{\"1\":{\"811\":1}}],[\"系统时间\",{\"1\":{\"690\":1}}],[\"系统自动赋予它该类型的零值\",{\"1\":{\"515\":1}}],[\"系统非常相似\",{\"1\":{\"484\":1}}],[\"系统下使用\",{\"1\":{\"502\":1}}],[\"系统下使用到的\",{\"1\":{\"484\":1}}],[\"系统下的一键安装包\",{\"1\":{\"485\":1}}],[\"系统下的一键安装包或源代码自行编译\",{\"1\":{\"484\":1}}],[\"系统下一般通过文件\",{\"1\":{\"483\":1}}],[\"系统下工作\",{\"1\":{\"481\":1}}],[\"系统的计算机上开发运行\",{\"1\":{\"475\":1}}],[\"系统的并发程度就越高\",{\"1\":{\"231\":1}}],[\"系统底层支持\",{\"1\":{\"412\":1}}],[\"系统线程\",{\"1\":{\"410\":1}}],[\"系统调用结束时\",{\"1\":{\"409\":1}}],[\"系统\",{\"1\":{\"331\":1,\"547\":1}}],[\"系统层的库非常实用\",{\"1\":{\"320\":1}}],[\"系统编程和网络编程\",{\"1\":{\"320\":1}}],[\"系统会自动采用key\",{\"1\":{\"303\":1}}],[\"系统会自动采用占用空间更小的二级索引来进行统计\",{\"1\":{\"303\":1}}],[\"系统会识别用户\",{\"1\":{\"61\":1}}],[\"系统架构问题\",{\"1\":{\"259\":1}}],[\"系统开销就越大\",{\"1\":{\"231\":1}}],[\"系统上安装\",{\"1\":{\"484\":1,\"485\":2}}],[\"系统上不会直接使用\",{\"1\":{\"51\":1}}],[\"系统上可以使用这套脚本安装\",{\"1\":{\"51\":1}}],[\"影响\",{\"0\":{\"471\":1}}],[\"频道\",{\"1\":{\"469\":1}}],[\"频繁作为\",{\"1\":{\"219\":1}}],[\"频繁写操作\",{\"1\":{\"211\":1}}],[\"吃你自己的狗食\",{\"1\":{\"469\":1}}],[\"谷歌让通过使用\",{\"1\":{\"638\":1}}],[\"谷歌将这项技术提供给其他开发者\",{\"1\":{\"638\":1}}],[\"谷歌\",{\"1\":{\"638\":1}}],[\"谷歌内部项目的代码\",{\"1\":{\"498\":1}}],[\"谷歌邮件列表\",{\"1\":{\"469\":1}}],[\"谷歌开始将\",{\"1\":{\"469\":1}}],[\"谷歌开始抽调员工进入全职开发\",{\"1\":{\"469\":1}}],[\"谷歌投入使用\",{\"1\":{\"469\":1}}],[\"雏形设计\",{\"1\":{\"469\":1}}],[\"宣布为\",{\"1\":{\"469\":1}}],[\"闻名于它的编程语言流行程度排名\",{\"1\":{\"469\":1}}],[\"于\",{\"1\":{\"476\":1}}],[\"于同年\",{\"1\":{\"469\":1}}],[\"于是我们必须写一些\",{\"1\":{\"689\":1}}],[\"于是我能够感觉到\",{\"1\":{\"320\":1}}],[\"于是可以得出一个结论\",{\"1\":{\"647\":1}}],[\"于是\",{\"1\":{\"391\":1}}],[\"平台下使用\",{\"1\":{\"481\":1}}],[\"平台上\",{\"1\":{\"481\":1}}],[\"平台上的版本\",{\"1\":{\"469\":1}}],[\"平台与架构\",{\"0\":{\"481\":1}}],[\"平方根\",{\"1\":{\"149\":1,\"182\":1}}],[\"贝尔实验室\",{\"1\":{\"469\":2}}],[\"虚拟线程\",{\"0\":{\"722\":1}}],[\"虚拟机\",{\"1\":{\"469\":1}}],[\"虚拟角色\",{\"1\":{\"70\":1}}],[\"兼职项目\",{\"1\":{\"469\":1}}],[\"兼容\",{\"1\":{\"467\":1}}],[\"月创下的第\",{\"1\":{\"469\":1}}],[\"月创建了一个\",{\"1\":{\"469\":1}}],[\"月起\",{\"1\":{\"469\":2}}],[\"月\",{\"1\":{\"469\":11,\"476\":2,\"483\":1,\"499\":2,\"692\":1}}],[\"欢迎来到\",{\"1\":{\"467\":1}}],[\"邮件列表里的所有的成员\",{\"1\":{\"467\":1}}],[\"邮箱\",{\"1\":{\"98\":1}}],[\"邮箱地址\",{\"1\":{\"72\":1,\"112\":1}}],[\"尤其是类型的一种能力\",{\"1\":{\"668\":1}}],[\"尤其是要串联的字符串数目特别多的时候\",{\"1\":{\"590\":1}}],[\"尤其是团队的领导者\",{\"1\":{\"467\":1}}],[\"尤其是在对比和基准测试中\",{\"1\":{\"576\":1}}],[\"尤其是在计算机信息时代\",{\"1\":{\"472\":1}}],[\"尤其是在使用\",{\"1\":{\"467\":1}}],[\"尤其是在大型复杂环境中\",{\"1\":{\"74\":1}}],[\"牺牲人们的努力\",{\"1\":{\"467\":1}}],[\"人类可读的ascii编码错误的文本描述\",{\"1\":{\"878\":1}}],[\"人类的参与者\",{\"1\":{\"868\":1}}],[\"人为区分\",{\"1\":{\"504\":1}}],[\"人们曾私下或公开地实施过针对同一问题的特别解决方案\",{\"1\":{\"846\":1}}],[\"人们很难避免人为因素对结果的影响\",{\"1\":{\"499\":1}}],[\"人们越来越需要一门具有严格的\",{\"1\":{\"473\":1}}],[\"人们不再像过往那样认同在\",{\"1\":{\"467\":1}}],[\"人员充足\",{\"1\":{\"252\":1}}],[\"人员的角色和权限级别可能不一致\",{\"1\":{\"75\":1}}],[\"做为参数\",{\"1\":{\"680\":1}}],[\"做准备\",{\"1\":{\"680\":1}}],[\"做法如下\",{\"1\":{\"592\":1}}],[\"做了让\",{\"1\":{\"467\":1}}],[\"做分解\",{\"1\":{\"251\":1}}],[\"令牌的请求\",{\"0\":{\"919\":1}}],[\"令牌响应验证\",{\"0\":{\"885\":1,\"923\":1}}],[\"令牌错误响应的参数定义在oauth\",{\"1\":{\"884\":1}}],[\"令牌错误响应\",{\"0\":{\"884\":1,\"922\":1}}],[\"令牌请求验证\",{\"0\":{\"882\":1,\"920\":1}}],[\"令牌请求\",{\"0\":{\"881\":1}}],[\"令牌端点\",{\"0\":{\"880\":1,\"918\":1}}],[\"令牌有30分钟有效期\",{\"1\":{\"6\":1}}],[\"令\",{\"1\":{\"605\":1}}],[\"令人心旷神怡\",{\"1\":{\"467\":1}}],[\"背后的神奇之处在于\",{\"1\":{\"845\":1}}],[\"背景的开发者\",{\"1\":{\"467\":1}}],[\"背靠谷歌\",{\"1\":{\"320\":1}}],[\"领域众所周知的专家\",{\"1\":{\"467\":1}}],[\"领域用的最多的关系型数据库\",{\"1\":{\"297\":1}}],[\"短小精悍\",{\"1\":{\"467\":1}}],[\"短事务\",{\"1\":{\"243\":1}}],[\"他或她就可以修改信息而不被其他方察觉\",{\"1\":{\"860\":1}}],[\"他们必须通信才会变得更有用\",{\"1\":{\"699\":1}}],[\"他们之间没有通信\",{\"1\":{\"699\":1}}],[\"他们之间是相互独立的\",{\"1\":{\"474\":1}}],[\"他们按照我们期望的顺序打印出了消息\",{\"1\":{\"697\":1}}],[\"他们需要语言\",{\"1\":{\"693\":1}}],[\"他们给\",{\"1\":{\"687\":1}}],[\"他们的类型都是\",{\"1\":{\"678\":1}}],[\"他们的值会和本地机器\",{\"1\":{\"482\":1}}],[\"他们也生成了一个\",{\"1\":{\"638\":1}}],[\"他们都会生成一个包含静态库\",{\"1\":{\"627\":1}}],[\"他们都是仅在\",{\"1\":{\"591\":1}}],[\"他们实现了分段栈增长和\",{\"1\":{\"473\":1}}],[\"他们对系统编程语言\",{\"1\":{\"469\":1}}],[\"他们阐述的例子和说明都非常的完美\",{\"1\":{\"467\":1}}],[\"他们在\",{\"1\":{\"316\":1}}],[\"他完美地诠释了敏捷编程的\",{\"1\":{\"467\":1}}],[\"章详细研究这些算法\",{\"1\":{\"860\":1}}],[\"章将详细解释\",{\"1\":{\"860\":1}}],[\"章将详细介绍这些算法\",{\"1\":{\"858\":1}}],[\"章末尾\",{\"1\":{\"858\":1}}],[\"章对此有详细解释\",{\"1\":{\"849\":1}}],[\"章对其深入了解\",{\"1\":{\"625\":1}}],[\"章所述\",{\"1\":{\"849\":1}}],[\"章中解释\",{\"1\":{\"860\":1}}],[\"章中更加清晰\",{\"1\":{\"858\":1}}],[\"章中介绍了\",{\"1\":{\"858\":1}}],[\"章中进一步探讨实际应用\",{\"1\":{\"846\":1}}],[\"章中提到了\",{\"1\":{\"689\":1}}],[\"章示例\",{\"1\":{\"708\":1}}],[\"章讲的协程\",{\"1\":{\"698\":1}}],[\"章和程序的并发\",{\"1\":{\"693\":1}}],[\"章和第\",{\"1\":{\"573\":1,\"588\":1,\"849\":1}}],[\"章看到网络操作的例子\",{\"1\":{\"687\":1}}],[\"章找到\",{\"1\":{\"687\":1}}],[\"章你将找到一个具体的例子\",{\"1\":{\"682\":1}}],[\"章的后面部分谈到这一点\",{\"1\":{\"857\":1}}],[\"章的例子\",{\"1\":{\"682\":1}}],[\"章的项目\",{\"1\":{\"682\":1}}],[\"章我们会看到很多在实战中使用它们的例子\",{\"1\":{\"662\":1}}],[\"章分别说明\",{\"1\":{\"638\":1}}],[\"章节4\",{\"1\":{\"881\":1}}],[\"章节中给出\",{\"1\":{\"627\":1}}],[\"章节\",{\"1\":{\"623\":1,\"631\":1,\"667\":1,\"682\":2}}],[\"章string\",{\"1\":{\"553\":1}}],[\"章可以作为你在开发时的一个参考手册\",{\"1\":{\"467\":1}}],[\"章\",{\"0\":{\"468\":1,\"480\":1,\"489\":1,\"503\":1,\"548\":1,\"560\":1,\"578\":1,\"603\":1,\"613\":1,\"639\":1,\"662\":1,\"677\":1,\"687\":1,\"693\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"714\":1,\"715\":1,\"716\":1},\"1\":{\"467\":17,\"476\":1,\"477\":2,\"497\":1,\"498\":1,\"506\":1,\"509\":1,\"515\":1,\"516\":5,\"521\":3,\"527\":1,\"530\":1,\"532\":1,\"550\":1,\"557\":1,\"558\":1,\"559\":1,\"562\":1,\"567\":2,\"577\":2,\"580\":4,\"588\":2,\"605\":1,\"623\":1,\"627\":1,\"638\":2,\"640\":1,\"643\":1,\"651\":1,\"658\":1,\"662\":1,\"682\":1,\"859\":1}}],[\"书写一个工厂函数而不是针对每种情况都书写一个函数\",{\"1\":{\"574\":1}}],[\"书中所有的代码都在\",{\"1\":{\"467\":1}}],[\"书中会使用大家所熟知的缩写\",{\"1\":{\"467\":1}}],[\"书籍\",{\"1\":{\"467\":1}}],[\"迷人的和充满希望的编程语言的开发者量身定做的\",{\"1\":{\"467\":1}}],[\"尽可能小\",{\"1\":{\"852\":1}}],[\"尽管特定声明有明确的含义\",{\"1\":{\"851\":1}}],[\"尽管更复杂的系统仍在使用\",{\"1\":{\"844\":1}}],[\"尽管消费者协程仍然可能阻塞\",{\"1\":{\"709\":1}}],[\"尽管它们和文件不同\",{\"1\":{\"709\":1}}],[\"尽管它并没有通过\",{\"1\":{\"694\":1}}],[\"尽管可能导致危险\",{\"1\":{\"703\":1}}],[\"尽管这看上去是非常严格的约束\",{\"1\":{\"701\":1}}],[\"尽管这样做几乎没有必要\",{\"1\":{\"697\":1}}],[\"尽管这种做法也存在一些争论\",{\"1\":{\"496\":1}}],[\"尽管有些人并不赞成\",{\"1\":{\"549\":1}}],[\"尽管变量的标识符必须是唯一的\",{\"1\":{\"515\":1}}],[\"尽管虚拟机的性能已经有了很大的提升\",{\"1\":{\"499\":1}}],[\"尽管集成开发环境本身就是非常复杂的\",{\"1\":{\"490\":1}}],[\"尽管\",{\"1\":{\"487\":1,\"682\":1}}],[\"尽管在接口的使用方面\",{\"1\":{\"477\":1}}],[\"尽管垃圾回收并不容易实现\",{\"1\":{\"473\":1}}],[\"尽管为了能够让目前主流的开发者们能够对\",{\"1\":{\"471\":1}}],[\"尽管硬件在过去的几十年中有了飞速的发展\",{\"1\":{\"467\":1}}],[\"尽量使用命名返回值\",{\"1\":{\"564\":1}}],[\"尽量在数据表上建立二级索引\",{\"1\":{\"303\":1}}],[\"尽量避免\",{\"1\":{\"282\":1}}],[\"尽量避免使用\",{\"1\":{\"265\":1}}],[\"尽量的扩展索引\",{\"1\":{\"219\":1}}],[\"情况更是不容乐观\",{\"1\":{\"467\":1}}],[\"情况也就不一样\",{\"1\":{\"329\":1}}],[\"诸多的学者和谷歌的开发者们在公司内部的软件开发过程中开始经历大量的挫折\",{\"1\":{\"467\":1}}],[\"享受更多的乐趣\",{\"1\":{\"467\":1}}],[\"诊断等服务治理模块\",{\"1\":{\"462\":1}}],[\"日本語\",{\"1\":{\"553\":1,\"557\":2}}],[\"日之前产生\",{\"1\":{\"499\":1}}],[\"日发布\",{\"1\":{\"476\":1,\"483\":1}}],[\"日被\",{\"1\":{\"469\":1}}],[\"日公布了\",{\"1\":{\"469\":1}}],[\"日\",{\"1\":{\"469\":7,\"476\":1,\"557\":2}}],[\"日开始作为谷歌公司\",{\"1\":{\"469\":1}}],[\"日志记录和安全最佳实践都是生产就绪代码所必需的\",{\"1\":{\"847\":1}}],[\"日志对象\",{\"1\":{\"801\":1}}],[\"日志和错误报告\",{\"1\":{\"689\":1}}],[\"日志\",{\"1\":{\"462\":1}}],[\"日期字符串转换成时间戳\",{\"0\":{\"620\":1},\"1\":{\"620\":1}}],[\"日期函数\",{\"0\":{\"615\":1}}],[\"日期和时间的基本操作\",{\"1\":{\"614\":1}}],[\"日期和时间处理\",{\"0\":{\"148\":1,\"181\":1}}],[\"日期格式\",{\"1\":{\"148\":1,\"181\":1}}],[\"链表\",{\"1\":{\"640\":1}}],[\"链表中的第一个元素叫\",{\"1\":{\"640\":1}}],[\"链表中的\",{\"1\":{\"640\":1}}],[\"链路跟踪\",{\"1\":{\"462\":1}}],[\"链接器源码位于\",{\"1\":{\"447\":1}}],[\"链接器\",{\"1\":{\"446\":1,\"481\":1}}],[\"监控\",{\"1\":{\"462\":1}}],[\"监听8000端口\",{\"1\":{\"10\":3,\"12\":2}}],[\"熔断\",{\"1\":{\"462\":1}}],[\"双重检查\",{\"1\":{\"803\":1}}],[\"双目运算符\",{\"1\":{\"700\":1}}],[\"双链表\",{\"1\":{\"614\":1}}],[\"双击错误提示可以跳转到发生错误的位置\",{\"1\":{\"490\":1}}],[\"双向\",{\"1\":{\"462\":2}}],[\"双引号\",{\"0\":{\"333\":1},\"1\":{\"333\":1}}],[\"间接参数\",{\"1\":{\"726\":1}}],[\"间按需切换能力\",{\"1\":{\"461\":1}}],[\"间隙锁\",{\"1\":{\"232\":1}}],[\"持续\",{\"1\":{\"701\":1}}],[\"持续打磨框架\",{\"1\":{\"461\":1}}],[\"持久性\",{\"1\":{\"237\":1}}],[\"持久层万一挂了\",{\"1\":{\"28\":1}}],[\"极简的\",{\"1\":{\"459\":1}}],[\"极大的影响了软件开发的高效性\",{\"1\":{\"467\":1}}],[\"极大程度缓解了锁的争用\",{\"1\":{\"261\":1}}],[\"极大提到了区间查询效率\",{\"1\":{\"215\":1}}],[\"极大地方便了权限的管理\",{\"1\":{\"65\":1}}],[\"李文周的博客\",{\"0\":{\"457\":1}}],[\"└──\",{\"1\":{\"456\":8}}],[\"│\",{\"1\":{\"456\":14}}],[\"├──\",{\"1\":{\"456\":8}}],[\"渲染提供了易于使用的\",{\"1\":{\"455\":1}}],[\"验证安装\",{\"0\":{\"983\":1}}],[\"验证安装版本\",{\"1\":{\"483\":1}}],[\"验证基于jwt的请求\",{\"0\":{\"955\":1}}],[\"验证所有其他id令牌的签名\",{\"1\":{\"887\":1}}],[\"验证所使用的授权码是在响应openid连接身份验证请求时发出的\",{\"1\":{\"882\":1}}],[\"验证授权码以前没有使用过\",{\"1\":{\"882\":1}}],[\"验证授权码是否有效\",{\"1\":{\"882\":1}}],[\"验证响应验证\",{\"0\":{\"879\":1,\"899\":1,\"913\":1}}],[\"验证是否存在scope参数并包含openid范围值\",{\"1\":{\"874\":1}}],[\"验证是否存在所需的claims以及是否正确使用了每项claims\",{\"1\":{\"855\":1}}],[\"验证请求验证\",{\"0\":{\"874\":1,\"893\":1,\"907\":1}}],[\"验证了以上理论\",{\"1\":{\"701\":1}}],[\"验证\",{\"0\":{\"887\":1},\"1\":{\"455\":1,\"782\":1,\"868\":2}}],[\"验明正身\",{\"1\":{\"30\":1}}],[\"框架则稍微差点\",{\"1\":{\"499\":1}}],[\"框架项目正在如火如荼地进行中\",{\"1\":{\"467\":1}}],[\"框架并不是一个简单的任务\",{\"1\":{\"467\":1}}],[\"框架特点\",{\"1\":{\"462\":1}}],[\"框架原生提供\",{\"1\":{\"461\":1}}],[\"框架的扩展性也会大很多\",{\"1\":{\"461\":1}}],[\"框架\",{\"0\":{\"453\":1},\"1\":{\"459\":1,\"461\":1,\"462\":1,\"467\":1}}],[\"路径和查询参数组件\",{\"1\":{\"868\":1}}],[\"路径是指当前目录的相对路径\",{\"1\":{\"627\":1}}],[\"路径下寻找源码文件\",{\"1\":{\"449\":1}}],[\"路径下\",{\"1\":{\"447\":2}}],[\"路径上\",{\"1\":{\"446\":1}}],[\"路由组\",{\"1\":{\"455\":1}}],[\"路由\",{\"1\":{\"257\":1}}],[\"占用更少的内存\",{\"1\":{\"682\":1}}],[\"占用cpu容量的25\",{\"1\":{\"445\":1}}],[\"占有\",{\"1\":{\"553\":1}}],[\"占满整个事务日志\",{\"1\":{\"267\":1}}],[\"骚操作\",{\"1\":{\"445\":1}}],[\"真实世界中\",{\"0\":{\"716\":1}}],[\"真正开始编译安装\",{\"1\":{\"483\":1}}],[\"真正解放了程序员的双手\",{\"1\":{\"445\":1}}],[\"真可谓是\",{\"1\":{\"467\":1}}],[\"真离谱\",{\"1\":{\"4\":2}}],[\"堆上的变量少了\",{\"1\":{\"445\":1}}],[\"堆适合不可预知大小的内存分配\",{\"1\":{\"445\":1}}],[\"堆和栈相比\",{\"1\":{\"445\":1}}],[\"堆和栈的区别对程序员\",{\"1\":{\"445\":1}}],[\"堆不像栈可以自动清理\",{\"1\":{\"445\":1}}],[\"堆空间启用写屏障\",{\"1\":{\"429\":1}}],[\"堆空间启动写屏障\",{\"1\":{\"429\":1}}],[\"知道变量的存储位置确实和效率编程有关系\",{\"1\":{\"442\":1}}],[\"供调用者使用\",{\"1\":{\"561\":1}}],[\"供现场申请使用\",{\"1\":{\"440\":1}}],[\"供选用\",{\"1\":{\"35\":1}}],[\"区分大小写的ascii字符串值列表\",{\"1\":{\"873\":1}}],[\"区域按照页划分成一个个小块\",{\"1\":{\"440\":1}}],[\"区域\",{\"1\":{\"440\":1}}],[\"区别在于\",{\"1\":{\"383\":1}}],[\"区别是什么\",{\"0\":{\"361\":1}}],[\"区别于acl模型\",{\"1\":{\"65\":1}}],[\"区别\",{\"1\":{\"29\":1,\"353\":1}}],[\"跑到了堆上\",{\"1\":{\"439\":1}}],[\"排外锁\",{\"1\":{\"707\":1}}],[\"排查方式\",{\"1\":{\"438\":1}}],[\"排序函数可以用于一个浮点型数组\",{\"1\":{\"662\":1}}],[\"排序函数的算法只会使用到这三个方法\",{\"1\":{\"662\":1}}],[\"排序字符串元素\",{\"1\":{\"600\":1}}],[\"排序\",{\"0\":{\"134\":1},\"1\":{\"305\":1,\"611\":1,\"658\":1,\"673\":1}}],[\"万整数的总和的匿名函数\",{\"1\":{\"573\":1}}],[\"万\",{\"1\":{\"438\":1}}],[\"万条\",{\"1\":{\"247\":2}}],[\"万条数据\",{\"1\":{\"247\":1}}],[\"万条记录\",{\"1\":{\"246\":1}}],[\"万条以内\",{\"1\":{\"72\":1}}],[\"掉\",{\"1\":{\"438\":1}}],[\"泄漏\",{\"1\":{\"438\":1}}],[\"谈谈内存泄露\",{\"0\":{\"438\":1}}],[\"逃逸分析这种\",{\"1\":{\"445\":1}}],[\"逃逸分析是怎么进行的\",{\"0\":{\"445\":1}}],[\"逃逸分析\",{\"0\":{\"436\":1}}],[\"初级必问\",{\"1\":{\"432\":1}}],[\"初始化文件\",{\"1\":{\"686\":1}}],[\"初始化方式\",{\"1\":{\"640\":1}}],[\"初始化方式不一样\",{\"1\":{\"353\":1}}],[\"初始化一个结构体实例\",{\"1\":{\"640\":1}}],[\"初始化和\",{\"0\":{\"604\":1}}],[\"初始化好\",{\"1\":{\"590\":1}}],[\"初始化为\",{\"1\":{\"588\":1}}],[\"初始化得到的实际上是切片slice\",{\"1\":{\"581\":2}}],[\"初始化数组项\",{\"1\":{\"580\":1}}],[\"初始化语句\",{\"1\":{\"553\":1}}],[\"初始化总是以单线程并且按照包的依赖关系顺序执行\",{\"1\":{\"519\":1}}],[\"初始化\",{\"1\":{\"515\":1,\"627\":1,\"640\":1,\"642\":1}}],[\"初始化m0\",{\"1\":{\"415\":1}}],[\"让你可以很小的内存占用就可以处理大量的任务\",{\"1\":{\"694\":1}}],[\"让程序可以从\",{\"1\":{\"689\":1}}],[\"让程序操作任意类型的变量\",{\"1\":{\"623\":1}}],[\"让其具有可读性\",{\"1\":{\"682\":1}}],[\"让我们先在\",{\"1\":{\"859\":1}}],[\"让我们来看看下面这个程序\",{\"1\":{\"678\":1}}],[\"让我们给空接口定一个别名类型\",{\"1\":{\"664\":1}}],[\"让我的工作变得更加高效\",{\"1\":{\"467\":1}}],[\"让它实现\",{\"1\":{\"662\":1}}],[\"让不同的文件系统和操作系统对象表现一致\",{\"1\":{\"614\":1}}],[\"让所有的东西都是显式的\",{\"1\":{\"475\":1}}],[\"让他们可以专注于业务\",{\"1\":{\"445\":1}}],[\"让堆和栈对程序员保持透明\",{\"1\":{\"445\":1}}],[\"让\",{\"1\":{\"438\":1,\"662\":3}}],[\"让出\",{\"1\":{\"431\":1}}],[\"让用户决定如何去做\",{\"1\":{\"419\":1}}],[\"让用户以一种更轻松的方式处理并发一致性问题\",{\"1\":{\"238\":1}}],[\"扫描参数列表\",{\"1\":{\"682\":1}}],[\"扫描来自标准输入的文本\",{\"1\":{\"677\":1}}],[\"扫描未扫除的堆跨度\",{\"1\":{\"431\":1}}],[\"扫描的行数\",{\"1\":{\"264\":1}}],[\"含有数组切片的结构体不能作为\",{\"1\":{\"605\":1}}],[\"含扫描终止\",{\"1\":{\"431\":1}}],[\"含return返回机制\",{\"1\":{\"325\":1}}],[\"周期的时间超过一定时间时\",{\"1\":{\"432\":1}}],[\"周期的扫描\",{\"1\":{\"431\":1}}],[\"周期\",{\"1\":{\"431\":1}}],[\"周期前\",{\"1\":{\"431\":1}}],[\"周等\",{\"1\":{\"148\":1,\"181\":1}}],[\"虾皮\",{\"1\":{\"431\":1}}],[\"虾皮还问了个开放性的题目\",{\"1\":{\"429\":1}}],[\"均会返回签名为\",{\"1\":{\"574\":1}}],[\"均是用于分配内存\",{\"1\":{\"569\":1}}],[\"均已以\",{\"1\":{\"508\":1}}],[\"均为黑色\",{\"1\":{\"429\":1}}],[\"均插入到链表的头部\",{\"1\":{\"332\":1}}],[\"期间\",{\"1\":{\"429\":1}}],[\"清理或运行我们建立的程序或项目\",{\"1\":{\"490\":1}}],[\"清除回收器\",{\"1\":{\"487\":1}}],[\"清除算法\",{\"1\":{\"473\":1}}],[\"清除白色\",{\"1\":{\"429\":1}}],[\"清空表中的数据\",{\"0\":{\"121\":1}}],[\"步\",{\"1\":{\"429\":1}}],[\"遍历数组的方法自然就是使用\",{\"1\":{\"580\":1}}],[\"遍历之后的灰色标记成黑色\",{\"1\":{\"429\":1}}],[\"遍历灰色节点\",{\"1\":{\"429\":1}}],[\"遍历一次根节点\",{\"1\":{\"429\":1}}],[\"遍历中\",{\"1\":{\"324\":1}}],[\"停止程序\",{\"1\":{\"702\":1}}],[\"停止终止过程进而恢复正常执行\",{\"1\":{\"689\":1}}],[\"停止\",{\"1\":{\"429\":2}}],[\"细分常见的三个问题\",{\"1\":{\"429\":1}}],[\"细节请看分库分表章节\",{\"1\":{\"281\":1}}],[\"细节请看索引和约束章节\",{\"1\":{\"281\":1}}],[\"十之八九你会使用\",{\"1\":{\"660\":1}}],[\"十多年来也没有出现一门与时代相符的主流系统编程语言\",{\"1\":{\"472\":1}}],[\"十三\",{\"0\":{\"453\":1}}],[\"十二\",{\"0\":{\"444\":1}}],[\"十一\",{\"0\":{\"433\":1}}],[\"十\",{\"0\":{\"428\":1}}],[\"十分难以维护\",{\"1\":{\"164\":1,\"200\":1}}],[\"省的造轮子\",{\"1\":{\"426\":1}}],[\"百度\",{\"0\":{\"431\":1},\"1\":{\"426\":1}}],[\"池\",{\"0\":{\"426\":1}}],[\"退出此函数\",{\"1\":{\"425\":1}}],[\"退出当前终端并重新登录\",{\"1\":{\"51\":1}}],[\"问我代码中add\",{\"1\":{\"423\":1}}],[\"问题的原因是\",{\"1\":{\"669\":1}}],[\"问题的类似\",{\"1\":{\"256\":1}}],[\"问题\",{\"1\":{\"52\":1,\"249\":1,\"427\":1,\"523\":1,\"547\":1,\"551\":1,\"554\":1,\"557\":1,\"559\":1,\"562\":1,\"563\":1,\"580\":1,\"585\":1,\"588\":2,\"591\":2,\"592\":1,\"609\":1,\"627\":1,\"659\":2}}],[\"问题分析\",{\"2\":{\"14\":1,\"23\":1,\"58\":1}}],[\"问题原因\",{\"0\":{\"11\":1}}],[\"问题代码\",{\"0\":{\"10\":1}}],[\"手动触发的\",{\"1\":{\"432\":1}}],[\"手写代码\",{\"1\":{\"426\":1}}],[\"手写代码部分时\",{\"1\":{\"423\":1}}],[\"手机号码\",{\"1\":{\"72\":1}}],[\"啰嗦一句\",{\"1\":{\"423\":1}}],[\"减去一个计数\",{\"1\":{\"423\":1}}],[\"减少对象分配\",{\"1\":{\"443\":1}}],[\"减少stw的时间\",{\"1\":{\"429\":1}}],[\"减少空转\",{\"1\":{\"410\":1}}],[\"减少冗余列\",{\"1\":{\"283\":1}}],[\"减少锁竞争\",{\"1\":{\"268\":1}}],[\"减少服务器端扫描的行数\",{\"1\":{\"265\":1}}],[\"减少请求的数据量\",{\"1\":{\"265\":1}}],[\"减少了对其它插件依赖\",{\"1\":{\"320\":1}}],[\"减少了用户的重复授权\",{\"1\":{\"73\":1}}],[\"减少了权限的重复分配\",{\"1\":{\"73\":1}}],[\"九\",{\"0\":{\"422\":1}}],[\"次的频率阻塞\",{\"1\":{\"692\":1}}],[\"次然后使用\",{\"1\":{\"554\":1}}],[\"次字符串\",{\"1\":{\"539\":1}}],[\"次方\",{\"1\":{\"525\":2,\"697\":1}}],[\"次\",{\"1\":{\"421\":1,\"438\":1,\"680\":1,\"689\":1}}],[\"了这些方法\",{\"1\":{\"655\":1}}],[\"了这些类型的\",{\"1\":{\"382\":1}}],[\"了解有关一般日期\",{\"1\":{\"869\":1}}],[\"了解更多\",{\"1\":{\"549\":1}}],[\"了解切片\",{\"1\":{\"496\":1}}],[\"了解和使用这些已经被广泛认同的规范应该是你学习阶段最重要的实践\",{\"1\":{\"467\":1}}],[\"了\",{\"1\":{\"420\":2,\"445\":1,\"708\":1}}],[\"饥饿模式\",{\"1\":{\"420\":1}}],[\"毫秒\",{\"1\":{\"420\":2}}],[\"继续看示例\",{\"1\":{\"709\":1}}],[\"继续前面的例子\",{\"1\":{\"669\":1}}],[\"继续练习\",{\"1\":{\"663\":1}}],[\"继续\",{\"1\":{\"662\":1}}],[\"继续扩展程序\",{\"1\":{\"662\":1}}],[\"继续计算会导致溢出错误\",{\"1\":{\"571\":1}}],[\"继续执行下一个文件\",{\"1\":{\"689\":1}}],[\"继续执行\",{\"1\":{\"550\":1}}],[\"继续占有cpu\",{\"1\":{\"420\":1}}],[\"继承和多态\",{\"1\":{\"676\":1}}],[\"继承有两个好处\",{\"1\":{\"659\":1}}],[\"继承\",{\"0\":{\"315\":1,\"773\":1},\"1\":{\"310\":1,\"315\":1,\"316\":1,\"391\":1,\"648\":1,\"655\":1,\"676\":1}}],[\"外网\",{\"1\":{\"809\":1}}],[\"外层名字会覆盖内层名字\",{\"1\":{\"649\":1}}],[\"外层结构体通过\",{\"1\":{\"648\":1}}],[\"外可以以相对路径的形式执行\",{\"1\":{\"506\":1}}],[\"外部函数接口\",{\"1\":{\"501\":1}}],[\"外界是看不到原子操作的中间状态\",{\"1\":{\"418\":1}}],[\"外连接分为左外连接\",{\"1\":{\"141\":1,\"174\":1}}],[\"外连接返回一个表中的所有行\",{\"1\":{\"141\":1,\"174\":1}}],[\"外连接\",{\"0\":{\"141\":1,\"174\":1}}],[\"八进制数组和私钥并返回新八进制数组的函数\",{\"1\":{\"859\":1}}],[\"八\",{\"0\":{\"416\":1}}],[\"称为id\",{\"1\":{\"866\":1}}],[\"称为文档注释\",{\"1\":{\"508\":1}}],[\"称作竞态\",{\"1\":{\"694\":1}}],[\"称它为main\",{\"1\":{\"415\":1}}],[\"称之为内存缓存\",{\"1\":{\"577\":1}}],[\"称之为初始化声明\",{\"1\":{\"518\":1}}],[\"称之为作用域\",{\"1\":{\"515\":1}}],[\"称之为\",{\"1\":{\"240\":1}}],[\"称之为角色\",{\"1\":{\"72\":1}}],[\"垃圾回收和\",{\"0\":{\"661\":1}}],[\"垃圾回收器就不能释放整个文件所占用的内存\",{\"1\":{\"602\":1}}],[\"垃圾回收器\",{\"1\":{\"487\":1}}],[\"垃圾回收原理\",{\"0\":{\"435\":1}}],[\"垃圾回收\",{\"1\":{\"415\":1,\"487\":1}}],[\"现代操作系统调度线程都是抢占式的\",{\"1\":{\"412\":1}}],[\"现在只有\",{\"1\":{\"709\":1}}],[\"现在输出\",{\"1\":{\"697\":1}}],[\"现在会调用\",{\"1\":{\"689\":1}}],[\"现在用这个\",{\"1\":{\"692\":1}}],[\"现在用一个元素类型是\",{\"1\":{\"676\":1}}],[\"现在用的公司基本也很少了\",{\"1\":{\"251\":1}}],[\"现在的类型是\",{\"1\":{\"669\":1}}],[\"现在的值又分别是多少\",{\"1\":{\"588\":1}}],[\"现在可以使用空接口作为数据字段的类型\",{\"1\":{\"666\":1}}],[\"现在可以理解为什么栈是一个后进先出\",{\"1\":{\"660\":1}}],[\"现在如果我们想对一个\",{\"1\":{\"662\":1}}],[\"现在接口变量包含一个指向\",{\"1\":{\"662\":1}}],[\"现在为止我们已经见到了可以使用\",{\"1\":{\"643\":1}}],[\"现在你可以到你的项目目录并在终端运行\",{\"1\":{\"638\":1}}],[\"现在必须登录\",{\"1\":{\"635\":1}}],[\"现在就可以在\",{\"1\":{\"629\":1}}],[\"现在我们可以用命令\",{\"1\":{\"689\":1}}],[\"现在我们可以用它把汽车分类为独立的集合\",{\"1\":{\"676\":1}}],[\"现在我们可以定义下面这样的具体查询\",{\"1\":{\"676\":1}}],[\"现在我们可以写一个可以应用于许多类型的泛型的\",{\"1\":{\"676\":1}}],[\"现在我们可以实现适用于该流类型的任何变量的\",{\"1\":{\"672\":1}}],[\"现在我们可以通过导入并赋予别名来使用已安装的包\",{\"1\":{\"638\":1}}],[\"现在我们知道该怎么做了\",{\"1\":{\"664\":1}}],[\"现在我们知道如何使用\",{\"1\":{\"637\":1}}],[\"现在我们写一个\",{\"1\":{\"638\":1}}],[\"现在我们来看看具体如何来使用自己写的包\",{\"1\":{\"627\":1}}],[\"现在我们没法区分到底是\",{\"1\":{\"608\":1}}],[\"现在被赋值到变量\",{\"1\":{\"574\":1}}],[\"现在\",{\"1\":{\"513\":1,\"547\":1,\"574\":1,\"632\":1,\"655\":1,\"669\":1}}],[\"现在无法实现\",{\"1\":{\"381\":1}}],[\"现在要求\",{\"1\":{\"28\":1}}],[\"防止外界干扰\",{\"1\":{\"429\":1}}],[\"防止其他goroutine被饿死\",{\"1\":{\"411\":1}}],[\"防止数据篡改\",{\"1\":{\"36\":1}}],[\"抢占式调度是如何抢占的\",{\"0\":{\"412\":1}}],[\"抢占\",{\"1\":{\"411\":1}}],[\"销毁线程\",{\"1\":{\"411\":1}}],[\"核的机器上\",{\"1\":{\"696\":1}}],[\"核心代码的仓库是使用\",{\"1\":{\"636\":1}}],[\"核心就是一个字\",{\"1\":{\"285\":1}}],[\"核数\",{\"1\":{\"410\":1,\"411\":1,\"449\":1}}],[\"工作区\",{\"1\":{\"808\":1}}],[\"工作量窃取机制\",{\"1\":{\"410\":1}}],[\"工作量窃取\",{\"1\":{\"409\":1,\"411\":1}}],[\"工厂角色\",{\"1\":{\"707\":1}}],[\"工厂的传送带是个很有用的例子\",{\"1\":{\"699\":1}}],[\"工厂的名字以\",{\"1\":{\"642\":1}}],[\"工人问题\",{\"1\":{\"694\":1}}],[\"工具你可以指定\",{\"1\":{\"633\":1}}],[\"工具则会给出文件名和代码行数的提示以便让开发人员快速定位并升级代码\",{\"1\":{\"498\":1}}],[\"工具会从\",{\"1\":{\"497\":1}}],[\"工具\",{\"1\":{\"483\":2,\"486\":1,\"501\":1,\"508\":1,\"627\":1,\"628\":1,\"692\":2}}],[\"工具链是\",{\"1\":{\"484\":1}}],[\"工具链\",{\"1\":{\"481\":1}}],[\"工具目录如下\",{\"1\":{\"446\":1}}],[\"工程师\",{\"1\":{\"469\":1}}],[\"工资等级\",{\"1\":{\"270\":1}}],[\"工资\",{\"1\":{\"270\":1}}],[\"刘超\",{\"1\":{\"407\":1}}],[\"七\",{\"0\":{\"407\":1}}],[\"响应中必须包含以下参数\",{\"1\":{\"883\":1}}],[\"响应使用application\",{\"1\":{\"883\":1}}],[\"响应模式\",{\"1\":{\"868\":1}}],[\"响应转发\",{\"1\":{\"405\":1}}],[\"响应体\",{\"1\":{\"335\":1}}],[\"信赖方在对认证响应做出权利决定之前可以要求的信息\",{\"1\":{\"868\":1}}],[\"信号量是实现互斥锁\",{\"1\":{\"707\":1}}],[\"信号量模式\",{\"0\":{\"705\":1}}],[\"信号量调度大家还需要去详细了解\",{\"1\":{\"412\":1}}],[\"信号广播\",{\"1\":{\"405\":1}}],[\"信息的细微变化\",{\"1\":{\"860\":1}}],[\"信息按照箭头的方向流动\",{\"1\":{\"700\":1}}],[\"信息提示\",{\"1\":{\"635\":1}}],[\"信息存储了row\",{\"1\":{\"303\":1}}],[\"信息交换\",{\"1\":{\"26\":1}}],[\"唤醒\",{\"1\":{\"405\":5}}],[\"往关闭的管道写数据会\",{\"1\":{\"405\":1}}],[\"往往对每个节点申请同等大小的空间\",{\"1\":{\"215\":1}}],[\"管道和选择器模式\",{\"1\":{\"709\":1}}],[\"管道等等\",{\"1\":{\"662\":1}}],[\"管道\",{\"1\":{\"427\":1,\"682\":1}}],[\"管道会永久阻塞\",{\"1\":{\"405\":1}}],[\"管道有缓冲区但缓冲区没有数据\",{\"1\":{\"405\":1}}],[\"管道没有缓冲区\",{\"1\":{\"405\":1}}],[\"管理多个\",{\"1\":{\"440\":1}}],[\"管理一个或者多个页\",{\"1\":{\"440\":1}}],[\"管理内存\",{\"1\":{\"317\":1}}],[\"管理员\",{\"1\":{\"29\":1}}],[\"管理\",{\"1\":{\"6\":1}}],[\"队列为空\",{\"1\":{\"421\":1}}],[\"队列\",{\"1\":{\"405\":2}}],[\"队列下表\",{\"1\":{\"405\":2}}],[\"造成永远阻塞\",{\"1\":{\"400\":2}}],[\"造成大量冗余数据\",{\"1\":{\"291\":1}}],[\"收到了发送请求\",{\"1\":{\"398\":1}}],[\"收到了接收请求\",{\"1\":{\"398\":1}}],[\"收尾工作\",{\"1\":{\"325\":1}}],[\"环形链表\",{\"1\":{\"614\":1}}],[\"环形队列指针\",{\"1\":{\"405\":1}}],[\"环形队列长度\",{\"1\":{\"405\":1}}],[\"环境下把所有的\",{\"1\":{\"689\":1}}],[\"环境下要比\",{\"1\":{\"499\":1}}],[\"环境\",{\"1\":{\"689\":1}}],[\"环境之间切换\",{\"1\":{\"490\":1}}],[\"环境变量和\",{\"1\":{\"631\":1}}],[\"环境变量已经设置在\",{\"1\":{\"629\":1}}],[\"环境变量\",{\"0\":{\"482\":1,\"979\":1,\"980\":1},\"1\":{\"483\":1,\"491\":1}}],[\"环境属性\",{\"1\":{\"63\":1}}],[\"环型\",{\"1\":{\"398\":1}}],[\"六\",{\"0\":{\"395\":1}}],[\"超出了本规范的范围\",{\"1\":{\"875\":1}}],[\"超时控制\",{\"1\":{\"394\":1}}],[\"超过\",{\"1\":{\"469\":1}}],[\"超过其阀值需要进行rehash\",{\"1\":{\"368\":1}}],[\"超过最大存储值如uint8最大是255\",{\"1\":{\"326\":1}}],[\"博客园www\",{\"1\":{\"394\":1}}],[\"卷毛狒狒\",{\"1\":{\"394\":1}}],[\"光靠记答案很难让面试官满意\",{\"1\":{\"394\":1}}],[\"五\",{\"0\":{\"393\":1}}],[\"五大原则\",{\"1\":{\"316\":1}}],[\"带缓冲通道的容量和要同步的资源容量相同\",{\"1\":{\"707\":1}}],[\"带缓冲的读取\",{\"1\":{\"678\":1}}],[\"带标签的结构体\",{\"0\":{\"645\":1}}],[\"带有\",{\"1\":{\"527\":1}}],[\"带有顺序访问指针的\",{\"1\":{\"215\":1}}],[\"带一个变量\",{\"1\":{\"507\":1}}],[\"带领我们走进这个广袤无垠的世界\",{\"1\":{\"467\":1}}],[\"带来的是一种简单\",{\"1\":{\"846\":1}}],[\"带来的额外性能开销\",{\"1\":{\"439\":1}}],[\"带来的影响\",{\"1\":{\"392\":1}}],[\"带来什么改变\",{\"1\":{\"410\":1}}],[\"侵入式\",{\"1\":{\"392\":1}}],[\"派生类需要明确地声明它继承自基类\",{\"1\":{\"392\":1}}],[\"设计模式\",{\"0\":{\"799\":1},\"2\":{\"804\":1,\"805\":1}}],[\"设计无阻塞的程序可以避免这种情况\",{\"1\":{\"702\":1}}],[\"设计的机制也可以\",{\"1\":{\"687\":1}}],[\"设计\",{\"1\":{\"614\":1}}],[\"设计者为了让大家不依赖遍历的顺序\",{\"1\":{\"609\":1}}],[\"设计者通过\",{\"1\":{\"473\":1}}],[\"设计者们还汲取了其它编程语言的精粹部分融入到\",{\"1\":{\"471\":1}}],[\"设计channel的主要目的就是在多任务间传递数据的\",{\"1\":{\"396\":1}}],[\"设计抽象类的目的\",{\"1\":{\"392\":1}}],[\"设置为从客户端接收的值\",{\"1\":{\"878\":1}}],[\"设置为一个大于\",{\"1\":{\"696\":1}}],[\"设置签名\",{\"0\":{\"811\":1}}],[\"设置默认打开的路径为桌面\",{\"0\":{\"726\":1}}],[\"设置多文件选择模式\",{\"1\":{\"725\":1}}],[\"设置文件选择类型\",{\"1\":{\"725\":1}}],[\"设置标头\",{\"1\":{\"725\":1}}],[\"设置当前工作目录为桌面\",{\"1\":{\"725\":1}}],[\"设置过滤器\",{\"1\":{\"725\":1}}],[\"设置成功了\",{\"1\":{\"669\":1}}],[\"设置完成后\",{\"1\":{\"483\":1}}],[\"设置\",{\"0\":{\"669\":1},\"1\":{\"483\":2,\"696\":2}}],[\"设置本地机器的操作系统名称和编译体系结构\",{\"1\":{\"482\":1}}],[\"设置m的最大数量\",{\"1\":{\"409\":1}}],[\"设置mysql服务相关命令\",{\"1\":{\"52\":1}}],[\"设置事务的隔离级别\",{\"1\":{\"151\":1,\"187\":1}}],[\"设置环境变量\",{\"1\":{\"1\":1}}],[\"名为\",{\"1\":{\"689\":1}}],[\"名字\",{\"1\":{\"640\":1}}],[\"名字为粗体的代表目录\",{\"1\":{\"631\":1}}],[\"名字规则为\",{\"1\":{\"342\":1}}],[\"名\",{\"1\":{\"469\":1}}],[\"名非谷歌员工的贡献者对\",{\"1\":{\"469\":1}}],[\"名人博客\",{\"1\":{\"467\":1}}],[\"名称的视图\",{\"1\":{\"854\":1}}],[\"名称不需要指出自己所属的包\",{\"1\":{\"512\":1}}],[\"名称冲突\",{\"1\":{\"506\":1}}],[\"名称\",{\"1\":{\"392\":1,\"501\":1,\"569\":1}}],[\"入参\",{\"1\":{\"390\":1}}],[\"断言其实还有另一种形式\",{\"1\":{\"389\":1}}],[\"断言的语法为\",{\"1\":{\"389\":1}}],[\"断言\",{\"0\":{\"389\":1},\"1\":{\"868\":1}}],[\"编写测试代码时\",{\"1\":{\"689\":1}}],[\"编写参数是接口变量的函数\",{\"1\":{\"662\":1}}],[\"编写\",{\"1\":{\"659\":1}}],[\"编写的几个包\",{\"1\":{\"601\":1}}],[\"编写一个简单的逆波兰式计算器\",{\"1\":{\"677\":1}}],[\"编写一个小程序\",{\"1\":{\"638\":1}}],[\"编写一个程序\",{\"1\":{\"602\":3,\"677\":1}}],[\"编写一个名字为\",{\"1\":{\"564\":1}}],[\"编写一个函数\",{\"1\":{\"564\":1,\"602\":2}}],[\"编写两个版本\",{\"1\":{\"564\":2}}],[\"编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的任务\",{\"1\":{\"561\":1}}],[\"编写需要封装的库的\",{\"1\":{\"502\":1}}],[\"编辑器和集成开发环境\",{\"0\":{\"491\":1}}],[\"编辑器和\",{\"1\":{\"489\":1}}],[\"编辑器\",{\"0\":{\"489\":1}}],[\"编辑器有关的配置文件以及\",{\"1\":{\"486\":1}}],[\"编程中常见的另外一种模式如下\",{\"1\":{\"707\":1}}],[\"编程中的重要的最佳实践\",{\"1\":{\"676\":1}}],[\"编程环境下实现\",{\"1\":{\"488\":1}}],[\"编程语言的维基百科\",{\"1\":{\"469\":1}}],[\"编程语言的爱好者来说\",{\"1\":{\"467\":1}}],[\"编程语言\",{\"1\":{\"469\":1}}],[\"编程语言和数据库开发的授课经验\",{\"1\":{\"467\":1}}],[\"编程语言不断优化\",{\"1\":{\"439\":1}}],[\"编码不安全的jwt\",{\"0\":{\"855\":1}}],[\"编码为简单的两个元素\",{\"1\":{\"854\":1}}],[\"编码为\",{\"1\":{\"850\":1}}],[\"编码变体\",{\"1\":{\"849\":1}}],[\"编码到文件\",{\"1\":{\"686\":1}}],[\"编码和解码流\",{\"0\":{\"686\":1}}],[\"编码后的数据为\",{\"1\":{\"683\":1}}],[\"编码写入\",{\"1\":{\"682\":1}}],[\"编码也是一样的\",{\"1\":{\"682\":1}}],[\"编码的引用都是指这种变体\",{\"1\":{\"849\":1}}],[\"编码的文本文件时它们尤其有用\",{\"1\":{\"662\":1}}],[\"编码的数据\",{\"1\":{\"662\":1}}],[\"编码的字符占用\",{\"1\":{\"553\":1}}],[\"编码的字符在父字符串中的位置\",{\"1\":{\"536\":1}}],[\"编码的字符来说\",{\"1\":{\"531\":1}}],[\"编码的字符\",{\"1\":{\"506\":1,\"553\":1,\"557\":2}}],[\"编码的字符或\",{\"1\":{\"504\":1}}],[\"编码的字符串\",{\"1\":{\"475\":1,\"553\":1,\"602\":1}}],[\"编码\",{\"1\":{\"475\":1,\"682\":1,\"849\":1}}],[\"编译执行\",{\"1\":{\"691\":1}}],[\"编译失败\",{\"1\":{\"642\":1}}],[\"编译安装\",{\"1\":{\"632\":3}}],[\"编译安装好之后\",{\"1\":{\"483\":1}}],[\"编译链接并安装本地自己的包\",{\"1\":{\"629\":1}}],[\"编译链接过程概述\",{\"0\":{\"447\":1}}],[\"编译并安装包\",{\"1\":{\"638\":1}}],[\"编译并安装一个包\",{\"1\":{\"627\":1}}],[\"编译并安装自身包和依赖包\",{\"1\":{\"495\":1}}],[\"编译时会出错\",{\"1\":{\"665\":1}}],[\"编译时需要知道数组长度以便分配内存\",{\"1\":{\"580\":1}}],[\"编译时如果出现如下报错\",{\"1\":{\"483\":1}}],[\"编译错误\",{\"1\":{\"523\":1,\"643\":1}}],[\"编译后产生的对象文件将会是\",{\"1\":{\"506\":1}}],[\"编译的文件列表\",{\"1\":{\"501\":1}}],[\"编译的时候会到\",{\"1\":{\"449\":1}}],[\"编译自身包和依赖包\",{\"1\":{\"495\":1}}],[\"编译和安装一气呵成\",{\"1\":{\"629\":1}}],[\"编译和运行\",{\"1\":{\"491\":1}}],[\"编译和链接到机器代码的速度\",{\"1\":{\"473\":1}}],[\"编译注意事项\",{\"1\":{\"483\":1}}],[\"编译速度相对\",{\"1\":{\"481\":1}}],[\"编译完成后会被删除\",{\"1\":{\"449\":1}}],[\"编译相关的命令详解\",{\"0\":{\"448\":1}}],[\"编译系统\",{\"1\":{\"447\":1}}],[\"编译\",{\"0\":{\"444\":1,\"749\":1},\"1\":{\"506\":1,\"631\":1}}],[\"编译器下\",{\"1\":{\"696\":1}}],[\"编译器真正实现了协程\",{\"1\":{\"695\":1}}],[\"编译器编译\",{\"1\":{\"689\":1}}],[\"编译器也会给出上面同样的错误\",{\"1\":{\"662\":1}}],[\"编译器也不关心\",{\"1\":{\"510\":1}}],[\"编译器将会给出清晰的错误信息\",{\"1\":{\"662\":1}}],[\"编译器的智商已经高到可以根据变量的值来自动推断其类型\",{\"1\":{\"515\":1}}],[\"编译器必须能够推断出所有值的类型\",{\"1\":{\"509\":1}}],[\"编译器这个程序需要使用\",{\"1\":{\"506\":1}}],[\"编译器读取的是\",{\"1\":{\"506\":1}}],[\"编译器来产生可以组合在同一个包中的\",{\"1\":{\"501\":1}}],[\"编译器和脚本语言解释器的编程语言\",{\"1\":{\"499\":1}}],[\"编译器产生的是本地可执行代码\",{\"1\":{\"487\":1}}],[\"编译器实现了自举\",{\"1\":{\"483\":1}}],[\"编译器支持交叉编译\",{\"1\":{\"482\":1}}],[\"编译器名称为\",{\"1\":{\"481\":1}}],[\"编译器目前支持以下基于\",{\"1\":{\"481\":1}}],[\"编译器\",{\"1\":{\"481\":4,\"486\":1,\"693\":1,\"695\":1,\"696\":1}}],[\"编译器套装\",{\"1\":{\"447\":1}}],[\"编译器通过分析代码来决定将变量分配到何处\",{\"1\":{\"445\":1}}],[\"编译器会检查其是否实现了该接口的所有函数\",{\"1\":{\"672\":1}}],[\"编译器会确保所有可能的接口方法都可以在此值上被调用\",{\"1\":{\"662\":1}}],[\"编译器会报错\",{\"1\":{\"605\":1}}],[\"编译器会返回错误\",{\"1\":{\"573\":1}}],[\"编译器会提示错误\",{\"1\":{\"518\":1}}],[\"编译器会从后缀名为\",{\"1\":{\"506\":1}}],[\"编译器会根据变量是否被外部引用来决定是否逃逸\",{\"1\":{\"445\":1}}],[\"编译器会分析代码的特征和代码生命周期\",{\"1\":{\"445\":1}}],[\"编译器会将函数的局部变量分配到函数栈帧\",{\"1\":{\"442\":1}}],[\"编译器就会将变量分配到堆上\",{\"1\":{\"442\":1}}],[\"编译器自动完成\",{\"1\":{\"504\":1}}],[\"编译器自动会识别\",{\"1\":{\"392\":1}}],[\"编译器自动检测类型是否实现接口\",{\"0\":{\"385\":1}}],[\"编号\",{\"1\":{\"35\":1}}],[\"顺便提一句\",{\"1\":{\"383\":1}}],[\"顺序通信处理\",{\"1\":{\"694\":1}}],[\"顺序如下\",{\"1\":{\"510\":1}}],[\"顺序自然也没法保证了\",{\"1\":{\"359\":1}}],[\"顺序进行查询\",{\"1\":{\"268\":1}}],[\"顺序相同\",{\"1\":{\"212\":1}}],[\"拷贝整数到输出通道\",{\"1\":{\"709\":1}}],[\"拷贝创建了\",{\"1\":{\"669\":1}}],[\"拷贝到一个切片\",{\"1\":{\"611\":1}}],[\"拷贝到目标地址\",{\"1\":{\"593\":1}}],[\"拷贝个数是\",{\"1\":{\"593\":1}}],[\"拷贝了一份指针\",{\"1\":{\"380\":1}}],[\"拷贝的是数据地址\",{\"1\":{\"346\":1}}],[\"拷贝的是数据本身\",{\"1\":{\"346\":1}}],[\"鸭子类型\",{\"1\":{\"378\":1}}],[\"鸭子类型是一种动态语言的风格\",{\"1\":{\"378\":1}}],[\"四个框架的对比\",{\"1\":{\"461\":1}}],[\"四\",{\"0\":{\"377\":1}}],[\"四种方法\",{\"0\":{\"366\":1}}],[\"四种形成经典理论的权限控制模型有\",{\"1\":{\"60\":1}}],[\"搬迁完成后的示意图如下\",{\"1\":{\"372\":1}}],[\"搬迁进度\",{\"1\":{\"364\":1}}],[\"冲突越多\",{\"1\":{\"370\":2}}],[\"装载因子越大\",{\"1\":{\"370\":2}}],[\"装载因子=填入表中的元素个数\",{\"1\":{\"370\":2}}],[\"装载因子的计算公式是\",{\"1\":{\"370\":2}}],[\"装置会根据注册的信息得到相应的数据\",{\"1\":{\"331\":1}}],[\"装置\",{\"1\":{\"331\":1}}],[\"好的程序是非常注意\",{\"1\":{\"561\":1}}],[\"好的哈希算法可以保证哈希值的随机性\",{\"1\":{\"367\":1}}],[\"好日子可能一去不复返\",{\"1\":{\"296\":1}}],[\"事实上\",{\"1\":{\"561\":1,\"562\":1,\"602\":1,\"678\":1}}],[\"事实上哈希冲突并不是好事情\",{\"1\":{\"367\":1}}],[\"事件处理的特例\",{\"1\":{\"546\":1}}],[\"事件订阅与广播\",{\"1\":{\"405\":1}}],[\"事务需要手动\",{\"1\":{\"300\":1}}],[\"事务是\",{\"1\":{\"300\":1}}],[\"事务差异\",{\"0\":{\"300\":1}}],[\"事务支持比较\",{\"1\":{\"294\":1}}],[\"事务方案对比\",{\"0\":{\"243\":1}}],[\"事务执行在过程中需要将所需资源全部锁定\",{\"1\":{\"241\":1}}],[\"事务仅限于对单一数据库资源的访问控制\",{\"1\":{\"240\":1}}],[\"事务中的修改\",{\"1\":{\"239\":1}}],[\"事务隔离\",{\"0\":{\"239\":1}}],[\"事务隔离级别\",{\"0\":{\"153\":1,\"189\":1},\"1\":{\"300\":1}}],[\"事务的隔离性很难保证\",{\"1\":{\"238\":1}}],[\"事务指的是满足\",{\"1\":{\"236\":1}}],[\"事务简单来说\",{\"1\":{\"236\":1}}],[\"事务处理示例\",{\"1\":{\"151\":1,\"187\":1}}],[\"事务处理指令\",{\"1\":{\"151\":1,\"187\":1}}],[\"事务会自动关闭\",{\"1\":{\"151\":1,\"187\":1}}],[\"事务\",{\"0\":{\"151\":1,\"187\":1,\"236\":1},\"1\":{\"251\":1}}],[\"事务控制语言\",{\"0\":{\"89\":1},\"1\":{\"89\":1}}],[\"据此将所有冲突的键连接起来\",{\"1\":{\"365\":1}}],[\"键\",{\"1\":{\"532\":1,\"853\":1}}],[\"键数量\",{\"1\":{\"368\":1}}],[\"键值对的key对应的值\",{\"1\":{\"365\":1}}],[\"键码为\",{\"1\":{\"288\":1}}],[\"qyhe5lcmikpxfeiqilvq0pc\",{\"1\":{\"883\":1}}],[\"q退出\",{\"1\":{\"818\":1}}],[\"q\",{\"1\":{\"568\":1,\"662\":3,\"673\":3,\"677\":1,\"686\":8,\"689\":5}}],[\"qt\",{\"1\":{\"492\":1}}],[\"qps\",{\"1\":{\"461\":1}}],[\"qq\",{\"1\":{\"456\":1,\"811\":3}}],[\"qccount\",{\"1\":{\"405\":1}}],[\"qcount\",{\"1\":{\"398\":1}}],[\"qcrao\",{\"1\":{\"380\":2}}],[\"qo7b0vqu\",{\"1\":{\"361\":1}}],[\"qo7b0vqumbd\",{\"1\":{\"361\":1}}],[\"quacking\",{\"1\":{\"671\":4}}],[\"quack\",{\"1\":{\"671\":3}}],[\"quit\",{\"1\":{\"549\":1}}],[\"quick\",{\"1\":{\"205\":1,\"543\":3}}],[\"queue\",{\"1\":{\"409\":1}}],[\"query\",{\"1\":{\"83\":1,\"267\":1,\"676\":1}}],[\"怎么结合使用的完整例子\",{\"1\":{\"689\":1}}],[\"怎么定位排查内存泄漏问题\",{\"0\":{\"438\":1}}],[\"怎么控制并发数\",{\"0\":{\"424\":1}}],[\"怎么处理对\",{\"0\":{\"361\":1}}],[\"怎么去复用一个接口的方法\",{\"0\":{\"339\":1}}],[\"谨慎采用本题答案\",{\"1\":{\"360\":1}}],[\"循环可以替换为深度优先搜索\",{\"1\":{\"708\":1}}],[\"循环迭代容器\",{\"1\":{\"708\":1}}],[\"循环迭代一个\",{\"1\":{\"553\":1}}],[\"循环了\",{\"1\":{\"708\":1}}],[\"循环用索引取得每个字段的值\",{\"1\":{\"670\":1}}],[\"循环读取\",{\"1\":{\"609\":1}}],[\"循环让值可以变成自身的两倍\",{\"1\":{\"591\":1}}],[\"循环后的\",{\"1\":{\"591\":1}}],[\"循环内部可见的局部变量\",{\"1\":{\"591\":1,\"609\":1}}],[\"循环以及\",{\"1\":{\"567\":1}}],[\"循环以及字符串连接\",{\"1\":{\"554\":1}}],[\"循环结构迭代\",{\"1\":{\"567\":1}}],[\"循环中接收的时候\",{\"1\":{\"709\":1}}],[\"循环中并行计算迭代可能带来很好的性能提升\",{\"1\":{\"706\":1}}],[\"循环中的条件非常重要\",{\"1\":{\"580\":1}}],[\"循环中\",{\"1\":{\"558\":1}}],[\"循环中是一一对应的\",{\"1\":{\"557\":1}}],[\"循环的\",{\"1\":{\"708\":1,\"709\":1}}],[\"循环的每一个迭代是并行完成的\",{\"1\":{\"706\":1}}],[\"循环的下一次迭代会更新所有协程中\",{\"1\":{\"705\":1}}],[\"循环的输出\",{\"1\":{\"559\":1}}],[\"循环的输出结果\",{\"1\":{\"557\":1}}],[\"循环的头部没有条件语句\",{\"1\":{\"556\":1}}],[\"循环\",{\"0\":{\"706\":1,\"708\":1},\"1\":{\"554\":1,\"555\":1,\"558\":1,\"591\":1,\"680\":1,\"682\":1}}],[\"循环嵌套起来\",{\"1\":{\"553\":1}}],[\"循环开始前\",{\"1\":{\"553\":1}}],[\"循环来\",{\"1\":{\"591\":1}}],[\"循环来对其进行处理\",{\"1\":{\"542\":1}}],[\"循环来实现对\",{\"1\":{\"532\":1}}],[\"循环只会根据索引返回字符串中的纯字节\",{\"1\":{\"532\":1}}],[\"循环第\",{\"1\":{\"429\":1}}],[\"循环智能二面\",{\"1\":{\"423\":1}}],[\"循环数组的长度\",{\"1\":{\"398\":1}}],[\"循环数组中的元素数量\",{\"1\":{\"398\":1}}],[\"循环是有序的还是无序的\",{\"0\":{\"359\":1}}],[\"循环里面如果开协程\",{\"1\":{\"324\":1}}],[\"源地址和目标地址可能会有重叠\",{\"1\":{\"593\":1}}],[\"源文件来测试代码\",{\"1\":{\"689\":1}}],[\"源文件中的\",{\"1\":{\"506\":1}}],[\"源文件\",{\"1\":{\"496\":2,\"498\":1}}],[\"源代码\",{\"1\":{\"483\":1}}],[\"源数据也会被修改\",{\"1\":{\"355\":1}}],[\"源码路径也设置给\",{\"1\":{\"631\":1}}],[\"源码文件被放置在\",{\"1\":{\"629\":1}}],[\"源码文件的文档注释\",{\"1\":{\"497\":1}}],[\"源码和二进制文件\",{\"1\":{\"481\":1}}],[\"源码\",{\"0\":{\"458\":1},\"1\":{\"631\":1}}],[\"源码里的编译器源码位于\",{\"1\":{\"447\":1}}],[\"源码里的文件结构体\",{\"1\":{\"382\":1}}],[\"源码的路径\",{\"1\":{\"446\":1}}],[\"源码编译成执行文件后\",{\"1\":{\"320\":1}}],[\"源码级别支持协程\",{\"1\":{\"320\":1}}],[\"倍左右\",{\"1\":{\"499\":1}}],[\"倍\",{\"1\":{\"354\":4,\"409\":1,\"499\":9,\"605\":1}}],[\"倍的数据量依然还是很多\",{\"1\":{\"73\":1}}],[\"得物\",{\"0\":{\"430\":1}}],[\"得到的结果如下\",{\"1\":{\"689\":1}}],[\"得到了\",{\"1\":{\"662\":1}}],[\"得到\",{\"1\":{\"649\":1}}],[\"得到许多很好的教程\",{\"1\":{\"636\":1}}],[\"得到灰色节点\",{\"1\":{\"429\":1}}],[\"得到新的\",{\"1\":{\"354\":1}}],[\"得先给他\",{\"1\":{\"310\":1}}],[\"向授权服务器提示终端用户登录时可能使用的登录标识符\",{\"1\":{\"873\":1}}],[\"向其发出id令牌的一方\",{\"1\":{\"869\":1}}],[\"向openid提供者\",{\"1\":{\"869\":1}}],[\"向依赖方标识实体的标识符\",{\"1\":{\"868\":1}}],[\"向通道写值的协程未完成工作\",{\"1\":{\"708\":1}}],[\"向包的调用者返回错误值\",{\"1\":{\"689\":1}}],[\"向后移动一位\",{\"1\":{\"585\":1}}],[\"向大型项目开发迈出了重要的第一步\",{\"1\":{\"467\":1}}],[\"向管道写入数据也会阻塞\",{\"1\":{\"405\":1}}],[\"向一个channel中写数据简单过程如下\",{\"1\":{\"402\":1}}],[\"向\",{\"0\":{\"401\":1},\"1\":{\"354\":1,\"405\":2,\"439\":1,\"782\":1}}],[\"向已经关闭的channel写数据\",{\"1\":{\"404\":1}}],[\"向已经关闭的\",{\"1\":{\"335\":1}}],[\"意思是执行特定任务的代码只能在程序里面出现一次\",{\"1\":{\"561\":1}}],[\"意思就是它跟指针对象不能互相转换\",{\"1\":{\"351\":1}}],[\"意味着只被限制于计算机内存\",{\"1\":{\"527\":1}}],[\"意为当前bucket盛不下而溢出的部分\",{\"1\":{\"367\":1}}],[\"意向锁是\",{\"1\":{\"233\":1}}],[\"意向锁的作用是\",{\"1\":{\"233\":1}}],[\"意向锁有什么用\",{\"1\":{\"233\":1}}],[\"意向锁\",{\"0\":{\"233\":1}}],[\"层\",{\"1\":{\"554\":1,\"676\":1}}],[\"层嵌套\",{\"1\":{\"554\":1}}],[\"层层递出最后到\",{\"1\":{\"350\":2}}],[\"层方案轻便\",{\"1\":{\"252\":1}}],[\"层方案的缺点在于需要部署\",{\"1\":{\"252\":1}}],[\"层方案的优点在于不用部署\",{\"1\":{\"252\":1}}],[\"层方案\",{\"1\":{\"251\":5,\"252\":1}}],[\"栈的管理是自动的\",{\"1\":{\"694\":1}}],[\"栈上的程序计数器样本\",{\"1\":{\"692\":1}}],[\"栈上的变量\",{\"1\":{\"439\":1}}],[\"栈处理\",{\"1\":{\"487\":1}}],[\"栈分配内存只需要两个cpu指令\",{\"1\":{\"445\":1}}],[\"栈内存分配则会非常快\",{\"1\":{\"445\":1}}],[\"栈是高地址到低地址\",{\"1\":{\"439\":1}}],[\"栈中的黑色对象添加的白色对象依然是白色\",{\"1\":{\"429\":1}}],[\"栈中的对象不触发\",{\"1\":{\"429\":1}}],[\"栈空间不启动\",{\"1\":{\"429\":2}}],[\"栈\",{\"1\":{\"415\":1}}],[\"栈顶寄存器\",{\"1\":{\"348\":1}}],[\"栈底寄存器\",{\"1\":{\"348\":1}}],[\"传输之后\",{\"1\":{\"682\":1}}],[\"传输之前\",{\"1\":{\"682\":1}}],[\"传输协议可以额外透传元信息\",{\"1\":{\"462\":1}}],[\"传给它一个\",{\"1\":{\"682\":1}}],[\"传统\",{\"1\":{\"662\":1}}],[\"传入一个\",{\"1\":{\"591\":1}}],[\"传入参数为一个\",{\"1\":{\"591\":1}}],[\"传入的\",{\"1\":{\"455\":1}}],[\"传递数组的指针\",{\"1\":{\"583\":1}}],[\"传递变长参数\",{\"0\":{\"567\":1}}],[\"传递一个指针很容易引发一些不确定的事\",{\"1\":{\"566\":1}}],[\"传递指针给函数不但可以节省内存\",{\"1\":{\"566\":1}}],[\"传递指针\",{\"1\":{\"563\":1}}],[\"传递给函数的代价很小\",{\"1\":{\"605\":1}}],[\"传递给函数\",{\"1\":{\"563\":1}}],[\"传值\",{\"1\":{\"380\":2}}],[\"传进去的是值\",{\"1\":{\"355\":1}}],[\"传参和返回值是通过\",{\"1\":{\"348\":1}}],[\"传回服务器\",{\"1\":{\"28\":1}}],[\"创造一个新的对象\",{\"1\":{\"346\":1}}],[\"创建分支\",{\"0\":{\"824\":1}}],[\"创建通道的通道\",{\"1\":{\"699\":1}}],[\"创建错误对象\",{\"0\":{\"689\":1}}],[\"创建了一个新的\",{\"1\":{\"686\":1}}],[\"创建第二个类型\",{\"1\":{\"662\":1}}],[\"创建为一个切片引用并传递给该函数\",{\"1\":{\"586\":1}}],[\"创建一个结构用于存取一行的数据\",{\"1\":{\"678\":1}}],[\"创建一个结构体类型\",{\"1\":{\"662\":1}}],[\"创建一个结构体\",{\"1\":{\"648\":1}}],[\"创建一个包含\",{\"1\":{\"662\":2}}],[\"创建一个单独的包\",{\"1\":{\"661\":1}}],[\"创建一个上面\",{\"1\":{\"655\":1}}],[\"创建一个和包同名的目录\",{\"1\":{\"638\":1}}],[\"创建一个\",{\"1\":{\"590\":1,\"609\":1,\"631\":1,\"655\":1,\"657\":1,\"664\":1}}],[\"创建一个切片\",{\"0\":{\"587\":1}}],[\"创建一个程序\",{\"1\":{\"554\":1,\"627\":2}}],[\"创建一个用于统计字节和字符\",{\"1\":{\"532\":1}}],[\"创建一个临时变量\",{\"1\":{\"324\":1}}],[\"创建变量\",{\"1\":{\"501\":1}}],[\"创建单独的\",{\"1\":{\"501\":1}}],[\"创建运行更快的程序\",{\"1\":{\"467\":1}}],[\"创建序列\",{\"1\":{\"299\":1}}],[\"创建和维护索引要耗费时间\",{\"1\":{\"210\":1}}],[\"创建游标\",{\"1\":{\"168\":1,\"204\":1}}],[\"创建结束标志变量\",{\"1\":{\"168\":1,\"204\":1}}],[\"创建总数变量\",{\"1\":{\"168\":1,\"204\":1}}],[\"创建接收游标数据的变量\",{\"1\":{\"168\":1,\"204\":1}}],[\"创建触发器示例\",{\"1\":{\"167\":1,\"203\":1}}],[\"创建存储过程示例\",{\"1\":{\"163\":1,\"199\":1}}],[\"创建存储过程的要点\",{\"1\":{\"163\":1,\"199\":1}}],[\"创建账户\",{\"0\":{\"155\":1,\"191\":1}}],[\"创建保留点\",{\"1\":{\"151\":1,\"187\":1}}],[\"创建表时使用约束条件\",{\"1\":{\"112\":1}}],[\"创建唯一索引\",{\"0\":{\"108\":1}}],[\"创建索引\",{\"0\":{\"107\":1}}],[\"创建视图\",{\"0\":{\"104\":1}}],[\"创建数据表\",{\"0\":{\"98\":1}}],[\"创建数据库\",{\"0\":{\"93\":1}}],[\"创建\",{\"1\":{\"75\":1,\"320\":1,\"680\":1}}],[\"创建人\",{\"1\":{\"72\":6,\"73\":3}}],[\"创建时间\",{\"1\":{\"72\":6,\"73\":3}}],[\"创建挂载文件\",{\"1\":{\"6\":2}}],[\"创建网络\",{\"1\":{\"6\":1}}],[\"创建容器时除了\",{\"1\":{\"4\":1}}],[\"创建容器\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1}}],[\"创建文件\",{\"1\":{\"1\":1,\"2\":1,\"4\":1}}],[\"创建目录\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"6\":2}}],[\"创建主机挂载文件\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1}}],[\"浅拷贝\",{\"0\":{\"345\":1},\"1\":{\"345\":1,\"346\":1}}],[\"浅入深出\",{\"1\":{\"205\":1}}],[\"深入阐述了反射概念\",{\"1\":{\"670\":1}}],[\"深入对比node\",{\"1\":{\"318\":1}}],[\"深浅拷贝的本质区别\",{\"0\":{\"346\":1}}],[\"深拷贝\",{\"0\":{\"345\":1},\"1\":{\"345\":1,\"346\":1}}],[\"至顶部\",{\"1\":{\"660\":1}}],[\"至当前时间的总毫秒数\",{\"1\":{\"618\":1}}],[\"至\",{\"1\":{\"499\":6,\"532\":1,\"601\":1}}],[\"至少可以从容器获得\",{\"1\":{\"709\":1}}],[\"至少应该包括\",{\"1\":{\"689\":1}}],[\"至少需要暗示用户有错误发生并对函数进行返回\",{\"1\":{\"550\":1}}],[\"至少占用\",{\"1\":{\"531\":1}}],[\"至少在每次编译前都会保存\",{\"1\":{\"490\":1}}],[\"至少有一个公共字段并且它们之间存在关系\",{\"1\":{\"137\":1,\"170\":1}}],[\"至于开发工具方面\",{\"1\":{\"496\":1}}],[\"至于\",{\"1\":{\"449\":1}}],[\"至于删除写屏障\",{\"1\":{\"429\":1}}],[\"至此\",{\"1\":{\"338\":1}}],[\"唯一标识符的字符串\",{\"1\":{\"852\":1}}],[\"唯一的要求是\",{\"1\":{\"651\":1}}],[\"唯一的例外是切片的数组\",{\"1\":{\"582\":1}}],[\"唯一类型\",{\"1\":{\"580\":1}}],[\"唯一有的就是组合了animal父类\",{\"1\":{\"338\":1}}],[\"唯一索引可以确保每一行数据的唯一性\",{\"1\":{\"210\":1}}],[\"唯一索引表明此索引的每一个索引值只对应唯一的数据记录\",{\"1\":{\"106\":1}}],[\"唯一索引\",{\"1\":{\"106\":1,\"212\":1}}],[\"举个例子\",{\"1\":{\"670\":1}}],[\"举个很简单的例子\",{\"1\":{\"338\":1}}],[\"举例如下\",{\"1\":{\"342\":3}}],[\"举例来说\",{\"1\":{\"28\":1,\"222\":1}}],[\"空格分隔的字符串\",{\"1\":{\"873\":1}}],[\"空格分隔\",{\"1\":{\"873\":1}}],[\"空格向下翻页\",{\"1\":{\"818\":1}}],[\"空格\",{\"1\":{\"723\":1}}],[\"空接口\",{\"1\":{\"675\":1,\"676\":1,\"699\":1}}],[\"空接口和函数重载\",{\"0\":{\"675\":1}}],[\"空接口类似\",{\"1\":{\"663\":1}}],[\"空接口或者最小接口\",{\"1\":{\"663\":1}}],[\"空白符用来匹配一些不需要的值\",{\"1\":{\"565\":1}}],[\"空白符\",{\"0\":{\"565\":1}}],[\"空白标识符\",{\"1\":{\"518\":1}}],[\"空分支\",{\"1\":{\"551\":1}}],[\"空读写阻塞\",{\"1\":{\"400\":1}}],[\"空map是长度为空\",{\"1\":{\"362\":1}}],[\"空map是一个空操作\",{\"1\":{\"362\":1}}],[\"空map和nil\",{\"1\":{\"362\":1}}],[\"空指针调用\",{\"1\":{\"335\":1}}],[\"空间变大\",{\"1\":{\"283\":1}}],[\"复合语句\",{\"1\":{\"687\":1}}],[\"复合的\",{\"1\":{\"509\":1}}],[\"复杂类型和函数类型不能被编码\",{\"1\":{\"682\":1}}],[\"复杂话\",{\"1\":{\"427\":1}}],[\"复数支持和其它数字类型一样的运算\",{\"1\":{\"524\":1}}],[\"复数使用\",{\"1\":{\"524\":1}}],[\"复数\",{\"0\":{\"524\":1}}],[\"复用线程\",{\"1\":{\"411\":1}}],[\"复用一样\",{\"1\":{\"331\":1}}],[\"复用机制\",{\"1\":{\"331\":1}}],[\"复制远程库\",{\"1\":{\"808\":1,\"831\":1}}],[\"复制数据切片至空接口切片\",{\"0\":{\"665\":1}}],[\"复制到\",{\"1\":{\"631\":1}}],[\"复制切片\",{\"1\":{\"601\":1}}],[\"复制过程存在时延\",{\"1\":{\"260\":1}}],[\"复制机制\",{\"0\":{\"260\":1}}],[\"复制生成的密码和注册令牌\",{\"1\":{\"6\":1}}],[\"面试题\",{\"1\":{\"463\":1},\"2\":{\"465\":1}}],[\"面试一般会问你项目中怎么使用select\",{\"0\":{\"331\":1}}],[\"面向线程的轻量级方法\",{\"1\":{\"320\":1}}],[\"面向接口编程\",{\"1\":{\"320\":1}}],[\"面向对象中的\",{\"1\":{\"314\":1,\"315\":1,\"316\":1}}],[\"面向对象的三大基本特性\",{\"1\":{\"310\":1}}],[\"面向对象编程语言\",{\"1\":{\"478\":1}}],[\"面向对象编程\",{\"1\":{\"310\":1,\"320\":1}}],[\"面向对象\",{\"0\":{\"310\":1}}],[\"难\",{\"1\":{\"394\":1}}],[\"难点\",{\"0\":{\"331\":1}}],[\"难以管理\",{\"1\":{\"75\":1}}],[\"讲讲\",{\"0\":{\"331\":1,\"332\":1,\"354\":1,\"405\":1,\"423\":1}}],[\"任意包含有适当的\",{\"1\":{\"677\":1}}],[\"任务\",{\"1\":{\"548\":1}}],[\"任务总数\",{\"1\":{\"424\":1}}],[\"任务分发\",{\"1\":{\"405\":1}}],[\"任务然后设置可以强占的标识符\",{\"1\":{\"330\":1}}],[\"任何不被理解的声明必须被忽略\",{\"1\":{\"869\":1}}],[\"任何不同类型之间的转换都必须显式说明\",{\"1\":{\"520\":1}}],[\"任何可以验证信息的一方也可以创建新信息\",{\"1\":{\"860\":1}}],[\"任何可以进行signatures检查的一方都可以信赖\",{\"1\":{\"857\":1}}],[\"任何时候都是可知状态\",{\"1\":{\"699\":1}}],[\"任何时候当你需要一个新的错误类型\",{\"1\":{\"688\":1}}],[\"任何\",{\"1\":{\"694\":1}}],[\"任何提供了接口方法实现代码的类型都隐式地实现了该接口\",{\"1\":{\"671\":1}}],[\"任何其他类型都实现了空接口\",{\"1\":{\"663\":1}}],[\"任何一个非命名返回值\",{\"1\":{\"564\":1}}],[\"任何一个有返回值\",{\"1\":{\"562\":1}}],[\"任何支持进行相等判断的类型都可以作为测试表达式的条件\",{\"1\":{\"551\":1}}],[\"任何类型的应用都能够读取和输出\",{\"1\":{\"682\":1}}],[\"任何类型的指针都可以转化成\",{\"1\":{\"351\":1}}],[\"任何类型都可以有方法\",{\"1\":{\"651\":1}}],[\"任何类型都可以赋值给它\",{\"1\":{\"504\":1}}],[\"任何类型\",{\"1\":{\"545\":1,\"651\":1}}],[\"任何在栈上创建的新对象\",{\"1\":{\"429\":1}}],[\"任何人都可以读到\",{\"1\":{\"35\":1}}],[\"任何人都可以获得令牌的所有权限\",{\"1\":{\"31\":1}}],[\"切除切片\",{\"1\":{\"601\":1}}],[\"切分数组\",{\"1\":{\"585\":1}}],[\"切分查询\",{\"0\":{\"267\":1}}],[\"切记在\",{\"1\":{\"547\":1}}],[\"切换分支\",{\"0\":{\"825\":1}}],[\"切换相关目录到下\",{\"1\":{\"483\":1}}],[\"切换出去\",{\"1\":{\"330\":1}}],[\"切片进行了\",{\"1\":{\"705\":1}}],[\"切片相当于向量\",{\"1\":{\"601\":1}}],[\"切片可以反复扩展直到占据整个相关数组\",{\"1\":{\"592\":1}}],[\"切片重组\",{\"0\":{\"592\":1}}],[\"切片通常也是一维的\",{\"1\":{\"589\":1}}],[\"切片本身已经是一个引用类型\",{\"1\":{\"585\":1}}],[\"切片本身不能存储任何数据\",{\"1\":{\"353\":1}}],[\"切片不能被重新分片以获取数组的前一个元素\",{\"1\":{\"585\":1}}],[\"切片只能向后移动\",{\"1\":{\"585\":1}}],[\"切片长度以及切片容量\",{\"1\":{\"585\":1}}],[\"切片长度和容量可以自动扩容\",{\"1\":{\"353\":1}}],[\"切片在内存中的组织方式实际上是一个有\",{\"1\":{\"585\":1}}],[\"切片也可以用类似数组的方式初始化\",{\"1\":{\"585\":1}}],[\"切片提供了\",{\"1\":{\"682\":1}}],[\"切片提供了计算容量的函数\",{\"1\":{\"585\":1}}],[\"切片提供了一个相关数组的动态窗口\",{\"1\":{\"585\":1}}],[\"切片是一个\",{\"1\":{\"585\":1}}],[\"切片是可索引的\",{\"1\":{\"585\":1}}],[\"切片是引用类型\",{\"1\":{\"353\":1}}],[\"切片确实随处可见的\",{\"1\":{\"578\":1}}],[\"切片和结构体不能作为\",{\"1\":{\"605\":1}}],[\"切片和垃圾回收\",{\"0\":{\"602\":1}}],[\"切片和\",{\"1\":{\"578\":1,\"685\":1}}],[\"切片和管道\",{\"1\":{\"569\":1}}],[\"切片\",{\"0\":{\"584\":1},\"1\":{\"439\":1,\"487\":1,\"509\":1,\"569\":2,\"585\":2,\"587\":1,\"588\":2,\"676\":1,\"705\":2}}],[\"切片截取引起子切片内存泄漏\",{\"1\":{\"438\":1}}],[\"切片的底层指向一个数组\",{\"1\":{\"602\":1}}],[\"切片的复制与追加\",{\"0\":{\"593\":1}}],[\"切片的长度永远不会超过它的容量\",{\"1\":{\"585\":1}}],[\"切片的长度可以在运行时修改\",{\"1\":{\"585\":1}}],[\"切片的初始化格式是\",{\"1\":{\"585\":1}}],[\"切片的初始化\",{\"1\":{\"353\":1}}],[\"切片的定义\",{\"1\":{\"353\":1}}],[\"切片一旦扩容\",{\"1\":{\"353\":1}}],[\"切片越界\",{\"1\":{\"335\":1}}],[\"阻塞和生产者\",{\"1\":{\"709\":1}}],[\"阻塞协程时\",{\"1\":{\"694\":1}}],[\"阻塞直到所有的任务完成\",{\"1\":{\"423\":1}}],[\"阻塞了\",{\"1\":{\"410\":1}}],[\"阻塞\",{\"1\":{\"330\":2,\"409\":1,\"703\":1}}],[\"阻塞很多小的但重要的查询\",{\"1\":{\"267\":1}}],[\"种内建的引用类型\",{\"1\":{\"588\":1}}],[\"种情况\",{\"1\":{\"568\":1}}],[\"种方案可以解决这个问题\",{\"1\":{\"567\":1}}],[\"种形式的字面值\",{\"1\":{\"532\":1}}],[\"种场景\",{\"1\":{\"330\":1}}],[\"种参数类型\",{\"1\":{\"163\":1,\"199\":1}}],[\"变体\",{\"1\":{\"858\":4}}],[\"变空也结束了\",{\"1\":{\"700\":1}}],[\"变成\",{\"1\":{\"676\":1}}],[\"变成休眠状态\",{\"1\":{\"409\":1}}],[\"变长参数可以作为对应类型的\",{\"1\":{\"567\":1}}],[\"变量声明\",{\"0\":{\"751\":1}}],[\"变量首先被转换成空接口\",{\"1\":{\"668\":1}}],[\"变量在内存中占据两个字长\",{\"1\":{\"663\":1}}],[\"变量名前面添加\",{\"1\":{\"563\":1}}],[\"变量中实际存储的变量类型\",{\"1\":{\"551\":1}}],[\"变量是否包含一个真正的错误\",{\"1\":{\"550\":1}}],[\"变量除了可以在全局声明中初始化\",{\"1\":{\"519\":1}}],[\"变量可以编译期间就被赋值\",{\"1\":{\"515\":1}}],[\"变量的最基本信息就是类型和值\",{\"1\":{\"668\":1}}],[\"变量的引用\",{\"1\":{\"662\":1}}],[\"变量的值是一个内存地址\",{\"1\":{\"573\":1}}],[\"变量的值存储的是对值的引用\",{\"1\":{\"329\":1}}],[\"变量的数值\",{\"1\":{\"566\":1}}],[\"变量的指针\",{\"1\":{\"566\":1}}],[\"变量的类型也可以在运行时实现自动推断\",{\"1\":{\"515\":1}}],[\"变量的命名规则遵循骆驼命名法\",{\"1\":{\"515\":1}}],[\"变量和类型的定义或声明\",{\"1\":{\"510\":1}}],[\"变量和变量的值是不同的位置\",{\"1\":{\"329\":1}}],[\"变量和变量的值存在同一个位置\",{\"1\":{\"329\":1}}],[\"变量\",{\"0\":{\"514\":1},\"1\":{\"483\":1,\"490\":1,\"492\":1,\"504\":1,\"506\":2,\"508\":1,\"509\":1,\"551\":2,\"567\":1,\"573\":2,\"574\":1,\"624\":1,\"629\":1,\"638\":1,\"640\":1,\"662\":1,\"668\":1,\"678\":3,\"695\":1,\"700\":1,\"705\":1}}],[\"变量没有设置\",{\"1\":{\"483\":1}}],[\"变量不再被引用\",{\"1\":{\"442\":1}}],[\"变量一旦逃逸会导致性能开销变大\",{\"1\":{\"439\":1}}],[\"变量从栈逃逸到堆上\",{\"1\":{\"439\":1}}],[\"变量为准\",{\"1\":{\"432\":1}}],[\"变量被误回收\",{\"1\":{\"429\":1}}],[\"变量值也会被修改\",{\"1\":{\"354\":1}}],[\"变量值出现更改\",{\"1\":{\"354\":1}}],[\"变量指向是同一个数组\",{\"1\":{\"354\":1}}],[\"变量区分值类型和引用类型\",{\"1\":{\"329\":1}}],[\"变为顺序\",{\"1\":{\"210\":1}}],[\"反面的用例\",{\"1\":{\"689\":1}}],[\"反过来与其对应的是使用\",{\"1\":{\"686\":1}}],[\"反序列化\",{\"0\":{\"683\":1},\"1\":{\"682\":1}}],[\"反映元素个数的\",{\"1\":{\"662\":1}}],[\"反斜杠自身\",{\"1\":{\"532\":1}}],[\"反斜杠\",{\"1\":{\"513\":1}}],[\"反之亦然\",{\"1\":{\"501\":1,\"682\":1}}],[\"反之\",{\"1\":{\"445\":1}}],[\"反正有各种结合实际的问题\",{\"1\":{\"394\":1}}],[\"反引号\",{\"1\":{\"333\":1}}],[\"反引号的区别\",{\"0\":{\"333\":1}}],[\"反射结构\",{\"0\":{\"670\":1}}],[\"反射中有些内容是需要用地址去改变它的状态的\",{\"1\":{\"669\":1}}],[\"反射包的\",{\"1\":{\"668\":2}}],[\"反射是通过检查一个接口的值\",{\"1\":{\"668\":1}}],[\"反射是用程序检查其所拥有的结构\",{\"1\":{\"668\":1}}],[\"反射是指计算机程序在运行时\",{\"1\":{\"328\":1}}],[\"反射可以从接口值反射到对象\",{\"1\":{\"668\":1}}],[\"反射可以在运行时检查类型和变量\",{\"1\":{\"668\":1}}],[\"反射可以用来修改一个变量的值\",{\"1\":{\"328\":1}}],[\"反射可以通过反射对象\",{\"1\":{\"328\":1}}],[\"反射将接口变量转换成反射对象\",{\"1\":{\"328\":1}}],[\"反射tagblog\",{\"1\":{\"328\":1}}],[\"反射原理是什么\",{\"0\":{\"328\":1}}],[\"反范式化的缺点是\",{\"1\":{\"283\":1}}],[\"反范式化的目标是适当增加冗余列\",{\"1\":{\"283\":1}}],[\"常用api\",{\"0\":{\"725\":1}}],[\"常用的正则匹配规则\",{\"0\":{\"723\":1}}],[\"常用的\",{\"1\":{\"605\":1}}],[\"常用于\",{\"1\":{\"574\":1}}],[\"常用英文字符使用\",{\"1\":{\"557\":1}}],[\"常用来处理unicode或utf\",{\"1\":{\"327\":1}}],[\"常用来处理ascii字符\",{\"1\":{\"327\":1}}],[\"常量之所以为常量就是恒定不变的量\",{\"1\":{\"513\":1}}],[\"常量还可以用作枚举\",{\"1\":{\"513\":1}}],[\"常量也允许使用并行赋值的形式\",{\"1\":{\"513\":1}}],[\"常量的值必须是能够在编译时就能够确定的\",{\"1\":{\"513\":1}}],[\"常量的定义格式\",{\"1\":{\"513\":1}}],[\"常量使用关键字\",{\"1\":{\"513\":1}}],[\"常量\",{\"0\":{\"513\":1},\"1\":{\"504\":1,\"508\":1,\"515\":1}}],[\"常问\",{\"0\":{\"360\":1}}],[\"常见的陷阱与错误\",{\"0\":{\"711\":1}}],[\"常见的同步机制\",{\"1\":{\"707\":1}}],[\"常见的分库分表中间件\",{\"0\":{\"251\":1}}],[\"常见可用于整数和浮点数的二元运算符有\",{\"1\":{\"527\":1}}],[\"常见数据库比较\",{\"0\":{\"296\":1}}],[\"常见问题\",{\"1\":{\"250\":1,\"477\":1}}],[\"奶酪的博客\",{\"1\":{\"325\":1}}],[\"避坑指南\",{\"1\":{\"325\":1}}],[\"避免了线程不安全\",{\"1\":{\"803\":1}}],[\"避免了行级别的数据迁移\",{\"1\":{\"258\":1}}],[\"避免程序运行过程中\",{\"1\":{\"429\":1}}],[\"避免频繁的创建\",{\"1\":{\"411\":1}}],[\"避免频繁扩容\",{\"1\":{\"354\":1}}],[\"避免在每次调用方法时复制该值\",{\"1\":{\"382\":1}}],[\"避免重复造轮子\",{\"1\":{\"320\":1}}],[\"避免冲击主库\",{\"1\":{\"256\":1}}],[\"释放到指定的限制\",{\"1\":{\"638\":1}}],[\"释放\",{\"1\":{\"431\":1}}],[\"释放内存时\",{\"1\":{\"346\":2}}],[\"释放资源\",{\"1\":{\"325\":1,\"424\":1}}],[\"释放游标\",{\"1\":{\"168\":2,\"204\":2}}],[\"答案是\",{\"1\":{\"376\":1}}],[\"答案并不总是清晰的\",{\"1\":{\"75\":1}}],[\"答\",{\"1\":{\"324\":1,\"331\":1,\"332\":1,\"348\":1,\"349\":1,\"350\":1,\"351\":1,\"354\":1,\"363\":1,\"394\":1,\"405\":1,\"409\":1,\"418\":1,\"423\":1,\"429\":1,\"438\":1,\"439\":1}}],[\"懂的大佬帮忙补充下\",{\"1\":{\"322\":1}}],[\"给已经关闭的通道发送或者再次关闭都会导致运行时的\",{\"1\":{\"709\":1}}],[\"给通道使用\",{\"0\":{\"708\":1}}],[\"给一些通道设置不同的容量\",{\"1\":{\"703\":1}}],[\"给一个带缓冲的通道发送数据是不会阻塞的\",{\"1\":{\"703\":1}}],[\"给一个变量赋值\",{\"1\":{\"549\":1}}],[\"给一个已经关闭的\",{\"1\":{\"400\":1}}],[\"给一个\",{\"1\":{\"400\":1}}],[\"给一个函数添加一个接收者\",{\"1\":{\"380\":1}}],[\"给程序\",{\"1\":{\"701\":1}}],[\"给\",{\"1\":{\"660\":1,\"703\":1}}],[\"给方法合适的名字和签名\",{\"1\":{\"658\":1}}],[\"给这个结构体定义一个方法\",{\"1\":{\"651\":1}}],[\"给出了一个非常简单的例子\",{\"1\":{\"640\":1}}],[\"给出了一个关于字符串的例子\",{\"1\":{\"591\":1}}],[\"给所有团队成员连续文档的支持\",{\"1\":{\"628\":1}}],[\"给定结构体类型\",{\"1\":{\"660\":1}}],[\"给定一个切片\",{\"1\":{\"593\":1}}],[\"给定\",{\"1\":{\"588\":1,\"603\":1}}],[\"给定切片\",{\"1\":{\"585\":1,\"590\":1}}],[\"给定项的切片索引可能比相关数组的相同元素的索引小\",{\"1\":{\"585\":1}}],[\"给予我巨大的帮助\",{\"1\":{\"467\":1}}],[\"给变量分配内存\",{\"1\":{\"322\":1}}],[\"给需要评估的\",{\"1\":{\"84\":1}}],[\"共同开发了\",{\"1\":{\"469\":1}}],[\"共同点\",{\"1\":{\"322\":1}}],[\"共享内存\",{\"1\":{\"427\":1}}],[\"共享锁\",{\"1\":{\"232\":1}}],[\"⑥仍然保留c\",{\"1\":{\"321\":1}}],[\"⑤struct没有构造和析构\",{\"1\":{\"321\":1}}],[\"④\",{\"1\":{\"321\":1}}],[\"③错误处理原始\",{\"1\":{\"321\":1}}],[\"②不允许有未使用的包或变量\",{\"1\":{\"321\":1}}],[\"①右大括号不允许换行\",{\"1\":{\"321\":1}}],[\"貌似没有什么值得称道的\",{\"1\":{\"320\":1}}],[\"测试用例\",{\"1\":{\"847\":1}}],[\"测试代码不能在\",{\"1\":{\"689\":1}}],[\"测试代码中必须包含以\",{\"1\":{\"689\":1}}],[\"测试函数必须有这种形式的头部\",{\"1\":{\"689\":1}}],[\"测试文件中必须导入\",{\"1\":{\"689\":1}}],[\"测试程序必须属于被测试的包\",{\"1\":{\"689\":1}}],[\"测试了它的返回值\",{\"1\":{\"687\":1}}],[\"测试输出\",{\"1\":{\"682\":2}}],[\"测试键值对是否存在及删除元素\",{\"0\":{\"608\":1}}],[\"测试方法测试当整型值是偶数时的情况\",{\"1\":{\"593\":1}}],[\"测试多返回值函数的错误\",{\"0\":{\"550\":1}}],[\"测试结果的可比性还要根据测试目标来区别\",{\"1\":{\"499\":1}}],[\"测试者对程序编写的手法在一定程度也会影响结果的公平性\",{\"1\":{\"499\":1}}],[\"测试安装\",{\"1\":{\"483\":1}}],[\"测试源码文件\",{\"1\":{\"449\":1}}],[\"测试源码\",{\"1\":{\"449\":1}}],[\"测试\",{\"1\":{\"320\":1,\"608\":1,\"631\":1,\"662\":1,\"689\":1}}],[\"测试环境数据库\",{\"1\":{\"296\":1}}],[\"成对标识算法\",{\"0\":{\"965\":1}}],[\"成对假名标识符\",{\"1\":{\"868\":1}}],[\"成为了外层类型的方法\",{\"1\":{\"655\":1}}],[\"成为可能\",{\"1\":{\"320\":1}}],[\"成功响应中的参数定义在oauth\",{\"1\":{\"883\":1}}],[\"成功的测试则直接返回\",{\"1\":{\"689\":1}}],[\"成功执行的话\",{\"1\":{\"550\":1}}],[\"成功地去除了这个弊端\",{\"1\":{\"473\":1}}],[\"成熟的数据库都会实现一些基本功能\",{\"1\":{\"259\":1}}],[\"微服务治理中间件可无缝集成到其它现有框架使用\",{\"1\":{\"459\":1}}],[\"微服务\",{\"1\":{\"320\":1,\"461\":1,\"462\":1}}],[\"微软\",{\"1\":{\"296\":1}}],[\"像上图这样不安全的\",{\"1\":{\"854\":1}}],[\"像的名称\",{\"1\":{\"782\":1}}],[\"像本例中只有一个\",{\"1\":{\"700\":1}}],[\"像下面这样\",{\"1\":{\"688\":1}}],[\"像这样\",{\"1\":{\"676\":1,\"681\":1,\"689\":1,\"705\":1,\"708\":1}}],[\"像前一节\",{\"1\":{\"656\":1}}],[\"像字段一样\",{\"1\":{\"655\":1}}],[\"像例子\",{\"1\":{\"653\":1}}],[\"像切片\",{\"1\":{\"563\":1}}],[\"像数组\",{\"1\":{\"516\":1}}],[\"像面向对象语言中的\",{\"1\":{\"506\":2}}],[\"像垃圾回收或并发语言支持这类东西\",{\"1\":{\"467\":1}}],[\"像在统计学方面\",{\"1\":{\"499\":1}}],[\"像在\",{\"1\":{\"410\":1}}],[\"像内置的引用类型\",{\"1\":{\"382\":1}}],[\"像\",{\"1\":{\"320\":1,\"349\":2,\"473\":1,\"512\":1,\"614\":1,\"627\":1,\"640\":2,\"662\":1,\"671\":1,\"672\":1,\"689\":1}}],[\"研发机器运行正常\",{\"1\":{\"320\":1}}],[\"二者的目标也很相近\",{\"1\":{\"663\":1}}],[\"二者处于不同的包中\",{\"1\":{\"662\":1}}],[\"二者需要权衡\",{\"1\":{\"231\":1}}],[\"二叉树中每个节点最多能链接至两个节点\",{\"1\":{\"640\":1}}],[\"二叉树\",{\"1\":{\"640\":1}}],[\"二元运算符的运算方向均是从左至右\",{\"1\":{\"529\":1}}],[\"二元运算符\",{\"1\":{\"525\":1}}],[\"二的补码\",{\"1\":{\"523\":1}}],[\"二进制协议\",{\"1\":{\"462\":1}}],[\"二进制文件\",{\"1\":{\"320\":1}}],[\"二\",{\"0\":{\"352\":1}}],[\"网上其实很多总结的是\",{\"1\":{\"354\":1}}],[\"网络\",{\"0\":{\"710\":1},\"1\":{\"693\":1}}],[\"网络连接\",{\"1\":{\"682\":1}}],[\"网络连接或以\",{\"1\":{\"662\":1}}],[\"网络数据的基本操作\",{\"1\":{\"623\":1}}],[\"网络流等具有不确定因素的输出对象时\",{\"1\":{\"550\":1}}],[\"网络轮询器\",{\"1\":{\"330\":1}}],[\"网络轮询器使用系统线程\",{\"1\":{\"330\":1}}],[\"网络层切换能力hertz\",{\"1\":{\"461\":1}}],[\"网络层\",{\"1\":{\"320\":1}}],[\"网站\",{\"1\":{\"635\":1}}],[\"网站是同一家公司的关联服务\",{\"1\":{\"28\":1}}],[\"网站和版本控制系统的其他的选择\",{\"1\":{\"636\":1}}],[\"网站和\",{\"1\":{\"28\":1}}],[\"强可扩展的特点\",{\"1\":{\"462\":1}}],[\"强大的标准库\",{\"1\":{\"320\":1}}],[\"强制类型转换\",{\"1\":{\"766\":1}}],[\"强制用户使用工厂方法\",{\"1\":{\"642\":1}}],[\"强制重新编译所有涉及到的包\",{\"1\":{\"449\":1}}],[\"强制事务串行执行\",{\"1\":{\"239\":1}}],[\"强制访问控制模型\",{\"1\":{\"62\":1}}],[\"强制访问控制\",{\"1\":{\"60\":1}}],[\"血统纯正\",{\"1\":{\"320\":1}}],[\"协程等待\",{\"1\":{\"705\":1}}],[\"协程中用通道输出结果\",{\"0\":{\"704\":1}}],[\"协程会合\",{\"1\":{\"702\":1}}],[\"协程会随着程序的结束而消亡\",{\"1\":{\"697\":1}}],[\"协程或函数中的\",{\"1\":{\"701\":1}}],[\"协程或者函数中的\",{\"1\":{\"701\":1}}],[\"协程比协程更强大\",{\"1\":{\"698\":1}}],[\"协程通过在通道\",{\"1\":{\"705\":1}}],[\"协程通过让出和恢复操作来通信\",{\"1\":{\"698\":1}}],[\"协程通过通道来通信\",{\"1\":{\"698\":1}}],[\"协程一般来说不是这样的\",{\"1\":{\"698\":1}}],[\"协程意味着并行\",{\"1\":{\"698\":1}}],[\"协程有些相似\",{\"1\":{\"698\":1}}],[\"协程有什么区别\",{\"0\":{\"408\":1}}],[\"协程更有用的一个例子应该是在一个非常长的数组中查找一个元素\",{\"1\":{\"697\":1}}],[\"协程可以使用共享变量来通信\",{\"1\":{\"699\":1}}],[\"协程可以通过调用\",{\"1\":{\"697\":1}}],[\"协程可以在程序初始化的过程中运行\",{\"1\":{\"694\":1}}],[\"协程可以运行在多个操作系统线程之间\",{\"1\":{\"694\":1}}],[\"协程是独立执行的\",{\"1\":{\"699\":1}}],[\"协程是独立的处理单元\",{\"1\":{\"697\":1}}],[\"协程是通过使用关键字\",{\"1\":{\"694\":1}}],[\"协程是轻量的\",{\"1\":{\"694\":1}}],[\"协程是根据一个或多个线程的可用性\",{\"1\":{\"694\":1}}],[\"协程的结束\",{\"1\":{\"697\":1}}],[\"协程的数量\",{\"1\":{\"696\":1}}],[\"协程的栈会根据需要进行伸缩\",{\"1\":{\"694\":1}}],[\"协程的设计隐藏了许多线程创建和管理方面的复杂工作\",{\"1\":{\"694\":1}}],[\"协程的调度器由用户应用程序提供\",{\"1\":{\"408\":1}}],[\"协程工作在相同的地址空间中\",{\"1\":{\"694\":1}}],[\"协程调度器在\",{\"1\":{\"694\":1}}],[\"协程调度器按照调度策略把协程调度到线程中运行\",{\"1\":{\"408\":1}}],[\"协程池\",{\"1\":{\"426\":1}}],[\"协程不受操作系统的调度\",{\"1\":{\"408\":1}}],[\"协程占用资源少\",{\"1\":{\"320\":1}}],[\"协程\",{\"0\":{\"693\":1,\"698\":1},\"1\":{\"320\":1,\"408\":1,\"694\":1,\"698\":3,\"699\":1,\"705\":1,\"709\":1}}],[\"协议之上的一个简单的身份层\",{\"1\":{\"866\":1}}],[\"协议使用\",{\"1\":{\"462\":1}}],[\"协议格式类似\",{\"1\":{\"462\":1}}],[\"协议支持\",{\"1\":{\"461\":1,\"462\":1}}],[\"协议能够严格保障事务\",{\"1\":{\"241\":1}}],[\"协议的分布式事务并不是最佳选择\",{\"1\":{\"241\":1}}],[\"协议的分布式事务\",{\"1\":{\"241\":1}}],[\"库来解析命令行\",{\"1\":{\"692\":1}}],[\"库函数通常必须返回某种错误提示给主调函数\",{\"1\":{\"687\":1}}],[\"库的原则是即使在包的内部使用了\",{\"1\":{\"689\":1}}],[\"库的\",{\"1\":{\"638\":1}}],[\"库中有哪些方法可以调用\",{\"1\":{\"638\":1}}],[\"库中基本上有绝大多数常用的库\",{\"1\":{\"320\":1}}],[\"库源码包对应的\",{\"1\":{\"450\":1}}],[\"库源码文件\",{\"1\":{\"449\":1}}],[\"库源码\",{\"1\":{\"449\":1}}],[\"库麻雀虽小五脏俱全\",{\"1\":{\"320\":1}}],[\"库\",{\"1\":{\"317\":1,\"502\":1}}],[\"里放的每个元素可以是不同类型的变量\",{\"1\":{\"664\":1}}],[\"里能放任何类型的变量\",{\"1\":{\"664\":1}}],[\"里找到\",{\"1\":{\"662\":1}}],[\"里是否有一个包含\",{\"1\":{\"662\":1}}],[\"里的函数带有一个\",{\"1\":{\"564\":1}}],[\"里的\",{\"1\":{\"563\":1}}],[\"里的源码文件以及它们的依赖包\",{\"1\":{\"449\":1}}],[\"里氏替换原则\",{\"1\":{\"316\":1}}],[\"里面就包含有\",{\"1\":{\"689\":1}}],[\"里面包含的所有类型都有一个对应的描述\",{\"1\":{\"686\":1}}],[\"里面存放读取到的内容\",{\"1\":{\"678\":1}}],[\"里面函数重载是不被允许的\",{\"1\":{\"561\":1}}],[\"里面有三种类型的函数\",{\"1\":{\"561\":1}}],[\"里面有特殊含义\",{\"1\":{\"37\":1}}],[\"里面能通过无缓冲的\",{\"1\":{\"423\":1}}],[\"里面还能通过有缓冲的\",{\"1\":{\"423\":1}}],[\"里面阻塞主要分为以下\",{\"1\":{\"330\":1}}],[\"里面的基本代码块\",{\"1\":{\"560\":1}}],[\"里面的\",{\"1\":{\"329\":1}}],[\"里面指定的签名算法\",{\"1\":{\"36\":1}}],[\"里面保存相关数据\",{\"1\":{\"28\":1}}],[\"煎鱼其实不是煎鱼\",{\"1\":{\"316\":1}}],[\"煎鱼是煎鱼\",{\"1\":{\"316\":1}}],[\"煎鱼进脑子了\",{\"1\":{\"315\":1}}],[\"脑子进煎鱼了\",{\"1\":{\"315\":1}}],[\"去除掉\",{\"1\":{\"541\":1}}],[\"去除左边或者右边的空格\",{\"1\":{\"147\":1,\"180\":1}}],[\"去掉尾部的等号\",{\"1\":{\"855\":2}}],[\"去掉\",{\"1\":{\"496\":1}}],[\"去查看示例代码吧\",{\"1\":{\"455\":1}}],[\"去空转\",{\"1\":{\"421\":1}}],[\"去执行一个\",{\"1\":{\"330\":1}}],[\"去给煎鱼点赞~\",{\"1\":{\"315\":1}}],[\"食肉动物\",{\"1\":{\"315\":2}}],[\"食草动物\",{\"1\":{\"315\":2}}],[\"没什么影响\",{\"1\":{\"383\":1}}],[\"没法通过外部方法\",{\"1\":{\"314\":1}}],[\"没有使用令牌端点\",{\"1\":{\"889\":1}}],[\"没有地区指定\",{\"1\":{\"873\":2}}],[\"没有向用户代理显示令牌\",{\"1\":{\"869\":1}}],[\"没有查询或片段组件\",{\"1\":{\"868\":1,\"869\":1}}],[\"没有signatures\",{\"1\":{\"857\":1}}],[\"没有管理签发方的中央机构\",{\"1\":{\"852\":1}}],[\"没有lazy\",{\"1\":{\"803\":1}}],[\"没有传入闭合函数\",{\"1\":{\"705\":1}}],[\"没有输入等\",{\"1\":{\"689\":1}}],[\"没有类\",{\"1\":{\"671\":1,\"676\":1}}],[\"没有字段\",{\"1\":{\"662\":1}}],[\"没有实现它\",{\"1\":{\"662\":1}}],[\"没有实现\",{\"1\":{\"662\":1,\"671\":1}}],[\"没有被改变\",{\"1\":{\"653\":1}}],[\"没有被关闭\",{\"1\":{\"438\":1}}],[\"没有办法来解决这种问题引起的二义性\",{\"1\":{\"649\":1}}],[\"没有像\",{\"1\":{\"640\":1,\"687\":1}}],[\"没有权限\",{\"1\":{\"631\":1}}],[\"没有参数的函数通常被称为\",{\"1\":{\"562\":1}}],[\"没有泛型\",{\"1\":{\"561\":1}}],[\"没有重载意味着只是一个简单的函数调度\",{\"1\":{\"561\":1}}],[\"没有任何安全或隐私问题\",{\"1\":{\"848\":1}}],[\"没有任何输出\",{\"1\":{\"559\":1}}],[\"没有任何限制\",{\"1\":{\"212\":1}}],[\"没有为多返回值的函数准备足够的变量来存放结果\",{\"1\":{\"550\":1}}],[\"没有\",{\"1\":{\"512\":1,\"523\":1,\"578\":1}}],[\"没有不必要的代码\",{\"1\":{\"506\":1}}],[\"没有废物\",{\"1\":{\"467\":1}}],[\"没有反射\",{\"1\":{\"455\":1}}],[\"没有其它的等待锁的\",{\"1\":{\"420\":1}}],[\"没有定义任何函数\",{\"1\":{\"389\":1}}],[\"没有项目经常可能说不清\",{\"0\":{\"331\":1}}],[\"没有太多限制\",{\"1\":{\"251\":1}}],[\"没有互斥关系\",{\"1\":{\"234\":1}}],[\"没有意义\",{\"1\":{\"211\":1}}],[\"没有一种一刀切的方法来定义角色\",{\"1\":{\"75\":1}}],[\"没有进行加密\",{\"1\":{\"39\":1}}],[\"类的静态属性只会在第一次加载类的时候初始化\",{\"1\":{\"803\":1}}],[\"类的方法在哪里呢\",{\"1\":{\"651\":1}}],[\"类结构\",{\"0\":{\"772\":1}}],[\"类包含它们两者\",{\"1\":{\"671\":1}}],[\"类型显示一致的身份验证和同意ui\",{\"1\":{\"873\":1}}],[\"类型实际上是一个接口\",{\"1\":{\"686\":1}}],[\"类型对应如下\",{\"1\":{\"682\":1}}],[\"类型对应的零值\",{\"1\":{\"335\":1}}],[\"类型只拥有自己所在包中定义的方法\",{\"1\":{\"676\":1}}],[\"类型只是简单地包含一个累积的消息\",{\"1\":{\"656\":1}}],[\"类型可以通过继承多个接口来提供像多重继承一样的特性\",{\"1\":{\"676\":1}}],[\"类型可以是结构体或者任何用户自定义类型\",{\"1\":{\"659\":1}}],[\"类型可以是基本类型\",{\"1\":{\"509\":1}}],[\"类型要实现某个接口\",{\"1\":{\"673\":1}}],[\"类型变量的集合\",{\"1\":{\"664\":1}}],[\"类型变量的方法\",{\"1\":{\"625\":1}}],[\"类型元素的切片\",{\"1\":{\"664\":1}}],[\"类型测试和转换会非常有用\",{\"1\":{\"662\":1}}],[\"类型未知的数据时\",{\"1\":{\"662\":1}}],[\"类型作为参数的函数\",{\"1\":{\"662\":1}}],[\"类型不需要显式声明它实现了某个接口\",{\"1\":{\"662\":1}}],[\"类型不被局限于常量或整数\",{\"1\":{\"551\":1}}],[\"类型就是类\",{\"1\":{\"659\":1}}],[\"类型来支持常用\",{\"1\":{\"686\":1}}],[\"类型来包含日志功能\",{\"1\":{\"656\":1}}],[\"类型来表示\",{\"1\":{\"531\":1}}],[\"类型一个\",{\"1\":{\"655\":1}}],[\"类型关联的方法不写在类型结构里面\",{\"1\":{\"652\":1}}],[\"类型在其他的\",{\"1\":{\"651\":1}}],[\"类型在这里的作用可以看作是一种函数\",{\"1\":{\"511\":1}}],[\"类型上创建方法\",{\"1\":{\"655\":1}}],[\"类型上的方法\",{\"1\":{\"655\":1}}],[\"类型上定义方法会得到一个编译错误\",{\"1\":{\"651\":1}}],[\"类型上调用方法\",{\"1\":{\"439\":1}}],[\"类型和接口是松耦合的\",{\"1\":{\"676\":1}}],[\"类型和方法之间的关联由接收者来建立\",{\"1\":{\"652\":1}}],[\"类型和作用在它上面定义的方法必须在同一个包里定义\",{\"1\":{\"651\":1}}],[\"类型和函数组成\",{\"1\":{\"504\":1}}],[\"类型分别是\",{\"1\":{\"648\":1}}],[\"类型都有相同的底层类型\",{\"1\":{\"640\":1}}],[\"类型都可以被使用\",{\"1\":{\"501\":1}}],[\"类型时\",{\"1\":{\"640\":1}}],[\"类型整数\",{\"1\":{\"626\":1}}],[\"类型这样的大数进行计算时\",{\"1\":{\"626\":1}}],[\"类型进行浮点运算\",{\"1\":{\"626\":1}}],[\"类型数据的问题\",{\"1\":{\"625\":1}}],[\"类型安全\",{\"1\":{\"614\":1}}],[\"类型最多只能计算到\",{\"1\":{\"571\":1}}],[\"类型浮点数的平方根\",{\"1\":{\"564\":1}}],[\"类型映射某个时区的时间\",{\"1\":{\"546\":1}}],[\"类型为\",{\"1\":{\"546\":1,\"574\":1,\"678\":1}}],[\"类型表示两个连续时刻所相差的纳秒数\",{\"1\":{\"546\":1}}],[\"类型所占的位数\",{\"1\":{\"545\":1}}],[\"类型相关的函数\",{\"1\":{\"531\":1}}],[\"类型是完全动态的\",{\"1\":{\"667\":1}}],[\"类型是结构体时\",{\"1\":{\"653\":1}}],[\"类型是非线程安全的\",{\"1\":{\"625\":1}}],[\"类型是不存在锁的机制来实现这种效果\",{\"1\":{\"625\":1}}],[\"类型是\",{\"1\":{\"531\":1}}],[\"类型别名得到的新类型并非和原类型完全相同\",{\"1\":{\"530\":1}}],[\"类型别名\",{\"0\":{\"530\":1}}],[\"类型的函数\",{\"1\":{\"689\":1}}],[\"类型的错误\",{\"1\":{\"688\":1}}],[\"类型的指针可调用方法\",{\"1\":{\"682\":1}}],[\"类型的指针来表示的\",{\"1\":{\"678\":1}}],[\"类型的指针参数\",{\"1\":{\"661\":1}}],[\"类型的语言在这种情况下则需要适应整个类层次结构的变化\",{\"1\":{\"676\":1}}],[\"类型的实参动态确定所有参数的类型\",{\"1\":{\"675\":1}}],[\"类型的实际值\",{\"1\":{\"668\":1}}],[\"类型的值\",{\"1\":{\"668\":1}}],[\"类型的参数\",{\"1\":{\"662\":1,\"663\":1,\"682\":1,\"689\":1}}],[\"类型的数组\",{\"1\":{\"662\":1}}],[\"类型的数据切片\",{\"1\":{\"665\":1}}],[\"类型的数据\",{\"1\":{\"530\":1,\"625\":1}}],[\"类型的\",{\"0\":{\"660\":1},\"1\":{\"675\":1,\"678\":1,\"682\":1}}],[\"类型的匿名字段\",{\"1\":{\"655\":1}}],[\"类型的代码和绑定在它上面的方法的代码可以不放置在一起\",{\"1\":{\"651\":1}}],[\"类型的临时变量来存放中间结果\",{\"1\":{\"626\":1}}],[\"类型的切片变量\",{\"1\":{\"681\":1}}],[\"类型的切片\",{\"0\":{\"610\":1},\"1\":{\"602\":2,\"610\":1}}],[\"类型的切片排序\",{\"1\":{\"600\":1}}],[\"类型的因子\",{\"1\":{\"593\":1}}],[\"类型的未命名变量的和与平均值\",{\"1\":{\"591\":1}}],[\"类型的整数作为参数\",{\"1\":{\"574\":1}}],[\"类型的大小为\",{\"1\":{\"571\":1}}],[\"类型的返回值\",{\"1\":{\"563\":1}}],[\"类型的变量赋值给一个接口类型的变量\",{\"1\":{\"662\":1}}],[\"类型的变量\",{\"1\":{\"567\":1,\"662\":3,\"668\":1,\"686\":1}}],[\"类型的变量来代替作为第二个返回值\",{\"1\":{\"550\":1}}],[\"类型的变量从\",{\"1\":{\"501\":1}}],[\"类型的零值为长度为零的字符串\",{\"1\":{\"532\":1}}],[\"类型的新名称\",{\"1\":{\"530\":1}}],[\"类型的局部变量\",{\"1\":{\"515\":1}}],[\"类型或者其他类型的切片\",{\"1\":{\"607\":1}}],[\"类型或函数\",{\"1\":{\"515\":1}}],[\"类型或方法\",{\"1\":{\"504\":1}}],[\"类型定义了某个变量的值的集合与可对其进行操作的集合\",{\"1\":{\"509\":1}}],[\"类型断言总是在运行时才执行\",{\"1\":{\"664\":1}}],[\"类型断言中的一个特例\",{\"1\":{\"662\":1}}],[\"类型断言可能是无效的\",{\"1\":{\"662\":1}}],[\"类型断言\",{\"0\":{\"766\":1},\"1\":{\"662\":1}}],[\"类型断言是对接口变量进行的操作\",{\"1\":{\"387\":1}}],[\"类型断言本质都是把一个类型转换成另外一个类型\",{\"1\":{\"387\":1}}],[\"类型断言不匹配\",{\"1\":{\"335\":1}}],[\"类型转换和类型断言有些相似\",{\"1\":{\"389\":1}}],[\"类型转换和断言的区别\",{\"0\":{\"387\":1}}],[\"类型转换的语法为\",{\"1\":{\"388\":1}}],[\"类型转换\",{\"0\":{\"388\":1,\"511\":1},\"1\":{\"387\":1}}],[\"类型\",{\"0\":{\"509\":1},\"1\":{\"333\":1,\"383\":2,\"390\":1,\"490\":1,\"501\":1,\"506\":1,\"511\":3,\"523\":2,\"578\":1,\"585\":1,\"590\":1,\"612\":1,\"626\":1,\"628\":1,\"640\":2,\"651\":1,\"653\":1,\"654\":1,\"655\":1,\"656\":2,\"659\":1,\"660\":1,\"662\":7,\"663\":1,\"664\":1,\"668\":2,\"674\":1,\"682\":3,\"686\":1,\"688\":1}}],[\"类型吗\",{\"0\":{\"327\":1}}],[\"类型溢出问题\",{\"0\":{\"326\":1}}],[\"类型化\",{\"1\":{\"317\":1}}],[\"类\",{\"0\":{\"771\":1},\"1\":{\"312\":1,\"590\":1,\"659\":1,\"663\":1}}],[\"类似rest的方式获得最终用户的基本资料信息\",{\"1\":{\"865\":1,\"866\":1}}],[\"类似这种情况\",{\"1\":{\"709\":1}}],[\"类似地\",{\"1\":{\"662\":1}}],[\"类似使用\",{\"1\":{\"640\":1}}],[\"类似的\",{\"1\":{\"595\":1,\"600\":1,\"678\":1}}],[\"类似的机制\",{\"1\":{\"471\":1}}],[\"类似栈\",{\"1\":{\"568\":1}}],[\"类似其它语言中的\",{\"1\":{\"555\":1}}],[\"类似于指针传参\",{\"1\":{\"380\":1}}],[\"类似于\",{\"1\":{\"380\":1,\"590\":1,\"671\":1,\"686\":1}}],[\"类似\",{\"1\":{\"234\":1,\"487\":1,\"498\":1,\"662\":1,\"665\":1,\"671\":1}}],[\"未加密\",{\"1\":{\"850\":1}}],[\"未加密的\",{\"1\":{\"850\":1}}],[\"未发生错误\",{\"1\":{\"550\":1}}],[\"未定义类型的常量会在必要时刻根据上下文来获得相关类型\",{\"1\":{\"513\":1}}],[\"未初始化的通道的值是\",{\"1\":{\"699\":1}}],[\"未初始化的\",{\"1\":{\"605\":1}}],[\"未初始化的map是nil\",{\"1\":{\"362\":1}}],[\"未初始化\",{\"1\":{\"335\":1,\"362\":1}}],[\"未装箱的\",{\"1\":{\"312\":1}}],[\"未提交读\",{\"1\":{\"239\":2}}],[\"甚至是结构体本身\",{\"1\":{\"640\":1}}],[\"甚至是内置类型\",{\"1\":{\"312\":1}}],[\"甚至没有编译\",{\"1\":{\"627\":1}}],[\"甚至更简单的\",{\"1\":{\"585\":1}}],[\"甚至更加复杂\",{\"1\":{\"467\":1}}],[\"甚至中断程序\",{\"1\":{\"550\":1}}],[\"甚至相同的程序在不同的机器上执行后也会有不同的内存地址\",{\"1\":{\"516\":1}}],[\"甚至有效的\",{\"1\":{\"501\":1}}],[\"甚至像使用脚本一样使用它\",{\"1\":{\"476\":1}}],[\"甚至可以在通道两端互相阻塞对方\",{\"1\":{\"702\":1}}],[\"甚至可以\",{\"1\":{\"699\":1}}],[\"甚至可以把它定义为私有接口\",{\"1\":{\"672\":1}}],[\"甚至可以是函数类型\",{\"1\":{\"651\":1}}],[\"甚至可以是一个自定义结构体的指针类型\",{\"1\":{\"365\":1}}],[\"甚至可以与\",{\"1\":{\"474\":1}}],[\"甚至支持自定义构建协议解析逻辑\",{\"1\":{\"461\":1}}],[\"甚至在很小的程度上也会出现这种情况\",{\"1\":{\"75\":1}}],[\"接受更多的值\",{\"1\":{\"709\":1}}],[\"接受\",{\"1\":{\"587\":1}}],[\"接受一个指向\",{\"1\":{\"653\":1}}],[\"接受一个\",{\"1\":{\"574\":1,\"664\":1,\"671\":1}}],[\"接着\",{\"1\":{\"678\":1,\"680\":1}}],[\"接着练习\",{\"1\":{\"662\":1}}],[\"接着定一个函数\",{\"1\":{\"662\":1}}],[\"接着定义一个使用\",{\"1\":{\"662\":1}}],[\"接着创建一个\",{\"1\":{\"662\":1}}],[\"接着是按照\",{\"1\":{\"510\":1}}],[\"接着来看一下\",{\"1\":{\"383\":1}}],[\"接下来协程会被分割\",{\"1\":{\"696\":1}}],[\"接下来我们创建主程序\",{\"1\":{\"631\":1}}],[\"接下来我们来针对上面的代码对调度器里面的结构做一个分析\",{\"1\":{\"415\":1}}],[\"接下来按照英文名排序后再打印出来\",{\"1\":{\"612\":1}}],[\"接下来当我们调用\",{\"1\":{\"605\":1}}],[\"接下来的例子阐明了第一种方法\",{\"1\":{\"583\":1}}],[\"接下来会对这三个集成开发环境做更加详细的说明\",{\"1\":{\"491\":1}}],[\"接收方可以通过保存一份与信息相关的公开密钥副本来验证信息的真实性\",{\"1\":{\"860\":1}}],[\"接收操作是阻塞的\",{\"1\":{\"701\":1}}],[\"接收操作在对方准备好之前是阻塞的\",{\"1\":{\"701\":1}}],[\"接收\",{\"1\":{\"700\":2,\"703\":1}}],[\"接收的参数是字符串\",{\"1\":{\"680\":1}}],[\"接收的是\",{\"1\":{\"346\":1}}],[\"接收不定数量的\",{\"1\":{\"676\":1}}],[\"接收一个做任意类型的参数\",{\"1\":{\"689\":1}}],[\"接收一个或多个格式占位符的格式化字符串和相应数量的占位变量\",{\"1\":{\"689\":1}}],[\"接收一个\",{\"1\":{\"671\":1,\"689\":1,\"859\":1}}],[\"接收者永远不会需要\",{\"1\":{\"709\":1}}],[\"接收者就阻塞了\",{\"1\":{\"701\":1}}],[\"接收者是指针的方法不可以通过值调用\",{\"1\":{\"662\":1}}],[\"接收者是值的方法可以通过指针调用\",{\"1\":{\"662\":1}}],[\"接收者是某种类型的变量\",{\"1\":{\"651\":1}}],[\"接收者\",{\"1\":{\"652\":2}}],[\"接收者必须有一个显式的名字\",{\"1\":{\"652\":1}}],[\"接收者类型可以是\",{\"1\":{\"651\":1}}],[\"接收者可以是值接收者\",{\"1\":{\"380\":1}}],[\"接收两个整数\",{\"1\":{\"564\":1}}],[\"接收流程\",{\"0\":{\"403\":1}}],[\"接收数据\",{\"1\":{\"400\":2,\"700\":1}}],[\"接收到的jwt声明里的jws是没有经过欺骗客户端\",{\"1\":{\"39\":1}}],[\"接口里的属性不全都是必需的\",{\"1\":{\"769\":1}}],[\"接口里也不能包含变量\",{\"1\":{\"662\":1}}],[\"接口可以分析数据\",{\"1\":{\"692\":1}}],[\"接口可以让开发者找出自己写的程序中的类型\",{\"1\":{\"673\":1}}],[\"接口在\",{\"1\":{\"682\":1}}],[\"接口不是\",{\"1\":{\"676\":1}}],[\"接口还能实现\",{\"1\":{\"672\":1}}],[\"接口到接口\",{\"0\":{\"667\":1}}],[\"接口并实现一些必要的操作\",{\"1\":{\"664\":1}}],[\"接口并进行测试\",{\"1\":{\"662\":1}}],[\"接口用来对\",{\"1\":{\"662\":1}}],[\"接口彻底将类型能做什么\",{\"1\":{\"662\":1}}],[\"接口是一种契约\",{\"1\":{\"662\":1}}],[\"接口是动态类型\",{\"1\":{\"662\":1}}],[\"接口变量\",{\"1\":{\"663\":1}}],[\"接口变量的类型也可以使用一种特殊形式的\",{\"1\":{\"662\":1}}],[\"接口变量里包含了接收者实例的值和指向对应方法表的指针\",{\"1\":{\"662\":1}}],[\"接口有一个方法\",{\"1\":{\"662\":1}}],[\"接口有何异同\",{\"0\":{\"392\":1}}],[\"接口被隐式地实现\",{\"1\":{\"662\":1}}],[\"接口定义了一组方法\",{\"1\":{\"662\":1}}],[\"接口定义了一种规范\",{\"1\":{\"392\":1}}],[\"接口提供了一种方式来\",{\"1\":{\"662\":1}}],[\"接口必须先通过\",{\"1\":{\"638\":1}}],[\"接口等\",{\"1\":{\"449\":1}}],[\"接口与\",{\"0\":{\"392\":1}}],[\"接口转换的原理\",{\"0\":{\"390\":1}}],[\"接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约\",{\"1\":{\"767\":1}}],[\"接口的任意对象\",{\"1\":{\"677\":1}}],[\"接口的变体\",{\"1\":{\"676\":1}}],[\"接口的继承\",{\"0\":{\"676\":1}}],[\"接口的提取\",{\"0\":{\"673\":1}}],[\"接口的值包含一个\",{\"1\":{\"668\":1}}],[\"接口的对象\",{\"1\":{\"662\":1}}],[\"接口的方法\",{\"1\":{\"662\":1}}],[\"接口的类型\",{\"1\":{\"686\":1}}],[\"接口的类型调用时程序才能编译通过\",{\"1\":{\"671\":1}}],[\"接口的类型都可以用这个函数\",{\"1\":{\"662\":1}}],[\"接口的类型的变量被赋给\",{\"1\":{\"662\":1}}],[\"接口的类型的变量可以赋值给\",{\"1\":{\"662\":1}}],[\"接口的名字由方法名加\",{\"1\":{\"662\":1}}],[\"接口的构造过程是怎样的\",{\"0\":{\"386\":1}}],[\"接口的动态类型和动态值\",{\"0\":{\"384\":1}}],[\"接口值\",{\"1\":{\"384\":1,\"662\":1}}],[\"接口值的零值是指动态类型和动态值都为\",{\"1\":{\"384\":1}}],[\"接口隔离原则\",{\"1\":{\"316\":1}}],[\"接口类型的值\",{\"1\":{\"689\":1}}],[\"接口类型的变量\",{\"1\":{\"682\":1}}],[\"接口类型的约束后\",{\"1\":{\"316\":1}}],[\"接口类型变量\",{\"1\":{\"671\":1}}],[\"接口类型作为参数的函数\",{\"1\":{\"671\":1}}],[\"接口类型作为入参\",{\"1\":{\"316\":1}}],[\"接口类型可以包含一个实例的引用\",{\"1\":{\"662\":1}}],[\"接口类型和\",{\"1\":{\"384\":1}}],[\"接口类型\",{\"1\":{\"316\":1,\"655\":1,\"662\":1,\"687\":1,\"689\":1}}],[\"接口\",{\"0\":{\"377\":1,\"662\":1,\"767\":1},\"1\":{\"312\":1,\"502\":1,\"563\":1,\"662\":7,\"664\":1,\"668\":1,\"672\":1,\"674\":1,\"682\":3,\"686\":5,\"687\":1,\"688\":1}}],[\"封装\",{\"0\":{\"314\":1},\"1\":{\"310\":1,\"314\":1,\"316\":1,\"676\":2}}],[\"公钥加密允许其他使用场景\",{\"1\":{\"860\":1}}],[\"公钥算法生成两个密钥\",{\"1\":{\"860\":1}}],[\"公共claims\",{\"1\":{\"853\":1}}],[\"公共可见性\",{\"1\":{\"310\":1}}],[\"公认的\",{\"1\":{\"694\":1}}],[\"公式为\",{\"1\":{\"368\":1,\"602\":1}}],[\"公司收购后\",{\"1\":{\"296\":1}}],[\"受保护的资源\",{\"1\":{\"868\":1}}],[\"受保护\",{\"1\":{\"310\":1}}],[\"受众\",{\"1\":{\"35\":1}}],[\"哪些地方可以被修改\",{\"1\":{\"550\":1}}],[\"哪些对象分配在栈上\",{\"0\":{\"442\":1}}],[\"哪些对象分配在堆上\",{\"0\":{\"442\":1}}],[\"哪些数据类型可以比较\",{\"1\":{\"376\":1}}],[\"哪些类型可以作为map\",{\"1\":{\"376\":2}}],[\"哪个表小就用哪个表来驱动\",{\"1\":{\"306\":1}}],[\"哪种情况应该用\",{\"0\":{\"306\":1}}],[\"摘自极客时间\",{\"1\":{\"303\":1,\"305\":1,\"306\":1}}],[\"摘要\",{\"0\":{\"25\":1,\"865\":1}}],[\"毕竟栈上的内存分配比堆上快很多\",{\"1\":{\"445\":1}}],[\"毕竟比较执行效率的前提是结果一样才可以\",{\"1\":{\"303\":1}}],[\"毕竟要扫描的字符长度就变少了\",{\"1\":{\"275\":1}}],[\"小数点后的数字将被丢弃\",{\"1\":{\"523\":1}}],[\"小结\",{\"0\":{\"479\":1}}],[\"小内存占用\",{\"1\":{\"455\":1}}],[\"小对象\",{\"1\":{\"443\":1}}],[\"小的二级索引进行扫描\",{\"1\":{\"303\":1}}],[\"小于等于\",{\"1\":{\"130\":1,\"443\":1}}],[\"小于\",{\"1\":{\"130\":1,\"212\":1,\"306\":2}}],[\"然而当你运行这个程序\",{\"1\":{\"682\":1}}],[\"然而\",{\"1\":{\"317\":1,\"442\":2,\"515\":1,\"566\":1,\"623\":1,\"709\":1}}],[\"然而如果想要查找具体的行\",{\"1\":{\"303\":1}}],[\"然后取最左边的128位并用base64url对其进行编码\",{\"1\":{\"886\":1}}],[\"然后希望将该值作为提示传递给发现的授权服务\",{\"1\":{\"873\":1}}],[\"然后加密\",{\"1\":{\"869\":1}}],[\"然后更改标头\",{\"1\":{\"857\":1}}],[\"然后每个\",{\"1\":{\"709\":1}}],[\"然后每个子协程必须调用done\",{\"1\":{\"423\":1}}],[\"然后直接对信号量进行操作\",{\"1\":{\"707\":1}}],[\"然后给通道放入一个值\",{\"1\":{\"701\":1}}],[\"然后给每一个切片启动一个协程进行查找计算\",{\"1\":{\"697\":1}}],[\"然后创建了它\",{\"1\":{\"699\":1}}],[\"然后创建一个新的操作系统线程来服务于这个\",{\"1\":{\"409\":1}}],[\"然后开始并行运行\",{\"1\":{\"697\":1}}],[\"然后继续执行\",{\"1\":{\"689\":1}}],[\"然后同样重要的是对包的测试\",{\"1\":{\"689\":1}}],[\"然后用这个对象作为接收者调用\",{\"1\":{\"689\":1}}],[\"然后编译执行并验证你的预想\",{\"1\":{\"689\":1}}],[\"然后编译并执行它们\",{\"1\":{\"519\":1}}],[\"然后以每一行为单位读取\",{\"1\":{\"682\":1}}],[\"然后以相反的顺序在每个包中初始化常量和变量\",{\"1\":{\"510\":1}}],[\"然后分别把他们添加到切片的尾部\",{\"1\":{\"678\":1}}],[\"然后分发到\",{\"1\":{\"251\":1}}],[\"然后弹出并打印所有元素的值\",{\"1\":{\"676\":1}}],[\"然后计算并返回集合中最小的元素\",{\"1\":{\"664\":1}}],[\"然后定义一个容器类型的结构体\",{\"1\":{\"664\":1}}],[\"然后定义其余的函数\",{\"1\":{\"510\":1}}],[\"然后对它排序并进行测试\",{\"1\":{\"662\":1}}],[\"然后让它实现\",{\"1\":{\"662\":1}}],[\"然后动手实验下\",{\"1\":{\"657\":1}}],[\"然后显示它的\",{\"1\":{\"657\":1}}],[\"然后仅在\",{\"1\":{\"655\":1}}],[\"然后这样调用它\",{\"1\":{\"642\":1}}],[\"然后这些变量就可以用于表示或计算全局或平均值\",{\"1\":{\"574\":1}}],[\"然后进行测试\",{\"1\":{\"640\":1}}],[\"然后进行判断\",{\"1\":{\"550\":1}}],[\"然后像下面这样给它的字段赋值\",{\"1\":{\"640\":1}}],[\"然后可以像这样用\",{\"1\":{\"692\":1}}],[\"然后可以访问这些数据\",{\"1\":{\"639\":1}}],[\"然后可以使用切片的\",{\"1\":{\"611\":1}}],[\"然后修改\",{\"1\":{\"636\":1}}],[\"然后你可以用一个唯一的参数\",{\"1\":{\"692\":1}}],[\"然后你可以像这样再次使用\",{\"1\":{\"692\":1}}],[\"然后你将获得一个\",{\"1\":{\"635\":1}}],[\"然后你会看到本地的\",{\"1\":{\"628\":1}}],[\"然后你就可以在你的代码中使用新的名字\",{\"1\":{\"530\":1}}],[\"然后终端执行\",{\"1\":{\"627\":1}}],[\"然后打印原名和翻译后的名字\",{\"1\":{\"612\":1}}],[\"然后搜索其中所有的数字并返回一个切片\",{\"1\":{\"602\":1}}],[\"然后调用\",{\"1\":{\"662\":1}}],[\"然后调用它的方法\",{\"1\":{\"655\":1}}],[\"然后调用它们\",{\"1\":{\"574\":1}}],[\"然后调用该函数并打印变量\",{\"1\":{\"573\":1}}],[\"然后按小\",{\"1\":{\"565\":1}}],[\"然后按顺序执行该函数体中的代码\",{\"1\":{\"548\":1}}],[\"然后自动丢弃掉\",{\"1\":{\"565\":1}}],[\"然后丢弃掉\",{\"1\":{\"565\":1}}],[\"然后传递给被调用函数\",{\"1\":{\"561\":1}}],[\"然后返回实际写入的字节数和一个\",{\"1\":{\"662\":1}}],[\"然后返回读取的字节数和一个\",{\"1\":{\"662\":1}}],[\"然后返回两个分割后的字符串\",{\"1\":{\"602\":1}}],[\"然后返回它们的和\",{\"1\":{\"564\":1}}],[\"然后返回所代表月份所在季节的名称\",{\"1\":{\"551\":1}}],[\"然后返回指向该\",{\"1\":{\"544\":1}}],[\"然后作为判断条件\",{\"1\":{\"551\":1}}],[\"然后再为别名类型定义方法\",{\"1\":{\"651\":1}}],[\"然后再通过修改数组中的元素值来达到修改字符串的目的\",{\"1\":{\"598\":1}}],[\"然后再分析\",{\"1\":{\"532\":1}}],[\"然后再启动\",{\"1\":{\"52\":1}}],[\"然后就可以使用\",{\"1\":{\"530\":1,\"645\":1}}],[\"然后在cd到对应目录push\",{\"1\":{\"828\":1}}],[\"然后在函数\",{\"1\":{\"689\":1}}],[\"然后在运行时才解析\",{\"1\":{\"672\":1}}],[\"然后在其他类型里内嵌此类型\",{\"1\":{\"662\":1}}],[\"然后在其它函数内调用执行\",{\"1\":{\"572\":1}}],[\"然后在这个目录下输入\",{\"1\":{\"631\":1}}],[\"然后在数组中查找是否已经计算过\",{\"1\":{\"577\":1}}],[\"然后在每个\",{\"1\":{\"551\":1}}],[\"然后在每个包中执行如下流程\",{\"1\":{\"510\":1}}],[\"然后在从库上以异步方式更新主库上的日志记录\",{\"1\":{\"260\":1}}],[\"然后我们就可以使用高阶函数\",{\"1\":{\"676\":1}}],[\"然后我们为\",{\"1\":{\"672\":1}}],[\"然后我们想测试它是否实现了\",{\"1\":{\"662\":1}}],[\"然后我们测试它是否包含一个\",{\"1\":{\"662\":1}}],[\"然后我们将掌握一些匹配\",{\"1\":{\"624\":1}}],[\"然后我们可以使用下面的方式声明变量\",{\"1\":{\"509\":1}}],[\"然后我们会介绍一些关于\",{\"1\":{\"467\":1}}],[\"然后我们会对\",{\"1\":{\"467\":1}}],[\"然后程序继续执行调用该函数之后的代码\",{\"1\":{\"507\":1}}],[\"然后声明一个或多个函数\",{\"1\":{\"506\":1}}],[\"然后是法语\",{\"1\":{\"873\":1}}],[\"然后是\",{\"1\":{\"506\":1,\"855\":1}}],[\"然后紧跟着\",{\"1\":{\"504\":1}}],[\"然后安装到虚拟机里\",{\"1\":{\"485\":1}}],[\"然后执行\",{\"1\":{\"632\":1,\"689\":2}}],[\"然后执行指令\",{\"1\":{\"483\":1}}],[\"然后执行标记\",{\"1\":{\"429\":2}}],[\"然后重启终端\",{\"1\":{\"483\":1}}],[\"然后使用结构的切片\",{\"1\":{\"678\":1}}],[\"然后使用浏览器打开\",{\"1\":{\"497\":1}}],[\"然后使用\",{\"1\":{\"483\":1,\"547\":1,\"663\":1,\"782\":1}}],[\"然后通过类型断言判断参数是否是\",{\"1\":{\"663\":1}}],[\"然后通过变量名对函数进行调用\",{\"1\":{\"573\":1}}],[\"然后通过\",{\"1\":{\"473\":1,\"709\":1}}],[\"然后通过root登录\",{\"1\":{\"52\":1}}],[\"然后清理白色\",{\"1\":{\"429\":1}}],[\"然后不断地判断是否能够被成功获取\",{\"1\":{\"421\":1}}],[\"然后把main\",{\"1\":{\"415\":1}}],[\"然后把p转交给其它空闲的线程执行\",{\"1\":{\"409\":1}}],[\"然后恢复下一个线程的上下文\",{\"1\":{\"412\":1}}],[\"然后整个\",{\"1\":{\"409\":1}}],[\"然后旧bucket数据搬迁到新的bucket\",{\"1\":{\"372\":1}}],[\"然后只有一个线程在运输\",{\"1\":{\"331\":1}}],[\"然后阻塞\",{\"1\":{\"331\":1}}],[\"然后依次类推\",{\"1\":{\"270\":2}}],[\"然后将读取到的内容连同\",{\"1\":{\"677\":1}}],[\"然后将它作为特定类型的一个字段\",{\"1\":{\"656\":1}}],[\"然后将解压后的目录\",{\"1\":{\"483\":1}}],[\"然后将结果在应用程序中进行关联\",{\"1\":{\"268\":1}}],[\"然后将为\",{\"1\":{\"52\":1}}],[\"然后决定转发到哪个服务器\",{\"1\":{\"261\":1}}],[\"然后大量项目直接透明使用即可\",{\"1\":{\"252\":1}}],[\"然后根据设定的分库分表策略\",{\"1\":{\"252\":1}}],[\"然后根据被操作对象\",{\"1\":{\"61\":1}}],[\"然后会报错\",{\"1\":{\"166\":1,\"202\":1}}],[\"然后方便对相关的一组进行统一处理\",{\"1\":{\"72\":1}}],[\"然后\",{\"1\":{\"36\":1,\"51\":1,\"246\":1,\"338\":1,\"501\":1,\"571\":1,\"574\":1,\"600\":1,\"678\":2,\"680\":1}}],[\"统计字符串出现次数\",{\"0\":{\"538\":1}}],[\"统计数据表的行数只需要o\",{\"1\":{\"303\":1}}],[\"统一起来\",{\"1\":{\"320\":1}}],[\"统一模型\",{\"0\":{\"69\":1}}],[\"计数配合可优雅地实现存储单位的常量枚举\",{\"1\":{\"525\":1}}],[\"计数器的生命周期在遇到右花括号\",{\"1\":{\"553\":1}}],[\"计数器\",{\"1\":{\"427\":1,\"558\":1}}],[\"计数为负数\",{\"1\":{\"335\":1}}],[\"计数的方式来完成统计\",{\"1\":{\"303\":1}}],[\"计数的方式进行统计\",{\"1\":{\"303\":1}}],[\"计算并同时完成\",{\"1\":{\"705\":1}}],[\"计算并输出了一些校验值\",{\"1\":{\"686\":1}}],[\"计算函数执行时间\",{\"0\":{\"576\":1}}],[\"计算一个\",{\"1\":{\"564\":1}}],[\"计算得到合适的\",{\"1\":{\"370\":2}}],[\"计算所有的表达式\",{\"1\":{\"305\":1}}],[\"计算路由\",{\"1\":{\"252\":1}}],[\"计算两个日期之差\",{\"1\":{\"148\":1,\"181\":1}}],[\"较大的文件体积也是比较头疼的问题\",{\"1\":{\"487\":1}}],[\"较慢\",{\"1\":{\"481\":1}}],[\"较复杂\",{\"1\":{\"299\":1}}],[\"较简单\",{\"1\":{\"299\":1}}],[\"差异\",{\"0\":{\"299\":1}}],[\"差不多算是被抛弃的状态吧\",{\"1\":{\"251\":1}}],[\"看下面例子中\",{\"1\":{\"688\":1}}],[\"看看它是否可以正确运行\",{\"1\":{\"662\":1}}],[\"看一下\",{\"1\":{\"659\":1}}],[\"看起来二者没有什么区别\",{\"1\":{\"588\":1}}],[\"看起来并不相同\",{\"1\":{\"475\":1}}],[\"看得见的\",{\"1\":{\"298\":1}}],[\"看不见的\",{\"1\":{\"298\":1}}],[\"看上去没有任何问题\",{\"1\":{\"10\":1}}],[\"理论上\",{\"1\":{\"561\":1}}],[\"理论影响的\",{\"1\":{\"471\":1}}],[\"理解为类\",{\"1\":{\"298\":1}}],[\"理解为对象\",{\"1\":{\"298\":1}}],[\"理想情况下它应该在所有情境中都有相似的作用\",{\"1\":{\"317\":1}}],[\"理想的做法是仅仅在常常被搜索的列\",{\"1\":{\"106\":1}}],[\"理想运行\",{\"1\":{\"10\":1}}],[\"程序变成了这样\",{\"1\":{\"708\":1}}],[\"程序等待协程完成\",{\"1\":{\"704\":1}}],[\"程序无限阻塞的通常做法是在\",{\"1\":{\"704\":1}}],[\"程序无法运行\",{\"1\":{\"700\":1}}],[\"程序退出\",{\"1\":{\"697\":1}}],[\"程序都必须有的\",{\"1\":{\"694\":1}}],[\"程序都是从\",{\"1\":{\"548\":1}}],[\"程序可以在不同的处理器和计算机上同时执行不同的代码段\",{\"1\":{\"693\":1}}],[\"程序会以大约每秒\",{\"1\":{\"692\":1}}],[\"程序会继续运行\",{\"1\":{\"550\":1}}],[\"程序是\",{\"1\":{\"692\":1}}],[\"程序是通过\",{\"1\":{\"506\":1}}],[\"程序不会被普通的\",{\"1\":{\"689\":1}}],[\"程序不能继续运行时\",{\"1\":{\"689\":1}}],[\"程序实际上是分配了一个新的切片\",{\"1\":{\"685\":1}}],[\"程序结束\",{\"1\":{\"677\":1}}],[\"程序运行时的交互操作\",{\"1\":{\"623\":1}}],[\"程序让\",{\"1\":{\"614\":1}}],[\"程序也不会自动地去执行下一个分支的代码\",{\"1\":{\"551\":1}}],[\"程序应该在最接近的位置检查所有相关的错误\",{\"1\":{\"550\":1}}],[\"程序在内存中存储它的值\",{\"1\":{\"547\":1}}],[\"程序正常退出的代码为\",{\"1\":{\"507\":1}}],[\"程序中的数据结构如下\",{\"1\":{\"680\":1}}],[\"程序中定义了一个新类型\",{\"1\":{\"662\":1}}],[\"程序中被引用\",{\"1\":{\"632\":1}}],[\"程序中被使用\",{\"1\":{\"632\":1}}],[\"程序中所用到的内存在计算机中使用一堆箱子来表示\",{\"1\":{\"516\":1}}],[\"程序中可能会使用到这些标点符号\",{\"1\":{\"504\":1}}],[\"程序中可能会使用到这些分隔符\",{\"1\":{\"504\":1}}],[\"程序中使用外部库\",{\"0\":{\"638\":1}}],[\"程序中使用\",{\"1\":{\"501\":1}}],[\"程序一般由关键字\",{\"1\":{\"504\":1}}],[\"程序比\",{\"1\":{\"499\":1}}],[\"程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释\",{\"1\":{\"497\":1}}],[\"程序和项目方面都有非常好的支持\",{\"1\":{\"491\":1}}],[\"程序和结构方面\",{\"1\":{\"475\":1}}],[\"程序文本\",{\"1\":{\"481\":1}}],[\"程序\",{\"0\":{\"495\":1},\"1\":{\"481\":1,\"547\":1,\"577\":1,\"638\":1,\"658\":1,\"680\":1,\"689\":1,\"692\":1,\"695\":1,\"701\":1}}],[\"程序的调用中\",{\"1\":{\"614\":1}}],[\"程序的操作系统类型\",{\"1\":{\"549\":1}}],[\"程序的执行开始于导入包\",{\"1\":{\"627\":1}}],[\"程序的执行\",{\"1\":{\"510\":1}}],[\"程序的执行速度也非常快\",{\"1\":{\"475\":1}}],[\"程序的首选结构\",{\"1\":{\"510\":1}}],[\"程序的一般结构\",{\"0\":{\"510\":1}}],[\"程序的基本结构和要素\",{\"0\":{\"505\":1}}],[\"程序的代码通过语句来实现结构化\",{\"1\":{\"504\":1}}],[\"程序的入口点\",{\"1\":{\"507\":1}}],[\"程序的入口\",{\"1\":{\"449\":1}}],[\"程序这个正确的决定\",{\"1\":{\"467\":1}}],[\"程序并不能直接运行\",{\"1\":{\"447\":1}}],[\"程序启动\",{\"1\":{\"510\":1}}],[\"程序启动过程是怎样的\",{\"0\":{\"452\":1}}],[\"程序启动的时候申请一大块内存\",{\"1\":{\"440\":1}}],[\"程序启动时会为runtime\",{\"1\":{\"415\":1}}],[\"程序开始\",{\"1\":{\"429\":1}}],[\"程序执行耗时\",{\"1\":{\"427\":2}}],[\"程序计数器\",{\"1\":{\"348\":1}}],[\"程序后台有一个监控线程\",{\"1\":{\"330\":1}}],[\"程序提供了网络轮询器\",{\"1\":{\"330\":1}}],[\"程序没有java美观\",{\"1\":{\"321\":1}}],[\"程序员们可以各取所需\",{\"1\":{\"320\":1}}],[\"程序员应该没人用吧\",{\"1\":{\"296\":1}}],[\"程序流程\",{\"1\":{\"84\":1}}],[\"移除所有文件过滤模式\",{\"1\":{\"725\":1}}],[\"移除\",{\"1\":{\"697\":1}}],[\"移除了空格\",{\"1\":{\"605\":1}}],[\"移除全部文件\",{\"1\":{\"42\":1}}],[\"移动指针指向字符串的字节数或数组的某个位置\",{\"1\":{\"547\":1}}],[\"移动端常常使用\",{\"1\":{\"296\":1}}],[\"移植工作由\",{\"1\":{\"485\":1}}],[\"移交\",{\"1\":{\"409\":1,\"411\":1}}],[\"社区支持做得很好\",{\"1\":{\"296\":1}}],[\"社区很活跃\",{\"1\":{\"251\":1}}],[\"很少见\",{\"1\":{\"850\":1}}],[\"很明显\",{\"1\":{\"708\":1}}],[\"很明显这是错误的\",{\"1\":{\"507\":1}}],[\"很严苛且不可恢复\",{\"1\":{\"689\":1}}],[\"很好的阐述了\",{\"1\":{\"682\":1}}],[\"很快就会导致内存溢出\",{\"1\":{\"660\":1}}],[\"很可能没有包含原\",{\"1\":{\"612\":1}}],[\"很庆幸\",{\"1\":{\"467\":1}}],[\"很多接口并不是本来需要的\",{\"1\":{\"392\":1}}],[\"很多语言都支持跨平台\",{\"1\":{\"320\":1}}],[\"很多公司或开源项目已经逐渐寻找其他的开源产品来替代\",{\"1\":{\"296\":1}}],[\"很简单\",{\"1\":{\"226\":1}}],[\"曾经是互联网公司的最爱\",{\"1\":{\"296\":1}}],[\"稳定压倒一切\",{\"1\":{\"320\":1}}],[\"稳定性\",{\"1\":{\"320\":1}}],[\"稳定\",{\"1\":{\"296\":1}}],[\"久负盛名的商业数据库\",{\"1\":{\"296\":1}}],[\"故障恢复比较\",{\"1\":{\"294\":1}}],[\"故不做介绍\",{\"1\":{\"63\":1}}],[\"完整\",{\"1\":{\"818\":1}}],[\"完整的\",{\"1\":{\"662\":1}}],[\"完整列表可以在\",{\"1\":{\"614\":1}}],[\"完整性\",{\"1\":{\"39\":1,\"869\":1}}],[\"完善的代码补全\",{\"1\":{\"493\":1}}],[\"完美的查找和替换功能\",{\"1\":{\"490\":1}}],[\"完全一样\",{\"1\":{\"689\":1}}],[\"完全对等的\",{\"1\":{\"552\":1}}],[\"完全省略了\",{\"1\":{\"548\":1}}],[\"完全没有问题\",{\"1\":{\"531\":1}}],[\"完全开源\",{\"1\":{\"469\":1}}],[\"完全就是让人眼前一亮的感觉\",{\"1\":{\"320\":1}}],[\"完全函数依赖于键码\",{\"1\":{\"291\":1}}],[\"完成的时候发送一个信号\",{\"1\":{\"709\":1}}],[\"完成了\",{\"1\":{\"657\":1}}],[\"完成该方法并打印出前\",{\"1\":{\"580\":1}}],[\"完成以上各个阶段的就是\",{\"1\":{\"447\":1}}],[\"完成互斥的多个操作\",{\"1\":{\"418\":1}}],[\"完成\",{\"1\":{\"299\":2,\"485\":1,\"659\":2}}],[\"冗余数据\",{\"1\":{\"288\":1}}],[\"冗余列增多\",{\"1\":{\"283\":1}}],[\"课程\",{\"1\":{\"288\":5,\"291\":8}}],[\"院长\",{\"1\":{\"288\":4,\"291\":7,\"292\":2}}],[\"学习并理解以下程序的工作原理\",{\"1\":{\"574\":1}}],[\"学习一门新语言的最佳方式就是实践\",{\"1\":{\"467\":1}}],[\"学习曲线很低\",{\"1\":{\"320\":1}}],[\"学习曲线容易\",{\"1\":{\"320\":1}}],[\"学院\",{\"1\":{\"288\":4,\"291\":7,\"292\":5}}],[\"学生\",{\"1\":{\"288\":6,\"291\":7,\"292\":3}}],[\"学生就是主体\",{\"1\":{\"73\":1}}],[\"钱\",{\"1\":{\"285\":1}}],[\"检出\",{\"1\":{\"629\":1}}],[\"检查\",{\"1\":{\"689\":1,\"857\":1}}],[\"检查和报告错误条件的惯有方式\",{\"1\":{\"687\":1}}],[\"检查变量值\",{\"1\":{\"490\":1}}],[\"检查容器是否正确运行\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1}}],[\"检测重放攻击的精确方法是特定于客户端的\",{\"1\":{\"887\":1}}],[\"检测并报告程序中的数据竞争问题\",{\"1\":{\"449\":1}}],[\"检测\",{\"1\":{\"363\":1}}],[\"检测和修改它本身状态或行为的一种能力或动态知道给定数据对象的类型和结构\",{\"1\":{\"328\":1}}],[\"检索列数据时\",{\"1\":{\"283\":2}}],[\"节等章节\",{\"1\":{\"694\":1}}],[\"节和\",{\"1\":{\"687\":1}}],[\"节和第\",{\"1\":{\"569\":1}}],[\"节查看这些细节\",{\"1\":{\"675\":1}}],[\"节我们看到可以通过反射来分析一个结构体\",{\"1\":{\"668\":1}}],[\"节我们将给出另外一个测试例子并进行深入研究\",{\"1\":{\"631\":1}}],[\"节点包含一个某种类型的数据字段\",{\"1\":{\"666\":1}}],[\"节及例子\",{\"1\":{\"662\":1}}],[\"节通过切片的例子说明过一次\",{\"1\":{\"643\":1}}],[\"节所述\",{\"1\":{\"631\":1}}],[\"节提到的\",{\"1\":{\"601\":1}}],[\"节的通道迭代器中\",{\"1\":{\"709\":1}}],[\"节的可见性规则\",{\"1\":{\"676\":1}}],[\"节的示例\",{\"1\":{\"673\":1}}],[\"节的练习\",{\"1\":{\"657\":1}}],[\"节的斐波那契程序\",{\"1\":{\"627\":1}}],[\"节的\",{\"1\":{\"627\":1,\"686\":1}}],[\"节的程序中\",{\"1\":{\"574\":1}}],[\"节的例子\",{\"1\":{\"591\":1}}],[\"节的例\",{\"1\":{\"549\":1}}],[\"节中使用一个常见的算法问题\",{\"1\":{\"694\":1}}],[\"节中使用过了\",{\"1\":{\"689\":1}}],[\"节中讨论过这个问题\",{\"1\":{\"694\":1}}],[\"节中有相应描述\",{\"1\":{\"689\":1}}],[\"节中看到它的标准用法\",{\"1\":{\"687\":1}}],[\"节中\",{\"1\":{\"675\":1}}],[\"节中我们将阐释\",{\"1\":{\"670\":1}}],[\"节中我们会通过\",{\"1\":{\"654\":1}}],[\"节中练习\",{\"1\":{\"670\":1}}],[\"节中程序的类型来进行测试\",{\"1\":{\"660\":1}}],[\"节中会进一步讨论这个问题\",{\"1\":{\"655\":1}}],[\"节中深入的探讨\",{\"1\":{\"645\":1}}],[\"节中对这两种方式进行比较\",{\"1\":{\"625\":1}}],[\"节中得知函数也是一种值\",{\"1\":{\"574\":1}}],[\"节中的方法\",{\"1\":{\"654\":1}}],[\"节中的\",{\"1\":{\"635\":1,\"656\":1}}],[\"节中的用来排序的\",{\"1\":{\"628\":1}}],[\"节中的斐波那契数列程序\",{\"1\":{\"574\":1}}],[\"节中的内容\",{\"1\":{\"485\":1}}],[\"节找到有关运算符优先级的相关信息\",{\"1\":{\"520\":1}}],[\"节讲到的\",{\"1\":{\"501\":1,\"549\":1}}],[\"节\",{\"1\":{\"473\":1,\"474\":1,\"477\":1,\"481\":2,\"482\":1,\"487\":1,\"494\":2,\"504\":1,\"508\":2,\"509\":2,\"513\":1,\"515\":2,\"516\":3,\"520\":1,\"521\":1,\"523\":2,\"525\":2,\"526\":1,\"527\":1,\"528\":1,\"531\":1,\"532\":7,\"542\":1,\"545\":1,\"546\":1,\"548\":1,\"549\":2,\"550\":3,\"551\":3,\"553\":1,\"556\":2,\"560\":1,\"561\":8,\"562\":1,\"564\":1,\"567\":2,\"568\":2,\"569\":5,\"570\":1,\"571\":2,\"572\":1,\"573\":4,\"574\":1,\"577\":1,\"580\":2,\"582\":1,\"583\":1,\"585\":1,\"590\":1,\"591\":1,\"600\":1,\"605\":2,\"611\":2,\"623\":1,\"624\":1,\"627\":3,\"628\":2,\"629\":3,\"631\":1,\"638\":1,\"640\":2,\"642\":2,\"658\":1,\"672\":1,\"675\":1,\"676\":1,\"686\":1,\"687\":2,\"688\":2,\"689\":7,\"694\":1,\"699\":1,\"708\":1,\"709\":2}}],[\"节省空间\",{\"1\":{\"283\":1}}],[\"节约空间\",{\"1\":{\"221\":1}}],[\"范例\",{\"1\":{\"317\":1}}],[\"范式理论是为了解决以上提到四种异常\",{\"1\":{\"289\":1}}],[\"范式\",{\"0\":{\"289\":1}}],[\"范式化的缺点是\",{\"1\":{\"283\":1}}],[\"范式化的优点是\",{\"1\":{\"283\":1}}],[\"范式化的目标是尽力减少冗余列\",{\"1\":{\"283\":1}}],[\"范式和反范式各有利弊\",{\"1\":{\"283\":1}}],[\"范式和反范式\",{\"0\":{\"283\":1}}],[\"范式和反范式优化\",{\"1\":{\"281\":1}}],[\"范围\",{\"1\":{\"249\":1,\"257\":1}}],[\"范围操作符\",{\"0\":{\"131\":1}}],[\"直至其header和payload\",{\"1\":{\"857\":1}}],[\"直接传参\",{\"1\":{\"726\":1}}],[\"直接运行程序即可\",{\"1\":{\"689\":1}}],[\"直接写入文件\",{\"1\":{\"686\":1}}],[\"直接将内容写入文件\",{\"1\":{\"680\":2}}],[\"直接将其分配在堆上\",{\"1\":{\"442\":1}}],[\"直接使用\",{\"1\":{\"678\":1}}],[\"直接辨识的\",{\"1\":{\"662\":1}}],[\"直接进入内层结构体的字段\",{\"1\":{\"648\":1}}],[\"直接\",{\"1\":{\"608\":1}}],[\"直接返回\",{\"1\":{\"420\":1}}],[\"直接从\",{\"1\":{\"405\":1}}],[\"直接从sendq中取出g\",{\"1\":{\"403\":1}}],[\"直接调用接口函数\",{\"1\":{\"391\":1}}],[\"直接打乱处理\",{\"1\":{\"359\":1}}],[\"直接跳到第一个dept等于4的记录\",{\"1\":{\"277\":1}}],[\"直来直去的\",{\"1\":{\"320\":1}}],[\"直到从中获取到值\",{\"1\":{\"705\":1}}],[\"直到缓冲空了\",{\"1\":{\"703\":1}}],[\"直到发送者可用\",{\"1\":{\"701\":1}}],[\"直到文件尾部\",{\"1\":{\"682\":1}}],[\"直到回车键\",{\"1\":{\"677\":1}}],[\"直到碰到\",{\"1\":{\"677\":1}}],[\"直到碰到换行\",{\"1\":{\"677\":1}}],[\"直到这个线程执行完成并解锁后\",{\"1\":{\"625\":1}}],[\"直到被销毁\",{\"1\":{\"573\":1}}],[\"直到函数调用栈被耗尽\",{\"1\":{\"561\":1}}],[\"直到算法匹配到某个\",{\"1\":{\"551\":1}}],[\"直到匹配为止\",{\"1\":{\"551\":1}}],[\"直到没有任何指针指向它们\",{\"1\":{\"547\":1}}],[\"直到没有灰色\",{\"1\":{\"429\":1}}],[\"直到没有灰色节点\",{\"1\":{\"429\":2}}],[\"直到当前\",{\"1\":{\"431\":1}}],[\"直到不满足自旋条件\",{\"1\":{\"421\":1}}],[\"直到获取到锁才会退出循环\",{\"1\":{\"421\":1}}],[\"直到runtime\",{\"1\":{\"415\":1}}],[\"直到main\",{\"1\":{\"415\":1}}],[\"直到协程从缓冲区读取数据\",{\"1\":{\"405\":1}}],[\"直到协程写入数据\",{\"1\":{\"405\":1}}],[\"直到有协程从管道读取数据\",{\"1\":{\"405\":1}}],[\"直到有协程向管道中写入数据\",{\"1\":{\"405\":1}}],[\"直到提交事务\",{\"1\":{\"230\":1}}],[\"直到找到符合条件的行\",{\"1\":{\"217\":1}}],[\"直到在某结点中查找成功\",{\"1\":{\"214\":1}}],[\"直到\",{\"1\":{\"151\":1,\"187\":1,\"469\":1,\"494\":1}}],[\"直到20世纪90年代中后期\",{\"1\":{\"64\":1}}],[\"仅为显示目的在值中使用换行\",{\"1\":{\"873\":2,\"877\":1,\"878\":1,\"881\":1}}],[\"仅仅在本地库移动head指针\",{\"1\":{\"820\":1}}],[\"仅仅在当前本地范围内有效\",{\"1\":{\"811\":1}}],[\"仅仅需要实现新接口的方法\",{\"1\":{\"676\":1}}],[\"仅在本节出现\",{\"1\":{\"698\":1}}],[\"仅当\",{\"1\":{\"671\":1}}],[\"仅用\",{\"1\":{\"554\":1}}],[\"仅支持管道\",{\"1\":{\"331\":1}}],[\"仅对外提供公开接口调用\",{\"1\":{\"314\":1}}],[\"仅对指定的行记录进行加锁\",{\"1\":{\"231\":1}}],[\"仅保留表结构\",{\"1\":{\"273\":1}}],[\"替我们做了这些事情\",{\"1\":{\"653\":1}}],[\"替换它\",{\"1\":{\"651\":1}}],[\"替换相关的功能\",{\"1\":{\"624\":1}}],[\"替换为要安装的映像的标记\",{\"1\":{\"782\":1}}],[\"替换为拥有仓库的\",{\"1\":{\"782\":1}}],[\"替换为拥有仓库的用户或组织帐户的名称\",{\"1\":{\"782\":1}}],[\"替换为构建时的包版本\",{\"1\":{\"782\":1}}],[\"替换为包或映\",{\"1\":{\"782\":1}}],[\"替换为包或映像的名称\",{\"1\":{\"782\":1}}],[\"替换为包含项目的仓库的名称\",{\"1\":{\"782\":2}}],[\"替换为字符串\",{\"1\":{\"537\":1}}],[\"替换为\",{\"1\":{\"525\":4,\"636\":1}}],[\"替换之前最好还能预览结果\",{\"1\":{\"490\":1}}],[\"替换成\",{\"1\":{\"37\":1,\"689\":1}}],[\"替代用户名\",{\"1\":{\"635\":1}}],[\"替代\",{\"0\":{\"273\":1,\"277\":1,\"278\":1}}],[\"号的所有用法\",{\"1\":{\"547\":1}}],[\"号和指针名称间留有一个空格\",{\"1\":{\"547\":1}}],[\"号是一个类型更改器\",{\"1\":{\"547\":1}}],[\"号是可以获取表中全部的字段数据的\",{\"1\":{\"272\":1}}],[\"号写出来的\",{\"1\":{\"272\":1}}],[\"号\",{\"0\":{\"272\":1},\"1\":{\"547\":1,\"662\":1}}],[\"号为结束符\",{\"1\":{\"163\":1,\"199\":1}}],[\"部署\",{\"1\":{\"320\":1}}],[\"部署到生产环境\",{\"1\":{\"320\":1}}],[\"部署简单\",{\"1\":{\"320\":1}}],[\"部署方便\",{\"1\":{\"320\":1}}],[\"部门名\",{\"1\":{\"270\":1}}],[\"部分\",{\"1\":{\"549\":1}}],[\"部分核心人员创建\",{\"1\":{\"296\":1}}],[\"部分是对前两部分的签名\",{\"1\":{\"36\":1}}],[\"部分也是一个\",{\"1\":{\"35\":1}}],[\"放置程序的名字\",{\"1\":{\"682\":1}}],[\"放置在\",{\"1\":{\"629\":1}}],[\"放的是程序本身的名字\",{\"1\":{\"681\":1}}],[\"放在该目录下\",{\"1\":{\"631\":1}}],[\"放在最后\",{\"1\":{\"270\":1}}],[\"放入其中并打印出来\",{\"1\":{\"623\":1}}],[\"放入到本地p队列里\",{\"1\":{\"409\":1}}],[\"放到自己的包\",{\"1\":{\"689\":1}}],[\"放到一个变量前使用就会返回相应变量的内存地址\",{\"1\":{\"547\":1}}],[\"放到不同的数据库或表上\",{\"1\":{\"245\":1}}],[\"耗尽系统资源\",{\"1\":{\"267\":1}}],[\"联合查询\",{\"1\":{\"264\":1}}],[\"硬件优化\",{\"0\":{\"285\":1},\"1\":{\"262\":1}}],[\"代替上面表示元素个数的\",{\"1\":{\"660\":1}}],[\"代替\",{\"1\":{\"627\":1,\"636\":1}}],[\"代替连接查询\",{\"1\":{\"268\":1}}],[\"代表此\",{\"1\":{\"852\":1}}],[\"代表该\",{\"1\":{\"852\":1}}],[\"代表通用包名\",{\"1\":{\"631\":1}}],[\"代表的元素是\",{\"1\":{\"580\":1}}],[\"代表的是\",{\"1\":{\"573\":1}}],[\"代表字符\",{\"1\":{\"531\":1}}],[\"代表字符串标识符\",{\"1\":{\"517\":1}}],[\"代表根号负\",{\"1\":{\"524\":1}}],[\"代表虚数部分\",{\"1\":{\"524\":1}}],[\"代表实数部分\",{\"1\":{\"524\":1}}],[\"代表使用类型的默认输出格式的标识符\",{\"1\":{\"517\":1}}],[\"代表\",{\"1\":{\"409\":1,\"496\":1}}],[\"代表着不同的状态\",{\"1\":{\"727\":1}}],[\"代表着上下文处理器\",{\"1\":{\"409\":1}}],[\"代表着\",{\"1\":{\"409\":1}}],[\"代表动物类\",{\"1\":{\"338\":1}}],[\"代表是私有的\",{\"1\":{\"314\":1}}],[\"代表是公共的\",{\"1\":{\"314\":1}}],[\"代码托管中心\",{\"0\":{\"809\":1}}],[\"代码托管\",{\"1\":{\"808\":1}}],[\"代码定义了一个名为\",{\"1\":{\"692\":1}}],[\"代码就相对越少\",{\"1\":{\"676\":1}}],[\"代码时也很有用\",{\"1\":{\"660\":1}}],[\"代码时有更好的体验\",{\"1\":{\"510\":1}}],[\"代码复用通过组合和委托实现\",{\"1\":{\"659\":1}}],[\"代码复用和多态\",{\"1\":{\"659\":1}}],[\"代码输出\",{\"1\":{\"561\":1}}],[\"代码块\",{\"1\":{\"551\":1}}],[\"代码块中变量也会存在\",{\"1\":{\"549\":1}}],[\"代码继续运行就是唯一要做的事情\",{\"1\":{\"550\":1}}],[\"代码点或者\",{\"1\":{\"531\":1}}],[\"代码中使用这个包中的功能了\",{\"1\":{\"629\":1}}],[\"代码中切片比数组更常用\",{\"1\":{\"585\":1}}],[\"代码中的函数会被调用\",{\"1\":{\"689\":1}}],[\"代码中的关键字保持的这么少\",{\"1\":{\"504\":1}}],[\"代码中的几乎所有东西都有一个名称或标识符\",{\"1\":{\"504\":1}}],[\"代码中会使用到的\",{\"1\":{\"504\":1}}],[\"代码调用\",{\"1\":{\"502\":1}}],[\"代码创建某个变量之后\",{\"1\":{\"501\":1}}],[\"代码分配的内存\",{\"1\":{\"501\":1}}],[\"代码包\",{\"1\":{\"501\":1}}],[\"代码安全地调用\",{\"1\":{\"501\":1}}],[\"代码从旧的发行版迁移到最新的发行版\",{\"1\":{\"498\":1}}],[\"代码编辑界面\",{\"1\":{\"493\":1}}],[\"代码编辑界面和抽象语法树视图\",{\"1\":{\"492\":1}}],[\"代码补全\",{\"1\":{\"491\":1}}],[\"代码工具\",{\"1\":{\"486\":1}}],[\"代码在运行时检测版本\",{\"1\":{\"483\":1}}],[\"代码是写给人看的\",{\"1\":{\"474\":1}}],[\"代码的常见写法是省略\",{\"1\":{\"549\":1}}],[\"代码的可读性是软件工程里最重要的一部分\",{\"1\":{\"474\":1}}],[\"代码的简单编辑器的沙盒\",{\"1\":{\"469\":1}}],[\"代码生成kitex\",{\"1\":{\"462\":1}}],[\"代码\",{\"1\":{\"459\":1,\"501\":1,\"502\":1,\"549\":1,\"561\":1,\"595\":1,\"640\":1,\"662\":1}}],[\"代码经过编译后\",{\"1\":{\"415\":1}}],[\"代码实现\",{\"1\":{\"337\":1,\"502\":1}}],[\"代码极简\",{\"1\":{\"320\":1}}],[\"代码以程序的形式存在\",{\"1\":{\"310\":1}}],[\"代码样例如下\",{\"1\":{\"35\":1}}],[\"代理服务器接收应用层传来的读写请求\",{\"1\":{\"261\":1}}],[\"负载因子用于衡量一个哈希表冲突情况\",{\"1\":{\"368\":1}}],[\"负载因子\",{\"0\":{\"368\":1},\"1\":{\"368\":1,\"371\":1}}],[\"负载均衡\",{\"1\":{\"249\":1,\"462\":1}}],[\"负责读取日志并执行\",{\"1\":{\"260\":1}}],[\"负责从主服务器上读取二进制日志文件\",{\"1\":{\"260\":1}}],[\"负责将主服务器上的数据更改写入二进制文件\",{\"1\":{\"260\":1}}],[\"线程安全\",{\"1\":{\"803\":3}}],[\"线程不安全\",{\"1\":{\"803\":2}}],[\"线程池\",{\"1\":{\"801\":1}}],[\"线程数量\",{\"1\":{\"696\":1}}],[\"线程释放绑定的p\",{\"1\":{\"411\":1}}],[\"线程是\",{\"1\":{\"408\":1}}],[\"线程和\",{\"1\":{\"260\":1}}],[\"线程\",{\"0\":{\"408\":1},\"1\":{\"260\":5,\"408\":1,\"409\":1}}],[\"策略上有所差异\",{\"1\":{\"259\":1}}],[\"总体来说索引\",{\"1\":{\"580\":1}}],[\"总是应该从\",{\"1\":{\"689\":1}}],[\"总是返回底层类型\",{\"1\":{\"668\":1}}],[\"总是紧跟着长度为\",{\"1\":{\"531\":1}}],[\"总是使用索引的第一个列\",{\"0\":{\"279\":1}}],[\"总结hchan结构体的主要组成部分有四个\",{\"1\":{\"398\":1}}],[\"总结\",{\"1\":{\"338\":1,\"427\":1,\"659\":1,\"662\":1,\"689\":1,\"696\":1}}],[\"总结一下\",{\"1\":{\"72\":1,\"378\":1}}],[\"总得来说\",{\"1\":{\"258\":1}}],[\"某些实现可能允许一定的偏差\",{\"1\":{\"852\":1}}],[\"某些实现可能会允许时钟之间存在一定的偏差\",{\"1\":{\"852\":1}}],[\"某个类型的实例可以赋给它所实现的任意接口类型的变量\",{\"1\":{\"676\":1}}],[\"某个索引位置的值的一个拷贝\",{\"1\":{\"591\":1}}],[\"某个值\",{\"1\":{\"418\":1}}],[\"某个分区数据库自生成的\",{\"1\":{\"257\":1}}],[\"某接口有\",{\"1\":{\"390\":1}}],[\"某种特定类型数据的结构化清单\",{\"1\":{\"82\":1}}],[\"条记录\",{\"1\":{\"256\":1}}],[\"条件判断等\",{\"1\":{\"558\":1}}],[\"条件判断语句\",{\"1\":{\"163\":1,\"199\":1}}],[\"条件语句是可以被省略的\",{\"1\":{\"556\":1}}],[\"条件语句\",{\"1\":{\"553\":1,\"555\":1}}],[\"条件语句两侧的括号是可以被省略的\",{\"1\":{\"549\":1}}],[\"条件为止\",{\"1\":{\"551\":1}}],[\"条件与\",{\"1\":{\"551\":1}}],[\"条件允许是符合条件\",{\"1\":{\"549\":1}}],[\"条件的左边\",{\"1\":{\"271\":1}}],[\"条件扫描过的所有索引记录\",{\"1\":{\"235\":1}}],[\"条件中\",{\"1\":{\"211\":2}}],[\"页包中的内容快速找到相关的包的实例\",{\"1\":{\"614\":1}}],[\"页面\",{\"1\":{\"523\":1,\"628\":1}}],[\"页面找到有关于这个话题的更多讨论\",{\"1\":{\"515\":1}}],[\"页面获取详情\",{\"1\":{\"492\":1,\"493\":1}}],[\"页面来获取\",{\"1\":{\"489\":1}}],[\"页面下载到\",{\"1\":{\"484\":1,\"485\":1}}],[\"页面查看到最新的稳定版\",{\"1\":{\"483\":1}}],[\"页面查看\",{\"1\":{\"477\":1}}],[\"页面进行查看\",{\"1\":{\"474\":1,\"476\":1}}],[\"页面权限\",{\"1\":{\"70\":1}}],[\"页\",{\"1\":{\"256\":1}}],[\"交由数据库管理\",{\"1\":{\"254\":1}}],[\"交易过程极可能达不到交易\",{\"1\":{\"237\":1}}],[\"方面的功能\",{\"1\":{\"467\":1}}],[\"方面的应用\",{\"1\":{\"467\":1}}],[\"方式\",{\"1\":{\"656\":1}}],[\"方式2\",{\"1\":{\"623\":1}}],[\"方式1\",{\"1\":{\"623\":1}}],[\"方式二\",{\"1\":{\"361\":1,\"766\":1}}],[\"方式一\",{\"1\":{\"361\":1,\"766\":1}}],[\"方法与隐式流相同\",{\"1\":{\"888\":1}}],[\"方法持有一个\",{\"1\":{\"686\":1}}],[\"方法对接口的实现\",{\"1\":{\"676\":1}}],[\"方法后\",{\"1\":{\"676\":1}}],[\"方法只是用参数和变量简单地调用\",{\"1\":{\"672\":1}}],[\"方法只使用成员名\",{\"1\":{\"654\":1}}],[\"方法测试是否可设置\",{\"1\":{\"669\":1}}],[\"方法这个调用就可以正常运行\",{\"1\":{\"667\":1}}],[\"方法用于区别普通错误\",{\"1\":{\"689\":1}}],[\"方法用于设置第\",{\"1\":{\"664\":1}}],[\"方法用于返回第\",{\"1\":{\"664\":1}}],[\"方法以及交换第\",{\"1\":{\"662\":1}}],[\"方法的时候\",{\"1\":{\"678\":1}}],[\"方法的对象\",{\"1\":{\"677\":1}}],[\"方法的\",{\"1\":{\"662\":1}}],[\"方法的方法\",{\"1\":{\"660\":1}}],[\"方法的方法体\",{\"1\":{\"659\":2}}],[\"方法表指针\",{\"1\":{\"662\":1}}],[\"方法表示\",{\"1\":{\"394\":1}}],[\"方法集\",{\"1\":{\"662\":1}}],[\"方法里面调用涉及\",{\"1\":{\"660\":1}}],[\"方法里的操作会影响到调用者\",{\"1\":{\"380\":1}}],[\"方法和类型的反射\",{\"0\":{\"668\":1}}],[\"方法和一个\",{\"1\":{\"662\":1}}],[\"方法和格式化描述符\",{\"0\":{\"660\":1}}],[\"方法和未导出字段\",{\"0\":{\"654\":1}}],[\"方法在类的上下文中被定义和继承\",{\"1\":{\"659\":1}}],[\"方法在变量上被调用\",{\"1\":{\"652\":1}}],[\"方法使用\",{\"1\":{\"654\":1}}],[\"方法都支持运行了\",{\"1\":{\"653\":1}}],[\"方法没有和数据定义\",{\"1\":{\"652\":1}}],[\"方法可以得到还原\",{\"1\":{\"668\":1}}],[\"方法可以改变接收者的值\",{\"1\":{\"652\":1}}],[\"方法可以获得\",{\"1\":{\"605\":1}}],[\"方法是作用在接收者\",{\"1\":{\"651\":1}}],[\"方法是什么\",{\"0\":{\"651\":1}}],[\"方法有一个类型为\",{\"1\":{\"640\":1}}],[\"方法传入包含短地址的\",{\"1\":{\"638\":1}}],[\"方法传入包含长地址的\",{\"1\":{\"638\":1}}],[\"方法构造\",{\"1\":{\"626\":1}}],[\"方法一样检验正则的有效性\",{\"1\":{\"624\":1}}],[\"方法便可\",{\"1\":{\"624\":1}}],[\"方法打印出所有的\",{\"1\":{\"611\":1}}],[\"方法打开一个名为\",{\"1\":{\"550\":1}}],[\"方法来实现相同的功能\",{\"1\":{\"678\":1}}],[\"方法来满足\",{\"1\":{\"674\":1}}],[\"方法来定制类型的字符串形式的输出\",{\"1\":{\"660\":1}}],[\"方法来计算一个\",{\"1\":{\"640\":1}}],[\"方法来分配\",{\"1\":{\"605\":1}}],[\"方法来对\",{\"1\":{\"550\":1}}],[\"方法总是返回成功\",{\"1\":{\"593\":1}}],[\"方法将类型为\",{\"1\":{\"593\":1}}],[\"方法将\",{\"1\":{\"593\":1}}],[\"方法将字符串\",{\"1\":{\"590\":1}}],[\"方法返回输入流里的下一个\",{\"1\":{\"686\":1}}],[\"方法返回结构内的字段数量\",{\"1\":{\"670\":1}}],[\"方法返回\",{\"1\":{\"668\":1}}],[\"方法返回最大值\",{\"1\":{\"591\":1}}],[\"方法返回一个常量来表示类型\",{\"1\":{\"668\":1}}],[\"方法返回一个\",{\"1\":{\"394\":1,\"624\":1}}],[\"方法转换为\",{\"1\":{\"590\":1}}],[\"方法生成的切片的内存结构\",{\"1\":{\"587\":1}}],[\"方法不会修改原始的数组\",{\"1\":{\"580\":1}}],[\"方法获取新的可用的对象\",{\"1\":{\"443\":1}}],[\"方法内返回局部变量指针\",{\"1\":{\"439\":1}}],[\"方法才会停止\",{\"1\":{\"438\":1}}],[\"方法等待\",{\"1\":{\"431\":1}}],[\"方法触发\",{\"1\":{\"431\":1}}],[\"方法上一轮\",{\"1\":{\"431\":1}}],[\"方法去尝试性的占有锁资源\",{\"1\":{\"421\":1}}],[\"方法当\",{\"1\":{\"394\":1}}],[\"方法能够修改接收者指向的值\",{\"1\":{\"382\":1}}],[\"方法能给用户自定义的类型添加新的行为\",{\"1\":{\"380\":1}}],[\"方法会使用调用者的一个副本\",{\"1\":{\"380\":1}}],[\"方法中调用它\",{\"1\":{\"662\":1}}],[\"方法中创建了一个\",{\"1\":{\"662\":1}}],[\"方法中\",{\"1\":{\"316\":1}}],[\"方法\",{\"0\":{\"380\":1,\"650\":1},\"1\":{\"316\":2,\"429\":1,\"431\":2,\"432\":1,\"561\":1,\"581\":1,\"590\":1,\"591\":2,\"593\":1,\"605\":1,\"624\":1,\"640\":1,\"642\":1,\"651\":1,\"652\":1,\"654\":1,\"655\":1,\"656\":4,\"657\":3,\"658\":1,\"660\":7,\"662\":10,\"666\":2,\"667\":1,\"668\":1,\"673\":1,\"675\":1,\"678\":1,\"680\":1,\"682\":3,\"688\":1}}],[\"方法执行如果异常\",{\"1\":{\"11\":1}}],[\"方案\",{\"1\":{\"892\":1}}],[\"方案二\",{\"1\":{\"254\":1}}],[\"方案一\",{\"1\":{\"254\":1}}],[\"建议提示值与用于发现的值匹配\",{\"1\":{\"873\":1}}],[\"建议\",{\"1\":{\"867\":1}}],[\"建议将个人访问令牌保存在您计算机上的本地文件中\",{\"1\":{\"782\":1}}],[\"建议使用以下函数来对字符进行定位\",{\"1\":{\"536\":1}}],[\"建议使用的是\",{\"1\":{\"252\":1}}],[\"建议参考\",{\"1\":{\"426\":1}}],[\"建议用\",{\"1\":{\"335\":1}}],[\"建立在oauth\",{\"1\":{\"865\":1,\"866\":1}}],[\"建立和使用索引的代价将随之增长\",{\"1\":{\"211\":1}}],[\"建立\",{\"1\":{\"51\":2}}],[\"经典的做法是一次只能让一个线程对共享变量进行操作\",{\"1\":{\"625\":1}}],[\"经常会出现一个问题\",{\"1\":{\"625\":1}}],[\"经常会按照区间来访问某个索引列\",{\"1\":{\"216\":1}}],[\"经常配合匿名函数使用\",{\"1\":{\"573\":1}}],[\"经受了充分的实战检验\",{\"1\":{\"459\":1}}],[\"经过重新组织后overflow的bucket数量会减少\",{\"1\":{\"373\":1}}],[\"经历的锤炼少一些\",{\"1\":{\"251\":1}}],[\"年一月\",{\"1\":{\"695\":1}}],[\"年一直到现在\",{\"1\":{\"251\":1}}],[\"年年度语言\",{\"1\":{\"469\":2}}],[\"年年中\",{\"1\":{\"469\":1}}],[\"年加入到开发团队中成为共同开发者与支持者\",{\"1\":{\"469\":1}}],[\"年正式对外发布\",{\"1\":{\"469\":1}}],[\"年\",{\"1\":{\"469\":15,\"476\":2,\"483\":1,\"499\":2,\"692\":1}}],[\"年轻一些\",{\"1\":{\"251\":1}}],[\"年前了\",{\"1\":{\"251\":1}}],[\"目的是为每一行头部加入一个行号\",{\"1\":{\"682\":1}}],[\"目的是隔离用户与权限点的逻辑关系\",{\"1\":{\"70\":1}}],[\"目标或源数据要能够被编码就必须实现\",{\"1\":{\"686\":1}}],[\"目标字符串\",{\"1\":{\"624\":1}}],[\"目标机器是指你打算运行你的\",{\"1\":{\"482\":1}}],[\"目标类型\",{\"1\":{\"389\":2}}],[\"目录并创建一个\",{\"1\":{\"631\":1}}],[\"目录并将包编译生成的存档\",{\"1\":{\"631\":1}}],[\"目录为\",{\"1\":{\"519\":1}}],[\"目录中\",{\"1\":{\"506\":1}}],[\"目录及其子目录下的所有\",{\"1\":{\"496\":1}}],[\"目录\",{\"1\":{\"450\":2,\"627\":1}}],[\"目录删掉\",{\"1\":{\"450\":1}}],[\"目录下并被安装到\",{\"1\":{\"638\":1}}],[\"目录下我们有第\",{\"1\":{\"628\":1}}],[\"目录下生成名为\",{\"1\":{\"450\":1}}],[\"目录下的\",{\"1\":{\"449\":1}}],[\"目录下\",{\"1\":{\"449\":1,\"450\":1,\"506\":1,\"627\":1,\"629\":2,\"631\":2,\"638\":1}}],[\"目录下面\",{\"1\":{\"446\":2}}],[\"目前存在很多编码格式\",{\"1\":{\"682\":1}}],[\"目前已经有许多非常好的外部库\",{\"1\":{\"637\":1}}],[\"目前使用\",{\"1\":{\"502\":1}}],[\"目前使用的也不多\",{\"1\":{\"251\":1}}],[\"目前版本的\",{\"1\":{\"498\":1}}],[\"目前可用的调试器是\",{\"1\":{\"494\":1}}],[\"目前有\",{\"1\":{\"481\":1}}],[\"目前最新的稳定版是基于\",{\"1\":{\"476\":1}}],[\"目前\",{\"1\":{\"469\":1,\"487\":1,\"561\":1}}],[\"目前只对\",{\"1\":{\"462\":1}}],[\"目前主要是结合\",{\"1\":{\"462\":1}}],[\"目前仅将稳定的能力开源给社区\",{\"1\":{\"461\":1}}],[\"目前在字节跳动内部已广泛使用\",{\"1\":{\"461\":1}}],[\"目前为止\",{\"1\":{\"297\":1}}],[\"目前社区也还一直在开发和维护\",{\"1\":{\"251\":1}}],[\"淘宝团队开发的\",{\"1\":{\"251\":1}}],[\"跨团队协作\",{\"0\":{\"831\":1}}],[\"跨协程的\",{\"1\":{\"335\":1}}],[\"跨平台\",{\"1\":{\"320\":1,\"490\":1}}],[\"跨节点的\",{\"0\":{\"256\":1}}],[\"跨节点\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"跨库\",{\"1\":{\"251\":1}}],[\"跨域认证的问题\",{\"0\":{\"28\":1}}],[\"早些年还可以用\",{\"1\":{\"251\":1}}],[\"驱动访问\",{\"1\":{\"251\":1}}],[\"属性\",{\"1\":{\"645\":1,\"654\":1}}],[\"属性和方法\",{\"1\":{\"645\":1}}],[\"属性不可分\",{\"1\":{\"290\":1}}],[\"属性通常来说分为四类\",{\"1\":{\"63\":1}}],[\"属于一元运算符\",{\"1\":{\"521\":1}}],[\"属于二元运算符\",{\"1\":{\"521\":1}}],[\"属于引用类型\",{\"1\":{\"516\":1}}],[\"属于同一个包的源文件必须全部被一起编译\",{\"1\":{\"506\":1}}],[\"属于语法风格层面上的小型重构\",{\"1\":{\"496\":1}}],[\"属于\",{\"1\":{\"251\":5}}],[\"团队成员\",{\"1\":{\"469\":2}}],[\"团队很大\",{\"1\":{\"252\":1}}],[\"团队开发和开源的\",{\"1\":{\"251\":1}}],[\"团队扩张\",{\"1\":{\"75\":1}}],[\"阿里\",{\"1\":{\"251\":1}}],[\"你无法确定他们是什么时候真正开始执行的\",{\"1\":{\"697\":1}}],[\"你无需担心常量之间的类型转换问题\",{\"1\":{\"513\":1}}],[\"你服务中的分析数据的\",{\"1\":{\"692\":1}}],[\"你用不同的类型表示\",{\"1\":{\"672\":1}}],[\"你用过哪些分库分表中间件\",{\"1\":{\"250\":1}}],[\"你想将切片中的数据复制到一个空接口切片中\",{\"1\":{\"665\":1}}],[\"你有一个很好的理由去写平台特定的代码\",{\"1\":{\"633\":1}}],[\"你有换行\",{\"1\":{\"333\":1}}],[\"你甚至可以让它每\",{\"1\":{\"628\":1}}],[\"你甚至可以自定义时间格式化字符串\",{\"1\":{\"546\":1}}],[\"你依旧可以无视它而返回明确的值\",{\"1\":{\"564\":1}}],[\"你需要将参数的地址\",{\"1\":{\"563\":1}}],[\"你需要在终端输入指令\",{\"1\":{\"483\":1}}],[\"你只需要在这个类型上实现新的方法\",{\"1\":{\"673\":1}}],[\"你只需要给出函数名与函数签名\",{\"1\":{\"561\":1}}],[\"你只需要配置\",{\"1\":{\"485\":1}}],[\"你应该尽可能地使用\",{\"1\":{\"523\":1}}],[\"你最好在正式使用前测试对于精确度要求较高的运算\",{\"1\":{\"523\":1}}],[\"你最好在安装\",{\"1\":{\"482\":1}}],[\"你在使用\",{\"1\":{\"523\":1}}],[\"你在学习\",{\"1\":{\"467\":1}}],[\"你不能获取字面量或常量的地址\",{\"1\":{\"547\":1}}],[\"你不能进行指针运算\",{\"1\":{\"547\":1}}],[\"你不能得到它的值\",{\"1\":{\"518\":1}}],[\"你不应该为\",{\"1\":{\"467\":1}}],[\"你还可以使用\",{\"1\":{\"548\":1}}],[\"你还可以使用下面的这些形式来声明及初始化变量\",{\"1\":{\"515\":1}}],[\"你还是需要显式指定变量的类型\",{\"1\":{\"515\":1}}],[\"你还需要一个环境变量来保存你的工作目录\",{\"1\":{\"483\":1}}],[\"你还需要添加以下内容\",{\"1\":{\"483\":1}}],[\"你任何的操作都只会影响内部代码块的局部变量\",{\"1\":{\"515\":1}}],[\"你必须给他们同一个通道作为参数才行\",{\"1\":{\"700\":1}}],[\"你必须设置\",{\"1\":{\"696\":1}}],[\"你必须使用\",{\"1\":{\"695\":1}}],[\"你必须理解库的\",{\"1\":{\"638\":1}}],[\"你必须在源文件中非注释的第一行指明这个文件属于哪个包\",{\"1\":{\"506\":1}}],[\"你必须修改为其它路径\",{\"1\":{\"482\":1}}],[\"你会看到一个像\",{\"1\":{\"638\":1}}],[\"你会获得一个空引用的指针\",{\"1\":{\"605\":1}}],[\"你会发现这种习惯用法被连续重复地使用在某段代码中\",{\"1\":{\"550\":1}}],[\"你会发现在\",{\"1\":{\"504\":1}}],[\"你会在终端看到如下信息被打印\",{\"1\":{\"483\":1}}],[\"你就可以看到本地文档浏览服务器提供的页面\",{\"1\":{\"497\":1}}],[\"你期待有以下哪些特性\",{\"1\":{\"490\":1}}],[\"你的程序会在\",{\"1\":{\"703\":1}}],[\"你的程序也能继续运行并且通知给用户\",{\"1\":{\"687\":1}}],[\"你的代码逻辑必须独立于协程调用的顺序\",{\"1\":{\"697\":1}}],[\"你的\",{\"1\":{\"486\":1}}],[\"你的服务器将始终可用\",{\"1\":{\"455\":1}}],[\"你并不需要安装完整的\",{\"1\":{\"484\":1}}],[\"你并不需要知道\",{\"1\":{\"442\":1}}],[\"你完全不用进行手动设置\",{\"1\":{\"482\":1}}],[\"你通常会找到一个适用于\",{\"1\":{\"478\":1}}],[\"你将会非常失望\",{\"1\":{\"478\":1}}],[\"你将会像迷恋你的\",{\"1\":{\"478\":1}}],[\"你将会学习如何构造一个完整\",{\"1\":{\"467\":1}}],[\"你将会学习到如何处理不同格式的文件\",{\"1\":{\"467\":1}}],[\"你也可以这样写\",{\"1\":{\"549\":1}}],[\"你也可以改写成这种形式\",{\"1\":{\"515\":1}}],[\"你也可以将它们放在同一行\",{\"1\":{\"507\":1}}],[\"你也可以安装在别的地方\",{\"1\":{\"482\":1}}],[\"你也可以通过安装\",{\"1\":{\"481\":1}}],[\"你也可以通过执行命令\",{\"1\":{\"469\":1}}],[\"你也可以在\",{\"1\":{\"474\":1}}],[\"你绝对不可以忽略书中的\",{\"1\":{\"467\":1}}],[\"你肯定知道大名鼎鼎的\",{\"1\":{\"447\":1}}],[\"你简洁的回答什么\",{\"1\":{\"438\":1}}],[\"你觉得以后gc机制会怎么优化\",{\"1\":{\"429\":1}}],[\"你写转义字符\",{\"1\":{\"333\":1}}],[\"你定义时写的啥样\",{\"1\":{\"333\":1}}],[\"你可以像下面这样调用\",{\"1\":{\"688\":1}}],[\"你可以处理未知的\",{\"1\":{\"684\":1}}],[\"你可以设置布尔型\",{\"1\":{\"682\":1}}],[\"你可以尝试一下在\",{\"1\":{\"638\":1}}],[\"你可以创建一个环境变量\",{\"1\":{\"631\":1}}],[\"你可以不通过包名来使用其中的项目\",{\"1\":{\"627\":1}}],[\"你可以这么使用\",{\"1\":{\"609\":1}}],[\"你可以这么做\",{\"1\":{\"608\":1}}],[\"你可以实现一个这样的\",{\"1\":{\"593\":1,\"656\":1}}],[\"你可以忽略第二个变量\",{\"1\":{\"591\":1}}],[\"你可以取任意数组常量的地址来作为指向新实例的指针\",{\"1\":{\"581\":1}}],[\"你可以认为这是一个编译器的\",{\"1\":{\"549\":1}}],[\"你可以给它起另一个名字\",{\"1\":{\"530\":1}}],[\"你可以省略类型说明符\",{\"1\":{\"513\":1}}],[\"你可以用一些较小的文件\",{\"1\":{\"506\":1}}],[\"你可以访问\",{\"1\":{\"501\":1}}],[\"你可以双击\",{\"1\":{\"495\":1}}],[\"你可以按照下面的一些有用的方法来达到基本调试的目的\",{\"1\":{\"494\":1}}],[\"你可以从上图中很清晰地看到\",{\"1\":{\"516\":1}}],[\"你可以从\",{\"1\":{\"492\":1,\"493\":1}}],[\"你可以将语句\",{\"1\":{\"527\":1}}],[\"你可以将\",{\"1\":{\"491\":1,\"585\":1}}],[\"你可以将选择的标准理解为小表驱动大表\",{\"1\":{\"306\":1}}],[\"你可以选择使用虚拟机软件\",{\"1\":{\"485\":1}}],[\"你可以直接运行\",{\"1\":{\"483\":1}}],[\"你可以根据这个页面找到安装指南和下载地址\",{\"1\":{\"483\":1}}],[\"你可以使用少量的操作系统线程就能拥有任意多个提供服务的协程\",{\"1\":{\"694\":1}}],[\"你可以使用括号来提升某个表达式的运算优先级\",{\"1\":{\"549\":1}}],[\"你可以使用一些预定义的格式\",{\"1\":{\"546\":1}}],[\"你可以使用一元运算符\",{\"1\":{\"527\":1}}],[\"你可以使用标准库中的\",{\"1\":{\"527\":1}}],[\"你可以使用\",{\"1\":{\"482\":1,\"501\":1,\"521\":1,\"523\":1,\"528\":1,\"541\":1,\"651\":1,\"678\":1}}],[\"你可以获取以下平台上的\",{\"1\":{\"481\":1}}],[\"你可以到\",{\"1\":{\"476\":1}}],[\"你可以在运算循环中周期的使用\",{\"1\":{\"694\":1}}],[\"你可以在单机程序\",{\"1\":{\"692\":1}}],[\"你可以在指针类型前面加上\",{\"1\":{\"547\":1}}],[\"你可以在第\",{\"1\":{\"520\":1}}],[\"你可以在其赋值表达式中涉及计算过程\",{\"1\":{\"513\":1}}],[\"你可以在其它发行版上使用\",{\"1\":{\"483\":1}}],[\"你可以在函数体中的某处返回使用类型为\",{\"1\":{\"509\":1}}],[\"你可以在任何地方使用以\",{\"1\":{\"508\":1}}],[\"你可以在括号\",{\"1\":{\"507\":1}}],[\"你可以在使用\",{\"1\":{\"506\":1}}],[\"你可以在使用将会在第\",{\"1\":{\"501\":1}}],[\"你可以在这个页面找到\",{\"1\":{\"488\":1}}],[\"你可以在这个页面找到最近的动态\",{\"1\":{\"482\":1}}],[\"你可以在终端输入以下指令\",{\"1\":{\"483\":1}}],[\"你可以在目录\",{\"1\":{\"481\":1,\"487\":1}}],[\"你可以在\",{\"1\":{\"474\":1,\"481\":1,\"483\":1,\"484\":1,\"485\":1,\"489\":1,\"501\":1,\"515\":1}}],[\"你可以通过类型断言\",{\"1\":{\"672\":1}}],[\"你可以通过在应用程序中使用已经存在的库来节省开发时间\",{\"1\":{\"638\":1}}],[\"你可以通过在终端输入指令\",{\"1\":{\"483\":1}}],[\"你可以通过如下命令安装\",{\"1\":{\"627\":1}}],[\"你可以通过以下方式来对代码中多行的字符串进行拼接\",{\"1\":{\"532\":1}}],[\"你可以通过函数\",{\"1\":{\"532\":1}}],[\"你可以通过使用括号来临时提升某个表达式的整体运算优先级\",{\"1\":{\"529\":1}}],[\"你可以通过使用包的别名来解决包名之间的名称冲突\",{\"1\":{\"506\":1}}],[\"你可以通过增加前缀\",{\"1\":{\"523\":1}}],[\"你可以通过查阅\",{\"1\":{\"489\":1}}],[\"你可以通过该页面查看有关在\",{\"1\":{\"484\":1}}],[\"你可以通过\",{\"1\":{\"477\":1,\"516\":1}}],[\"你可以通过完整的索引来快速定位你需要阅读的章节\",{\"1\":{\"467\":1}}],[\"你可以通过访问本书的\",{\"1\":{\"467\":1}}],[\"你可以下载这些代码到你的电脑上运行\",{\"1\":{\"467\":1}}],[\"你可以向接口的方法集中添加一个具有描述性名字的方法\",{\"1\":{\"674\":1}}],[\"你可以向\",{\"1\":{\"455\":1}}],[\"你可以自己再去搜索下更简洁完整的答案\",{\"1\":{\"440\":1}}],[\"你可能没有这个库的源代码\",{\"1\":{\"638\":1}}],[\"你可能总是需要把参数声明为切片\",{\"1\":{\"586\":1}}],[\"你可能想要定义一个结构体\",{\"1\":{\"509\":1}}],[\"你可能会遇到没有名称的变量\",{\"1\":{\"504\":1}}],[\"你可能会看到如下所示的一个无厘头的错误报告\",{\"1\":{\"483\":1}}],[\"你可能会觉得奇怪\",{\"1\":{\"383\":1}}],[\"你可能需要将每个工具分开安装\",{\"1\":{\"483\":1}}],[\"你可能很难发现其中的错误\",{\"1\":{\"10\":1}}],[\"你是如何解决分库分表的问题的\",{\"1\":{\"253\":1}}],[\"❓\",{\"1\":{\"250\":1}}],[\"扩展一下上面的例子\",{\"1\":{\"662\":1}}],[\"扩展\",{\"1\":{\"489\":1,\"593\":1,\"601\":1,\"627\":1,\"662\":2,\"682\":1}}],[\"扩展网络库实现\",{\"1\":{\"461\":1}}],[\"扩展性提供了较多的扩展接口以及默认扩展实现\",{\"1\":{\"462\":1}}],[\"扩展性\",{\"1\":{\"28\":1}}],[\"扩容后\",{\"1\":{\"439\":1}}],[\"扩容后示意图如下\",{\"1\":{\"372\":1}}],[\"扩容实际上是以空间换时间的手段\",{\"1\":{\"371\":1}}],[\"扩容的条件\",{\"0\":{\"371\":1}}],[\"扩容的难度\",{\"1\":{\"258\":1}}],[\"扩容常量相关字段b是buckets数组的长度的对数\",{\"1\":{\"364\":1}}],[\"扩容是大于或者等于\",{\"1\":{\"354\":1}}],[\"扩容之后再将新插入键写入新的bucket\",{\"1\":{\"372\":1}}],[\"扩容之后\",{\"1\":{\"354\":1}}],[\"扩容等问题\",{\"0\":{\"258\":1}}],[\"扩容简单\",{\"1\":{\"249\":2}}],[\"扩容麻烦\",{\"1\":{\"249\":1}}],[\"优先级别\",{\"1\":{\"811\":1}}],[\"优先级\",{\"1\":{\"529\":1}}],[\"优先级越高的运算符在条件相同的情况下将被优先执行\",{\"1\":{\"520\":1}}],[\"优先级高于\",{\"1\":{\"132\":1}}],[\"优先保存在\",{\"1\":{\"409\":1}}],[\"优化思路是\",{\"1\":{\"443\":1}}],[\"优化器使用了全表扫描而忽略了索引\",{\"1\":{\"279\":1}}],[\"优化器才会选择使用该索引\",{\"1\":{\"279\":1}}],[\"优化过了\",{\"1\":{\"274\":1}}],[\"优化是数据库优化的最常见\",{\"1\":{\"263\":1}}],[\"优化\",{\"0\":{\"263\":1},\"1\":{\"262\":1}}],[\"优点\",{\"1\":{\"249\":3,\"254\":2,\"585\":1,\"803\":8}}],[\"越来越多的谷歌内部的大型分布式应用程序都开始使用\",{\"1\":{\"476\":1}}],[\"越来越多时\",{\"1\":{\"254\":1}}],[\"越跑越慢\",{\"1\":{\"248\":1}}],[\"越复杂\",{\"1\":{\"247\":1}}],[\"扛不住高并发\",{\"1\":{\"248\":1}}],[\"水平拆分\",{\"0\":{\"247\":1},\"1\":{\"247\":1}}],[\"水平放置\",{\"1\":{\"145\":1,\"178\":1}}],[\"满足下面的条件就可以考虑扩容了\",{\"1\":{\"246\":1}}],[\"满足以下条件\",{\"1\":{\"214\":1}}],[\"性能分析\",{\"1\":{\"692\":1}}],[\"性能分析并把结果重定向到那个文件\",{\"1\":{\"692\":1}}],[\"性能分析来说你需要添加一些代码\",{\"1\":{\"692\":1}}],[\"性能分析信息\",{\"1\":{\"691\":1}}],[\"性能优势就更加明显了\",{\"1\":{\"566\":1}}],[\"性能优化神器\",{\"1\":{\"264\":1}}],[\"性能更为低下\",{\"1\":{\"561\":1}}],[\"性能说明\",{\"0\":{\"499\":1}}],[\"性能相较\",{\"1\":{\"462\":1}}],[\"性能\",{\"1\":{\"455\":1}}],[\"性能会大幅度下降\",{\"1\":{\"410\":1}}],[\"性能有差别吗\",{\"0\":{\"303\":1}}],[\"性能不错且支持自动故障恢复\",{\"1\":{\"293\":1}}],[\"性能上有优势\",{\"1\":{\"254\":1}}],[\"性能代价高\",{\"1\":{\"254\":1}}],[\"性能很高\",{\"1\":{\"252\":1}}],[\"性能就会相对差一些了\",{\"1\":{\"247\":1}}],[\"性能就越好\",{\"1\":{\"246\":1}}],[\"性能好\",{\"1\":{\"164\":1,\"200\":1}}],[\"垂直切分\",{\"0\":{\"246\":1},\"1\":{\"246\":1}}],[\"垂直放置\",{\"1\":{\"145\":1,\"178\":1}}],[\"长期以来一直伴随着\",{\"1\":{\"473\":1}}],[\"长事务\",{\"1\":{\"243\":1}}],[\"长度也是整型的\",{\"1\":{\"662\":1}}],[\"长度可以任意动态变化\",{\"1\":{\"589\":1}}],[\"长度可变的数组\",{\"1\":{\"585\":1}}],[\"长度为\",{\"1\":{\"585\":1}}],[\"长度为8的数组\",{\"1\":{\"365\":2}}],[\"长度太大\",{\"1\":{\"439\":1}}],[\"长度通过\",{\"1\":{\"353\":1}}],[\"长度\",{\"1\":{\"147\":1,\"180\":1}}],[\"低层级的\",{\"1\":{\"688\":1}}],[\"低延迟的并发回收器\",{\"1\":{\"487\":1}}],[\"低效方式\",{\"1\":{\"277\":1,\"278\":1}}],[\"低效示例\",{\"1\":{\"221\":1}}],[\"低并发\",{\"1\":{\"243\":1}}],[\"适当的把协程映射到操作系统线程\",{\"1\":{\"695\":1}}],[\"适合任何形式的缓冲写入\",{\"1\":{\"682\":1}}],[\"适合场景\",{\"1\":{\"243\":1}}],[\"适用于签名\",{\"1\":{\"860\":1}}],[\"适用于基于\",{\"1\":{\"859\":1}}],[\"适用于不同的类型\",{\"1\":{\"588\":1}}],[\"适用于单个记录\",{\"1\":{\"136\":1,\"186\":1}}],[\"适用于汇总的组记录\",{\"1\":{\"136\":1,\"186\":1}}],[\"略微衰退\",{\"1\":{\"243\":1}}],[\"严格来说\",{\"1\":{\"531\":1,\"557\":1}}],[\"严格的编码规范和完整的软件生命周期工具\",{\"1\":{\"320\":1}}],[\"严格保障事务\",{\"1\":{\"241\":1}}],[\"严重衰退\",{\"1\":{\"243\":1}}],[\"业务角度上的解决方案\",{\"1\":{\"256\":1}}],[\"业务方处理不一致\",{\"1\":{\"243\":1}}],[\"业务方保证\",{\"1\":{\"243\":1}}],[\"业务改造\",{\"1\":{\"243\":1}}],[\"业务系统可自行定义\",{\"1\":{\"70\":1}}],[\"业务系统定义的一个具体的权限\",{\"1\":{\"70\":1}}],[\"阶段事务\",{\"1\":{\"243\":1}}],[\"阶的\",{\"1\":{\"214\":1}}],[\"柔性状态\",{\"1\":{\"242\":1}}],[\"柔性状态和最终一致性这三个要素的缩写\",{\"1\":{\"242\":1}}],[\"柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面\",{\"1\":{\"242\":1}}],[\"柔性事务\",{\"0\":{\"242\":1},\"1\":{\"243\":1,\"251\":1}}],[\"两个协程经常是一个阻塞另外一个\",{\"1\":{\"709\":1}}],[\"两个协程在通信\",{\"1\":{\"702\":1}}],[\"两个用\",{\"1\":{\"686\":1}}],[\"两个简单的函数\",{\"1\":{\"668\":1}}],[\"两个函数演示了如何使用非命名返回值与命名返回值的特性\",{\"1\":{\"564\":1}}],[\"两个字符串\",{\"1\":{\"532\":1}}],[\"两个类型相同的值可以使用相等\",{\"1\":{\"521\":1}}],[\"两个包中的同名变量的区别在于它们的包名\",{\"1\":{\"506\":1}}],[\"两个事务都对一个数据进行修改\",{\"1\":{\"238\":1}}],[\"两者都是采用了类装载的机制来保证初始化实例时只有一个线程\",{\"1\":{\"803\":1}}],[\"两者都会在每个参数之间自动增加空格\",{\"1\":{\"517\":1}}],[\"两者都会在根目录下新建一个\",{\"1\":{\"450\":1}}],[\"两者均用于错误处理机制\",{\"1\":{\"569\":1}}],[\"两者分别在何时使用\",{\"0\":{\"382\":1}}],[\"两边\",{\"1\":{\"387\":1}}],[\"两种事务隔离级别\",{\"1\":{\"300\":1}}],[\"两\",{\"1\":{\"243\":1}}],[\"两阶段提交\",{\"0\":{\"241\":1},\"1\":{\"241\":1}}],[\"串联字符串\",{\"1\":{\"590\":1}}],[\"串行化\",{\"1\":{\"239\":1}}],[\"串型化的算法是\",{\"1\":{\"37\":1}}],[\"幻读\",{\"1\":{\"238\":1,\"239\":1}}],[\"撤销了这次修改\",{\"1\":{\"238\":1}}],[\"脏读\",{\"1\":{\"238\":1,\"239\":1}}],[\"脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改\",{\"1\":{\"234\":1}}],[\"原始字符串\",{\"1\":{\"602\":1}}],[\"原始的本质\",{\"1\":{\"382\":1}}],[\"原则的\",{\"1\":{\"561\":1}}],[\"原文为\",{\"1\":{\"536\":1}}],[\"原文件方法\",{\"1\":{\"342\":1}}],[\"原文件包名\",{\"1\":{\"342\":1}}],[\"原生支持应用之间的通信\",{\"1\":{\"693\":1}}],[\"原生的\",{\"1\":{\"499\":1}}],[\"原生编译器\",{\"1\":{\"481\":2}}],[\"原生网络库\",{\"1\":{\"461\":1}}],[\"原子操作是针对某个值的单个互斥操作\",{\"1\":{\"418\":1}}],[\"原子操作与互斥锁的区别\",{\"1\":{\"418\":1}}],[\"原子操作就是不可中断的操作\",{\"1\":{\"418\":1}}],[\"原子性的\",{\"1\":{\"396\":1}}],[\"原子性\",{\"1\":{\"237\":1}}],[\"原因\",{\"1\":{\"828\":1}}],[\"原因在于\",{\"1\":{\"392\":1}}],[\"原因是它们俩在内存中的布局是不一样的\",{\"1\":{\"665\":1}}],[\"原因是接口变量中存储的具体值是不可寻址的\",{\"1\":{\"662\":1}}],[\"原因是\",{\"1\":{\"312\":1}}],[\"原本期望对接收者的改变\",{\"1\":{\"381\":1}}],[\"原来的\",{\"1\":{\"354\":1}}],[\"原理\",{\"0\":{\"954\":1},\"1\":{\"80\":1,\"168\":1,\"254\":1}}],[\"加密请求对象\",{\"0\":{\"956\":1}}],[\"加密散列函数是一种单向函数\",{\"1\":{\"860\":1}}],[\"加密散列函数接收任意长度的信息\",{\"1\":{\"860\":1}}],[\"加密\",{\"0\":{\"968\":1},\"1\":{\"850\":1}}],[\"加密数据\",{\"1\":{\"849\":1}}],[\"加密有助于保护数据不被第三方读取\",{\"1\":{\"848\":1}}],[\"加锁\",{\"1\":{\"694\":1}}],[\"加锁又有以下三种情形需要我们掌握\",{\"1\":{\"235\":1}}],[\"加号\",{\"1\":{\"532\":1}}],[\"加上通过构建到本地代码\",{\"1\":{\"475\":1}}],[\"加上\",{\"1\":{\"429\":1}}],[\"加了\",{\"1\":{\"410\":1}}],[\"加入下面这一行\",{\"1\":{\"727\":1}}],[\"加入下面这两行\",{\"1\":{\"727\":1}}],[\"加入这种模式便有了示例\",{\"1\":{\"707\":1}}],[\"加入开发团队后着手语言和类库方面的开发\",{\"1\":{\"469\":1}}],[\"加入到空闲线程中\",{\"1\":{\"409\":1}}],[\"加入\",{\"1\":{\"405\":2}}],[\"加强了区间访问性\",{\"1\":{\"216\":1}}],[\"独享锁存在\",{\"1\":{\"232\":1}}],[\"独享锁\",{\"1\":{\"232\":1}}],[\"独立的列\",{\"0\":{\"220\":1},\"1\":{\"220\":1}}],[\"锁和\",{\"0\":{\"625\":1}}],[\"锁实现\",{\"1\":{\"417\":1}}],[\"锁相关\",{\"0\":{\"416\":1}}],[\"锁等待而让出\",{\"1\":{\"412\":1}}],[\"锁用在什么地方\",{\"0\":{\"396\":1}}],[\"锁就是为了解决幻读问题\",{\"1\":{\"235\":1}}],[\"锁是\",{\"1\":{\"235\":1}}],[\"锁统统属于独享锁\",{\"1\":{\"232\":1}}],[\"锁\",{\"0\":{\"235\":1},\"1\":{\"232\":2,\"235\":1,\"625\":1}}],[\"锁粒度越小\",{\"1\":{\"231\":1}}],[\"锁竞争的发生频率就越小\",{\"1\":{\"231\":1}}],[\"锁定索引之间的间隙\",{\"1\":{\"235\":1}}],[\"锁定的数据量越少\",{\"1\":{\"231\":1}}],[\"锁定整张表\",{\"1\":{\"231\":1}}],[\"读文件\",{\"0\":{\"678\":1}}],[\"读和写是软件中很普遍的行为\",{\"1\":{\"662\":1}}],[\"读\",{\"1\":{\"658\":1}}],[\"读数据的流程\",{\"1\":{\"405\":1}}],[\"读数据的流程是什么样的\",{\"0\":{\"401\":1}}],[\"读关闭空零\",{\"1\":{\"400\":1}}],[\"读等待队列\",{\"1\":{\"398\":1}}],[\"读写数据\",{\"0\":{\"677\":1}}],[\"读写值\",{\"1\":{\"405\":1}}],[\"读写分离能提高性能的原因在于\",{\"1\":{\"261\":1}}],[\"读写分离常用代理方式来实现\",{\"1\":{\"261\":1}}],[\"读写分离\",{\"0\":{\"261\":1},\"1\":{\"251\":1}}],[\"读写锁\",{\"0\":{\"232\":1}}],[\"读锁之间不会相互阻塞\",{\"1\":{\"231\":1}}],[\"读取此\",{\"1\":{\"852\":1}}],[\"读取或篡改\",{\"1\":{\"686\":1}}],[\"读取文件\",{\"1\":{\"682\":1}}],[\"读取压缩文件\",{\"0\":{\"679\":1}}],[\"读取出来\",{\"1\":{\"678\":1}}],[\"读取内容\",{\"1\":{\"677\":1}}],[\"读取输入\",{\"1\":{\"677\":1}}],[\"读取并解码和写入并编码\",{\"1\":{\"623\":1}}],[\"读取的时候使用\",{\"1\":{\"590\":1}}],[\"读取的数据是脏数据\",{\"1\":{\"238\":1}}],[\"读取某个范围的数据\",{\"1\":{\"238\":1}}],[\"读取一个数据\",{\"1\":{\"238\":1}}],[\"读取\",{\"1\":{\"75\":1}}],[\"假定\",{\"1\":{\"662\":1,\"667\":1}}],[\"假定有一个\",{\"1\":{\"655\":1}}],[\"假定会发生并发冲突\",{\"1\":{\"230\":1}}],[\"假设所有的函数都有这样的签名\",{\"1\":{\"689\":1}}],[\"假设你有\",{\"1\":{\"708\":1}}],[\"假设你有一个\",{\"1\":{\"665\":1}}],[\"假设你想使用\",{\"1\":{\"627\":1}}],[\"假设定义\",{\"1\":{\"659\":1}}],[\"假设定义了如下的\",{\"1\":{\"642\":1}}],[\"假设有一些拥有共同行为的对象\",{\"1\":{\"673\":1}}],[\"假设有一个类型\",{\"1\":{\"657\":1}}],[\"假设有一个\",{\"1\":{\"656\":1}}],[\"假设有字符串\",{\"1\":{\"602\":1}}],[\"假设我们需要一个新的接口\",{\"1\":{\"673\":1}}],[\"假设我们要把\",{\"1\":{\"669\":1}}],[\"假设我们要安装一个有趣的包\",{\"1\":{\"629\":1}}],[\"假设我们想获取一个\",{\"1\":{\"610\":1}}],[\"假设我们有如下数组\",{\"1\":{\"591\":1}}],[\"假设它叫\",{\"1\":{\"567\":1}}],[\"假设\",{\"1\":{\"561\":1,\"588\":1,\"595\":1,\"625\":1,\"653\":1,\"659\":1,\"696\":1,\"700\":1}}],[\"假设在包\",{\"1\":{\"506\":1}}],[\"假设不会发生并发冲突\",{\"1\":{\"230\":1}}],[\"假如一个线程进入了if\",{\"1\":{\"803\":1}}],[\"假如在发送者这边有一个有结构\",{\"1\":{\"686\":1}}],[\"假如\",{\"1\":{\"354\":1}}],[\"乐观锁适用于读多写少的场景\",{\"1\":{\"419\":1}}],[\"乐观锁假设数据一般情况不会造成冲突\",{\"1\":{\"419\":1}}],[\"乐观锁是相对悲观锁而言的\",{\"1\":{\"419\":1}}],[\"乐观锁是什么\",{\"0\":{\"419\":1}}],[\"乐观锁\",{\"1\":{\"230\":1,\"419\":1}}],[\"乐观锁和悲观锁是并发控制主要采用的技术手段\",{\"1\":{\"230\":1}}],[\"乐观锁和悲观锁\",{\"0\":{\"230\":1}}],[\"屏幕是标准输出\",{\"1\":{\"677\":1}}],[\"屏幕提示\",{\"1\":{\"62\":1}}],[\"屏蔽一切可能违反数据完整性的操作\",{\"1\":{\"230\":1}}],[\"悲观锁\",{\"0\":{\"419\":1},\"1\":{\"230\":1,\"419\":3}}],[\"字典\",{\"1\":{\"563\":1}}],[\"字\",{\"1\":{\"516\":1}}],[\"字节以及signatures或加密数据\",{\"1\":{\"849\":1}}],[\"字节数组对比函数\",{\"0\":{\"599\":1}}],[\"字节跳动内部的\",{\"1\":{\"462\":1}}],[\"字节\",{\"0\":{\"460\":1},\"1\":{\"431\":1,\"438\":1,\"516\":2,\"531\":1,\"707\":1}}],[\"字节就问了\",{\"1\":{\"412\":1}}],[\"字节的面试官还说了另外一个区别\",{\"1\":{\"322\":1}}],[\"字符分别代替\",{\"1\":{\"849\":1}}],[\"字符一起放到缓冲区\",{\"1\":{\"677\":1}}],[\"字符会占用\",{\"1\":{\"595\":1}}],[\"字符替换成问号\",{\"1\":{\"572\":1}}],[\"字符的任何字符串\",{\"1\":{\"852\":1}}],[\"字符的索引值\",{\"1\":{\"572\":1}}],[\"字符的一个序列\",{\"1\":{\"532\":1}}],[\"字符和索引在\",{\"1\":{\"557\":1}}],[\"字符全部转换为相应的大写字符\",{\"1\":{\"540\":1}}],[\"字符全部转换为相应的小写字符\",{\"1\":{\"540\":1}}],[\"字符\",{\"1\":{\"532\":1,\"595\":1,\"677\":1,\"849\":1,\"855\":1,\"856\":1}}],[\"字符集的文本进行编码和解码\",{\"1\":{\"532\":1}}],[\"字符集规范\",{\"1\":{\"469\":1}}],[\"字符时\",{\"1\":{\"531\":1}}],[\"字符使用单引号括起来\",{\"1\":{\"531\":1}}],[\"字符只是整数的特殊用例\",{\"1\":{\"531\":1}}],[\"字符类型\",{\"0\":{\"531\":1}}],[\"字符串进行\",{\"1\":{\"856\":1}}],[\"字符串或\",{\"1\":{\"852\":1}}],[\"字符串或者自定义类型\",{\"1\":{\"580\":1}}],[\"字符串和切片的内存结构\",{\"0\":{\"597\":1}}],[\"字符串与其它类型的转换\",{\"0\":{\"545\":1}}],[\"字符串替换\",{\"0\":{\"537\":1}}],[\"字符串包含关系\",{\"0\":{\"535\":1}}],[\"字符串拼接符\",{\"1\":{\"532\":1}}],[\"字符串的匿名函数并赋值给变量\",{\"1\":{\"573\":1}}],[\"字符串的迭代操作\",{\"1\":{\"532\":1}}],[\"字符串的内容\",{\"1\":{\"532\":1}}],[\"字符串的截取引发临时性的内存泄漏\",{\"1\":{\"438\":1}}],[\"字符串是字节的定长数组\",{\"1\":{\"532\":1}}],[\"字符串是一种值类型\",{\"1\":{\"532\":1}}],[\"字符串是\",{\"1\":{\"532\":1}}],[\"字符串\",{\"0\":{\"532\":1,\"594\":1,\"757\":1},\"1\":{\"532\":1,\"569\":1,\"597\":1,\"682\":2}}],[\"字符串做key的类型\",{\"1\":{\"358\":1}}],[\"字符之间通过\",{\"1\":{\"33\":1}}],[\"字面量\",{\"1\":{\"333\":1}}],[\"字段没有匹配不会报错\",{\"1\":{\"683\":1}}],[\"字段去尝试匹配目标结构字段\",{\"1\":{\"683\":1}}],[\"字段和方法\",{\"1\":{\"676\":1}}],[\"字段和一个\",{\"1\":{\"655\":1}}],[\"字段用于存放有效数据\",{\"1\":{\"640\":1}}],[\"字段名加一个冒号放在值的前面\",{\"1\":{\"640\":1}}],[\"字段名字必须是唯一的\",{\"1\":{\"639\":1}}],[\"字段是在运行期间动态生成的\",{\"1\":{\"392\":1}}],[\"字段来实现接口变量调用实体类型的函数\",{\"1\":{\"392\":1}}],[\"字段直接指向入参\",{\"1\":{\"390\":1}}],[\"字段直接复制源类型的\",{\"1\":{\"390\":1}}],[\"字段放置和接口方法对应的具体数据类型的方法地址\",{\"1\":{\"383\":1}}],[\"字段则描述了接口的类型\",{\"1\":{\"383\":1}}],[\"字段描述了实体的类型\",{\"1\":{\"383\":1}}],[\"字段\",{\"1\":{\"303\":1,\"365\":1,\"383\":2,\"639\":1,\"647\":1,\"648\":1,\"651\":1,\"657\":2}}],[\"字段内容不能重复\",{\"1\":{\"228\":1}}],[\"字句的最右边\",{\"1\":{\"271\":1}}],[\"字句的最后面\",{\"1\":{\"270\":1}}],[\"依据指定的格式向第一个参数内写入字符串\",{\"1\":{\"682\":1}}],[\"依次类推\",{\"1\":{\"640\":1}}],[\"依次处理元素\",{\"1\":{\"580\":1}}],[\"依次命中\",{\"1\":{\"227\":1}}],[\"依旧可以修改集合中的原值\",{\"1\":{\"557\":1}}],[\"依赖方的组织使用的url的主机组件\",{\"1\":{\"868\":1}}],[\"依赖方\",{\"1\":{\"868\":1}}],[\"依赖注入模式\",{\"1\":{\"672\":1}}],[\"依赖系统的代码\",{\"0\":{\"633\":1}}],[\"依赖\",{\"1\":{\"506\":1}}],[\"依赖管理是现今软件开发的一个重要组成部分\",{\"1\":{\"473\":1}}],[\"依赖倒置原则\",{\"1\":{\"316\":1}}],[\"依赖于具体的\",{\"1\":{\"85\":1}}],[\"例外\",{\"1\":{\"657\":1}}],[\"例子等价的\",{\"1\":{\"686\":1}}],[\"例子程序\",{\"1\":{\"682\":1}}],[\"例子\",{\"1\":{\"226\":1,\"227\":1,\"649\":1,\"682\":1}}],[\"例如login\",{\"1\":{\"873\":1}}],[\"例如24400320或aitoawmwtwwct0k51bayewnvutrjuqsvl6qs7a4\",{\"1\":{\"869\":1}}],[\"例如防止重放\",{\"1\":{\"852\":1}}],[\"例如通道具有一个\",{\"1\":{\"694\":1}}],[\"例如读取或写入\",{\"1\":{\"686\":1}}],[\"例如读取或修改\",{\"1\":{\"61\":1}}],[\"例如定义一个\",{\"1\":{\"682\":1}}],[\"例如一个字节\",{\"1\":{\"860\":1}}],[\"例如一个\",{\"1\":{\"662\":1}}],[\"例如在使用授权代码流时\",{\"1\":{\"869\":1}}],[\"例如在\",{\"1\":{\"654\":1}}],[\"例如在处理文本方面\",{\"1\":{\"499\":1}}],[\"例如汇编语言\",{\"1\":{\"633\":1}}],[\"例如垃圾回收和协程创建\",{\"1\":{\"623\":1}}],[\"例如数组\",{\"1\":{\"578\":1}}],[\"例如之前例子中的\",{\"1\":{\"574\":1}}],[\"例如标准库中的\",{\"1\":{\"521\":1}}],[\"例如以\",{\"1\":{\"521\":1}}],[\"例如下面的代码片段\",{\"1\":{\"682\":1}}],[\"例如下面的例子中\",{\"1\":{\"268\":1}}],[\"例如下面这个例子当中的变量\",{\"1\":{\"518\":1}}],[\"例如将\",{\"1\":{\"511\":2}}],[\"例如将原来的电商数据库垂直切分成商品数据库\",{\"1\":{\"246\":1}}],[\"例如从一个取值范围较小的类型转换到一个取值范围较大的类型\",{\"1\":{\"511\":1}}],[\"例如函数被调用的顺序\",{\"1\":{\"561\":1}}],[\"例如函数\",{\"1\":{\"508\":1}}],[\"例如很多发展十多年的语言已经针对各类问题拥有非常成熟的类库\",{\"1\":{\"499\":1}}],[\"例如谷歌地球的一部分代码就是由\",{\"1\":{\"476\":1}}],[\"例如对于文本的处理\",{\"1\":{\"476\":1}}],[\"例如开发用于管理后端复杂环境的项目\",{\"1\":{\"469\":1}}],[\"例如检查所需值的存在\",{\"1\":{\"455\":1}}],[\"例如工具类的函数\",{\"1\":{\"449\":1}}],[\"例如睡眠\",{\"1\":{\"409\":1}}],[\"例如某类型有\",{\"1\":{\"390\":1}}],[\"例如orderedmap\",{\"1\":{\"358\":1}}],[\"例如ioexception\",{\"1\":{\"321\":1}}],[\"例如想要插入一个学生的信息\",{\"1\":{\"288\":1}}],[\"例如如果删除了\",{\"1\":{\"288\":1}}],[\"例如使用包名\",{\"1\":{\"629\":1}}],[\"例如使用\",{\"1\":{\"274\":1,\"577\":1}}],[\"例如当一个事务执行以下语句\",{\"1\":{\"235\":1}}],[\"例如上图中如果要查询\",{\"1\":{\"215\":1}}],[\"例如用户名和密码\",{\"1\":{\"875\":1}}],[\"例如用于标识本机应用程序的回调的方案\",{\"1\":{\"873\":1}}],[\"例如用\",{\"1\":{\"60\":1}}],[\"例如远程根登录名和示例用户\",{\"1\":{\"52\":1}}],[\"例如\",{\"1\":{\"26\":1,\"33\":1,\"60\":1,\"63\":1,\"68\":1,\"74\":1,\"75\":2,\"85\":1,\"224\":1,\"270\":1,\"284\":1,\"288\":1,\"368\":1,\"392\":1,\"455\":2,\"476\":1,\"497\":3,\"501\":4,\"506\":1,\"509\":2,\"513\":1,\"515\":5,\"516\":1,\"517\":2,\"518\":1,\"521\":1,\"523\":2,\"525\":2,\"526\":1,\"527\":1,\"531\":2,\"532\":3,\"536\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":1,\"551\":2,\"553\":1,\"561\":1,\"568\":1,\"569\":2,\"571\":1,\"572\":1,\"573\":2,\"580\":3,\"582\":1,\"591\":2,\"592\":1,\"598\":1,\"600\":1,\"606\":1,\"607\":1,\"622\":1,\"627\":2,\"628\":1,\"662\":1,\"668\":2,\"670\":1,\"671\":1,\"672\":1,\"674\":1,\"676\":2,\"677\":2,\"678\":1,\"682\":2,\"686\":1,\"688\":1,\"689\":3,\"692\":1,\"694\":1,\"727\":1,\"845\":1,\"850\":1,\"853\":1,\"854\":2,\"857\":1,\"860\":2,\"861\":1,\"869\":2,\"873\":1,\"876\":1,\"886\":1}}],[\"遇到\",{\"1\":{\"554\":1}}],[\"遇到并发问题就会导致panic\",{\"1\":{\"358\":1}}],[\"遇到范围查询\",{\"1\":{\"226\":1}}],[\"遇到分号表示该段语句已经结束\",{\"1\":{\"166\":1,\"202\":1}}],[\"相同的信息将始终产生相同的输出\",{\"1\":{\"860\":1}}],[\"相同的机制\",{\"1\":{\"672\":1}}],[\"相同\",{\"1\":{\"585\":2,\"677\":1,\"852\":1,\"858\":1}}],[\"相同点\",{\"1\":{\"353\":1}}],[\"相隔\",{\"1\":{\"553\":1}}],[\"相对简单的情况下\",{\"1\":{\"625\":1}}],[\"相对的方式\",{\"1\":{\"656\":1}}],[\"相对的\",{\"1\":{\"578\":1}}],[\"相对的平衡上\",{\"1\":{\"410\":1}}],[\"相对于一般规则而言\",{\"1\":{\"527\":1}}],[\"相媲美\",{\"1\":{\"499\":1}}],[\"相提并论\",{\"1\":{\"473\":1}}],[\"相反的过程使用通用的\",{\"1\":{\"686\":1}}],[\"相反地\",{\"1\":{\"467\":1,\"659\":1}}],[\"相反\",{\"1\":{\"445\":1,\"585\":1,\"869\":1}}],[\"相关示例请看第\",{\"1\":{\"699\":1}}],[\"相关的汇编器名称为\",{\"1\":{\"481\":1}}],[\"相关的\",{\"1\":{\"481\":1,\"502\":1}}],[\"相关的函数要停止当前工作然后返回了\",{\"1\":{\"394\":1}}],[\"相关包和工具的参考\",{\"1\":{\"467\":1}}],[\"相关文章以及演讲的资料收集和整理\",{\"1\":{\"467\":1}}],[\"相关术语\",{\"1\":{\"60\":1}}],[\"相比与\",{\"1\":{\"562\":1}}],[\"相比较于继承\",{\"1\":{\"647\":1}}],[\"相比较\",{\"1\":{\"551\":1}}],[\"相比计算机性能的提升\",{\"1\":{\"472\":1}}],[\"相比\",{\"1\":{\"383\":1,\"450\":1,\"548\":1,\"860\":1}}],[\"相较于\",{\"1\":{\"320\":1}}],[\"相当int32\",{\"1\":{\"327\":1}}],[\"相当于声明了一个未初始化的变量并且取了它的地址\",{\"1\":{\"605\":1}}],[\"相当于\",{\"1\":{\"605\":1}}],[\"相当于内测版\",{\"1\":{\"483\":1}}],[\"相当于自动实现了接收者是指针类型的方法\",{\"1\":{\"381\":1}}],[\"相当于外表循环\",{\"1\":{\"306\":1}}],[\"相当于对分的组进行了排序\",{\"1\":{\"304\":1}}],[\"相当复杂\",{\"1\":{\"238\":1}}],[\"相等\",{\"1\":{\"226\":1}}],[\"具备代码重构的能力\",{\"1\":{\"490\":1}}],[\"具有独立的和不同的存在\",{\"1\":{\"868\":1}}],[\"具有有效signatures\",{\"1\":{\"857\":1}}],[\"具有特定含义的声明称为注册声明\",{\"1\":{\"851\":1}}],[\"具有同样的功能\",{\"1\":{\"682\":1}}],[\"具有同样名字的方法可以在\",{\"1\":{\"651\":1}}],[\"具有更大的灵活性\",{\"1\":{\"659\":1}}],[\"具有相同底层类型的变量之间可以相互转换\",{\"1\":{\"511\":1}}],[\"具有很好的操作体验和代码补全功能\",{\"1\":{\"491\":1}}],[\"具有很强的稳定性\",{\"1\":{\"320\":1}}],[\"具有像动态语言那样快速编译的能力\",{\"1\":{\"488\":1}}],[\"具有显著优势\",{\"1\":{\"462\":1}}],[\"具有高性能\",{\"1\":{\"462\":1}}],[\"具有父类的实例域和方法\",{\"1\":{\"315\":1}}],[\"具有以下优点\",{\"1\":{\"224\":1}}],[\"具体可以参见\",{\"1\":{\"689\":1}}],[\"具体可以去看郝林老师的\",{\"1\":{\"450\":1}}],[\"具体请参考\",{\"1\":{\"678\":1}}],[\"具体使用方法请参见示例\",{\"1\":{\"627\":1}}],[\"具体参见或运算符\",{\"1\":{\"525\":1}}],[\"具体参见和运算符\",{\"1\":{\"525\":1}}],[\"具体例子可以参见示例\",{\"1\":{\"517\":1}}],[\"具体见下面的框架扩展\",{\"1\":{\"462\":1}}],[\"具体的实现可能千差万别\",{\"1\":{\"658\":1}}],[\"具体的实现比较难描述\",{\"1\":{\"429\":1}}],[\"具体的协作式调度\",{\"1\":{\"412\":1}}],[\"具体的key值\",{\"1\":{\"365\":1}}],[\"具体类型转非空接口时\",{\"1\":{\"390\":1}}],[\"具体类型转空接口时\",{\"1\":{\"390\":1}}],[\"具体是指一个类实例\",{\"1\":{\"316\":1}}],[\"具体字段\",{\"0\":{\"303\":1}}],[\"具体来说\",{\"1\":{\"236\":1}}],[\"具体细节依赖于实现方式\",{\"1\":{\"223\":1}}],[\"具体到某个软件来说\",{\"1\":{\"71\":1}}],[\"具体操作如下\",{\"1\":{\"52\":1}}],[\"哈希因子过大\",{\"1\":{\"368\":1}}],[\"哈希因子过小\",{\"1\":{\"368\":1}}],[\"哈希表需要将负载因子控制在合适的大小\",{\"1\":{\"368\":1}}],[\"哈希冲突\",{\"0\":{\"367\":1}}],[\"哈希值相同的键\",{\"1\":{\"365\":1}}],[\"哈希取模\",{\"1\":{\"249\":1}}],[\"哈希索引有可能出现哈希冲突\",{\"1\":{\"217\":1}}],[\"哈希索引只支持等值比较查询\",{\"1\":{\"217\":1}}],[\"哈希索引不支持部分索引匹配查找\",{\"1\":{\"217\":1}}],[\"哈希索引数据不是按照索引值顺序存储的\",{\"1\":{\"217\":1}}],[\"哈希索引将所有的\",{\"1\":{\"217\":1}}],[\"哈希结构索引的缺点\",{\"1\":{\"217\":1}}],[\"哈希结构索引的优点\",{\"1\":{\"217\":1}}],[\"到日期\",{\"1\":{\"869\":3}}],[\"到第\",{\"1\":{\"682\":1}}],[\"到底是\",{\"1\":{\"649\":1}}],[\"到底谁才是no\",{\"1\":{\"318\":1}}],[\"到本地的\",{\"1\":{\"627\":1}}],[\"到数组末尾的数组长度\",{\"1\":{\"585\":1}}],[\"到目前为止\",{\"1\":{\"548\":1}}],[\"到字符串\",{\"0\":{\"543\":1}}],[\"到某个时间点超时\",{\"1\":{\"394\":1}}],[\"到\",{\"1\":{\"215\":1,\"318\":1,\"499\":1,\"553\":1,\"554\":1,\"573\":1,\"580\":2,\"593\":1,\"631\":1,\"689\":1,\"696\":2}}],[\"到期时间\",{\"1\":{\"29\":1}}],[\"叶子节点的\",{\"1\":{\"640\":1}}],[\"叶子节点不存储指针\",{\"1\":{\"215\":1}}],[\"叶结点不包含任何关键字信息\",{\"1\":{\"214\":1}}],[\"树中的\",{\"1\":{\"640\":1}}],[\"树中存储的内容是实际的数据\",{\"1\":{\"294\":1}}],[\"树中存储的内容实际上是实际数据的地址值\",{\"1\":{\"294\":1}}],[\"树的顶层节点叫根节点\",{\"1\":{\"640\":1}}],[\"树的路由\",{\"1\":{\"455\":1}}],[\"树的索引和数据行\",{\"1\":{\"223\":1}}],[\"树的叶子节点间按顺序建立了链指针\",{\"1\":{\"216\":1}}],[\"树每个节点的\",{\"1\":{\"216\":1}}],[\"树对索引列上的区间范围查询很友好\",{\"1\":{\"216\":1}}],[\"树更大\",{\"1\":{\"216\":1}}],[\"树更适合外部存储\",{\"1\":{\"216\":1}}],[\"树单次磁盘\",{\"1\":{\"216\":1}}],[\"树\",{\"0\":{\"214\":1,\"215\":1,\"216\":2},\"1\":{\"213\":2,\"294\":1}}],[\"聚集的和分布的索赔类型\",{\"1\":{\"868\":1}}],[\"聚集索引\",{\"1\":{\"212\":1}}],[\"聚合和分布式索赔\",{\"0\":{\"944\":1}}],[\"聚合和丰富数据\",{\"1\":{\"6\":1}}],[\"聚合\",{\"1\":{\"656\":1}}],[\"聚簇表示数据行和相邻的键值紧凑地存储在一起\",{\"1\":{\"223\":1}}],[\"聚簇索引包含的信息多\",{\"1\":{\"303\":1}}],[\"聚簇索引不是一种单独的索引类型\",{\"1\":{\"223\":1}}],[\"聚簇索引\",{\"0\":{\"223\":1}}],[\"何时使用索引\",{\"0\":{\"211\":1}}],[\"写代码\",{\"1\":{\"808\":1}}],[\"写出程序的输出结果\",{\"1\":{\"689\":1}}],[\"写的服务之间的通信\",{\"1\":{\"686\":1}}],[\"写文件\",{\"0\":{\"680\":1}}],[\"写这条语句的惯用方法是\",{\"1\":{\"640\":1}}],[\"写一个过滤器\",{\"1\":{\"729\":1}}],[\"写一个通道证明它的阻塞性\",{\"1\":{\"701\":1}}],[\"写一个单元测试\",{\"1\":{\"689\":1}}],[\"写一个程序读取\",{\"1\":{\"686\":1}}],[\"写一个新的版本\",{\"1\":{\"587\":1}}],[\"写一个循环并用下标给数组赋值\",{\"1\":{\"580\":1}}],[\"写一个函数\",{\"1\":{\"567\":1,\"590\":1,\"593\":2,\"662\":1}}],[\"写一个从\",{\"1\":{\"554\":1}}],[\"写一个\",{\"1\":{\"551\":1,\"591\":4,\"681\":1,\"689\":1}}],[\"写过c\",{\"1\":{\"445\":1}}],[\"写会\",{\"0\":{\"425\":1}}],[\"写数据的流程\",{\"1\":{\"405\":1}}],[\"写数据也会阻塞\",{\"1\":{\"405\":1}}],[\"写关闭异常\",{\"1\":{\"400\":1}}],[\"写\",{\"0\":{\"399\":1},\"1\":{\"658\":1,\"672\":1,\"680\":1,\"782\":1}}],[\"写等待队列\",{\"1\":{\"398\":1}}],[\"写go单元测试的规范\",{\"0\":{\"342\":1}}],[\"写在\",{\"1\":{\"271\":1}}],[\"写在最后\",{\"1\":{\"270\":1}}],[\"写锁和读锁的关系\",{\"1\":{\"232\":1}}],[\"写操作性能下降\",{\"1\":{\"283\":1}}],[\"写操作的性能提高\",{\"1\":{\"283\":1}}],[\"写操作\",{\"1\":{\"210\":1,\"234\":1}}],[\"写入\",{\"1\":{\"682\":1}}],[\"写入到文本文件中\",{\"1\":{\"680\":1}}],[\"写入器也类似\",{\"1\":{\"678\":1}}],[\"写入屏障的流程\",{\"1\":{\"429\":1}}],[\"写入数据库或别的持久层\",{\"1\":{\"28\":1}}],[\"写入用户的\",{\"1\":{\"28\":1}}],[\"❌\",{\"1\":{\"210\":1,\"211\":1,\"220\":1,\"221\":1,\"239\":6,\"277\":1,\"278\":1}}],[\"✔️\",{\"1\":{\"239\":6}}],[\"✔\",{\"1\":{\"210\":1,\"211\":1,\"221\":1,\"277\":1,\"278\":1}}],[\"什么时候用表级锁\",{\"1\":{\"231\":1}}],[\"什么时候用行级锁\",{\"1\":{\"231\":1}}],[\"什么是json\",{\"0\":{\"845\":1}}],[\"什么是协程\",{\"0\":{\"694\":1}}],[\"什么是水平拆分\",{\"1\":{\"245\":1}}],[\"什么是垂直拆分\",{\"1\":{\"245\":1}}],[\"什么是分库分表\",{\"0\":{\"245\":1},\"1\":{\"245\":1}}],[\"什么是\",{\"0\":{\"310\":1,\"409\":1},\"1\":{\"234\":1,\"245\":1}}],[\"什么是意向锁\",{\"1\":{\"233\":1}}],[\"什么是读写锁\",{\"1\":{\"232\":1}}],[\"什么是行级锁和表级锁\",{\"1\":{\"231\":1}}],[\"什么是索引\",{\"0\":{\"209\":1}}],[\"什么情况下会发生内存逃逸\",{\"0\":{\"439\":1}}],[\"什么情况下内存会泄露\",{\"0\":{\"438\":1}}],[\"什么情况下使用jwt比较适合\",{\"1\":{\"26\":1}}],[\"什么情况不适用索引\",{\"1\":{\"211\":1}}],[\"什么情况适用索引\",{\"1\":{\"211\":1}}],[\"维基百科\",{\"1\":{\"602\":1,\"624\":1}}],[\"维基百科词条\",{\"1\":{\"205\":1}}],[\"维护等等\",{\"1\":{\"320\":1}}],[\"维护起来也很麻烦\",{\"1\":{\"72\":1}}],[\"参看\",{\"1\":{\"682\":2}}],[\"参阅\",{\"1\":{\"669\":1,\"682\":3}}],[\"参见章节3\",{\"1\":{\"874\":1}}],[\"参见章节13\",{\"1\":{\"873\":2}}],[\"参见rfc3339\",{\"1\":{\"869\":1}}],[\"参见示例\",{\"1\":{\"701\":1}}],[\"参见https\",{\"1\":{\"692\":1}}],[\"参见后面的章节\",{\"1\":{\"687\":1}}],[\"参见\",{\"1\":{\"635\":1,\"672\":1,\"675\":1,\"676\":2,\"686\":1,\"687\":2,\"688\":1,\"689\":5}}],[\"参见项目主页\",{\"1\":{\"629\":1}}],[\"参见下面的例子\",{\"1\":{\"610\":1}}],[\"参见第16\",{\"1\":{\"869\":1}}],[\"参见第\",{\"1\":{\"582\":1,\"585\":1,\"588\":2,\"590\":1,\"623\":2,\"627\":3,\"638\":1,\"693\":1,\"694\":1,\"708\":1,\"709\":2}}],[\"参与的项目包括\",{\"1\":{\"469\":1}}],[\"参与开发\",{\"1\":{\"469\":1}}],[\"参考章节\",{\"1\":{\"680\":1}}],[\"参考第\",{\"1\":{\"561\":1,\"564\":1,\"580\":1,\"591\":2,\"640\":2,\"651\":1,\"654\":1,\"658\":2}}],[\"参考并致谢\",{\"0\":{\"463\":1}}],[\"参考链接\",{\"1\":{\"394\":1}}],[\"参考如下连接\",{\"1\":{\"328\":1}}],[\"参考\",{\"1\":{\"325\":1,\"430\":1,\"561\":7,\"562\":2,\"580\":3,\"583\":1,\"595\":1,\"662\":3,\"665\":1,\"667\":1,\"682\":1}}],[\"参考资料\",{\"0\":{\"205\":1}}],[\"参数中引用\",{\"1\":{\"689\":1}}],[\"参数中的\",{\"1\":{\"662\":1}}],[\"参数的数量和类型是不相关的\",{\"1\":{\"689\":1}}],[\"参数和结果的传输\",{\"1\":{\"686\":1}}],[\"参数和返回值变量也是局部变量\",{\"1\":{\"515\":1}}],[\"参数被认为是文件名\",{\"1\":{\"682\":1}}],[\"参数为空接口类型\",{\"1\":{\"670\":1}}],[\"参数为函数时\",{\"1\":{\"624\":1}}],[\"参数可以是\",{\"1\":{\"628\":1}}],[\"参数来实现\",{\"1\":{\"575\":1}}],[\"参数\",{\"1\":{\"449\":2,\"564\":1,\"662\":1,\"670\":1}}],[\"参数传递还有引用传递\",{\"1\":{\"329\":1}}],[\"参数是animalsounder接口类型\",{\"1\":{\"316\":1}}],[\"参数列表\",{\"1\":{\"162\":1,\"198\":1}}],[\"限流\",{\"1\":{\"405\":1,\"459\":1,\"462\":1}}],[\"限于篇幅\",{\"1\":{\"168\":1}}],[\"限制对资源的访问\",{\"1\":{\"707\":1}}],[\"限制查询数量\",{\"0\":{\"127\":1}}],[\"限制返回的行数\",{\"1\":{\"122\":1}}],[\"调试\",{\"0\":{\"691\":1,\"692\":1}}],[\"调试器\",{\"0\":{\"494\":1}}],[\"调试困难\",{\"1\":{\"164\":1,\"200\":1}}],[\"调度的基本单位\",{\"1\":{\"408\":1}}],[\"调度器初始化\",{\"1\":{\"415\":1}}],[\"调度器的生命周期几乎占满了一个go程序的一生\",{\"1\":{\"415\":1}}],[\"调度器的生命周期\",{\"0\":{\"413\":1}}],[\"调度器的设计策略\",{\"0\":{\"411\":1}}],[\"调度器会将当前线程的执行上下文进行保存\",{\"1\":{\"412\":1}}],[\"调度器引入\",{\"1\":{\"330\":1}}],[\"调度器可以防止\",{\"1\":{\"330\":1}}],[\"调度器将把当前阻塞的\",{\"1\":{\"330\":1}}],[\"调用getinstance方法\",{\"1\":{\"803\":1}}],[\"调用这个方法的代码可以这样迭代容器\",{\"1\":{\"708\":1}}],[\"调用这些函数\",{\"1\":{\"689\":1}}],[\"调用这些方法\",{\"1\":{\"668\":1}}],[\"调用频繁\",{\"1\":{\"692\":1}}],[\"调用了\",{\"1\":{\"689\":1}}],[\"调用中传递过来的错误值\",{\"1\":{\"689\":1}}],[\"调用参数的\",{\"1\":{\"662\":1}}],[\"调用匿名\",{\"1\":{\"651\":1}}],[\"调用变参函数\",{\"1\":{\"567\":1}}],[\"调用著名的malloc和new函数可以在堆上分配一块内存\",{\"1\":{\"445\":1}}],[\"调用的是实体类型实现的函数\",{\"1\":{\"391\":1}}],[\"调用\",{\"1\":{\"390\":3,\"431\":1,\"485\":1,\"651\":1,\"660\":1,\"689\":1,\"692\":1,\"694\":1}}],[\"调用函数\",{\"1\":{\"671\":1}}],[\"调用函数时\",{\"1\":{\"382\":1}}],[\"调用函数传入结构体时\",{\"0\":{\"329\":1}}],[\"调用eat方法\",{\"1\":{\"338\":1}}],[\"调用顺序是\",{\"1\":{\"325\":1}}],[\"调用存储过程\",{\"1\":{\"168\":1,\"204\":1}}],[\"游标使用示例\",{\"1\":{\"168\":1,\"204\":1}}],[\"游标主要用于交互式应用\",{\"1\":{\"168\":1,\"204\":1}}],[\"游标\",{\"0\":{\"168\":1,\"204\":1},\"1\":{\"168\":1,\"204\":1}}],[\"固定写法\",{\"1\":{\"167\":1,\"203\":1}}],[\"取步骤\",{\"1\":{\"856\":1}}],[\"取自\",{\"1\":{\"852\":1}}],[\"取决于\",{\"1\":{\"703\":1}}],[\"取决于你的个人情况\",{\"1\":{\"483\":1}}],[\"取代\",{\"1\":{\"663\":1}}],[\"取而代之的是统一的\",{\"1\":{\"481\":1}}],[\"取出位于切片\",{\"1\":{\"601\":1}}],[\"取出\",{\"1\":{\"405\":1}}],[\"取出数据\",{\"1\":{\"168\":1,\"204\":1}}],[\"取哈希值高位在tophash数组中查询\",{\"1\":{\"374\":1}}],[\"取哈希值低位与hmap\",{\"1\":{\"374\":1,\"375\":1}}],[\"取不到而已\",{\"1\":{\"362\":1}}],[\"取值是不会报错的\",{\"1\":{\"362\":1}}],[\"取值\",{\"1\":{\"321\":1}}],[\"取值为\",{\"1\":{\"167\":2,\"203\":2}}],[\"取地址\",{\"1\":{\"321\":1}}],[\"取余运算符只能作用于整数\",{\"1\":{\"527\":1}}],[\"取余也是\",{\"1\":{\"258\":1}}],[\"取余得\",{\"1\":{\"258\":1}}],[\"取消开机自启\",{\"1\":{\"52\":1}}],[\"触发一个运行时\",{\"1\":{\"689\":1}}],[\"触发扩容的条件有二个\",{\"1\":{\"371\":1}}],[\"触发\",{\"0\":{\"371\":1}}],[\"触发了触发器的那一行数据\",{\"1\":{\"166\":1,\"202\":1}}],[\"触发器执行动作\",{\"1\":{\"167\":1,\"203\":1}}],[\"触发器的监听目标\",{\"1\":{\"167\":1,\"203\":1}}],[\"触发器的监听事件\",{\"1\":{\"167\":1,\"203\":1}}],[\"触发器的触发时机\",{\"1\":{\"167\":1,\"203\":1}}],[\"触发器名\",{\"1\":{\"167\":1,\"203\":1}}],[\"触发器指令\",{\"0\":{\"167\":1,\"203\":1}}],[\"触发器特性\",{\"0\":{\"166\":1,\"202\":1}}],[\"触发器是一种与表操作有关的数据库对象\",{\"1\":{\"165\":1,\"201\":1}}],[\"触发器可以视为一种特殊的存储过程\",{\"1\":{\"165\":1,\"201\":1}}],[\"触发器\",{\"0\":{\"165\":1,\"201\":1},\"1\":{\"205\":1}}],[\"才需要此声明\",{\"1\":{\"869\":1}}],[\"才需要关闭通道\",{\"1\":{\"709\":1}}],[\"才能使用该代码验证信息\",{\"1\":{\"860\":1}}],[\"才能进行如\",{\"1\":{\"515\":1}}],[\"才继续执行下边的代码\",{\"1\":{\"708\":1}}],[\"才分配到栈上\",{\"1\":{\"445\":1}}],[\"才使用go中引入的exception处理\",{\"1\":{\"425\":1}}],[\"才使得同时运行数百个甚至数千个\",{\"1\":{\"320\":1}}],[\"才是可设置的\",{\"1\":{\"670\":1}}],[\"才是调度器的真正开始\",{\"1\":{\"415\":1}}],[\"才是字符串\",{\"1\":{\"333\":1}}],[\"才会装载singletoninstance类\",{\"1\":{\"803\":1}}],[\"才会正式对数据的冲突与否进行检测\",{\"1\":{\"419\":1}}],[\"才会采用主键索引来进行统计\",{\"1\":{\"303\":1}}],[\"才会提交\",{\"1\":{\"151\":1,\"187\":1}}],[\"才执行\",{\"1\":{\"276\":1}}],[\"才认为是语句结束\",{\"1\":{\"166\":1,\"202\":1}}],[\"解码和解码前两个元素\",{\"1\":{\"858\":1}}],[\"解码不安全的jwt\",{\"0\":{\"856\":1}}],[\"解码后的有效载荷\",{\"1\":{\"849\":1}}],[\"解码后的报文头\",{\"1\":{\"849\":1}}],[\"解码并打印它的内容\",{\"1\":{\"686\":1}}],[\"解码客户端会继续识别以前存在的字段\",{\"1\":{\"686\":1}}],[\"解码客户端仍然可以以这种方式正常工作\",{\"1\":{\"686\":1}}],[\"解码数据到结构\",{\"0\":{\"685\":1}}],[\"解码任意的数据\",{\"0\":{\"684\":1}}],[\"解码为数据结构\",{\"1\":{\"683\":1}}],[\"解码是从一个数据流\",{\"1\":{\"682\":1}}],[\"解码\",{\"1\":{\"682\":1,\"686\":1}}],[\"解析规则中一样\",{\"1\":{\"853\":1}}],[\"解析这两项技术\",{\"1\":{\"682\":1}}],[\"解析后\",{\"1\":{\"682\":1}}],[\"解析\",{\"1\":{\"623\":1,\"683\":1}}],[\"解析器\",{\"1\":{\"623\":2,\"686\":1}}],[\"解压缩\",{\"1\":{\"614\":1}}],[\"解锁一个加锁的资源\",{\"1\":{\"568\":1}}],[\"解释为什么下边这个程序会导致\",{\"1\":{\"702\":1}}],[\"解释一下为什么如果在函数\",{\"1\":{\"700\":1}}],[\"解释下二者的区别\",{\"1\":{\"640\":1}}],[\"解释字符串\",{\"1\":{\"532\":1}}],[\"解释器\",{\"0\":{\"488\":1},\"1\":{\"488\":1}}],[\"解释器不会有什么反应\",{\"1\":{\"166\":1,\"202\":1}}],[\"解释器遇到触发器执行动作中的分号后就开始执行\",{\"1\":{\"166\":1,\"202\":1}}],[\"解哪种情况下应该使用\",{\"0\":{\"306\":1}}],[\"解决索赔\",{\"0\":{\"929\":1}}],[\"解决冲突\",{\"0\":{\"830\":1}}],[\"解决读写问题\",{\"1\":{\"707\":1}}],[\"解决之道在于同步不同的线程\",{\"1\":{\"694\":1}}],[\"解决的问题的同时\",{\"1\":{\"467\":1}}],[\"解决的是用户的分组\",{\"1\":{\"73\":1}}],[\"解决的是权限的分组\",{\"1\":{\"73\":1}}],[\"解决哈希冲突\",{\"0\":{\"366\":1}}],[\"解决办法\",{\"1\":{\"324\":1}}],[\"解决这个问题\",{\"1\":{\"553\":1}}],[\"解决这个问题的另一个办法是通过设置环境变量\",{\"1\":{\"483\":1}}],[\"解决这个问题非常地优雅和流畅\",{\"1\":{\"320\":1}}],[\"解决这一问题的普遍做法是分两次查询实现\",{\"1\":{\"255\":1}}],[\"解决了什么问题\",{\"1\":{\"234\":1}}],[\"解决方式\",{\"1\":{\"828\":1}}],[\"解决方法是通过并发控制来保证隔离性\",{\"1\":{\"238\":1}}],[\"解决方法是\",{\"1\":{\"221\":1}}],[\"解决方案\",{\"0\":{\"12\":1},\"1\":{\"256\":1}}],[\"解决单点登录问题\",{\"1\":{\"26\":1}}],[\"之外\",{\"1\":{\"501\":1,\"523\":1}}],[\"之所以刻意地将\",{\"1\":{\"504\":1}}],[\"之所以能够正常工作是因为\",{\"1\":{\"498\":1}}],[\"之所以说go出身名门\",{\"1\":{\"320\":1}}],[\"之类的服务中这是非常容易嵌入的\",{\"1\":{\"638\":1}}],[\"之类的字符\",{\"1\":{\"512\":1}}],[\"之类的工具\",{\"1\":{\"483\":1}}],[\"之类的指令进行程序的构建\",{\"1\":{\"481\":1}}],[\"之前通信不会阻塞\",{\"1\":{\"703\":1}}],[\"之前我们忽略了相关的错误检查\",{\"1\":{\"550\":1}}],[\"之前使用它\",{\"1\":{\"518\":1}}],[\"之前使用注释\",{\"1\":{\"501\":1}}],[\"之前你需要先安装相关的\",{\"1\":{\"483\":1}}],[\"之前就已经设置好他们\",{\"1\":{\"482\":1}}],[\"之前的版本所谓标记清除是先启动\",{\"1\":{\"429\":1}}],[\"之前普通标记清除\",{\"1\":{\"429\":1}}],[\"之前\",{\"1\":{\"310\":1,\"561\":1,\"703\":1}}],[\"之间允许有空格\",{\"1\":{\"605\":1}}],[\"之间可以相互比较\",{\"1\":{\"561\":1}}],[\"之间类型相同时\",{\"1\":{\"515\":1}}],[\"之间具有更多的可比性\",{\"1\":{\"499\":1}}],[\"之间的直接通信接收到的\",{\"1\":{\"887\":1}}],[\"之间的相互调用\",{\"1\":{\"570\":1}}],[\"之间的伪随机数\",{\"1\":{\"528\":2}}],[\"之间的数据交互等\",{\"1\":{\"394\":1}}],[\"之间的通信\",{\"1\":{\"320\":1,\"473\":1}}],[\"之间的触发器执行动作\",{\"1\":{\"166\":1,\"202\":1}}],[\"之间通信的优先方式\",{\"1\":{\"320\":1}}],[\"之间\",{\"1\":{\"214\":1,\"499\":1}}],[\"之后都是自己编译自己了\",{\"1\":{\"629\":1}}],[\"之后本地安装包的二进制文件将全被删除\",{\"1\":{\"629\":1}}],[\"之后的语句都不会执行\",{\"1\":{\"562\":1}}],[\"之后的左大括号\",{\"1\":{\"549\":1}}],[\"之后添加相应的\",{\"1\":{\"551\":1}}],[\"之后没赋值的常量都会应用上一行的赋值表达式\",{\"1\":{\"513\":1}}],[\"之后就明白这为什么是多余的了\",{\"1\":{\"496\":1}}],[\"之后就报错\",{\"1\":{\"6\":1}}],[\"之后我们学到了更多\",{\"1\":{\"467\":1}}],[\"之后要通过垃圾回收才能释放\",{\"1\":{\"445\":1}}],[\"之后\",{\"1\":{\"442\":1,\"510\":1,\"601\":1,\"682\":1,\"858\":1}}],[\"之后不再被引用\",{\"1\":{\"442\":1}}],[\"之后不再进行第二次重复扫描\",{\"1\":{\"429\":1}}],[\"之后会带来什么改变呢\",{\"1\":{\"410\":1}}],[\"之后会从其它的p队列里窃取一半的g\",{\"1\":{\"409\":1}}],[\"之后直接从\",{\"1\":{\"390\":1}}],[\"之后即可quit\",{\"1\":{\"52\":1}}],[\"综合申索的例子\",{\"0\":{\"945\":1}}],[\"综合了rbac0\",{\"1\":{\"69\":1}}],[\"综上\",{\"1\":{\"164\":1,\"200\":1}}],[\"高\",{\"1\":{\"662\":1}}],[\"高为\",{\"1\":{\"554\":1}}],[\"高扩展性hertz\",{\"1\":{\"461\":1}}],[\"高扩展性等特点\",{\"1\":{\"461\":1}}],[\"高易用性在开发过程中\",{\"1\":{\"461\":1}}],[\"高可用的核心部分之一\",{\"1\":{\"426\":1}}],[\"高度的抽象化和高性能\",{\"1\":{\"476\":1}}],[\"高度支持并发性\",{\"1\":{\"320\":1}}],[\"高度灵活的日期运算函数\",{\"1\":{\"148\":1,\"181\":1}}],[\"高性能使用自研的高性能网络库\",{\"1\":{\"462\":1}}],[\"高性能hertz\",{\"1\":{\"461\":1}}],[\"高性能的应用\",{\"1\":{\"320\":1}}],[\"高性能\",{\"1\":{\"320\":1,\"461\":1}}],[\"高级别范式的依赖于低级别的范式\",{\"1\":{\"289\":1}}],[\"高效开发\",{\"1\":{\"479\":1}}],[\"高效执行\",{\"1\":{\"472\":1,\"479\":1}}],[\"高效\",{\"1\":{\"445\":1}}],[\"高效方式\",{\"1\":{\"277\":1,\"278\":1}}],[\"高效示例\",{\"1\":{\"221\":1}}],[\"高并发\",{\"1\":{\"243\":1,\"245\":1}}],[\"高并发的场景需要减少数据库的压力\",{\"1\":{\"164\":1,\"200\":1}}],[\"赋任何类型的值\",{\"1\":{\"663\":1}}],[\"赋另一个值来更改\",{\"1\":{\"547\":1}}],[\"赋值后属性不能再改变\",{\"1\":{\"770\":1}}],[\"赋值\",{\"1\":{\"518\":1}}],[\"赋值也是不够的\",{\"1\":{\"518\":1}}],[\"赋值操作符\",{\"0\":{\"518\":1}}],[\"赋值给变量使用运算符等号\",{\"1\":{\"515\":1}}],[\"赋值两个常量\",{\"1\":{\"513\":1}}],[\"赋值一个常量时\",{\"1\":{\"513\":1}}],[\"赋值语句\",{\"1\":{\"163\":1,\"199\":1}}],[\"赋予用户某种身份\",{\"1\":{\"60\":1}}],[\"流向通道\",{\"1\":{\"700\":1}}],[\"流中的\",{\"1\":{\"662\":1}}],[\"流行程度\",{\"1\":{\"469\":1}}],[\"流程是\",{\"1\":{\"429\":1}}],[\"流程说明\",{\"1\":{\"30\":1}}],[\"流控制语句\",{\"1\":{\"163\":1,\"199\":1}}],[\"授予权限\",{\"0\":{\"159\":1,\"195\":1}}],[\"授权响应必须返回oauth\",{\"1\":{\"877\":1}}],[\"授权端点的使用方式与第3\",{\"1\":{\"891\":1}}],[\"授权端点执行最终用户的身份验证\",{\"1\":{\"872\":1}}],[\"授权端点\",{\"0\":{\"872\":1,\"891\":1,\"905\":1}}],[\"授权码验证\",{\"0\":{\"915\":1}}],[\"授权码流步骤\",{\"0\":{\"871\":1}}],[\"授权码流适用于能够在自己和授权服务器之间安全维护客户端密码的客户端\",{\"1\":{\"870\":1}}],[\"授权码流将授权码返回给客户端\",{\"1\":{\"870\":1}}],[\"授权码从授权端点返回\",{\"1\":{\"868\":2}}],[\"授权代码流执行以下步骤\",{\"1\":{\"871\":1}}],[\"授权代码流\",{\"1\":{\"869\":1}}],[\"授权代码流程\",{\"1\":{\"868\":1}}],[\"授权方\",{\"1\":{\"869\":1}}],[\"授权服务器获取请求对象\",{\"0\":{\"953\":1}}],[\"授权服务器获得最终用户同意\",{\"0\":{\"876\":1,\"895\":1,\"909\":1},\"1\":{\"871\":1,\"890\":1}}],[\"授权服务器不执行客户端身份验证\",{\"1\":{\"889\":1}}],[\"授权服务器不应该对所使用的nonce值执行其他处理\",{\"1\":{\"869\":1}}],[\"授权服务器将终端用户发送回客户端\",{\"1\":{\"890\":1}}],[\"授权服务器将构造错误响应\",{\"1\":{\"884\":1}}],[\"授权服务器将返回一个成功的响应\",{\"1\":{\"883\":1}}],[\"授权服务器将尝试对最终用户进行身份验证或确定最终用户是否已经过身份验证\",{\"1\":{\"875\":1}}],[\"授权服务器可能会返回一个错误\",{\"1\":{\"882\":1}}],[\"授权服务器可以显示身份验证用户界面\",{\"1\":{\"875\":1}}],[\"授权服务器需要最终用户的同意\",{\"1\":{\"878\":1}}],[\"授权服务器需要终端用户身份验证\",{\"1\":{\"878\":1}}],[\"授权服务器需要某种形式的最终用户交互才能继续\",{\"1\":{\"878\":1}}],[\"授权服务器\",{\"1\":{\"878\":1}}],[\"授权服务器用于验证最终用户的方法\",{\"1\":{\"875\":1}}],[\"授权服务器用授权代码将最终用户发送回客户端\",{\"1\":{\"871\":1}}],[\"授权服务器对最终用户进行认证\",{\"0\":{\"875\":1,\"894\":1,\"908\":1}}],[\"授权服务器对终端用户进行认证\",{\"1\":{\"871\":1,\"890\":1}}],[\"授权服务器绝对不能与最终用户交互\",{\"1\":{\"875\":1}}],[\"授权服务器绝对不能为不同的用户回复id令牌或访问令牌\",{\"1\":{\"874\":1}}],[\"授权服务器绝对不能显示任何身份验证或同意用户界面页面\",{\"1\":{\"873\":1}}],[\"授权服务器在向客户端返回信息之前应提示最终用户同意\",{\"1\":{\"873\":1}}],[\"授权服务器应该忽略不可识别的请求参数\",{\"1\":{\"874\":1}}],[\"授权服务器应该提示最终用户选择一个用户帐户\",{\"1\":{\"873\":1}}],[\"授权服务器应该显示与\",{\"1\":{\"873\":1}}],[\"授权服务器应该显示与使用触摸界面的设备一致的身份验证和同意ui\",{\"1\":{\"873\":1}}],[\"授权服务器应该显示与弹出的用户代理窗口一致的身份验证和同意ui\",{\"1\":{\"873\":1}}],[\"授权服务器应该显示与完整的用户代理页面视图一致的身份验证和同意ui\",{\"1\":{\"873\":1}}],[\"授权服务器应提示最终用户重新进行身份验证\",{\"1\":{\"873\":1}}],[\"授权服务器还可以尝试检测用户代理的功能并显示适当的显示\",{\"1\":{\"873\":1}}],[\"授权服务器还可以在将授权码交换为访问令牌之前对客户端进行身份验证\",{\"1\":{\"870\":1}}],[\"授权服务器必须按如下方式验证令牌请求\",{\"1\":{\"882\":1}}],[\"授权服务器必须按照以下方式验证收到的请求\",{\"1\":{\"874\":1}}],[\"授权服务器必须在向依赖方发布信息之前获得授权决定\",{\"1\":{\"876\":1}}],[\"授权服务器必须在id令牌中包含一个nonce声明\",{\"1\":{\"869\":1}}],[\"授权服务器必须采取适当的措施防止跨站请求伪造和点击劫持\",{\"1\":{\"875\":1}}],[\"授权服务器必须返回一个错误\",{\"1\":{\"875\":1}}],[\"授权服务器必须重新验证最终用户\",{\"1\":{\"875\":1}}],[\"授权服务器必须尝试验证最终用户\",{\"1\":{\"875\":1}}],[\"授权服务器必须仅在由该子值标识的最终用户与授权服务器有活动会话或已作为请求的结果进行了身份验证时才发送正面响应\",{\"1\":{\"874\":1}}],[\"授权服务器必须验证是否存在所有必需的参数\",{\"1\":{\"874\":1}}],[\"授权服务器必须根据oauth\",{\"1\":{\"874\":1}}],[\"授权服务器必须支持在授权端点使用rfc2616\",{\"1\":{\"873\":1}}],[\"授权请求中的request\",{\"1\":{\"878\":1}}],[\"授权请求\",{\"1\":{\"868\":1}}],[\"授权许可\",{\"1\":{\"471\":1}}],[\"授权\",{\"0\":{\"876\":1,\"895\":1,\"909\":1},\"1\":{\"26\":1,\"469\":1,\"871\":1,\"890\":1}}],[\"账户用\",{\"1\":{\"154\":1,\"190\":1}}],[\"账号\",{\"1\":{\"72\":1}}],[\"账号类别\",{\"1\":{\"72\":1}}],[\"账号id\",{\"1\":{\"72\":1}}],[\"账号表\",{\"1\":{\"72\":3}}],[\"账号还是nacos\",{\"1\":{\"4\":1}}],[\"回车符\",{\"1\":{\"532\":1}}],[\"回收有三次演进过程\",{\"1\":{\"429\":1}}],[\"回滚到保留点\",{\"1\":{\"151\":1,\"187\":1}}],[\"回退\",{\"1\":{\"151\":1,\"187\":1}}],[\"标头参数\",{\"1\":{\"868\":1}}],[\"标头中可能有更多字段是必填的\",{\"1\":{\"850\":1}}],[\"标头和有效载荷\",{\"1\":{\"849\":1}}],[\"标题中的\",{\"1\":{\"698\":1}}],[\"标志从本地文件读取您的令牌\",{\"1\":{\"782\":1}}],[\"标志向指定文件写入\",{\"1\":{\"691\":1}}],[\"标志\",{\"1\":{\"689\":1}}],[\"标签进一步处理\",{\"1\":{\"686\":1}}],[\"标签类型\",{\"1\":{\"686\":1}}],[\"标签中\",{\"1\":{\"682\":1}}],[\"标签位于\",{\"1\":{\"559\":1}}],[\"标签的内容不可以在一般的编程中使用\",{\"1\":{\"645\":1}}],[\"标签的作用对象为外部循环\",{\"1\":{\"559\":1}}],[\"标签的位置\",{\"1\":{\"559\":1}}],[\"标签的名称是大小写敏感的\",{\"1\":{\"559\":1}}],[\"标签与\",{\"0\":{\"559\":1}}],[\"标识符\",{\"1\":{\"868\":1}}],[\"标识符如果以小写字母开头\",{\"1\":{\"506\":1}}],[\"标识牌\",{\"0\":{\"886\":1,\"901\":1,\"916\":1,\"924\":1},\"1\":{\"868\":1}}],[\"标识关闭状态\",{\"1\":{\"405\":1}}],[\"标记可用的已注册标头声明列表\",{\"1\":{\"861\":1}}],[\"标记测试函数为失败并中止执行\",{\"1\":{\"689\":1}}],[\"标记测试函数为失败\",{\"1\":{\"689\":1}}],[\"标记为第一个版本\",{\"1\":{\"635\":1}}],[\"标记终止完成\",{\"1\":{\"431\":1}}],[\"标记\",{\"1\":{\"431\":2,\"481\":1,\"782\":1}}],[\"标记是针对每个连接而不是针对服务器的\",{\"1\":{\"151\":1,\"187\":1}}],[\"标准要求\",{\"0\":{\"928\":1}}],[\"标准信号量的整数值\",{\"1\":{\"707\":1}}],[\"标准的\",{\"1\":{\"691\":1}}],[\"标准错误以及网络连接\",{\"1\":{\"662\":1}}],[\"标准输入输出\",{\"1\":{\"662\":1}}],[\"标准包会存放在\",{\"1\":{\"506\":1}}],[\"标准库中许多地方都用了这个机制\",{\"1\":{\"689\":1}}],[\"标准库中有许多包含\",{\"1\":{\"689\":1}}],[\"标准库已经提供了相关的排序函数\",{\"1\":{\"662\":1}}],[\"标准库里到处都使用了这个原则\",{\"1\":{\"662\":1}}],[\"标准库广泛的应用了这些规则\",{\"1\":{\"658\":1}}],[\"标准库提供了\",{\"1\":{\"600\":1}}],[\"标准库在\",{\"1\":{\"506\":1}}],[\"标准库的位置在\",{\"1\":{\"506\":1}}],[\"标准库\",{\"0\":{\"614\":1},\"1\":{\"506\":1}}],[\"标准类库\",{\"1\":{\"479\":1}}],[\"标准委员会管理\",{\"1\":{\"83\":1}}],[\"标准\",{\"1\":{\"83\":1,\"523\":1}}],[\"随个人喜好\",{\"1\":{\"651\":1}}],[\"随着软件规模的不断扩大\",{\"1\":{\"467\":1}}],[\"随着数据和查询量的增长\",{\"1\":{\"6\":1}}],[\"随后将会看到它被用来模拟类似继承的行为\",{\"1\":{\"647\":1}}],[\"随后读取这个数据\",{\"1\":{\"238\":1}}],[\"随后修改\",{\"1\":{\"238\":1}}],[\"随机数\",{\"0\":{\"528\":1},\"1\":{\"149\":1,\"182\":1}}],[\"圆周率\",{\"1\":{\"149\":1,\"182\":1}}],[\"余数\",{\"1\":{\"149\":1,\"182\":1}}],[\"余弦\",{\"1\":{\"149\":1,\"182\":1}}],[\"天的名字\",{\"1\":{\"609\":1}}],[\"天生的并发编程支持\",{\"1\":{\"320\":1}}],[\"天\",{\"1\":{\"148\":1,\"181\":1}}],[\"明确同意的内容\",{\"1\":{\"876\":1}}],[\"明确定义排序\",{\"1\":{\"694\":1}}],[\"明显受到\",{\"1\":{\"578\":1}}],[\"明显会大于二级索引\",{\"1\":{\"303\":1}}],[\"明\",{\"1\":{\"148\":1,\"150\":1,\"181\":1,\"183\":1}}],[\"说法中找到自己或忽略\",{\"1\":{\"852\":1}}],[\"说的更精确一点\",{\"1\":{\"338\":1}}],[\"说到继承我们都知道\",{\"1\":{\"338\":1}}],[\"说\",{\"1\":{\"148\":1,\"150\":1,\"181\":1,\"183\":1}}],[\"说明了空接口在\",{\"1\":{\"663\":1}}],[\"说明了\",{\"1\":{\"605\":1}}],[\"说明缓冲区中没有数据或者没有缓冲区\",{\"1\":{\"402\":1,\"405\":1}}],[\"说明空闲位置越少\",{\"1\":{\"370\":2}}],[\"说明空间利用率低\",{\"1\":{\"368\":1}}],[\"说明冲突严重\",{\"1\":{\"368\":1}}],[\"说明\",{\"1\":{\"147\":1,\"149\":1,\"167\":1,\"180\":1,\"182\":1,\"203\":1,\"569\":1,\"662\":1}}],[\"函\",{\"1\":{\"148\":1,\"150\":1,\"181\":1,\"183\":1}}],[\"函数现在短小清晰\",{\"1\":{\"709\":1}}],[\"函数需要的值\",{\"1\":{\"708\":1}}],[\"函数内有个匿名函数被协程调用\",{\"1\":{\"707\":1}}],[\"函数为通道提供数值\",{\"1\":{\"701\":1}}],[\"函数必须保持运行状态\",{\"1\":{\"697\":1}}],[\"函数停止\",{\"1\":{\"697\":1}}],[\"函数暂停\",{\"1\":{\"697\":1}}],[\"函数把\",{\"1\":{\"689\":1}}],[\"函数调用函数参数\",{\"1\":{\"689\":1}}],[\"函数调用其他函数的次数是无穷的\",{\"1\":{\"561\":1}}],[\"函数产生一个中止程序的运行时错误\",{\"1\":{\"689\":1}}],[\"函数都返回一个结果和可能的错误\",{\"1\":{\"688\":1}}],[\"函数总是应该检查收到的错误\",{\"1\":{\"687\":1}}],[\"函数创建\",{\"1\":{\"686\":2}}],[\"函数分别封装了\",{\"1\":{\"686\":1}}],[\"函数分配内存\",{\"1\":{\"588\":1}}],[\"函数向\",{\"1\":{\"682\":1}}],[\"函数有三个参数\",{\"1\":{\"680\":1}}],[\"函数用于获得路径中的最后一个元素\",{\"1\":{\"678\":1}}],[\"函数作参数\",{\"1\":{\"676\":1}}],[\"函数通过传递一个\",{\"1\":{\"669\":1}}],[\"函数通过执行表单模板来展示表单\",{\"1\":{\"638\":1}}],[\"函数并调用它\",{\"1\":{\"663\":1}}],[\"函数并初始化其中的全局变量\",{\"1\":{\"627\":1}}],[\"函数就是如此检测类型是否可以打印自身的\",{\"1\":{\"662\":1}}],[\"函数给一个新的结构体变量分配内存\",{\"1\":{\"640\":1}}],[\"函数逆向转换\",{\"1\":{\"638\":1}}],[\"函数将变量作为参数\",{\"1\":{\"652\":1}}],[\"函数将长地址转换为短地址\",{\"1\":{\"638\":1}}],[\"函数将字符串的所有字母转换为大写\",{\"1\":{\"630\":1}}],[\"函数甚至在一个源码文件中\",{\"1\":{\"627\":1}}],[\"函数常见操作\",{\"0\":{\"601\":1}}],[\"函数初始化\",{\"1\":{\"588\":1}}],[\"函数被表示成不同的矩形\",{\"1\":{\"692\":1}}],[\"函数被创建时的状态\",{\"1\":{\"573\":1}}],[\"函数被调用的时候\",{\"1\":{\"561\":1}}],[\"函数被调用的基本格式如下\",{\"1\":{\"561\":1}}],[\"函数式语言的术语\",{\"1\":{\"573\":1}}],[\"函数式编程\",{\"1\":{\"320\":1}}],[\"函数接收合适的错误信息来创建\",{\"1\":{\"688\":1}}],[\"函数接收一个接口类型的参数\",{\"1\":{\"662\":1}}],[\"函数接收两个参数\",{\"1\":{\"565\":1}}],[\"函数接收参数副本之后\",{\"1\":{\"563\":1}}],[\"函数带有三个形参\",{\"1\":{\"563\":1}}],[\"函数定义时\",{\"1\":{\"562\":1}}],[\"函数能够接收参数供自己使用\",{\"1\":{\"562\":1}}],[\"函数能多次调用其他函数\",{\"1\":{\"561\":1}}],[\"函数不能在其它函数里面声明\",{\"1\":{\"561\":1}}],[\"函数值\",{\"1\":{\"561\":1}}],[\"函数重载\",{\"1\":{\"561\":1}}],[\"函数可以这样写\",{\"1\":{\"708\":1}}],[\"函数可以返回缓冲区的容量\",{\"1\":{\"703\":1}}],[\"函数可以返回多个值\",{\"1\":{\"321\":1}}],[\"函数可以调用或启动外部系统命令和二进制可执行文件\",{\"1\":{\"689\":1}}],[\"函数可以直接写入任何\",{\"1\":{\"680\":1}}],[\"函数可以显式的触发\",{\"1\":{\"661\":1}}],[\"函数可以作为其它函数的参数进行传递\",{\"1\":{\"572\":1}}],[\"函数可以将其他函数调用作为它的参数\",{\"1\":{\"561\":1}}],[\"函数一般是在其他函数里面被调用的\",{\"1\":{\"561\":1}}],[\"函数参数与返回值\",{\"0\":{\"562\":1}}],[\"函数参数\",{\"1\":{\"561\":1}}],[\"函数写在文件的前面\",{\"1\":{\"561\":1}}],[\"函数进行一层忽略错误的封装\",{\"1\":{\"550\":1}}],[\"函数开始执行\",{\"1\":{\"548\":1}}],[\"函数开始执行程序\",{\"1\":{\"510\":1}}],[\"函数来产生\",{\"1\":{\"708\":1}}],[\"函数来在无限循环中读取通道\",{\"1\":{\"701\":1}}],[\"函数来给它分配内存\",{\"1\":{\"699\":1}}],[\"函数来打开一个文件\",{\"1\":{\"678\":1}}],[\"函数来使用\",{\"1\":{\"676\":1}}],[\"函数来创建\",{\"1\":{\"639\":1}}],[\"函数来创建一个切片\",{\"1\":{\"587\":1}}],[\"函数来初始化\",{\"1\":{\"627\":1}}],[\"函数来达到相同的目的\",{\"1\":{\"595\":1}}],[\"函数来提供伪随机数的生成种子\",{\"1\":{\"528\":1}}],[\"函数来获取字符串所占的字节长度\",{\"1\":{\"333\":1}}],[\"函数也可能返回一个错误\",{\"1\":{\"624\":1}}],[\"函数也可以看做是一个协程\",{\"1\":{\"694\":1}}],[\"函数也可以改变参数的状态\",{\"1\":{\"652\":1}}],[\"函数也可以以申明的方式被使用\",{\"1\":{\"561\":1}}],[\"函数也可以是一个确定的类型\",{\"1\":{\"509\":1}}],[\"函数也经常被用在当一个程序开始之前调用后台执行的\",{\"1\":{\"519\":1}}],[\"函数会在所有的被调函数中调用\",{\"1\":{\"689\":1}}],[\"函数会从\",{\"1\":{\"689\":1}}],[\"函数会返回一个错误\",{\"1\":{\"678\":1}}],[\"函数会返回两个字节数组字典顺序的整数对比结果\",{\"1\":{\"599\":1}}],[\"函数会按照从上到下的顺序执行\",{\"1\":{\"519\":1}}],[\"函数会比使用\",{\"1\":{\"274\":1}}],[\"函数高\",{\"1\":{\"519\":1}}],[\"函数同时得到\",{\"1\":{\"518\":1}}],[\"函数在前还是变量的声明在前\",{\"1\":{\"510\":1}}],[\"函数和方法的区别\",{\"0\":{\"652\":1}}],[\"函数和方法的智能代码补全的功能\",{\"1\":{\"490\":1}}],[\"函数和向切片追加新元素的\",{\"1\":{\"593\":1}}],[\"函数和\",{\"1\":{\"572\":1}}],[\"函数和被导出的对象都应该有一个合理的注释\",{\"1\":{\"508\":1}}],[\"函数体\",{\"1\":{\"507\":1}}],[\"函数里调用这个函数\",{\"1\":{\"662\":1}}],[\"函数里的代码\",{\"1\":{\"507\":1}}],[\"函数里先生成\",{\"1\":{\"391\":1}}],[\"函数添加了参数或者返回类型\",{\"1\":{\"507\":1}}],[\"函数既没有参数\",{\"1\":{\"507\":1}}],[\"函数则会先执行该函数\",{\"1\":{\"507\":1}}],[\"函数名\",{\"1\":{\"506\":1,\"692\":4}}],[\"函数是不能被调用的\",{\"1\":{\"627\":1}}],[\"函数是一等值\",{\"1\":{\"561\":1}}],[\"函数是基本的代码块\",{\"1\":{\"561\":1}}],[\"函数是每一个可执行程序所必须包含的\",{\"1\":{\"507\":1}}],[\"函数是\",{\"1\":{\"475\":1,\"560\":1}}],[\"函数退出\",{\"1\":{\"447\":1}}],[\"函数结束后变量会跟着回收掉\",{\"1\":{\"439\":1}}],[\"函数结束再一次从头部取出\",{\"1\":{\"332\":1}}],[\"函数数组传参引发内存泄漏\",{\"1\":{\"438\":1}}],[\"函数中启动了两个协程\",{\"1\":{\"700\":1}}],[\"函数中检查这些\",{\"1\":{\"689\":1}}],[\"函数中写一个用于打印\",{\"1\":{\"573\":1}}],[\"函数中执行\",{\"1\":{\"549\":1}}],[\"函数中计算变量\",{\"1\":{\"519\":1}}],[\"函数中初始化\",{\"1\":{\"519\":1}}],[\"函数中先后调用的顺序来定义相关函数\",{\"1\":{\"510\":1}}],[\"函数中\",{\"1\":{\"391\":1,\"567\":1,\"694\":1}}],[\"函数获取长度\",{\"1\":{\"585\":1}}],[\"函数获取\",{\"1\":{\"390\":1}}],[\"函数外\",{\"1\":{\"561\":1}}],[\"函数外这个\",{\"1\":{\"354\":1}}],[\"函数外和函数内\",{\"1\":{\"354\":1}}],[\"函数只会执行一次\",{\"1\":{\"350\":1}}],[\"函数按照它们的文件名顺序逐个初始化\",{\"1\":{\"350\":1}}],[\"函数的最后\",{\"1\":{\"709\":1}}],[\"函数的最后放置一个\",{\"1\":{\"704\":1}}],[\"函数的实际签名\",{\"1\":{\"682\":1}}],[\"函数的第二版中\",{\"1\":{\"682\":1}}],[\"函数的用法\",{\"1\":{\"663\":1}}],[\"函数的功能非常强大\",{\"1\":{\"560\":1}}],[\"函数的调用者就可以检查函数执行过程中是否存在错误了\",{\"1\":{\"550\":1}}],[\"函数的话\",{\"1\":{\"510\":2,\"519\":1}}],[\"函数的入口\",{\"1\":{\"447\":1}}],[\"函数的执行\",{\"1\":{\"350\":1}}],[\"函数的特征\",{\"0\":{\"350\":1}}],[\"函数的引用拷贝与原始的引用指向同一个数组\",{\"1\":{\"346\":1}}],[\"函数返回一个新的带缓冲的\",{\"1\":{\"677\":1}}],[\"函数返回一个布尔值用来判断当前时间是\",{\"1\":{\"627\":1}}],[\"函数返回的时候\",{\"1\":{\"697\":1}}],[\"函数返回的\",{\"1\":{\"501\":1}}],[\"函数返回结果可以是一个值\",{\"1\":{\"358\":1}}],[\"函数返回指针\",{\"1\":{\"325\":1}}],[\"函数返回值\",{\"1\":{\"325\":1}}],[\"函数决定\",{\"1\":{\"287\":1}}],[\"函数依赖于\",{\"1\":{\"287\":1}}],[\"函数依赖\",{\"0\":{\"287\":1}}],[\"函数已经被\",{\"1\":{\"274\":1}}],[\"函数\",{\"0\":{\"146\":1,\"179\":1,\"507\":1,\"519\":1,\"560\":1},\"1\":{\"147\":1,\"149\":1,\"180\":1,\"182\":1,\"350\":2,\"370\":2,\"449\":1,\"467\":1,\"492\":1,\"501\":1,\"507\":2,\"509\":1,\"510\":1,\"517\":3,\"519\":1,\"524\":1,\"528\":2,\"544\":1,\"549\":1,\"550\":3,\"551\":1,\"561\":2,\"562\":1,\"564\":1,\"567\":1,\"573\":1,\"574\":2,\"575\":1,\"576\":1,\"589\":1,\"591\":1,\"593\":1,\"602\":1,\"610\":1,\"627\":3,\"628\":1,\"640\":1,\"642\":1,\"657\":1,\"662\":1,\"663\":1,\"664\":1,\"669\":1,\"671\":1,\"672\":1,\"675\":1,\"676\":3,\"678\":1,\"680\":2,\"681\":1,\"682\":1,\"686\":1,\"688\":1,\"689\":3,\"694\":1,\"697\":1,\"709\":2,\"859\":2}}],[\"应先用\",{\"1\":{\"585\":1}}],[\"应当\",{\"1\":{\"867\":1}}],[\"应当像\",{\"1\":{\"610\":1}}],[\"应当只使用正序的标签\",{\"1\":{\"559\":1}}],[\"应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算\",{\"1\":{\"521\":1}}],[\"应使用简短声明语法\",{\"1\":{\"515\":1}}],[\"应用来说\",{\"1\":{\"692\":1}}],[\"应用也可以用\",{\"1\":{\"689\":1}}],[\"应用中使用这种模式\",{\"1\":{\"689\":1}}],[\"应用中最好使用\",{\"1\":{\"682\":1}}],[\"应用中的相关网络技巧\",{\"1\":{\"467\":1}}],[\"应用编程接口\",{\"1\":{\"638\":1}}],[\"应用和它的\",{\"1\":{\"638\":1}}],[\"应用闭包\",{\"0\":{\"574\":1}}],[\"应用\",{\"1\":{\"490\":1,\"638\":2,\"689\":1}}],[\"应用的\",{\"1\":{\"467\":1,\"476\":1}}],[\"应用这些高级概念和技巧\",{\"1\":{\"467\":1}}],[\"应用初始化时初始化工作的顺序是\",{\"1\":{\"350\":2}}],[\"应用程序并发处理的部分被称作\",{\"1\":{\"694\":1}}],[\"应用程序也可以通过导入路径\",{\"1\":{\"636\":1}}],[\"应用程序都包含一个名为\",{\"1\":{\"506\":1}}],[\"应用程序要快上\",{\"1\":{\"499\":1}}],[\"应用程序的开发过程中调试是必不可少的一个环节\",{\"1\":{\"494\":1}}],[\"应用程序的机器\",{\"1\":{\"482\":1}}],[\"应用程序在插入数据之前需要先获得\",{\"1\":{\"257\":1}}],[\"应用程序通过\",{\"1\":{\"251\":1}}],[\"应用场景\",{\"1\":{\"144\":1,\"177\":1}}],[\"应该使用绝对uri或rfc6711\",{\"1\":{\"869\":1}}],[\"应该\",{\"1\":{\"867\":1}}],[\"应该总是使用包含错误值变量的\",{\"1\":{\"687\":1}}],[\"应该总是使用上面的方式来进行类型断言\",{\"1\":{\"662\":1}}],[\"应该命名为\",{\"1\":{\"658\":1}}],[\"应该是\",{\"1\":{\"557\":1}}],[\"应该始终检查是否有错误发生\",{\"1\":{\"550\":1}}],[\"应该代表\",{\"1\":{\"496\":1}}],[\"应该结束的时间\",{\"1\":{\"394\":1}}],[\"应该只有一份实体\",{\"1\":{\"382\":1}}],[\"应该传值还是指针\",{\"0\":{\"329\":1}}],[\"应该还是\",{\"1\":{\"297\":1}}],[\"应该酌情使用合理的配置\",{\"1\":{\"284\":1}}],[\"应该用什么样的顺序呢\",{\"1\":{\"222\":1}}],[\"应该拥有所有的子级权限\",{\"1\":{\"72\":1}}],[\"右边的类型都实现了\",{\"1\":{\"662\":1}}],[\"右边的这些值以相同的顺序赋值给左边的变量\",{\"1\":{\"518\":1}}],[\"右侧空白部分使用\",{\"1\":{\"525\":1}}],[\"右大括号\",{\"1\":{\"507\":1}}],[\"右连接\",{\"0\":{\"143\":1,\"176\":1}}],[\"右外连接就是保留右表没有关联的行\",{\"1\":{\"143\":1,\"176\":1}}],[\"右外连接\",{\"1\":{\"141\":1,\"174\":1}}],[\"左节点\",{\"1\":{\"640\":1}}],[\"左花括号\",{\"1\":{\"553\":1}}],[\"左侧空白部分使用\",{\"1\":{\"525\":1}}],[\"左边的值为\",{\"1\":{\"521\":2}}],[\"左边或者右边的字符\",{\"1\":{\"147\":1,\"180\":1}}],[\"左大括号\",{\"1\":{\"507\":1}}],[\"左匹配\",{\"1\":{\"226\":1}}],[\"左外连接就是保留左表没有关联的行\",{\"1\":{\"142\":1,\"175\":1}}],[\"左连接\",{\"0\":{\"142\":1,\"175\":1}}],[\"全路径或名字\",{\"1\":{\"688\":1}}],[\"全职维护\",{\"1\":{\"485\":1}}],[\"全部都采用手动赋值\",{\"1\":{\"760\":1}}],[\"全部可用\",{\"1\":{\"682\":1}}],[\"全部位设置为\",{\"1\":{\"525\":1}}],[\"全部标记为白色\",{\"1\":{\"429\":1}}],[\"全部标记成黑色\",{\"1\":{\"429\":1}}],[\"全部扫描之后\",{\"1\":{\"429\":1}}],[\"全外连接\",{\"1\":{\"141\":1,\"174\":1}}],[\"全局安装typescript模块\",{\"1\":{\"983\":1}}],[\"全局使用\",{\"1\":{\"828\":1}}],[\"全局变量的g0是m0的g0\",{\"1\":{\"415\":1}}],[\"全局g队列\",{\"1\":{\"411\":1}}],[\"全局符号\",{\"1\":{\"348\":1}}],[\"全局权限点约束的键\",{\"1\":{\"70\":1}}],[\"全局权限点\",{\"1\":{\"70\":2}}],[\"全局配置文件\",{\"1\":{\"18\":1,\"21\":1}}],[\"内容类型\",{\"1\":{\"850\":1}}],[\"内容的格式基本与\",{\"1\":{\"678\":1}}],[\"内容如下\",{\"1\":{\"638\":1}}],[\"内嵌一个\",{\"1\":{\"676\":1}}],[\"内嵌的类型不需要指针\",{\"1\":{\"656\":1}}],[\"内嵌\",{\"1\":{\"656\":2,\"676\":1}}],[\"内嵌将一个已存在类型的字段和方法注入到了另一个类型里\",{\"1\":{\"655\":1}}],[\"内嵌类型的方法和继承\",{\"0\":{\"655\":1}}],[\"内嵌结构体甚至可以来自其他包\",{\"1\":{\"648\":1}}],[\"内嵌结构体\",{\"0\":{\"648\":1}}],[\"内层结构体被简单的插入或者内嵌进外层结构体\",{\"1\":{\"648\":1}}],[\"内层的切片必须单独分配\",{\"1\":{\"589\":1}}],[\"内建函数被用于从\",{\"1\":{\"689\":1}}],[\"内建的一种引用类型\",{\"1\":{\"588\":1}}],[\"内建级联超时控制\",{\"1\":{\"459\":1}}],[\"内写入索引\",{\"1\":{\"532\":1}}],[\"内置的\",{\"1\":{\"703\":1}}],[\"内置于\",{\"1\":{\"614\":1}}],[\"内置函数\",{\"0\":{\"569\":1}}],[\"内置工具以及\",{\"1\":{\"498\":1}}],[\"内置\",{\"1\":{\"490\":1}}],[\"内置代码生成工具\",{\"1\":{\"462\":1}}],[\"内置渲染\",{\"1\":{\"455\":1}}],[\"内存的使用\",{\"1\":{\"694\":1}}],[\"内存用\",{\"1\":{\"605\":1}}],[\"内存缓存的技术在使用计算成本相对昂贵的函数时非常有用\",{\"1\":{\"577\":1}}],[\"内存缓存的优势显而易见\",{\"1\":{\"577\":1}}],[\"内存缓存\",{\"1\":{\"577\":1}}],[\"内存示意图如下\",{\"1\":{\"547\":1}}],[\"内存布局是连续的\",{\"1\":{\"516\":1}}],[\"内存地址会根据机器的不同而有所不同\",{\"1\":{\"516\":1}}],[\"内存地址也就随之改变\",{\"1\":{\"353\":1}}],[\"内存管理\",{\"1\":{\"479\":1}}],[\"内存分配与自动回收\",{\"1\":{\"467\":1}}],[\"内存分配原理\",{\"0\":{\"434\":1}}],[\"内存逃逸的情况如下\",{\"1\":{\"439\":1}}],[\"内存使用情况报告\",{\"1\":{\"691\":1}}],[\"内存使用情况\",{\"1\":{\"438\":1}}],[\"内存\",{\"1\":{\"438\":1}}],[\"内存泄露有下面一些情况\",{\"1\":{\"438\":1}}],[\"内存相关\",{\"0\":{\"433\":1}}],[\"内存被回收\",{\"1\":{\"360\":1}}],[\"内存数据库\",{\"1\":{\"296\":1}}],[\"内核\",{\"1\":{\"320\":1}}],[\"内部数组总是长度相同的\",{\"1\":{\"582\":1}}],[\"内部的控制台运行\",{\"1\":{\"490\":1}}],[\"内部维护两个指针\",{\"1\":{\"383\":1}}],[\"内部实际是什么\",{\"1\":{\"316\":1}}],[\"内部查询首先在其父查询之前执行\",{\"1\":{\"128\":1}}],[\"内\",{\"1\":{\"214\":1,\"678\":1}}],[\"内连接又称等值连接\",{\"1\":{\"140\":1,\"171\":1}}],[\"内连接\",{\"0\":{\"140\":1,\"171\":1}}],[\"内连接提供连接的列\",{\"1\":{\"139\":1,\"173\":1}}],[\"内连接和外连接\",{\"1\":{\"137\":1,\"170\":1}}],[\"要按字面意思理解的值是通过使用这种固定宽度的字体来表示的\",{\"1\":{\"867\":1}}],[\"要从紧凑的序列化形式得到\",{\"1\":{\"856\":1}}],[\"要从header和payload的\",{\"1\":{\"855\":1}}],[\"要这样写\",{\"1\":{\"704\":1}}],[\"要访问这个数据\",{\"1\":{\"684\":1}}],[\"要编码一个\",{\"1\":{\"682\":1}}],[\"要给\",{\"1\":{\"682\":1}}],[\"要得到它们的原始类型\",{\"1\":{\"664\":1}}],[\"要对一组数字或字符串排序\",{\"1\":{\"662\":1}}],[\"要对应多个值怎么办\",{\"1\":{\"607\":1}}],[\"要调用\",{\"1\":{\"638\":1}}],[\"要使用短小的不含有\",{\"1\":{\"627\":1}}],[\"要想把\",{\"1\":{\"686\":1}}],[\"要想让其可设置我们需要使用\",{\"1\":{\"669\":1}}],[\"要想\",{\"1\":{\"669\":1}}],[\"要想找到所有的数字\",{\"1\":{\"602\":1}}],[\"要想理解切片我们必须先理解数组\",{\"1\":{\"578\":1}}],[\"要更节省内存和\",{\"1\":{\"590\":1}}],[\"要计算数列中第\",{\"1\":{\"577\":1}}],[\"要注意的是\",{\"1\":{\"549\":1,\"557\":1}}],[\"要比\",{\"1\":{\"499\":1}}],[\"要慢\",{\"1\":{\"499\":1}}],[\"要是接口定义了多个方法可怎么办\",{\"1\":{\"383\":1}}],[\"要保证struct对象在逻辑上是不可变的\",{\"1\":{\"358\":1}}],[\"要么是私人申请\",{\"1\":{\"853\":1}}],[\"要么看到原子操作已经结束\",{\"1\":{\"418\":1}}],[\"要么看到原子操作已经完成\",{\"1\":{\"418\":1}}],[\"要么读要么写\",{\"1\":{\"331\":1}}],[\"要么同时失败\",{\"1\":{\"236\":1}}],[\"要么同时成功\",{\"1\":{\"236\":1}}],[\"要尽量采用二级索引\",{\"1\":{\"303\":1}}],[\"要尽量避免冗余和重复索引\",{\"1\":{\"219\":1}}],[\"要写的数据就少\",{\"1\":{\"283\":1}}],[\"要求供应商\",{\"1\":{\"868\":1}}],[\"要求值\",{\"1\":{\"868\":1}}],[\"要求名称\",{\"1\":{\"868\":1}}],[\"要求\",{\"1\":{\"867\":1}}],[\"要求接受以下\",{\"1\":{\"602\":1}}],[\"要求接受一个代表月份的数字\",{\"1\":{\"551\":1}}],[\"要求能够遍历一个字符数组\",{\"1\":{\"602\":1}}],[\"要求能够反转字符串\",{\"1\":{\"602\":1}}],[\"要求能够打印类似下面的结果\",{\"1\":{\"554\":1}}],[\"要求其接受两个参数\",{\"1\":{\"602\":1}}],[\"要求将指定文本内的所有非\",{\"1\":{\"572\":1}}],[\"要求不能使用\",{\"1\":{\"554\":1}}],[\"要求循环\",{\"1\":{\"554\":1}}],[\"要求使用\",{\"1\":{\"550\":1}}],[\"要求很低\",{\"1\":{\"234\":1}}],[\"要求存在一个\",{\"1\":{\"136\":1,\"186\":1}}],[\"要选择足够长的前缀以保证较高的选择性\",{\"1\":{\"221\":1}}],[\"要考虑删除未使用的索引\",{\"1\":{\"219\":1}}],[\"要首先拥有低一级的权限\",{\"1\":{\"68\":1}}],[\"支持格式化测试日志\",{\"1\":{\"689\":1}}],[\"支持根据包名在海量数据中查询\",{\"1\":{\"637\":1}}],[\"支持换行\",{\"1\":{\"532\":1}}],[\"支持以下\",{\"1\":{\"532\":1}}],[\"支持以下通配符匹配选项\",{\"1\":{\"133\":1}}],[\"支持在\",{\"1\":{\"502\":1}}],[\"支持的压缩文件格式为\",{\"1\":{\"679\":1}}],[\"支持的传输协议有\",{\"1\":{\"462\":1}}],[\"支持的功能非常完善\",{\"1\":{\"251\":1}}],[\"支持中间件\",{\"1\":{\"455\":1}}],[\"支持多继承\",{\"1\":{\"311\":1}}],[\"支持读已提交\",{\"1\":{\"300\":1}}],[\"支持故障恢复\",{\"1\":{\"294\":1}}],[\"支持事务\",{\"1\":{\"294\":1,\"303\":1}}],[\"支持事务的服务器\",{\"1\":{\"240\":1}}],[\"支持两种复制\",{\"1\":{\"260\":1}}],[\"支持分库分表\",{\"1\":{\"251\":1}}],[\"支持基本的\",{\"1\":{\"251\":1}}],[\"支持\",{\"1\":{\"243\":2,\"462\":2,\"469\":1}}],[\"支持行级锁的数据库\",{\"1\":{\"210\":1}}],[\"支持存储过程的调试\",{\"1\":{\"164\":1,\"200\":1}}],[\"支持三种注释\",{\"1\":{\"85\":1}}],[\"搜索及排序切片和数组\",{\"0\":{\"600\":1}}],[\"搜索并下载一个你喜欢的\",{\"1\":{\"485\":1}}],[\"搜索某种模式\",{\"1\":{\"133\":1}}],[\"搜索和分析魔术发生的地方\",{\"1\":{\"6\":1}}],[\"非阻塞\",{\"1\":{\"703\":1}}],[\"非基本类型\",{\"1\":{\"662\":1}}],[\"非零\",{\"1\":{\"660\":1}}],[\"非法的\",{\"1\":{\"549\":1}}],[\"非解释字符串\",{\"1\":{\"532\":1}}],[\"非运算符用于取得和布尔值相反的结果\",{\"1\":{\"521\":1}}],[\"非运算符\",{\"1\":{\"521\":1}}],[\"非侵入式\",{\"1\":{\"392\":2}}],[\"非动态语言必须通过继承和接口的方式来实现\",{\"1\":{\"391\":1}}],[\"非安全类型断言\",{\"1\":{\"389\":1}}],[\"非聚簇索引\",{\"1\":{\"303\":1}}],[\"非聚集索引指定表的逻辑顺序\",{\"1\":{\"212\":1}}],[\"非聚集索引\",{\"1\":{\"212\":1}}],[\"非主属性不传递依赖于键码\",{\"1\":{\"292\":1}}],[\"非叶子节点\",{\"1\":{\"216\":1}}],[\"非叶子节点不存储\",{\"1\":{\"215\":1}}],[\"非常像一个无穷的数\",{\"1\":{\"689\":1}}],[\"非常有用\",{\"1\":{\"601\":1}}],[\"非常类似\",{\"1\":{\"482\":1}}],[\"非常活跃\",{\"1\":{\"469\":1}}],[\"非常相似\",{\"1\":{\"331\":1}}],[\"非常小的表\",{\"1\":{\"211\":1}}],[\"非常适合机密机构或者其他等级观念强烈的行业\",{\"1\":{\"62\":1}}],[\"非\",{\"1\":{\"132\":1,\"521\":1,\"687\":1}}],[\"否则授权服务器将使用适当的错误和状态参数将客户端返回到授权请求中指定的重定向uri\",{\"1\":{\"878\":1}}],[\"否则可能会导致程序崩溃\",{\"1\":{\"687\":1}}],[\"否则最后的输出不会被写入\",{\"1\":{\"682\":1}}],[\"否则应当避免使用或小心使用\",{\"1\":{\"668\":1}}],[\"否则编译器会报错\",{\"1\":{\"662\":1}}],[\"否则编译报错\",{\"1\":{\"321\":1}}],[\"否则ok为false\",{\"1\":{\"608\":1}}],[\"否则会引发编译器错误\",{\"1\":{\"652\":1}}],[\"否则会导致编译失败\",{\"1\":{\"559\":1}}],[\"否则会一直占用内存空间\",{\"1\":{\"438\":1}}],[\"否则返回\",{\"1\":{\"521\":2}}],[\"否则的话应该这样使用\",{\"1\":{\"518\":1}}],[\"否则的话就是jws\",{\"1\":{\"39\":1}}],[\"否则将引发运行时错误\",{\"1\":{\"511\":1}}],[\"否则你在使用\",{\"1\":{\"507\":1}}],[\"否则使用\",{\"1\":{\"363\":1}}],[\"否则panic\",{\"1\":{\"358\":1}}],[\"否则就会包含相应的错误信息\",{\"1\":{\"550\":1}}],[\"否则就会下标越界\",{\"1\":{\"353\":1}}],[\"否则就忽略该代码块继续执行后续的代码\",{\"1\":{\"549\":1}}],[\"否则就遵循骆驼命名法\",{\"1\":{\"507\":1}}],[\"否则就是完全函数依赖\",{\"1\":{\"287\":1}}],[\"否则defer可能得不到执行\",{\"1\":{\"325\":1}}],[\"否则在事务过程\",{\"1\":{\"237\":1}}],[\"否则\",{\"1\":{\"214\":1,\"653\":1,\"662\":1,\"705\":1,\"869\":1,\"873\":1}}],[\"否定\",{\"1\":{\"132\":1}}],[\"示例来测试它\",{\"1\":{\"662\":1}}],[\"示例函数和调用\",{\"1\":{\"567\":1}}],[\"示例代码为\",{\"1\":{\"565\":1}}],[\"示例代码中的main函数是main\",{\"1\":{\"415\":1}}],[\"示例中在发生读取错误时\",{\"1\":{\"559\":1}}],[\"示例见第\",{\"1\":{\"532\":1}}],[\"示例\",{\"1\":{\"131\":2,\"132\":3,\"133\":2,\"483\":2,\"501\":3,\"505\":1,\"506\":1,\"508\":3,\"509\":1,\"510\":1,\"511\":1,\"515\":4,\"519\":2,\"521\":2,\"523\":2,\"524\":1,\"528\":1,\"530\":1,\"531\":1,\"534\":1,\"536\":1,\"538\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":1,\"546\":1,\"547\":4,\"549\":2,\"550\":5,\"551\":2,\"553\":2,\"557\":1,\"558\":3,\"559\":3,\"561\":1,\"563\":1,\"564\":1,\"565\":2,\"566\":1,\"567\":1,\"568\":4,\"570\":2,\"580\":2,\"581\":2,\"582\":1,\"583\":1,\"585\":1,\"587\":1,\"591\":2,\"592\":1,\"593\":1,\"602\":1,\"605\":2,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"614\":1,\"624\":1,\"626\":1,\"627\":2,\"631\":3,\"638\":1,\"640\":2,\"643\":1,\"644\":2,\"645\":1,\"647\":1,\"648\":1,\"651\":3,\"653\":2,\"654\":2,\"656\":1,\"660\":1,\"662\":7,\"663\":2,\"666\":1,\"668\":1,\"669\":1,\"670\":3,\"671\":1,\"673\":1,\"676\":1,\"677\":3,\"678\":4,\"679\":1,\"680\":3,\"681\":1,\"682\":4,\"683\":1,\"686\":4,\"688\":1,\"689\":9,\"697\":1,\"700\":1,\"701\":1,\"708\":1,\"709\":4}}],[\"作了说明\",{\"1\":{\"653\":1}}],[\"作出合适的问候\",{\"1\":{\"627\":1}}],[\"作为依赖方的成对主题标识符计算的输入\",{\"1\":{\"868\":1}}],[\"作为有权使用某一身份或其他资源的证据而提出的数据\",{\"1\":{\"868\":1}}],[\"作为背景\",{\"1\":{\"866\":1}}],[\"作为它的算法\",{\"1\":{\"709\":1}}],[\"作为它的吉祥物\",{\"1\":{\"469\":1}}],[\"作为函数的参数传递\",{\"1\":{\"699\":1}}],[\"作为函数最后一个参数来实现\",{\"1\":{\"675\":1}}],[\"作为第二个例子考虑用\",{\"1\":{\"688\":1}}],[\"作为文件内容\",{\"1\":{\"680\":1}}],[\"作为文件名\",{\"1\":{\"680\":1}}],[\"作为参数传递给函数\",{\"1\":{\"671\":1}}],[\"作为参数调用\",{\"1\":{\"659\":1}}],[\"作为方法的接收者类型\",{\"1\":{\"657\":1}}],[\"作为结构体字面量初始化\",{\"1\":{\"640\":1}}],[\"作为包的别名时\",{\"1\":{\"627\":1}}],[\"作为返回结果\",{\"1\":{\"626\":1}}],[\"作为\",{\"1\":{\"607\":2,\"651\":1}}],[\"作为值的\",{\"1\":{\"605\":1}}],[\"作为值使用\",{\"1\":{\"546\":1}}],[\"作为相关数组的长度\",{\"1\":{\"592\":1}}],[\"作为切片初始长度而\",{\"1\":{\"592\":1}}],[\"作为实例学习\",{\"1\":{\"576\":1}}],[\"作为提醒\",{\"1\":{\"561\":1}}],[\"作为计算类型\",{\"1\":{\"524\":1}}],[\"作为中缀\",{\"1\":{\"520\":1}}],[\"作为后缀\",{\"1\":{\"520\":1}}],[\"作为后端\",{\"1\":{\"481\":1}}],[\"作为默认值\",{\"1\":{\"509\":1}}],[\"作为开头\",{\"1\":{\"508\":1}}],[\"作为强类型语言\",{\"1\":{\"475\":1}}],[\"作为大量使用\",{\"1\":{\"473\":1}}],[\"作为话题标签\",{\"1\":{\"469\":1}}],[\"作为前端\",{\"1\":{\"469\":1}}],[\"作为线程私有资源\",{\"1\":{\"440\":1}}],[\"作为循环触发器\",{\"1\":{\"438\":1}}],[\"作为一种基本数据结构\",{\"1\":{\"533\":1}}],[\"作为一种静态语言\",{\"1\":{\"378\":1}}],[\"作为一个例子\",{\"1\":{\"638\":1,\"657\":1}}],[\"作为一个函数类型\",{\"1\":{\"561\":1}}],[\"作为一个开源项目\",{\"1\":{\"469\":1}}],[\"作为一个有着\",{\"1\":{\"467\":1}}],[\"作为一个令牌\",{\"1\":{\"37\":1}}],[\"作为一门\",{\"1\":{\"693\":1}}],[\"作为一门具有明确编码规范的语言\",{\"1\":{\"474\":1}}],[\"作为一门系统编程语言\",{\"1\":{\"467\":1}}],[\"作为一门语言致力于使事情简单化\",{\"1\":{\"320\":1}}],[\"作比较\",{\"1\":{\"384\":1}}],[\"作用于变量上的方法实际上是不区分变量到底是指针还是值的\",{\"1\":{\"662\":1}}],[\"作用相同\",{\"1\":{\"625\":1}}],[\"作用域内的变量\",{\"1\":{\"573\":1}}],[\"作用类似于waitgroup\",{\"1\":{\"424\":1}}],[\"作用\",{\"1\":{\"325\":1,\"449\":1}}],[\"作用变量类型不同\",{\"1\":{\"322\":1}}],[\"作用是确定字符串是否匹配模式\",{\"1\":{\"133\":1}}],[\"作用是选取介于某个范围内的值\",{\"1\":{\"131\":1}}],[\"作用是在指定的几个特定值中任选一个值\",{\"1\":{\"131\":1}}],[\"大致翻译未完成\",{\"0\":{\"847\":1}}],[\"大致如下\",{\"1\":{\"456\":1}}],[\"大的整型数字是通过\",{\"1\":{\"626\":1}}],[\"大的顺序返回这两个数\",{\"1\":{\"565\":1}}],[\"大数的实现和计算\",{\"1\":{\"614\":1}}],[\"大多数服务器到服务器的通信\",{\"1\":{\"869\":1}}],[\"大多数申请要么是注册申请\",{\"1\":{\"853\":1}}],[\"大多数\",{\"1\":{\"850\":1,\"853\":1}}],[\"大多数情况下\",{\"1\":{\"848\":1}}],[\"大多数情况下等同于\",{\"1\":{\"677\":1}}],[\"大多数情况下它们修改\",{\"1\":{\"626\":1}}],[\"大多数可以通过\",{\"1\":{\"637\":1}}],[\"大多数是围绕系统功能的封装\",{\"1\":{\"614\":1}}],[\"大多数开发工具也都内置了这一功能\",{\"1\":{\"496\":1}}],[\"大括号也不可被省略\",{\"1\":{\"549\":1}}],[\"大写字母可以使用任何\",{\"1\":{\"506\":1}}],[\"大概多写一倍的代码\",{\"1\":{\"499\":1}}],[\"大概只比它快\",{\"1\":{\"499\":1}}],[\"大叔开发\",{\"1\":{\"491\":1}}],[\"大家可以试着纠正过来\",{\"1\":{\"562\":1}}],[\"大家可以自己探究下\",{\"1\":{\"322\":1}}],[\"大家一般使用\",{\"1\":{\"469\":1}}],[\"大约在\",{\"1\":{\"469\":1}}],[\"大部分时间只用到了一个处理器\",{\"1\":{\"709\":1}}],[\"大部分代码并不使用这样的约束\",{\"1\":{\"674\":1}}],[\"大部分\",{\"1\":{\"614\":1,\"688\":1}}],[\"大部分的目录都包含了名为\",{\"1\":{\"481\":1}}],[\"大部分均已提供默认扩展\",{\"1\":{\"462\":1}}],[\"大部分情况下简单的全表扫描更高效\",{\"1\":{\"211\":1}}],[\"大量微服务治理和并发工具包\",{\"1\":{\"459\":1}}],[\"大对象\",{\"1\":{\"443\":1}}],[\"大对象则直接由\",{\"1\":{\"443\":1}}],[\"大厂或者中高级开发会问\",{\"1\":{\"412\":1}}],[\"大幅度的减轻了对全局队列的直接依赖\",{\"1\":{\"410\":1}}],[\"大小等\",{\"1\":{\"383\":1}}],[\"大小不改变\",{\"1\":{\"353\":1}}],[\"大于等于\",{\"1\":{\"130\":1}}],[\"大于\",{\"1\":{\"130\":1,\"696\":1}}],[\"大体上分为三类\",{\"1\":{\"70\":1}}],[\"运维经验\",{\"1\":{\"284\":1}}],[\"运维成本高\",{\"1\":{\"252\":1}}],[\"运维成本低\",{\"1\":{\"252\":1}}],[\"运算符与优先级\",{\"0\":{\"529\":1}}],[\"运算符右边的表达式将不会被执行\",{\"1\":{\"521\":1}}],[\"运算符来进行比较并获得一个布尔型的值\",{\"1\":{\"521\":1}}],[\"运算符是不允许的\",{\"1\":{\"504\":1}}],[\"运算符将两个或更多查询的结果组合起来\",{\"1\":{\"144\":1,\"177\":1}}],[\"运算符\",{\"1\":{\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"504\":1,\"529\":1}}],[\"运行这个程序\",{\"1\":{\"692\":1}}],[\"运行程序\",{\"1\":{\"692\":1}}],[\"运行基准测试的例子以及练习\",{\"1\":{\"689\":1}}],[\"运行环境\",{\"1\":{\"493\":1}}],[\"运行时可以聪明的意识到哪些协程被阻塞了\",{\"1\":{\"694\":1}}],[\"运行时很好的完成了这个工作\",{\"1\":{\"694\":1}}],[\"运行时负责中止程序并给出调试信息\",{\"1\":{\"689\":1}}],[\"运行时会检查并\",{\"1\":{\"702\":1}}],[\"运行时会检测类以及它的超类中是否有此方法的定义\",{\"1\":{\"659\":1}}],[\"运行时会抛出\",{\"1\":{\"700\":1}}],[\"运行时会触发运行时\",{\"1\":{\"689\":1}}],[\"运行时动态转换的语言\",{\"1\":{\"671\":1}}],[\"运行时中有一个独立的进程\",{\"1\":{\"661\":1}}],[\"运行时错误\",{\"1\":{\"643\":1}}],[\"运行时\",{\"0\":{\"487\":1},\"1\":{\"700\":1}}],[\"运行时互斥\",{\"1\":{\"68\":1}}],[\"运行在\",{\"1\":{\"469\":1}}],[\"运行它的代码\",{\"1\":{\"467\":1}}],[\"运行\",{\"0\":{\"750\":1},\"1\":{\"450\":1,\"485\":1,\"631\":1,\"689\":1}}],[\"运行情况等\",{\"1\":{\"438\":1}}],[\"运行安全脚本\",{\"1\":{\"52\":1}}],[\">|\",{\"1\":{\"869\":3}}],[\">相似\",{\"1\":{\"770\":1}}],[\">类型\",{\"1\":{\"770\":1}}],[\"><br\",{\"1\":{\"638\":1}}],[\">c\",{\"1\":{\"287\":2}}],[\">b\",{\"1\":{\"287\":4}}],[\">=\",{\"0\":{\"277\":1},\"1\":{\"130\":1,\"136\":1,\"186\":1,\"277\":1,\"427\":1,\"483\":1,\"523\":1,\"526\":1,\"529\":1,\"532\":1,\"555\":1,\"559\":1,\"562\":1}}],[\">\",{\"0\":{\"277\":1},\"1\":{\"128\":1,\"130\":1,\"217\":1,\"222\":2,\"226\":3,\"227\":3,\"267\":1,\"271\":1,\"277\":1,\"287\":1,\"288\":1,\"291\":6,\"292\":2,\"303\":1,\"371\":2,\"421\":1,\"496\":4,\"521\":14,\"523\":10,\"525\":12,\"526\":2,\"527\":6,\"529\":1,\"532\":1,\"547\":1,\"549\":6,\"551\":4,\"572\":1,\"593\":1,\"599\":3,\"638\":10,\"640\":1,\"660\":1,\"662\":2,\"670\":1,\"676\":2,\"677\":1,\"681\":1,\"682\":7,\"689\":2,\"696\":2,\"703\":3}}],[\">>\",{\"1\":{\"6\":11,\"513\":1,\"525\":2,\"529\":1}}],[\"子目录和包之间有着密切的联系\",{\"1\":{\"627\":1}}],[\"子字符串快速查询\",{\"1\":{\"614\":1}}],[\"子类只需要把基类作为成员放在子类的定义中\",{\"1\":{\"311\":1}}],[\"子查询等\",{\"1\":{\"264\":1}}],[\"子查询的子查询\",{\"1\":{\"128\":1}}],[\"子查询必须被圆括号\",{\"1\":{\"128\":1}}],[\"子查询通常会在另一个\",{\"1\":{\"128\":1}}],[\"子查询可以嵌套在\",{\"1\":{\"128\":1}}],[\"子查询也称为内部查询或内部选择\",{\"1\":{\"128\":1}}],[\"子查询是嵌套在较大查询中的\",{\"1\":{\"128\":1}}],[\"子句进行条件筛选\",{\"1\":{\"305\":1}}],[\"子句组装数据\",{\"1\":{\"305\":1}}],[\"子句引用时\",{\"1\":{\"279\":1}}],[\"子句的之右\",{\"1\":{\"271\":1}}],[\"子句的基本格式如下\",{\"1\":{\"129\":1}}],[\"子句将记录分组到汇总行中\",{\"1\":{\"135\":1,\"185\":1}}],[\"子句用于过滤记录\",{\"1\":{\"129\":1}}],[\"子句条件\",{\"1\":{\"129\":1}}],[\"子句中避免使用\",{\"0\":{\"272\":1}}],[\"子句中包含多个表的情况下\",{\"1\":{\"270\":1}}],[\"子句中写在最后的表将被最先处理\",{\"1\":{\"270\":1}}],[\"子句中的连接顺序\",{\"0\":{\"271\":1}}],[\"子句中的表名\",{\"1\":{\"270\":1}}],[\"子句中的排序\",{\"1\":{\"222\":1}}],[\"子句中使用\",{\"1\":{\"131\":2,\"133\":1}}],[\"子句中使用的操作符\",{\"1\":{\"129\":1}}],[\"子句中指定的搜索条件进行过滤\",{\"1\":{\"129\":1}}],[\"子句中添加\",{\"1\":{\"128\":1}}],[\"子句\",{\"0\":{\"129\":1},\"1\":{\"84\":1,\"129\":3,\"136\":1,\"144\":1,\"177\":1,\"186\":1,\"271\":1}}],[\"过去\",{\"1\":{\"846\":1}}],[\"过多久超时\",{\"1\":{\"394\":1}}],[\"过早关闭\",{\"1\":{\"335\":1}}],[\"过滤条件的列应该考虑添加索引\",{\"1\":{\"219\":1}}],[\"过滤数据示例\",{\"1\":{\"136\":1,\"186\":1}}],[\"过滤数据\",{\"0\":{\"128\":1}}],[\"过期时间\",{\"1\":{\"35\":1}}],[\"~20\",{\"1\":{\"499\":1}}],[\"~\",{\"1\":{\"127\":1}}],[\"返回no\",{\"1\":{\"892\":1}}],[\"返回never的函数必须存在无法达到的终点\",{\"1\":{\"765\":2}}],[\"返回有关由相应授权授予表示的最终用户的授权信息\",{\"1\":{\"868\":1}}],[\"返回了包含素数的通道\",{\"1\":{\"709\":1}}],[\"返回参数的数量\",{\"1\":{\"682\":1}}],[\"返回读取到的字符串\",{\"1\":{\"677\":1}}],[\"返回这个\",{\"1\":{\"668\":1}}],[\"返回被检查对象的类型和值\",{\"1\":{\"668\":1}}],[\"返回数组格式化后的字符串\",{\"1\":{\"662\":1}}],[\"返回数字\",{\"1\":{\"545\":1}}],[\"返回结果将精确到\",{\"1\":{\"626\":1}}],[\"返回满足函数\",{\"1\":{\"593\":1}}],[\"返回该数组的所有数字和\",{\"1\":{\"591\":1}}],[\"返回的id令牌必须包含auth\",{\"1\":{\"873\":1}}],[\"返回的\",{\"1\":{\"682\":1}}],[\"返回的读取器对象提供一个方法\",{\"1\":{\"677\":1}}],[\"返回的是一个指向\",{\"1\":{\"643\":1}}],[\"返回的长地址便是转换前的原始地址\",{\"1\":{\"638\":1}}],[\"返回的切片可能已经指向一个不同的相关数组了\",{\"1\":{\"593\":1}}],[\"返回的函数存到变量中\",{\"1\":{\"574\":1}}],[\"返回的形式\",{\"1\":{\"509\":1}}],[\"返回时触发\",{\"1\":{\"692\":1}}],[\"返回时\",{\"1\":{\"573\":1}}],[\"返回两个\",{\"1\":{\"564\":1,\"591\":1}}],[\"返回\",{\"1\":{\"561\":1,\"566\":1,\"572\":1,\"638\":2,\"657\":1,\"668\":4,\"669\":2}}],[\"返回值类型和返回值的顺序与调用函数所需求的实参是一致的\",{\"1\":{\"561\":1}}],[\"返回值以及它们的类型被统称为函数签名\",{\"1\":{\"561\":1}}],[\"返回零值\",{\"1\":{\"550\":1}}],[\"返回字符串\",{\"1\":{\"536\":2}}],[\"返回介于\",{\"1\":{\"528\":2}}],[\"返回某个值以及\",{\"1\":{\"550\":1}}],[\"返回某个对象的函数或方法的名称一般都是使用名词\",{\"1\":{\"512\":1}}],[\"返回某列值之和\",{\"1\":{\"150\":1,\"183\":1}}],[\"返回某列的最小值\",{\"1\":{\"150\":1,\"183\":1}}],[\"返回某列的最大值\",{\"1\":{\"150\":1,\"183\":1}}],[\"返回某列的行数\",{\"1\":{\"150\":1,\"183\":1}}],[\"返回某列的平均值\",{\"1\":{\"150\":1,\"183\":1}}],[\"返回类型\",{\"1\":{\"569\":1}}],[\"返回类型之间需要使用逗号分割\",{\"1\":{\"509\":1}}],[\"返回类型不一样\",{\"1\":{\"322\":1}}],[\"返回新的\",{\"1\":{\"354\":1}}],[\"返回原来的\",{\"1\":{\"354\":1}}],[\"返回对应的星期几\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个只读的通道\",{\"1\":{\"708\":1}}],[\"返回一个整数和一个错误\",{\"1\":{\"689\":1}}],[\"返回一个整型值\",{\"1\":{\"662\":1}}],[\"返回一个错误\",{\"1\":{\"686\":1}}],[\"返回一个\",{\"1\":{\"608\":1}}],[\"返回一个类型为\",{\"1\":{\"588\":1}}],[\"返回一个指向类型为\",{\"1\":{\"588\":1}}],[\"返回一个日期时间的时间部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个日期的年份部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个日期的月份部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个日期的天数部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个时间的秒部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个时间的分钟部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个时间的小时部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回一个格式化的日期或时间串\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回日期时间的日期部分\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回当前时间\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回当前日期和时间\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回当前日期\",{\"1\":{\"148\":1,\"181\":1}}],[\"返回第\",{\"1\":{\"127\":1}}],[\"返回前\",{\"1\":{\"127\":1}}],[\"降序\",{\"1\":{\"122\":1,\"134\":1}}],[\"降低高级访问控制的成本\",{\"1\":{\"74\":1}}],[\"从令牌端点返回的所有令牌\",{\"1\":{\"869\":1}}],[\"从授权端点返回的所有令牌\",{\"1\":{\"869\":1}}],[\"从本质上讲\",{\"1\":{\"858\":1}}],[\"从非之前\",{\"1\":{\"852\":1}}],[\"从0开始为元素编号\",{\"1\":{\"760\":1}}],[\"从通道\",{\"1\":{\"700\":1}}],[\"从通道流出\",{\"1\":{\"700\":1}}],[\"从函数返回以及通过通道发送它们自身\",{\"1\":{\"699\":1}}],[\"从第\",{\"1\":{\"692\":1}}],[\"从第三个数开始每个数均为前两个数之和\",{\"1\":{\"570\":1}}],[\"从命令行读取输入时\",{\"1\":{\"689\":1}}],[\"从读取的当前行中截取第\",{\"1\":{\"682\":1}}],[\"从索引\",{\"1\":{\"681\":1}}],[\"从键盘读取输入\",{\"1\":{\"677\":1}}],[\"从键盘和标准输入\",{\"1\":{\"677\":1}}],[\"从控制台读取输入\",{\"1\":{\"677\":1}}],[\"从每个\",{\"1\":{\"676\":1}}],[\"从某个类型的角度来看\",{\"1\":{\"662\":1}}],[\"从练习\",{\"1\":{\"661\":1}}],[\"从上面的例子也可以看到\",{\"1\":{\"660\":1}}],[\"从上至下逐一测试\",{\"1\":{\"551\":1}}],[\"从左到右一次显示出目录中的包\",{\"1\":{\"628\":1}}],[\"从字符串生成字节切片\",{\"0\":{\"595\":1}}],[\"从字符串中读取下一个\",{\"1\":{\"544\":1}}],[\"从字符串中读取内容\",{\"0\":{\"544\":1}}],[\"从技术上说它们其实变成了切片\",{\"1\":{\"581\":1}}],[\"从这看到\",{\"1\":{\"578\":1}}],[\"从其它类型读取内容的函数还有\",{\"1\":{\"544\":1}}],[\"从基础到高级\",{\"1\":{\"463\":1}}],[\"从源文件到可执行目标文件的转化过程\",{\"1\":{\"447\":1}}],[\"从源码里可以看到\",{\"1\":{\"384\":1}}],[\"从源码层面看一下\",{\"1\":{\"383\":1}}],[\"从白色标记灰色\",{\"1\":{\"429\":1}}],[\"从属于进程\",{\"1\":{\"408\":1}}],[\"从管道读取数据也会阻塞\",{\"1\":{\"405\":1}}],[\"从管道读数据会阻塞\",{\"1\":{\"405\":1}}],[\"从缓冲区中首部读出数据\",{\"1\":{\"403\":1,\"405\":1}}],[\"从一个channel读数据简单过程如下\",{\"1\":{\"403\":1}}],[\"从一个已经关闭的\",{\"1\":{\"400\":1}}],[\"从一个\",{\"1\":{\"400\":1}}],[\"从channel接收一个数据\",{\"1\":{\"396\":1}}],[\"从汇编角度来看\",{\"1\":{\"383\":1}}],[\"从切片中取一个相同大小的数组有成本吗\",{\"1\":{\"356\":1}}],[\"从数学的角度来看\",{\"1\":{\"601\":1}}],[\"从数组中截取切片\",{\"1\":{\"356\":1}}],[\"从数组中取一个相同大小的slice有成本吗\",{\"0\":{\"356\":1}}],[\"从数据库的锁粒度来看\",{\"1\":{\"231\":1}}],[\"从被导入的最深层包开始进行初始化\",{\"1\":{\"350\":2}}],[\"从go语言的创造者就可见端倪\",{\"1\":{\"320\":1}}],[\"从实际的例子来看\",{\"1\":{\"315\":2}}],[\"从服务器可以配置\",{\"1\":{\"261\":1}}],[\"从单机到多机\",{\"1\":{\"248\":1}}],[\"从选择性高的角度来看\",{\"1\":{\"222\":1}}],[\"从物理存储上划分\",{\"1\":{\"212\":1}}],[\"从逻辑类型上划分\",{\"1\":{\"212\":1}}],[\"从\",{\"0\":{\"636\":1},\"1\":{\"122\":1,\"318\":1,\"409\":1,\"469\":1,\"481\":3,\"483\":1,\"495\":1,\"501\":3,\"544\":1,\"580\":1,\"585\":1,\"608\":1,\"627\":1,\"629\":1,\"657\":1,\"686\":1}}],[\"从而限制为防止攻击而需要存储nonce的时间\",{\"1\":{\"887\":1}}],[\"从而提供身份验证\",{\"1\":{\"869\":1}}],[\"从而提高索引效率\",{\"1\":{\"221\":1}}],[\"从而防止碰撞\",{\"1\":{\"853\":1}}],[\"从而引发隐私问题\",{\"1\":{\"848\":1}}],[\"从而完成singleton的实例化\",{\"1\":{\"803\":1}}],[\"从而向闭合函数内部屏蔽了外层循环中的\",{\"1\":{\"705\":1}}],[\"从而避开所有由共享内存导致的陷阱\",{\"1\":{\"699\":1}}],[\"从而动态的增加\",{\"1\":{\"694\":1}}],[\"从而能够更快地开始开发工作\",{\"1\":{\"490\":1}}],[\"从而能够将过去开发的软件进行快速迁移\",{\"1\":{\"473\":1}}],[\"从而替代你使用文本编辑器写代码和命令行编译与链接程序的方式\",{\"1\":{\"490\":1}}],[\"从而在\",{\"1\":{\"481\":1}}],[\"从而更好地利用大量的分布式和多核的计算机\",{\"1\":{\"473\":1}}],[\"从而更容易做到高性能和可扩展\",{\"1\":{\"268\":1}}],[\"从而使类型变成私有的\",{\"1\":{\"642\":1}}],[\"从而使编程变得更加有乐趣\",{\"1\":{\"473\":1}}],[\"从而使其他线程长时间处于饥饿状态\",{\"1\":{\"412\":1}}],[\"从而加深对概念的理解\",{\"1\":{\"467\":1}}],[\"从而加快检索速度\",{\"1\":{\"210\":1}}],[\"从而比传统的面向对象语言更容易阅读和理解\",{\"1\":{\"467\":1}}],[\"从而比较容易实现扩展\",{\"1\":{\"29\":1}}],[\"从而被\",{\"1\":{\"438\":1}}],[\"从而得到它的真实类型\",{\"1\":{\"389\":1}}],[\"从而无法执行增量搬迁的情况\",{\"1\":{\"373\":1}}],[\"从而实现多重继承\",{\"1\":{\"338\":1}}],[\"从而实现继承\",{\"1\":{\"338\":1}}],[\"从而形成后进先出的效果\",{\"1\":{\"332\":1}}],[\"从而减少内存分配的次数和数据拷贝的代价\",{\"1\":{\"354\":1}}],[\"从而减少冗余记录的查询\",{\"1\":{\"268\":1}}],[\"从而减少锁的竞争\",{\"1\":{\"210\":1}}],[\"从而缓解单点的压力\",{\"1\":{\"247\":1}}],[\"从而称为\",{\"1\":{\"83\":1}}],[\"从而打消了您最初实施rbac的全部原因\",{\"1\":{\"75\":1}}],[\"从而降低数据泄露或数据丢失的风险\",{\"1\":{\"74\":1}}],[\"从而简化用户的权限管理\",{\"1\":{\"64\":1}}],[\"从而发现数据中的趋势和模式\",{\"1\":{\"6\":1}}],[\"插入了换行符\",{\"1\":{\"849\":1}}],[\"插入屏障\",{\"1\":{\"429\":1}}],[\"插入过程\",{\"0\":{\"375\":1}}],[\"插入异常\",{\"1\":{\"288\":1}}],[\"插入的新数据\",{\"1\":{\"166\":1,\"202\":1}}],[\"插入操作\",{\"1\":{\"151\":2,\"187\":2}}],[\"插入查询出来的数据\",{\"0\":{\"117\":1}}],[\"插入行的一部分\",{\"0\":{\"116\":1}}],[\"插入完整的行\",{\"0\":{\"115\":1}}],[\"插入数据\",{\"0\":{\"114\":1}}],[\"确定同意\",{\"1\":{\"876\":1}}],[\"确定后再merge\",{\"1\":{\"829\":1}}],[\"确定\",{\"1\":{\"782\":1}}],[\"确定性的\",{\"1\":{\"694\":1}}],[\"确定学生和课程之后\",{\"1\":{\"288\":1}}],[\"确实有优化效果\",{\"1\":{\"264\":1}}],[\"确实之前用的还比较多一些\",{\"1\":{\"251\":1}}],[\"确保redirect\",{\"1\":{\"882\":1}}],[\"确保授权代码已颁发给已验证的客户端\",{\"1\":{\"882\":1}}],[\"确保你的代码足够安全\",{\"1\":{\"663\":1}}],[\"确保\",{\"1\":{\"629\":1,\"631\":1}}],[\"确保它的可执行性\",{\"1\":{\"627\":1}}],[\"确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性\",{\"1\":{\"230\":1}}],[\"确保某列\",{\"1\":{\"112\":1}}],[\"确认安装并获取版本号\",{\"1\":{\"52\":1}}],[\"确认\",{\"1\":{\"42\":1}}],[\"确认是否覆盖\",{\"1\":{\"42\":1}}],[\"值设置为\",{\"1\":{\"981\":1}}],[\"值可能表明同时使用了密码和otp身份验证方法\",{\"1\":{\"869\":1}}],[\"值被加了引号\",{\"1\":{\"867\":1}}],[\"值转换为\",{\"1\":{\"689\":1}}],[\"值加倍和将字符串值与其自身连接\",{\"1\":{\"676\":1}}],[\"值提供了反射接口\",{\"1\":{\"668\":1}}],[\"值方法可以通过值调用\",{\"1\":{\"662\":1}}],[\"值必须以字段在结构体定义时的顺序给出\",{\"1\":{\"640\":1}}],[\"值不唯一那这么做肯定会出问题\",{\"1\":{\"612\":1}}],[\"值的交换\",{\"1\":{\"699\":1}}],[\"值的一个拷贝而已\",{\"1\":{\"610\":1}}],[\"值的数组\",{\"1\":{\"588\":1}}],[\"值是一个可选元素\",{\"1\":{\"609\":1}}],[\"值为\",{\"1\":{\"588\":1}}],[\"值得注意的是\",{\"1\":{\"476\":1,\"509\":1,\"866\":1}}],[\"值类型\",{\"1\":{\"580\":1}}],[\"值类型的变量的值存储在栈中\",{\"1\":{\"516\":1}}],[\"值类型和引用类型\",{\"0\":{\"516\":1}}],[\"值类型调用者\",{\"1\":{\"380\":1}}],[\"值类型既可以调用值接收者的方法\",{\"1\":{\"380\":1}}],[\"值接收者和指针接收者\",{\"0\":{\"381\":1}}],[\"值接收者和指针接收者的区别\",{\"0\":{\"379\":1}}],[\"值接收者\",{\"1\":{\"380\":1}}],[\"值拷贝\",{\"0\":{\"345\":1},\"1\":{\"345\":2,\"346\":1}}],[\"值\",{\"0\":{\"669\":1},\"1\":{\"112\":1,\"564\":1,\"608\":2,\"609\":2,\"640\":2,\"653\":1,\"660\":1,\"668\":1,\"689\":1,\"700\":1,\"850\":1,\"873\":1}}],[\"值将作为角色属性返回\",{\"1\":{\"70\":1}}],[\"约束来指定主键为自增序列\",{\"1\":{\"299\":1}}],[\"约束类型\",{\"1\":{\"112\":1}}],[\"约束可以在创建表时规定\",{\"1\":{\"112\":1}}],[\"约束用于规定表中的数据规则\",{\"1\":{\"112\":1}}],[\"约束\",{\"0\":{\"112\":1,\"228\":1},\"1\":{\"228\":1}}],[\"普通程序和测试程序\",{\"1\":{\"689\":1}}],[\"普通写法\",{\"1\":{\"577\":1}}],[\"普通的带有名字的函数\",{\"1\":{\"561\":1}}],[\"普通开发接触的较少\",{\"1\":{\"284\":1}}],[\"普通创建\",{\"1\":{\"98\":1}}],[\"普通索引\",{\"1\":{\"72\":1,\"212\":1}}],[\"选项查看到只有\",{\"1\":{\"696\":1}}],[\"选项\",{\"1\":{\"640\":1,\"689\":1}}],[\"选项使用国内源进行安装\",{\"1\":{\"51\":1}}],[\"选择器符号\",{\"1\":{\"651\":1}}],[\"选择器符\",{\"1\":{\"640\":1}}],[\"选择器\",{\"1\":{\"640\":1}}],[\"选择\",{\"1\":{\"631\":1}}],[\"选择记录条数最少的表放在最后\",{\"1\":{\"270\":1}}],[\"选择最有效率的表名顺序\",{\"0\":{\"270\":1}}],[\"选择性越高\",{\"1\":{\"221\":1}}],[\"选择数据库\",{\"0\":{\"95\":1}}],[\"预存程序\",{\"1\":{\"90\":1}}],[\"多屏显示\",{\"1\":{\"818\":1}}],[\"多线程下\",{\"1\":{\"803\":1}}],[\"多处理器编程\",{\"1\":{\"694\":1}}],[\"多数情况下\",{\"1\":{\"662\":1}}],[\"多数的代理都不会自动处理合并工作\",{\"1\":{\"256\":1}}],[\"多维切片下的\",{\"1\":{\"591\":1}}],[\"多维切片\",{\"0\":{\"589\":1}}],[\"多维数组\",{\"0\":{\"582\":1}}],[\"多值返回是\",{\"1\":{\"562\":1}}],[\"多变量可以在同一行进行赋值\",{\"1\":{\"518\":1}}],[\"多重继承可以通过内嵌多个类型实现\",{\"1\":{\"676\":1}}],[\"多重继承会给编译器引入额外的复杂度\",{\"1\":{\"657\":1}}],[\"多重继承指的是类型获得多个父类型行为的能力\",{\"1\":{\"657\":1}}],[\"多重继承\",{\"0\":{\"657\":1}}],[\"多重继承以及使用\",{\"1\":{\"502\":1}}],[\"多重继承等概念\",{\"1\":{\"391\":1}}],[\"多种消息类型支持\",{\"1\":{\"462\":1}}],[\"多传输协议传输协议封装消息协议进行\",{\"1\":{\"462\":1}}],[\"多消息协议rpc\",{\"1\":{\"462\":1}}],[\"多协议支持hertz\",{\"1\":{\"461\":1}}],[\"多用error包\",{\"1\":{\"425\":1}}],[\"多核处理器\",{\"1\":{\"421\":1}}],[\"多接口\",{\"1\":{\"392\":1}}],[\"多返回值怎么实现的\",{\"0\":{\"348\":1}}],[\"多路复用机制\",{\"1\":{\"330\":1}}],[\"多路复用\",{\"1\":{\"330\":1,\"694\":1}}],[\"多个类型可以实现同一个接口\",{\"1\":{\"662\":1}}],[\"多个切片如果表示同一个数组的片段\",{\"1\":{\"585\":1}}],[\"多个函数之间相互调用形成闭环\",{\"1\":{\"570\":1}}],[\"多个线程之间可以共享进程的资源并通过共享内存等线程间的通信方式来通信\",{\"1\":{\"408\":1}}],[\"多个实例使用指针连接起来形成一个单连表\",{\"1\":{\"332\":1}}],[\"多个\",{\"0\":{\"325\":1,\"425\":1},\"1\":{\"325\":1,\"331\":1,\"350\":1,\"394\":1}}],[\"多个字段上创建的索引\",{\"1\":{\"212\":1}}],[\"多态用得越多\",{\"1\":{\"676\":1}}],[\"多态通过接口的使用来实现\",{\"1\":{\"659\":1}}],[\"多态就实现了\",{\"1\":{\"391\":1}}],[\"多态是面向对象编程中一个广为人知的概念\",{\"1\":{\"662\":1}}],[\"多态是一种运行期的行为\",{\"1\":{\"391\":1}}],[\"多态是通过接口来实现的\",{\"1\":{\"316\":1}}],[\"多态也使得不同内部结构的对象可以共享相同的外部接口\",{\"1\":{\"316\":1}}],[\"多态\",{\"0\":{\"316\":1},\"1\":{\"310\":1,\"316\":3,\"662\":1,\"676\":1}}],[\"多多少少都存在一些缺点\",{\"1\":{\"258\":1}}],[\"多表查询等语法\",{\"1\":{\"251\":1}}],[\"多版本并发控制\",{\"1\":{\"234\":1}}],[\"多列索引\",{\"0\":{\"222\":1}}],[\"多行注释一般用于包的文档描述或注释成块的代码片段\",{\"1\":{\"508\":1}}],[\"多行注释也叫块注释\",{\"1\":{\"508\":1}}],[\"多行\",{\"1\":{\"85\":1}}],[\"多条\",{\"1\":{\"85\":1}}],[\"处理成显式返回的错误\",{\"1\":{\"689\":1}}],[\"处理文件操作的例子可以在\",{\"1\":{\"687\":1}}],[\"处理错误并且在函数发生错误的地方给用户返回错误信息\",{\"1\":{\"687\":1}}],[\"处理错误的\",{\"1\":{\"687\":1}}],[\"处理错误方便\",{\"1\":{\"321\":1}}],[\"处理器上的移植进度\",{\"1\":{\"484\":1}}],[\"处理器上运行\",{\"1\":{\"476\":1}}],[\"处理器\",{\"1\":{\"484\":1}}],[\"处理器架构的程序构建\",{\"1\":{\"481\":1}}],[\"处理\",{\"1\":{\"85\":1,\"335\":1,\"455\":1}}],[\"语言标记值列表表示\",{\"1\":{\"873\":1}}],[\"语言标准库的编译时间一般都在\",{\"1\":{\"473\":1}}],[\"语言提供的垃圾回收器对并发编程至关重要\",{\"1\":{\"693\":1}}],[\"语言无关的编码方式\",{\"1\":{\"686\":1}}],[\"语言无疑比大多数其它语言有着更高的开发效率\",{\"1\":{\"476\":1}}],[\"语言最重要的三个方面分别是\",{\"1\":{\"676\":1}}],[\"语言最强有力的部分\",{\"1\":{\"473\":1}}],[\"语言动态的一面\",{\"1\":{\"667\":1}}],[\"语言规范定义了接口方法集的调用规则\",{\"1\":{\"662\":1}}],[\"语言里有非常灵活的\",{\"1\":{\"662\":1}}],[\"语言里内置的原始类型\",{\"1\":{\"382\":1}}],[\"语言客户端库使调用变得更容易\",{\"1\":{\"638\":1}}],[\"语言数组类型之上的抽象\",{\"1\":{\"578\":1}}],[\"语言具有一些函数式语言的特性\",{\"1\":{\"574\":1}}],[\"语言具有的平行赋值的特性\",{\"1\":{\"553\":1}}],[\"语言拥有一些不需要进行导入操作就可以使用的内置函数\",{\"1\":{\"569\":1}}],[\"语言可以使程序员轻松创建指针\",{\"1\":{\"547\":1}}],[\"语言可以在\",{\"1\":{\"476\":1}}],[\"语言内存泄漏继而程序崩溃的指针运算\",{\"1\":{\"547\":1}}],[\"语言这些低级\",{\"1\":{\"547\":1}}],[\"语言这门略微比汇编语言好一点的泥潭时\",{\"1\":{\"467\":1}}],[\"语言和\",{\"1\":{\"547\":1}}],[\"语言允许你控制特定集合的数据结构\",{\"1\":{\"547\":1}}],[\"语言为构建并发程序的基本代码块是协程\",{\"1\":{\"693\":1}}],[\"语言为程序员提供了控制数据结构的指针的能力\",{\"1\":{\"547\":1}}],[\"语言为目标结果的编译器来拓展\",{\"1\":{\"469\":1}}],[\"语言支持所有这些编码格式\",{\"1\":{\"682\":1}}],[\"语言支持整型和浮点型数字\",{\"1\":{\"523\":1}}],[\"语言支持交叉编译\",{\"1\":{\"475\":1}}],[\"语言不是一种\",{\"1\":{\"662\":1}}],[\"语言不支持面向对象编程语言中那样的构造子方法\",{\"1\":{\"642\":1}}],[\"语言不支持运算符重载\",{\"1\":{\"626\":1}}],[\"语言不支持这项特性的主要原因是函数重载需要进行多余的类型匹配影响性能\",{\"1\":{\"561\":1}}],[\"语言不存在隐式类型转换\",{\"1\":{\"511\":1}}],[\"语言不适合用来开发对实时性要求很高的软件\",{\"1\":{\"476\":1}}],[\"语言虽然看起来不使用分号作为语句的结束\",{\"1\":{\"507\":1}}],[\"语言也是区分大小写的\",{\"1\":{\"504\":1}}],[\"语言也拥有一些动态语言的特性\",{\"1\":{\"471\":1}}],[\"语言代码\",{\"1\":{\"501\":1}}],[\"语言代码或者包而言\",{\"1\":{\"481\":1}}],[\"语言库\",{\"1\":{\"501\":2}}],[\"语言与\",{\"1\":{\"499\":1}}],[\"语言与鸭子类型的关系\",{\"0\":{\"378\":1}}],[\"语言自身编写的\",{\"1\":{\"498\":1}}],[\"语言自带的工具\",{\"1\":{\"469\":1}}],[\"语言像许多其它语言那样总是在为代码风格而引发无休止的争论\",{\"1\":{\"496\":1}}],[\"语言像其它静态语言一样执行本地代码\",{\"1\":{\"473\":1}}],[\"语言能否在\",{\"1\":{\"488\":1}}],[\"语言所用到的虚拟机\",{\"1\":{\"487\":1}}],[\"语言写的代码\",{\"1\":{\"485\":1}}],[\"语言进行开发了\",{\"1\":{\"485\":1}}],[\"语言进行系统编程开发比使用\",{\"1\":{\"467\":1}}],[\"语言移植到其它例如\",{\"1\":{\"482\":1}}],[\"语言源码文件\",{\"1\":{\"482\":1}}],[\"语言源文件的扩展名很显然就是\",{\"1\":{\"481\":1}}],[\"语言之间的互操作性\",{\"1\":{\"481\":1}}],[\"语言之前需要具备一些关于编程的基础知识和经验\",{\"1\":{\"467\":1}}],[\"语言本身是由\",{\"1\":{\"481\":1}}],[\"语言时\",{\"1\":{\"478\":1}}],[\"语言时仿佛呼吸到了新鲜空气一般\",{\"1\":{\"467\":1}}],[\"语言使用快速的查找算法来测试\",{\"1\":{\"551\":1}}],[\"语言使用了与其它语言不同的设计模式\",{\"1\":{\"478\":1}}],[\"语言使用静态类型\",{\"1\":{\"475\":1}}],[\"语言一样\",{\"1\":{\"547\":1}}],[\"语言一样无法自拔\",{\"1\":{\"478\":1}}],[\"语言一个非常好的目标就是实现所谓的复杂事件处理\",{\"1\":{\"476\":1}}],[\"语言都没有支持\",{\"1\":{\"477\":1}}],[\"语言完成的\",{\"1\":{\"476\":1}}],[\"语言来开发\",{\"1\":{\"476\":1}}],[\"语言来构造大型项目\",{\"1\":{\"467\":1}}],[\"语言同时也是一门可以用于实现一般目标的语言\",{\"1\":{\"476\":1}}],[\"语言被设计成一门应用于搭载\",{\"1\":{\"476\":1}}],[\"语言做到了真正的国际化\",{\"1\":{\"475\":1}}],[\"语言其实也有一些动态语言的特性\",{\"1\":{\"475\":1}}],[\"语言没有类和继承的概念\",{\"1\":{\"475\":1}}],[\"语言从本质上\",{\"1\":{\"475\":1}}],[\"语言从同样受到\",{\"1\":{\"471\":1}}],[\"语言编译器的特殊性\",{\"1\":{\"570\":1}}],[\"语言编写\",{\"1\":{\"487\":1}}],[\"语言编写的\",{\"1\":{\"481\":1,\"483\":1}}],[\"语言编写的海量库文件\",{\"1\":{\"473\":1}}],[\"语言编写并产生本地代码\",{\"1\":{\"481\":1}}],[\"语言编程\",{\"0\":{\"478\":1}}],[\"语言编码规范\",{\"1\":{\"474\":1}}],[\"语言通过另一种途径实现面向对象设计\",{\"1\":{\"477\":1}}],[\"语言通过减少关键字的数量\",{\"1\":{\"474\":1}}],[\"语言通过改善或去除在\",{\"1\":{\"467\":1}}],[\"语言还有\",{\"1\":{\"504\":1}}],[\"语言还有一个运行在\",{\"1\":{\"469\":1}}],[\"语言还是一门相对年轻的编程语言\",{\"1\":{\"489\":1}}],[\"语言还支持调用由\",{\"1\":{\"473\":1}}],[\"语言还能够在运行时进行反射相关的操作\",{\"1\":{\"473\":1}}],[\"语言或者\",{\"1\":{\"473\":1}}],[\"语言采用包模型的根本原因\",{\"1\":{\"473\":1}}],[\"语言是一种静态类型语言\",{\"1\":{\"509\":1}}],[\"语言是一门类型安全和内存安全的编程语言\",{\"1\":{\"473\":1}}],[\"语言是不是面向对象\",{\"1\":{\"310\":1}}],[\"语言出现之前\",{\"1\":{\"472\":1}}],[\"语言出现的目的是希望在编程领域创造最实用的方式来进行软件开发\",{\"1\":{\"467\":1}}],[\"语言受到\",{\"1\":{\"471\":1}}],[\"语言当中\",{\"1\":{\"471\":1}}],[\"语言并不是凭空而造的\",{\"1\":{\"471\":1}}],[\"语言并没有设计诸如虚函数\",{\"1\":{\"391\":1}}],[\"语言发展的早期编程语言\",{\"0\":{\"471\":1}}],[\"语言相关资源的搜索引擎页面\",{\"1\":{\"469\":1}}],[\"语言投入到后端基础设施的实际开发中\",{\"1\":{\"469\":1}}],[\"语言投入实际开发的公司和组织\",{\"1\":{\"467\":1}}],[\"语言在函数式编程方面的基本概念\",{\"1\":{\"475\":1}}],[\"语言在执行速度方面也可以与\",{\"1\":{\"473\":1}}],[\"语言在这\",{\"1\":{\"472\":1}}],[\"语言在这项排名中的最高记录是在\",{\"1\":{\"469\":1}}],[\"语言在\",{\"0\":{\"715\":1},\"1\":{\"469\":3}}],[\"语言在云\",{\"1\":{\"467\":1}}],[\"语言核心部分提交了超过\",{\"1\":{\"469\":1}}],[\"语言借助开源社区的有生力量达到快速地发展\",{\"1\":{\"469\":1}}],[\"语言起源\",{\"1\":{\"469\":1}}],[\"语言开发团队开发了适用于以下操作系统的编译器\",{\"1\":{\"481\":1}}],[\"语言开发团队对于这些方面的讨论\",{\"1\":{\"477\":1}}],[\"语言开发的\",{\"1\":{\"481\":1}}],[\"语言开发的应用程序\",{\"1\":{\"476\":1}}],[\"语言开发的大型存储区域网络\",{\"1\":{\"476\":1}}],[\"语言开发的实际应用项目\",{\"1\":{\"476\":1}}],[\"语言开发的奇妙世界\",{\"1\":{\"467\":1}}],[\"语言开发社区的资源站\",{\"1\":{\"469\":1}}],[\"语言开发模式的最佳实践\",{\"1\":{\"467\":1}}],[\"语言已经成功地解决了\",{\"1\":{\"467\":1}}],[\"语言已经提供了大量有关\",{\"1\":{\"467\":1}}],[\"语言以能够让其编译\",{\"1\":{\"467\":1}}],[\"语言大师的道路上更加顺利\",{\"1\":{\"467\":1}}],[\"语言有\",{\"1\":{\"676\":1}}],[\"语言有一个\",{\"1\":{\"590\":1}}],[\"语言有一个清晰易懂的轻量级类型系统\",{\"1\":{\"475\":1}}],[\"语言有一个被称之为\",{\"1\":{\"467\":1}}],[\"语言有一套完整的编码规范\",{\"1\":{\"474\":1}}],[\"语言有一种极简抽象艺术家的感觉\",{\"1\":{\"474\":1}}],[\"语言有很大的帮助\",{\"1\":{\"467\":1}}],[\"语言简洁到可以将它整个的装入你的大脑中\",{\"1\":{\"467\":1}}],[\"语言旨在减少不必要的编码工作\",{\"1\":{\"467\":1}}],[\"语言爱好者的引用\",{\"1\":{\"467\":1}}],[\"语言项目以\",{\"1\":{\"469\":1}}],[\"语言项目总负责人\",{\"1\":{\"469\":1}}],[\"语言项目\",{\"1\":{\"467\":1,\"469\":1}}],[\"语言技巧的学习之后\",{\"1\":{\"467\":1}}],[\"语言应用到分布式和\",{\"1\":{\"467\":1}}],[\"语言\",{\"1\":{\"467\":3,\"469\":2,\"471\":1,\"473\":1,\"476\":1,\"481\":1,\"482\":1,\"499\":1,\"507\":1,\"614\":1}}],[\"语言就在这样的环境下诞生了\",{\"1\":{\"467\":1}}],[\"语言想要把\",{\"1\":{\"320\":1}}],[\"语言的包展开讲解\",{\"1\":{\"613\":1}}],[\"语言的多维切片可以任意切分\",{\"1\":{\"589\":1}}],[\"语言的多维数组是矩形式的\",{\"1\":{\"582\":1}}],[\"语言的函数经常使用两个返回值来表示执行是否成功\",{\"1\":{\"550\":1}}],[\"语言的函数式和面向对象编程进行透彻的讲解\",{\"1\":{\"467\":1}}],[\"语言的取地址符是\",{\"1\":{\"547\":1}}],[\"语言的诞生时间且自定义格式化时必须以此时间为基准\",{\"1\":{\"546\":1}}],[\"语言的一个类型\",{\"1\":{\"531\":1}}],[\"语言的声明语法\",{\"1\":{\"515\":1}}],[\"语言的关键字\",{\"1\":{\"504\":1}}],[\"语言的执行效率大约比\",{\"1\":{\"499\":1}}],[\"语言的性能差距大概在\",{\"1\":{\"499\":1}}],[\"语言的必杀技\",{\"1\":{\"479\":1}}],[\"语言的优雅的解决方案\",{\"1\":{\"478\":1}}],[\"语言的代码里并不是特别常见\",{\"1\":{\"578\":1}}],[\"语言的代码中是不合法的\",{\"1\":{\"547\":1}}],[\"语言的代码迁移到\",{\"1\":{\"478\":1}}],[\"语言的代码更加简洁\",{\"1\":{\"467\":1}}],[\"语言的世界之后\",{\"1\":{\"478\":1}}],[\"语言的稳定版本是\",{\"1\":{\"476\":1}}],[\"语言的编译器和链接器都是\",{\"1\":{\"481\":1}}],[\"语言的编译器和链接器都是使用\",{\"1\":{\"481\":1}}],[\"语言的编译器用于本地客户端\",{\"1\":{\"476\":1}}],[\"语言的编码规范\",{\"1\":{\"467\":1}}],[\"语言的用途\",{\"0\":{\"476\":1}}],[\"语言的特性\",{\"0\":{\"475\":1}}],[\"语言的另一个目标是对于网络通信\",{\"1\":{\"473\":1}}],[\"语言的主要目标是将静态语言的安全性和高效性与动态语言的易开发性进行有机结合\",{\"1\":{\"473\":1}}],[\"语言的主要特性与发展的环境和影响因素\",{\"0\":{\"470\":1}}],[\"语言的发展目标\",{\"0\":{\"473\":1}}],[\"语言的影响\",{\"1\":{\"471\":2}}],[\"语言的时候感觉非常容易上手\",{\"1\":{\"471\":1}}],[\"语言的语法标准\",{\"1\":{\"474\":1}}],[\"语言的语法感到非常亲切而易于转型\",{\"1\":{\"471\":1}}],[\"语言的语法特性简直是太简单了\",{\"1\":{\"320\":1}}],[\"语言的情况下在你的浏览器中编译并运行\",{\"1\":{\"469\":1}}],[\"语言的官方网站是\",{\"1\":{\"469\":1}}],[\"语言的存在\",{\"1\":{\"469\":1}}],[\"语言的标准库中\",{\"1\":{\"670\":1}}],[\"语言的标准库\",{\"1\":{\"481\":1}}],[\"语言的标准库代码包\",{\"1\":{\"418\":1}}],[\"语言的标准包\",{\"1\":{\"469\":1}}],[\"语言的设计者们还是完成了这项艰难的任务\",{\"1\":{\"473\":1}}],[\"语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题\",{\"1\":{\"473\":1}}],[\"语言的设计工作接近尾声\",{\"1\":{\"469\":1}}],[\"语言的设计思想\",{\"1\":{\"469\":1}}],[\"语言的研发工作\",{\"1\":{\"469\":1}}],[\"语言的方法\",{\"1\":{\"467\":1}}],[\"语言的大多数代码示例和练习都和控制台有着密不可分的关系而感到惊奇\",{\"1\":{\"467\":1}}],[\"语言的开发模式和一些编码规范\",{\"1\":{\"467\":1}}],[\"语言的核心思想\",{\"1\":{\"467\":1}}],[\"语言的起源与发展\",{\"0\":{\"468\":1}}],[\"语言的起源\",{\"1\":{\"467\":1}}],[\"语言的源码文件分为三类\",{\"1\":{\"449\":1}}],[\"语言的\",{\"1\":{\"320\":3,\"682\":1}}],[\"语言的理念是信任程序员\",{\"1\":{\"320\":1}}],[\"语言的例子如下\",{\"1\":{\"314\":1}}],[\"语言中到处都实现了\",{\"1\":{\"686\":1}}],[\"语言中函数重载可以用可变参数\",{\"1\":{\"675\":1}}],[\"语言中接口可以有值\",{\"1\":{\"662\":1}}],[\"语言中接口和反射的相关内容\",{\"1\":{\"662\":1}}],[\"语言中那样\",{\"1\":{\"642\":1}}],[\"语言中那样含糊不清的声明形式\",{\"1\":{\"515\":1}}],[\"语言中常常像上面这样在工厂方法里使用初始化来简便的实现构造函数\",{\"1\":{\"642\":1}}],[\"语言中这叫\",{\"1\":{\"640\":1}}],[\"语言中这种锁的机制是通过\",{\"1\":{\"625\":1}}],[\"语言中代码组织和代码编译的主要方式\",{\"1\":{\"627\":1}}],[\"语言中提供了\",{\"1\":{\"626\":1}}],[\"语言中所提倡用来实现并发的技术\",{\"1\":{\"625\":1}}],[\"语言中有\",{\"1\":{\"614\":1}}],[\"语言中是相似的\",{\"1\":{\"580\":1}}],[\"语言中非常常见\",{\"1\":{\"574\":1}}],[\"语言中使用闭包\",{\"1\":{\"574\":1}}],[\"语言中使用谷歌\",{\"1\":{\"467\":1}}],[\"语言中也可以使用相互调用的递归函数\",{\"1\":{\"570\":1}}],[\"语言中您只有\",{\"1\":{\"552\":1}}],[\"语言中只有\",{\"1\":{\"523\":1}}],[\"语言中没有类的概念\",{\"1\":{\"639\":1}}],[\"语言中没有\",{\"1\":{\"523\":1}}],[\"语言中包含以下逻辑运算符\",{\"1\":{\"521\":1}}],[\"语言中你必须使用所有被声明的变量\",{\"1\":{\"518\":1}}],[\"语言中对象的命名也应该是简洁且有意义的\",{\"1\":{\"512\":1}}],[\"语言中另一个非常重要的特性就是它的构建速度\",{\"1\":{\"473\":1}}],[\"语言中仍有指针的存在\",{\"1\":{\"473\":1}}],[\"语言中最值得称赞的设计\",{\"1\":{\"467\":1}}],[\"语言中巧妙地使用错误处理机制\",{\"1\":{\"467\":1}}],[\"语言中进行程序测试和如何使用模板来开发\",{\"1\":{\"467\":1}}],[\"语言中不存在类型继承\",{\"1\":{\"509\":1}}],[\"语言中不允许隐式类型转换\",{\"1\":{\"387\":1}}],[\"语言中不同的类型如何比较是否相等\",{\"0\":{\"349\":1}}],[\"语言中各种数据类型的结构体\",{\"1\":{\"383\":1}}],[\"语言中就是一个东西\",{\"1\":{\"316\":1}}],[\"语言中达到了类似继承的效果\",{\"1\":{\"315\":1}}],[\"语言中\",{\"1\":{\"315\":1,\"316\":2,\"473\":1,\"513\":1,\"516\":1,\"518\":1,\"521\":1,\"547\":1,\"570\":1,\"640\":1,\"647\":1,\"651\":1,\"657\":1,\"658\":1,\"659\":1,\"678\":1}}],[\"语言中的协程\",{\"1\":{\"698\":1}}],[\"语言中的接口都很简短\",{\"1\":{\"662\":1}}],[\"语言中的继承是通过内嵌或组合来实现的\",{\"1\":{\"647\":1}}],[\"语言中的指针很像\",{\"1\":{\"640\":1}}],[\"语言中的指针保证了内存安全\",{\"1\":{\"547\":1}}],[\"语言中的字符串是不可变的\",{\"1\":{\"598\":1}}],[\"语言中的数组是一种\",{\"1\":{\"580\":1}}],[\"语言中的数组也是类似的\",{\"1\":{\"578\":1}}],[\"语言中的函数在处理混合对象时的强大能力\",{\"1\":{\"574\":1}}],[\"语言中的\",{\"1\":{\"551\":1,\"626\":1}}],[\"语言中的错误类型为\",{\"1\":{\"550\":1}}],[\"语言中的基本构件\",{\"1\":{\"475\":1}}],[\"语言中的基本封装\",{\"1\":{\"314\":1}}],[\"语言中的类\",{\"1\":{\"471\":1}}],[\"语言中的属性访问权限\",{\"1\":{\"314\":1}}],[\"语言集中负责数据结构定义与数据库对象定义的语言\",{\"1\":{\"87\":1}}],[\"语句一起使用\",{\"1\":{\"709\":1}}],[\"语句是个不错的办法\",{\"1\":{\"709\":1}}],[\"语句是不被鼓励的\",{\"1\":{\"559\":1}}],[\"语句从而退出循环\",{\"1\":{\"678\":1}}],[\"语句确保在程序退出前关闭该文件\",{\"1\":{\"678\":1}}],[\"语句列举的类型中\",{\"1\":{\"662\":1}}],[\"语句引入了相应的功能\",{\"1\":{\"627\":1}}],[\"语句后发生的\",{\"1\":{\"573\":1}}],[\"语句实现代码追踪\",{\"1\":{\"568\":1}}],[\"语句能够使得代码更加简洁\",{\"1\":{\"568\":1}}],[\"语句同样可以包含一些操作\",{\"1\":{\"568\":1}}],[\"语句里面都要明确指出包含返回值的变量或是一个可计算的值\",{\"1\":{\"564\":1}}],[\"语句可以用在通道\",{\"1\":{\"708\":1}}],[\"语句可以带有零个或多个参数\",{\"1\":{\"561\":1}}],[\"语句可以写成一行\",{\"1\":{\"85\":1}}],[\"语句和匿名函数\",{\"1\":{\"573\":1}}],[\"语句和标签配合使用来模拟循环\",{\"1\":{\"559\":1}}],[\"语句和执行的函数组成\",{\"1\":{\"331\":1}}],[\"语句指向\",{\"1\":{\"559\":1}}],[\"语句都会保证执行并把控制权交还给接收到\",{\"1\":{\"689\":1}}],[\"语句都可以配合标签\",{\"1\":{\"559\":1}}],[\"语句都对应一个\",{\"1\":{\"332\":1}}],[\"语句退出循环\",{\"1\":{\"558\":1}}],[\"语句重写\",{\"1\":{\"558\":1}}],[\"语句重写循环\",{\"1\":{\"554\":1}}],[\"语句提前对函数进行返回\",{\"1\":{\"556\":1}}],[\"语句直接返回\",{\"1\":{\"556\":1}}],[\"语句在同一行\",{\"1\":{\"553\":1}}],[\"语句还可以被用于\",{\"1\":{\"551\":1}}],[\"语句判断从键盘输入的字符\",{\"1\":{\"551\":1}}],[\"语句判断接口的类型\",{\"1\":{\"389\":1}}],[\"语句以确保函数始终会返回\",{\"1\":{\"551\":1}}],[\"语句以更新数据\",{\"1\":{\"260\":1}}],[\"语句块\",{\"1\":{\"568\":1}}],[\"语句块中使用\",{\"1\":{\"551\":1}}],[\"语句块后面不需要使用\",{\"1\":{\"550\":1}}],[\"语句之间不能出现定义新变量的语句\",{\"1\":{\"559\":1}}],[\"语句之后\",{\"1\":{\"551\":2,\"559\":1,\"568\":1}}],[\"语句之前的块注释将被默认认为是这个包的文档说明\",{\"1\":{\"508\":1}}],[\"语句来读取通道是更好的办法\",{\"1\":{\"709\":1}}],[\"语句来一个一个显式地赋值\",{\"1\":{\"665\":1}}],[\"语句来记录函数的参数与返回值\",{\"1\":{\"568\":1}}],[\"语句来提前结束代码块的执行\",{\"1\":{\"551\":1}}],[\"语句来表示结束\",{\"1\":{\"551\":1}}],[\"语句来测试执行结果\",{\"1\":{\"550\":1}}],[\"语句来对可能出现的错误进行分类处理\",{\"1\":{\"545\":1}}],[\"语句来限制返回的数据\",{\"1\":{\"265\":1}}],[\"语句等\",{\"1\":{\"507\":1}}],[\"语句必须转化为一系列的低级机器语言指令\",{\"1\":{\"447\":1}}],[\"语句必须以分号\",{\"1\":{\"85\":1}}],[\"语句出现的时候就已经确定了的\",{\"1\":{\"332\":1}}],[\"语句仅能处理一个管道\",{\"1\":{\"331\":1}}],[\"语句内部的执行顺序是这样的\",{\"1\":{\"305\":1}}],[\"语句内部的执行步骤\",{\"0\":{\"305\":1}}],[\"语句内或另一个子查询中\",{\"1\":{\"128\":1}}],[\"语句也可以用来结束\",{\"1\":{\"561\":1}}],[\"语句也可以组合起来\",{\"1\":{\"515\":1}}],[\"语句也不够直观\",{\"1\":{\"272\":1}}],[\"语句也没意义\",{\"1\":{\"151\":1,\"187\":1}}],[\"语句细节\",{\"0\":{\"269\":1}}],[\"语句进行查询过滤\",{\"1\":{\"265\":1}}],[\"语句操作了主键索引\",{\"1\":{\"235\":1}}],[\"语句检索条件的不同\",{\"1\":{\"235\":1}}],[\"语句处\",{\"1\":{\"151\":1,\"187\":1}}],[\"语句执行后\",{\"1\":{\"151\":1,\"187\":1}}],[\"语句中列举的类型\",{\"1\":{\"662\":1}}],[\"语句中字段的顺序\",{\"1\":{\"263\":1}}],[\"语句中间\",{\"1\":{\"163\":1,\"199\":1}}],[\"语句中的关键字转为大写后在执行\",{\"1\":{\"280\":1}}],[\"语句中的\",{\"1\":{\"129\":3,\"551\":1}}],[\"语句中\",{\"1\":{\"129\":1,\"558\":1}}],[\"语句的手法\",{\"1\":{\"568\":1}}],[\"语句的时候会退出\",{\"1\":{\"561\":1}}],[\"语句的示例会在第\",{\"1\":{\"559\":1}}],[\"语句的作用结果是跳过整个代码块\",{\"1\":{\"558\":1}}],[\"语句的第三种形式是包含一个初始化语句\",{\"1\":{\"551\":1}}],[\"语句的第二种形式是不提供任何被判断的值\",{\"1\":{\"551\":1}}],[\"语句的初始化部分\",{\"1\":{\"550\":2}}],[\"语句的顺序是很重要的\",{\"1\":{\"389\":1}}],[\"语句的执行顺序是随机的\",{\"1\":{\"331\":1}}],[\"语句的列表\",{\"1\":{\"167\":1,\"203\":1}}],[\"语句的批处理\",{\"1\":{\"162\":1,\"198\":1}}],[\"语句的\",{\"1\":{\"128\":1}}],[\"语句的结果集的可视化的表\",{\"1\":{\"103\":1}}],[\"语句用于多条件的分支判断\",{\"1\":{\"163\":1,\"199\":1}}],[\"语句用于从数据库中查询数据\",{\"1\":{\"122\":1}}],[\"语句用于删除表中的记录\",{\"1\":{\"119\":1}}],[\"语句用于更新表中的记录\",{\"1\":{\"118\":1}}],[\"语句用于向表中插入新记录\",{\"1\":{\"114\":1}}],[\"语句用法\",{\"1\":{\"90\":1,\"112\":1,\"150\":1,\"153\":1,\"186\":1,\"189\":1}}],[\"语句所做的更改\",{\"1\":{\"89\":1}}],[\"语句时打印\",{\"1\":{\"568\":1}}],[\"语句时\",{\"1\":{\"85\":1,\"151\":1,\"187\":1,\"549\":1}}],[\"语句不区分大小写\",{\"1\":{\"85\":1}}],[\"语句\",{\"1\":{\"84\":1,\"85\":2,\"112\":2,\"151\":2,\"164\":1,\"166\":1,\"168\":1,\"187\":2,\"200\":1,\"202\":1,\"204\":1,\"263\":1,\"265\":1,\"331\":2,\"494\":1,\"521\":1,\"549\":1,\"551\":2,\"554\":1,\"556\":1,\"557\":1,\"562\":1,\"564\":1,\"662\":1,\"677\":1}}],[\"语法和\",{\"1\":{\"684\":1}}],[\"语法和读写分离\",{\"1\":{\"251\":1}}],[\"语法上很类似其它语言中的\",{\"1\":{\"557\":1}}],[\"语法高亮是必不可少的功能\",{\"1\":{\"490\":1}}],[\"语法分析程序是名为\",{\"1\":{\"481\":1}}],[\"语法支持也比较多\",{\"1\":{\"251\":1}}],[\"语法为\",{\"1\":{\"166\":1,\"202\":1}}],[\"语法要点\",{\"0\":{\"85\":1}}],[\"语法结构包括\",{\"1\":{\"84\":1}}],[\"语法结构\",{\"0\":{\"84\":1}}],[\"语法\",{\"0\":{\"83\":1},\"1\":{\"167\":1,\"203\":1,\"317\":1,\"581\":1,\"595\":1}}],[\"三种方式\",{\"1\":{\"700\":1}}],[\"三角形面积=0\",{\"1\":{\"662\":1}}],[\"三者在内存中存在多个组成部分\",{\"1\":{\"588\":1}}],[\"三者执行的效率为\",{\"1\":{\"303\":1}}],[\"三次调用函数\",{\"1\":{\"574\":1}}],[\"三色法消耗过多的\",{\"1\":{\"443\":1}}],[\"三色标记主要是插入屏障和删除屏障\",{\"1\":{\"429\":1}}],[\"三色标记法\",{\"1\":{\"429\":2}}],[\"三色标记法的流程\",{\"1\":{\"429\":1}}],[\"三方库实现的协程池\",{\"1\":{\"424\":1}}],[\"三\",{\"0\":{\"357\":1},\"1\":{\"243\":1}}],[\"三个元素的圆点\",{\"1\":{\"849\":1}}],[\"三个函数作为独立的处理单元按顺序启动\",{\"1\":{\"697\":1}}],[\"三个框架的对比\",{\"1\":{\"461\":1}}],[\"三个协程按交替顺序打印数字\",{\"1\":{\"423\":1}}],[\"三个列\",{\"1\":{\"222\":1}}],[\"三个部分拼成一个字符串\",{\"1\":{\"36\":1}}],[\"三值逻辑\",{\"1\":{\"84\":1}}],[\"谓词\",{\"1\":{\"84\":1}}],[\"等共享密钥签名方案有不同的使用场景\",{\"1\":{\"860\":1}}],[\"等加密算法\",{\"1\":{\"686\":1}}],[\"等同于\",{\"1\":{\"696\":1}}],[\"等同于使用格式化描述符\",{\"1\":{\"660\":1}}],[\"等同于int32\",{\"1\":{\"327\":1}}],[\"等同于int8\",{\"1\":{\"327\":1}}],[\"等那样\",{\"1\":{\"659\":1}}],[\"等代码网站上的包\",{\"1\":{\"627\":1}}],[\"等这样具有常用功能的内置包在\",{\"1\":{\"614\":1}}],[\"等较短的名称命名计数器\",{\"1\":{\"553\":1}}],[\"等其它语言而言\",{\"1\":{\"551\":1}}],[\"等也可以被调用\",{\"1\":{\"501\":1}}],[\"等复杂的函数修改\",{\"1\":{\"498\":1}}],[\"等命令同样适用\",{\"1\":{\"692\":1}}],[\"等命令\",{\"1\":{\"481\":1}}],[\"等循环三色标记之后\",{\"1\":{\"429\":1}}],[\"等待两个协程完成后再结束\",{\"1\":{\"707\":1}}],[\"等待了\",{\"1\":{\"700\":1}}],[\"等待写消息的\",{\"1\":{\"405\":1}}],[\"等待读消息的\",{\"1\":{\"405\":1}}],[\"等待被写\",{\"1\":{\"405\":1}}],[\"等待被写goroutine唤醒\",{\"1\":{\"403\":1}}],[\"等待被读\",{\"1\":{\"405\":1}}],[\"等待被读goroutine唤醒\",{\"1\":{\"402\":1}}],[\"等量扩容\",{\"0\":{\"373\":1}}],[\"等可以通过\",{\"1\":{\"349\":1}}],[\"等语言更轻巧\",{\"1\":{\"312\":1}}],[\"等等来获取时间的一部分\",{\"1\":{\"546\":1}}],[\"等等\",{\"1\":{\"284\":1,\"487\":1,\"501\":1,\"658\":1,\"660\":1,\"662\":1,\"668\":1}}],[\"等顺序都是可以的\",{\"1\":{\"227\":1}}],[\"等的顺序\",{\"1\":{\"227\":1}}],[\"等就不能进一步匹配了\",{\"1\":{\"226\":1}}],[\"等于\",{\"1\":{\"130\":1,\"513\":1,\"525\":5}}],[\"等\",{\"1\":{\"83\":1,\"135\":1,\"185\":1,\"603\":1,\"640\":1,\"658\":1,\"686\":1,\"689\":2}}],[\"等法规的遵守\",{\"1\":{\"74\":1}}],[\"行结束符\",{\"1\":{\"678\":1}}],[\"行为被注册时\",{\"1\":{\"568\":1}}],[\"行为\",{\"1\":{\"431\":1,\"443\":2}}],[\"行为会被约束终止\",{\"1\":{\"112\":1}}],[\"行锁对索引项加锁\",{\"1\":{\"235\":1}}],[\"行锁是通过给索引上的索引项加锁来实现的\",{\"1\":{\"231\":1}}],[\"行级锁\",{\"1\":{\"231\":1}}],[\"行级锁和表级锁\",{\"0\":{\"231\":1},\"1\":{\"231\":1}}],[\"行级监视\",{\"1\":{\"167\":1,\"203\":1}}],[\"行\",{\"1\":{\"82\":1,\"127\":2,\"150\":1,\"183\":1}}],[\"列可以看出\",{\"1\":{\"692\":1}}],[\"列表示当前行执行消耗的时间\",{\"1\":{\"692\":1}}],[\"列表示函数的调用频度\",{\"1\":{\"692\":1}}],[\"列表内的每条语句都必须用分号\",{\"1\":{\"167\":1,\"203\":1}}],[\"列的数据分别读入变量\",{\"1\":{\"678\":1}}],[\"列的排列顺序决定了可命中索引的列数\",{\"1\":{\"226\":1}}],[\"列举\",{\"1\":{\"547\":1}}],[\"列名不经常出现在\",{\"1\":{\"211\":1}}],[\"列名经常出现在\",{\"1\":{\"211\":1}}],[\"列名\",{\"1\":{\"129\":1}}],[\"列名和值是否区分\",{\"1\":{\"85\":1}}],[\"列\",{\"1\":{\"82\":1}}],[\"模板字符串\",{\"1\":{\"757\":1}}],[\"模板与网页应用\",{\"0\":{\"710\":1}}],[\"模糊化\",{\"1\":{\"445\":1}}],[\"模拟了\",{\"1\":{\"682\":1}}],[\"模拟\",{\"1\":{\"330\":1}}],[\"模式用来检测通道是否被关闭\",{\"1\":{\"709\":1}}],[\"模式定义了数据在表中如何存储\",{\"1\":{\"82\":1}}],[\"模式\",{\"0\":{\"712\":1},\"1\":{\"82\":1,\"300\":1,\"550\":1}}],[\"模型不够有效\",{\"1\":{\"694\":1}}],[\"模型中也实现了\",{\"1\":{\"410\":1}}],[\"模型的性能开销大头就是锁竞争\",{\"1\":{\"410\":1}}],[\"模型有\",{\"1\":{\"331\":1}}],[\"模型关键点\",{\"0\":{\"70\":1}}],[\"模型\",{\"0\":{\"59\":1},\"1\":{\"61\":1,\"409\":1}}],[\"🧵\",{\"1\":{\"78\":1}}],[\"🧩\",{\"1\":{\"78\":1}}],[\"⛵\",{\"1\":{\"78\":1}}],[\"🍃\",{\"1\":{\"78\":1}}],[\"☕\",{\"1\":{\"78\":1}}],[\"🔔\",{\"1\":{\"146\":1,\"166\":1,\"179\":1,\"202\":1}}],[\"📫\",{\"1\":{\"78\":1}}],[\"📝\",{\"1\":{\"78\":1}}],[\"🐧\",{\"1\":{\"78\":1}}],[\"🐙\",{\"1\":{\"78\":1}}],[\"🕸️\",{\"1\":{\"78\":1}}],[\"🐳\",{\"1\":{\"78\":1}}],[\"📮\",{\"1\":{\"78\":1}}],[\"📊\",{\"1\":{\"78\":1}}],[\"🔍\",{\"1\":{\"78\":1}}],[\"📈\",{\"1\":{\"78\":1}}],[\"📰\",{\"1\":{\"78\":1}}],[\"📜\",{\"1\":{\"78\":1}}],[\"📗\",{\"1\":{\"78\":1}}],[\"👨‍🔧\",{\"1\":{\"78\":1}}],[\"📚\",{\"1\":{\"78\":1}}],[\"个别索偿申请\",{\"0\":{\"939\":1}}],[\"个协程需要通信\",{\"1\":{\"700\":1}}],[\"个活动的线程\",{\"1\":{\"696\":1}}],[\"个核心的情况设置\",{\"1\":{\"696\":1}}],[\"个处理器上\",{\"1\":{\"696\":1}}],[\"个的机器上\",{\"1\":{\"696\":1}}],[\"个的操作系统线程\",{\"1\":{\"696\":1}}],[\"个的包\",{\"1\":{\"686\":1}}],[\"个连续的协程\",{\"1\":{\"694\":1}}],[\"个函数\",{\"1\":{\"692\":1}}],[\"个函数都会返回\",{\"1\":{\"542\":1}}],[\"个随机浮点数的数组\",{\"1\":{\"662\":1}}],[\"个格子\",{\"1\":{\"660\":1}}],[\"个匿名字段\",{\"1\":{\"648\":1}}],[\"个以上的不同线程在同一时间去改变\",{\"1\":{\"654\":1}}],[\"个以上的表连接查询\",{\"1\":{\"270\":1}}],[\"个以上\",{\"1\":{\"614\":1}}],[\"个整数的和并等待计算结果并打印出来\",{\"1\":{\"707\":1}}],[\"个整数的阶乘的程序\",{\"1\":{\"571\":1}}],[\"个整数是否是偶数\",{\"1\":{\"689\":1}}],[\"个整数是不是偶数\",{\"1\":{\"627\":1}}],[\"个整型的切片\",{\"1\":{\"593\":1}}],[\"个域的结构体\",{\"1\":{\"585\":1}}],[\"个数\",{\"1\":{\"703\":1}}],[\"个数的值存在数组中索引为\",{\"1\":{\"577\":1}}],[\"个数字\",{\"1\":{\"577\":1,\"677\":1}}],[\"个参数来进行传递并不是很明智的选择\",{\"1\":{\"567\":1}}],[\"个参数\",{\"1\":{\"561\":2,\"587\":1,\"602\":1,\"682\":1}}],[\"个返回值\",{\"1\":{\"550\":1}}],[\"个是可能出现的错误\",{\"1\":{\"545\":1}}],[\"个是转换后的结果\",{\"1\":{\"545\":1}}],[\"个值\",{\"1\":{\"545\":1}}],[\"个字符表示\",{\"1\":{\"557\":1}}],[\"个字符为止\",{\"1\":{\"554\":1}}],[\"个字符串\",{\"1\":{\"537\":1,\"700\":1}}],[\"个字节来进行表示\",{\"1\":{\"595\":1}}],[\"个字节表示\",{\"1\":{\"557\":1}}],[\"个字节的传统\",{\"1\":{\"531\":1}}],[\"个字节\",{\"1\":{\"523\":2,\"531\":1,\"532\":7,\"547\":3,\"553\":2,\"595\":1,\"605\":2}}],[\"个非负随机数\",{\"1\":{\"528\":1}}],[\"个则同样需要使用逗号分隔\",{\"1\":{\"517\":1}}],[\"个预定义标识符\",{\"1\":{\"504\":1}}],[\"个关键字或保留字\",{\"1\":{\"504\":1}}],[\"个关键字的非叶结点恰好包含\",{\"1\":{\"214\":1}}],[\"个空格\",{\"1\":{\"496\":3,\"549\":1}}],[\"个或更多的访问层次相比\",{\"1\":{\"676\":1}}],[\"个或者\",{\"1\":{\"595\":1}}],[\"个或多个不同的接收者类型上存在\",{\"1\":{\"651\":1}}],[\"个或多个具有相同类型\",{\"1\":{\"593\":1}}],[\"个或多个参数以用于包装\",{\"1\":{\"573\":1}}],[\"个或多个空白符号来作为动态长度的分隔符将字符串分割成若干小块\",{\"1\":{\"542\":1}}],[\"个或多个函数的参数\",{\"1\":{\"507\":1}}],[\"个或多个常量\",{\"1\":{\"506\":1}}],[\"个或多个字符或\",{\"1\":{\"504\":1}}],[\"个或多个长度的符号\",{\"1\":{\"166\":1,\"202\":1}}],[\"个或\",{\"1\":{\"496\":1,\"547\":1,\"549\":1,\"654\":1}}],[\"个小时\",{\"1\":{\"483\":1}}],[\"个版本的编译器\",{\"1\":{\"481\":1}}],[\"个条件之间做到了最佳的平衡\",{\"1\":{\"472\":1}}],[\"个邮件列表的讨论内容并不是分得很清楚\",{\"1\":{\"469\":1}}],[\"个月里\",{\"1\":{\"469\":1}}],[\"个修改建议\",{\"1\":{\"469\":1}}],[\"个不同的版本\",{\"1\":{\"467\":1}}],[\"个代码练习\",{\"1\":{\"467\":1}}],[\"个完整的代码示例和书中的解释说明来对所有涉及到的概念和技巧进行彻底的讲解\",{\"1\":{\"467\":1}}],[\"个方法\",{\"1\":{\"390\":2,\"423\":1,\"662\":1}}],[\"个元素的值\",{\"1\":{\"664\":1}}],[\"个元素的\",{\"1\":{\"662\":2}}],[\"个元素的数组变量\",{\"1\":{\"662\":1}}],[\"个元素的数组\",{\"1\":{\"581\":1}}],[\"个元素长度\",{\"1\":{\"601\":1}}],[\"个元素\",{\"1\":{\"370\":2,\"588\":1,\"664\":1,\"703\":1,\"709\":1}}],[\"个人索赔的语言和脚本\",{\"0\":{\"941\":1}}],[\"个人身份资料\",{\"1\":{\"868\":1}}],[\"个人认为算是一个现在也可以选择的方案\",{\"1\":{\"251\":1}}],[\"个人介绍\",{\"0\":{\"78\":1}}],[\"个并发左右\",{\"1\":{\"246\":1}}],[\"个并发时\",{\"1\":{\"246\":1}}],[\"个孩子\",{\"1\":{\"214\":3}}],[\"个\",{\"1\":{\"212\":1,\"363\":1,\"409\":1,\"474\":1,\"496\":1,\"501\":1,\"549\":1,\"580\":1,\"588\":1,\"590\":1,\"662\":1,\"705\":1}}],[\"个权限\",{\"1\":{\"72\":1}}],[\"个权限点时\",{\"1\":{\"72\":1}}],[\"个权限点\",{\"1\":{\"72\":1}}],[\"架构最重要的方面\",{\"1\":{\"844\":1}}],[\"架构的处理器\",{\"1\":{\"482\":1}}],[\"架构\",{\"1\":{\"481\":3},\"2\":{\"76\":1}}],[\"特定地用于纯\",{\"1\":{\"686\":1}}],[\"特定的存储过程\",{\"1\":{\"154\":1,\"190\":1}}],[\"特定的列\",{\"1\":{\"154\":1,\"190\":1}}],[\"特定的表\",{\"1\":{\"154\":1,\"190\":1}}],[\"特殊操作会在它上面执行\",{\"1\":{\"661\":1}}],[\"特殊的m0和g0\",{\"1\":{\"413\":1}}],[\"特有的一种的迭代结构\",{\"1\":{\"557\":1}}],[\"特点\",{\"0\":{\"802\":1},\"1\":{\"461\":1}}],[\"特使拉以及一些国q还能收到面试邀约\",{\"1\":{\"431\":1}}],[\"特性来让开发者们的工作更加便利\",{\"1\":{\"467\":1}}],[\"特性丰富但不支持事务\",{\"1\":{\"293\":1}}],[\"特性是一把双刃剑\",{\"1\":{\"241\":1}}],[\"特性\",{\"0\":{\"455\":1},\"1\":{\"241\":1}}],[\"特性的一组操作\",{\"1\":{\"236\":1}}],[\"特权蔓延和混乱\",{\"1\":{\"75\":1}}],[\"特别要查询的数据经常被重复查询\",{\"1\":{\"265\":1}}],[\"特别是章节5\",{\"1\":{\"885\":1}}],[\"特别是章节4\",{\"1\":{\"879\":1}}],[\"特别是在非导出函数中有很深层次的嵌套调用时\",{\"1\":{\"689\":1}}],[\"特别是在\",{\"1\":{\"653\":1}}],[\"特别是我们之前章节学习的\",{\"1\":{\"625\":1}}],[\"特别是我这里提到的三个\",{\"1\":{\"320\":1}}],[\"特别是空接口与类型选择\",{\"1\":{\"561\":1}}],[\"特别是接口断言\",{\"1\":{\"340\":1}}],[\"特别是\",{\"1\":{\"254\":1}}],[\"特别注意的是\",{\"1\":{\"571\":1}}],[\"特别注意\",{\"1\":{\"39\":1,\"553\":1,\"559\":1}}],[\"特别适用于分布式站点的单点登陆\",{\"1\":{\"26\":1}}],[\"结尾的单词\",{\"1\":{\"559\":1}}],[\"结尾\",{\"1\":{\"504\":1,\"508\":1,\"534\":1,\"562\":1,\"662\":1,\"688\":1}}],[\"结合来产生另外一个布尔值\",{\"1\":{\"521\":1}}],[\"结合使用\",{\"1\":{\"462\":1}}],[\"结合\",{\"1\":{\"410\":1,\"513\":1,\"689\":3}}],[\"结束内部代码块的执行后隐藏的外部同名变量又会出现\",{\"1\":{\"515\":1}}],[\"结束\",{\"1\":{\"431\":1}}],[\"结束读取过程\",{\"1\":{\"403\":3,\"405\":3}}],[\"结束发送过程\",{\"1\":{\"402\":2,\"405\":2}}],[\"结构可能包含二进制数据\",{\"1\":{\"682\":1}}],[\"结构可以使用\",{\"1\":{\"552\":1}}],[\"结构对于切片\",{\"1\":{\"580\":1}}],[\"结构对每个参数的类型进行判断\",{\"1\":{\"567\":1}}],[\"结构创建一个简单的循环\",{\"1\":{\"554\":1}}],[\"结构比其它语言中的更为灵活\",{\"1\":{\"552\":1}}],[\"结构使用上更加灵活\",{\"1\":{\"551\":1}}],[\"结构之前就已经存在\",{\"1\":{\"549\":1}}],[\"结构则在\",{\"1\":{\"549\":1}}],[\"结构中的代码\",{\"1\":{\"549\":1}}],[\"结构中\",{\"1\":{\"549\":2}}],[\"结构中条件语句两侧的括号\",{\"1\":{\"548\":1}}],[\"结构内有\",{\"1\":{\"549\":1}}],[\"结构会更适合这种情况\",{\"1\":{\"549\":1}}],[\"结构\",{\"0\":{\"549\":1,\"551\":1,\"552\":1,\"557\":1,\"591\":1},\"1\":{\"513\":1,\"521\":1,\"548\":4,\"549\":2,\"552\":1,\"555\":1,\"567\":1,\"580\":1,\"682\":1}}],[\"结构化的类型没有真正的值\",{\"1\":{\"509\":1}}],[\"结构化的\",{\"1\":{\"509\":1}}],[\"结构字段等等\",{\"1\":{\"506\":1}}],[\"结构与方法\",{\"1\":{\"467\":1}}],[\"结构是什么样的\",{\"0\":{\"394\":1}}],[\"结构扩容的时候用于赋值的buckets数组\",{\"1\":{\"364\":1}}],[\"结构组成主要是由\",{\"1\":{\"331\":1}}],[\"结构体实现了\",{\"1\":{\"687\":1}}],[\"结构体或更一般的类型\",{\"1\":{\"671\":1}}],[\"结构体内嵌和自己在同一个包中的结构体时\",{\"1\":{\"655\":1}}],[\"结构体就像是类的一种简化形式\",{\"1\":{\"651\":1}}],[\"结构体可以包含内嵌结构体\",{\"1\":{\"647\":1}}],[\"结构体可以包含一个或多个\",{\"1\":{\"647\":1}}],[\"结构体可以使用\",{\"1\":{\"640\":1}}],[\"结构体中的字段除了有名字和类型外\",{\"1\":{\"645\":1}}],[\"结构体工厂\",{\"0\":{\"642\":1}}],[\"结构体转换\",{\"1\":{\"640\":1}}],[\"结构体类型\",{\"1\":{\"642\":1,\"655\":1,\"657\":2}}],[\"结构体类型可以通过引用自身来定义\",{\"1\":{\"640\":1}}],[\"结构体类型和字段的命名遵循可见性规则\",{\"1\":{\"640\":1}}],[\"结构体和它所包含的数据在内存中是以连续块的形式存在的\",{\"1\":{\"640\":1}}],[\"结构体里的字段都有\",{\"1\":{\"640\":1}}],[\"结构体定义的一般方式如下\",{\"1\":{\"640\":1}}],[\"结构体定义\",{\"0\":{\"640\":1}}],[\"结构体也是值类型\",{\"1\":{\"639\":1}}],[\"结构体是复合类型\",{\"1\":{\"639\":1}}],[\"结构体的内存布局\",{\"1\":{\"640\":1}}],[\"结构体的字段可以是任何类型\",{\"1\":{\"640\":1}}],[\"结构体的概念在软件工程上旧的术语叫\",{\"1\":{\"639\":1}}],[\"结构体的全貌\",{\"1\":{\"383\":1}}],[\"结构体的方法\",{\"1\":{\"315\":1}}],[\"结构体指针的成员\",{\"1\":{\"335\":1}}],[\"结构体支持标记\",{\"1\":{\"328\":1}}],[\"结构体\",{\"0\":{\"639\":1},\"1\":{\"315\":2,\"383\":1,\"640\":3,\"652\":1,\"662\":1}}],[\"结构优化\",{\"0\":{\"281\":1},\"1\":{\"262\":1}}],[\"结构都在经典\",{\"1\":{\"215\":1}}],[\"结构和数据\",{\"1\":{\"137\":1,\"170\":1}}],[\"结构的第二种形式是没有头部的条件判断迭代\",{\"1\":{\"555\":1}}],[\"结构的大括号之间\",{\"1\":{\"549\":1}}],[\"结构的两个分支里都使用\",{\"1\":{\"549\":1}}],[\"结构的明文\",{\"1\":{\"39\":1}}],[\"结构的荷载\",{\"1\":{\"39\":1}}],[\"结果就是\",{\"1\":{\"856\":2}}],[\"结果依旧为整数\",{\"1\":{\"527\":1}}],[\"结果汇总\",{\"1\":{\"405\":1}}],[\"结果来优化查询语句\",{\"1\":{\"264\":1}}],[\"结果进行过滤\",{\"1\":{\"136\":1,\"186\":1}}],[\"结果是嵌套的jwt\",{\"1\":{\"869\":1}}],[\"结果是否定的\",{\"1\":{\"662\":1}}],[\"结果是确定的\",{\"1\":{\"662\":1}}],[\"结果是\",{\"1\":{\"75\":1}}],[\"结果如何\",{\"1\":{\"75\":1}}],[\"访问令牌和id令牌直接返回给客户端\",{\"1\":{\"889\":1}}],[\"访问令牌验证\",{\"0\":{\"888\":1,\"900\":1,\"914\":1,\"927\":1}}],[\"访问令牌哈希值\",{\"1\":{\"886\":1}}],[\"访问令牌\",{\"0\":{\"926\":1},\"1\":{\"868\":1}}],[\"访问元素\",{\"1\":{\"759\":1}}],[\"访问效率会很差\",{\"1\":{\"373\":1}}],[\"访问和复制不能超过数组定义的长度\",{\"1\":{\"353\":1}}],[\"访问频率高的行字段越少\",{\"1\":{\"246\":1}}],[\"访问频率较低的字段放到另外一个表里去\",{\"1\":{\"246\":1}}],[\"访问频率较高的字段放到一个表里去\",{\"1\":{\"246\":1}}],[\"访问数据优化\",{\"0\":{\"265\":1}}],[\"访问数据\",{\"1\":{\"88\":1}}],[\"访问需求发生变化\",{\"1\":{\"75\":1}}],[\"访问权限\",{\"1\":{\"65\":1}}],[\"缺点是更大的内存和处理开销使它们使用起来要比内置的数字类型慢很多\",{\"1\":{\"626\":1}}],[\"缺点是工程量比较大\",{\"1\":{\"28\":1}}],[\"缺点\",{\"0\":{\"321\":1},\"1\":{\"249\":3,\"254\":2,\"803\":5}}],[\"缺乏灵活性\",{\"1\":{\"75\":1}}],[\"安全的\",{\"1\":{\"849\":1}}],[\"安全的解决方案\",{\"1\":{\"845\":1}}],[\"安全编码\",{\"1\":{\"849\":1}}],[\"安全类型断言\",{\"1\":{\"389\":1}}],[\"安全性\",{\"1\":{\"317\":1}}],[\"安全性强\",{\"1\":{\"164\":1,\"200\":1}}],[\"安全团队是否需要访问他们试图保护的数据\",{\"1\":{\"75\":1}}],[\"安装处理器\",{\"1\":{\"692\":1}}],[\"安装到\",{\"0\":{\"635\":1},\"1\":{\"632\":1}}],[\"安装到你的本地机器上\",{\"1\":{\"469\":1}}],[\"安装包可以使用\",{\"1\":{\"629\":1}}],[\"安装自定义包\",{\"0\":{\"629\":1}}],[\"安装在\",{\"1\":{\"627\":1}}],[\"安装目录下\",{\"1\":{\"497\":1,\"629\":1}}],[\"安装目录\",{\"1\":{\"486\":1,\"979\":1,\"980\":1,\"981\":1}}],[\"安装目录清单\",{\"0\":{\"486\":1}}],[\"安装完成进行环境变量等相关配置即可使用\",{\"1\":{\"485\":1}}],[\"安装与运行环境\",{\"0\":{\"480\":1}}],[\"安装编译后的结果文件到指定目录\",{\"1\":{\"450\":1}}],[\"安装是指生成与代码包相对应的\",{\"1\":{\"449\":1}}],[\"安装\",{\"0\":{\"636\":1},\"1\":{\"6\":1,\"52\":1,\"483\":1,\"485\":1,\"629\":1,\"689\":1,\"782\":1}}],[\"健康保险可移植性和责任法案\",{\"1\":{\"74\":1}}],[\"改善了代码的复用性\",{\"1\":{\"672\":1}}],[\"改善对欧盟\",{\"1\":{\"74\":1}}],[\"改变了以下代码\",{\"1\":{\"709\":1}}],[\"改变栈并返回最顶部的元素\",{\"1\":{\"676\":1}}],[\"改变切片长度的过程称之为切片重组\",{\"1\":{\"592\":1}}],[\"改变外部变量\",{\"0\":{\"566\":1}}],[\"改为\",{\"1\":{\"559\":1,\"689\":1}}],[\"改造成一个很好的\",{\"1\":{\"491\":1}}],[\"改造的\",{\"1\":{\"251\":1}}],[\"改怎么办\",{\"0\":{\"344\":1}}],[\"改动起来会面临一定的困难\",{\"1\":{\"254\":1}}],[\"改等\",{\"1\":{\"70\":1}}],[\"使\",{\"1\":{\"852\":1}}],[\"使数据得以传输\",{\"1\":{\"699\":1}}],[\"使通信不至于迟迟得不到响应\",{\"1\":{\"694\":1}}],[\"使它可以区分\",{\"1\":{\"662\":1}}],[\"使它们更具有一般性\",{\"1\":{\"660\":1}}],[\"使它的参数\",{\"1\":{\"640\":1}}],[\"使其成为不安全的\",{\"1\":{\"857\":1}}],[\"使其长度为\",{\"1\":{\"593\":1}}],[\"使其具有高易用性\",{\"1\":{\"461\":1}}],[\"使人们能够享受软件开发的过程\",{\"1\":{\"467\":1}}],[\"使得代码开发过程中的设计模式更容易实现\",{\"1\":{\"672\":1}}],[\"使得代码更加容易理解\",{\"1\":{\"515\":1}}],[\"使得相同接口的变量在不同的时刻表现出不同的行为\",{\"1\":{\"662\":1}}],[\"使得可以从另外一个或一些类型继承部分或全部实现\",{\"1\":{\"648\":1}}],[\"使得程序的构建过程变得微不足道\",{\"1\":{\"473\":1}}],[\"使得编译这一环节不再成为在软件开发中困扰开发人员的问题\",{\"1\":{\"473\":1}}],[\"使得它们比\",{\"1\":{\"471\":1}}],[\"使得子类具有父类相同的行为\",{\"1\":{\"315\":1}}],[\"使得子类对象\",{\"1\":{\"315\":1}}],[\"使得\",{\"1\":{\"287\":1,\"660\":1}}],[\"使您能够仅根据用户需要一致地授予访问权限\",{\"1\":{\"74\":1}}],[\"使用范围值请求声明\",{\"0\":{\"937\":1}}],[\"使用混合流进行身份验证\",{\"0\":{\"903\":1}}],[\"使用隐式流时\",{\"1\":{\"892\":1}}],[\"使用隐式流进行身份验证\",{\"0\":{\"889\":1}}],[\"使用授权代码流时\",{\"1\":{\"873\":1,\"878\":1}}],[\"使用授权代码流进行身份验证\",{\"0\":{\"870\":1}}],[\"使用oauth\",{\"1\":{\"869\":1,\"872\":1}}],[\"使用openid\",{\"1\":{\"866\":1}}],[\"使用discovery和registration参数提前传递对所使用的键的引用\",{\"1\":{\"869\":1}}],[\"使用此声明的各方需要就所使用的值的含义达成一致\",{\"1\":{\"869\":2}}],[\"使用长期存在的浏览器cookie进行身份验证就是使用\",{\"1\":{\"869\":1}}],[\"使用长度为\",{\"1\":{\"660\":1}}],[\"使用https方案\",{\"1\":{\"868\":1,\"869\":1}}],[\"使用同一种\",{\"1\":{\"860\":1}}],[\"使用对\",{\"1\":{\"849\":1}}],[\"使用json\",{\"1\":{\"845\":1}}],[\"使用~符号\",{\"1\":{\"819\":1}}],[\"使用^符号\",{\"1\":{\"819\":1}}],[\"使用时再加载\",{\"1\":{\"803\":3}}],[\"使用构建时的软件包版本\",{\"1\":{\"782\":1}}],[\"使用小\",{\"1\":{\"782\":1}}],[\"使用选择器\",{\"1\":{\"709\":1}}],[\"使用带缓冲的通道可以轻松实现\",{\"1\":{\"707\":1}}],[\"使用带缓冲的通道\",{\"0\":{\"703\":1}}],[\"使用少量的内存和资源\",{\"1\":{\"694\":1}}],[\"使用多线程的应用难以做到准确\",{\"1\":{\"694\":1}}],[\"使用通用的\",{\"1\":{\"686\":1}}],[\"使用通用的接口排序\",{\"1\":{\"628\":1}}],[\"使用其他函数如何写文件\",{\"1\":{\"680\":1}}],[\"使用逻辑运算符\",{\"1\":{\"680\":1}}],[\"使用反射包来解析这个参数列表\",{\"1\":{\"670\":1}}],[\"使用接口使代码更具有普适性\",{\"1\":{\"662\":1}}],[\"使用常量\",{\"1\":{\"660\":1}}],[\"使用包含一个索引和一个\",{\"1\":{\"660\":1}}],[\"使用自定义包中的结构体\",{\"0\":{\"644\":1}}],[\"使用工厂方法创建结构体实例\",{\"0\":{\"641\":1}}],[\"使用坐标\",{\"1\":{\"640\":1}}],[\"使用点号符可以获取结构体字段的值\",{\"1\":{\"640\":1}}],[\"使用给出的目录结构\",{\"1\":{\"632\":1}}],[\"使用命名的字段来标注\",{\"1\":{\"682\":1}}],[\"使用命名返回值来实现这个程序的第二个版本\",{\"1\":{\"571\":1}}],[\"使用命令安装\",{\"1\":{\"629\":1}}],[\"使用了无限循环\",{\"1\":{\"700\":1}}],[\"使用了第\",{\"1\":{\"656\":1}}],[\"使用了一个结构体\",{\"1\":{\"644\":1}}],[\"使用了一个简单的标记\",{\"1\":{\"473\":1}}],[\"使用了\",{\"1\":{\"629\":1,\"677\":1,\"682\":1}}],[\"使用第\",{\"1\":{\"627\":1}}],[\"使用time\",{\"1\":{\"623\":1}}],[\"使用冒泡排序的方法排序一个包含整数的切片\",{\"1\":{\"602\":1}}],[\"使用交换法\",{\"1\":{\"602\":1}}],[\"使用数组泛型\",{\"1\":{\"758\":1}}],[\"使用数组的切片\",{\"1\":{\"583\":1}}],[\"使用数据库事务\",{\"1\":{\"254\":1}}],[\"使用数据库中的锁机制\",{\"1\":{\"230\":1}}],[\"使用闭包调试\",{\"0\":{\"575\":1}}],[\"使用递归函数从\",{\"1\":{\"571\":1}}],[\"使用空接口\",{\"1\":{\"567\":1}}],[\"使用空结构体\",{\"1\":{\"337\":1}}],[\"使用结构体字面量\",{\"1\":{\"647\":1}}],[\"使用结构\",{\"1\":{\"567\":1}}],[\"使用非命名返回值是很糟的编程习惯\",{\"1\":{\"564\":1}}],[\"使用标签和\",{\"1\":{\"559\":1}}],[\"使用逆向的\",{\"1\":{\"559\":1}}],[\"使用位表达式\",{\"1\":{\"554\":1}}],[\"使用位左移与\",{\"1\":{\"525\":1}}],[\"使用按位补码从\",{\"1\":{\"554\":1}}],[\"使用简短方式\",{\"1\":{\"549\":1}}],[\"使用指针会减少内存占用和提高效率\",{\"1\":{\"547\":1}}],[\"使用指针作为方法的接收者的理由\",{\"1\":{\"382\":1}}],[\"使用分割符号来拼接组成一个字符串\",{\"1\":{\"543\":1}}],[\"使用分析\",{\"1\":{\"264\":1}}],[\"使用字节缓冲\",{\"1\":{\"532\":1}}],[\"使用格式化字符串\",{\"1\":{\"523\":1}}],[\"使用这样的命名能够在阅读代码的获得阅读正常语句一样的良好体验\",{\"1\":{\"521\":1}}],[\"使用这些技术将导致代码更为复杂\",{\"1\":{\"561\":1}}],[\"使用这些占位符可以很好地控制格式化输出的文本\",{\"1\":{\"517\":1}}],[\"使用这些类型的变量直接指向存在内存中的值\",{\"1\":{\"516\":1}}],[\"使用操作符\",{\"1\":{\"518\":1}}],[\"使用大括号\",{\"1\":{\"507\":1}}],[\"使用逗号分割它们\",{\"1\":{\"551\":1}}],[\"使用逗号\",{\"1\":{\"507\":1}}],[\"使用并释放其内存\",{\"1\":{\"501\":1}}],[\"使用关键字\",{\"1\":{\"494\":1}}],[\"使用一个\",{\"1\":{\"680\":1}}],[\"使用一个抽象类型\",{\"1\":{\"662\":1}}],[\"使用一个指针引用一个值被称为间接引用\",{\"1\":{\"547\":1}}],[\"使用一门具有垃圾回收功能的编程语言不代表你可以避免内存分配所带来的问题\",{\"1\":{\"487\":1}}],[\"使用一些简短的别名也能稍微提高一些\",{\"1\":{\"275\":1}}],[\"使用你最喜爱的编辑器来输入以下内容\",{\"1\":{\"483\":1}}],[\"使用面向对象编程技术显得非常臃肿\",{\"1\":{\"475\":1}}],[\"使用者可选择集成\",{\"1\":{\"462\":1}}],[\"使用者也可以扩展自己的消息协议\",{\"1\":{\"462\":1}}],[\"使用者也可以根据需要自行定制扩展\",{\"1\":{\"462\":1}}],[\"使用gorm访问数据库\",{\"1\":{\"456\":1}}],[\"使用情况\",{\"1\":{\"438\":1}}],[\"使用场景\",{\"1\":{\"405\":1}}],[\"使用场景和用途\",{\"0\":{\"394\":1}}],[\"使用类型的方法集和接口所需要的方法集进行匹配\",{\"1\":{\"390\":1}}],[\"使用值的引用来调用方法\",{\"1\":{\"380\":1}}],[\"使用读写锁实现并发安全map\",{\"1\":{\"361\":1}}],[\"使用内置sync\",{\"1\":{\"361\":1}}],[\"使用内部函数提高\",{\"0\":{\"274\":1}}],[\"使用注意的点\",{\"0\":{\"358\":1}}],[\"使用聚集函数进行计算\",{\"1\":{\"305\":1}}],[\"使用高配设备等等\",{\"1\":{\"285\":1}}],[\"使用表或列的别名\",{\"0\":{\"275\":1}}],[\"使用缓存可以避免在数据库中进行查询\",{\"1\":{\"265\":1}}],[\"使用执行计划\",{\"1\":{\"264\":1}}],[\"使用全局唯一\",{\"1\":{\"257\":1}}],[\"使用单独的一个数据库来存储映射关系\",{\"1\":{\"249\":1}}],[\"使用单数表名\",{\"1\":{\"56\":1}}],[\"使用意向锁\",{\"1\":{\"233\":1}}],[\"使用方式\",{\"1\":{\"232\":2,\"691\":1}}],[\"使用方法来实现\",{\"1\":{\"657\":1}}],[\"使用方法\",{\"1\":{\"166\":1,\"202\":1}}],[\"使用索引\",{\"1\":{\"670\":1}}],[\"使用索引扫描来做排序\",{\"0\":{\"225\":1}}],[\"使用索引可以减少访问的行数\",{\"1\":{\"210\":1}}],[\"使用顺序查找\",{\"1\":{\"214\":1}}],[\"使用组合索引时遵循最左前缀集合\",{\"1\":{\"212\":1}}],[\"使用游标的步骤\",{\"1\":{\"168\":1,\"204\":1}}],[\"使用完之后\",{\"1\":{\"166\":1,\"202\":1}}],[\"使用的流由授权请求中包含的response\",{\"1\":{\"869\":1}}],[\"使用的文件权限\",{\"1\":{\"680\":1}}],[\"使用的\",{\"1\":{\"499\":2}}],[\"使用的索引\",{\"1\":{\"264\":1}}],[\"使用的位置在于\",{\"1\":{\"163\":1,\"199\":1}}],[\"使用的是默认主机名\",{\"1\":{\"154\":1,\"190\":1}}],[\"使用存储过程示例\",{\"1\":{\"163\":1,\"199\":1}}],[\"使用存储过程\",{\"0\":{\"163\":1,\"199\":1}}],[\"使用它就像使用函数一样简单\",{\"1\":{\"162\":1,\"198\":1}}],[\"使用以下命令安装\",{\"1\":{\"52\":1}}],[\"使用过\",{\"1\":{\"51\":1}}],[\"使用sudo\",{\"1\":{\"51\":1}}],[\"使用脚本自动安装\",{\"1\":{\"51\":1}}],[\"使用\",{\"0\":{\"478\":1,\"518\":1,\"629\":1,\"696\":1,\"938\":1,\"949\":1,\"952\":1,\"961\":1},\"1\":{\"36\":1,\"136\":1,\"137\":1,\"140\":1,\"144\":1,\"150\":1,\"154\":3,\"170\":1,\"171\":1,\"177\":1,\"183\":1,\"186\":1,\"190\":3,\"230\":1,\"235\":1,\"265\":1,\"268\":1,\"272\":1,\"273\":1,\"459\":1,\"473\":1,\"476\":1,\"481\":1,\"490\":1,\"494\":1,\"495\":1,\"507\":1,\"509\":2,\"513\":2,\"515\":1,\"525\":1,\"527\":1,\"532\":1,\"554\":5,\"557\":1,\"559\":1,\"567\":1,\"568\":3,\"571\":1,\"573\":1,\"596\":1,\"602\":1,\"611\":1,\"623\":1,\"624\":1,\"627\":2,\"631\":1,\"638\":1,\"640\":5,\"649\":2,\"660\":1,\"663\":1,\"678\":1,\"680\":1,\"682\":2,\"694\":3,\"695\":1,\"696\":1,\"697\":1,\"709\":1,\"782\":2,\"855\":2,\"856\":2,\"858\":3,\"859\":2,\"860\":1}}],[\"使用公钥\",{\"1\":{\"26\":1}}],[\"使用viper读取配置文件\",{\"0\":{\"19\":1}}],[\"使用yaml\",{\"0\":{\"16\":1,\"18\":1,\"21\":1}}],[\"使用elasticsearch作为生物信息学研究工具存储和处理遗传数据\",{\"1\":{\"6\":1}}],[\"使用elasticsearch作为地理信息系统\",{\"1\":{\"6\":1}}],[\"使用elasticsearch作为存储引擎自动化业务工作流\",{\"1\":{\"6\":1}}],[\"使用elasticsearch作为矢量数据库来创建\",{\"1\":{\"6\":1}}],[\"使用机器学习实时自动模拟数据的行为\",{\"1\":{\"6\":1}}],[\"既不使用令牌端点也不使用授权码\",{\"1\":{\"868\":1}}],[\"既用于发送也用于接收\",{\"1\":{\"700\":1}}],[\"既每个索引都指向不同的字符\",{\"1\":{\"553\":1}}],[\"既是存储过程的入参\",{\"1\":{\"163\":1,\"199\":1}}],[\"既包含用户\",{\"1\":{\"73\":1}}],[\"既然一个\",{\"1\":{\"607\":1}}],[\"既然\",{\"1\":{\"63\":1}}],[\"记忆口诀\",{\"1\":{\"617\":2}}],[\"记住一条原则\",{\"1\":{\"475\":1}}],[\"记住\",{\"1\":{\"467\":1,\"515\":1}}],[\"记\",{\"1\":{\"287\":1}}],[\"记录运行时间和性能测试可以帮助你找到最小的缓存容量带来最好的性能\",{\"1\":{\"709\":1}}],[\"记录\",{\"1\":{\"639\":1}}],[\"记录程序运行时产生的日志\",{\"1\":{\"623\":1}}],[\"记录定义了接口的包名\",{\"1\":{\"383\":1}}],[\"记录数也是最多\",{\"1\":{\"270\":1}}],[\"记录每个角色拥有哪些权限信息\",{\"1\":{\"72\":1}}],[\"记录每个用户拥有哪些角色信息\",{\"1\":{\"72\":1}}],[\"记录角色信息\",{\"1\":{\"72\":1}}],[\"记录权限信息\",{\"1\":{\"72\":1}}],[\"记录用户基本信息和密码\",{\"1\":{\"72\":1}}],[\"记录登录账号信息\",{\"1\":{\"72\":1}}],[\"记得保存\",{\"1\":{\"6\":1}}],[\"张中间表\",{\"1\":{\"72\":1}}],[\"张实体表和\",{\"1\":{\"72\":1}}],[\"张三\",{\"1\":{\"29\":1}}],[\"能否保证唯一性取决于实施\",{\"1\":{\"852\":1}}],[\"能获取它\",{\"1\":{\"645\":1}}],[\"能转换的原因必然是类型兼容\",{\"1\":{\"390\":1}}],[\"能介绍下\",{\"0\":{\"327\":1}}],[\"能够对最终用户进行身份验证\",{\"1\":{\"868\":1}}],[\"能够对项目或包中的代码建立抽象语法树视图\",{\"1\":{\"490\":1}}],[\"能够返回关于实体的索赔的服务器\",{\"1\":{\"868\":1}}],[\"能够写入任何类型\",{\"1\":{\"682\":1}}],[\"能够知道它每个参数的类型\",{\"1\":{\"670\":1}}],[\"能够知道一个计算执行消耗的时间是非常有意义的\",{\"1\":{\"576\":1}}],[\"能够且只能够访问该包中导出的对象\",{\"1\":{\"506\":1}}],[\"能够使用\",{\"1\":{\"501\":1}}],[\"能够和用户说\",{\"1\":{\"627\":1}}],[\"能够和\",{\"1\":{\"499\":1}}],[\"能够导出不同格式的代码文件\",{\"1\":{\"490\":1}}],[\"能够方便地在不同的\",{\"1\":{\"490\":1}}],[\"能够方便完整地查阅\",{\"1\":{\"490\":1}}],[\"能够方便的存取最近使用过的文件或项目\",{\"1\":{\"490\":1}}],[\"能够通过代码模版来简化编码过程从而提升编码速度\",{\"1\":{\"490\":1}}],[\"能够通过插件架构来轻易扩展和替换某个功能\",{\"1\":{\"490\":1}}],[\"能够在\",{\"1\":{\"490\":1}}],[\"能够跳转到某个函数或类型的定义部分\",{\"1\":{\"490\":1}}],[\"能够匹配括号\",{\"1\":{\"490\":1}}],[\"能够较好地支持\",{\"1\":{\"489\":1}}],[\"能够很轻松地对第三方包进行部署\",{\"1\":{\"473\":1}}],[\"能够以更快的速度开发软件\",{\"1\":{\"467\":1}}],[\"能够为很多不同的机器生成机器码\",{\"1\":{\"447\":1}}],[\"能够解决如何避免传统共享内存实现并发的很多问题而且效率会高于共享内存的方法\",{\"1\":{\"427\":1}}],[\"能够避免cpu资源持续被少数线程占用\",{\"1\":{\"412\":1}}],[\"能够收发元素的大小\",{\"1\":{\"398\":1}}],[\"能够帮我们节省内存空间\",{\"1\":{\"337\":1}}],[\"能够简洁高效地处理高并发问题\",{\"1\":{\"320\":1}}],[\"能够作为入参传入\",{\"1\":{\"316\":1}}],[\"能承受的并发增加了多倍\",{\"1\":{\"248\":1}}],[\"能大大减少数据访问量\",{\"1\":{\"224\":1}}],[\"能在线上运行的表设计\",{\"1\":{\"72\":1}}],[\"能从json\",{\"0\":{\"19\":1}}],[\"来发出令牌请求\",{\"1\":{\"881\":1}}],[\"来自发布时间\",{\"1\":{\"852\":1}}],[\"来自\",{\"1\":{\"852\":3}}],[\"来自单词\",{\"1\":{\"852\":1}}],[\"来自淘宝综合业务平台团队\",{\"1\":{\"258\":1}}],[\"来初始化信号量\",{\"1\":{\"707\":1}}],[\"来停止\",{\"1\":{\"697\":1}}],[\"来停止程序\",{\"1\":{\"662\":1}}],[\"来启动\",{\"1\":{\"694\":1}}],[\"来对比两种处理方式\",{\"1\":{\"694\":1}}],[\"来同步协程\",{\"1\":{\"694\":1}}],[\"来同时完成类型转换和赋值操作\",{\"1\":{\"523\":1}}],[\"来刷新挂起的写操作到文件中\",{\"1\":{\"692\":1}}],[\"来测量\",{\"1\":{\"690\":1}}],[\"来测试\",{\"1\":{\"689\":1}}],[\"来测试你的代码\",{\"1\":{\"682\":1}}],[\"来测试它的实际类型\",{\"1\":{\"663\":1}}],[\"来测试在某个时刻\",{\"1\":{\"662\":1}}],[\"来编译测试程序\",{\"1\":{\"689\":1}}],[\"来编辑文件内容\",{\"1\":{\"483\":1}}],[\"来告诉调用方为何出错\",{\"1\":{\"689\":1}}],[\"来告诉构建工具忽略\",{\"1\":{\"483\":1}}],[\"来保证这一切会在\",{\"1\":{\"692\":1}}],[\"来保护调用者防止从\",{\"1\":{\"689\":1}}],[\"来保存每周\",{\"1\":{\"609\":1}}],[\"来中止运行\",{\"1\":{\"687\":1}}],[\"来接收这个值\",{\"1\":{\"686\":1}}],[\"来访问其实际类型\",{\"1\":{\"684\":1}}],[\"来看这个\",{\"1\":{\"684\":1}}],[\"来看下接口是如何对实现进行抽象的\",{\"1\":{\"686\":1}}],[\"来看下面的打招呼程序\",{\"1\":{\"681\":1}}],[\"来看下面的例子\",{\"1\":{\"670\":1}}],[\"来看下这里都装了些什么\",{\"1\":{\"446\":1}}],[\"来完成\",{\"1\":{\"709\":1}}],[\"来完成相应工作\",{\"1\":{\"672\":1}}],[\"来完成这些工具的安装\",{\"1\":{\"484\":1}}],[\"来推导参数类型\",{\"1\":{\"670\":1}}],[\"来索引\",{\"1\":{\"660\":1}}],[\"来索引结构体的字段\",{\"1\":{\"645\":1}}],[\"来替代\",{\"1\":{\"653\":1}}],[\"来替代异常机制\",{\"1\":{\"477\":1}}],[\"来按照指定的百分比增加薪水\",{\"1\":{\"651\":1}}],[\"来引用结构体的字段\",{\"1\":{\"640\":1}}],[\"来控制的\",{\"1\":{\"636\":1}}],[\"来允许同一时间多个线程对变量进行读操作\",{\"1\":{\"625\":1}}],[\"来设置定时器\",{\"1\":{\"623\":1}}],[\"来构造的\",{\"1\":{\"626\":1}}],[\"来构造\",{\"1\":{\"605\":1}}],[\"来构建基础设施的谷歌来说\",{\"1\":{\"473\":1}}],[\"来排序\",{\"1\":{\"600\":1}}],[\"来获得一个读取器变量\",{\"1\":{\"678\":1}}],[\"来获得字符串中字符的数量\",{\"1\":{\"595\":1}}],[\"来获得每个元素\",{\"1\":{\"595\":1}}],[\"来获取更详细的信息\",{\"1\":{\"600\":1}}],[\"来获取一个字节的切片\",{\"1\":{\"595\":1}}],[\"来获取指针所指向的内容\",{\"1\":{\"547\":1}}],[\"来获取字符串所占的字节长度\",{\"1\":{\"532\":1}}],[\"来获取变量\",{\"1\":{\"516\":1}}],[\"来获取环境变量中的值\",{\"1\":{\"515\":1}}],[\"来获取栈跟踪信息\",{\"1\":{\"494\":1}}],[\"来创建\",{\"1\":{\"580\":1}}],[\"来读取数据\",{\"1\":{\"677\":1}}],[\"来读取\",{\"1\":{\"580\":1}}],[\"来破除这个限制\",{\"1\":{\"561\":1}}],[\"来解决\",{\"1\":{\"561\":1}}],[\"来解决问题\",{\"1\":{\"72\":1,\"625\":1}}],[\"来跳出无限读取循环并关闭相应的客户端链接\",{\"1\":{\"559\":1}}],[\"来格式化输出\",{\"1\":{\"554\":1}}],[\"来格式化你的代码\",{\"1\":{\"496\":1}}],[\"来判断某个\",{\"1\":{\"551\":1}}],[\"来判断值的相反结果\",{\"1\":{\"549\":1}}],[\"来判断\",{\"1\":{\"549\":2}}],[\"来结束某个函数的执行\",{\"1\":{\"548\":1}}],[\"来结尾\",{\"1\":{\"167\":1,\"203\":1}}],[\"来将开头和结尾的\",{\"1\":{\"541\":1}}],[\"来剔除字符串开头和结尾的空白符号\",{\"1\":{\"541\":1}}],[\"来操作\",{\"1\":{\"530\":1}}],[\"来输出\",{\"1\":{\"523\":1}}],[\"来比较浮点数时应当非常小心\",{\"1\":{\"523\":1}}],[\"来表示复数\",{\"1\":{\"524\":1}}],[\"来表示\",{\"1\":{\"523\":3,\"524\":1,\"531\":2}}],[\"来表示你要输出的值为布尔型\",{\"1\":{\"521\":1}}],[\"来表示面向对象\",{\"1\":{\"467\":1}}],[\"来代表条件不符合的语句\",{\"1\":{\"521\":1}}],[\"来代表条件符合的语句\",{\"1\":{\"521\":1}}],[\"来强制实现统一的代码风格\",{\"1\":{\"512\":1}}],[\"来显示包的文档说明\",{\"1\":{\"508\":1}}],[\"来调用\",{\"1\":{\"502\":1,\"670\":1}}],[\"来列出需要使用\",{\"1\":{\"501\":1}}],[\"来释放变量的内存\",{\"1\":{\"501\":1}}],[\"来导入\",{\"1\":{\"501\":1}}],[\"来跟踪代码执行过程\",{\"1\":{\"494\":1}}],[\"来支持代码补全和代码模版\",{\"1\":{\"491\":1}}],[\"来支持并发和并行编程\",{\"1\":{\"467\":1}}],[\"来打印数组\",{\"1\":{\"662\":1}}],[\"来打印\",{\"1\":{\"483\":1}}],[\"来进行安装\",{\"1\":{\"637\":1}}],[\"来进行单纯的构建过程\",{\"1\":{\"483\":1}}],[\"来进行条件判断\",{\"1\":{\"163\":1,\"199\":1}}],[\"来检测\",{\"1\":{\"662\":1,\"709\":1}}],[\"来检测是否相等\",{\"1\":{\"349\":1}}],[\"来检查变量是否实现了相应接口\",{\"1\":{\"672\":1}}],[\"来检查\",{\"1\":{\"600\":1}}],[\"来检查环境变量是否设置正确\",{\"1\":{\"483\":1}}],[\"来组织\",{\"1\":{\"481\":1}}],[\"来放弃类和类型的继承\",{\"1\":{\"477\":1}}],[\"来简化编码过程中的混乱和复杂度\",{\"1\":{\"474\":1}}],[\"来展示它的速度\",{\"1\":{\"469\":1}}],[\"来开发大型的服务端软件时\",{\"1\":{\"467\":1}}],[\"来源于\",{\"1\":{\"440\":1,\"625\":1}}],[\"来运行\",{\"1\":{\"410\":1}}],[\"来执行\",{\"1\":{\"409\":3,\"692\":1}}],[\"来使用\",{\"1\":{\"398\":1,\"508\":1,\"636\":1}}],[\"来指明这些文件都属于\",{\"1\":{\"506\":1}}],[\"来指定的\",{\"1\":{\"392\":1}}],[\"来指代\",{\"1\":{\"60\":1}}],[\"来决定\",{\"1\":{\"382\":1}}],[\"来描述动物进食的行为\",{\"1\":{\"338\":1}}],[\"来服务\",{\"1\":{\"330\":1}}],[\"来实现一个可以上锁的共享缓冲器\",{\"1\":{\"625\":1}}],[\"来实现一个set\",{\"1\":{\"337\":1}}],[\"来实现的一个典型例子如下\",{\"1\":{\"625\":1}}],[\"来实现的\",{\"1\":{\"625\":1}}],[\"来实现定时器\",{\"1\":{\"623\":1}}],[\"来实现对\",{\"1\":{\"600\":1}}],[\"来实现对其标准索引法的操作\",{\"1\":{\"532\":1}}],[\"来实现累加方法\",{\"1\":{\"591\":1}}],[\"来实现相似的功能\",{\"1\":{\"561\":1}}],[\"来实现代码补全功能\",{\"1\":{\"491\":1}}],[\"来实现并发编程\",{\"1\":{\"475\":1}}],[\"来实现各个\",{\"1\":{\"473\":1}}],[\"来实现\",{\"1\":{\"330\":1,\"541\":1,\"570\":1,\"689\":1}}],[\"来处理网络请求和\",{\"1\":{\"330\":1}}],[\"来统计数据行数\",{\"1\":{\"303\":1}}],[\"来分配数据\",{\"1\":{\"258\":1}}],[\"来说该不等式永远成立\",{\"1\":{\"585\":1}}],[\"来说也同样适用\",{\"1\":{\"580\":1}}],[\"来说\",{\"1\":{\"251\":1,\"303\":1}}],[\"来换取系统吞吐量的提升\",{\"1\":{\"242\":1}}],[\"新类型不会拥有原类型所附带的方法\",{\"1\":{\"530\":1}}],[\"新版的\",{\"1\":{\"467\":1}}],[\"新来的\",{\"1\":{\"420\":2}}],[\"新建\",{\"0\":{\"813\":1}}],[\"新建一个中间件非常简单\",{\"1\":{\"455\":1}}],[\"新建一个goroutine协程每秒ping一下服务端口\",{\"1\":{\"12\":1}}],[\"新建的\",{\"1\":{\"409\":1}}],[\"新接口\",{\"1\":{\"390\":1}}],[\"新元素插入过程如下\",{\"1\":{\"375\":1}}],[\"新插入的键值对将存在于新bucket的后面\",{\"1\":{\"372\":1}}],[\"新的输入无法在通道非空的情况下传入\",{\"1\":{\"701\":1}}],[\"新的goruntine进来\",{\"1\":{\"420\":2}}],[\"新的键值对被插入新的bucket中\",{\"1\":{\"372\":1}}],[\"新的bucket长度是原来的2倍\",{\"1\":{\"372\":1}}],[\"新的扩容将扩大大于或者等于原来\",{\"1\":{\"354\":1}}],[\"新的扩容会是原来的\",{\"1\":{\"354\":1}}],[\"新旧对象的内存地址是一样的\",{\"1\":{\"346\":1}}],[\"新创建的账户没有任何权限\",{\"1\":{\"154\":1,\"190\":1}}],[\"新增或编辑时\",{\"1\":{\"72\":1}}],[\"简短形式\",{\"0\":{\"518\":1}}],[\"简洁\",{\"1\":{\"818\":1,\"844\":1}}],[\"简洁语法\",{\"1\":{\"479\":1}}],[\"简洁的依赖关系分析系统从而能够快速编译的编程语言\",{\"1\":{\"473\":1}}],[\"简洁的回答\",{\"1\":{\"353\":1}}],[\"简称类型\",{\"1\":{\"509\":1}}],[\"简称\",{\"1\":{\"310\":1,\"844\":1}}],[\"简言之\",{\"1\":{\"232\":1}}],[\"简写为\",{\"1\":{\"232\":2,\"527\":1}}],[\"简化封装器和接口生成器\",{\"1\":{\"502\":1}}],[\"简化问题\",{\"1\":{\"479\":1}}],[\"简化复杂的\",{\"1\":{\"103\":1}}],[\"简化it管理工作\",{\"1\":{\"74\":1}}],[\"简介\",{\"0\":{\"81\":1,\"515\":1,\"801\":1,\"866\":1}}],[\"简而言之会有以下弊端\",{\"1\":{\"72\":1}}],[\"简单而言\",{\"1\":{\"561\":2}}],[\"简单地讲\",{\"1\":{\"513\":1}}],[\"简单流程图如下\",{\"1\":{\"402\":1,\"403\":1}}],[\"简单的获取内存地址\",{\"1\":{\"588\":1}}],[\"简单的\",{\"1\":{\"561\":1,\"623\":1}}],[\"简单的协程池\",{\"1\":{\"426\":1}}],[\"简单的网络编程模式\",{\"1\":{\"330\":1}}],[\"简单的并发\",{\"1\":{\"320\":1}}],[\"简单的代码\",{\"1\":{\"10\":1}}],[\"简单到你几乎玩不出什么花招\",{\"1\":{\"320\":1}}],[\"简单列举几个存储引擎\",{\"1\":{\"293\":1}}],[\"简单就好\",{\"1\":{\"282\":1}}],[\"简单有效\",{\"1\":{\"254\":1}}],[\"简单介绍一下\",{\"1\":{\"250\":1}}],[\"简单来说\",{\"1\":{\"39\":1,\"52\":1,\"445\":1}}],[\"亿多\",{\"1\":{\"73\":1}}],[\"亿下降至\",{\"1\":{\"73\":1}}],[\"亿\",{\"1\":{\"73\":1}}],[\"亿降低至\",{\"1\":{\"73\":1}}],[\"亿或更少\",{\"1\":{\"72\":1}}],[\"亿变成\",{\"1\":{\"72\":1}}],[\"亿条记录\",{\"1\":{\"72\":1,\"246\":1}}],[\"亿个用户\",{\"1\":{\"72\":1}}],[\"表达程序结构以便表示独立地执行的动作\",{\"1\":{\"695\":1}}],[\"表达式的解析顺序是从左至右\",{\"1\":{\"520\":1}}],[\"表达式是一种特定的类型的值\",{\"1\":{\"520\":1}}],[\"表达式\",{\"1\":{\"84\":1,\"564\":1,\"640\":1}}],[\"表小就用\",{\"1\":{\"306\":2}}],[\"表空间内可以有多个文件\",{\"1\":{\"298\":1}}],[\"表空间是存储我们数据库表的地方\",{\"1\":{\"298\":1}}],[\"表示全局安装\",{\"1\":{\"983\":1}}],[\"表示首选在加拿大使用的法语\",{\"1\":{\"873\":1}}],[\"表示诸如发行者\",{\"1\":{\"869\":1}}],[\"表示终端用户认证不符合iso\",{\"1\":{\"869\":1}}],[\"表示从1970\",{\"1\":{\"869\":3}}],[\"表示形式\",{\"1\":{\"856\":1}}],[\"表示形式的字节数组\",{\"1\":{\"855\":2}}],[\"表示空白字符\",{\"1\":{\"723\":1}}],[\"表示空接口所承载的具体的实体类型\",{\"1\":{\"383\":1}}],[\"表示第\",{\"1\":{\"682\":1}}],[\"表示元素的整型索引\",{\"1\":{\"662\":1}}],[\"表示的温度值\",{\"1\":{\"660\":1}}],[\"表示的向量的长度\",{\"1\":{\"640\":1}}],[\"表示获取从\",{\"1\":{\"596\":1}}],[\"表示参数列表的第一对括号必须紧挨着关键字\",{\"1\":{\"573\":1}}],[\"表示不符合任何已给出条件时\",{\"1\":{\"551\":1}}],[\"表示失败\",{\"1\":{\"550\":1}}],[\"表示成功\",{\"1\":{\"550\":1}}],[\"表示通用协调世界时间\",{\"1\":{\"546\":1}}],[\"表示精度\",{\"1\":{\"545\":1}}],[\"表示格式\",{\"1\":{\"545\":1}}],[\"表示字符串\",{\"1\":{\"536\":2}}],[\"表示字符串字面量\",{\"1\":{\"333\":1}}],[\"表示一个打开文件的描述符\",{\"1\":{\"678\":1}}],[\"表示一个\",{\"1\":{\"531\":1}}],[\"表示一个可独立执行的程序\",{\"1\":{\"506\":1}}],[\"表示资源状态的使用案例\",{\"1\":{\"513\":1}}],[\"表示编译器和链接器的安装位置\",{\"1\":{\"482\":1}}],[\"表示目标机器的操作系统\",{\"1\":{\"482\":1}}],[\"表示目标机器的处理器架构\",{\"1\":{\"482\":1}}],[\"表示协程计数\",{\"1\":{\"423\":1}}],[\"表示当前\",{\"1\":{\"394\":1}}],[\"表示接口所定义的函数列表\",{\"1\":{\"383\":1}}],[\"表示切片容量\",{\"1\":{\"354\":1}}],[\"表示切片长度\",{\"1\":{\"354\":1}}],[\"表示byte类型或rune类型\",{\"1\":{\"333\":1}}],[\"表示\",{\"1\":{\"287\":1,\"394\":1,\"482\":1,\"527\":1,\"545\":2,\"547\":1,\"652\":1,\"697\":1,\"700\":2}}],[\"表示任何字符出现一次\",{\"1\":{\"133\":1}}],[\"表示任何字符出现任意次数\",{\"1\":{\"133\":1}}],[\"表示任意字符出现一次\",{\"1\":{\"133\":1}}],[\"表示任意字符出现任意次数\",{\"1\":{\"133\":1}}],[\"表之间的连接必须写在其他\",{\"1\":{\"271\":1}}],[\"表被引用得最多\",{\"1\":{\"270\":1}}],[\"表级锁\",{\"1\":{\"231\":1,\"233\":1}}],[\"表\",{\"1\":{\"222\":1}}],[\"表中的每条记录都是一个含有输入和期望值的完整测试用例\",{\"1\":{\"689\":1}}],[\"表中的一个记录\",{\"1\":{\"82\":1}}],[\"表中的一个字段\",{\"1\":{\"82\":1}}],[\"表中获取\",{\"1\":{\"390\":1}}],[\"表中保存指向每个数据行的指针\",{\"1\":{\"217\":1}}],[\"表中各行的物理顺序与键值的逻辑\",{\"1\":{\"212\":1}}],[\"表的数据量比较大\",{\"1\":{\"211\":1}}],[\"表经常进行\",{\"1\":{\"211\":1}}],[\"表名\",{\"1\":{\"129\":1}}],[\"表将会有\",{\"1\":{\"72\":1}}],[\"表现为一组声明\",{\"1\":{\"39\":1}}],[\"再没有内容可供处理了\",{\"1\":{\"686\":1}}],[\"再编写一个\",{\"1\":{\"680\":1}}],[\"再定一个\",{\"1\":{\"664\":1}}],[\"再为它定义\",{\"1\":{\"660\":1}}],[\"再对切片排序\",{\"1\":{\"611\":1}}],[\"再写一个\",{\"1\":{\"591\":1}}],[\"再使用\",{\"1\":{\"585\":1}}],[\"再记录计算结束时的结束时间\",{\"1\":{\"576\":1}}],[\"再执行一些收尾的工作\",{\"1\":{\"447\":1}}],[\"再执行数据回收\",{\"1\":{\"429\":1}}],[\"再修改的方式被称之为悲观并发控制\",{\"1\":{\"419\":1}}],[\"再进行读\",{\"0\":{\"399\":1}}],[\"再进行排序的时候\",{\"1\":{\"304\":1}}],[\"再将它们分别传入到函数\",{\"1\":{\"391\":1}}],[\"再指向这块新内存\",{\"1\":{\"390\":2}}],[\"再看一下\",{\"1\":{\"383\":1}}],[\"再来仔细看一下\",{\"1\":{\"383\":1}}],[\"再次变为可用状态\",{\"1\":{\"701\":1}}],[\"再次回到m获取可运行的g\",{\"1\":{\"415\":1}}],[\"再次插入数据时将会触发扩容操作\",{\"1\":{\"372\":1}}],[\"再次读取这个范围的数据\",{\"1\":{\"238\":1}}],[\"再次读取这个数据\",{\"1\":{\"238\":1}}],[\"再实例化一个猫\",{\"1\":{\"338\":1}}],[\"再根据不同的实例实现多态行为\",{\"1\":{\"316\":1}}],[\"再锁定相关的主键索引\",{\"1\":{\"235\":1}}],[\"再获取行级锁\",{\"1\":{\"233\":1}}],[\"再加一张\",{\"1\":{\"72\":1}}],[\"再访问另一个网站就会自动登录\",{\"1\":{\"28\":1}}],[\"其结果是\",{\"1\":{\"860\":1}}],[\"其运行在自己启动的协程中\",{\"1\":{\"708\":1}}],[\"其可以被反序列化为任何的\",{\"1\":{\"684\":1}}],[\"其对数据执行\",{\"1\":{\"682\":1}}],[\"其同样实现了\",{\"1\":{\"682\":1}}],[\"其值为常量\",{\"1\":{\"678\":1}}],[\"其值可以是\",{\"1\":{\"545\":1}}],[\"其值能够唯一标识表中每一行\",{\"1\":{\"82\":1}}],[\"其余单词的首字母大写\",{\"1\":{\"507\":1}}],[\"其余的\",{\"1\":{\"345\":1}}],[\"其依附于著名的\",{\"1\":{\"493\":1}}],[\"其作用域和生命周期不可能仅限于某个函数内部\",{\"1\":{\"442\":1}}],[\"其主要的应用\",{\"1\":{\"394\":1}}],[\"其本质就是一个list\",{\"1\":{\"337\":1}}],[\"其本质上通过配置多数据源\",{\"1\":{\"252\":1}}],[\"其后台通过\",{\"1\":{\"330\":1}}],[\"其次\",{\"1\":{\"515\":1}}],[\"其次return\",{\"1\":{\"325\":1}}],[\"其次go语言出自google公司\",{\"1\":{\"320\":1}}],[\"其唯一的创新之处是\",{\"1\":{\"320\":1}}],[\"其接受\",{\"1\":{\"316\":1}}],[\"其在内部匿名组合了\",{\"1\":{\"315\":1}}],[\"其属性\",{\"1\":{\"314\":1}}],[\"其它所有类型的函数都可以有参数与返回值\",{\"1\":{\"561\":1}}],[\"其它许多语言中也没有发现和\",{\"1\":{\"552\":1}}],[\"其它有关时间操作的文档请参阅\",{\"1\":{\"546\":1}}],[\"其它有关字符串操作的文档请参阅\",{\"1\":{\"543\":1}}],[\"其它包括\",{\"1\":{\"532\":1}}],[\"其它字符根据需要占用\",{\"1\":{\"532\":1}}],[\"其它像\",{\"1\":{\"527\":1}}],[\"其它工具\",{\"0\":{\"498\":1}}],[\"其它的致命性函数都会在写完日志信息后调用\",{\"1\":{\"689\":1}}],[\"其它的引用类型还包括\",{\"1\":{\"516\":1}}],[\"其它的环境变量安装包均会进行自动设置\",{\"1\":{\"485\":1}}],[\"其它的常规项目也只需要半秒钟的时间来完成编译工作\",{\"1\":{\"473\":1}}],[\"其它编程语言对\",{\"1\":{\"471\":1}}],[\"其它都是大对象\",{\"1\":{\"443\":1}}],[\"其它\",{\"1\":{\"417\":1}}],[\"其它m\",{\"1\":{\"330\":1}}],[\"其它事务就不能在\",{\"1\":{\"235\":1}}],[\"其它每个结点至少有\",{\"1\":{\"214\":1}}],[\"其内部的关键字\",{\"1\":{\"214\":1}}],[\"其他令牌类型的使用超出了本规范的范围\",{\"1\":{\"883\":1}}],[\"其他参数不应返回\",{\"1\":{\"878\":1}}],[\"其他参数可能被发送\",{\"1\":{\"873\":1}}],[\"其他所有的值都在oauth\",{\"1\":{\"869\":1}}],[\"其他则从令牌端点返回\",{\"1\":{\"868\":1}}],[\"其他由用户定义\",{\"1\":{\"845\":1}}],[\"其他协程会继续在其他线程上工作\",{\"1\":{\"694\":1}}],[\"其他类似函数\",{\"1\":{\"678\":1}}],[\"其他函数\",{\"1\":{\"676\":1}}],[\"其他函数按照一定逻辑顺序进行编写\",{\"1\":{\"561\":1}}],[\"其他线程才能访问它\",{\"1\":{\"625\":1}}],[\"其他元素都被设置为空的字符串\",{\"1\":{\"581\":1}}],[\"其他的简短形式为\",{\"1\":{\"518\":1}}],[\"其他情况下都是分配到堆上\",{\"1\":{\"445\":1}}],[\"其他事务就不能做任何操作\",{\"1\":{\"232\":1}}],[\"其他用户才能获得读锁\",{\"1\":{\"231\":1}}],[\"其他\",{\"1\":{\"167\":1,\"203\":1}}],[\"其支持的权限控制也有所不同\",{\"1\":{\"90\":1}}],[\"其实参可以是任何实现了该接口的类型的变量\",{\"1\":{\"671\":1}}],[\"其实比较多门语言之间的性能是一种非常猥琐的行为\",{\"1\":{\"499\":1}}],[\"其实是编译器在背后做了一些工作\",{\"1\":{\"380\":1}}],[\"其实是这个问题的变种\",{\"1\":{\"376\":1}}],[\"其实编译器在编译期间会动态创建一个新的同名数据结构\",{\"1\":{\"365\":1}}],[\"其实选择与否还是要看表的大小\",{\"1\":{\"306\":1}}],[\"其实\",{\"1\":{\"72\":1,\"362\":1,\"531\":1}}],[\"其中使用的哈希算法是id令牌的jose报头的alg头参数中使用的哈希算法\",{\"1\":{\"886\":1}}],[\"其中使用的加密散列函数是\",{\"1\":{\"860\":1}}],[\"其中使用了\",{\"1\":{\"670\":1}}],[\"其中第一个返回值\",{\"1\":{\"609\":1}}],[\"其中变量\",{\"1\":{\"600\":1}}],[\"其中一些应用包括\",{\"1\":{\"846\":1}}],[\"其中一些声明及其含义是jwt规范的一部分\",{\"1\":{\"845\":1}}],[\"其中一些是以插件的形式利用本身是作为开发\",{\"1\":{\"491\":1}}],[\"其中一个函数的返回值在函数调用时就已经被赋予了一个初始零值\",{\"1\":{\"564\":1}}],[\"其中的相关的转义字符将被替换\",{\"1\":{\"532\":1}}],[\"其中开头的数字\",{\"1\":{\"523\":1}}],[\"其中位的运算采用补码\",{\"1\":{\"523\":1}}],[\"其中任意一边的值为\",{\"1\":{\"521\":1}}],[\"其中应该提供一些相关信息并对整体功能做简要的介绍\",{\"1\":{\"508\":1}}],[\"其中包括一个id令牌和一个访问令牌\",{\"1\":{\"883\":1}}],[\"其中包括\",{\"1\":{\"528\":1}}],[\"其中包括国际惯例\",{\"1\":{\"469\":1}}],[\"其中包含对自身的声明\",{\"1\":{\"850\":1}}],[\"其中包含了基本类型的名称和一些基本的内置函数\",{\"1\":{\"504\":1}}],[\"其中包含来自\",{\"1\":{\"144\":1,\"177\":1}}],[\"其中比较重要的有编译器\",{\"1\":{\"446\":1}}],[\"其中含\",{\"1\":{\"222\":1}}],[\"其中用户需要对数据集中的任意行进行浏览和修改\",{\"1\":{\"168\":1,\"204\":1}}],[\"其中禁用状态\",{\"1\":{\"72\":1}}],[\"其中以美国george\",{\"1\":{\"64\":1}}],[\"其中\",{\"1\":{\"63\":1,\"147\":1,\"180\":1,\"340\":1,\"462\":1,\"481\":1,\"507\":1,\"517\":1,\"524\":1,\"531\":2,\"545\":1,\"561\":1,\"587\":1,\"592\":2,\"593\":1,\"626\":1}}],[\"菜单和按钮等\",{\"1\":{\"72\":1}}],[\"头\",{\"1\":{\"849\":1}}],[\"头文件\",{\"1\":{\"473\":1}}],[\"头像图片地址\",{\"1\":{\"72\":1}}],[\"头部\",{\"0\":{\"34\":1},\"1\":{\"33\":1}}],[\"逻辑运算符\",{\"0\":{\"526\":1}}],[\"逻辑值可以被用于条件结构中的条件语句\",{\"1\":{\"521\":1}}],[\"逻辑操作符\",{\"0\":{\"132\":1}}],[\"逻辑删除\",{\"1\":{\"72\":6,\"73\":3}}],[\"逻辑很简单\",{\"1\":{\"10\":1}}],[\"zzz\",{\"1\":{\"689\":1}}],[\"zzzzz\",{\"1\":{\"33\":1}}],[\"zlib\",{\"1\":{\"679\":1}}],[\"zip\",{\"1\":{\"614\":1}}],[\"zixun\",{\"1\":{\"339\":1}}],[\"z\",{\"1\":{\"553\":1,\"643\":3,\"653\":3,\"686\":3}}],[\"zb\",{\"1\":{\"513\":1,\"525\":1}}],[\"zxvf\",{\"1\":{\"483\":1}}],[\"zero\",{\"0\":{\"459\":1},\"1\":{\"459\":4}}],[\"zerofill\",{\"1\":{\"72\":6,\"73\":3}}],[\"zd24cb3z2bco5304\",{\"1\":{\"458\":1}}],[\"zkq\",{\"1\":{\"325\":1}}],[\"zh\",{\"1\":{\"454\":1,\"460\":1,\"461\":1,\"462\":1,\"469\":1}}],[\"zhihu\",{\"1\":{\"318\":2,\"338\":1,\"406\":1}}],[\"zhuanlan\",{\"1\":{\"318\":2,\"338\":1,\"406\":1}}],[\"利用多返回值的特性\",{\"1\":{\"545\":1}}],[\"利用括号同样可以升级某个表达式的运算优先级\",{\"1\":{\"521\":1}}],[\"利用这个性质\",{\"1\":{\"521\":1}}],[\"利用并行\",{\"1\":{\"411\":1}}],[\"利用rbac模型进行权限体系的设计\",{\"0\":{\"71\":1}}],[\"利用传递性\",{\"1\":{\"69\":1}}],[\"自发id令牌验证\",{\"0\":{\"964\":1}}],[\"自发openid提供者响应\",{\"0\":{\"963\":1}}],[\"自发openid提供者请求\",{\"0\":{\"962\":1}}],[\"自发openid提供者注册\",{\"0\":{\"960\":1}}],[\"自发openid提供者发现\",{\"0\":{\"959\":1}}],[\"自发openid提供者\",{\"1\":{\"868\":1}}],[\"自愿要求\",{\"1\":{\"868\":1}}],[\"自托管的openid提供者\",{\"1\":{\"868\":1}}],[\"自纪元起的秒数\",{\"1\":{\"852\":2}}],[\"自己的以二进制形式序列化和反序列化程序数据的格式\",{\"1\":{\"686\":1}}],[\"自己运维一套中间件\",{\"1\":{\"252\":1}}],[\"自定义包的目录结构\",{\"0\":{\"630\":1,\"631\":1}}],[\"自定义包和可见性\",{\"0\":{\"627\":1}}],[\"自定义的包和标准库以外的包\",{\"1\":{\"627\":1}}],[\"自定义的\",{\"1\":{\"462\":1}}],[\"自带的工具集主要使用脚本和\",{\"1\":{\"498\":1}}],[\"自带的更加方便的工具来构建应用程序\",{\"1\":{\"495\":1}}],[\"自该开源项目发布以来\",{\"1\":{\"469\":1}}],[\"自\",{\"1\":{\"469\":1}}],[\"自动反向引用\",{\"1\":{\"547\":1}}],[\"自动补全和运行调试都有极佳的支持\",{\"1\":{\"492\":1}}],[\"自动校验客户端请求参数合法性\",{\"1\":{\"459\":1}}],[\"自动加的\",{\"1\":{\"233\":1}}],[\"自适应降载等微服务治理能力\",{\"1\":{\"459\":1}}],[\"自适应熔断\",{\"1\":{\"459\":1}}],[\"自行百度一下\",{\"1\":{\"431\":1}}],[\"自行解释角色属性\",{\"1\":{\"70\":1}}],[\"自旋的条件如下\",{\"1\":{\"421\":1}}],[\"自旋锁是指当一个线程在获取锁的时候\",{\"1\":{\"421\":1}}],[\"自旋\",{\"1\":{\"420\":1}}],[\"自由组合\",{\"1\":{\"320\":1}}],[\"自由高效\",{\"1\":{\"320\":1}}],[\"自然会用\",{\"1\":{\"508\":1}}],[\"自然而然地就有人会问\",{\"1\":{\"488\":1}}],[\"自然有它的战略考虑\",{\"1\":{\"320\":1}}],[\"自然连接使用\",{\"1\":{\"139\":1,\"173\":1}}],[\"自然连接\",{\"0\":{\"139\":1,\"173\":1}}],[\"自然连接是把同名列通过\",{\"1\":{\"138\":1,\"172\":1}}],[\"自连接可以看成内连接的一种\",{\"1\":{\"138\":1,\"172\":1}}],[\"自连接\",{\"0\":{\"138\":1,\"172\":1}}],[\"自增id\",{\"1\":{\"112\":1}}],[\"自主\",{\"1\":{\"61\":1}}],[\"自主访问控制\",{\"1\":{\"60\":1,\"61\":1}}],[\"查找\",{\"1\":{\"624\":1}}],[\"查找该key是否已经存在\",{\"1\":{\"375\":1}}],[\"查找过程如下\",{\"1\":{\"374\":1}}],[\"查找过程\",{\"0\":{\"374\":1}}],[\"查找过程类似\",{\"1\":{\"364\":1}}],[\"查找过程失败\",{\"1\":{\"214\":1}}],[\"查找的流程是\",{\"1\":{\"214\":1}}],[\"查询员工的编号\",{\"1\":{\"270\":1}}],[\"查询本身效率也可能会有所提升\",{\"1\":{\"268\":1}}],[\"查询类型\",{\"1\":{\"264\":1}}],[\"查询效率\",{\"1\":{\"264\":1}}],[\"查询效率也越高\",{\"1\":{\"221\":1}}],[\"查询策略等都可能会影响到\",{\"1\":{\"263\":1}}],[\"查询条件\",{\"1\":{\"226\":1,\"227\":1}}],[\"查询不同的值\",{\"0\":{\"126\":1}}],[\"查询所有列\",{\"0\":{\"125\":1}}],[\"查询多列\",{\"0\":{\"124\":1}}],[\"查询单列\",{\"0\":{\"123\":1}}],[\"查询数据\",{\"0\":{\"122\":1}}],[\"查询\",{\"1\":{\"84\":1,\"128\":1}}],[\"查\",{\"1\":{\"70\":1}}],[\"查看源\",{\"1\":{\"984\":1}}],[\"查看全局安装模块目录下是否有vue\",{\"1\":{\"983\":1}}],[\"查看分支\",{\"0\":{\"823\":1}}],[\"查看历史记录操作\",{\"0\":{\"818\":1}}],[\"查看工作区\",{\"0\":{\"812\":1}}],[\"查看\",{\"1\":{\"614\":1,\"638\":1}}],[\"查看触发器示例\",{\"1\":{\"167\":1,\"203\":1}}],[\"查看权限\",{\"0\":{\"158\":1,\"194\":1}}],[\"查看表\",{\"1\":{\"90\":1}}],[\"查看mysql运行状态\",{\"1\":{\"52\":1}}],[\"查看日志\",{\"1\":{\"51\":1}}],[\"查看容器是否正常运行\",{\"1\":{\"6\":2}}],[\"删除操作尚未提交到本地库\",{\"1\":{\"821\":1}}],[\"删除操作已经提交到本地库\",{\"1\":{\"821\":1}}],[\"删除前\",{\"1\":{\"821\":1}}],[\"删除文件并找回\",{\"0\":{\"821\":1}}],[\"删除位于索引\",{\"1\":{\"601\":1}}],[\"删除写屏障会造成一个对象即使被删除了最后一个指向它的指针也依旧可以活过这一轮\",{\"1\":{\"429\":1}}],[\"删除屏障\",{\"1\":{\"429\":1}}],[\"删除oldbuckets\",{\"1\":{\"372\":1}}],[\"删除一个信息\",{\"1\":{\"288\":1}}],[\"删除异常\",{\"1\":{\"288\":1}}],[\"删除触发器示例\",{\"1\":{\"167\":1,\"203\":1}}],[\"删除权限\",{\"0\":{\"160\":1,\"196\":1}}],[\"删除账户\",{\"0\":{\"157\":1,\"193\":1}}],[\"删除某个保存点\",{\"1\":{\"151\":1,\"187\":1}}],[\"删除表中的指定数据\",{\"0\":{\"120\":1}}],[\"删除主键\",{\"0\":{\"111\":1}}],[\"删除索引\",{\"0\":{\"109\":1}}],[\"删除视图\",{\"0\":{\"105\":1}}],[\"删除列\",{\"0\":{\"101\":1}}],[\"删除数据\",{\"0\":{\"119\":1}}],[\"删除数据表\",{\"0\":{\"97\":1}}],[\"删除数据库\",{\"0\":{\"94\":1}}],[\"删除\",{\"1\":{\"75\":1,\"827\":1}}],[\"删\",{\"1\":{\"70\":1}}],[\"增长到容量上限的时候\",{\"1\":{\"606\":1}}],[\"增量扩容\",{\"0\":{\"372\":1}}],[\"增加\",{\"1\":{\"696\":2}}],[\"增加前缀\",{\"1\":{\"523\":1}}],[\"增加关联查询\",{\"1\":{\"283\":1}}],[\"增加冗余\",{\"1\":{\"261\":1}}],[\"增加了顺序访问指针\",{\"1\":{\"215\":1}}],[\"增加数据库的压力\",{\"1\":{\"164\":1,\"200\":1}}],[\"增加一个时间\",{\"1\":{\"148\":1,\"181\":1}}],[\"增加一个日期\",{\"1\":{\"148\":1,\"181\":1}}],[\"增删改查\",{\"0\":{\"113\":1},\"1\":{\"113\":1}}],[\"增\",{\"1\":{\"70\":1}}],[\"项目级别优先于系统级别\",{\"1\":{\"811\":1}}],[\"项目级别\",{\"1\":{\"811\":1}}],[\"项目页面\",{\"1\":{\"638\":1}}],[\"项目都需要一个对包进行描述的\",{\"1\":{\"635\":1}}],[\"项目都要通过包名来使用\",{\"1\":{\"627\":1}}],[\"项目管理和程序调试功能\",{\"1\":{\"493\":1}}],[\"项目的概念来对项目文件进行浏览和管理\",{\"1\":{\"492\":1}}],[\"项目的概念来浏览和管理项目中的文件\",{\"1\":{\"490\":1}}],[\"项目的例子\",{\"1\":{\"450\":1}}],[\"项目时\",{\"1\":{\"483\":1,\"496\":1,\"637\":1}}],[\"项目也没那么多\",{\"1\":{\"252\":1}}],[\"项目\",{\"1\":{\"70\":1,\"469\":1,\"481\":1,\"490\":1}}],[\"先前由授权服务器发出的id令牌被作为终端用户当前或过去与客户端经过身份验证的会话的提示传递\",{\"1\":{\"873\":1}}],[\"先前在\",{\"1\":{\"481\":1}}],[\"先执行\",{\"1\":{\"689\":1}}],[\"先执行一些初始化的工作\",{\"1\":{\"447\":1}}],[\"先打印所有的饮料\",{\"1\":{\"612\":1}}],[\"先启动\",{\"1\":{\"429\":1}}],[\"先说结论\",{\"1\":{\"381\":1}}],[\"先扩容\",{\"1\":{\"354\":1}}],[\"先修改\",{\"1\":{\"238\":1}}],[\"先决条件约束\",{\"1\":{\"68\":1}}],[\"先停止服务\",{\"1\":{\"52\":1}}],[\"同步代码块\",{\"1\":{\"803\":1}}],[\"同步方法\",{\"1\":{\"803\":1}}],[\"同步\",{\"1\":{\"703\":1}}],[\"同步通道\",{\"0\":{\"703\":1}}],[\"同步的\",{\"1\":{\"699\":1}}],[\"同步他们的工作\",{\"1\":{\"699\":1}}],[\"同步与异步\",{\"1\":{\"405\":1}}],[\"同理的方法还有\",{\"1\":{\"622\":1}}],[\"同一时间只有一个协程会处在运行状态\",{\"1\":{\"695\":1}}],[\"同一种类型在不同的实例上似乎表现出不同的行为\",{\"1\":{\"662\":1}}],[\"同一个操作符\",{\"1\":{\"700\":1}}],[\"同一个任务\",{\"1\":{\"561\":1}}],[\"同一个源文件中的\",{\"1\":{\"519\":1}}],[\"同一个引用类型的指针指向的多个字可以是在连续的内存地址中\",{\"1\":{\"516\":1}}],[\"同一类型的多个变量可以声明在同一行\",{\"1\":{\"518\":1}}],[\"同一用户不能分配到一组互斥角色集合中的多个角色\",{\"1\":{\"68\":1}}],[\"同样有一个报告内存分配计数的有趣工具\",{\"1\":{\"692\":1}}],[\"同样有个\",{\"1\":{\"629\":1}}],[\"同样也适用\",{\"1\":{\"636\":1}}],[\"同样也适用你的普通用户\",{\"1\":{\"631\":1}}],[\"同样可以使用\",{\"1\":{\"629\":1}}],[\"同样可以忽略\",{\"1\":{\"581\":1}}],[\"同样创建\",{\"1\":{\"627\":1}}],[\"同样复制\",{\"1\":{\"627\":1}}],[\"同样的适用于\",{\"1\":{\"668\":1}}],[\"同样的原理\",{\"1\":{\"662\":1}}],[\"同样的功能已被包含在\",{\"1\":{\"630\":1}}],[\"同样的\",{\"1\":{\"553\":1,\"595\":1,\"596\":1,\"640\":1}}],[\"同样的写法也可用于\",{\"1\":{\"527\":1}}],[\"同样返回\",{\"1\":{\"542\":1}}],[\"同样支持\",{\"1\":{\"531\":1}}],[\"同样地结构体也是一种数据类型\",{\"1\":{\"648\":1}}],[\"同样地可以定义一个双向链表\",{\"1\":{\"640\":1}}],[\"同样地\",{\"1\":{\"523\":1,\"640\":1,\"682\":1}}],[\"同样会得到编译错误\",{\"1\":{\"518\":1}}],[\"同样\",{\"1\":{\"405\":1,\"501\":1,\"668\":1,\"866\":1}}],[\"同名列可以有多个\",{\"1\":{\"138\":1,\"172\":1}}],[\"同时可以确保类型安全\",{\"1\":{\"684\":1}}],[\"同时需要注意其中非法赋值或转换引起的编译错误\",{\"1\":{\"640\":1}}],[\"同时需要接口的类型和实体的类型\",{\"1\":{\"390\":1}}],[\"同时创建好相关数组\",{\"1\":{\"587\":1}}],[\"同时更加容易读懂\",{\"1\":{\"564\":1}}],[\"同时还将介绍\",{\"1\":{\"844\":1}}],[\"同时还包括了对源代码的抽象语法树视图和一些内置工具\",{\"1\":{\"491\":1}}],[\"同时还要拥有构建系统的概念\",{\"1\":{\"490\":1}}],[\"同时适用\",{\"1\":{\"487\":1}}],[\"同时应用程序的体积始终在不断地扩大\",{\"1\":{\"472\":1}}],[\"同时我们也会发现\",{\"1\":{\"467\":1}}],[\"同时追求最大程度的自动化\",{\"1\":{\"467\":1}}],[\"同时编程语言的设计思想也已经非常陈旧\",{\"1\":{\"467\":1}}],[\"同时得益于框架的分层设计\",{\"1\":{\"461\":1}}],[\"同时也去掉了填充\",{\"1\":{\"849\":1}}],[\"同时也使你的代码更加简洁\",{\"1\":{\"548\":1}}],[\"同时也使得软件开发过程中的代码测试环节更加紧凑\",{\"1\":{\"473\":1}}],[\"同时也不用像其它语言那样需要对使用\",{\"1\":{\"532\":1}}],[\"同时也会帮助初学者逃离一些语言的陷阱\",{\"1\":{\"467\":1}}],[\"同时也会讨论一些类似在应用\",{\"1\":{\"467\":1}}],[\"同时也会减少gc的压力\",{\"1\":{\"445\":1}}],[\"同时也支持以插件的方式为\",{\"1\":{\"461\":1}}],[\"同时也减少了用户注册时的需批量写入数量\",{\"1\":{\"73\":1}}],[\"同时释放\",{\"1\":{\"346\":1}}],[\"同时对扩容规模和分表数量都有限制\",{\"1\":{\"258\":1}}],[\"同时\",{\"1\":{\"226\":1,\"315\":1,\"467\":1,\"471\":1,\"492\":1,\"518\":1,\"527\":1,\"532\":1,\"561\":1}}],[\"同时又不能太长\",{\"1\":{\"221\":1}}],[\"同时在\",{\"1\":{\"217\":1}}],[\"同时权限的信息也会分配至前端页面来控制\",{\"1\":{\"72\":1}}],[\"同能进行自主授权和权限专营\",{\"1\":{\"64\":1}}],[\"互通\",{\"1\":{\"462\":2}}],[\"互斥从而未定义排序\",{\"1\":{\"694\":1}}],[\"互斥锁未释放或者造成死锁会造成内存泄漏\",{\"1\":{\"438\":1}}],[\"互斥锁是一种数据结构\",{\"1\":{\"418\":1}}],[\"互斥锁\",{\"1\":{\"398\":1,\"405\":1,\"427\":1}}],[\"互斥量或通道操作调用导致\",{\"1\":{\"330\":1}}],[\"互斥角色是指权限互相制约的两个角色\",{\"1\":{\"68\":1}}],[\"互斥角色\",{\"1\":{\"68\":1}}],[\"互联网服务离不开用户认证\",{\"1\":{\"28\":1}}],[\"引号不能作为值的一部分使用\",{\"1\":{\"867\":1}}],[\"引导你\",{\"1\":{\"635\":1}}],[\"引发构建错误\",{\"1\":{\"513\":1}}],[\"引用包含请求对象的资源的url\",{\"1\":{\"868\":1}}],[\"引用类型\",{\"1\":{\"605\":1,\"663\":1}}],[\"引用\",{\"1\":{\"506\":1,\"692\":1}}],[\"引用顺序\",{\"1\":{\"456\":1}}],[\"引用拷贝\",{\"0\":{\"345\":1},\"1\":{\"345\":1,\"346\":1}}],[\"引起各界很大的反响\",{\"1\":{\"469\":1}}],[\"引起\",{\"1\":{\"400\":1}}],[\"引申1\",{\"1\":{\"384\":1}}],[\"引入包时\",{\"1\":{\"340\":1}}],[\"引入了角色间的继承关系\",{\"1\":{\"67\":1}}],[\"引擎中\",{\"1\":{\"303\":1}}],[\"引擎\",{\"1\":{\"224\":1,\"261\":1}}],[\"引擎的\",{\"1\":{\"51\":1}}],[\"引擎通讯\",{\"1\":{\"51\":1}}],[\"会检查所有的协程\",{\"1\":{\"700\":1}}],[\"会如何\",{\"1\":{\"700\":1}}],[\"会根据操作对象弄明白该干什么\",{\"1\":{\"700\":1}}],[\"会根据其使用环境而推断出它所需要具备的类型\",{\"1\":{\"513\":1}}],[\"会提前结束\",{\"1\":{\"697\":1}}],[\"会提示编译错误\",{\"1\":{\"671\":1}}],[\"会尽可能有等同于核心数的线程在并行运行\",{\"1\":{\"696\":1}}],[\"会达到最好的性能\",{\"1\":{\"696\":1}}],[\"会带来性能提升\",{\"1\":{\"696\":1}}],[\"会有一个线程池管理许多的线程\",{\"1\":{\"696\":1}}],[\"会有各种各样的登录方式\",{\"1\":{\"72\":1}}],[\"会为每一个协程创建操作系统线程\",{\"1\":{\"695\":1}}],[\"会为每个文件生成一系列的网页\",{\"1\":{\"628\":1}}],[\"会为\",{\"1\":{\"692\":1}}],[\"会生成一个单独的包含测试代码的\",{\"1\":{\"689\":1}}],[\"会运行所有的基准测试函数\",{\"1\":{\"689\":1}}],[\"会编译所有的程序\",{\"1\":{\"689\":1}}],[\"会导致栈被展开直到\",{\"1\":{\"689\":1}}],[\"会导致编译器错误\",{\"1\":{\"649\":1}}],[\"会导致编译错误\",{\"1\":{\"585\":1,\"662\":1}}],[\"会以运行时错误结束\",{\"1\":{\"671\":1}}],[\"会得到同样的结果\",{\"1\":{\"681\":1}}],[\"会得到一个编译错误\",{\"1\":{\"671\":1}}],[\"会得到一个错误\",{\"1\":{\"670\":1}}],[\"会得到错误\",{\"1\":{\"598\":1}}],[\"会是\",{\"1\":{\"662\":1}}],[\"会是一个不错的选择\",{\"1\":{\"461\":1,\"462\":1}}],[\"会处理这些事情\",{\"1\":{\"661\":1}}],[\"会给出错误提示\",{\"1\":{\"689\":1}}],[\"会给出实例的完整输出\",{\"1\":{\"660\":1}}],[\"会给出类型的完全规格\",{\"1\":{\"660\":1}}],[\"会给出索引超限的提示信息\",{\"1\":{\"580\":1}}],[\"会打印出来\",{\"1\":{\"688\":1}}],[\"会打印\",{\"1\":{\"655\":1}}],[\"会返回\",{\"1\":{\"608\":1,\"662\":1,\"686\":1,\"689\":1}}],[\"会返回一个无穷尽的结果\",{\"1\":{\"527\":1}}],[\"会分配新的切片来保证已有切片元素和新增元素的存储\",{\"1\":{\"593\":1}}],[\"会分别得到\",{\"1\":{\"553\":1}}],[\"会使程序变得更通用\",{\"1\":{\"662\":1}}],[\"会使代码更清晰\",{\"1\":{\"564\":1}}],[\"会使用\",{\"1\":{\"303\":1}}],[\"会引发一个编译错误\",{\"1\":{\"564\":1,\"643\":1}}],[\"会很快导致意大利面条式的代码\",{\"1\":{\"559\":1}}],[\"会直接变成下一个循环的值\",{\"1\":{\"559\":1}}],[\"会将后续代码自动移至下一行\",{\"1\":{\"559\":1}}],[\"会发生什么\",{\"1\":{\"553\":1}}],[\"会发生精度丢失\",{\"1\":{\"511\":1}}],[\"会执行且仅会执行一次初始化语句\",{\"1\":{\"553\":1}}],[\"会输出用于表示该字符的整数\",{\"1\":{\"531\":1}}],[\"会简单地将超出位数抛弃\",{\"1\":{\"527\":1}}],[\"会移除错误\",{\"1\":{\"518\":1}}],[\"会自动调用\",{\"1\":{\"688\":1}}],[\"会自动解引用\",{\"1\":{\"651\":1,\"653\":1}}],[\"会自动做这样的转换\",{\"1\":{\"640\":1}}],[\"会自动使用格式化标识符\",{\"1\":{\"517\":1}}],[\"会自动优化为\",{\"1\":{\"227\":1}}],[\"会自动优化这些条件的顺序\",{\"1\":{\"227\":1}}],[\"会收集这些注释并产生一个技术文档\",{\"1\":{\"508\":1}}],[\"会替代\",{\"1\":{\"501\":1}}],[\"会显示有关\",{\"1\":{\"497\":1}}],[\"会显示使用\",{\"1\":{\"497\":1}}],[\"会格式化并重写\",{\"1\":{\"496\":1}}],[\"会格式化并重写所有\",{\"1\":{\"496\":1}}],[\"会格式化该源文件的代码然后将格式化后的代码覆盖原始内容\",{\"1\":{\"496\":1}}],[\"会产生一次数组拷贝\",{\"1\":{\"580\":1}}],[\"会产生一些问题\",{\"1\":{\"450\":1}}],[\"会产生\",{\"1\":{\"502\":1}}],[\"会产生这样一个错误\",{\"1\":{\"483\":1}}],[\"会产生很多异常\",{\"1\":{\"288\":1}}],[\"会安装编译目标所依赖的包\",{\"1\":{\"449\":1}}],[\"会减轻分配堆内存的开销\",{\"1\":{\"445\":1}}],[\"会消耗大量内存\",{\"1\":{\"438\":1}}],[\"会调用\",{\"1\":{\"431\":2}}],[\"会让当前的\",{\"1\":{\"421\":1}}],[\"会被自动转换为\",{\"1\":{\"653\":1}}],[\"会被复制\",{\"1\":{\"563\":1}}],[\"会被原样输出\",{\"1\":{\"532\":1}}],[\"会被时钟中断给打断\",{\"1\":{\"412\":1}}],[\"会被顺序地考虑\",{\"1\":{\"389\":1}}],[\"会不断增加\",{\"1\":{\"410\":1}}],[\"会优先从全局队列里进行窃取\",{\"1\":{\"409\":1}}],[\"会创建新的m\",{\"1\":{\"409\":1}}],[\"会设置m的最大数量\",{\"1\":{\"409\":1}}],[\"会尝试获取一个空闲的\",{\"1\":{\"409\":1}}],[\"会把这个线程\",{\"1\":{\"409\":1}}],[\"会从p的本地队列获取g\",{\"1\":{\"415\":1}}],[\"会从\",{\"1\":{\"409\":1}}],[\"会对方法集的函数按照函数名的字典序进行排序\",{\"1\":{\"390\":1}}],[\"会隐含地也实现了接收者是指针类型的方法\",{\"1\":{\"381\":1}}],[\"会隐式定义一个主键来作为聚簇索引\",{\"1\":{\"223\":1}}],[\"会在使用\",{\"1\":{\"556\":1}}],[\"会在第\",{\"1\":{\"532\":1}}],[\"会在相对目录中查找\",{\"1\":{\"506\":1}}],[\"会在全局文件进行查找\",{\"1\":{\"506\":1}}],[\"会在\",{\"1\":{\"450\":1}}],[\"会在程序启动时\",{\"1\":{\"363\":1}}],[\"会在访问行的时候加锁\",{\"1\":{\"210\":1}}],[\"会选择内建的基本类型\",{\"1\":{\"358\":1}}],[\"会修改到源数据\",{\"1\":{\"355\":1}}],[\"会重现创建一个切片\",{\"1\":{\"355\":1}}],[\"会先调用包中的初始化函数\",{\"1\":{\"340\":1}}],[\"会先锁定该非主键索引\",{\"1\":{\"235\":1}}],[\"会影响性能\",{\"1\":{\"331\":1}}],[\"会进行初始化\",{\"1\":{\"322\":1}}],[\"会极大影响\",{\"1\":{\"247\":1}}],[\"会\",{\"1\":{\"246\":1,\"335\":1}}],[\"会一直向右匹配直到遇到范围查询\",{\"1\":{\"226\":1}}],[\"会关闭隐式提交\",{\"1\":{\"151\":1,\"187\":1}}],[\"会忽略\",{\"1\":{\"150\":1,\"183\":1,\"449\":1}}],[\"会变得更加困难\",{\"1\":{\"75\":1}}],[\"会话cookie等\",{\"1\":{\"875\":1}}],[\"会话或诊断\",{\"1\":{\"84\":1}}],[\"会话\",{\"1\":{\"66\":1}}],[\"会加上签名\",{\"1\":{\"29\":1}}],[\"它触发用户代理向授权端点发出身份验证请求\",{\"1\":{\"873\":1}}],[\"它应该返回一个错误\",{\"1\":{\"873\":1}}],[\"它应该以值类型还是以指针类型放在\",{\"1\":{\"640\":1}}],[\"它确定要使用的授权处理流\",{\"1\":{\"873\":1,\"892\":1}}],[\"它请求授权服务器对最终用户进行身份验证\",{\"1\":{\"873\":1}}],[\"它具有声明\",{\"1\":{\"869\":1}}],[\"它具备了抽象语法树视图的功能\",{\"1\":{\"492\":1}}],[\"它可能包含其他的要求\",{\"1\":{\"868\":1}}],[\"它可能已经过期\",{\"1\":{\"857\":1}}],[\"它可以使用带有localhost作为主机名的http\",{\"1\":{\"892\":1}}],[\"它可以使用http方案\",{\"1\":{\"873\":1}}],[\"它可以进行更有效的并发运算\",{\"1\":{\"694\":1}}],[\"它可以解码来自磁盘\",{\"1\":{\"662\":1}}],[\"它可以在运行时自省类型\",{\"1\":{\"645\":1}}],[\"它可以在没有安装\",{\"1\":{\"469\":1}}],[\"它可以像\",{\"1\":{\"624\":1}}],[\"它可以像其他标识符那样用于变量的声明或赋值\",{\"1\":{\"504\":1}}],[\"它可以用于改变函数的命名返回值\",{\"1\":{\"573\":1}}],[\"它可以被用于任何形式的\",{\"1\":{\"558\":1}}],[\"它可以迭代任何一个集合\",{\"1\":{\"557\":1}}],[\"它可以由其它的值以及运算符组合而成\",{\"1\":{\"520\":1}}],[\"它可以包含多个\",{\"1\":{\"482\":1}}],[\"它可以包含数据和代码\",{\"1\":{\"310\":1}}],[\"它可以决定一个变量是分配到堆还栈上\",{\"1\":{\"445\":1}}],[\"它可以从全局g队列获取g\",{\"1\":{\"411\":1}}],[\"它可以视为一组\",{\"1\":{\"162\":1,\"198\":1}}],[\"它可以控制特定用户账户对数据表\",{\"1\":{\"90\":1}}],[\"它解决了什么问题\",{\"0\":{\"846\":1}}],[\"它已进入所有主要的网络框架\",{\"1\":{\"844\":1}}],[\"它表示没有任何类型\",{\"1\":{\"763\":1}}],[\"它表示接口的类型以及赋给这个接口的实体类型\",{\"1\":{\"383\":1}}],[\"它调用\",{\"1\":{\"709\":1}}],[\"它随着\",{\"1\":{\"700\":1}}],[\"它接受用户输入的整型数\",{\"1\":{\"677\":1}}],[\"它接受任意形式的表达式\",{\"1\":{\"551\":1}}],[\"它接收一个作用于每一辆\",{\"1\":{\"676\":1}}],[\"它本身不用改变\",{\"1\":{\"673\":1}}],[\"它本质上是一个指针\",{\"1\":{\"662\":1}}],[\"它对实现不做任何要求\",{\"1\":{\"663\":1}}],[\"它必须返回一个错误响应\",{\"1\":{\"874\":1}}],[\"它必须返回一个错误\",{\"1\":{\"873\":3}}],[\"它必须被签名\",{\"1\":{\"869\":1}}],[\"它必须包含此方的oauth\",{\"1\":{\"869\":1}}],[\"它必须包含依赖方的oauth\",{\"1\":{\"869\":1}}],[\"它必须实现\",{\"1\":{\"662\":2}}],[\"它必须是这样的\",{\"1\":{\"561\":1}}],[\"它声明了这些方法\",{\"1\":{\"662\":1}}],[\"它描述了类型的行为\",{\"1\":{\"662\":1}}],[\"它描述的是接口的类型\",{\"1\":{\"383\":1}}],[\"它实现了\",{\"1\":{\"686\":1}}],[\"它实现接口\",{\"1\":{\"662\":1}}],[\"它实际上是一个非常紧凑的\",{\"1\":{\"845\":1}}],[\"它实际上是一个jwt荷载或者jwe荷载\",{\"1\":{\"39\":1}}],[\"它实际上有助于在编译时捕获错误\",{\"1\":{\"317\":1}}],[\"它使客户能够根据授权服务器执行的认证来验证最终用户的身份\",{\"1\":{\"865\":1,\"866\":1}}],[\"它使此方法更具有一般性\",{\"1\":{\"662\":1}}],[\"它使用了自定义包\",{\"1\":{\"627\":1}}],[\"它使用\",{\"1\":{\"509\":1,\"656\":1}}],[\"它使用起来异常快速并且简单\",{\"1\":{\"320\":1}}],[\"它里面没有类和继承的概念\",{\"1\":{\"662\":1}}],[\"它基于结构体实现了一个栈结构\",{\"1\":{\"661\":1}}],[\"它搜索不再使用的变量然后释放它们的内存\",{\"1\":{\"661\":1}}],[\"它将某些在某些常见操作中非常有用的声明标准化了\",{\"1\":{\"845\":1}}],[\"它将引起序列化进入一个无限循环\",{\"1\":{\"682\":1}}],[\"它将从指定读取器\",{\"1\":{\"677\":1}}],[\"它将指定字节切片中的数据写入调用它的对象里\",{\"1\":{\"662\":1}}],[\"它将时区的缩写映射为它的全称\",{\"1\":{\"660\":1}}],[\"它将点的坐标乘以一个尺度因子\",{\"1\":{\"640\":1}}],[\"它输出时区的全称\",{\"1\":{\"660\":1}}],[\"它输出星期几的名字\",{\"1\":{\"660\":1}}],[\"它输出一个十进制数和\",{\"1\":{\"660\":1}}],[\"它导致了一个无限递归调用\",{\"1\":{\"660\":1}}],[\"它给\",{\"1\":{\"659\":1}}],[\"它由\",{\"1\":{\"659\":1}}],[\"它由一系列属性组成\",{\"1\":{\"639\":1}}],[\"它内嵌\",{\"1\":{\"655\":1}}],[\"它展示了内嵌结构体上的方法可以直接在外层类型的实例上调用\",{\"1\":{\"655\":1}}],[\"它展示了分配一个新的值给\",{\"1\":{\"547\":1}}],[\"它和\",{\"1\":{\"686\":1,\"689\":1}}],[\"它和方法有着同样的名字\",{\"1\":{\"651\":1}}],[\"它和函数的区别在于方法有一个接收者\",{\"1\":{\"380\":1}}],[\"它来自\",{\"1\":{\"644\":1}}],[\"它尚未被分配内存\",{\"1\":{\"643\":1}}],[\"它返回这个日志的引用\",{\"1\":{\"656\":1}}],[\"它返回一个指向结构体实例的指针\",{\"1\":{\"642\":1}}],[\"它返回指向已分配内存的指针\",{\"1\":{\"640\":1}}],[\"它没有后继元素\",{\"1\":{\"640\":1}}],[\"它没有任何冗余数据\",{\"1\":{\"291\":1}}],[\"它更适用于简单的结构体\",{\"1\":{\"640\":1}}],[\"它更加适用于执行时间确定的短事务\",{\"1\":{\"241\":1}}],[\"它把数据聚集在一起\",{\"1\":{\"639\":1}}],[\"它一定要安装到\",{\"1\":{\"632\":1}}],[\"它一般用于释放某些已分配的资源\",{\"1\":{\"568\":1}}],[\"它含有一个\",{\"1\":{\"630\":1}}],[\"它能在类型\",{\"1\":{\"653\":1}}],[\"它能通过\",{\"1\":{\"625\":1}}],[\"它能够用于各种方面的操作\",{\"1\":{\"601\":1}}],[\"它能够自动根据\",{\"1\":{\"557\":1}}],[\"它能够构建基于众多处理器架构的应用程序\",{\"1\":{\"481\":1}}],[\"它代表两个时间点之间经过的时间\",{\"1\":{\"621\":1}}],[\"它相当于\",{\"1\":{\"588\":1}}],[\"它适用于值类型如数组和结构体\",{\"1\":{\"588\":1}}],[\"它等于切片的长度\",{\"1\":{\"585\":1}}],[\"它都能够继续操作外部函数中的局部变量\",{\"1\":{\"574\":1}}],[\"它容易被误认为是一个乘法表达式\",{\"1\":{\"547\":1}}],[\"它引用了变量\",{\"1\":{\"547\":1}}],[\"它在程序启动后读取命令行输入的参数\",{\"1\":{\"681\":1}}],[\"它在传统的面向对象语言中通常是不被实现的\",{\"1\":{\"657\":1}}],[\"它在声明变量时将变量的类型放在变量的名称之后\",{\"1\":{\"515\":1}}],[\"它在一个表中只允许有一个\",{\"1\":{\"228\":1}}],[\"它甚至还可以更短的形式\",{\"1\":{\"506\":1}}],[\"它主要负责简单的\",{\"1\":{\"498\":1}}],[\"它还可以包含其他受众的标识符\",{\"1\":{\"869\":1}}],[\"它还可以作为一个本地文档浏览\",{\"1\":{\"497\":1}}],[\"它还描述了使用openid\",{\"1\":{\"865\":1,\"866\":1}}],[\"它还有一个工厂函数\",{\"1\":{\"682\":1}}],[\"它还额外有一个\",{\"1\":{\"662\":1}}],[\"它还支持在各个\",{\"1\":{\"492\":1}}],[\"它还允许将语句分组为逻辑事务\",{\"1\":{\"89\":1}}],[\"它采用了\",{\"1\":{\"492\":1}}],[\"它有两个字段\",{\"1\":{\"662\":1}}],[\"它有一个方法\",{\"1\":{\"662\":1}}],[\"它有一个可变长度参数\",{\"1\":{\"662\":1}}],[\"它有一个\",{\"1\":{\"651\":1,\"662\":3}}],[\"它有一个具名的\",{\"1\":{\"648\":1}}],[\"它有一个前趋节点\",{\"1\":{\"640\":1}}],[\"它有一个插件叫做\",{\"1\":{\"491\":1}}],[\"它有以下几个特点\",{\"1\":{\"391\":1}}],[\"它支持编写非常多的编程语言代码\",{\"1\":{\"491\":1}}],[\"它支持像\",{\"1\":{\"447\":1}}],[\"它负责管理包括内存分配\",{\"1\":{\"487\":1}}],[\"它同时也提供一些与\",{\"1\":{\"481\":1}}],[\"它要求可以采用不同的编译器如\",{\"1\":{\"474\":1}}],[\"它从指定通道中读取数据直到通道关闭\",{\"1\":{\"708\":1}}],[\"它从调用它的对象上读取数据\",{\"1\":{\"662\":1}}],[\"它从\",{\"1\":{\"469\":1}}],[\"它提供了海量并行的支持\",{\"1\":{\"476\":1}}],[\"它提供了一些示例\",{\"1\":{\"469\":1}}],[\"它提供了安全性\",{\"1\":{\"317\":1}}],[\"它提倡通过接口来针对面向对象编程\",{\"1\":{\"467\":1}}],[\"它并不会使当前协程挂起\",{\"1\":{\"694\":1}}],[\"它并不是要用奇怪的语法和晦涩难懂的概念来从根本上推翻已有的编程语言\",{\"1\":{\"467\":1}}],[\"它并未引入很多新概念\",{\"1\":{\"320\":1}}],[\"它让人感觉像是\",{\"1\":{\"467\":1}}],[\"它\",{\"1\":{\"455\":1}}],[\"它只是一个空字符串\",{\"1\":{\"854\":1}}],[\"它只是多了一个\",{\"1\":{\"450\":1}}],[\"它只接收一个参数\",{\"1\":{\"678\":1}}],[\"它只适用于\",{\"1\":{\"588\":1}}],[\"它只需要一个单独的静态文件\",{\"1\":{\"487\":1}}],[\"它只能作为接口使用\",{\"1\":{\"392\":1}}],[\"它指向第二个元素\",{\"1\":{\"640\":1}}],[\"它指向那个值的内存地址\",{\"1\":{\"547\":1}}],[\"它指向了\",{\"1\":{\"547\":1}}],[\"它指定输出的可执行文件的名字\",{\"1\":{\"449\":1}}],[\"它指的是有多少用户能拥有这个角色\",{\"1\":{\"68\":1}}],[\"它会静默退出\",{\"1\":{\"694\":1}}],[\"它会下载并执行在线分析\",{\"1\":{\"692\":1}}],[\"它会展示在程序运行期间调用最频繁的\",{\"1\":{\"692\":1}}],[\"它会返回一个带缓冲的\",{\"1\":{\"682\":1}}],[\"它会根据数组元素的实际类型执行不同的动作\",{\"1\":{\"662\":1}}],[\"它会在此函数执行的点上立即释放一大片内存\",{\"1\":{\"661\":1}}],[\"它会在同一目录输出\",{\"1\":{\"481\":1}}],[\"它会导致意料之外的错误\",{\"1\":{\"660\":1}}],[\"它会被用在\",{\"1\":{\"660\":1}}],[\"它会被插入到队列的前面\",{\"1\":{\"420\":1}}],[\"它会引起go频繁地进行垃圾回收\",{\"1\":{\"445\":1}}],[\"它会乖乖地加入到等待队列的尾部\",{\"1\":{\"420\":1}}],[\"它也可能被认为是有效的\",{\"1\":{\"857\":1}}],[\"它也可以被用于基本类型\",{\"1\":{\"569\":1}}],[\"它也可以作为一个提供在线文档浏览的\",{\"1\":{\"497\":1}}],[\"它也实现了接口\",{\"1\":{\"662\":1}}],[\"它也实现了\",{\"1\":{\"662\":1}}],[\"它也被称为unix时间戳\",{\"1\":{\"618\":1}}],[\"它也不会去抢\",{\"1\":{\"420\":1}}],[\"它也就展示转义字符\",{\"1\":{\"333\":1}}],[\"它包含关于授权服务器在使用客户端时对终端用户进行认证的要求\",{\"1\":{\"869\":1}}],[\"它包含一个字段\",{\"1\":{\"657\":1}}],[\"它包含一个\",{\"1\":{\"655\":1,\"664\":1}}],[\"它包含了许多帮助示例\",{\"1\":{\"629\":1}}],[\"它包含了一个整型变量\",{\"1\":{\"627\":1}}],[\"它包含了rbac1和rbac2\",{\"1\":{\"69\":1}}],[\"它包装了\",{\"1\":{\"383\":1}}],[\"它降低了存取效率\",{\"1\":{\"367\":1}}],[\"它与array<\",{\"1\":{\"770\":1}}],[\"它与一个空map基本等价\",{\"1\":{\"362\":1}}],[\"它与c具有表面相似性\",{\"1\":{\"317\":1}}],[\"它的包含是可选的\",{\"1\":{\"869\":1}}],[\"它的长度不能超过255个ascii字符\",{\"1\":{\"869\":1}}],[\"它的长和宽是\",{\"1\":{\"640\":1}}],[\"它的解释与应用程序有关\",{\"1\":{\"852\":1}}],[\"它的选择类型有基本的三种\",{\"1\":{\"728\":1}}],[\"它的第一个参数是要运行的进程\",{\"1\":{\"689\":1}}],[\"它的方法以及它能\",{\"1\":{\"668\":1}}],[\"它的大小\",{\"1\":{\"668\":1}}],[\"它的所有导出方法\",{\"1\":{\"662\":1}}],[\"它的接口指的是\",{\"1\":{\"662\":1}}],[\"它的格子包含数据\",{\"1\":{\"660\":1}}],[\"它的完全类型名是\",{\"1\":{\"640\":1}}],[\"它的作用是守护在临界区入口来确保同一时间只能有一个线程进入临界区\",{\"1\":{\"625\":1}}],[\"它的作用类似与\",{\"1\":{\"551\":1}}],[\"它的返回值是字符串\",{\"1\":{\"572\":1}}],[\"它的形参一般是有名字的\",{\"1\":{\"562\":1}}],[\"它的类型在这里变成了\",{\"1\":{\"513\":1}}],[\"它的主要思想来源于\",{\"1\":{\"487\":1}}],[\"它的值是access\",{\"1\":{\"886\":1}}],[\"它的值是一个json数字\",{\"1\":{\"869\":3}}],[\"它的值是\",{\"1\":{\"662\":1}}],[\"它的值为\",{\"1\":{\"547\":1}}],[\"它的值都会自动加\",{\"1\":{\"513\":1}}],[\"它的值可以是\",{\"1\":{\"482\":3}}],[\"它的值一般都是\",{\"1\":{\"482\":1}}],[\"它的编译速度要比\",{\"1\":{\"481\":1}}],[\"它的内存会释放么\",{\"0\":{\"360\":1}}],[\"它的综合能力就非常强了\",{\"1\":{\"320\":1}}],[\"它就无法提供关于终端用户的认证信息\",{\"1\":{\"866\":1}}],[\"它就实现了此接口\",{\"1\":{\"662\":1}}],[\"它就可以用在这儿\",{\"1\":{\"662\":1}}],[\"它就会把这个\",{\"1\":{\"420\":1}}],[\"它就换行\",{\"1\":{\"333\":1}}],[\"它就啥样\",{\"1\":{\"333\":1}}],[\"它监控那些长时间运行的\",{\"1\":{\"330\":1}}],[\"它时刻处理一个有效的事件循环\",{\"1\":{\"330\":1}}],[\"它不会等待任何其他非\",{\"1\":{\"697\":1}}],[\"它不再接受\",{\"1\":{\"663\":1}}],[\"它不仅仅像\",{\"1\":{\"663\":1}}],[\"它不占用整个数组\",{\"1\":{\"587\":1}}],[\"它不能够被人为调用\",{\"1\":{\"519\":1}}],[\"它不能参与计算\",{\"1\":{\"351\":1}}],[\"它不像\",{\"1\":{\"474\":1}}],[\"它不允许程序员对内存管理负责\",{\"1\":{\"317\":1}}],[\"它不支持强封装\",{\"1\":{\"317\":1}}],[\"它不是一条\",{\"1\":{\"168\":1,\"204\":1}}],[\"它又不是纯粹的oop语言\",{\"1\":{\"317\":1}}],[\"它坚持这样一种观点\",{\"1\":{\"317\":1}}],[\"它们定义了获得和使用访问令牌访问资源的机制\",{\"1\":{\"866\":1}}],[\"它们创建通道并返回\",{\"1\":{\"709\":1}}],[\"它们都可以运行在独立的协程中\",{\"1\":{\"708\":1}}],[\"它们都有一个\",{\"1\":{\"662\":1}}],[\"它们总是互不干扰地完成\",{\"1\":{\"700\":1}}],[\"它们总是通过复杂的模式来构建庞大的类型层级\",{\"1\":{\"475\":1}}],[\"它们痕迹非常不明显\",{\"1\":{\"694\":1}}],[\"它们\",{\"1\":{\"689\":1}}],[\"它们基于\",{\"1\":{\"688\":1}}],[\"它们返回封装整数类型错误码的\",{\"1\":{\"688\":1}}],[\"它们很可能有像\",{\"1\":{\"672\":1}}],[\"它们能做什么比它们是什么更重要\",{\"1\":{\"671\":1}}],[\"它们不仅一点用也没有\",{\"1\":{\"662\":1}}],[\"它们不需要查找具体的行\",{\"1\":{\"303\":1}}],[\"它们是抽象的\",{\"1\":{\"662\":1}}],[\"它们是正交的类型\",{\"1\":{\"652\":1}}],[\"它们没有被实现\",{\"1\":{\"662\":1}}],[\"它们必须是同一个包的\",{\"1\":{\"651\":1}}],[\"它们作用于作为\",{\"1\":{\"626\":1}}],[\"它们将被作为过时的包被回收\",{\"1\":{\"623\":1}}],[\"它们将成为独立的包\",{\"1\":{\"623\":1}}],[\"它们被称为标准库\",{\"1\":{\"614\":1}}],[\"它们被允许调用定义在其它环境下的变量\",{\"1\":{\"573\":1}}],[\"它们也可以被切分成切片\",{\"1\":{\"587\":1}}],[\"它们也必须都实现了相同的接口\",{\"1\":{\"521\":1}}],[\"它们构建在数组之上并且提供更强大的能力和便捷\",{\"1\":{\"578\":1}}],[\"它们需要直接获得编译器的支持\",{\"1\":{\"569\":1}}],[\"它们有时可以针对不同的类型进行操作\",{\"1\":{\"569\":1}}],[\"它们会给你的代码在并发运算的时候带来危险\",{\"1\":{\"694\":1}}],[\"它们会被多线程以无法预知的方式进行操作\",{\"1\":{\"694\":1}}],[\"它们会预先定义好\",{\"1\":{\"573\":1}}],[\"它们会以逆序执行\",{\"1\":{\"568\":1}}],[\"它们会以默认的打印格式将变量\",{\"1\":{\"507\":1}}],[\"它们会很快导致非常糟糕的程序设计\",{\"1\":{\"559\":1}}],[\"它们之间使用分号\",{\"1\":{\"553\":1}}],[\"它们之间没有空行\",{\"1\":{\"501\":1}}],[\"它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值\",{\"1\":{\"526\":1}}],[\"它们均使用\",{\"1\":{\"523\":2}}],[\"它们可以存在在不同的源文件\",{\"1\":{\"651\":1}}],[\"它们可以如示例\",{\"1\":{\"640\":1}}],[\"它们可以共享数据\",{\"1\":{\"585\":1}}],[\"它们可以赋值给变量\",{\"1\":{\"561\":1}}],[\"它们可以被分别导入\",{\"1\":{\"506\":1}}],[\"它们可以为任何类型的数据定义\",{\"1\":{\"312\":1}}],[\"它们则必须使用\",{\"1\":{\"504\":1}}],[\"它们的实现方式各有不同\",{\"1\":{\"860\":1}}],[\"它们的本身的类型用处不是很大\",{\"1\":{\"764\":1}}],[\"它们的执行是无序的\",{\"1\":{\"627\":1}}],[\"它们的用法就像是函数\",{\"1\":{\"569\":1}}],[\"它们的作用域只在函数体内\",{\"1\":{\"515\":1}}],[\"它们的作用都将在接下来的章节中进行进一步地讲解\",{\"1\":{\"504\":1}}],[\"它们的使用方法非常灵活\",{\"1\":{\"475\":1}}],[\"它们正在\",{\"1\":{\"420\":1}}],[\"它们分别被称为动态类型和动态值\",{\"1\":{\"384\":1}}],[\"它们并不局限于结构\",{\"1\":{\"312\":1}}],[\"它们只能被用来加速查询\",{\"1\":{\"106\":1}}],[\"它利用对\",{\"1\":{\"258\":1}}],[\"它最大的优势就是对使用方透明\",{\"1\":{\"241\":1}}],[\"它锁定一个前开后闭区间\",{\"1\":{\"235\":1}}],[\"它是先进先出\",{\"1\":{\"699\":1}}],[\"它是可以包含大量条目\",{\"1\":{\"578\":1}}],[\"它是为了避免像\",{\"1\":{\"515\":1}}],[\"它是一个附属于字段的字符串\",{\"1\":{\"645\":1}}],[\"它是一个工作空间的概念\",{\"1\":{\"446\":1}}],[\"它是一条命令\",{\"1\":{\"166\":1,\"202\":1}}],[\"它是经过编译的\",{\"1\":{\"317\":1}}],[\"它是将同一个表中的记录拆分到多个结构相同的表中\",{\"1\":{\"247\":1}}],[\"它是\",{\"1\":{\"235\":1,\"649\":1}}],[\"它是rbac的约束模型\",{\"1\":{\"68\":1}}],[\"它是rbac的核心\",{\"1\":{\"66\":1}}],[\"它作用于所有列\",{\"1\":{\"122\":1}}],[\"基础类型\",{\"0\":{\"754\":1}}],[\"基础部分\",{\"0\":{\"319\":1}}],[\"基类以struct的方式定义\",{\"1\":{\"311\":1}}],[\"基本要求\",{\"1\":{\"868\":1}}],[\"基本类型\",{\"1\":{\"652\":1}}],[\"基本类型和运算符\",{\"0\":{\"520\":1}}],[\"基本的数学函数\",{\"1\":{\"614\":1}}],[\"基本的get请求\",{\"1\":{\"427\":2}}],[\"基本形式为\",{\"1\":{\"553\":1,\"555\":1}}],[\"基本结构和基本数据类型\",{\"0\":{\"503\":1}}],[\"基本不用担心内存泄露了\",{\"1\":{\"445\":1}}],[\"基本必问\",{\"0\":{\"322\":1,\"353\":1}}],[\"基本了解这些概念就可以了\",{\"1\":{\"316\":1}}],[\"基本没啥人用\",{\"1\":{\"251\":1}}],[\"基本可用\",{\"1\":{\"242\":1}}],[\"基本规则\",{\"1\":{\"144\":1,\"177\":1}}],[\"基本只需要分配一条所属的用户组\",{\"1\":{\"73\":1}}],[\"基本都占用了所有用户的\",{\"1\":{\"73\":1}}],[\"基本都在\",{\"1\":{\"72\":1}}],[\"基本模型\",{\"0\":{\"66\":1}}],[\"基数约束\",{\"1\":{\"68\":1}}],[\"基于索引值操作\",{\"1\":{\"819\":1}}],[\"基于原型的对象\",{\"1\":{\"659\":1}}],[\"基于条件判断的迭代\",{\"0\":{\"555\":1}}],[\"基于计数器的迭代\",{\"0\":{\"553\":1}}],[\"基于时间片的抢占式调度有个明显的优点\",{\"1\":{\"412\":1}}],[\"基于经典的时间片算法\",{\"1\":{\"412\":1}}],[\"基于信号量抢占\",{\"1\":{\"412\":1}}],[\"基于协作式抢占\",{\"1\":{\"412\":1}}],[\"基于这几个基本认知进行一步延伸出\",{\"1\":{\"310\":1}}],[\"基于行的复制和基于语句的复制\",{\"1\":{\"260\":1}}],[\"基于acid的强一致性事务和基于base的最终一致性事务都不是银弹\",{\"1\":{\"242\":1}}],[\"基于\",{\"1\":{\"241\":1,\"251\":1,\"455\":1,\"492\":1}}],[\"基于特定条件检索数据\",{\"1\":{\"84\":1}}],[\"基于rbac0模型的基础上\",{\"1\":{\"68\":1}}],[\"基于rbac0模型\",{\"1\":{\"67\":1}}],[\"基于属性的访问控制模型\",{\"1\":{\"63\":1}}],[\"基于属性访问控制\",{\"1\":{\"60\":1}}],[\"基于角色访问控制\",{\"0\":{\"59\":1},\"1\":{\"60\":1}}],[\"除oauth\",{\"1\":{\"878\":1}}],[\"除外\",{\"1\":{\"662\":1}}],[\"除非客户端是本地应用程序\",{\"1\":{\"892\":1}}],[\"除非已经与客户端协商了另一种令牌类型\",{\"1\":{\"883\":1}}],[\"除非重定向uri无效\",{\"1\":{\"878\":1}}],[\"除非指定了不同的响应模式\",{\"1\":{\"877\":1,\"878\":1}}],[\"除非所使用的响应类型从授权端点返回没有id令牌\",{\"1\":{\"869\":1}}],[\"除非在解密前的加密\",{\"1\":{\"850\":1}}],[\"除非真得有必要\",{\"1\":{\"668\":1}}],[\"除非系统内存耗尽了\",{\"1\":{\"593\":1}}],[\"除非该树仅包含一个结点\",{\"1\":{\"214\":1}}],[\"除了这些认证请求参数使用如下\",{\"1\":{\"892\":1}}],[\"除了本节中指定的不同之处\",{\"1\":{\"891\":1}}],[\"除了oauth\",{\"1\":{\"869\":1,\"883\":1}}],[\"除了简单的打印\",{\"1\":{\"689\":1}}],[\"除了文件句柄\",{\"1\":{\"680\":1}}],[\"除了分隔符改成了分号\",{\"1\":{\"678\":1}}],[\"除了实现接口方法外\",{\"1\":{\"662\":1}}],[\"除了前三个元素外其他元素都为\",{\"1\":{\"581\":1}}],[\"除了使用\",{\"1\":{\"523\":1}}],[\"除了使用变量\",{\"1\":{\"501\":1}}],[\"除了符号\",{\"1\":{\"506\":1}}],[\"除了以上介绍的这些关键字\",{\"1\":{\"504\":1}}],[\"除了\",{\"0\":{\"417\":1},\"1\":{\"561\":1,\"677\":2,\"689\":1}}],[\"除了数据表占数据空间之外\",{\"1\":{\"210\":1}}],[\"除以协程的数量\",{\"1\":{\"697\":1}}],[\"除以\",{\"1\":{\"335\":1}}],[\"除以上默认字段外\",{\"1\":{\"35\":1}}],[\"除根结点和叶结点外\",{\"1\":{\"214\":1}}],[\"除此之外\",{\"1\":{\"65\":1,\"404\":1,\"461\":1,\"462\":1,\"677\":1}}],[\"分散\",{\"1\":{\"696\":1}}],[\"分析\",{\"1\":{\"692\":1}}],[\"分析器的一个轻微变种\",{\"1\":{\"692\":1}}],[\"分析指针动态范围的方法称之为逃逸分析\",{\"1\":{\"445\":1}}],[\"分母\",{\"1\":{\"626\":1}}],[\"分子\",{\"1\":{\"626\":1}}],[\"分片成两个切片\",{\"1\":{\"590\":1}}],[\"分支冲突解决\",{\"1\":{\"830\":1}}],[\"分支中进行测试不同的条件\",{\"1\":{\"551\":1}}],[\"分支可以出现在任何顺序\",{\"1\":{\"551\":1}}],[\"分支的匹配情况\",{\"1\":{\"551\":1}}],[\"分支的数量是没有限制的\",{\"1\":{\"549\":1}}],[\"分支都是唯一的\",{\"1\":{\"551\":1}}],[\"分支\",{\"1\":{\"550\":1}}],[\"分割字符串\",{\"0\":{\"542\":1}}],[\"分钟自动更新您的文档\",{\"1\":{\"628\":1}}],[\"分钟以内\",{\"1\":{\"483\":1}}],[\"分钟\",{\"1\":{\"432\":1}}],[\"分为系统触发和主动触发\",{\"1\":{\"432\":1}}],[\"分页基于\",{\"1\":{\"299\":2}}],[\"分页查询\",{\"1\":{\"299\":1}}],[\"分解后\",{\"1\":{\"291\":1}}],[\"分解前\",{\"1\":{\"291\":1}}],[\"分解成多个单表查询\",{\"1\":{\"268\":1}}],[\"分解成对每一个表进行一次单表查询\",{\"1\":{\"268\":1}}],[\"分解关联查询\",{\"0\":{\"268\":1}}],[\"分库设计时\",{\"1\":{\"256\":1}}],[\"分库分表中间件技术选型\",{\"0\":{\"252\":1}}],[\"分库分表中间件技术如何选型\",{\"1\":{\"250\":1}}],[\"分库分表中间件\",{\"0\":{\"250\":1}}],[\"分库分表策略\",{\"0\":{\"249\":1}}],[\"分库分表后\",{\"1\":{\"248\":1}}],[\"分库分表前\",{\"1\":{\"248\":1}}],[\"分库分表的常见问题有哪些\",{\"1\":{\"253\":1}}],[\"分库分表的问题\",{\"0\":{\"253\":1}}],[\"分库分表的数据库就无法工作\",{\"1\":{\"249\":1}}],[\"分库分表的优点\",{\"0\":{\"248\":1}}],[\"分库分表的基本思想就是\",{\"1\":{\"245\":1}}],[\"分库分表一定是为了支撑\",{\"1\":{\"245\":1}}],[\"分库分表有什么策略\",{\"1\":{\"245\":1}}],[\"分库分表有什么优点\",{\"1\":{\"245\":1}}],[\"分库分表是为了解决什么问题\",{\"1\":{\"245\":1}}],[\"分库分表\",{\"0\":{\"244\":1},\"1\":{\"281\":1}}],[\"分别对应用户时间\",{\"1\":{\"690\":1}}],[\"分别代表未知性别\",{\"1\":{\"513\":1}}],[\"分别调用了\",{\"1\":{\"501\":1}}],[\"分别在各个节点上得到结果后在应用程序端进行合并\",{\"1\":{\"256\":1}}],[\"分别是指向别的节点的指针\",{\"1\":{\"640\":1}}],[\"分别是多少\",{\"1\":{\"588\":1}}],[\"分别是什么\",{\"1\":{\"585\":1}}],[\"分别是\",{\"1\":{\"65\":1,\"563\":1}}],[\"分布式索赔示例\",{\"0\":{\"946\":1}}],[\"分布式计算\",{\"1\":{\"693\":1}}],[\"分布式\",{\"0\":{\"257\":1},\"1\":{\"251\":1,\"257\":1}}],[\"分布式事务\",{\"0\":{\"240\":1,\"254\":1},\"1\":{\"240\":1}}],[\"分表是将原来一张表的数据分布到数据库集群的不同节点上\",{\"1\":{\"247\":1}}],[\"分号\",{\"1\":{\"166\":1,\"202\":1}}],[\"分等\",{\"1\":{\"148\":1,\"181\":1}}],[\"分组和范围条件等因素\",{\"1\":{\"222\":1}}],[\"分组后排序示例\",{\"1\":{\"135\":1,\"185\":1}}],[\"分组示例\",{\"1\":{\"135\":1,\"185\":1}}],[\"分组\",{\"0\":{\"135\":1,\"184\":1},\"1\":{\"305\":1}}],[\"分类\",{\"0\":{\"86\":1}}],[\"分配了相同的长度\",{\"1\":{\"705\":1}}],[\"分配了一个引用对象\",{\"1\":{\"605\":1}}],[\"分配了父级后\",{\"1\":{\"72\":1}}],[\"分配一片内存\",{\"1\":{\"588\":1}}],[\"分配类型\",{\"1\":{\"569\":1}}],[\"分配的数量以及内存访问模式\",{\"1\":{\"547\":1}}],[\"分配的空间被清零\",{\"1\":{\"322\":1}}],[\"分配和回收内容都是消耗\",{\"1\":{\"487\":1}}],[\"分配和释放\",{\"1\":{\"445\":1}}],[\"分配内存并执行周期性的垃圾回收\",{\"1\":{\"692\":1}}],[\"分配内存\",{\"1\":{\"443\":2,\"640\":1}}],[\"分配在栈上还是堆上\",{\"0\":{\"442\":1}}],[\"分配新的时间片令其开始执行\",{\"1\":{\"412\":1}}],[\"分配空间后\",{\"1\":{\"322\":1}}],[\"分配过多的角色\",{\"1\":{\"75\":1}}],[\"分配角色可能是一项挑战\",{\"1\":{\"75\":1}}],[\"分隔符的意思\",{\"1\":{\"166\":1,\"202\":1}}],[\"分隔符分为三个子串\",{\"1\":{\"33\":1}}],[\"分隔\",{\"1\":{\"36\":1,\"85\":1,\"507\":1}}],[\"实施openid\",{\"1\":{\"866\":1}}],[\"实施不理解的主张应被忽略\",{\"1\":{\"851\":1}}],[\"实用的标准容器格式\",{\"1\":{\"846\":1}}],[\"实验\",{\"1\":{\"627\":1}}],[\"实质上是\",{\"1\":{\"546\":1}}],[\"实体认证保证级别\",{\"1\":{\"868\":1}}],[\"实体类型>\",{\"1\":{\"390\":1}}],[\"实体类型的类型\",{\"1\":{\"390\":1}}],[\"实体类型的其他方法并不会出现在这里\",{\"1\":{\"383\":1}}],[\"实体\",{\"1\":{\"383\":1,\"868\":1}}],[\"实例的值\",{\"1\":{\"663\":1}}],[\"实例上调用这个方法\",{\"1\":{\"662\":1}}],[\"实例化\",{\"1\":{\"642\":1,\"699\":1,\"725\":1}}],[\"实例\",{\"1\":{\"315\":1,\"332\":2,\"496\":1,\"657\":1}}],[\"实际应用\",{\"0\":{\"847\":1}}],[\"实际在大部分情况下工作的很不错\",{\"1\":{\"701\":1}}],[\"实际时间和最大内存占用\",{\"1\":{\"690\":1}}],[\"实际测试时简单迭代表中的每条记录\",{\"1\":{\"689\":1}}],[\"实际使用中的第二个参数\",{\"1\":{\"536\":1}}],[\"实际开发最佳选择\",{\"1\":{\"483\":1}}],[\"实际执行的时候是看最终传入的实体类型是什么\",{\"1\":{\"391\":1}}],[\"实际搬迁过程中比较复杂\",{\"1\":{\"372\":1}}],[\"实际上也就是把函数作为定义所需方法\",{\"1\":{\"676\":1}}],[\"实际上也是\",{\"1\":{\"380\":1}}],[\"实际上默认为判断是否为\",{\"1\":{\"551\":1}}],[\"实际上它包含接口的类型\",{\"1\":{\"390\":1}}],[\"实际上并不是扩大容量\",{\"1\":{\"373\":1}}],[\"实际上还要考虑内存对齐\",{\"1\":{\"354\":1}}],[\"实际上空结构体不占任何内存\",{\"1\":{\"337\":1}}],[\"实际上是对指针指向的值进行编码\",{\"1\":{\"682\":1}}],[\"实际上是一个\",{\"1\":{\"682\":1}}],[\"实际上是一个只写变量\",{\"1\":{\"518\":1}}],[\"实际上是在内存中将\",{\"1\":{\"516\":1}}],[\"实际上是描述\",{\"1\":{\"383\":1}}],[\"实际上是创建了一个\",{\"1\":{\"382\":1}}],[\"实际上是\",{\"1\":{\"378\":1,\"380\":2}}],[\"实际上是字符数组\",{\"1\":{\"333\":1}}],[\"实际上是通过\",{\"1\":{\"330\":1}}],[\"实际上\",{\"1\":{\"317\":1,\"380\":1,\"383\":1,\"530\":1,\"550\":1,\"664\":1,\"668\":1,\"850\":1,\"853\":1}}],[\"实际上这是一种分组的聚合方式\",{\"1\":{\"304\":1}}],[\"实际上包含三个方面\",{\"1\":{\"71\":1}}],[\"实际运行\",{\"1\":{\"10\":1}}],[\"实现者可以提供一些小的回旋余地\",{\"1\":{\"869\":1}}],[\"实现者必须检查\",{\"1\":{\"857\":1}}],[\"实现非阻塞通道的读取\",{\"1\":{\"709\":1}}],[\"实现并行的\",{\"0\":{\"706\":1}}],[\"实现并测试它\",{\"1\":{\"689\":1}}],[\"实现中\",{\"1\":{\"695\":1}}],[\"实现对应作用的功效\",{\"1\":{\"676\":1}}],[\"实现对集合的操作\",{\"1\":{\"614\":1}}],[\"实现下面的栈方法\",{\"1\":{\"676\":1}}],[\"实现此接口\",{\"1\":{\"662\":1}}],[\"实现类型必须满足它\",{\"1\":{\"662\":1}}],[\"实现同样的功能\",{\"1\":{\"662\":1}}],[\"实现这个接口\",{\"1\":{\"662\":2}}],[\"实现某个接口的类型\",{\"1\":{\"662\":1}}],[\"实现栈\",{\"1\":{\"660\":1}}],[\"实现一个查找函数来获取子集合\",{\"1\":{\"676\":1}}],[\"实现一个\",{\"1\":{\"640\":2}}],[\"实现一个输出前\",{\"1\":{\"571\":1}}],[\"实现通过程序运行时反射\",{\"1\":{\"623\":1}}],[\"实现其阻塞等待一组协程结束\",{\"1\":{\"423\":2}}],[\"实现互斥\",{\"1\":{\"417\":1}}],[\"实现共享数据存储的地方\",{\"1\":{\"394\":1}}],[\"实现多态\",{\"0\":{\"391\":1}}],[\"实现接口调用方法的动态分派\",{\"1\":{\"383\":1}}],[\"实现的\",{\"1\":{\"491\":1}}],[\"实现的多路复用是\",{\"1\":{\"331\":1}}],[\"实现的逻辑类似于\",{\"1\":{\"306\":1}}],[\"实现了其它的\",{\"1\":{\"686\":1}}],[\"实现了一个或多个接口\",{\"1\":{\"676\":1}}],[\"实现了一个以animal为receiver的eat方法\",{\"1\":{\"338\":1}}],[\"实现了某个接口的类型可以被传给任何以此接口为参数的函数\",{\"1\":{\"671\":1}}],[\"实现了接口\",{\"1\":{\"662\":1}}],[\"实现了接收者是值类型的方法\",{\"1\":{\"381\":1}}],[\"实现了以下三个工具\",{\"1\":{\"498\":1}}],[\"实现了\",{\"1\":{\"330\":1,\"461\":1,\"662\":1,\"676\":1,\"682\":3,\"686\":1,\"688\":1}}],[\"实现了用户和权限的逻辑分离\",{\"1\":{\"65\":1}}],[\"实现简单\",{\"1\":{\"320\":1}}],[\"实现面向对象编程\",{\"0\":{\"313\":1}}],[\"实现相关接口\",{\"1\":{\"243\":1}}],[\"实现方式\",{\"0\":{\"803\":1},\"1\":{\"230\":2}}],[\"实现\",{\"1\":{\"70\":1,\"348\":1,\"467\":1,\"638\":1,\"657\":1,\"662\":2}}],[\"实现角色间的单继承\",{\"1\":{\"67\":1}}],[\"实现访问控制\",{\"1\":{\"64\":1}}],[\"必需的\",{\"1\":{\"869\":5,\"873\":4,\"878\":1,\"892\":3}}],[\"必需要具有这四种特性\",{\"1\":{\"237\":1}}],[\"必要的时候可以轻松创建并运行大量的协程\",{\"1\":{\"694\":1}}],[\"必然会成为人们关注的焦点\",{\"1\":{\"476\":1}}],[\"必然面临权限控制的问题\",{\"1\":{\"60\":1}}],[\"必问\",{\"0\":{\"408\":1,\"409\":1,\"429\":1,\"439\":1}}],[\"必知必会\",{\"1\":{\"205\":1,\"303\":1,\"305\":1,\"306\":1}}],[\"必须与iss\",{\"1\":{\"887\":1}}],[\"必须与方法的声明放在同一行\",{\"1\":{\"507\":1}}],[\"必须不\",{\"1\":{\"867\":1}}],[\"必须\",{\"1\":{\"867\":1}}],[\"必须对header和payload进行验证\",{\"1\":{\"855\":1}}],[\"必须注意防止碰撞\",{\"1\":{\"853\":1}}],[\"必须两者其一\",{\"1\":{\"811\":1}}],[\"必须要一个接收者准备好接收通道的数据然后发送者可以直接把数据发送给接收者\",{\"1\":{\"701\":1}}],[\"必须尽力补救错误让程序能继续执行\",{\"1\":{\"689\":1}}],[\"必须实现\",{\"1\":{\"674\":1}}],[\"必须使用\",{\"1\":{\"665\":1}}],[\"必须使用前缀索引\",{\"1\":{\"221\":1}}],[\"必须有和方法定义时相同的接收者类型或者是可以根据具体类型\",{\"1\":{\"662\":1}}],[\"必须有一种方式来检测它的\",{\"1\":{\"662\":1}}],[\"必须是\",{\"1\":{\"682\":1}}],[\"必须是一个接口变量\",{\"1\":{\"662\":1}}],[\"必须是固定的并且在声明该数组时就给出\",{\"1\":{\"580\":1}}],[\"必须由程序员自己修正\",{\"1\":{\"649\":1}}],[\"必须包含住址\",{\"1\":{\"640\":1}}],[\"必须先拉取\",{\"1\":{\"830\":1}}],[\"必须先切换到要合并的分支上面\",{\"1\":{\"826\":1}}],[\"必须先\",{\"1\":{\"688\":1}}],[\"必须先将正则模式通过\",{\"1\":{\"624\":1}}],[\"必须先申请意向锁\",{\"1\":{\"233\":1}}],[\"必须通过\",{\"1\":{\"580\":1}}],[\"必须通过角色来控制授权信息\",{\"1\":{\"64\":1}}],[\"必须和\",{\"1\":{\"549\":1,\"551\":1,\"553\":1}}],[\"必须和关键字在同一行\",{\"1\":{\"549\":1}}],[\"必须放在第一行\",{\"1\":{\"532\":1}}],[\"必须将其转换为\",{\"1\":{\"501\":1}}],[\"必须将所有的资源锁定\",{\"1\":{\"242\":1}}],[\"必须调用\",{\"1\":{\"438\":1}}],[\"必须具有方法和函数的唯一名称\",{\"1\":{\"311\":1}}],[\"必须遍历链表中所有的行指针\",{\"1\":{\"217\":1}}],[\"必须匹配指定位置的一个字符\",{\"1\":{\"133\":2}}],[\"版本得出紧凑的表示\",{\"1\":{\"855\":1}}],[\"版本控制系统可以选择你熟悉的或者本地使用的代码版本控制\",{\"1\":{\"636\":1}}],[\"版本中获得的项只是\",{\"1\":{\"610\":1}}],[\"版本那样通过索引使用切片的\",{\"1\":{\"610\":1}}],[\"版本的源码到该目录\",{\"1\":{\"483\":1}}],[\"版本的编译器已经被移植到\",{\"1\":{\"481\":1}}],[\"版本来编译安装之后版本的编译器\",{\"1\":{\"483\":1}}],[\"版本后\",{\"1\":{\"483\":1}}],[\"版本及之后的版本时需要设置\",{\"1\":{\"483\":1}}],[\"版本开始\",{\"1\":{\"481\":2,\"482\":1,\"495\":1}}],[\"版本开始已经实现自举\",{\"1\":{\"481\":1}}],[\"版本下测试通过\",{\"1\":{\"467\":1}}],[\"版本标记清除做了点优化\",{\"1\":{\"429\":1}}],[\"版本前的默认存储引擎\",{\"1\":{\"293\":1}}],[\"版本\",{\"1\":{\"251\":1,\"455\":1,\"469\":1,\"638\":1,\"662\":1,\"686\":1,\"709\":2}}],[\"版本或者时间戳\",{\"1\":{\"230\":1}}],[\"版本迭代更新的时候很麻烦\",{\"1\":{\"164\":1,\"200\":1}}],[\"版本管理困难\",{\"1\":{\"164\":1,\"200\":1}}],[\"版本里引入了\",{\"1\":{\"63\":1}}],[\"版本安装在系统中\",{\"1\":{\"51\":1}}],[\"太难用\",{\"1\":{\"63\":1}}],[\"我是一个单例\",{\"1\":{\"803\":1}}],[\"我是搬运工\",{\"1\":{\"315\":1}}],[\"我建议你可以在编译过程中暂时关闭防火墙\",{\"1\":{\"483\":1}}],[\"我还要感谢\",{\"1\":{\"467\":1}}],[\"我非常想要向发明这门精湛的语言的\",{\"1\":{\"467\":1}}],[\"我坚信任何语言的构造都不可能支持大型项目的开发\",{\"1\":{\"467\":1}}],[\"我并不是说\",{\"1\":{\"467\":1}}],[\"我认为这是历史发展的必然结果\",{\"1\":{\"467\":1}}],[\"我认为使用\",{\"1\":{\"467\":1}}],[\"我认为主要还是因为大部分系统对权限控制并没有过多的需求\",{\"1\":{\"63\":1}}],[\"我在使用\",{\"1\":{\"467\":1}}],[\"我会在书中尽量使用已经讲解的概念或者技巧来解释相关的代码示例\",{\"1\":{\"467\":1}}],[\"我等渣渣简历都过不了bat\",{\"1\":{\"431\":1}}],[\"我回答的不是很清晰\",{\"1\":{\"423\":1}}],[\"我记得有不一样的说法\",{\"1\":{\"360\":1}}],[\"我搜索出来的答案是golang会弱化分配的位置的概念\",{\"1\":{\"322\":1}}],[\"我想\",{\"1\":{\"296\":1}}],[\"我们如何在通道的\",{\"1\":{\"709\":1}}],[\"我们如何读取用户的键盘\",{\"1\":{\"677\":1}}],[\"我们期望从这个通道中获取返回的结果\",{\"1\":{\"705\":1}}],[\"我们给通道提供了一个缓存\",{\"1\":{\"703\":1}}],[\"我们给这个类型一个名字\",{\"1\":{\"689\":1}}],[\"我们发现协程之间的同步非常重要\",{\"1\":{\"700\":1}}],[\"我们发现源数据也会被修改\",{\"1\":{\"355\":1}}],[\"我们让\",{\"1\":{\"697\":1}}],[\"我们让这些代码在下面的程序\",{\"1\":{\"676\":1}}],[\"我们用\",{\"1\":{\"692\":1}}],[\"我们应该检查是否有错误发生\",{\"1\":{\"689\":1}}],[\"我们应当能理解\",{\"1\":{\"547\":1}}],[\"我们有一个简单的\",{\"1\":{\"689\":1}}],[\"我们有必要去检验它的正确性\",{\"1\":{\"624\":1}}],[\"我们所测试的代码\",{\"1\":{\"689\":1}}],[\"我们毫不惊讶地看到\",{\"1\":{\"686\":1}}],[\"我们毫无疑问地接受了垃圾回收\",{\"1\":{\"467\":1}}],[\"我们把示例\",{\"1\":{\"686\":1}}],[\"我们首先创建结构\",{\"1\":{\"683\":1}}],[\"我们忽略了很多错误处理\",{\"1\":{\"682\":1}}],[\"我们忽略可能出现的转换错误\",{\"1\":{\"545\":1}}],[\"我们都比较熟悉\",{\"1\":{\"682\":1}}],[\"我们都是用标准库的包\",{\"1\":{\"614\":1}}],[\"我们结合使用了缓冲读取文件和命令行\",{\"1\":{\"682\":1}}],[\"我们以只写模式创建或打开文件\",{\"1\":{\"680\":1}}],[\"我们以只写模式打开文件\",{\"1\":{\"680\":1}}],[\"我们以只读模式打开\",{\"1\":{\"678\":1}}],[\"我们使用了\",{\"1\":{\"697\":1}}],[\"我们使用\",{\"1\":{\"678\":1}}],[\"我们使用第\",{\"1\":{\"660\":1}}],[\"我们总结一下前面看到的\",{\"1\":{\"676\":1}}],[\"我们需要做的是给想要满足接口的类型实现\",{\"1\":{\"673\":1}}],[\"我们来扩展\",{\"1\":{\"673\":1}}],[\"我们来跟踪一段代码\",{\"1\":{\"415\":1}}],[\"我们实现了一个简单的通用输出函数\",{\"1\":{\"670\":1}}],[\"我们实现了一个animal的结构体\",{\"1\":{\"338\":1}}],[\"我们同样能够调用签名在结构上的方法\",{\"1\":{\"670\":1}}],[\"我们为它定义一个\",{\"1\":{\"664\":1}}],[\"我们为它上锁\",{\"1\":{\"625\":1}}],[\"我们也是这么做的\",{\"1\":{\"662\":1}}],[\"我们也可以根据参数返回不同的函数\",{\"1\":{\"676\":1}}],[\"我们也可以使用\",{\"1\":{\"624\":1,\"678\":1}}],[\"我们也可以将\",{\"1\":{\"574\":1}}],[\"我们可能只是想在\",{\"1\":{\"662\":1}}],[\"我们可以用\",{\"1\":{\"691\":1}}],[\"我们可以用有用的信息产生一个错误\",{\"1\":{\"689\":1}}],[\"我们可以用下图来表示内存使用的情况\",{\"1\":{\"547\":1}}],[\"我们可以在\",{\"1\":{\"687\":1}}],[\"我们可以在我们自己的应用程序中调用\",{\"1\":{\"638\":1}}],[\"我们可以定义一个适当的结构并对\",{\"1\":{\"685\":1}}],[\"我们可以定义一个具有此方法的接口\",{\"1\":{\"662\":1}}],[\"我们可以直接使用\",{\"1\":{\"684\":1}}],[\"我们可以输出到屏幕\",{\"1\":{\"680\":1}}],[\"我们可以很方便的操作相对高层的\",{\"1\":{\"678\":1}}],[\"我们可以回到\",{\"1\":{\"675\":1}}],[\"我们可以构建如下的代码\",{\"1\":{\"655\":1}}],[\"我们可以说是工厂实例化了类型的一个对象\",{\"1\":{\"642\":1}}],[\"我们可以这么用\",{\"1\":{\"608\":1}}],[\"我们可以这样声明它\",{\"1\":{\"547\":1}}],[\"我们可以存储任意值\",{\"1\":{\"605\":1}}],[\"我们可以生成如下函数\",{\"1\":{\"574\":1}}],[\"我们可以传递一个切片给函数\",{\"1\":{\"563\":1}}],[\"我们可以通过\",{\"1\":{\"627\":1,\"684\":1}}],[\"我们可以通过这个指针的值来修改这个值所指向的地址上的值\",{\"1\":{\"563\":1}}],[\"我们可以通过它强大的\",{\"1\":{\"467\":1}}],[\"我们可以看到怎么使用它\",{\"1\":{\"688\":1}}],[\"我们可以看到变量\",{\"1\":{\"573\":1}}],[\"我们可以看到\",{\"1\":{\"557\":1,\"574\":1}}],[\"我们可以看到共享内存的方式是可以做到并发\",{\"1\":{\"427\":1}}],[\"我们可以使用类型断言\",{\"1\":{\"684\":1}}],[\"我们可以使用管道\",{\"1\":{\"570\":1}}],[\"我们可以使用\",{\"1\":{\"550\":1,\"587\":1,\"678\":1,\"680\":1}}],[\"我们可以利用这一点\",{\"1\":{\"337\":1}}],[\"我们可以把它修改为其他符号\",{\"1\":{\"166\":1,\"202\":1}}],[\"我们可以切换到mysql对root的密码进行修改\",{\"1\":{\"52\":1}}],[\"我们想定义自己的\",{\"1\":{\"659\":1}}],[\"我们想让它通过\",{\"1\":{\"656\":1}}],[\"我们只是需要\",{\"1\":{\"653\":1}}],[\"我们只需要在之前的代码中作出如下改变\",{\"1\":{\"638\":1}}],[\"我们只需要一条简单的不带参数的\",{\"1\":{\"564\":1}}],[\"我们自己并没有指出是否在指针上调用方法\",{\"1\":{\"653\":1}}],[\"我们创建了一个名为\",{\"1\":{\"630\":1}}],[\"我们创建一个名为\",{\"1\":{\"689\":1}}],[\"我们创建一个写入器\",{\"1\":{\"680\":1}}],[\"我们创建一个\",{\"1\":{\"590\":1}}],[\"我们遇到使用测试工具进行测试的时候我们将重新回到自己的包的制作和编译这个话题\",{\"1\":{\"627\":1}}],[\"我们要重新思考来通过\",{\"1\":{\"625\":1}}],[\"我们要十分小心那些可以改变外部变量的函数\",{\"1\":{\"566\":1}}],[\"我们必须使用两次\",{\"1\":{\"610\":1}}],[\"我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来\",{\"1\":{\"593\":1}}],[\"我们必须先知道\",{\"1\":{\"310\":1}}],[\"我们已经在\",{\"1\":{\"689\":1}}],[\"我们已经在第\",{\"1\":{\"574\":1}}],[\"我们已经见过可以使用\",{\"1\":{\"608\":1}}],[\"我们已经知道切片创建的时候通常比相关数组小\",{\"1\":{\"592\":1}}],[\"我们看到函数重载是不被允许的\",{\"1\":{\"675\":1}}],[\"我们看到\",{\"1\":{\"669\":1,\"678\":1}}],[\"我们看到了一个递归计算\",{\"1\":{\"580\":1}}],[\"我们看到的\",{\"1\":{\"548\":1}}],[\"我们仅仅是利用了这种函数的副作用\",{\"1\":{\"563\":1}}],[\"我们通常会用到以下标志\",{\"1\":{\"680\":1}}],[\"我们通常会根据函数的特征对函数进行命名\",{\"1\":{\"561\":1}}],[\"我们通常把返回多个值称为返回一组值\",{\"1\":{\"562\":1}}],[\"我们通过调用服务中的\",{\"1\":{\"638\":2}}],[\"我们通过\",{\"1\":{\"467\":1,\"562\":1}}],[\"我们通过go语言的管道channel来实现并发请求\",{\"1\":{\"427\":1}}],[\"我们尝试通过\",{\"1\":{\"550\":1}}],[\"我们一般使用以下形式来进行从字符串到其它类型的转换\",{\"1\":{\"545\":1}}],[\"我们接下来也会带你一步步地完成安装过程\",{\"1\":{\"483\":1}}],[\"我们当时需要\",{\"1\":{\"467\":1}}],[\"我们当时学习的时候\",{\"1\":{\"272\":1}}],[\"我们就会执行\",{\"1\":{\"678\":1}}],[\"我们就会用到\",{\"1\":{\"662\":1}}],[\"我们就使用\",{\"1\":{\"678\":1}}],[\"我们就调用内建的\",{\"1\":{\"672\":1}}],[\"我们就为斐波那契算法提供了\",{\"1\":{\"467\":1}}],[\"我们就证明了已经通过组合实现了继承\",{\"1\":{\"338\":1}}],[\"我们先来看看几个实际应用\",{\"1\":{\"847\":1}}],[\"我们先将\",{\"1\":{\"450\":1}}],[\"我们先复习一下channel都有哪些特性\",{\"1\":{\"400\":1}}],[\"我们将重点讨论这些算法的实际使用问题\",{\"1\":{\"858\":1}}],[\"我们将介绍\",{\"1\":{\"844\":1}}],[\"我们将定义\",{\"1\":{\"685\":1}}],[\"我们将讨论前三种格式\",{\"1\":{\"682\":1}}],[\"我们将看到如何使用缓冲写入\",{\"1\":{\"682\":1}}],[\"我们将\",{\"1\":{\"678\":1}}],[\"我们将从现在开始使用这种写法\",{\"1\":{\"677\":1}}],[\"我们将使用\",{\"1\":{\"638\":1,\"682\":1}}],[\"我们将使用谷歌的\",{\"1\":{\"638\":1}}],[\"我们将通过在终端调用以下命令来安装\",{\"1\":{\"638\":1}}],[\"我们将开发自己版本的\",{\"1\":{\"638\":1}}],[\"我们将回顾一些标准库中的包\",{\"1\":{\"627\":1}}],[\"我们将在\",{\"1\":{\"687\":1}}],[\"我们将在下面的例子里使用\",{\"1\":{\"682\":1}}],[\"我们将在下一章\",{\"1\":{\"645\":1}}],[\"我们将在第3章深入探讨每种标准claims\",{\"1\":{\"845\":1}}],[\"我们将在第\",{\"1\":{\"625\":1,\"846\":1,\"857\":1,\"860\":1}}],[\"我们将在字符串中对正则表达式模式\",{\"1\":{\"624\":1}}],[\"我们将在后面的章节使用它\",{\"1\":{\"623\":1}}],[\"我们将在这个部分讲解有关布尔型\",{\"1\":{\"520\":1}}],[\"我们将第一个与第三个返回值赋给了\",{\"1\":{\"565\":1}}],[\"我们将对其进行回顾\",{\"1\":{\"858\":1}}],[\"我们将对\",{\"1\":{\"560\":1}}],[\"我们将会看到\",{\"1\":{\"574\":1}}],[\"我们将会根据一个客户端\",{\"1\":{\"572\":1}}],[\"我们将会利用\",{\"1\":{\"545\":1}}],[\"我们将会学习到像\",{\"1\":{\"515\":1}}],[\"我们将会在\",{\"1\":{\"546\":1}}],[\"我们将会在第\",{\"1\":{\"476\":1,\"550\":1}}],[\"我们将会在本书中用\",{\"1\":{\"467\":1}}],[\"我们将会带领你贯穿\",{\"1\":{\"467\":1}}],[\"我们将会讨论如何在\",{\"1\":{\"482\":1}}],[\"我们将会讨论\",{\"1\":{\"467\":1}}],[\"我们将探索编译和运行的过程\",{\"1\":{\"447\":1}}],[\"我们将不能再依赖数据库自身的主键生成机制\",{\"1\":{\"257\":1}}],[\"我们称这个指针发生了逃逸\",{\"1\":{\"445\":1}}],[\"我们称这些键发生了冲突\",{\"1\":{\"367\":1}}],[\"我们假设数组大小为\",{\"1\":{\"438\":1}}],[\"我们后续使用go的消息传递方式避免这些问题\",{\"1\":{\"427\":1}}],[\"我们不想在内存中拷贝它\",{\"1\":{\"680\":1}}],[\"我们不使用缓冲区\",{\"1\":{\"680\":1}}],[\"我们不需要关心操作系统的类型\",{\"1\":{\"678\":1}}],[\"我们不能使用浮点数\",{\"1\":{\"626\":1}}],[\"我们不能依赖用户代码主动让出cpu\",{\"1\":{\"412\":1}}],[\"我们不会深入讨论他们的内部结构\",{\"1\":{\"614\":1}}],[\"我们不可以再次对于相同名称的变量使用初始化声明\",{\"1\":{\"518\":1}}],[\"我们不断地被人们使用搜索的新奇方式所震撼\",{\"1\":{\"6\":1}}],[\"我们是期望把他既有未执行的任务分配给其他继续运行的\",{\"1\":{\"410\":1}}],[\"我们再更显式的讲一下\",{\"1\":{\"410\":1}}],[\"我们知道方法将指针作为接收者不是必须的\",{\"1\":{\"653\":1}}],[\"我们知道有些时候通过编程的方式去进行计算是不精确的\",{\"1\":{\"626\":1}}],[\"我们知道可以在变量的初始化时省略变量的类型而由系统自动推断\",{\"1\":{\"518\":1}}],[\"我们知道\",{\"1\":{\"387\":1,\"449\":1,\"595\":1}}],[\"我们注意到\",{\"1\":{\"383\":1}}],[\"我们声明了一个接口类型\",{\"1\":{\"316\":1}}],[\"我们声明了一个结构体\",{\"1\":{\"314\":1}}],[\"我们声明了\",{\"1\":{\"315\":1}}],[\"我们认为这种方法易于使用\",{\"1\":{\"312\":1}}],[\"我们梳理出\",{\"1\":{\"310\":1}}],[\"我们尽量使用count\",{\"1\":{\"303\":1}}],[\"我们在命令行运行\",{\"1\":{\"681\":1}}],[\"我们在一个无限循环中使用\",{\"1\":{\"678\":1}}],[\"我们在前面章节使用到过标准输入\",{\"1\":{\"678\":1}}],[\"我们在某个类型的变量上使用点号调用一个方法\",{\"1\":{\"659\":1}}],[\"我们在使用时忽略对错误的判断是因为我们确信自己正则表达式是有效的\",{\"1\":{\"624\":1}}],[\"我们在日常的编码过程中可能会遇到要求时间+时间间隔的需求\",{\"1\":{\"622\":1}}],[\"我们在第\",{\"1\":{\"601\":1,\"694\":1,\"858\":1}}],[\"我们在第二个版本中对代码进行了改进\",{\"1\":{\"550\":1}}],[\"我们在函数内修改了这个\",{\"1\":{\"566\":1}}],[\"我们在\",{\"1\":{\"483\":1,\"681\":1}}],[\"我们在编写\",{\"1\":{\"276\":1}}],[\"我们在开发软件的时候往往需要进行版本管理\",{\"1\":{\"164\":1,\"200\":1}}],[\"我们还需要\",{\"1\":{\"680\":1}}],[\"我们还需要用到\",{\"1\":{\"677\":1}}],[\"我们还可以使用携带返回值的\",{\"1\":{\"550\":1}}],[\"我们还可以自定义私有字段\",{\"1\":{\"35\":1}}],[\"我们还应该记得把它给修改回来\",{\"1\":{\"166\":1,\"202\":1}}],[\"我们直接通过调用存储过程名即可\",{\"1\":{\"162\":1,\"198\":1}}],[\"我们会省略变量声明\",{\"1\":{\"677\":1}}],[\"我们会读取键盘输入\",{\"1\":{\"677\":1}}],[\"我们会学习如何进行有价值的优化操作\",{\"1\":{\"576\":1}}],[\"我们会学习到许多有关字符串操作的函数和方法\",{\"1\":{\"532\":1}}],[\"我们会在接下来的部分讨论\",{\"1\":{\"704\":1}}],[\"我们会在\",{\"1\":{\"689\":1}}],[\"我们会在后面的章节中对它们进行逐个深入的讲解\",{\"1\":{\"569\":1}}],[\"我们会在第\",{\"1\":{\"553\":1,\"600\":1,\"694\":1}}],[\"我们会在本书的第四部分向你展示许多\",{\"1\":{\"467\":1}}],[\"我们会讲到通过将字符串看作是字节\",{\"1\":{\"532\":1}}],[\"我们会使用\",{\"1\":{\"521\":1,\"551\":1}}],[\"我们会看到\",{\"1\":{\"475\":1}}],[\"我们会专注于一些特别的章节以提供\",{\"1\":{\"467\":1}}],[\"我们会经常涉及到一些关于\",{\"1\":{\"467\":1}}],[\"我们会讨论两个重要的例子\",{\"1\":{\"662\":1}}],[\"我们会讨论一些在全世界范围内已经将\",{\"1\":{\"467\":1}}],[\"我们会讨论如何将\",{\"1\":{\"467\":1}}],[\"我们会对\",{\"1\":{\"467\":1}}],[\"我们会对权限表中的记录进行分组\",{\"1\":{\"72\":1}}],[\"我们会引入一张角色表\",{\"1\":{\"72\":1}}],[\"我们希望不同的用户能操作和查看不同的功能\",{\"1\":{\"72\":1}}],[\"我们平时使用的权限其实是有分类的\",{\"1\":{\"70\":1}}],[\"呢\",{\"1\":{\"63\":1,\"649\":1}}],[\"那我们该如何解决这个问题呢\",{\"1\":{\"625\":1}}],[\"那我就把你分配到堆上\",{\"1\":{\"445\":1}}],[\"那些退出函数也是如此\",{\"1\":{\"689\":1}}],[\"那些类型的方法可以直接在外层类型中使用\",{\"1\":{\"656\":1}}],[\"那些只处理纯字节的语言显然要比处理\",{\"1\":{\"499\":1}}],[\"那些可以过滤掉最大数量记录的条件必须写在\",{\"1\":{\"271\":1}}],[\"那样互相转换\",{\"1\":{\"640\":1}}],[\"那样的\",{\"1\":{\"687\":1}}],[\"那样的文本格式\",{\"1\":{\"686\":1}}],[\"那样的运算符重载\",{\"1\":{\"520\":1}}],[\"那样的静态语言一般都有非常漫长的编译和链接工作\",{\"1\":{\"473\":1}}],[\"那样通过实现过程来定义编码规范\",{\"1\":{\"474\":1}}],[\"那就必须传递\",{\"1\":{\"669\":1}}],[\"那就是\",{\"1\":{\"638\":1}}],[\"那就是函数\",{\"1\":{\"561\":1}}],[\"那就使用\",{\"1\":{\"491\":1}}],[\"那就意味着本地队列也会随之增加\",{\"1\":{\"410\":1}}],[\"那就定义指针接收者的方法\",{\"1\":{\"382\":1}}],[\"那就定义值接收者类型的方法\",{\"1\":{\"382\":1}}],[\"那为什么不直接在\",{\"1\":{\"410\":1}}],[\"那是在不考虑内存对齐的情况下\",{\"1\":{\"354\":1}}],[\"那value呢\",{\"1\":{\"337\":1}}],[\"那最流行的为什么还是\",{\"1\":{\"63\":1}}],[\"那么使用signatures就是多余的\",{\"1\":{\"854\":1}}],[\"那么使用这种形式的标识符的对象就可以被外部包的代码所使用\",{\"1\":{\"506\":1}}],[\"那么是应该进行内存分析的时候了\",{\"1\":{\"692\":1}}],[\"那么写一个帮助函数\",{\"1\":{\"689\":1}}],[\"那么对实际的错误使用类型断言或类型判断\",{\"1\":{\"688\":1}}],[\"那么对于其他类型的数组呢\",{\"1\":{\"664\":1}}],[\"那么对于客户端\",{\"1\":{\"39\":1}}],[\"那么你输入什么屏幕就打印什么\",{\"1\":{\"682\":1}}],[\"那么你也可能需要这个结构体的\",{\"1\":{\"676\":1}}],[\"那么会输出\",{\"1\":{\"681\":1}}],[\"那么下面的语句和类型断言是合法的\",{\"1\":{\"667\":1}}],[\"那么下次请求就必须请求这台服务器\",{\"1\":{\"29\":1}}],[\"那么一共有\",{\"1\":{\"660\":1}}],[\"那么方法调用遵循传统的\",{\"1\":{\"651\":1}}],[\"那么面向对象程序员可能会问\",{\"1\":{\"651\":1}}],[\"那么表达式\",{\"1\":{\"642\":1}}],[\"那么我们需要一个云端的源码的版本控制系统\",{\"1\":{\"635\":1}}],[\"那么我们就可以认为他是\",{\"1\":{\"316\":1}}],[\"那么通过下面的方法可以简单的做到键值对调\",{\"1\":{\"612\":1}}],[\"那么最好使用结构体切片\",{\"1\":{\"611\":1}}],[\"那么最好是专门弄个人来研究和维护\",{\"1\":{\"252\":1}}],[\"那么如果一个\",{\"1\":{\"607\":1}}],[\"那么执行完\",{\"1\":{\"591\":1}}],[\"那么只要\",{\"1\":{\"587\":1}}],[\"那么可读性是很差的\",{\"1\":{\"682\":1}}],[\"那么可以知道任何类型的变量都是满足\",{\"1\":{\"675\":1}}],[\"那么可以命名它为\",{\"1\":{\"640\":1}}],[\"那么可以通过\",{\"1\":{\"581\":1}}],[\"那么可想而知\",{\"1\":{\"438\":1}}],[\"那么这种方式和\",{\"1\":{\"580\":1}}],[\"那么这个函数就可以处理一个变长的参数\",{\"1\":{\"567\":1}}],[\"那么这个函数里面的每一个代码分支\",{\"1\":{\"562\":1}}],[\"那么这个值的所有引用都会指向被修改后的内容\",{\"1\":{\"516\":1}}],[\"那么这个结构可以直接访问多个匿名结构体的属性和方法\",{\"1\":{\"338\":1}}],[\"那么这个结构可以直接访问匿名结构体的属性和方法\",{\"1\":{\"338\":1}}],[\"那么这个模式叫做组合\",{\"1\":{\"338\":1}}],[\"那么灵活\",{\"1\":{\"578\":1}}],[\"那么类型为\",{\"1\":{\"524\":1}}],[\"那么另外一个值的类型必须和该常量类型相兼容的\",{\"1\":{\"521\":1}}],[\"那么在\",{\"1\":{\"549\":1}}],[\"那么在当前包中导入\",{\"1\":{\"506\":1}}],[\"那么在函数中\",{\"1\":{\"389\":1}}],[\"那么在函数中对参数所进行的修改\",{\"1\":{\"329\":1}}],[\"那么当你在之后使用\",{\"1\":{\"483\":1}}],[\"那么还是会被分配到栈上\",{\"1\":{\"445\":1}}],[\"那么它必须使用为其client\",{\"1\":{\"881\":1}}],[\"那么它将得到这个指针指向地址上所存储的值\",{\"1\":{\"547\":1}}],[\"那么它就会发生逃逸\",{\"1\":{\"445\":1}}],[\"那么它就有可能被分配到堆上\",{\"1\":{\"442\":1}}],[\"那么它就变成了方法\",{\"1\":{\"380\":1}}],[\"那么它也应该被分配到堆上而不是栈上\",{\"1\":{\"442\":1}}],[\"那么就可以不需要赋值语句\",{\"1\":{\"662\":1}}],[\"那么就可以写如下的代码\",{\"1\":{\"662\":1}}],[\"那么就可以直接通过\",{\"1\":{\"595\":1}}],[\"那么就会认为条件永远为\",{\"1\":{\"556\":1}}],[\"那么就会产生临时性的内存泄漏\",{\"1\":{\"438\":1}}],[\"那么就把你丢到栈上\",{\"1\":{\"445\":1}}],[\"那么就无法插入\",{\"1\":{\"288\":1}}],[\"那么该线程将循环等待\",{\"1\":{\"421\":1}}],[\"那么该集合就称为键码\",{\"1\":{\"287\":1}}],[\"那么没有竞争\",{\"1\":{\"420\":1}}],[\"那么其他操作也是原子操作\",{\"1\":{\"418\":1}}],[\"那么引入新的组件\",{\"1\":{\"410\":1}}],[\"那么发送数据的变量地址将写入写等待队列\",{\"1\":{\"398\":1}}],[\"那么接收数据的变量地址将会写入读等待队列\",{\"1\":{\"398\":1}}],[\"那么为什么go相比于其他程序会更稳定呢\",{\"1\":{\"320\":1}}],[\"那么采用主键索引的效率更高\",{\"1\":{\"303\":1}}],[\"那么也会丢失其它信息\",{\"1\":{\"288\":1}}],[\"那么整个查询缓存就无法使用\",{\"1\":{\"268\":1}}],[\"那么基于base事务要素的事务则称为柔性事务\",{\"1\":{\"242\":1}}],[\"那么\",{\"1\":{\"226\":1,\"238\":1,\"287\":1,\"288\":1,\"420\":1,\"439\":1,\"499\":1,\"571\":1,\"580\":1,\"585\":2,\"587\":1,\"592\":1,\"602\":1,\"605\":2,\"653\":1,\"668\":2,\"669\":1,\"680\":1}}],[\"配套一个\",{\"1\":{\"316\":1}}],[\"配置全局系统变量\",{\"0\":{\"981\":1}}],[\"配置全局安装模块\",{\"0\":{\"979\":1}}],[\"配置缓存目录\",{\"0\":{\"980\":1}}],[\"配置自定义环境变量\",{\"1\":{\"483\":1}}],[\"配置说明请参考\",{\"1\":{\"284\":1}}],[\"配置优化主要是针对\",{\"1\":{\"284\":1}}],[\"配置优化\",{\"0\":{\"284\":1},\"1\":{\"262\":1}}],[\"配置管理系统\",{\"1\":{\"251\":1}}],[\"配置了不生效\",{\"1\":{\"4\":2}}],[\"配合规则解析引擎使用\",{\"1\":{\"63\":1}}],[\"上传\",{\"1\":{\"782\":1}}],[\"上传镜像\",{\"1\":{\"782\":1}}],[\"上例除了\",{\"1\":{\"687\":1}}],[\"上例中\",{\"1\":{\"380\":2}}],[\"上调用\",{\"1\":{\"662\":4}}],[\"上定义这个方法\",{\"1\":{\"659\":1}}],[\"上定义如下方法\",{\"1\":{\"651\":1}}],[\"上存在方法\",{\"1\":{\"653\":1}}],[\"上你必须先自行安装\",{\"1\":{\"635\":1}}],[\"上的方法\",{\"1\":{\"662\":1}}],[\"上的所有方法的集合叫做类型\",{\"1\":{\"651\":1}}],[\"上的一个函数\",{\"1\":{\"651\":1}}],[\"上的用户名\",{\"1\":{\"636\":1}}],[\"上的包页面\",{\"1\":{\"635\":1}}],[\"上的安装和\",{\"1\":{\"482\":1}}],[\"上的\",{\"1\":{\"469\":1,\"476\":1,\"651\":1}}],[\"上的其他\",{\"1\":{\"330\":1}}],[\"上来作为\",{\"1\":{\"469\":1}}],[\"上本地\",{\"1\":{\"421\":1}}],[\"上\",{\"1\":{\"410\":2,\"442\":1,\"601\":1,\"672\":1,\"708\":1}}],[\"上加呢\",{\"1\":{\"410\":1}}],[\"上下文控制\",{\"1\":{\"394\":1}}],[\"上图可见\",{\"1\":{\"373\":1}}],[\"上操作则会报错\",{\"1\":{\"331\":1}}],[\"上运行一个函数需要最小的代码\",{\"1\":{\"320\":1}}],[\"上手非常快\",{\"1\":{\"320\":1}}],[\"上述例子能够正常包含调用\",{\"1\":{\"315\":1}}],[\"上述虽然增加了角色表\",{\"1\":{\"73\":1}}],[\"上面使用了\",{\"1\":{\"689\":1}}],[\"上面概述的原理被应用于整个\",{\"1\":{\"676\":1}}],[\"上面\",{\"1\":{\"662\":1}}],[\"上面脚本内的\",{\"1\":{\"627\":1}}],[\"上面例子中的\",{\"1\":{\"605\":1}}],[\"上面这行是jfilechooser\",{\"1\":{\"728\":1}}],[\"上面这行假设了变量\",{\"1\":{\"518\":1}}],[\"上面这段代码只能找到第一个匹配正则表达式的数字串\",{\"1\":{\"602\":1}}],[\"上面这个例子通过打印\",{\"1\":{\"508\":1}}],[\"上面这两段文字只是对调度的一个概括\",{\"1\":{\"412\":1}}],[\"上面用来判断\",{\"1\":{\"340\":1}}],[\"上面的例子帮助我们进一步了解了接口的意义和使用方式\",{\"1\":{\"662\":1}}],[\"上面的程序定义了一个结构体\",{\"1\":{\"662\":1}}],[\"上面的程序会给出已分配内存的总量\",{\"1\":{\"661\":1}}],[\"上面的代码来自于\",{\"1\":{\"682\":1}}],[\"上面的代码还可以修改为更加简便的版本\",{\"1\":{\"568\":1}}],[\"上面的代码将会输出\",{\"1\":{\"568\":1}}],[\"上面的代码会输出\",{\"1\":{\"559\":1}}],[\"上面的代码会将源文件中符合条件的函数的参数调换位置\",{\"1\":{\"496\":1}}],[\"上面的代码会将源文件中多余的\",{\"1\":{\"496\":1}}],[\"上面的代码会将源文件中没有意义的括号去掉\",{\"1\":{\"496\":1}}],[\"上面的\",{\"1\":{\"292\":1,\"662\":1}}],[\"上面创建索引\",{\"1\":{\"106\":1}}],[\"上建立哈希索引\",{\"1\":{\"217\":1}}],[\"上课时间\",{\"1\":{\"63\":1}}],[\"上安装\",{\"0\":{\"483\":1,\"484\":1,\"485\":1},\"1\":{\"52\":1,\"482\":1}}],[\"班主任\",{\"1\":{\"63\":1}}],[\"允许在特殊用例中强制标头携带更多声明\",{\"1\":{\"861\":1}}],[\"允许在同一个\",{\"1\":{\"849\":1}}],[\"允许通过共享秘密来验证信息\",{\"1\":{\"860\":1}}],[\"允许类型检查\",{\"1\":{\"699\":1}}],[\"允许运行其他协程\",{\"1\":{\"694\":1}}],[\"允许\",{\"1\":{\"676\":1}}],[\"允许我们进行一些函数执行完成后的收尾工作\",{\"1\":{\"568\":1}}],[\"允许我们推迟到函数返回之前\",{\"1\":{\"568\":1}}],[\"允许不同的对象对同一消息做出灵活的反应\",{\"1\":{\"391\":1}}],[\"允许一个用户具有两个角色的成员资格\",{\"1\":{\"68\":1}}],[\"允许角色间的多继承\",{\"1\":{\"67\":1}}],[\"允许所有班主任在上课时间自由进出校门\",{\"1\":{\"63\":1}}],[\"允许使用声明进行数字签名\",{\"1\":{\"39\":1}}],[\"又如何检测到通道是否关闭或阻塞\",{\"1\":{\"709\":1}}],[\"又开启了一个新的协程\",{\"1\":{\"709\":1}}],[\"又可以发挥相当大的作用\",{\"1\":{\"672\":1}}],[\"又可以将该对象的权限分配给其他用户\",{\"1\":{\"61\":1}}],[\"又会反过来调用\",{\"1\":{\"660\":1}}],[\"又是一个原始类型\",{\"1\":{\"607\":1}}],[\"又分别是多少\",{\"1\":{\"588\":1}}],[\"又依赖\",{\"1\":{\"506\":1}}],[\"又有\",{\"1\":{\"469\":1}}],[\"又希望定制扩展融入自己的治理体系\",{\"1\":{\"462\":1}}],[\"又希望框架能够充分满足内部的可定制化需求\",{\"1\":{\"461\":1}}],[\"又名\",{\"1\":{\"419\":1}}],[\"又不够用的情况下\",{\"1\":{\"410\":1}}],[\"又用于查找行\",{\"1\":{\"225\":1}}],[\"又包含商家的系统\",{\"1\":{\"73\":1}}],[\"又称读锁\",{\"1\":{\"232\":1}}],[\"又称写锁\",{\"1\":{\"232\":1}}],[\"又称为\",{\"1\":{\"113\":1,\"247\":1}}],[\"又称为rbac0\",{\"1\":{\"65\":1}}],[\"又称资源属性\",{\"1\":{\"63\":1}}],[\"被授权方\",{\"1\":{\"887\":1}}],[\"被解释为包含\",{\"1\":{\"852\":1}}],[\"被解引用到\",{\"1\":{\"682\":1}}],[\"被视为有效的确切时间\",{\"1\":{\"852\":1}}],[\"被视为无效的确切时间\",{\"1\":{\"852\":1}}],[\"被反引号包围\",{\"1\":{\"757\":1}}],[\"被调用越多\",{\"1\":{\"692\":1}}],[\"被调用或者程序中止\",{\"1\":{\"689\":1}}],[\"被用默认的格式格式化并打印到错误日志中\",{\"1\":{\"689\":1}}],[\"被用于\",{\"1\":{\"682\":1}}],[\"被中止\",{\"1\":{\"687\":1}}],[\"被存储在变量\",{\"1\":{\"684\":1}}],[\"被广泛的应用\",{\"1\":{\"682\":1}}],[\"被作为首选\",{\"1\":{\"682\":1}}],[\"被设置成\",{\"1\":{\"682\":1}}],[\"被设计用来实现协程间通信的组件\",{\"1\":{\"442\":1}}],[\"被按下\",{\"1\":{\"677\":1}}],[\"被实现了\",{\"1\":{\"671\":1}}],[\"被定义为\",{\"1\":{\"668\":1}}],[\"被依次赋予一个\",{\"1\":{\"663\":1}}],[\"被依赖的包也会安装到子目录下\",{\"1\":{\"629\":1}}],[\"被单独编译\",{\"1\":{\"662\":1}}],[\"被从内存移除前执行一些特殊操作\",{\"1\":{\"661\":1}}],[\"被明确的导出了\",{\"1\":{\"654\":1}}],[\"被包含在\",{\"1\":{\"626\":1}}],[\"被填充前就定义好\",{\"1\":{\"585\":1}}],[\"被赋予实际的值\",{\"1\":{\"581\":1}}],[\"被初始化为相应类型的零值\",{\"1\":{\"564\":1}}],[\"被注释的代码具有和未注释部分同样的功能\",{\"1\":{\"563\":1}}],[\"被跳过了\",{\"1\":{\"558\":1}}],[\"被平行初始化\",{\"1\":{\"551\":1}}],[\"被指向的变量也保存在内存中\",{\"1\":{\"547\":1}}],[\"被引用的变量会存储在堆中\",{\"1\":{\"516\":1}}],[\"被复制\",{\"1\":{\"516\":1}}],[\"被导出后\",{\"1\":{\"515\":1}}],[\"被称为切片表达式\",{\"1\":{\"585\":1}}],[\"被称为因式分解关键字\",{\"1\":{\"506\":1}}],[\"被称为空白标识符\",{\"1\":{\"504\":1}}],[\"被添加的对象标记为灰色\",{\"1\":{\"429\":1}}],[\"被删除的对象标记为灰色\",{\"1\":{\"429\":1}}],[\"被唤醒的\",{\"1\":{\"420\":1}}],[\"被系统调用阻塞后\",{\"1\":{\"410\":1}}],[\"被取消的原因\",{\"1\":{\"394\":1}}],[\"被取消或者超时时候返回的一个\",{\"1\":{\"394\":1}}],[\"被阻塞了\",{\"1\":{\"330\":1}}],[\"被封装\",{\"1\":{\"310\":1}}],[\"被\",{\"1\":{\"296\":1}}],[\"被其他表所引用的表放在最后\",{\"1\":{\"270\":1}}],[\"被一些人称为是权限系统设计的未来\",{\"1\":{\"63\":1}}],[\"被通过jws结构或者jwe结构\",{\"1\":{\"39\":1}}],[\"控制台\",{\"1\":{\"677\":1}}],[\"控制台及openapi所使用的http端口\",{\"1\":{\"4\":1}}],[\"控制结构\",{\"0\":{\"548\":1},\"1\":{\"467\":1}}],[\"控制任务并发的chan\",{\"1\":{\"424\":1}}],[\"控制主协程等待所有子协程执行完之后再退出\",{\"1\":{\"424\":1}}],[\"控制的权限有\",{\"1\":{\"90\":1}}],[\"控制\",{\"1\":{\"61\":1}}],[\"添加\",{\"1\":{\"827\":1}}],[\"添加到暂存区\",{\"0\":{\"813\":1}}],[\"添加这个过滤器\",{\"1\":{\"729\":1}}],[\"添加文件过滤\",{\"1\":{\"725\":1}}],[\"添加文章\",{\"1\":{\"60\":1}}],[\"添加文章的操作\",{\"1\":{\"60\":1}}],[\"添加新接口非常容易\",{\"1\":{\"676\":1}}],[\"添加一个选项\",{\"1\":{\"682\":1}}],[\"添加一个\",{\"1\":{\"662\":1}}],[\"添加所有文件到仓库\",{\"1\":{\"635\":1}}],[\"添加元素时\",{\"1\":{\"354\":1}}],[\"添加主键\",{\"0\":{\"110\":1}}],[\"添加列\",{\"0\":{\"100\":1}}],[\"添加配置文件\",{\"1\":{\"46\":1}}],[\"指导的很赞的例子\",{\"1\":{\"709\":1}}],[\"指导设计原则\",{\"0\":{\"474\":1}}],[\"指不同线程对同一变量使用的竞争\",{\"1\":{\"625\":1}}],[\"指示元素从队列的该位置读出\",{\"1\":{\"405\":1}}],[\"指示元素写入时存放到队列中的位置\",{\"1\":{\"405\":1}}],[\"指示某列不能存储\",{\"1\":{\"112\":1}}],[\"指针位置使用head\",{\"1\":{\"821\":1}}],[\"指针位置指向历史记录\",{\"1\":{\"821\":1}}],[\"指针位置\",{\"1\":{\"821\":1}}],[\"指针可以被编码\",{\"1\":{\"682\":1}}],[\"指针方法可以通过指针调用\",{\"1\":{\"662\":1}}],[\"指针方法和值方法都可以在指针或非指针上被调用\",{\"1\":{\"653\":1}}],[\"指针或值作为接收者\",{\"0\":{\"653\":1}}],[\"指针也是变量类型\",{\"1\":{\"563\":1}}],[\"指针也可以指向另一个指针\",{\"1\":{\"547\":1}}],[\"指针等\",{\"1\":{\"551\":1}}],[\"指针传递是很廉价的\",{\"1\":{\"547\":1}}],[\"指针的值\",{\"1\":{\"563\":1}}],[\"指针的过度频繁使用也会导致性能下降\",{\"1\":{\"547\":1}}],[\"指针的一个高级应用是你可以传递一个变量的引用\",{\"1\":{\"547\":1}}],[\"指针的格式化标识符为\",{\"1\":{\"547\":1}}],[\"指针对于使用面向对象编程的现代程序员来说可能显得有些陌生\",{\"1\":{\"547\":1}}],[\"指针对于性能的影响是不言而喻的\",{\"1\":{\"547\":1}}],[\"指针更是不可或缺的一部分\",{\"1\":{\"547\":1}}],[\"指针\",{\"0\":{\"547\":1},\"1\":{\"516\":1,\"653\":1,\"676\":1,\"685\":1}}],[\"指针为\",{\"1\":{\"515\":1,\"640\":1}}],[\"指针被解引用为值\",{\"1\":{\"380\":1}}],[\"指针类型调用者\",{\"1\":{\"380\":1}}],[\"指针类型既可以调用指针接收者的方法\",{\"1\":{\"380\":1}}],[\"指针接收者\",{\"1\":{\"380\":1}}],[\"指针指向后继节点\",{\"1\":{\"640\":1}}],[\"指针指向的是下一个bucket\",{\"1\":{\"365\":1}}],[\"指针指向底层数组\",{\"1\":{\"354\":1}}],[\"指向接口值的指针是非法的\",{\"1\":{\"662\":1}}],[\"指向相关数组的指针\",{\"1\":{\"585\":1}}],[\"指向\",{\"1\":{\"547\":1}}],[\"指向底层循环数组的指针\",{\"1\":{\"398\":1}}],[\"指向的值是一个\",{\"1\":{\"684\":1}}],[\"指向的值\",{\"1\":{\"683\":1}}],[\"指向的底层是整个文件的数据\",{\"1\":{\"602\":1}}],[\"指向的\",{\"1\":{\"390\":1}}],[\"指向的还是原来的\",{\"1\":{\"354\":1}}],[\"指向类型信息\",{\"1\":{\"384\":1}}],[\"指向一个\",{\"1\":{\"383\":1}}],[\"指向一个新的底层数组\",{\"1\":{\"353\":1}}],[\"指向一个函数栈的顶部\",{\"1\":{\"348\":1}}],[\"指向静态数据的基指针\",{\"1\":{\"348\":1}}],[\"指向下一条执行指令\",{\"1\":{\"348\":1}}],[\"指向儿子\",{\"1\":{\"214\":1}}],[\"指在调用函数时将实际参数复制一份传递到函数中\",{\"1\":{\"329\":1}}],[\"指的同一个行为具有多种不同表现形式或形态的能力\",{\"1\":{\"316\":1}}],[\"指的是其他语言中的协程概念\",{\"1\":{\"698\":1}}],[\"指的是\",{\"1\":{\"698\":1}}],[\"指的是可以编写多个同名函数\",{\"1\":{\"561\":1}}],[\"指的是可以隐藏对象的内部属性和实现细节\",{\"1\":{\"314\":1}}],[\"指的是子类继承父类的特征和行为\",{\"1\":{\"315\":1}}],[\"指令用于创建触发器\",{\"1\":{\"167\":1,\"203\":1}}],[\"指令用于创建保留点\",{\"1\":{\"151\":1,\"187\":1}}],[\"指令用于回滚到指定的保留点\",{\"1\":{\"151\":1,\"187\":1}}],[\"指令用于标记事务的起始点\",{\"1\":{\"151\":1,\"187\":1}}],[\"指数\",{\"1\":{\"149\":1,\"182\":1}}],[\"指定请求授权服务器用于处理此身份验证请求的acr值\",{\"1\":{\"873\":1}}],[\"指定自op最后一次主动验证终端用户以来允许的运行时间\",{\"1\":{\"873\":1}}],[\"指定授权服务器如何向最终用户显示身份验证和同意用户界面页面的ascii字符串值\",{\"1\":{\"873\":1}}],[\"指定身份验证上下文类参考值的字符串\",{\"1\":{\"869\":1}}],[\"指定返回一个\",{\"1\":{\"688\":1}}],[\"指定格式\",{\"1\":{\"682\":2}}],[\"指定的字符\",{\"1\":{\"677\":1}}],[\"指定输出文件名\",{\"1\":{\"481\":1}}],[\"指定编译过程中命令执行的并行数\",{\"1\":{\"449\":1}}],[\"指定游标循环结束时的返回值\",{\"1\":{\"168\":1,\"204\":1}}],[\"指定在哪张表上建立触发器\",{\"1\":{\"167\":1,\"203\":1}}],[\"指定多个列的排序示例\",{\"1\":{\"134\":1}}],[\"指定针对某个列的多个可能值\",{\"1\":{\"131\":1}}],[\"指定端口映射\",{\"1\":{\"1\":1}}],[\"指要想获得较高的权限\",{\"1\":{\"68\":1}}],[\"指操作所针对的客体对象\",{\"1\":{\"60\":1}}],[\"操作解决即可\",{\"1\":{\"830\":1}}],[\"操作触发的\",{\"1\":{\"688\":1}}],[\"操作完成后检查\",{\"1\":{\"635\":1}}],[\"操作也作为一个参数\",{\"1\":{\"627\":1}}],[\"操作来表示任意可变长度的序列\",{\"1\":{\"601\":1}}],[\"操作系统或者网络应用\",{\"1\":{\"547\":1}}],[\"操作系统上\",{\"1\":{\"482\":1}}],[\"操作系统上使用的\",{\"1\":{\"481\":1}}],[\"操作系统与处理器架构\",{\"1\":{\"482\":1}}],[\"操作系统和并行都有着非常深刻的见解\",{\"1\":{\"469\":1}}],[\"操作系统和\",{\"1\":{\"469\":1}}],[\"操作至少要有一个\",{\"1\":{\"331\":1}}],[\"操作的问题\",{\"1\":{\"330\":1}}],[\"操作导致\",{\"1\":{\"330\":1}}],[\"操作变多\",{\"1\":{\"283\":1}}],[\"操作减少\",{\"1\":{\"283\":1}}],[\"操作时\",{\"1\":{\"235\":1}}],[\"操作符比较的类型\",{\"1\":{\"605\":1}}],[\"操作符以引用方式传过来\",{\"1\":{\"580\":1}}],[\"操作符\",{\"1\":{\"547\":1,\"640\":1}}],[\"操作符用于否定一个条件\",{\"1\":{\"132\":1}}],[\"操作符表示左右条件满足任意一个即可\",{\"1\":{\"132\":1}}],[\"操作符表示左右条件都要满足\",{\"1\":{\"132\":1}}],[\"操作符在\",{\"1\":{\"131\":2,\"133\":1}}],[\"操作数据量的数据量也是非常庞大\",{\"1\":{\"72\":1}}],[\"操作权限\",{\"1\":{\"70\":1}}],[\"操作属性\",{\"1\":{\"63\":1}}],[\"操作\",{\"1\":{\"60\":1,\"103\":1,\"211\":1,\"330\":1,\"821\":1}}],[\"前两个元素是具有特定结构的\",{\"1\":{\"849\":1}}],[\"前两个方向一般是普通开发的考量点\",{\"1\":{\"262\":1}}],[\"前提是客户端类型是机密的\",{\"1\":{\"873\":1}}],[\"前提是这个值可以被修改\",{\"1\":{\"328\":1}}],[\"前提\",{\"1\":{\"821\":1}}],[\"前进后退版本\",{\"0\":{\"819\":1}}],[\"前几节所述的反射的功能被大量地使用\",{\"1\":{\"670\":1}}],[\"前花括号\",{\"1\":{\"551\":1}}],[\"前缀的函数\",{\"1\":{\"689\":1}}],[\"前缀和后缀\",{\"0\":{\"534\":1}}],[\"前缀\",{\"1\":{\"531\":3,\"547\":1,\"654\":1,\"700\":1}}],[\"前缀索引和索引选择性\",{\"0\":{\"221\":1}}],[\"前期的\",{\"1\":{\"485\":1}}],[\"前\",{\"1\":{\"469\":1,\"628\":1}}],[\"前端展现\",{\"1\":{\"476\":1}}],[\"前端\",{\"1\":{\"469\":1}}],[\"前者就是传统的加锁\",{\"1\":{\"396\":1}}],[\"前面说过\",{\"1\":{\"381\":1,\"389\":1}}],[\"前面用到了\",{\"1\":{\"304\":1}}],[\"前面提到\",{\"1\":{\"37\":1}}],[\"前言\",{\"0\":{\"60\":1,\"80\":1,\"467\":1}}],[\"最有用的功能\",{\"1\":{\"857\":1}}],[\"最有效的方式是使用索引来覆盖查询\",{\"1\":{\"265\":1}}],[\"最主要的问题是内存中的数据共享\",{\"1\":{\"694\":1}}],[\"最上面的函数占用了最多的内存\",{\"1\":{\"692\":1}}],[\"最佳实践应该为\",{\"1\":{\"667\":1}}],[\"最多\",{\"1\":{\"662\":1}}],[\"最多有gomaxprocs个线程分布在多个cpu上同时运行\",{\"1\":{\"411\":1}}],[\"最常见的是一个指向\",{\"1\":{\"653\":1}}],[\"最常用在条件结构的条件语句中\",{\"1\":{\"521\":1}}],[\"最引人注目的便是可见性\",{\"1\":{\"627\":1}}],[\"最末尾的元素\",{\"1\":{\"601\":1}}],[\"最小为\",{\"1\":{\"585\":1}}],[\"最明显的例子就是生成斐波那契数列的程序\",{\"1\":{\"577\":1}}],[\"最经典的例子便是计算斐波那契数列\",{\"1\":{\"570\":1}}],[\"最简单的方式就是使用\",{\"1\":{\"680\":1}}],[\"最简单的办法是使用\",{\"1\":{\"677\":1}}],[\"最简单的一个办法就是在计算开始之前设置一个起始时间\",{\"1\":{\"576\":1}}],[\"最简单的打印函数也有\",{\"1\":{\"550\":1}}],[\"最简单的解决方案就是不要在初始化语句中声明变量\",{\"1\":{\"549\":1}}],[\"最新版均以内置在集成开发环境\",{\"1\":{\"494\":1}}],[\"最新稳定版\",{\"1\":{\"483\":1}}],[\"最终用户可以在授权服务器上使用不同的关联帐户进行身份验证\",{\"1\":{\"878\":1}}],[\"最终用户尚未经过身份验证\",{\"1\":{\"875\":1}}],[\"最终\",{\"1\":{\"455\":1}}],[\"最终操作\",{\"1\":{\"455\":1}}],[\"最终一致\",{\"1\":{\"243\":1}}],[\"最好为它定义\",{\"1\":{\"660\":1}}],[\"最好先查找下是否有些存在的第三方的包或者项目能不能使用\",{\"1\":{\"637\":1}}],[\"最好用在从\",{\"1\":{\"590\":1}}],[\"最好的解决方案就是使用\",{\"1\":{\"571\":1}}],[\"最好的办法就是直接对该数据进行加锁以防止并发\",{\"1\":{\"419\":1}}],[\"最好把\",{\"1\":{\"561\":1}}],[\"最好使用\",{\"1\":{\"524\":1,\"590\":1}}],[\"最好按照字母顺序排列包名\",{\"1\":{\"506\":1}}],[\"最好是为每一个类型单独创建一个函数\",{\"1\":{\"561\":1}}],[\"最好是开源的\",{\"1\":{\"490\":1}}],[\"最好是免费的\",{\"1\":{\"490\":1}}],[\"最好重启一下mysql服务\",{\"1\":{\"52\":1}}],[\"最初级手段\",{\"1\":{\"263\":1}}],[\"最左前缀匹配原则\",{\"0\":{\"226\":1}}],[\"最大认证年龄\",{\"1\":{\"873\":1}}],[\"最大值\",{\"1\":{\"677\":1}}],[\"最大值为\",{\"1\":{\"221\":1}}],[\"最大为相关数组的长度\",{\"1\":{\"585\":1}}],[\"最大支持并发\",{\"1\":{\"424\":1}}],[\"最大的缺点就是费钱\",{\"1\":{\"296\":1}}],[\"最大的缺陷就是对权限控制比较分散\",{\"1\":{\"61\":1}}],[\"最大努力送达型事务\",{\"1\":{\"251\":1}}],[\"最基本的索引\",{\"1\":{\"212\":1}}],[\"最低权限\",{\"1\":{\"74\":1}}],[\"最后是英语\",{\"1\":{\"873\":1}}],[\"最后是payload\",{\"1\":{\"855\":1}}],[\"最后面有个\",{\"1\":{\"782\":1}}],[\"最后的手段\",{\"1\":{\"687\":1}}],[\"最后的一对括号表示对该匿名函数的调用\",{\"1\":{\"573\":1}}],[\"最后在\",{\"1\":{\"663\":1}}],[\"最后它摇身一变成为了一个\",{\"1\":{\"662\":1}}],[\"最后接收者不能是一个指针类型\",{\"1\":{\"651\":1}}],[\"最后返回保存运行结果的整数列表\",{\"1\":{\"602\":1}}],[\"最后将字节数组转换回字符串格式\",{\"1\":{\"598\":1}}],[\"最后再通过\",{\"1\":{\"590\":1}}],[\"最后再执行数据回收\",{\"1\":{\"429\":1}}],[\"最后计算它们的差值\",{\"1\":{\"576\":1}}],[\"最后一个元素叫\",{\"1\":{\"640\":1}}],[\"最后一个元素是\",{\"1\":{\"580\":1}}],[\"最后一个形式也可以被改写为\",{\"1\":{\"556\":1}}],[\"最后一部分为修饰语句\",{\"1\":{\"553\":1}}],[\"最后解释两者不同的原因\",{\"1\":{\"532\":1}}],[\"最后调用\",{\"1\":{\"510\":1}}],[\"最后要说明的是\",{\"1\":{\"467\":1}}],[\"最后停止\",{\"1\":{\"429\":1}}],[\"最后题目做出来了\",{\"1\":{\"423\":1}}],[\"最后把\",{\"1\":{\"405\":1}}],[\"最后把该\",{\"1\":{\"405\":1}}],[\"最后把该g唤醒\",{\"1\":{\"402\":1}}],[\"最后把g唤醒\",{\"1\":{\"403\":1}}],[\"最后执行\",{\"1\":{\"332\":1}}],[\"最后defer\",{\"1\":{\"325\":1}}],[\"最后决定是否立即重新加载特权表\",{\"1\":{\"52\":1}}],[\"最后\",{\"1\":{\"51\":1,\"338\":1,\"381\":1,\"467\":1,\"532\":1,\"574\":1}}],[\"卸载\",{\"1\":{\"52\":1}}],[\"提取接口是非常有用的设计模式\",{\"1\":{\"673\":1}}],[\"提起它们会立即想到读写文件\",{\"1\":{\"662\":1}}],[\"提供者所需的信息\",{\"1\":{\"866\":1}}],[\"提供商的配置信息\",{\"1\":{\"866\":1}}],[\"提供一种方法来确定\",{\"1\":{\"860\":1}}],[\"提供的内容\",{\"1\":{\"857\":1}}],[\"提供对字符型分片的操作\",{\"1\":{\"614\":1}}],[\"提供对字符串的操作\",{\"1\":{\"614\":1}}],[\"提供将字符串转换为基础类型的功能\",{\"1\":{\"614\":1}}],[\"提供我们运行外部操作系统命令和程序的方式\",{\"1\":{\"614\":1}}],[\"提供给我们一个平台无关性的操作系统功能接口\",{\"1\":{\"614\":1}}],[\"提供\",{\"1\":{\"590\":1,\"654\":1,\"662\":1}}],[\"提供了动态语言的优点\",{\"1\":{\"672\":1}}],[\"提供了\",{\"1\":{\"659\":1}}],[\"提供了基本输入输出功能\",{\"1\":{\"614\":1}}],[\"提供了格式化输入输出功能\",{\"1\":{\"614\":1}}],[\"提供了操作系统底层调用的基本接口\",{\"1\":{\"614\":1}}],[\"提供了相应的信息\",{\"1\":{\"575\":1}}],[\"提供了方便\",{\"1\":{\"562\":1}}],[\"提供了可读性更好的书写方式\",{\"1\":{\"551\":1}}],[\"提供了下面这些条件结构和分支结构\",{\"1\":{\"548\":1}}],[\"提供了以下函数\",{\"1\":{\"545\":2}}],[\"提供了对\",{\"1\":{\"501\":1}}],[\"提供了非常好的可量测性\",{\"1\":{\"473\":1}}],[\"提供了较多的接口以及默认的扩展实现\",{\"1\":{\"461\":1}}],[\"提供了一个可扩展的\",{\"1\":{\"623\":1}}],[\"提供了一种方便的方法来收集\",{\"1\":{\"455\":1}}],[\"提供了一套便捷的安装脚本\",{\"1\":{\"51\":1}}],[\"提供了原子的读取\",{\"1\":{\"418\":1}}],[\"提供了多路\",{\"1\":{\"331\":1}}],[\"提供了多个返回值\",{\"1\":{\"321\":1}}],[\"提升性能最直接有效的一种方式就是避免重复计算\",{\"1\":{\"577\":1}}],[\"提升查询性能以及节约系统开销\",{\"1\":{\"261\":1}}],[\"提前介绍一个语法\",{\"1\":{\"561\":1}}],[\"提前结束函数的执行\",{\"1\":{\"550\":1}}],[\"提交本地库后修改文件后进行撤销操作\",{\"0\":{\"816\":1}}],[\"提交信息\",{\"1\":{\"815\":1}}],[\"提交合并请求\",{\"1\":{\"808\":1}}],[\"提交拉取请求给远程库\",{\"1\":{\"808\":1}}],[\"提交读\",{\"1\":{\"239\":2}}],[\"提交一个事务\",{\"1\":{\"236\":1}}],[\"提交事务\",{\"1\":{\"151\":2,\"187\":2}}],[\"提高程序的运行速度\",{\"1\":{\"445\":1}}],[\"提高了资源利用率\",{\"1\":{\"410\":1}}],[\"提高性能\",{\"1\":{\"337\":1}}],[\"提高可用性\",{\"1\":{\"261\":1}}],[\"提高系统的性能\",{\"1\":{\"210\":1}}],[\"提高并发\",{\"1\":{\"210\":1}}],[\"提高通信速率\",{\"1\":{\"164\":1,\"200\":1}}],[\"提示\",{\"1\":{\"167\":1,\"203\":1,\"532\":1,\"554\":1,\"564\":1,\"602\":2,\"627\":1,\"640\":2,\"676\":1,\"689\":1}}],[\"提示符中输入\",{\"1\":{\"52\":1}}],[\"提示符\",{\"1\":{\"52\":1}}],[\"提出的rbac96模型最具有代表\",{\"1\":{\"64\":1}}],[\"若使用通道的缓冲\",{\"1\":{\"703\":1}}],[\"若\",{\"1\":{\"667\":1}}],[\"若这么做\",{\"1\":{\"410\":1}}],[\"若是面试\",{\"1\":{\"316\":1}}],[\"若没有索引则使用表锁\",{\"1\":{\"235\":1}}],[\"若没有定义主键\",{\"1\":{\"223\":1}}],[\"若辅助索引能够覆盖查询\",{\"1\":{\"224\":1}}],[\"若找到关键字\",{\"1\":{\"214\":1}}],[\"若要删除数据库\",{\"1\":{\"52\":1}}],[\"若要创建新数据库\",{\"1\":{\"52\":1}}],[\"若要查看可用的数据库\",{\"1\":{\"52\":1}}],[\"若要打开\",{\"1\":{\"52\":1}}],[\"若你想安装测试版的\",{\"1\":{\"51\":1}}],[\"决定的\",{\"1\":{\"553\":1}}],[\"决定\",{\"1\":{\"378\":1,\"409\":1}}],[\"决定是否删除测试数据库\",{\"1\":{\"52\":1}}],[\"决定是否删除匿名用户\",{\"1\":{\"52\":1}}],[\"决定是否允许根用户本地和远程登录\",{\"1\":{\"52\":1}}],[\"决定于你如何去实现它\",{\"1\":{\"39\":1}}],[\"根目录下的子目录\",{\"1\":{\"506\":2}}],[\"根本没有人在乎\",{\"1\":{\"467\":1}}],[\"根结点至少有两个孩子\",{\"1\":{\"214\":1}}],[\"根据jws\",{\"1\":{\"887\":1}}],[\"根据章节13\",{\"1\":{\"881\":1}}],[\"根据oauth\",{\"1\":{\"874\":1,\"883\":1}}],[\"根据第10节\",{\"1\":{\"869\":1}}],[\"根据过期声明\",{\"1\":{\"857\":1}}],[\"根据我们目前所学到的知识\",{\"1\":{\"854\":1}}],[\"根据有关\",{\"1\":{\"850\":1}}],[\"根据当前的类型选择正确的方法\",{\"1\":{\"662\":1}}],[\"根据上面的例子我们可以看到\",{\"1\":{\"513\":1}}],[\"根据通道中没有数据时读取操作陷入阻塞和通道已满时继续写入操作陷入阻塞的特性\",{\"1\":{\"424\":1}}],[\"根据key值算出哈希值\",{\"1\":{\"374\":1,\"375\":1}}],[\"根据这些\",{\"1\":{\"255\":1}}],[\"根据\",{\"1\":{\"251\":1,\"310\":1,\"499\":2,\"852\":2,\"858\":1}}],[\"根据针对\",{\"1\":{\"235\":1}}],[\"根据已有的表创建新表\",{\"1\":{\"98\":1}}],[\"根据不同的处理器以及操作系统类型\",{\"1\":{\"516\":1}}],[\"根据不同的发行版也可能是文件\",{\"1\":{\"483\":1}}],[\"根据不同的\",{\"1\":{\"90\":1}}],[\"根据算法\",{\"1\":{\"30\":1}}],[\"根用户设置密码\",{\"1\":{\"52\":1}}],[\"该规范还定义了以下请求参数\",{\"1\":{\"873\":1}}],[\"该规范还定义了一系列推荐算法\",{\"1\":{\"858\":1}}],[\"该值标识执行身份验证时满足的身份验证上下文类\",{\"1\":{\"869\":1}}],[\"该值未经修改地从身份验证请求传递到id令牌\",{\"1\":{\"869\":1,\"873\":1,\"892\":1}}],[\"该值在特定上下文中唯一地表征一个实体\",{\"1\":{\"868\":1}}],[\"该标识符将被客户端使用\",{\"1\":{\"868\":1}}],[\"该标识符不能与实体在另一个依赖方的ppid相关联\",{\"1\":{\"868\":1}}],[\"该标识可用于区分具有其他类似内容的\",{\"1\":{\"852\":1}}],[\"该算法也生成一对公钥和私钥\",{\"1\":{\"860\":1}}],[\"该元素出现在紧凑序列化形式中最后一个点\",{\"1\":{\"858\":1}}],[\"该令牌就被认为是有效的\",{\"1\":{\"857\":1}}],[\"该声明设定了该\",{\"1\":{\"852\":1}}],[\"该声明的处理与应用程序有关\",{\"1\":{\"852\":1}}],[\"该声明的值必须设为\",{\"1\":{\"850\":1}}],[\"该权利要求也是针对特定应用的\",{\"1\":{\"852\":1}}],[\"该权利要求必须是唯一的\",{\"1\":{\"852\":1}}],[\"该\",{\"1\":{\"852\":1,\"854\":1}}],[\"该参数的使用由op自行决定\",{\"1\":{\"873\":1}}],[\"该参数在oauth\",{\"1\":{\"873\":1}}],[\"该参数仅用于帮助\",{\"1\":{\"850\":1}}],[\"该参数可以通过第\",{\"1\":{\"567\":1}}],[\"该命令生成一份\",{\"1\":{\"692\":1}}],[\"该特性允许我们在不改变已有的代码的情况下定义和使用新接口\",{\"1\":{\"671\":1}}],[\"该实例的类型实现了此接口\",{\"1\":{\"662\":1}}],[\"该如何在另一个程序中修改或者只是读取一个\",{\"1\":{\"654\":1}}],[\"该操作不会产生错误\",{\"1\":{\"608\":1}}],[\"该操作符可被写成\",{\"1\":{\"130\":1}}],[\"该索引位置的值\",{\"1\":{\"591\":1}}],[\"该切片指向数组的前\",{\"1\":{\"588\":1}}],[\"该数组的实际容量可能要大于切片所定义的容量\",{\"1\":{\"602\":1}}],[\"该数组或切片必须先被排序\",{\"1\":{\"600\":1}}],[\"该数组我们称之为相关数组\",{\"1\":{\"585\":1}}],[\"该数据应为\",{\"1\":{\"499\":1}}],[\"该方案不仅可以用于长度未知的参数\",{\"1\":{\"567\":1}}],[\"该方法第一个返回值的类型是\",{\"1\":{\"678\":1}}],[\"该方法从输入中读取内容\",{\"1\":{\"677\":1}}],[\"该方法在最新版本的\",{\"1\":{\"536\":1}}],[\"该方法同样适用于\",{\"1\":{\"506\":1}}],[\"该次数是根据计数器\",{\"1\":{\"553\":1}}],[\"该分支的代码会被执行\",{\"1\":{\"551\":1}}],[\"该分支会忽略\",{\"1\":{\"331\":1}}],[\"该变量原来的值会被隐藏\",{\"1\":{\"549\":1}}],[\"该问题已经在\",{\"1\":{\"549\":1}}],[\"该包包含了一些变量用于获取程序运行的操作系统平台下\",{\"1\":{\"545\":1}}],[\"该包提供了类似\",{\"1\":{\"527\":1}}],[\"该页面\",{\"1\":{\"543\":1,\"545\":1,\"546\":1}}],[\"该类型是一个结构\",{\"1\":{\"678\":1}}],[\"该类型的变量上的每一个具体方法所组成的集合\",{\"1\":{\"662\":1}}],[\"该类型的值和指针都可以调用\",{\"1\":{\"380\":1}}],[\"该类字符串使用反引号括起来\",{\"1\":{\"532\":1}}],[\"该类字符串使用双引号括起来\",{\"1\":{\"532\":1}}],[\"该运算符与异或运算符一同使用\",{\"1\":{\"525\":1}}],[\"该程序无法通过编译\",{\"1\":{\"523\":1}}],[\"该函数使用\",{\"1\":{\"859\":2}}],[\"该函数接收任意编码的文本\",{\"1\":{\"859\":1}}],[\"该函数接受一个变长参数并对每个元素进行换行打印\",{\"1\":{\"567\":1}}],[\"该函数读取出与\",{\"1\":{\"680\":1}}],[\"该函数在\",{\"1\":{\"590\":1}}],[\"该函数返回一个大小为序列个数的\",{\"1\":{\"587\":1}}],[\"该函数的参数是文件名\",{\"1\":{\"678\":1}}],[\"该函数的实参可以是满足\",{\"1\":{\"677\":1}}],[\"该函数的签名是\",{\"1\":{\"572\":1}}],[\"该函数的第二个参数可以包含任何字符\",{\"1\":{\"541\":1}}],[\"该函数主要用于打印输出到控制台\",{\"1\":{\"517\":1}}],[\"该函数一旦返回就表示程序已成功执行并立即退出\",{\"1\":{\"507\":1}}],[\"该工具会尝试更新当前目录下的所有\",{\"1\":{\"498\":1}}],[\"该款插件的当前最新版本号为\",{\"1\":{\"493\":1}}],[\"该项目的三位领导者均是著名的\",{\"1\":{\"469\":1}}],[\"该goruntine会处于自旋状态\",{\"1\":{\"420\":1}}],[\"该集合函数决定了关系的其它所有属性并且是最小的\",{\"1\":{\"287\":1}}],[\"该表旨在为在特定上下文中选择哪个流提供一些指导\",{\"1\":{\"869\":1}}],[\"该表用来记录每个用户组下拥有哪些用户角色\",{\"1\":{\"73\":1}}],[\"该表用来记录每个用户组下有哪些用户\",{\"1\":{\"73\":1}}],[\"该表的数量则更少\",{\"1\":{\"72\":1}}],[\"该表的增加可谓是大大减少了上述维护困难的问题\",{\"1\":{\"72\":1}}],[\"该表则是用来定义每个角色组中有哪些权限\",{\"1\":{\"72\":1}}],[\"该表主要是用来存储每个用户拥有哪些角色\",{\"1\":{\"72\":1}}],[\"该插件可用于测试\",{\"1\":{\"52\":1}}],[\"该token也可直接被用于认证\",{\"1\":{\"26\":1}}],[\"该token被设计为紧凑且安全的\",{\"1\":{\"26\":1}}],[\"包有一个\",{\"1\":{\"689\":1}}],[\"包有一个扩展功能用来解析命令行选项\",{\"1\":{\"682\":1}}],[\"包用那些方法\",{\"1\":{\"689\":1}}],[\"包也提供了一套像\",{\"1\":{\"688\":1}}],[\"包也可以用额外的方法\",{\"1\":{\"688\":1}}],[\"包也不必把所有的代码都写在一个巨大的文件里\",{\"1\":{\"506\":1}}],[\"包一样\",{\"1\":{\"686\":1}}],[\"包使用\",{\"1\":{\"684\":1}}],[\"包提供\",{\"1\":{\"686\":1}}],[\"包提供了读取压缩文件的功能\",{\"1\":{\"679\":1}}],[\"包提供了相应的功能\",{\"1\":{\"678\":1}}],[\"包提供了用于读和写的接口\",{\"1\":{\"662\":1}}],[\"包提供的以\",{\"1\":{\"678\":1}}],[\"包提供的读取器\",{\"1\":{\"678\":1}}],[\"包提供的缓冲读取器\",{\"1\":{\"677\":1}}],[\"包提供的\",{\"1\":{\"677\":1}}],[\"包范围内的\",{\"1\":{\"676\":1}}],[\"包定义了一个接口\",{\"1\":{\"662\":1}}],[\"包访问\",{\"1\":{\"661\":1}}],[\"包并写三个处理函数\",{\"1\":{\"638\":1}}],[\"包目录下并创建一个\",{\"1\":{\"635\":1}}],[\"包创建一个\",{\"1\":{\"635\":1}}],[\"包可以让你在程序中方便的读取和写入\",{\"1\":{\"682\":1}}],[\"包可以通过\",{\"1\":{\"632\":1}}],[\"包可以解决同一时间只能一个线程访问变量或\",{\"1\":{\"625\":1}}],[\"包通常附带一个或多个测试文件\",{\"1\":{\"631\":1}}],[\"包通过下面这个被编译器强制执行的规则来决定是否将自身的代码对象暴露给外部文件\",{\"1\":{\"506\":1}}],[\"包主程序\",{\"1\":{\"631\":1}}],[\"包将通过调用斐波那契的时候\",{\"1\":{\"627\":1}}],[\"包里包含一个子包叫\",{\"1\":{\"678\":1}}],[\"包里提供了对应的带缓冲的操作\",{\"1\":{\"662\":1}}],[\"包里有一个接口类型\",{\"1\":{\"662\":1}}],[\"包里的函数\",{\"1\":{\"680\":1}}],[\"包里的\",{\"1\":{\"640\":1,\"662\":1,\"678\":2,\"680\":1}}],[\"包里\",{\"1\":{\"627\":1,\"630\":1}}],[\"包里面的一个函数\",{\"1\":{\"561\":1}}],[\"包然后调用\",{\"1\":{\"627\":1}}],[\"包只导入其副作用\",{\"1\":{\"627\":1}}],[\"包是\",{\"1\":{\"627\":1}}],[\"包是结构化代码的一种方式\",{\"1\":{\"506\":1}}],[\"包下\",{\"1\":{\"626\":1}}],[\"包和字符串包十分类似\",{\"1\":{\"590\":1}}],[\"包专门用来提供这种类型的操作方法\",{\"1\":{\"590\":1}}],[\"包为我们提供了一个数据类型\",{\"1\":{\"546\":1}}],[\"包实现一个双向链表\",{\"1\":{\"623\":1}}],[\"包实现的\",{\"1\":{\"545\":1}}],[\"包实现了简单的日志功能\",{\"1\":{\"689\":1}}],[\"包实现了一个简单的\",{\"1\":{\"686\":1}}],[\"包实现了伪随机数的生成\",{\"1\":{\"528\":1}}],[\"包实现了格式化\",{\"1\":{\"506\":1}}],[\"包来实现\",{\"1\":{\"694\":1}}],[\"包来实现常见的搜索和排序操作\",{\"1\":{\"600\":1}}],[\"包来处理缓冲的输入和输出\",{\"1\":{\"677\":1}}],[\"包来打印计数器的值\",{\"1\":{\"554\":1}}],[\"包来完成对字符串的主要操作\",{\"1\":{\"533\":1}}],[\"包来达到\",{\"1\":{\"467\":1}}],[\"包外部使用\",{\"1\":{\"517\":1}}],[\"包在运行时获取所在的操作系统类型\",{\"1\":{\"515\":1}}],[\"包引用的其它包\",{\"1\":{\"510\":1}}],[\"包名被封闭在半角双引号\",{\"1\":{\"506\":1}}],[\"包要比\",{\"1\":{\"499\":1}}],[\"包的基准测试功能\",{\"1\":{\"691\":1}}],[\"包的路径下\",{\"1\":{\"689\":1}}],[\"包的路径或\",{\"1\":{\"627\":1}}],[\"包的情况\",{\"1\":{\"688\":1}}],[\"包的代码\",{\"1\":{\"687\":1}}],[\"包的目标文件\",{\"1\":{\"631\":1}}],[\"包的初始化\",{\"1\":{\"627\":1}}],[\"包的方法\",{\"1\":{\"600\":1}}],[\"包的\",{\"1\":{\"550\":1,\"631\":2}}],[\"包的源代码没有包含\",{\"1\":{\"507\":1}}],[\"包的分级声明和初始化\",{\"1\":{\"506\":1}}],[\"包的依赖关系决定了其构建顺序\",{\"1\":{\"506\":1}}],[\"包的概念\",{\"0\":{\"506\":1}}],[\"包的工具\",{\"1\":{\"498\":1}}],[\"包的文档注释\",{\"1\":{\"497\":1}}],[\"包的最顶级包\",{\"1\":{\"487\":1}}],[\"包的相关测试\",{\"1\":{\"483\":1}}],[\"包中也有同样功能的更简单的结构体和函数\",{\"1\":{\"689\":1}}],[\"包中同样定义了一个结构解析器\",{\"1\":{\"686\":1}}],[\"包中支持的任何类型\",{\"1\":{\"682\":1}}],[\"包中定义了若干\",{\"1\":{\"686\":1}}],[\"包中定义了\",{\"1\":{\"682\":1}}],[\"包中缓冲写入\",{\"1\":{\"682\":1}}],[\"包中有一些类型和函数可以用来做简单的基准测试\",{\"1\":{\"689\":1}}],[\"包中有一个\",{\"1\":{\"681\":1,\"682\":1,\"687\":1}}],[\"包中有许多将被编译为新包的实验性的包\",{\"1\":{\"623\":1}}],[\"包中并通过主程序调用它\",{\"1\":{\"627\":1}}],[\"包中还有一个方便的\",{\"1\":{\"625\":1}}],[\"包中还有一个\",{\"1\":{\"625\":1}}],[\"包中\",{\"1\":{\"625\":1,\"627\":1}}],[\"包中包含了一些操作复数的公共方法\",{\"1\":{\"524\":1}}],[\"包中所有有关数学运算的函数都会要求接收这个类型\",{\"1\":{\"523\":1}}],[\"包中所有代码对象的标识符必须是唯一的\",{\"1\":{\"506\":1}}],[\"包中的解码和\",{\"1\":{\"689\":1}}],[\"包中的定义\",{\"1\":{\"682\":1}}],[\"包中的接口概念\",{\"1\":{\"682\":1}}],[\"包中的默认客户端创建一个服务实例\",{\"1\":{\"638\":1}}],[\"包中的功能在\",{\"1\":{\"631\":1}}],[\"包中的方法来测试你电脑上一个整型变量占用多少个字节\",{\"1\":{\"623\":1}}],[\"包中的特殊函数来实现这样的功能\",{\"1\":{\"575\":1}}],[\"包中的一个预定义函数\",{\"1\":{\"546\":1}}],[\"包中的函数\",{\"1\":{\"515\":1,\"600\":1}}],[\"包中的\",{\"1\":{\"507\":1,\"532\":1,\"575\":1,\"576\":1,\"670\":1,\"682\":1,\"689\":1,\"697\":1}}],[\"包中的代码\",{\"1\":{\"481\":1}}],[\"包中找到\",{\"1\":{\"487\":1,\"686\":1}}],[\"包时有一个测试会尝试连接\",{\"1\":{\"483\":1}}],[\"包文件和可执行文件\",{\"1\":{\"482\":1}}],[\"包文件和可执行文件的路径\",{\"1\":{\"482\":1}}],[\"包文件在被安装后就是使用这种格式的文件\",{\"1\":{\"481\":1}}],[\"包内的\",{\"1\":{\"350\":1}}],[\"包含有关错误的附加信息的网页的uri\",{\"1\":{\"878\":1}}],[\"包含一组请求参数作为声明的jwt\",{\"1\":{\"868\":1}}],[\"包含一个stringoruri值\",{\"1\":{\"869\":1}}],[\"包含一个\",{\"1\":{\"657\":1}}],[\"包含一个所需功能类型的具名字段\",{\"1\":{\"656\":1}}],[\"包含一个名字和两个指向地址的指针的\",{\"1\":{\"640\":1}}],[\"包含方案\",{\"1\":{\"868\":1,\"869\":1}}],[\"包含关于认证事件的声明\",{\"1\":{\"868\":1}}],[\"包含密钥加密和内容加密所用加密算法的信息\",{\"1\":{\"850\":1}}],[\"包含想要的行为\",{\"1\":{\"676\":1}}],[\"包含最终的执行文件\",{\"1\":{\"631\":1}}],[\"包含最近更新的版本\",{\"1\":{\"483\":1}}],[\"包含数据\",{\"1\":{\"509\":1}}],[\"包含了\",{\"1\":{\"662\":1}}],[\"包含了该接口的方法集\",{\"1\":{\"662\":1}}],[\"包含了一些打破\",{\"1\":{\"614\":1}}],[\"包含了一些针对测试字符的非常有用的函数\",{\"1\":{\"531\":1}}],[\"包含了从第一个到第三个元素\",{\"1\":{\"585\":1}}],[\"包含了跨平台开发及其它必要的特性\",{\"1\":{\"492\":1}}],[\"包含了类c语法\",{\"1\":{\"320\":1}}],[\"包含源代码构建脚本和标准库的包的完整源代码\",{\"1\":{\"486\":1}}],[\"包含标准库的包的对象文件\",{\"1\":{\"486\":1}}],[\"包含与支持\",{\"1\":{\"486\":1}}],[\"包含示例程序\",{\"1\":{\"486\":1}}],[\"包含文档模版\",{\"1\":{\"486\":1}}],[\"包含可执行文件\",{\"1\":{\"486\":1}}],[\"包含可执行代码的包文件在被压缩后使用扩展名\",{\"1\":{\"481\":1}}],[\"包含极简的\",{\"1\":{\"459\":1}}],[\"包含\",{\"1\":{\"449\":1,\"486\":1,\"631\":1,\"657\":1}}],[\"包含4个键值对的哈希表来说\",{\"1\":{\"368\":1}}],[\"包含存储什么样的数据\",{\"1\":{\"82\":1}}],[\"包含哪些访问权限\",{\"1\":{\"75\":1}}],[\"包含web控制界面的\",{\"1\":{\"3\":1}}],[\"包括从使用的端点返回哪些参数\",{\"1\":{\"873\":1,\"892\":1}}],[\"包括其授权端点和令牌端点的位置\",{\"1\":{\"866\":1}}],[\"包括其二进制表示法和用于构建\",{\"1\":{\"844\":1}}],[\"包括文件\",{\"1\":{\"680\":1}}],[\"包括空格\",{\"1\":{\"677\":1}}],[\"包括零\",{\"1\":{\"660\":1}}],[\"包括它的字段\",{\"1\":{\"660\":1}}],[\"包括数组和\",{\"1\":{\"557\":1}}],[\"包括常量\",{\"1\":{\"506\":1}}],[\"包括如何使用\",{\"1\":{\"467\":1}}],[\"包括标准库中的代码包\",{\"1\":{\"449\":1}}],[\"包括内存对齐方式\",{\"1\":{\"383\":1}}],[\"包括过程式编程\",{\"1\":{\"320\":1}}],[\"包括通过\",{\"1\":{\"305\":1}}],[\"包括\",{\"1\":{\"74\":1,\"551\":1,\"585\":1,\"682\":1,\"723\":1}}],[\"包括权限之前还有父子关系\",{\"1\":{\"72\":1}}],[\"包\",{\"0\":{\"533\":1,\"590\":1,\"613\":1,\"624\":1,\"625\":1,\"626\":1,\"679\":1,\"681\":1,\"682\":1},\"1\":{\"52\":1,\"350\":2,\"449\":1,\"501\":1,\"506\":3,\"510\":1,\"527\":1,\"531\":2,\"532\":1,\"550\":1,\"569\":1,\"571\":1,\"572\":1,\"575\":1,\"611\":1,\"626\":1,\"627\":2,\"628\":2,\"645\":1,\"654\":1,\"659\":1,\"661\":1,\"662\":1,\"676\":1,\"677\":2,\"680\":1,\"682\":1,\"686\":3,\"688\":1,\"689\":7,\"692\":1,\"697\":1,\"707\":1}}],[\"即openid\",{\"1\":{\"868\":2}}],[\"即给函数传入的参数对象中只有部分属性赋值了\",{\"1\":{\"769\":1}}],[\"即便它真的有这些方法\",{\"1\":{\"761\":1}}],[\"即是\",{\"1\":{\"698\":1}}],[\"即重载的实际含义\",{\"1\":{\"675\":1}}],[\"即运行时在变量中存储的值的实际类型\",{\"1\":{\"662\":1}}],[\"即垃圾收集器\",{\"1\":{\"661\":1}}],[\"即对于一个类型只能有一个给定名称的方法\",{\"1\":{\"651\":1}}],[\"即这些字段没有显式的名字\",{\"1\":{\"647\":1}}],[\"即起始\",{\"1\":{\"609\":1}}],[\"即将音阶和对应的音频映射起来\",{\"1\":{\"606\":1}}],[\"即将\",{\"1\":{\"602\":1}}],[\"即一个指向实际数据的指针和记录字符串长度的整数\",{\"1\":{\"597\":1}}],[\"即一般创建表时设置的索引类型\",{\"1\":{\"212\":1}}],[\"即长度\",{\"1\":{\"592\":1}}],[\"即相同输入必定获得相同输出的函数\",{\"1\":{\"577\":1}}],[\"即相关员工利用\",{\"1\":{\"469\":1}}],[\"即每个更后面的数都是基于之前计算结果的重复计算\",{\"1\":{\"577\":1}}],[\"即每次访问map时都会触发一次搬迁\",{\"1\":{\"372\":1}}],[\"即保存函数的地址到变量中\",{\"1\":{\"573\":1}}],[\"即数列中的位置和对应的值\",{\"1\":{\"571\":1}}],[\"即前两个数为\",{\"1\":{\"570\":1}}],[\"即后进先出\",{\"1\":{\"568\":1}}],[\"即不让遍历都从某个固定的\",{\"1\":{\"609\":1}}],[\"即不要重复你自己\",{\"1\":{\"561\":1}}],[\"即不同的用户具有不同的访问\",{\"1\":{\"60\":1}}],[\"即它的初始值\",{\"1\":{\"559\":1}}],[\"即它构成一个笛卡尔积\",{\"1\":{\"145\":1,\"178\":1}}],[\"即某一行第一个以冒号\",{\"1\":{\"559\":1}}],[\"即空字符串\",{\"1\":{\"532\":1}}],[\"即创建某个文本后你无法再次修改这个文本的内容\",{\"1\":{\"532\":1}}],[\"即首个单词小写\",{\"1\":{\"515\":1}}],[\"即第一个单词的首字母小写\",{\"1\":{\"507\":1}}],[\"即标准库\",{\"1\":{\"506\":1}}],[\"即通过引用调用时\",{\"1\":{\"652\":1}}],[\"即通过\",{\"1\":{\"483\":1}}],[\"即静态库文件\",{\"1\":{\"449\":1}}],[\"即节省了空间又会提高访问效率\",{\"1\":{\"373\":1}}],[\"即buckets数量不变\",{\"1\":{\"373\":1}}],[\"即先出现的\",{\"1\":{\"332\":1}}],[\"即之后每次循环时遍历到的数据都是以值覆盖的方式赋给\",{\"1\":{\"324\":1}}],[\"即如果一种语言在某些情境中表现出某种特定的方式\",{\"1\":{\"317\":1}}],[\"即自动提交事务\",{\"1\":{\"300\":1}}],[\"即最终一致性\",{\"1\":{\"260\":1}}],[\"即所谓的\",{\"1\":{\"235\":1}}],[\"即联合索引\",{\"1\":{\"226\":1}}],[\"即表的操作事件触发表上的触发器的执行\",{\"1\":{\"165\":1,\"201\":1}}],[\"即两个表中的列是相等的\",{\"1\":{\"141\":1,\"174\":1}}],[\"即缩小访问数据的范围\",{\"1\":{\"129\":1}}],[\"即增删改查\",{\"1\":{\"88\":1}}],[\"即使最终用户已经通过了身份验证\",{\"1\":{\"875\":1}}],[\"即使他们与授权服务器有活动会话\",{\"1\":{\"874\":1}}],[\"即使被授权的一方是唯一的观众\",{\"1\":{\"869\":1}}],[\"即使\",{\"1\":{\"857\":2}}],[\"即使恶意用户修改了这些数据\",{\"1\":{\"854\":1}}],[\"即使接口在类型之后才定义\",{\"1\":{\"662\":1}}],[\"即使程序正常结束或者发生错误\",{\"1\":{\"661\":1}}],[\"即使结构体中嵌套有其他的结构体\",{\"1\":{\"640\":1}}],[\"即使只是大概知道容量\",{\"1\":{\"606\":1}}],[\"即使只有一个命名返回值\",{\"1\":{\"564\":1}}],[\"即使函数使用了命名返回值\",{\"1\":{\"564\":1}}],[\"即使没有人在\",{\"1\":{\"662\":1}}],[\"即使没有显式的指出指针\",{\"1\":{\"563\":1}}],[\"即使没有提交\",{\"1\":{\"239\":1}}],[\"即使当代码块之间只有一条语句时\",{\"1\":{\"549\":1}}],[\"即使你表面上只是一个普通的变量\",{\"1\":{\"445\":1}}],[\"即使你是用new申请到的内存\",{\"1\":{\"445\":1}}],[\"即使看起来锁没有被持有\",{\"1\":{\"420\":1}}],[\"即使p的默认数量是1\",{\"1\":{\"409\":1}}],[\"即使存在同一种数据类型\",{\"1\":{\"301\":1}}],[\"即使其中一个表发生变化\",{\"1\":{\"268\":1}}],[\"即使为其创建这些角色的人员离开或更换组织内的工作\",{\"1\":{\"75\":1}}],[\"即使公司加密公钥泄露后\",{\"1\":{\"72\":1}}],[\"即可拿到路径\",{\"1\":{\"727\":1}}],[\"即可拿到当前状态\",{\"1\":{\"727\":1}}],[\"即可以提炼为下面两个函数\",{\"1\":{\"568\":1}}],[\"即可以存放的元素个数\",{\"1\":{\"405\":1}}],[\"即可\",{\"1\":{\"491\":1,\"689\":1}}],[\"即可完成角色权限的配置\",{\"1\":{\"73\":1}}],[\"即可组成一个用户权限中心了\",{\"1\":{\"72\":1}}],[\"即定义权限组\",{\"1\":{\"72\":1}}],[\"即小范围批量处理\",{\"1\":{\"72\":1}}],[\"即为一个服务对象\",{\"1\":{\"70\":1}}],[\"即角色上有了上下级的区别\",{\"1\":{\"67\":1}}],[\"即\",{\"1\":{\"52\":1,\"265\":1,\"362\":1,\"365\":1,\"438\":1,\"507\":1,\"525\":2,\"547\":1,\"574\":1,\"599\":1,\"647\":1,\"662\":1,\"676\":1,\"686\":1,\"849\":1}}],[\"下边的代码\",{\"1\":{\"705\":1}}],[\"下边的片段阐明\",{\"1\":{\"705\":1}}],[\"下一个\",{\"1\":{\"700\":1}}],[\"下一次读取数据的下标位置\",{\"1\":{\"398\":1}}],[\"下一次发送数据的下标位置\",{\"1\":{\"398\":1}}],[\"下你需要配置\",{\"1\":{\"689\":1}}],[\"下可以用类似第\",{\"1\":{\"627\":1}}],[\"下划线\",{\"1\":{\"627\":1}}],[\"下图说明了结构体类型实例和一个指向它的指针的内存布局\",{\"1\":{\"640\":1}}],[\"下图给出了区别\",{\"1\":{\"588\":1}}],[\"下图给出了一个长度为\",{\"1\":{\"585\":1}}],[\"下图描述了使用\",{\"1\":{\"587\":1}}],[\"下图展示了一些其它编程语言对\",{\"1\":{\"471\":1}}],[\"下图展示了包含一个bucket满载的map\",{\"1\":{\"372\":1}}],[\"下图展示产生冲突后的map\",{\"1\":{\"367\":1}}],[\"下图展示bucket存放8个key\",{\"1\":{\"365\":1}}],[\"下图展示一个拥有4个bucket的map\",{\"1\":{\"364\":1}}],[\"下例为一个略微不同的实现\",{\"1\":{\"574\":1}}],[\"下表列出了所有运算符以及它们的优先级\",{\"1\":{\"529\":1}}],[\"下导入包会产生报错信息\",{\"1\":{\"506\":1}}],[\"下也可以这样使用\",{\"1\":{\"506\":1}}],[\"下工作\",{\"1\":{\"489\":1,\"490\":1}}],[\"下的一些\",{\"1\":{\"692\":1}}],[\"下的包\",{\"1\":{\"644\":1}}],[\"下的本地版本进行工作\",{\"1\":{\"636\":1}}],[\"下的虚拟机里的\",{\"1\":{\"485\":1}}],[\"下的行锁\",{\"1\":{\"232\":1}}],[\"下运行这段代码\",{\"1\":{\"515\":2}}],[\"下运行在虚拟机里的\",{\"1\":{\"485\":1}}],[\"下运行的应用程序\",{\"1\":{\"475\":1}}],[\"下使用\",{\"1\":{\"485\":1}}],[\"下\",{\"1\":{\"482\":1,\"485\":1,\"506\":2,\"632\":2}}],[\"下找到编译器和链接器的源代码\",{\"1\":{\"481\":1}}],[\"下载镜像\",{\"1\":{\"782\":1}}],[\"下载并安装\",{\"1\":{\"638\":1}}],[\"下载页面\",{\"1\":{\"484\":1,\"485\":1}}],[\"下载\",{\"1\":{\"483\":2,\"485\":1}}],[\"下载书中的代码\",{\"1\":{\"467\":1}}],[\"下载官方镜像\",{\"1\":{\"6\":2}}],[\"下定义\",{\"1\":{\"310\":1}}],[\"下面运行\",{\"1\":{\"689\":1}}],[\"下面例子中的\",{\"1\":{\"689\":1}}],[\"下面\",{\"1\":{\"631\":1,\"682\":1}}],[\"下面代码演示了如何遍历一个链表\",{\"1\":{\"614\":1}}],[\"下面代码段的输出是什么\",{\"1\":{\"580\":1}}],[\"下面有一个示例\",{\"1\":{\"611\":1}}],[\"下面是使用此流的一个非规范的错误响应示例\",{\"1\":{\"878\":1}}],[\"下面是使用此流的一个非规范示例成功响应\",{\"1\":{\"877\":1}}],[\"下面是用户代理发送到授权服务器的非规范示例请求\",{\"1\":{\"873\":1}}],[\"下面是客户端http\",{\"1\":{\"873\":1}}],[\"下面是id令牌中索赔集\",{\"1\":{\"869\":1}}],[\"下面是与\",{\"1\":{\"686\":1}}],[\"下面是数据编码后的\",{\"1\":{\"682\":1}}],[\"下面是一种可能的方案\",{\"1\":{\"689\":1}}],[\"下面是一些术语说明\",{\"1\":{\"682\":1}}],[\"下面是一个非规范的token\",{\"1\":{\"884\":1}}],[\"下面是一个成功的令牌响应的非规范示例\",{\"1\":{\"883\":1}}],[\"下面是一个令牌请求的非规范示例\",{\"1\":{\"881\":1}}],[\"下面是一个更具体的例子\",{\"1\":{\"662\":1}}],[\"下面是一个示例\",{\"1\":{\"655\":1}}],[\"下面是一个结构体上的简单方法的例子\",{\"1\":{\"651\":1}}],[\"下面是一个例子\",{\"1\":{\"580\":1}}],[\"下面是一个计算从\",{\"1\":{\"573\":1}}],[\"下面是一个将函数作为参数的简单例子\",{\"1\":{\"572\":1}}],[\"下面是函数调用的一个例子\",{\"1\":{\"667\":1}}],[\"下面是实现一个二叉树的部分代码\",{\"1\":{\"666\":1}}],[\"下面是调用排序函数的一个具体例子\",{\"1\":{\"662\":1}}],[\"下面是示例\",{\"1\":{\"662\":1}}],[\"下面是\",{\"1\":{\"655\":1,\"682\":2,\"861\":1}}],[\"下面是非结构体类型上方法的例子\",{\"1\":{\"651\":1}}],[\"下面是这个结构体类型对应的工厂方法\",{\"1\":{\"642\":1}}],[\"下面是链接到源码和所有对象时有序概述\",{\"1\":{\"628\":1}}],[\"下面是计算到第\",{\"1\":{\"577\":1}}],[\"下面这段来自\",{\"1\":{\"687\":1}}],[\"下面这段代码有什么错\",{\"1\":{\"651\":1}}],[\"下面这段代码的输出是什么\",{\"1\":{\"609\":1}}],[\"下面这个简单的例子展示了函数\",{\"1\":{\"570\":1}}],[\"下面这个例子就会在执行\",{\"1\":{\"568\":1}}],[\"下面这个例子展示如何安全地从\",{\"1\":{\"523\":1}}],[\"下面这个例子展示了如何通过\",{\"1\":{\"515\":1}}],[\"下面这个程序展示了通过显式转换来避免这个问题\",{\"1\":{\"523\":1}}],[\"下面这个程序很好地解释了这个现象\",{\"1\":{\"523\":1}}],[\"下面这一行调用了\",{\"1\":{\"507\":1}}],[\"下面列举了\",{\"1\":{\"504\":1}}],[\"下面列举一些常见数据类型对比\",{\"1\":{\"301\":1}}],[\"下面的非规范表总结了这三种流的特征\",{\"1\":{\"869\":1}}],[\"下面的示例展示了通信操作符的使用\",{\"1\":{\"700\":1}}],[\"下面的示例用\",{\"1\":{\"686\":1}}],[\"下面的示例中包含了嵌套的循环体\",{\"1\":{\"558\":1}}],[\"下面的程序\",{\"1\":{\"682\":1,\"689\":1}}],[\"下面的程序展示了如何读取一个\",{\"1\":{\"679\":1}}],[\"下面的程序可用于生成该数列\",{\"1\":{\"570\":1}}],[\"下面的程序可以被顺利编译但什么都做不了\",{\"1\":{\"510\":1}}],[\"下面的模式就很好的说明了这个问题\",{\"1\":{\"659\":1}}],[\"下面的例子说明如何使用解析器\",{\"1\":{\"686\":1}}],[\"下面的例子说明了在映射上使用\",{\"1\":{\"643\":1}}],[\"下面的例子中\",{\"1\":{\"644\":1,\"685\":1}}],[\"下面的例子清晰地说明了这些情况\",{\"1\":{\"640\":1}}],[\"下面的例子\",{\"1\":{\"640\":1,\"653\":1}}],[\"下面的例子展示了如何传递参数到匿名函数中\",{\"1\":{\"573\":1}}],[\"下面的例子展示了如何将匿名函数赋值给变量并对其进行调用\",{\"1\":{\"573\":1}}],[\"下面的结构给了你一个好的示范\",{\"1\":{\"631\":1}}],[\"下面的方法\",{\"1\":{\"588\":1}}],[\"下面的函数演示了如何动态返回追加后缀的函数\",{\"1\":{\"574\":1}}],[\"下面的函数将不会被编译\",{\"1\":{\"562\":1}}],[\"下面的代码则很好地阐述了这一点\",{\"1\":{\"689\":1}}],[\"下面的代码有一个输入文件\",{\"1\":{\"682\":1}}],[\"下面的代码试图访问一个未引用的变量或者函数\",{\"1\":{\"627\":1}}],[\"下面的代码描述了从拷贝切片的\",{\"1\":{\"593\":1}}],[\"下面的代码展示了另一种在调试时使用\",{\"1\":{\"568\":1}}],[\"下面的代码展示了如何使用包的别名\",{\"1\":{\"506\":1}}],[\"下面的代码展示了如何使用\",{\"1\":{\"501\":1}}],[\"下面的代码片段展示了一个类型分类函数\",{\"1\":{\"662\":1}}],[\"下面的代码片段展示了如何通过在初始化语句中获取函数\",{\"1\":{\"549\":1}}],[\"下面的代码片段\",{\"1\":{\"547\":1}}],[\"下面的代码在管理员模式下的\",{\"1\":{\"51\":1}}],[\"下面的\",{\"1\":{\"501\":1,\"565\":1,\"599\":1}}],[\"下面需要包含三个文件夹\",{\"1\":{\"446\":1}}],[\"下面又能细分为\",{\"1\":{\"315\":2}}],[\"下文一一讲解常见分库分表的问题及解决方案\",{\"1\":{\"253\":1}}],[\"幸运的是\",{\"1\":{\"51\":1,\"662\":1}}],[\"或通过处理请求的条件或其他方式\",{\"1\":{\"876\":1}}],[\"或通过命令\",{\"1\":{\"469\":1}}],[\"或同意的方法\",{\"1\":{\"873\":1}}],[\"或未满足处理请求的其他条件\",{\"1\":{\"873\":1}}],[\"或客户端未对请求的索赔要求获得预先配置的同意\",{\"1\":{\"873\":1}}],[\"或混合流\",{\"1\":{\"869\":1}}],[\"或简单性\",{\"1\":{\"847\":1}}],[\"或变空\",{\"1\":{\"703\":1}}],[\"或缩减\",{\"1\":{\"694\":1}}],[\"或增加性能和吞吐量\",{\"1\":{\"694\":1}}],[\"或错误场景中恢复\",{\"1\":{\"689\":1}}],[\"或文件\",{\"1\":{\"686\":1}}],[\"或编辑器中直接运行这个程序输出\",{\"1\":{\"681\":1}}],[\"或多个\",{\"0\":{\"702\":1},\"1\":{\"671\":1,\"676\":1}}],[\"或向它写入数据\",{\"1\":{\"662\":1}}],[\"或组合\",{\"1\":{\"656\":1}}],[\"或状态\",{\"1\":{\"652\":1}}],[\"或是非本地的包里定义\",{\"1\":{\"651\":1}}],[\"或类似这些的类型上定义方法\",{\"1\":{\"651\":1}}],[\"或类似字符串\",{\"1\":{\"483\":1}}],[\"或数组的别名类型\",{\"1\":{\"651\":1}}],[\"或内嵌\",{\"1\":{\"647\":1}}],[\"或内存地址中第一个字所在的位置\",{\"1\":{\"516\":1}}],[\"或对象\",{\"1\":{\"640\":1}}],[\"或在平台\",{\"1\":{\"633\":1}}],[\"或空格\",{\"1\":{\"572\":1}}],[\"或必须用于系统级的操作\",{\"1\":{\"569\":1}}],[\"或任意位置执行\",{\"1\":{\"568\":1}}],[\"或称之为\",{\"1\":{\"557\":1}}],[\"或使用抗碰撞名称\",{\"1\":{\"853\":1}}],[\"或使用函数\",{\"1\":{\"600\":1}}],[\"或使用一个更加简短版本的\",{\"1\":{\"575\":1}}],[\"或使用\",{\"1\":{\"548\":1}}],[\"或很多变量\",{\"1\":{\"547\":1}}],[\"或字\",{\"1\":{\"547\":1}}],[\"或运算符的结果才是\",{\"1\":{\"521\":1}}],[\"或运算符\",{\"1\":{\"521\":1}}],[\"或不等\",{\"1\":{\"521\":1}}],[\"或将\",{\"1\":{\"511\":1}}],[\"或将太多的角色分配给单个用户来回避上述问题\",{\"1\":{\"75\":1}}],[\"或与其它返回值一同返回错误消息\",{\"1\":{\"509\":1}}],[\"或常量就可用了\",{\"1\":{\"682\":1}}],[\"或常量\",{\"1\":{\"509\":1}}],[\"或返回语句时就会返回\",{\"1\":{\"507\":1}}],[\"或格式化后的代码\",{\"1\":{\"490\":1}}],[\"或许我们会在不久的将来看到一些可用的\",{\"1\":{\"467\":1}}],[\"或其他标识符\",{\"1\":{\"873\":1}}],[\"或其他元素\",{\"1\":{\"506\":1}}],[\"或其他服务\",{\"1\":{\"51\":1}}],[\"或其它类似的语言有非常深入的了解\",{\"1\":{\"467\":1}}],[\"或标记终止等\",{\"1\":{\"431\":1}}],[\"或写入\",{\"1\":{\"418\":1}}],[\"或调用runtime\",{\"1\":{\"415\":1}}],[\"或子类从父类继承方法\",{\"1\":{\"315\":1}}],[\"或大小不同等问题\",{\"1\":{\"301\":1}}],[\"或时间划分范围\",{\"1\":{\"249\":1}}],[\"或直至找到叶结点且叶结点中的查找仍不成功时\",{\"1\":{\"214\":1}}],[\"或折半查找方法查找\",{\"1\":{\"214\":1}}],[\"或连接\",{\"1\":{\"211\":2}}],[\"或已经\",{\"1\":{\"166\":1,\"202\":1}}],[\"或两个列多个列的结合\",{\"1\":{\"112\":1}}],[\"或改变程序流程\",{\"1\":{\"84\":1}}],[\"或布尔真值指定条件\",{\"1\":{\"84\":1}}],[\"或由列和行的数据库表\",{\"1\":{\"84\":1}}],[\"或一组列\",{\"1\":{\"82\":1}}],[\"或美国\",{\"1\":{\"74\":1}}],[\"或\",{\"1\":{\"63\":2,\"128\":3,\"129\":1,\"132\":1,\"151\":1,\"167\":2,\"187\":1,\"203\":2,\"249\":1,\"283\":2,\"312\":2,\"330\":1,\"439\":1,\"446\":1,\"467\":3,\"475\":1,\"476\":1,\"481\":1,\"482\":3,\"483\":2,\"490\":1,\"499\":1,\"501\":1,\"506\":2,\"509\":1,\"512\":1,\"515\":1,\"516\":1,\"518\":2,\"521\":2,\"531\":2,\"532\":1,\"536\":2,\"545\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":2,\"553\":1,\"556\":3,\"558\":1,\"559\":1,\"562\":1,\"564\":1,\"575\":1,\"626\":1,\"627\":1,\"633\":2,\"635\":1,\"642\":1,\"651\":5,\"659\":1,\"662\":4,\"663\":1,\"678\":1,\"681\":1,\"682\":2,\"686\":4,\"688\":3,\"689\":4,\"691\":1,\"692\":2,\"868\":1}}],[\"或者azp值与aud值不同\",{\"1\":{\"887\":1}}],[\"或者它包含了客户端不信任的其他受众\",{\"1\":{\"887\":1}}],[\"或者如果客户端使用另一种客户端身份验证方法\",{\"1\":{\"882\":1}}],[\"或者引起对请求的注意\",{\"1\":{\"873\":1}}],[\"或者根本不存在\",{\"1\":{\"769\":1}}],[\"或者在\",{\"1\":{\"709\":1}}],[\"或者在表创建之后规定\",{\"1\":{\"112\":1}}],[\"或者通道没有被关闭\",{\"1\":{\"709\":1}}],[\"或者通过函数\",{\"1\":{\"590\":1}}],[\"或者通过使用反射\",{\"1\":{\"561\":1}}],[\"或者通过一个message\",{\"1\":{\"39\":1}}],[\"或者等待两个协程完成\",{\"1\":{\"705\":1}}],[\"或者换个方式\",{\"1\":{\"704\":1}}],[\"或者未设置\",{\"1\":{\"703\":1}}],[\"或者函数通道\",{\"1\":{\"699\":1}}],[\"或者可以以并行的方式部署\",{\"1\":{\"698\":1}}],[\"或者可以使用交叉编译来构建目标平台的应用程序\",{\"1\":{\"481\":1}}],[\"或者执行\",{\"1\":{\"696\":1}}],[\"或者能够同时服务多个请求\",{\"1\":{\"694\":1}}],[\"或者创建一个\",{\"1\":{\"689\":1}}],[\"或者启动失败返回错误\",{\"1\":{\"689\":1}}],[\"或者从结构反序列化为\",{\"1\":{\"686\":1}}],[\"或者任何实现了\",{\"1\":{\"686\":1}}],[\"或者任何实现\",{\"1\":{\"686\":1}}],[\"或者任意你的母语\",{\"1\":{\"612\":1}}],[\"或者指针是\",{\"1\":{\"682\":1}}],[\"或者常量列表\",{\"1\":{\"682\":1}}],[\"或者干脆就是一个二进制文件\",{\"1\":{\"678\":1}}],[\"或者其他并行框架以不同的结构实现了这种方式\",{\"1\":{\"706\":1}}],[\"或者其他任何实现了\",{\"1\":{\"662\":1}}],[\"或者其它一般符号代替\",{\"1\":{\"481\":1}}],[\"或者读写我们的自定义类型\",{\"1\":{\"662\":1}}],[\"或者一个表示每周各天的结构体\",{\"1\":{\"662\":1}}],[\"或者以\",{\"1\":{\"662\":1}}],[\"或者像下面这样将它作为匿名类型嵌入在一个新的结构体中\",{\"1\":{\"651\":1}}],[\"或者叫定制类型\",{\"1\":{\"639\":1}}],[\"或者和\",{\"1\":{\"608\":1}}],[\"或者会快速扩张的\",{\"1\":{\"606\":1}}],[\"或者简写为\",{\"1\":{\"605\":1}}],[\"或者切片的数组\",{\"1\":{\"589\":1}}],[\"或者数学向量\",{\"1\":{\"581\":1}}],[\"或者修改\",{\"1\":{\"580\":1}}],[\"或者不同的返回值\",{\"1\":{\"561\":1}}],[\"或者不等号\",{\"1\":{\"524\":1}}],[\"或者不等\",{\"1\":{\"521\":1}}],[\"或者结束一个协程\",{\"1\":{\"561\":1}}],[\"或者进入\",{\"1\":{\"551\":1}}],[\"或者最终结果为相同类型的表达式\",{\"1\":{\"551\":1}}],[\"或者将\",{\"1\":{\"550\":1}}],[\"或者特性\",{\"1\":{\"549\":1}}],[\"或者有利条件时\",{\"1\":{\"549\":1}}],[\"或者两者都有\",{\"1\":{\"547\":1}}],[\"或者两者兼而有之\",{\"1\":{\"75\":1}}],[\"或者内容或者间接引用\",{\"1\":{\"547\":1}}],[\"或者使用带缓冲的通道\",{\"1\":{\"702\":1}}],[\"或者使用\",{\"1\":{\"546\":1,\"590\":1}}],[\"或者安全地从\",{\"1\":{\"523\":1}}],[\"或者你可以写一个专门用于处理类型转换的函数来确保没有发生精度的丢失\",{\"1\":{\"523\":1}}],[\"或者说\",{\"1\":{\"662\":1}}],[\"或者说根据你的个人喜好对包名进行重新设置\",{\"1\":{\"506\":1}}],[\"或者说开发难度较低但执行速度一般的动态语言呢\",{\"1\":{\"472\":1}}],[\"或者类似文件监控系统的软件\",{\"1\":{\"481\":1}}],[\"或者面向对象编程语言的开发者\",{\"1\":{\"467\":1}}],[\"或者该函数短时间内被调用\",{\"1\":{\"438\":1}}],[\"或者没有添加超时控制\",{\"1\":{\"438\":1}}],[\"或者因为io\",{\"1\":{\"412\":1}}],[\"或者直接拿缓存的\",{\"1\":{\"383\":1}}],[\"或者直接写成\",{\"1\":{\"325\":1}}],[\"或者这么问\",{\"1\":{\"356\":1}}],[\"或者按索引顺序扫描\",{\"1\":{\"225\":1}}],[\"或者\",{\"1\":{\"132\":1,\"324\":1,\"450\":1,\"467\":2,\"476\":1,\"489\":1,\"491\":1,\"502\":1,\"506\":1,\"521\":2,\"523\":3,\"525\":1,\"527\":1,\"531\":2,\"532\":1,\"541\":1,\"544\":1,\"546\":1,\"549\":3,\"561\":1,\"585\":1,\"588\":1,\"605\":1,\"611\":1,\"624\":1,\"626\":2,\"627\":1,\"629\":1,\"640\":1,\"696\":1,\"698\":1,\"699\":1,\"760\":1}}],[\"或者权限控制矩阵\",{\"1\":{\"61\":1}}],[\"或者需要服务端对公钥\",{\"1\":{\"39\":1}}],[\"或者同时使用两种\",{\"1\":{\"39\":1}}],[\"或者是注册过程中客户端在id\",{\"1\":{\"887\":1}}],[\"或者是由起始和终止索引标识的一些项的子集\",{\"1\":{\"585\":1}}],[\"或者是传递一个结构体\",{\"1\":{\"563\":1}}],[\"或者是多个库上去\",{\"1\":{\"246\":1}}],[\"或者是\",{\"1\":{\"39\":1,\"549\":1}}],[\"或者是一个json\",{\"1\":{\"39\":1}}],[\"或者是跨域的服务导向架构\",{\"1\":{\"28\":1}}],[\"组成结构体类型的那些数据称为\",{\"1\":{\"639\":1}}],[\"组成\",{\"1\":{\"585\":1}}],[\"组成的切片\",{\"1\":{\"607\":1}}],[\"组成的切片可以这么生成\",{\"1\":{\"585\":1}}],[\"组成的数组\",{\"1\":{\"363\":1}}],[\"组件编程\",{\"1\":{\"659\":1}}],[\"组件\",{\"1\":{\"410\":1}}],[\"组合更受青睐\",{\"1\":{\"647\":1}}],[\"组合偷取一个可执行的\",{\"1\":{\"409\":1}}],[\"组合了cat字段\",{\"1\":{\"338\":1}}],[\"组合的思想\",{\"1\":{\"320\":1}}],[\"组合索引\",{\"1\":{\"212\":1}}],[\"组合查询示例\",{\"1\":{\"144\":1,\"177\":1}}],[\"组合\",{\"0\":{\"144\":1,\"177\":1}}],[\"组合在一起\",{\"1\":{\"72\":1}}],[\"组织成长\",{\"1\":{\"75\":1}}],[\"组织必须跨部门协调\",{\"1\":{\"75\":1}}],[\"组\",{\"1\":{\"51\":2}}],[\"组的用户才可以访问\",{\"1\":{\"51\":1}}],[\"更具体的例子还有协程处理它从通道接收的数据并发送给输出通道\",{\"1\":{\"709\":1}}],[\"更具有伸缩性\",{\"1\":{\"703\":1}}],[\"更具有扩展性\",{\"1\":{\"29\":1,\"662\":1}}],[\"更具弹性\",{\"1\":{\"703\":1}}],[\"更高的数值无法提升性能\",{\"1\":{\"696\":1}}],[\"更倾向于其他的方式\",{\"1\":{\"694\":1}}],[\"更容易使代码出错以及更低的性能\",{\"1\":{\"694\":1}}],[\"更加简洁\",{\"1\":{\"682\":1}}],[\"更加快\",{\"1\":{\"473\":1}}],[\"更安全的方式是使用以下形式来进行类型断言\",{\"1\":{\"662\":1}}],[\"更简单\",{\"1\":{\"662\":1}}],[\"更简短\",{\"1\":{\"564\":1}}],[\"更干净\",{\"1\":{\"662\":1}}],[\"更正为\",{\"1\":{\"661\":1}}],[\"更像是\",{\"1\":{\"547\":1}}],[\"更好的办法是使用函数\",{\"1\":{\"532\":1}}],[\"更好地组织路由\",{\"1\":{\"455\":1}}],[\"更好地做法是将需要使用\",{\"1\":{\"51\":1}}],[\"更深入地讲\",{\"1\":{\"532\":1}}],[\"更复杂的数据通常会需要使用多个字\",{\"1\":{\"516\":1}}],[\"更快\",{\"1\":{\"481\":1}}],[\"更短的编译时间\",{\"1\":{\"467\":1}}],[\"更多详情在\",{\"1\":{\"638\":1}}],[\"更多信息可以在\",{\"1\":{\"629\":1}}],[\"更多方法中\",{\"1\":{\"624\":1}}],[\"更多有关该包的讨论\",{\"1\":{\"545\":1}}],[\"更多的处理器并不意味着性能的线性提升\",{\"1\":{\"696\":1}}],[\"更多的信息详见\",{\"1\":{\"469\":1}}],[\"更多的规划参考\",{\"1\":{\"461\":1}}],[\"更多内容请参考\",{\"1\":{\"264\":1}}],[\"更不要用来控制流程\",{\"1\":{\"425\":1}}],[\"更小的通常更好\",{\"1\":{\"282\":1}}],[\"更改本地\",{\"1\":{\"829\":1}}],[\"更改密码\",{\"0\":{\"161\":1,\"197\":1}}],[\"更改数据格式和表示\",{\"1\":{\"103\":1}}],[\"更新环境变量\",{\"1\":{\"983\":1}}],[\"更新到新版本的\",{\"1\":{\"629\":1}}],[\"更新版本\",{\"1\":{\"483\":1}}],[\"更新最新的版本快照\",{\"1\":{\"234\":1}}],[\"更新数据\",{\"0\":{\"118\":1}}],[\"更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间\",{\"1\":{\"106\":1}}],[\"更新该包后\",{\"1\":{\"52\":1}}],[\"更新\",{\"1\":{\"52\":1,\"75\":1}}],[\"出生日期和图像\",{\"1\":{\"640\":1}}],[\"出于性能考虑的实用代码片段\",{\"0\":{\"713\":1}}],[\"出于对性能的考虑\",{\"1\":{\"625\":1}}],[\"出于隐私保护的考虑\",{\"1\":{\"476\":1}}],[\"出于安全考虑\",{\"1\":{\"51\":1,\"682\":1}}],[\"出来的\",{\"1\":{\"330\":1}}],[\"出身名门\",{\"1\":{\"320\":1}}],[\"出现在函数前面\",{\"1\":{\"508\":1}}],[\"出现频率低\",{\"0\":{\"430\":1}}],[\"出现冲突时\",{\"1\":{\"363\":1}}],[\"出现读写\",{\"1\":{\"331\":1}}],[\"出现了两次\",{\"1\":{\"288\":1}}],[\"出现哈希冲突时\",{\"1\":{\"217\":1}}],[\"出现sudo\",{\"1\":{\"51\":1}}],[\"与令牌端点的通信必须使用tls\",{\"1\":{\"880\":1}}],[\"与rfc\",{\"1\":{\"878\":1}}],[\"与授权端点的通信必须使用tls\",{\"1\":{\"872\":1}}],[\"与该等信息相关的自然人直接或间接相关的信息\",{\"1\":{\"868\":1}}],[\"与实体相关的属性集\",{\"1\":{\"868\":1}}],[\"与标头\",{\"1\":{\"851\":1}}],[\"与携带\",{\"1\":{\"850\":1}}],[\"与object类型相似\",{\"1\":{\"761\":1}}],[\"与当前资源被使用的数量相同\",{\"1\":{\"707\":1}}],[\"与通道\",{\"0\":{\"693\":1},\"1\":{\"693\":1}}],[\"与其类似\",{\"1\":{\"677\":1}}],[\"与其它语言进行交互\",{\"0\":{\"500\":1}}],[\"与反射\",{\"0\":{\"662\":1}}],[\"与方法\",{\"0\":{\"639\":1}}],[\"与切片\",{\"0\":{\"578\":1}}],[\"与字符串相关的类型转换都是通过\",{\"1\":{\"545\":1}}],[\"与操作系统架构无关的类型都有固定的大小\",{\"1\":{\"523\":1}}],[\"与运算符\",{\"1\":{\"521\":1}}],[\"与相等\",{\"1\":{\"521\":1}}],[\"与各种类型的数字型变量相比\",{\"1\":{\"513\":1}}],[\"与线程相比\",{\"1\":{\"408\":1}}],[\"与原对象是完全独立的\",{\"1\":{\"346\":1}}],[\"与go相比\",{\"1\":{\"317\":1}}],[\"与解决跨节点\",{\"1\":{\"256\":1}}],[\"与\",{\"0\":{\"318\":1,\"345\":2,\"501\":1,\"502\":1,\"558\":1},\"1\":{\"51\":1,\"52\":1,\"85\":1,\"132\":1,\"227\":1,\"467\":1,\"469\":1,\"507\":1,\"517\":1,\"521\":2,\"561\":1,\"564\":1,\"565\":1,\"571\":2,\"677\":1,\"682\":2,\"852\":2,\"858\":1,\"860\":1}}],[\"默认没有并行指令\",{\"1\":{\"695\":1}}],[\"默认都不排序\",{\"1\":{\"611\":1}}],[\"默认使用按值传递来传递参数\",{\"1\":{\"563\":1}}],[\"默认使用自研的高性能网络库\",{\"1\":{\"461\":1}}],[\"默认采用和\",{\"1\":{\"482\":1}}],[\"默认采用隐式提交策略\",{\"1\":{\"151\":1,\"187\":1}}],[\"默认为\",{\"1\":{\"449\":1,\"482\":1}}],[\"默认10000\",{\"1\":{\"409\":1}}],[\"默认事务隔离级别是读已提交\",{\"1\":{\"300\":1}}],[\"默认的\",{\"1\":{\"689\":1}}],[\"默认的事务隔离级别是可重复读\",{\"1\":{\"300\":1}}],[\"默认的是分号\",{\"1\":{\"166\":1,\"202\":1}}],[\"默认会将\",{\"1\":{\"280\":1}}],[\"默认会去除相同行\",{\"1\":{\"144\":1,\"177\":1}}],[\"默认\",{\"1\":{\"122\":1,\"134\":1,\"432\":1}}],[\"默认情况下null和undefined是所有类型的子类型\",{\"1\":{\"764\":1}}],[\"默认情况下\",{\"1\":{\"51\":1,\"701\":1,\"760\":1}}],[\"默认是无序的\",{\"1\":{\"611\":1}}],[\"默认是goroot\",{\"1\":{\"482\":1}}],[\"默认是\",{\"1\":{\"36\":1,\"333\":1}}],[\"默认是不加密的\",{\"1\":{\"35\":1}}],[\"启动m0\",{\"1\":{\"415\":1}}],[\"启动安全脚本提示符\",{\"1\":{\"52\":1}}],[\"启动\",{\"1\":{\"51\":2,\"52\":1}}],[\"启动容器\",{\"1\":{\"6\":2}}],[\"执行于\",{\"1\":{\"694\":1}}],[\"执行这段代码\",{\"1\":{\"638\":1}}],[\"执行这个命令后\",{\"1\":{\"51\":1}}],[\"执行之前依旧需要满足循环的判断条件\",{\"1\":{\"558\":1}}],[\"执行后续的代码\",{\"1\":{\"558\":1}}],[\"执行相关语句\",{\"1\":{\"551\":1}}],[\"执行完成后\",{\"1\":{\"447\":1}}],[\"执行完毕\",{\"1\":{\"424\":1}}],[\"执行用户写的代码\",{\"1\":{\"447\":1}}],[\"执行某一个\",{\"1\":{\"409\":1}}],[\"执行网络系统调用不需要额外的\",{\"1\":{\"330\":1}}],[\"执行\",{\"1\":{\"330\":1,\"561\":1,\"631\":1,\"680\":1,\"682\":1,\"694\":1}}],[\"执行顺序\",{\"1\":{\"325\":1}}],[\"执行文件依赖各种插件\",{\"1\":{\"320\":1}}],[\"执行的身份验证所满足的身份验证上下文类作为acr声明值返回\",{\"1\":{\"873\":1}}],[\"执行的小块测试单元来检查代码的正确性\",{\"1\":{\"689\":1}}],[\"执行的复杂度都是\",{\"1\":{\"303\":1}}],[\"执行的性能\",{\"1\":{\"247\":1}}],[\"执行计划\",{\"0\":{\"264\":1}}],[\"执行效率明显提升\",{\"1\":{\"248\":1}}],[\"执行效率高\",{\"1\":{\"164\":1,\"200\":1,\"273\":1}}],[\"执行性能\",{\"1\":{\"248\":1}}],[\"执行过程可以参考下图\",{\"1\":{\"128\":1}}],[\"执行生成验证码命令\",{\"1\":{\"6\":1}}],[\"$pwd\",{\"1\":{\"635\":1}}],[\"$disable\",{\"1\":{\"483\":1}}],[\"$home\",{\"1\":{\"483\":5}}],[\"$gomaxprocs\",{\"1\":{\"482\":1}}],[\"$goarm\",{\"1\":{\"482\":1}}],[\"$goarch\",{\"1\":{\"482\":2,\"506\":1,\"633\":1}}],[\"$gohostarch\",{\"1\":{\"482\":1}}],[\"$gohostos\",{\"1\":{\"482\":1}}],[\"$gobin\",{\"1\":{\"482\":1}}],[\"$goos\",{\"1\":{\"482\":2,\"506\":1,\"633\":1}}],[\"$goroot\",{\"1\":{\"481\":3,\"482\":1,\"483\":8,\"486\":1,\"487\":1,\"506\":1,\"627\":2,\"629\":2}}],[\"$gopath\",{\"1\":{\"449\":1,\"482\":1,\"483\":1,\"485\":1,\"632\":3,\"636\":1,\"638\":2}}],[\"$user\",{\"1\":{\"51\":1,\"689\":1}}],[\"$\",{\"1\":{\"51\":8,\"166\":3,\"167\":2,\"168\":2,\"202\":3,\"203\":2,\"204\":2,\"501\":2,\"627\":2,\"631\":4,\"633\":2,\"689\":2,\"690\":1,\"757\":1,\"859\":6}}],[\"官方文档\",{\"1\":{\"543\":1,\"545\":1,\"546\":1,\"600\":1}}],[\"官方页面\",{\"1\":{\"483\":1}}],[\"官方发布了用于开发运行在\",{\"1\":{\"476\":1}}],[\"官方网站\",{\"1\":{\"467\":1,\"629\":1}}],[\"官方要求\",{\"1\":{\"446\":1}}],[\"官方解释\",{\"1\":{\"321\":1}}],[\"官方推荐的是使用大写来写关键字\",{\"1\":{\"276\":1}}],[\"官方为了简化安装流程\",{\"1\":{\"51\":1}}],[\"官网地址\",{\"1\":{\"46\":1}}],[\"正迅速成为客户端与中间人之间安全共享数据的理想格式\",{\"1\":{\"857\":1}}],[\"正式\",{\"1\":{\"694\":1}}],[\"正式公布了\",{\"1\":{\"469\":1}}],[\"正常的索赔\",{\"0\":{\"943\":1}}],[\"正常的用例\",{\"1\":{\"689\":1}}],[\"正常模式\",{\"1\":{\"420\":1}}],[\"正在进行的操作\",{\"1\":{\"688\":1}}],[\"正在监听服务端口\",{\"1\":{\"12\":1}}],[\"正则\",{\"1\":{\"624\":1}}],[\"正则表达式语法和使用的详细信息请参考\",{\"1\":{\"624\":1}}],[\"正则表达式功能\",{\"1\":{\"614\":1}}],[\"正确的做法是\",{\"1\":{\"550\":1}}],[\"正确的做法\",{\"1\":{\"513\":1}}],[\"正确安装会出现一个问题\",{\"1\":{\"51\":1}}],[\"正确安装方式\",{\"1\":{\"51\":1}}],[\"正如在\",{\"1\":{\"853\":1}}],[\"正如名字一样\",{\"1\":{\"689\":1}}],[\"正如你所看到的一样\",{\"1\":{\"688\":1}}],[\"正如以下例子所示\",{\"1\":{\"677\":1}}],[\"正如示例\",{\"1\":{\"577\":1}}],[\"正如\",{\"1\":{\"471\":1}}],[\"正好实现控制并发数量\",{\"1\":{\"424\":1}}],[\"正由于此\",{\"1\":{\"320\":1}}],[\"正切\",{\"1\":{\"149\":1,\"182\":1}}],[\"正弦\",{\"1\":{\"149\":1,\"182\":1}}],[\"错误响应参数被添加到重定向uri的查询组件中\",{\"1\":{\"878\":1}}],[\"错误响应参数如下\",{\"1\":{\"878\":1}}],[\"错误代码\",{\"1\":{\"878\":1}}],[\"错误代码通常是login\",{\"1\":{\"873\":1}}],[\"错误的输入\",{\"1\":{\"689\":1}}],[\"错误的做法\",{\"1\":{\"513\":1}}],[\"错误处理\",{\"1\":{\"689\":1}}],[\"错误处理与测试\",{\"0\":{\"687\":1}}],[\"错误变量以\",{\"1\":{\"688\":1}}],[\"错误类型以\",{\"1\":{\"688\":1}}],[\"错误值用来表示异常状态\",{\"1\":{\"687\":1}}],[\"错误\",{\"1\":{\"627\":1,\"688\":2}}],[\"错误管理\",{\"1\":{\"455\":1}}],[\"错误示例\",{\"1\":{\"220\":1}}],[\"错误安装方式\",{\"1\":{\"51\":1}}],[\"错误信息以外的其它有用信息\",{\"1\":{\"688\":1}}],[\"错误信息\",{\"1\":{\"10\":2,\"11\":1,\"688\":1}}],[\"打头的函数并接收一个\",{\"1\":{\"689\":1}}],[\"打头的全局函数\",{\"1\":{\"689\":1}}],[\"打包和安装\",{\"0\":{\"634\":1}}],[\"打开确认按钮文本是\",{\"1\":{\"725\":2}}],[\"打开文件等\",{\"1\":{\"688\":1}}],[\"打开终端并执行\",{\"1\":{\"636\":1}}],[\"打开游标\",{\"1\":{\"168\":2,\"204\":2}}],[\"打开\",{\"1\":{\"52\":1,\"658\":1,\"725\":1}}],[\"打开任务管理器\",{\"1\":{\"50\":1}}],[\"打印机\",{\"1\":{\"801\":1}}],[\"打印所选文件路径\",{\"1\":{\"725\":1}}],[\"打印出来\",{\"1\":{\"709\":1}}],[\"打印了输出的素数\",{\"1\":{\"709\":1}}],[\"打印一个结构体的默认输出可以很好的显示它的内容\",{\"1\":{\"640\":1}}],[\"打印数组元素\",{\"1\":{\"580\":1}}],[\"打印最终报告\",{\"1\":{\"568\":1}}],[\"打印到\",{\"1\":{\"554\":1,\"571\":1}}],[\"打印某个类型的完整说明\",{\"1\":{\"494\":1}}],[\"打印包括字段和限定类型名称在内的实例的完整信息\",{\"1\":{\"494\":1}}],[\"打印包括字段在内的实例的完整信息\",{\"1\":{\"494\":1}}],[\"打印归类后的语法解析树\",{\"1\":{\"481\":1}}],[\"打印编译器版本\",{\"1\":{\"481\":1}}],[\"打印编译过程中的临时文件夹\",{\"1\":{\"449\":1}}],[\"打印产生的汇编代码\",{\"1\":{\"481\":1}}],[\"打印栈结构\",{\"1\":{\"481\":1}}],[\"打印声明信息\",{\"1\":{\"481\":1}}],[\"打印命令执行过程中所涉及到的命令\",{\"1\":{\"449\":1}}],[\"打印命令执行过程中所涉及到的代码包名称\",{\"1\":{\"449\":1}}],[\"打印命令执行过程\",{\"1\":{\"449\":1}}],[\"打印异常\",{\"1\":{\"425\":1}}],[\"打印\",{\"0\":{\"517\":1},\"1\":{\"10\":2,\"11\":1,\"481\":1,\"554\":2,\"640\":1,\"655\":1,\"682\":1}}],[\"第3\",{\"1\":{\"880\":1}}],[\"第2节和5\",{\"1\":{\"876\":1}}],[\"第10\",{\"1\":{\"875\":1}}],[\"第\",{\"0\":{\"468\":1,\"480\":1,\"489\":1,\"503\":1,\"548\":1,\"560\":1,\"578\":1,\"603\":1,\"613\":1,\"639\":1,\"662\":1,\"677\":1,\"687\":1,\"693\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"714\":1,\"715\":1,\"716\":1},\"1\":{\"467\":18,\"473\":1,\"474\":1,\"477\":3,\"481\":2,\"482\":1,\"487\":1,\"494\":2,\"497\":1,\"498\":1,\"504\":1,\"506\":1,\"508\":2,\"509\":3,\"513\":1,\"515\":3,\"516\":8,\"520\":1,\"521\":4,\"523\":2,\"525\":2,\"526\":1,\"527\":2,\"528\":1,\"530\":1,\"532\":4,\"542\":1,\"545\":2,\"546\":1,\"548\":1,\"549\":1,\"550\":2,\"556\":2,\"560\":1,\"561\":7,\"562\":2,\"568\":2,\"569\":1,\"580\":3,\"583\":1,\"628\":1,\"638\":1,\"640\":1,\"645\":1,\"657\":1,\"692\":2,\"849\":1,\"858\":1,\"860\":1}}],[\"第三方\",{\"1\":{\"848\":1}}],[\"第三方依赖\",{\"2\":{\"48\":1}}],[\"第三个元素取决于用于signatures或加密的算法\",{\"1\":{\"849\":1}}],[\"第三个元素是\",{\"1\":{\"580\":1}}],[\"第三个参数是含有系统环境基本信息的结构体\",{\"1\":{\"689\":1}}],[\"第三个字段为数量\",{\"1\":{\"678\":1}}],[\"第三种变化\",{\"1\":{\"581\":1}}],[\"第三范式\",{\"0\":{\"292\":1}}],[\"第二种\",{\"1\":{\"758\":1}}],[\"第二种会好点\",{\"1\":{\"640\":1}}],[\"第二种变化\",{\"1\":{\"581\":1}}],[\"第二次分配切片中每个\",{\"1\":{\"610\":1}}],[\"第二个问题可以使用逗号\",{\"1\":{\"709\":1}}],[\"第二个版本引入了上边的习惯用法\",{\"1\":{\"709\":1}}],[\"第二个协程从通道中读取并打印\",{\"1\":{\"707\":1}}],[\"第二个例子\",{\"1\":{\"689\":1}}],[\"第二个例子从键盘读取输入\",{\"1\":{\"677\":1}}],[\"第二个字段为价格\",{\"1\":{\"678\":1}}],[\"第二个方法属于类型\",{\"1\":{\"657\":1}}],[\"第二个返回值为\",{\"1\":{\"678\":1}}],[\"第二个返回值是错误\",{\"1\":{\"678\":1}}],[\"第二个返回值则是该\",{\"1\":{\"609\":1}}],[\"第二个返回值赋给了空白符\",{\"1\":{\"565\":1}}],[\"第二个参数用来传递选项或参数\",{\"1\":{\"689\":1}}],[\"第二个参数是一个\",{\"1\":{\"593\":1}}],[\"第二个参数为返回的总行数\",{\"1\":{\"122\":1}}],[\"第二个是在该索引位置的值\",{\"1\":{\"591\":1}}],[\"第二个索引为\",{\"1\":{\"580\":1}}],[\"第二\",{\"1\":{\"358\":1,\"424\":1}}],[\"第二范式\",{\"0\":{\"291\":1}}],[\"第一种\",{\"1\":{\"758\":1}}],[\"第一种变化\",{\"1\":{\"581\":1}}],[\"第一次分配切片\",{\"1\":{\"610\":1}}],[\"第一次能出现\",{\"1\":{\"6\":1}}],[\"第一\",{\"1\":{\"358\":1,\"424\":1}}],[\"第一范式\",{\"0\":{\"290\":1}}],[\"第一个可以通过函数\",{\"1\":{\"709\":1}}],[\"第一个提供数字\",{\"1\":{\"707\":1}}],[\"第一个提示符会询问是否要设置验证密码插件\",{\"1\":{\"52\":1}}],[\"第一个例子\",{\"1\":{\"662\":1}}],[\"第一个参数必须实现了\",{\"1\":{\"682\":1}}],[\"第一个参数是\",{\"1\":{\"593\":1}}],[\"第一个参数为起始行\",{\"1\":{\"122\":1}}],[\"第一个返回值\",{\"1\":{\"591\":1,\"609\":1}}],[\"第一个是前\",{\"1\":{\"590\":1}}],[\"第一个元素是\",{\"1\":{\"580\":1}}],[\"第一个元素索引为\",{\"1\":{\"580\":1}}],[\"第一个\",{\"1\":{\"513\":1}}],[\"第一个调用\",{\"1\":{\"507\":1}}],[\"<远程分支名>\",{\"1\":{\"829\":2}}],[\"<远程地址别名>\",{\"1\":{\"829\":2}}],[\"<分支名>\",{\"1\":{\"824\":1,\"825\":1}}],[\"<nil>\",{\"1\":{\"689\":4}}],[\"<lastname>lynn<\",{\"1\":{\"686\":1}}],[\"<person><firstname>laura<\",{\"1\":{\"686\":1}}],[\"<person>\",{\"1\":{\"686\":1}}],[\"<string>somevalue\",{\"1\":{\"766\":1}}],[\"<stdlib\",{\"1\":{\"501\":3}}],[\"<stdio\",{\"1\":{\"501\":2}}],[\"<script>\",{\"1\":{\"682\":1}}],[\"<main\",{\"1\":{\"670\":1}}],[\"<file>\",{\"1\":{\"813\":1,\"814\":1,\"815\":2,\"816\":1,\"817\":2}}],[\"<firstname>laura<\",{\"1\":{\"686\":1}}],[\"<float64\",{\"1\":{\"668\":1,\"669\":2}}],[\"<form\",{\"1\":{\"638\":2}}],[\"<input\",{\"1\":{\"638\":4}}],[\"<br\",{\"1\":{\"638\":2}}],[\"<h1>url\",{\"1\":{\"638\":1}}],[\"<html><body>\",{\"1\":{\"638\":1}}],[\"<exit\",{\"1\":{\"547\":1}}],[\"<<=\",{\"1\":{\"525\":1}}],[\"<<\",{\"1\":{\"513\":11,\"525\":9,\"529\":1}}],[\"<替换内容>\",{\"1\":{\"496\":1}}],[\"<原始内容>\",{\"1\":{\"496\":1}}],[\"<接口\",{\"1\":{\"390\":1}}],[\"<布尔参数>\",{\"1\":{\"389\":1}}],[\"<目标类型的值>\",{\"1\":{\"389\":2}}],[\"<目标类型>\",{\"1\":{\"388\":1}}],[\"<表达式>\",{\"1\":{\"388\":1,\"389\":2}}],[\"<结果类型>\",{\"1\":{\"388\":1}}],[\"<语句>\",{\"1\":{\"168\":1,\"204\":1}}],[\"<=\",{\"1\":{\"130\":1,\"132\":1,\"220\":1,\"523\":4,\"526\":1,\"529\":1,\"532\":1,\"549\":1,\"551\":5,\"559\":2,\"570\":2,\"573\":1,\"577\":1,\"580\":1,\"585\":5,\"662\":1,\"671\":1}}],[\"<>语法\",{\"1\":{\"766\":1}}],[\"<>\",{\"1\":{\"130\":1}}],[\"<\",{\"0\":{\"700\":1},\"1\":{\"46\":1,\"104\":1,\"128\":1,\"130\":1,\"226\":2,\"227\":3,\"267\":2,\"365\":1,\"424\":4,\"427\":4,\"526\":1,\"528\":3,\"529\":2,\"532\":1,\"549\":2,\"550\":1,\"551\":5,\"553\":6,\"557\":4,\"558\":3,\"565\":2,\"567\":1,\"568\":1,\"570\":1,\"573\":1,\"574\":1,\"577\":1,\"580\":4,\"581\":2,\"582\":2,\"585\":3,\"586\":1,\"587\":2,\"592\":2,\"599\":5,\"638\":3,\"642\":1,\"645\":1,\"662\":8,\"670\":2,\"682\":5,\"686\":1,\"688\":1,\"689\":2,\"700\":12,\"701\":3,\"702\":2,\"704\":1,\"705\":11,\"707\":6,\"708\":4,\"709\":35}}],[\"<version>2\",{\"1\":{\"46\":1}}],[\"<artifactid>springdoc\",{\"1\":{\"46\":1}}],[\"<groupid>org\",{\"1\":{\"46\":1}}],[\"<dependency>\",{\"1\":{\"46\":1}}],[\"<token>\",{\"1\":{\"38\":1}}],[\"导入\",{\"1\":{\"629\":1}}],[\"导入的包在包自身初始化前被初始化\",{\"1\":{\"627\":1}}],[\"导入外部安装包\",{\"1\":{\"627\":1}}],[\"导入包之后定义或声明\",{\"1\":{\"506\":1}}],[\"导入包即等同于包含了这个包的所有的代码对象\",{\"1\":{\"506\":1}}],[\"导入与可见性\",{\"0\":{\"506\":1}}],[\"导入一个go的工程\",{\"0\":{\"344\":1}}],[\"导入maven依赖\",{\"1\":{\"46\":1}}],[\"导致一些无法重现或者随机的结果\",{\"1\":{\"694\":1}}],[\"导致你可以有多级的间接引用\",{\"1\":{\"547\":1}}],[\"导致代码啰嗦\",{\"1\":{\"427\":1}}],[\"导致\",{\"1\":{\"330\":1}}],[\"导致内存泄露\",{\"1\":{\"325\":1}}],[\"导致数据库的写操作性能降低\",{\"1\":{\"210\":1}}],[\"导致角色爆炸\",{\"1\":{\"75\":1}}],[\"导致与公司更大的目标不一致\",{\"1\":{\"75\":1}}],[\"导出曲线图\",{\"1\":{\"42\":1}}],[\"获得的\",{\"1\":{\"866\":1}}],[\"获得的验证码输入之前页面中\",{\"1\":{\"6\":1}}],[\"获得一份\",{\"1\":{\"705\":1}}],[\"获得一个指针\",{\"1\":{\"590\":1}}],[\"获得一块新内存\",{\"1\":{\"390\":2}}],[\"获取新值\",{\"1\":{\"700\":1}}],[\"获取栈的最顶部一个非空\",{\"1\":{\"660\":1}}],[\"获取纳秒时间戳\",{\"1\":{\"618\":1}}],[\"获取毫秒时间戳\",{\"1\":{\"618\":1}}],[\"获取当前时间戳\",{\"0\":{\"618\":1},\"1\":{\"618\":1}}],[\"获取当前时间\",{\"0\":{\"616\":1}}],[\"获取到从索引\",{\"1\":{\"596\":1}}],[\"获取到main\",{\"1\":{\"415\":1}}],[\"获取字符串的某一部分\",{\"0\":{\"596\":1}}],[\"获取字符串中某个字节的地址的行为是非法的\",{\"1\":{\"532\":1}}],[\"获取的是存储指定变量内存地址的一个变量\",{\"1\":{\"588\":1}}],[\"获取某个函数在某个包中的文档注释\",{\"1\":{\"497\":1}}],[\"获取子包的文档注释\",{\"1\":{\"497\":1}}],[\"获取包的文档注释\",{\"1\":{\"497\":1}}],[\"获取不到锁的时间超过阈值\",{\"1\":{\"420\":1}}],[\"获取\",{\"1\":{\"353\":2,\"483\":1,\"546\":1,\"859\":1}}],[\"获取各种高质量轮子\",{\"1\":{\"320\":1}}],[\"获取数据\",{\"1\":{\"168\":1,\"204\":1}}],[\"获取脚本\",{\"1\":{\"51\":1}}],[\"获取画布数据\",{\"1\":{\"42\":1}}],[\"保守估计在相同的环境和执行目标的情况下\",{\"1\":{\"499\":1}}],[\"保持语言的小巧\",{\"1\":{\"320\":1}}],[\"保持基表\",{\"1\":{\"137\":1,\"170\":1}}],[\"保证了两个计算\",{\"1\":{\"699\":1}}],[\"保证清理完成\",{\"1\":{\"431\":1}}],[\"保证channel写入和读取数据时线程安全的锁\",{\"1\":{\"398\":1}}],[\"保证读写channel时不存在并发竞争问题\",{\"1\":{\"398\":1}}],[\"保证分布式事务参与方不一定同时在线\",{\"1\":{\"242\":1}}],[\"保证在同一个事务中多次读取同样数据的结果是一样的\",{\"1\":{\"239\":1}}],[\"保证列中的值符合指定的条件\",{\"1\":{\"112\":1}}],[\"保证一个表中的数据匹配另一个表中的值的参照完整性\",{\"1\":{\"112\":1}}],[\"保证某列的每行必须有唯一的值\",{\"1\":{\"112\":1}}],[\"保证数据的安全性\",{\"1\":{\"103\":1}}],[\"保证kibana容器和elasticsearch容器在同一网络中实现互联\",{\"1\":{\"6\":1}}],[\"保存\",{\"1\":{\"725\":1,\"727\":1}}],[\"保存在\",{\"1\":{\"332\":1}}],[\"保存数据在某个时间点的快照\",{\"1\":{\"234\":1}}],[\"保存有组织的数据的容器\",{\"1\":{\"82\":1}}],[\"保存成功\",{\"1\":{\"42\":2}}],[\"保存文件\",{\"1\":{\"42\":2}}],[\"保存按钮\",{\"1\":{\"42\":1}}],[\"文本被循环处理直到\",{\"1\":{\"686\":1}}],[\"文本\",{\"1\":{\"682\":1}}],[\"文本编辑器\",{\"1\":{\"491\":1}}],[\"文本处理\",{\"0\":{\"147\":1,\"180\":1}}],[\"文档发生语法错误时\",{\"1\":{\"688\":1}}],[\"文档时\",{\"1\":{\"662\":1}}],[\"文档页面\",{\"1\":{\"661\":1}}],[\"文档中列出了一些广泛被使用的托管在网络代码仓库的包的导入路径\",{\"1\":{\"627\":1}}],[\"文档主页\",{\"1\":{\"501\":1}}],[\"文档全面\",{\"1\":{\"479\":1}}],[\"文档\",{\"1\":{\"52\":1,\"454\":1,\"456\":1,\"457\":1,\"459\":1,\"460\":1,\"461\":1,\"462\":1,\"481\":1,\"490\":1}}],[\"文档和索引的方式都是相同的\",{\"1\":{\"6\":1}}],[\"文件存在时的状态提交到本地库\",{\"1\":{\"821\":1}}],[\"文件和文件夹\",{\"1\":{\"728\":1}}],[\"文件或流是完全自描述的\",{\"1\":{\"686\":1}}],[\"文件会一直保持打开状态并占用资源\",{\"1\":{\"680\":1}}],[\"文件会被放置到\",{\"1\":{\"450\":1}}],[\"文件时发生了错误\",{\"1\":{\"680\":1}}],[\"文件的权限是被忽略的\",{\"1\":{\"680\":1}}],[\"文件的内容是不按行划分的\",{\"1\":{\"678\":1}}],[\"文件句柄\",{\"1\":{\"678\":1}}],[\"文件使用指向\",{\"1\":{\"678\":1}}],[\"文件使用后缀名\",{\"1\":{\"481\":1}}],[\"文件描述符\",{\"1\":{\"642\":1}}],[\"文件中写入\",{\"1\":{\"691\":1}}],[\"文件中别的测试也被略过\",{\"1\":{\"689\":1}}],[\"文件中添加\",{\"1\":{\"631\":1}}],[\"文件中\",{\"1\":{\"629\":1}}],[\"文件中有一些注释\",{\"1\":{\"628\":1}}],[\"文件需要未编译\",{\"1\":{\"628\":1}}],[\"文件功能\",{\"1\":{\"614\":1}}],[\"文件对象被传入到某个函数中\",{\"1\":{\"550\":1}}],[\"文件都属于且仅属于一个包\",{\"1\":{\"506\":1}}],[\"文件名不包含空格或其他特殊字符\",{\"1\":{\"504\":1}}],[\"文件名\",{\"0\":{\"504\":1},\"1\":{\"642\":1,\"680\":1,\"822\":2}}],[\"文件也可以被自动生成\",{\"1\":{\"502\":1}}],[\"文件来编译\",{\"1\":{\"501\":1}}],[\"文件夹\",{\"1\":{\"483\":1,\"728\":1}}],[\"文件夹名称永远不应该包含空格\",{\"1\":{\"481\":1}}],[\"文件扩展名与包\",{\"1\":{\"481\":1}}],[\"文件一键生成\",{\"1\":{\"459\":1}}],[\"文件\",{\"1\":{\"449\":3,\"450\":1,\"456\":1,\"481\":2,\"501\":1,\"553\":1,\"627\":1,\"628\":1,\"631\":1,\"635\":1,\"678\":3,\"679\":1,\"682\":1,\"686\":1,\"728\":1}}],[\"文件作为\",{\"1\":{\"293\":1}}],[\"文件上就有\",{\"1\":{\"62\":1}}],[\"文件已存在\",{\"1\":{\"42\":1}}],[\"文件不存在创建文件\",{\"1\":{\"42\":1}}],[\"文件选择器\",{\"0\":{\"724\":1},\"1\":{\"42\":1}}],[\"则行为未指定\",{\"1\":{\"887\":1}}],[\"则行为完全未指定\",{\"1\":{\"873\":1}}],[\"则为required\",{\"1\":{\"878\":1}}],[\"则授权服务器将返回积极响应\",{\"1\":{\"873\":1}}],[\"则不应导致错误\",{\"1\":{\"873\":1}}],[\"则不会只退出内层循环\",{\"1\":{\"559\":1}}],[\"则默认显示方式为display\",{\"1\":{\"873\":1}}],[\"则应将其设置为\",{\"1\":{\"850\":1}}],[\"则没有这些字段\",{\"1\":{\"850\":1}}],[\"则没有错误发生\",{\"1\":{\"687\":1}}],[\"则省略\",{\"1\":{\"849\":1}}],[\"则按照\",{\"1\":{\"830\":1}}],[\"则这个协程不会被垃圾回收\",{\"1\":{\"708\":1}}],[\"则这个类就是抽象类\",{\"1\":{\"392\":1}}],[\"则无法完成认证请求\",{\"1\":{\"878\":3}}],[\"则无法完成\",{\"1\":{\"697\":1}}],[\"则无需访问主索引\",{\"1\":{\"224\":1}}],[\"则开始\",{\"1\":{\"692\":1}}],[\"则变为\",{\"1\":{\"689\":1}}],[\"则表示已经被排序\",{\"1\":{\"600\":1}}],[\"则表示获取从\",{\"1\":{\"596\":1}}],[\"则表示有结束时间\",{\"1\":{\"394\":1}}],[\"则再进行计算\",{\"1\":{\"577\":1}}],[\"则称之为递归\",{\"1\":{\"570\":1}}],[\"则认为它们是相同的函数\",{\"1\":{\"561\":1}}],[\"则退出循环体\",{\"1\":{\"553\":1}}],[\"则前段代码块的右大括号\",{\"1\":{\"549\":1}}],[\"则把尽可能先满足的条件放在前面\",{\"1\":{\"549\":1}}],[\"则替换所有字符串\",{\"1\":{\"537\":1}}],[\"则总是紧跟着长度为\",{\"1\":{\"531\":1}}],[\"则结果是当前值除以\",{\"1\":{\"525\":1}}],[\"则结果是\",{\"1\":{\"525\":1}}],[\"则将得到编译错误\",{\"1\":{\"523\":1}}],[\"则将其分配到栈上\",{\"1\":{\"442\":1}}],[\"则其中一个值的类型必须在被转换为和另外一个值的类型相同之后才可以进行比较\",{\"1\":{\"521\":1}}],[\"则官方鼓励但不保证以文件名的顺序调用\",{\"1\":{\"519\":1}}],[\"则此时外部的同名变量将会暂时隐藏\",{\"1\":{\"515\":1}}],[\"则被认为是全局变量\",{\"1\":{\"515\":1}}],[\"则需要将首个单词的首字母也大写\",{\"1\":{\"515\":1}}],[\"则需要将它们分开书写\",{\"1\":{\"515\":1}}],[\"则需要安装\",{\"1\":{\"485\":1}}],[\"则调用该函数\",{\"1\":{\"510\":1}}],[\"则调用者修改的是指针指向的对象本身\",{\"1\":{\"382\":1}}],[\"则定义\",{\"1\":{\"510\":1}}],[\"则对该函数进行定义\",{\"1\":{\"510\":1}}],[\"则对包外是不可见的\",{\"1\":{\"506\":1}}],[\"则要以\",{\"1\":{\"508\":1}}],[\"则包和包内的文件都必须以正确的顺序进行编译\",{\"1\":{\"506\":1}}],[\"则在\",{\"1\":{\"506\":1}}],[\"则只会打印格式化后的结果而不重写文件\",{\"1\":{\"496\":1}}],[\"则说明你的环境变量没有配置正确\",{\"1\":{\"485\":1}}],[\"则必须出现一个nonce\",{\"1\":{\"887\":1}}],[\"则必须是全球唯一的\",{\"1\":{\"852\":1}}],[\"则必须存在该声明并携带\",{\"1\":{\"850\":1}}],[\"则必须在单独的一行使用\",{\"1\":{\"501\":1}}],[\"则必须使用\",{\"1\":{\"484\":1}}],[\"则必定放到堆中\",{\"1\":{\"445\":1}}],[\"则存放可执行文件\",{\"1\":{\"446\":1}}],[\"则优先放到栈中\",{\"1\":{\"445\":1}}],[\"则优先从oldbuckets查找\",{\"1\":{\"374\":1}}],[\"则启动\",{\"1\":{\"432\":1}}],[\"则最终会加入到等待队列里\",{\"1\":{\"421\":1}}],[\"则最多利用了一半的cpu核进行并行\",{\"1\":{\"411\":1}}],[\"则创建新的线程\",{\"1\":{\"409\":1}}],[\"则当前线程就会释放p\",{\"1\":{\"409\":1}}],[\"则返回错误\",{\"1\":{\"873\":2}}],[\"则返回读取到的字符串和\",{\"1\":{\"677\":1}}],[\"则返回\",{\"1\":{\"572\":1}}],[\"则返回一个长度为\",{\"1\":{\"542\":1}}],[\"则返回一个零值\",{\"1\":{\"400\":1}}],[\"则返回给用户异常信息\",{\"1\":{\"419\":1}}],[\"则返回该结点的地址及\",{\"1\":{\"214\":1}}],[\"则很容易知道这种判定的时间复杂度为\",{\"1\":{\"390\":1}}],[\"则可能需要手动修改所有的环境变量的值\",{\"1\":{\"485\":1}}],[\"则可认为该类型实现了该接口\",{\"1\":{\"390\":1}}],[\"则可以通过\",{\"1\":{\"567\":1}}],[\"则可以是同类型的任意值\",{\"1\":{\"551\":1}}],[\"则可以在上面代码的基础上添加\",{\"1\":{\"549\":1}}],[\"则可以使用tls服务器验证来验证颁发者\",{\"1\":{\"887\":1}}],[\"则可以使用此提示\",{\"1\":{\"873\":1}}],[\"则可以使用默认的空接口\",{\"1\":{\"567\":1}}],[\"则可以使用括号让代码更易读\",{\"1\":{\"549\":1}}],[\"则可以使用下面这种三个独立分支的形式\",{\"1\":{\"549\":1}}],[\"则可以使用\",{\"1\":{\"541\":2,\"546\":1,\"567\":1}}],[\"则可以使用指令\",{\"1\":{\"485\":1}}],[\"则可以简单地使用\",{\"1\":{\"518\":1}}],[\"则可以很轻松地将它们都声明为指针类型\",{\"1\":{\"515\":1}}],[\"则可以按照字母顺序来进行排序\",{\"1\":{\"510\":1}}],[\"则可以加大\",{\"1\":{\"256\":1}}],[\"则可以适当拆分为多张不同领域的用户信息表\",{\"1\":{\"72\":1}}],[\"则可以将两张表拆为以下三张表\",{\"1\":{\"72\":1}}],[\"则指向具体的数据\",{\"1\":{\"384\":1}}],[\"则指向接口具体的值\",{\"1\":{\"383\":1}}],[\"则继续从下个overflow的bucket中查找\",{\"1\":{\"374\":1}}],[\"则去找到该bucket中的key值进行比较\",{\"1\":{\"374\":1}}],[\"则使用aud\",{\"1\":{\"887\":1}}],[\"则使用客户端在op用于加密id令牌的注册期间指定的密钥和算法对其解密\",{\"1\":{\"887\":1}}],[\"则使用sha\",{\"1\":{\"886\":1}}],[\"则使用下划线\",{\"1\":{\"504\":1}}],[\"则使用\",{\"1\":{\"363\":1,\"512\":1,\"545\":1,\"558\":1}}],[\"则函数内的修改不会影响函数外的\",{\"1\":{\"354\":1}}],[\"则函数内变量的值会新生成一个数组\",{\"1\":{\"354\":1}}],[\"则函数内复制的\",{\"1\":{\"354\":1}}],[\"则采用较大的扩容倍速进行扩容\",{\"1\":{\"354\":1}}],[\"则追加新元素进去\",{\"1\":{\"354\":1}}],[\"则一般使用\",{\"1\":{\"349\":1}}],[\"则编译错误\",{\"1\":{\"340\":1}}],[\"则另当别论\",{\"1\":{\"303\":1}}],[\"则限定用户只能看前面\",{\"1\":{\"256\":1}}],[\"则允许系统状态更新有一定的延时\",{\"1\":{\"242\":1}}],[\"则会产生指针的拷贝\",{\"1\":{\"557\":1}}],[\"则会打印相应的错误信息然后通过\",{\"1\":{\"550\":1}}],[\"则会执行\",{\"1\":{\"549\":1}}],[\"则会执行下面的if语句\",{\"1\":{\"11\":1}}],[\"则会加上\",{\"1\":{\"531\":1}}],[\"则会引发编译错误\",{\"1\":{\"527\":1}}],[\"则会引发\",{\"1\":{\"523\":1}}],[\"则会引发构建错误\",{\"1\":{\"507\":1}}],[\"则会得到编译错误\",{\"1\":{\"518\":1}}],[\"则会输出\",{\"1\":{\"515\":2}}],[\"则会返回非零值\",{\"1\":{\"507\":1}}],[\"则会在编译时获得编译错误\",{\"1\":{\"520\":1}}],[\"则会在构建程序时引发错误\",{\"1\":{\"506\":1}}],[\"则会在系统的绝对路径中查找\",{\"1\":{\"506\":1}}],[\"则会在每个节点依次命中\",{\"1\":{\"226\":1}}],[\"则会指明源码中具体第几行出现了什么错误\",{\"1\":{\"495\":1}}],[\"则会把堆中黑色对象添加的白色对象改成灰色\",{\"1\":{\"429\":1}}],[\"则会从全局队列或其他\",{\"1\":{\"410\":1}}],[\"则会保存到全局队列中\",{\"1\":{\"409\":1}}],[\"则数据库不会使用索引\",{\"1\":{\"220\":1}}],[\"则从第一步开始递归执行\",{\"1\":{\"510\":1}}],[\"则从缓冲区取出数据\",{\"1\":{\"403\":1,\"405\":1}}],[\"则从\",{\"1\":{\"214\":1}}],[\"则列值的组合必须唯一\",{\"1\":{\"212\":1}}],[\"则回退到\",{\"1\":{\"151\":1,\"187\":1}}],[\"则该字符会被设置为\",{\"1\":{\"595\":1}}],[\"则该goruntine进入一个先入先出的waiter队列\",{\"1\":{\"420\":1}}],[\"则该\",{\"1\":{\"137\":1,\"170\":1}}],[\"则\",{\"1\":{\"72\":1,\"287\":1,\"354\":1,\"506\":2}}],[\"则是遍历灰色节点的时候出现可达的节点被删除\",{\"1\":{\"429\":1}}],[\"则是不包含任何方法的空接口\",{\"1\":{\"383\":1}}],[\"则是用于给每个用户的登录密码加一把唯一的锁\",{\"1\":{\"72\":1}}],[\"则是通过动态计算一个或一组属性是否满足某种条件来进行授权判断\",{\"1\":{\"63\":1}}],[\"则因为不够灵活而不能适用\",{\"1\":{\"62\":1}}],[\"则它是一个jwe\",{\"1\":{\"39\":1}}],[\"则它是一个jws\",{\"1\":{\"39\":1}}],[\"荷载\",{\"1\":{\"39\":1}}],[\"密码\",{\"1\":{\"98\":1,\"112\":1}}],[\"密码加盐\",{\"1\":{\"72\":2}}],[\"密码的强度\",{\"1\":{\"52\":1}}],[\"密码还是nacos\",{\"1\":{\"4\":1}}],[\"密钥散列消息验证码\",{\"1\":{\"860\":1}}],[\"密钥\",{\"1\":{\"39\":1}}],[\"拒绝这次请求或者锁定客户端之类的\",{\"1\":{\"39\":1}}],[\"换为空接口\",{\"1\":{\"675\":1}}],[\"换行符\",{\"1\":{\"532\":1}}],[\"换句话说\",{\"1\":{\"39\":1,\"239\":1,\"513\":1,\"602\":1,\"660\":1,\"848\":2,\"852\":2,\"853\":1,\"857\":1,\"860\":1}}],[\"换言之\",{\"1\":{\"39\":1,\"588\":1}}],[\"顾名思义\",{\"1\":{\"39\":1}}],[\"发行者\",{\"1\":{\"887\":1}}],[\"发行者标识符\",{\"1\":{\"868\":1}}],[\"发行人\",{\"1\":{\"868\":1}}],[\"发行版镜像\",{\"1\":{\"485\":1}}],[\"发明的\",{\"1\":{\"694\":1}}],[\"发明之父\",{\"1\":{\"469\":1}}],[\"发布自签名id令牌的个人的\",{\"1\":{\"868\":1}}],[\"发布者标识符是一个大小写敏感的url\",{\"1\":{\"868\":1}}],[\"发布一组claims的实体\",{\"1\":{\"868\":1}}],[\"发布的具体日期和时间的数字\",{\"1\":{\"852\":1}}],[\"发布的指令为\",{\"1\":{\"635\":1}}],[\"发布的时候并没有包含过时或者实验性的包\",{\"1\":{\"623\":1}}],[\"发布历史\",{\"1\":{\"483\":1}}],[\"发展都不是很成熟\",{\"1\":{\"489\":1}}],[\"发生最终用户身份验证的时间\",{\"1\":{\"869\":1}}],[\"发生的函数\",{\"1\":{\"689\":1}}],[\"发生了数组内存拷贝\",{\"1\":{\"580\":1}}],[\"发生错误时进入恐慌\",{\"1\":{\"481\":1}}],[\"发生死锁后\",{\"1\":{\"235\":1}}],[\"发现\",{\"1\":{\"462\":1,\"866\":1}}],[\"发现当前内存空间不存在空闲跨度时\",{\"1\":{\"443\":1}}],[\"发现下面两种情况的其中之一\",{\"1\":{\"420\":1}}],[\"发起第二次请求得到关联数据\",{\"1\":{\"255\":1}}],[\"发起操作的主体\",{\"1\":{\"60\":1}}],[\"发送信号\",{\"1\":{\"705\":1}}],[\"发送操作\",{\"1\":{\"701\":1}}],[\"发送不会结束\",{\"1\":{\"701\":1}}],[\"发送了\",{\"1\":{\"700\":1}}],[\"发送变量\",{\"1\":{\"700\":1}}],[\"发送一个请求\",{\"1\":{\"869\":1}}],[\"发送一个邮件或者是记录一个错误等\",{\"1\":{\"563\":1}}],[\"发送一个数据到channel\",{\"1\":{\"396\":1}}],[\"发送指针数据\",{\"1\":{\"439\":1}}],[\"发送多个get请求\",{\"0\":{\"427\":1}}],[\"发送流程\",{\"0\":{\"402\":1}}],[\"发送数据和从\",{\"0\":{\"401\":1}}],[\"发送数据\",{\"1\":{\"400\":2}}],[\"发送消息\",{\"1\":{\"335\":1}}],[\"发送回服务端\",{\"1\":{\"39\":1}}],[\"发送\",{\"1\":{\"39\":1,\"700\":2,\"703\":1}}],[\"发回给用户\",{\"1\":{\"29\":1}}],[\"进一步的测量参考\",{\"1\":{\"661\":1}}],[\"进制表示则为\",{\"1\":{\"531\":1}}],[\"进制表示的数字\",{\"1\":{\"523\":1}}],[\"进制数之前加上前缀\",{\"1\":{\"531\":1}}],[\"进制数\",{\"1\":{\"523\":2,\"531\":5}}],[\"进程是一个运行在自己内存地址空间里的独立执行体\",{\"1\":{\"694\":1}}],[\"进程选中并从内存中移除以前\",{\"1\":{\"661\":1}}],[\"进程在执行\",{\"1\":{\"661\":1}}],[\"进程\",{\"0\":{\"408\":1},\"1\":{\"408\":1,\"661\":1}}],[\"进而保证更快的存取\",{\"1\":{\"373\":1}}],[\"进出\",{\"1\":{\"63\":1}}],[\"进行序列化\",{\"1\":{\"873\":1}}],[\"进行签名和加密\",{\"1\":{\"869\":1}}],[\"进行签名\",{\"1\":{\"869\":1}}],[\"进行认证\",{\"1\":{\"868\":1}}],[\"进行精简或去除无意义字符\",{\"1\":{\"855\":1}}],[\"进行精简或去除无意义的字符\",{\"1\":{\"855\":1}}],[\"进行排序\",{\"1\":{\"662\":2}}],[\"进行运行时类型分析\",{\"1\":{\"662\":1}}],[\"进行匹配\",{\"1\":{\"624\":1}}],[\"进行搜索\",{\"1\":{\"600\":1}}],[\"进行初始化并获取对应的内存地址\",{\"1\":{\"588\":1}}],[\"进行更多的工作\",{\"1\":{\"569\":1}}],[\"进行更多地讨论\",{\"1\":{\"550\":1}}],[\"进行二次传递\",{\"1\":{\"567\":1}}],[\"进行对比\",{\"1\":{\"557\":1}}],[\"进行赋值\",{\"1\":{\"550\":1}}],[\"进行分析\",{\"1\":{\"532\":1}}],[\"进行交互\",{\"0\":{\"501\":1,\"502\":1}}],[\"进行编译\",{\"1\":{\"483\":1}}],[\"进行编译工作\",{\"1\":{\"474\":1}}],[\"进行链接\",{\"1\":{\"481\":1}}],[\"进行区别对待\",{\"1\":{\"481\":1}}],[\"进行安装\",{\"1\":{\"469\":1}}],[\"进行并发和多核应用的基本技巧的讲解\",{\"1\":{\"467\":1}}],[\"进行并发访问\",{\"0\":{\"361\":1}}],[\"进行读写操作\",{\"1\":{\"417\":1}}],[\"进行网络系统调用\",{\"1\":{\"330\":1}}],[\"进行深入理解和说明\",{\"1\":{\"316\":1}}],[\"进行连接\",{\"1\":{\"305\":1}}],[\"进行循环\",{\"1\":{\"303\":2}}],[\"进行回滚\",{\"1\":{\"236\":1}}],[\"进行了角色的访问控制\",{\"1\":{\"68\":1}}],[\"进行如下测试\",{\"1\":{\"51\":1}}],[\"进行保存操作\",{\"1\":{\"42\":1}}],[\"进行完整性保护可选择是否加密\",{\"1\":{\"39\":1}}],[\"进入到\",{\"1\":{\"635\":1}}],[\"进入\",{\"1\":{\"483\":2}}],[\"进入睡眠\",{\"1\":{\"402\":1,\"403\":1,\"405\":2}}],[\"进入elastic容器中\",{\"1\":{\"6\":1}}],[\"进入kibana容器中\",{\"1\":{\"6\":1}}],[\"进入容器\",{\"1\":{\"6\":1}}],[\"进入conf目录\",{\"1\":{\"4\":1}}],[\"进入nacos容器\",{\"1\":{\"4\":1}}],[\"的5\",{\"1\":{\"884\":1}}],[\"的4\",{\"1\":{\"881\":1,\"883\":1}}],[\"的规定\",{\"1\":{\"874\":1,\"883\":1}}],[\"的规则\",{\"1\":{\"525\":1}}],[\"的规则总结\",{\"1\":{\"332\":1}}],[\"的解释请参见rfc2119\",{\"1\":{\"867\":1}}],[\"的解决方案的复杂性\",{\"1\":{\"847\":1}}],[\"的替代算法\",{\"1\":{\"860\":1}}],[\"的替代产品\",{\"1\":{\"296\":2}}],[\"的签名算法\",{\"1\":{\"859\":1}}],[\"的签发方\",{\"1\":{\"852\":1}}],[\"的过程与不安全的\",{\"1\":{\"858\":1}}],[\"的过程中函数\",{\"1\":{\"574\":1}}],[\"的处理方法是只保留最后出现的有效请求\",{\"1\":{\"853\":1}}],[\"的预期收件人\",{\"1\":{\"852\":1}}],[\"的有效载荷\",{\"1\":{\"850\":1}}],[\"的其他对象混合使用\",{\"1\":{\"850\":1}}],[\"的其余部分\",{\"1\":{\"850\":1}}],[\"的另一个关键点是可以对其进行signatures\",{\"1\":{\"845\":1}}],[\"的算法\",{\"1\":{\"844\":1}}],[\"的容器给通道填入元素\",{\"1\":{\"708\":1}}],[\"的容量不足以存储新增元素\",{\"1\":{\"593\":1}}],[\"的容量大小\",{\"0\":{\"370\":1}}],[\"的容量大于或者等于\",{\"1\":{\"354\":1}}],[\"的通道来改善\",{\"1\":{\"709\":1}}],[\"的通道\",{\"1\":{\"707\":1}}],[\"的通道增加缓冲并观察输出有何不同\",{\"1\":{\"703\":1}}],[\"的单独拷贝\",{\"1\":{\"705\":2}}],[\"的发布都有特定的目的和明确的潜在用户\",{\"1\":{\"853\":1}}],[\"的发送完成和\",{\"1\":{\"700\":1}}],[\"的发展速度无法跟上计算机发展的脚步\",{\"1\":{\"472\":1}}],[\"的笔记本电脑上\",{\"1\":{\"696\":1}}],[\"的重点不在于并行的首要位置\",{\"1\":{\"695\":1}}],[\"的重载\",{\"1\":{\"527\":1}}],[\"的并发原语提供了良好的并发设计基础\",{\"1\":{\"695\":1}}],[\"的并发语言\",{\"1\":{\"467\":1}}],[\"的协程和通道理所当然的支持确定性的并发方式\",{\"1\":{\"694\":1}}],[\"的栈内存就可以在堆中创建它们\",{\"1\":{\"694\":1}}],[\"的效果\",{\"1\":{\"689\":1}}],[\"的测试程序\",{\"1\":{\"689\":1}}],[\"的测试工具\",{\"1\":{\"689\":1}}],[\"的测试文件在目录下\",{\"1\":{\"631\":1}}],[\"的设计者觉得\",{\"1\":{\"687\":1}}],[\"的设计中\",{\"1\":{\"62\":1}}],[\"的反射\",{\"1\":{\"686\":1}}],[\"的环境中\",{\"1\":{\"686\":1}}],[\"的动态类型\",{\"0\":{\"671\":1}}],[\"的部分代码\",{\"1\":{\"670\":1}}],[\"的部署工作还是要比\",{\"1\":{\"487\":1}}],[\"的改变并不能更改原始的\",{\"1\":{\"669\":1}}],[\"的零值\",{\"1\":{\"662\":1}}],[\"的零值并返回其地址\",{\"1\":{\"569\":1}}],[\"的静态类型是\",{\"1\":{\"662\":1}}],[\"的面向对象编程语言\",{\"1\":{\"662\":1}}],[\"的接口提高了代码的分离度\",{\"1\":{\"672\":1}}],[\"的接口提供了更强大\",{\"1\":{\"659\":1}}],[\"的接口是使用抽象类来实现的\",{\"1\":{\"392\":1}}],[\"的完整例子\",{\"1\":{\"655\":1}}],[\"的内容很简单\",{\"1\":{\"850\":1}}],[\"的内容如下\",{\"1\":{\"678\":1}}],[\"的内容\",{\"1\":{\"653\":1}}],[\"的内存地址\",{\"1\":{\"516\":1,\"547\":1,\"588\":1}}],[\"的内存地址始终不变\",{\"1\":{\"324\":1}}],[\"的内存管理机制无法管理通过\",{\"1\":{\"501\":1}}],[\"的内存逃逸吗\",{\"0\":{\"439\":1}}],[\"的内存泄漏\",{\"1\":{\"438\":1}}],[\"的名字呢\",{\"1\":{\"654\":1}}],[\"的名字\",{\"1\":{\"651\":1}}],[\"的名字来获取存储在匿名字段中的数据\",{\"1\":{\"647\":1}}],[\"的三种类型中的其中两个\",{\"1\":{\"643\":1}}],[\"的唯一方式\",{\"1\":{\"642\":1}}],[\"的更改能作用到\",{\"1\":{\"669\":1}}],[\"的更简短和惯用的方式如下\",{\"1\":{\"640\":1}}],[\"的更多信息\",{\"1\":{\"496\":1}}],[\"的页面来测试\",{\"1\":{\"638\":1}}],[\"的生产者\",{\"1\":{\"708\":1}}],[\"的生态要比这大的多\",{\"1\":{\"637\":1}}],[\"的生成方式\",{\"1\":{\"580\":1}}],[\"的外部包和项目\",{\"0\":{\"637\":1}}],[\"的机器上\",{\"1\":{\"635\":1}}],[\"的简单包\",{\"1\":{\"630\":1}}],[\"的简化程度相比较\",{\"1\":{\"474\":1}}],[\"的版本发布的很频繁\",{\"1\":{\"629\":1}}],[\"的版本信息\",{\"1\":{\"483\":1}}],[\"的导入路径形式是\",{\"1\":{\"629\":1}}],[\"的子目录\",{\"1\":{\"631\":1}}],[\"的子目录下\",{\"1\":{\"629\":1}}],[\"的子字符串\",{\"1\":{\"596\":1}}],[\"的身份执行命令\",{\"1\":{\"629\":1}}],[\"的目录中一个以操作系统为名的子目录下\",{\"1\":{\"627\":1}}],[\"的首选方式\",{\"1\":{\"627\":1}}],[\"的小写单词来为文件命名\",{\"1\":{\"627\":1}}],[\"的小组\",{\"1\":{\"469\":1}}],[\"的命令\",{\"1\":{\"614\":1}}],[\"的命名空间\",{\"1\":{\"501\":1}}],[\"的集合\",{\"1\":{\"612\":1}}],[\"的集成开发环境\",{\"1\":{\"490\":1}}],[\"的键值对调\",{\"0\":{\"612\":1}}],[\"的排序\",{\"0\":{\"611\":1}}],[\"的遍历结果在扩容前后变得不可靠\",{\"1\":{\"609\":1}}],[\"的增长扩容会导致重新进行散列\",{\"1\":{\"609\":1}}],[\"的本质是散列表\",{\"1\":{\"609\":1}}],[\"的本地队列为空\",{\"1\":{\"409\":1,\"410\":1}}],[\"的本地队列已经满了\",{\"1\":{\"409\":1}}],[\"的本地队列中窃取可运行的\",{\"1\":{\"410\":1}}],[\"的本地队列中\",{\"1\":{\"409\":1}}],[\"的本地队列\",{\"1\":{\"409\":2}}],[\"的序排列的\",{\"1\":{\"609\":1}}],[\"的配套用法\",{\"0\":{\"609\":1}}],[\"的具体例子\",{\"1\":{\"606\":1}}],[\"的大小会自动加\",{\"1\":{\"606\":1}}],[\"的引用\",{\"1\":{\"605\":1}}],[\"的无序集合\",{\"1\":{\"603\":1}}],[\"的新切片\",{\"1\":{\"601\":1}}],[\"的新回收器正在研发中\",{\"1\":{\"487\":1}}],[\"的元素到新的切片\",{\"1\":{\"601\":1}}],[\"的元素追加到切片\",{\"1\":{\"601\":1}}],[\"的元素追加到切片后面并且返回新的切片\",{\"1\":{\"593\":1}}],[\"的元素\",{\"1\":{\"600\":1,\"601\":1}}],[\"的元素切片\",{\"1\":{\"593\":1}}],[\"的关系\",{\"1\":{\"588\":1}}],[\"的地址\",{\"1\":{\"669\":1}}],[\"的地址的指针\",{\"1\":{\"588\":1}}],[\"的地址传给协程\",{\"1\":{\"324\":1}}],[\"的索引时\",{\"1\":{\"580\":1}}],[\"的索引数据结构都是\",{\"1\":{\"294\":1}}],[\"的影响\",{\"1\":{\"578\":1}}],[\"的阶乘\",{\"1\":{\"571\":1}}],[\"的阶乘定义为\",{\"1\":{\"571\":1}}],[\"的技术解决\",{\"1\":{\"570\":1}}],[\"的初始容量\",{\"1\":{\"606\":1}}],[\"的初始化\",{\"1\":{\"605\":1}}],[\"的初始化之后的值\",{\"1\":{\"569\":1}}],[\"的初始长度\",{\"1\":{\"587\":1}}],[\"的初始值\",{\"1\":{\"519\":1,\"588\":1}}],[\"的参数\",{\"1\":{\"567\":1,\"640\":1,\"676\":1}}],[\"的消耗都比传递副本来得少\",{\"1\":{\"563\":1}}],[\"的代码片段中\",{\"1\":{\"706\":1}}],[\"的代码\",{\"1\":{\"558\":1,\"627\":1,\"662\":1}}],[\"的矩形\",{\"1\":{\"554\":1}}],[\"的倍数的数\",{\"1\":{\"554\":1}}],[\"的倍数时\",{\"1\":{\"554\":2}}],[\"的倍数取余具有向前兼容的特性\",{\"1\":{\"258\":1}}],[\"的长度最小值\",{\"1\":{\"593\":1}}],[\"的长度又是多少\",{\"1\":{\"592\":1}}],[\"的长度是多少\",{\"1\":{\"592\":1}}],[\"的长度是\",{\"1\":{\"580\":1}}],[\"的长度\",{\"1\":{\"553\":1,\"605\":1}}],[\"的长度被设定为足够存放一个指针即可\",{\"1\":{\"523\":1}}],[\"的获取放置在\",{\"1\":{\"550\":1}}],[\"的只读文件\",{\"1\":{\"550\":1}}],[\"的只能作为语句\",{\"1\":{\"527\":1}}],[\"的习惯用法\",{\"1\":{\"550\":1}}],[\"的返回值\",{\"1\":{\"549\":1,\"727\":1}}],[\"的语言\",{\"1\":{\"686\":1}}],[\"的语句同样可以接受参数\",{\"1\":{\"568\":1}}],[\"的语句\",{\"1\":{\"549\":1}}],[\"的语法更加简洁和干净\",{\"1\":{\"471\":1}}],[\"的选择类型样例\",{\"1\":{\"728\":1}}],[\"的选择\",{\"1\":{\"548\":1}}],[\"的例子\",{\"1\":{\"547\":1,\"607\":1,\"685\":1}}],[\"的全部内容及其输出\",{\"1\":{\"547\":1}}],[\"的位置不一样\",{\"1\":{\"609\":1}}],[\"的位置插入切片\",{\"1\":{\"601\":1}}],[\"的位置插入长度为\",{\"1\":{\"601\":1}}],[\"的位置插入元素\",{\"1\":{\"601\":1}}],[\"的位置\",{\"1\":{\"547\":1,\"577\":1}}],[\"的位向右移动\",{\"1\":{\"525\":1}}],[\"的位向左移动\",{\"1\":{\"525\":1}}],[\"的暂停\",{\"1\":{\"546\":1}}],[\"的后面\",{\"1\":{\"546\":1}}],[\"的指针时\",{\"1\":{\"676\":1}}],[\"的指针\",{\"1\":{\"544\":1,\"547\":1,\"569\":1,\"640\":1,\"643\":1,\"653\":2,\"677\":1}}],[\"的程序都是多线程的\",{\"1\":{\"694\":1}}],[\"的程序用来测试前\",{\"1\":{\"689\":1}}],[\"的程序\",{\"1\":{\"532\":1,\"550\":1,\"554\":1,\"627\":1}}],[\"的切片开发一个通用的栈类型\",{\"1\":{\"676\":1}}],[\"的切片从源地址\",{\"1\":{\"593\":1}}],[\"的切片并且返回最小值\",{\"1\":{\"591\":1}}],[\"的切片十分常见\",{\"1\":{\"590\":1}}],[\"的切片\",{\"1\":{\"532\":1,\"585\":1,\"588\":1,\"595\":1}}],[\"的第二部分\",{\"1\":{\"662\":1}}],[\"的第一个参数用作格式字符串\",{\"1\":{\"677\":1}}],[\"的第一个字符的索引\",{\"1\":{\"536\":2}}],[\"的第一幅图中\",{\"1\":{\"588\":1}}],[\"的第\",{\"1\":{\"532\":1}}],[\"的字节写入另一个文件\",{\"1\":{\"682\":1}}],[\"的字符串\",{\"1\":{\"531\":1}}],[\"的字段\",{\"1\":{\"305\":1,\"390\":1}}],[\"的别名类型\",{\"1\":{\"651\":1}}],[\"的别名\",{\"1\":{\"531\":2,\"676\":1}}],[\"的行结束符是\",{\"1\":{\"678\":2}}],[\"的行结束符是不同的\",{\"1\":{\"677\":1}}],[\"的行为在编译时就能被捕捉到\",{\"1\":{\"527\":1}}],[\"的行列\",{\"1\":{\"469\":1}}],[\"的复数\",{\"1\":{\"524\":1}}],[\"的复杂程度\",{\"1\":{\"467\":1}}],[\"的复杂度\",{\"1\":{\"303\":1}}],[\"的转换时\",{\"1\":{\"523\":1}}],[\"的整数和有理数\",{\"1\":{\"626\":1}}],[\"的整数\",{\"1\":{\"523\":1}}],[\"的连乘\",{\"1\":{\"523\":1}}],[\"的类型和方法\",{\"0\":{\"659\":1}}],[\"的类型是\",{\"1\":{\"580\":2,\"640\":1}}],[\"的类型别名\",{\"1\":{\"530\":1}}],[\"的类型均为\",{\"1\":{\"524\":1}}],[\"的类型就是\",{\"1\":{\"523\":1}}],[\"的类型\",{\"1\":{\"518\":1,\"573\":1,\"676\":1,\"686\":1,\"850\":1}}],[\"的类型包括\",{\"1\":{\"376\":1}}],[\"的作用范围为该语句出现后的最内部的结构\",{\"1\":{\"558\":1}}],[\"的作用是将一个字符串转换为一个整数\",{\"1\":{\"550\":1}}],[\"的作用是完全相同的\",{\"1\":{\"517\":1}}],[\"的作用在于提供一个可以寻找\",{\"1\":{\"446\":1}}],[\"的格子的值\",{\"1\":{\"660\":1}}],[\"的格子中\",{\"1\":{\"660\":1}}],[\"的格式化输出的功能\",{\"1\":{\"515\":1}}],[\"的格言\",{\"1\":{\"506\":1}}],[\"的赋值\",{\"1\":{\"515\":1}}],[\"的用法类似于面向对象编程语言\",{\"1\":{\"568\":1}}],[\"的用法进行直观的文字描述\",{\"1\":{\"513\":1}}],[\"的用户加入\",{\"1\":{\"51\":1}}],[\"的情况\",{\"1\":{\"511\":1,\"689\":1,\"850\":1}}],[\"的情况下\",{\"1\":{\"384\":1}}],[\"的值报告错误情况\",{\"1\":{\"689\":1}}],[\"的值并没有从\",{\"1\":{\"686\":1}}],[\"的值并只输出\",{\"1\":{\"653\":1}}],[\"的值表示读取到的字节数\",{\"1\":{\"678\":1}}],[\"的值写入文件\",{\"1\":{\"678\":1}}],[\"的值将变成非空\",{\"1\":{\"678\":1}}],[\"的值改为\",{\"1\":{\"669\":1}}],[\"的值和函数执行的平均时间\",{\"1\":{\"689\":1}}],[\"的值和类型\",{\"1\":{\"662\":1}}],[\"的值和方法表指针也会相应改变\",{\"1\":{\"662\":1}}],[\"的值上被调用\",{\"1\":{\"653\":1}}],[\"的值来做计算\",{\"1\":{\"653\":1}}],[\"的值类型可以作为\",{\"1\":{\"612\":1}}],[\"的值类型的空值\",{\"1\":{\"605\":1}}],[\"的值可以使用这个版本\",{\"1\":{\"591\":1}}],[\"的值分别为\",{\"1\":{\"574\":1}}],[\"的值就被重设为\",{\"1\":{\"559\":1}}],[\"的值会变成\",{\"1\":{\"550\":1}}],[\"的值为\",{\"1\":{\"550\":1,\"567\":1,\"573\":1}}],[\"的值是多少\",{\"1\":{\"588\":1,\"591\":1}}],[\"的值是被保留的\",{\"1\":{\"574\":1}}],[\"的值是什么\",{\"1\":{\"573\":1}}],[\"的值是\",{\"1\":{\"518\":3,\"531\":1,\"605\":1,\"686\":2}}],[\"的值被改变了\",{\"1\":{\"516\":1}}],[\"的值所在的内存地址\",{\"1\":{\"516\":1}}],[\"的值进行了拷贝\",{\"1\":{\"516\":1}}],[\"的值\",{\"0\":{\"607\":1},\"1\":{\"511\":2,\"605\":2,\"651\":1,\"653\":1,\"662\":4,\"668\":1,\"705\":1,\"850\":1}}],[\"的变量\",{\"1\":{\"509\":1}}],[\"的变种程序\",{\"1\":{\"681\":1}}],[\"的变种\",{\"1\":{\"215\":1}}],[\"的声明或定义\",{\"1\":{\"506\":1}}],[\"的标头组成\",{\"1\":{\"854\":1}}],[\"的标准库\",{\"1\":{\"694\":1}}],[\"的标准库为该领域提供了超过\",{\"1\":{\"686\":1}}],[\"的标准库包含了大量的包\",{\"1\":{\"506\":1}}],[\"的标记结束\",{\"1\":{\"431\":1}}],[\"的安装文件里包含了一些可以直接使用的包\",{\"1\":{\"506\":1}}],[\"的安装路径\",{\"1\":{\"446\":1}}],[\"的包被专门用来进行自动化测试\",{\"1\":{\"689\":1}}],[\"的包\",{\"1\":{\"506\":1}}],[\"的包转发功能\",{\"1\":{\"51\":1}}],[\"的抽象类\",{\"1\":{\"502\":1}}],[\"的存根函数\",{\"1\":{\"502\":1}}],[\"的存在是一个错误\",{\"1\":{\"467\":1}}],[\"的注意事项\",{\"1\":{\"502\":1}}],[\"的支持\",{\"1\":{\"501\":1,\"693\":1}}],[\"的五分之一左右\",{\"1\":{\"499\":1}}],[\"的二进制文件体积是最大的\",{\"1\":{\"499\":1}}],[\"的绝对优势下甚至都无法在性能上望其项背\",{\"1\":{\"499\":1}}],[\"的使用帮助信息\",{\"1\":{\"682\":1}}],[\"的使用\",{\"0\":{\"715\":1,\"716\":1},\"1\":{\"680\":1}}],[\"的使用方式选择是否使用\",{\"1\":{\"861\":1}}],[\"的使用方式一样\",{\"1\":{\"686\":1}}],[\"的使用方式是\",{\"1\":{\"587\":1}}],[\"的使用方法\",{\"1\":{\"449\":1,\"605\":1}}],[\"的使用涉及到非常复杂多样的情况\",{\"1\":{\"513\":1}}],[\"的使用规则在任何时候都是相同的\",{\"1\":{\"507\":1}}],[\"的使用说明\",{\"1\":{\"497\":1}}],[\"的当前最新版本号为\",{\"1\":{\"492\":1}}],[\"的插件\",{\"1\":{\"491\":2}}],[\"的文章对\",{\"1\":{\"499\":1}}],[\"的文本编辑器\",{\"1\":{\"491\":1}}],[\"的文件选择器\",{\"1\":{\"725\":2}}],[\"的文件作为例子\",{\"1\":{\"686\":1}}],[\"的文件夹下\",{\"1\":{\"627\":1}}],[\"的文件夹结构应该如下所示\",{\"1\":{\"486\":1}}],[\"的文件夹后\",{\"1\":{\"483\":1}}],[\"的文件\",{\"1\":{\"481\":1}}],[\"的开发\",{\"1\":{\"489\":1}}],[\"的开发者们也具有很大的吸引力\",{\"1\":{\"475\":1}}],[\"的开发者们\",{\"1\":{\"473\":1}}],[\"的开发者们在使用\",{\"1\":{\"471\":1}}],[\"的可调用方法集不包含接受者为\",{\"1\":{\"662\":1}}],[\"的可调用方法集包含接受者为\",{\"1\":{\"662\":2}}],[\"的可复用垃圾回收器\",{\"1\":{\"487\":1}}],[\"的可执行文件都比相对应的源代码文件要大很多\",{\"1\":{\"487\":1}}],[\"的可执行文件\",{\"1\":{\"450\":1}}],[\"的示例\",{\"1\":{\"486\":1,\"532\":1}}],[\"的流程参考第\",{\"1\":{\"485\":1}}],[\"的工具\",{\"1\":{\"491\":1}}],[\"的工具链是用\",{\"1\":{\"483\":1}}],[\"的工作方式非常相似\",{\"1\":{\"296\":1}}],[\"的源文件\",{\"1\":{\"506\":1}}],[\"的源文件以\",{\"1\":{\"504\":1}}],[\"的源代码有以下三个分支\",{\"1\":{\"483\":1}}],[\"的源代码的话\",{\"1\":{\"483\":1}}],[\"的源码包到你的计算机上\",{\"1\":{\"483\":1}}],[\"的源码可以看到\",{\"1\":{\"390\":1}}],[\"的源码\",{\"1\":{\"383\":1}}],[\"的话会产生越界错误\",{\"1\":{\"580\":1}}],[\"的话\",{\"1\":{\"482\":1,\"483\":1,\"561\":1}}],[\"的理念来重新审视和分析一个问题\",{\"1\":{\"478\":1}}],[\"的理念来思考\",{\"1\":{\"478\":1}}],[\"的组织\",{\"1\":{\"476\":1}}],[\"的编译速度要比绝大多数语言都要快\",{\"1\":{\"499\":1}}],[\"的编译器和命令行脚本\",{\"1\":{\"486\":1}}],[\"的编译器在其中作了隐匿的转换工作\",{\"1\":{\"378\":1}}],[\"的编程语言\",{\"1\":{\"475\":1}}],[\"的概念\",{\"1\":{\"561\":1}}],[\"的概念组成\",{\"1\":{\"506\":1}}],[\"的概念来实现多态性\",{\"1\":{\"475\":1}}],[\"的概念却导致越来越多因为依赖关系而使得构建一个大型的项目需要长达几个小时的时间\",{\"1\":{\"473\":1}}],[\"的官方帐号\",{\"1\":{\"469\":1}}],[\"的应用范围非常广泛\",{\"1\":{\"844\":1}}],[\"的应用\",{\"1\":{\"469\":1}}],[\"的形式返回\",{\"1\":{\"866\":1}}],[\"的形式来传递参数\",{\"1\":{\"567\":1}}],[\"的形式\",{\"1\":{\"567\":1}}],[\"的形式为\",{\"1\":{\"507\":2}}],[\"的形式导入\",{\"1\":{\"501\":1}}],[\"的形式第一次向人们宣告了\",{\"1\":{\"469\":1}}],[\"的形式定义\",{\"1\":{\"154\":1,\"190\":1}}],[\"的创始人之一\",{\"1\":{\"469\":1}}],[\"的空余时间来参与\",{\"1\":{\"469\":1}}],[\"的出现\",{\"1\":{\"467\":1}}],[\"的评论\",{\"1\":{\"467\":1}}],[\"的宗旨\",{\"1\":{\"467\":1}}],[\"的双向\",{\"1\":{\"462\":1}}],[\"的优势\",{\"1\":{\"461\":1}}],[\"的好处\",{\"1\":{\"459\":1}}],[\"的步骤\",{\"1\":{\"450\":1}}],[\"的最后一个元素\",{\"1\":{\"585\":1}}],[\"的最后一个声明语句写上\",{\"1\":{\"518\":1}}],[\"的最低栈大小为\",{\"1\":{\"438\":1}}],[\"的最佳实践\",{\"1\":{\"74\":1}}],[\"的触发时机\",{\"0\":{\"432\":1}}],[\"的自旋占用资源如何解决\",{\"0\":{\"421\":1}}],[\"的等待时间小于\",{\"1\":{\"420\":1}}],[\"的拥有者将直接把锁交给队列最前面的\",{\"1\":{\"420\":1}}],[\"的信号量\",{\"1\":{\"417\":1}}],[\"的信息写进名为\",{\"1\":{\"686\":1}}],[\"的信息\",{\"1\":{\"497\":1}}],[\"的信息就会丢失\",{\"1\":{\"288\":1}}],[\"的信息量相比较\",{\"1\":{\"216\":1}}],[\"的信息来决定用户是否能对其进行哪些操作\",{\"1\":{\"61\":1}}],[\"的属性\",{\"1\":{\"410\":1}}],[\"的默认数量的\",{\"1\":{\"410\":1}}],[\"的默认事务型存储引擎\",{\"1\":{\"293\":1}}],[\"的定位来看\",{\"1\":{\"410\":1}}],[\"的定义放在一起\",{\"1\":{\"659\":1}}],[\"的定义\",{\"1\":{\"310\":1,\"852\":1}}],[\"的个数理论上是无限制的\",{\"1\":{\"409\":1}}],[\"的个数问题\",{\"1\":{\"409\":1}}],[\"的队列中取一个可执行状态的\",{\"1\":{\"409\":1}}],[\"的调度流程从\",{\"1\":{\"409\":1}}],[\"的管道\",{\"1\":{\"405\":1}}],[\"的管理相对来说太复杂了\",{\"1\":{\"63\":1}}],[\"的底层类型未定义\",{\"1\":{\"667\":1}}],[\"的底层类型\",{\"1\":{\"509\":1,\"667\":1}}],[\"的底层实现原理\",{\"0\":{\"397\":1}}],[\"的底层结构是\",{\"1\":{\"363\":1}}],[\"的对象文件\",{\"1\":{\"506\":1}}],[\"的对象就是小对象\",{\"1\":{\"443\":1}}],[\"的对象\",{\"1\":{\"391\":1}}],[\"的成员\",{\"1\":{\"390\":1}}],[\"的成本很低\",{\"1\":{\"320\":1}}],[\"的缩写\",{\"1\":{\"365\":1,\"686\":1}}],[\"的结构\",{\"0\":{\"858\":1},\"1\":{\"858\":1}}],[\"的结构和构造之前\",{\"1\":{\"847\":1}}],[\"的结构所以可以保证发送给他们的元素的顺序\",{\"1\":{\"699\":1}}],[\"的结构了吧\",{\"1\":{\"660\":1}}],[\"的结构如下\",{\"0\":{\"364\":1}}],[\"的结果\",{\"1\":{\"689\":1}}],[\"的结果是什么\",{\"1\":{\"602\":1}}],[\"的结果为\",{\"1\":{\"523\":1}}],[\"的结合\",{\"1\":{\"112\":1,\"235\":1}}],[\"的主要算法\",{\"1\":{\"850\":1}}],[\"的主要目的是在双方之间传输请求\",{\"1\":{\"846\":1}}],[\"的主要实现是扩容\",{\"1\":{\"354\":1}}],[\"的主要功能是\",{\"1\":{\"88\":1}}],[\"的主要功能是定义数据库对象\",{\"1\":{\"87\":1,\"91\":1}}],[\"的桥梁\",{\"1\":{\"351\":1}}],[\"的意思是\",{\"1\":{\"333\":1}}],[\"的特性\",{\"1\":{\"331\":1}}],[\"的系统\",{\"1\":{\"331\":1}}],[\"的p\",{\"1\":{\"330\":1}}],[\"的所有方法集\",{\"1\":{\"662\":1}}],[\"的所有方法\",{\"1\":{\"662\":2}}],[\"的所有键值对\",{\"1\":{\"612\":1}}],[\"的所有元素\",{\"1\":{\"601\":1}}],[\"的所有的变量在函数内都能被修改\",{\"1\":{\"329\":1}}],[\"的所有数据记录\",{\"1\":{\"215\":1}}],[\"的函数调用者\",{\"1\":{\"689\":1}}],[\"的函数签名是\",{\"1\":{\"682\":2,\"683\":1}}],[\"的函数声明为\",{\"1\":{\"670\":1}}],[\"的函数都必须以\",{\"1\":{\"562\":1}}],[\"的函数是\",{\"1\":{\"507\":1}}],[\"的函数\",{\"1\":{\"506\":2,\"564\":1,\"574\":1,\"602\":1,\"689\":1,\"859\":1}}],[\"的函数参数传递都是值传递\",{\"1\":{\"329\":1}}],[\"的函数为例\",{\"1\":{\"146\":1,\"179\":1}}],[\"的顺序排列的\",{\"1\":{\"609\":1}}],[\"的顺序\",{\"0\":{\"325\":1}}],[\"的区别以及可能发生的错误\",{\"1\":{\"643\":1}}],[\"的区别是什么呢\",{\"1\":{\"580\":1}}],[\"的区别是什么\",{\"0\":{\"383\":1}}],[\"的区别\",{\"0\":{\"322\":1,\"351\":1,\"588\":1}}],[\"的各个环节的工具\",{\"1\":{\"320\":1}}],[\"的姿态是用尽量少的代码完成尽量多的事\",{\"1\":{\"320\":1}}],[\"的快速编译时间是一个主要的效率优势\",{\"1\":{\"320\":1}}],[\"的相应倍数\",{\"1\":{\"525\":1}}],[\"的相同\",{\"1\":{\"678\":1}}],[\"的相同长度\",{\"1\":{\"516\":1}}],[\"的相同方法在不同情形有不同表现形式\",{\"1\":{\"316\":1}}],[\"的相关元素\",{\"1\":{\"593\":1}}],[\"的相关工具\",{\"1\":{\"490\":1}}],[\"的相关属性和方法\",{\"1\":{\"315\":1}}],[\"的实践中借鉴了一些经验\",{\"1\":{\"471\":1}}],[\"的实例上调用此方法\",{\"1\":{\"662\":1}}],[\"的实例\",{\"1\":{\"651\":1,\"662\":1,\"676\":1}}],[\"的实例请查阅第\",{\"1\":{\"623\":1}}],[\"的实例实现了\",{\"1\":{\"316\":1}}],[\"的实例也实现了\",{\"1\":{\"316\":1}}],[\"的实例可以拥有自己的方法\",{\"1\":{\"315\":1}}],[\"的实例都可以调用\",{\"1\":{\"315\":1}}],[\"的实现与此相反\",{\"1\":{\"672\":1}}],[\"的实现\",{\"1\":{\"306\":1,\"853\":1}}],[\"的几个基本认知\",{\"1\":{\"310\":1}}],[\"的执行时间可能略有差别\",{\"1\":{\"303\":1}}],[\"的执行性能\",{\"1\":{\"263\":1}}],[\"的数值对程序进行并发计算是有好处的\",{\"1\":{\"696\":1}}],[\"的数值来允许运行时支持使用多于\",{\"1\":{\"696\":1}}],[\"的数\",{\"1\":{\"696\":1}}],[\"的数组并且创建了一个相关切片\",{\"1\":{\"585\":1}}],[\"的数组元素赋值可以这么操作\",{\"1\":{\"580\":1}}],[\"的数量默认是\",{\"1\":{\"410\":1}}],[\"的数量都会多于\",{\"1\":{\"410\":1}}],[\"的数量\",{\"1\":{\"409\":1}}],[\"的数量一般建议是逻辑\",{\"1\":{\"409\":1}}],[\"的数据结构\",{\"1\":{\"578\":1}}],[\"的数据结构包含\",{\"1\":{\"394\":1,\"405\":1}}],[\"的数据结构是什么\",{\"0\":{\"363\":1}}],[\"的数据表都有一个\",{\"1\":{\"303\":1}}],[\"的数对\",{\"1\":{\"258\":1}}],[\"的真实性\",{\"1\":{\"857\":1}}],[\"的真正开源的发行版本\",{\"1\":{\"296\":1}}],[\"的真子集\",{\"1\":{\"287\":1}}],[\"的表来处理\",{\"1\":{\"293\":1}}],[\"的考量\",{\"1\":{\"284\":1}}],[\"的考量点\",{\"1\":{\"262\":1}}],[\"的性能分析工具\",{\"1\":{\"438\":1}}],[\"的性能\",{\"1\":{\"275\":1}}],[\"的事务管理\",{\"1\":{\"254\":1}}],[\"的事务要素的事务称为刚性事务的话\",{\"1\":{\"242\":1}}],[\"的依赖\",{\"1\":{\"252\":1}}],[\"的时候表示输入结束\",{\"1\":{\"677\":1}}],[\"的时候它的地址会发生变化么\",{\"0\":{\"324\":1}}],[\"的时候效率就会提升\",{\"1\":{\"303\":1}}],[\"的时候\",{\"1\":{\"247\":1,\"276\":1,\"521\":2,\"550\":1,\"559\":1,\"605\":1}}],[\"的修改也会影响到\",{\"1\":{\"605\":1}}],[\"的修改\",{\"1\":{\"238\":1}}],[\"的修改覆盖了\",{\"1\":{\"238\":1}}],[\"的\",{\"0\":{\"331\":1,\"332\":1,\"354\":1,\"405\":1},\"1\":{\"235\":1,\"257\":1,\"274\":1,\"294\":2,\"330\":1,\"331\":4,\"354\":1,\"363\":1,\"392\":1,\"394\":2,\"420\":1,\"423\":1,\"429\":1,\"469\":1,\"471\":1,\"476\":1,\"481\":1,\"487\":2,\"525\":2,\"531\":4,\"542\":1,\"543\":1,\"551\":1,\"557\":1,\"559\":1,\"564\":1,\"568\":1,\"572\":1,\"590\":2,\"591\":1,\"605\":3,\"627\":3,\"631\":1,\"638\":2,\"649\":1,\"656\":2,\"660\":1,\"662\":1,\"668\":2,\"676\":2,\"678\":1,\"680\":1,\"682\":7,\"686\":2,\"688\":1,\"689\":1,\"692\":1,\"697\":1,\"705\":1,\"707\":1,\"782\":1,\"849\":2,\"858\":2}}],[\"的思想是\",{\"1\":{\"234\":1}}],[\"的方式一样\",{\"1\":{\"686\":1}}],[\"的方式来进行锁定\",{\"1\":{\"230\":1}}],[\"的方法可以获取存储在内部的值\",{\"1\":{\"668\":1}}],[\"的方法集\",{\"1\":{\"651\":1}}],[\"的方法获取\",{\"1\":{\"608\":1}}],[\"的方法来初始化数组\",{\"1\":{\"581\":1}}],[\"的方法\",{\"1\":{\"314\":1,\"653\":1,\"662\":3}}],[\"的方案\",{\"1\":{\"63\":1}}],[\"的聚簇索引实际是在同一个结构中保存了\",{\"1\":{\"223\":1}}],[\"的每个叶子节点增加一个指向相邻叶子节点的指针\",{\"1\":{\"215\":1}}],[\"的基础上进行了优化\",{\"1\":{\"215\":1}}],[\"的学习\",{\"1\":{\"205\":1}}],[\"的账户信息保存在\",{\"1\":{\"154\":1,\"190\":1}}],[\"的一开始插入\",{\"1\":{\"700\":1}}],[\"的一种变体\",{\"1\":{\"860\":1}}],[\"的一种常见攻击方式是剥离签名\",{\"1\":{\"857\":1}}],[\"的一种形式\",{\"1\":{\"700\":1}}],[\"的一种缩写\",{\"1\":{\"585\":1}}],[\"的一般格式如下\",{\"1\":{\"627\":1}}],[\"的一组已编号且长度固定的数据项序列\",{\"1\":{\"580\":1}}],[\"的一大特性\",{\"1\":{\"562\":1}}],[\"的一部分进行排序\",{\"1\":{\"705\":1}}],[\"的一部分\",{\"1\":{\"484\":1}}],[\"的一些特点\",{\"1\":{\"405\":1}}],[\"的一些版本中\",{\"1\":{\"130\":1}}],[\"的一个非规范示例\",{\"1\":{\"869\":1}}],[\"的一个非常重要的方面\",{\"1\":{\"857\":1}}],[\"的一个属性\",{\"1\":{\"669\":1}}],[\"的一个实例占用了多少内存\",{\"1\":{\"642\":1}}],[\"的一个实例\",{\"1\":{\"640\":1,\"655\":1}}],[\"的一个实现\",{\"1\":{\"63\":1}}],[\"的一个元素是\",{\"1\":{\"603\":1}}],[\"的一个重要组成部分\",{\"1\":{\"84\":1}}],[\"的条件\",{\"1\":{\"129\":1}}],[\"的核心指令是\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":1}}],[\"的权限标识\",{\"1\":{\"62\":1}}],[\"的权限控制列表\",{\"1\":{\"61\":1}}],[\"的操作权限\",{\"1\":{\"60\":1}}],[\"的问题是不可避免的\",{\"1\":{\"255\":1}}],[\"的问题\",{\"1\":{\"51\":1}}],[\"的人肯定知道\",{\"1\":{\"51\":1}}],[\"的稳定\",{\"1\":{\"51\":1}}],[\"的描述方法来初始化\",{\"1\":{\"605\":1}}],[\"的描述\",{\"1\":{\"39\":1}}],[\"的原理是什么\",{\"1\":{\"234\":1}}],[\"的原理是\",{\"1\":{\"29\":1}}],[\"的原理\",{\"0\":{\"29\":1}}],[\"关注语言的执行效率和性能\",{\"1\":{\"320\":1}}],[\"关系\",{\"1\":{\"291\":2,\"292\":3}}],[\"关键字之后的括号中指定\",{\"1\":{\"651\":1}}],[\"关键字来作为\",{\"1\":{\"573\":1}}],[\"关键字来达到目的\",{\"1\":{\"551\":1}}],[\"关键字去掉并对比输出结果\",{\"1\":{\"568\":1}}],[\"关键字返回一组值\",{\"1\":{\"562\":1}}],[\"关键字垂直对齐\",{\"1\":{\"549\":1}}],[\"关键字在同一行\",{\"1\":{\"549\":1,\"551\":1}}],[\"关键字以及另一代码块\",{\"1\":{\"549\":1}}],[\"关键字就显得有些多余了\",{\"1\":{\"518\":1}}],[\"关键字可以定义你自己的类型\",{\"1\":{\"509\":1}}],[\"关键字将一组包链接在一起\",{\"1\":{\"506\":1}}],[\"关键字不能够作标识符使用\",{\"1\":{\"504\":1}}],[\"关键字与标识符\",{\"0\":{\"504\":1}}],[\"关键字尽量大写\",{\"0\":{\"280\":1},\"1\":{\"280\":1}}],[\"关键字大写\",{\"0\":{\"276\":1}}],[\"关键字\",{\"1\":{\"137\":1,\"139\":1,\"140\":1,\"166\":1,\"170\":1,\"171\":1,\"173\":1,\"202\":1,\"513\":1,\"515\":1,\"549\":1,\"554\":1,\"558\":2,\"568\":3,\"573\":1,\"682\":1,\"697\":1,\"700\":1}}],[\"关于一个实体的断言的信息片段\",{\"1\":{\"868\":1}}],[\"关于此工具更多的信息\",{\"1\":{\"692\":1}}],[\"关于解析\",{\"1\":{\"678\":1}}],[\"关于它们的很多基本信息已经在\",{\"1\":{\"627\":1}}],[\"关于特性缺失\",{\"0\":{\"477\":1}}],[\"关于\",{\"1\":{\"469\":1,\"477\":1,\"513\":1}}],[\"关于详细的性能数据\",{\"1\":{\"461\":1}}],[\"关于性能数据\",{\"1\":{\"461\":1}}],[\"关于刚才问的\",{\"1\":{\"354\":1}}],[\"关于数据库和表的布局及特性的信息\",{\"1\":{\"82\":1}}],[\"关于jwe\",{\"1\":{\"39\":1}}],[\"关于jws\",{\"1\":{\"39\":1}}],[\"关于jwt的描述\",{\"1\":{\"39\":1}}],[\"关闭了通道\",{\"1\":{\"709\":1}}],[\"关闭\",{\"1\":{\"658\":1}}],[\"关闭数据库链接\",{\"1\":{\"568\":1}}],[\"关闭资源\",{\"1\":{\"425\":1}}],[\"关闭资源是个好习惯\",{\"1\":{\"332\":1}}],[\"关闭已经关闭的管道\",{\"1\":{\"405\":1}}],[\"关闭已经被关闭的channel\",{\"1\":{\"404\":1}}],[\"关闭为\",{\"1\":{\"405\":1}}],[\"关闭值为nil的channel\",{\"1\":{\"404\":1}}],[\"关闭channel时会把recvq中的g全部唤醒\",{\"1\":{\"404\":1}}],[\"关闭channel\",{\"0\":{\"404\":1}}],[\"关闭会怎么样\",{\"0\":{\"399\":1}}],[\"关闭的管道读数据仍然可以读数据\",{\"1\":{\"405\":1}}],[\"关闭的\",{\"0\":{\"399\":1}}],[\"关闭未初始化的\",{\"1\":{\"335\":1}}],[\"关闭链接\",{\"1\":{\"325\":1}}],[\"关闭文件流\",{\"1\":{\"568\":1}}],[\"关闭文件\",{\"1\":{\"325\":1}}],[\"关闭游标\",{\"1\":{\"168\":2,\"204\":2}}],[\"关闭mysql服务\",{\"1\":{\"52\":1}}],[\"关闭安全验证\",{\"1\":{\"6\":1}}],[\"容量减去通道的长度就是未处理的资源个数\",{\"1\":{\"707\":1}}],[\"容量\",{\"0\":{\"606\":1}}],[\"容量为\",{\"1\":{\"585\":1,\"588\":1}}],[\"容量最多可容纳\",{\"1\":{\"370\":2}}],[\"容量小于\",{\"1\":{\"354\":1}}],[\"容量够用\",{\"1\":{\"354\":1}}],[\"容量通过\",{\"1\":{\"353\":1}}],[\"容量规划\",{\"0\":{\"258\":1}}],[\"容易引起混乱\",{\"1\":{\"39\":1}}],[\"容器端口\",{\"1\":{\"1\":1}}],[\"当取值为id\",{\"1\":{\"892\":1}}],[\"当身份验证请求中的提示参数值为none时\",{\"1\":{\"878\":1}}],[\"当认证请求中的提示参数值为none时\",{\"1\":{\"878\":3}}],[\"当prompt=none使用时\",{\"1\":{\"873\":1}}],[\"当请求的响应模式为响应类型指定的默认模式时\",{\"1\":{\"873\":1}}],[\"当max\",{\"1\":{\"869\":1}}],[\"当m执行work\",{\"1\":{\"411\":1}}],[\"当只有一个受众时\",{\"1\":{\"869\":1}}],[\"当只引用索引的第二个列时\",{\"1\":{\"279\":1}}],[\"当客户端向其提供访问令牌时\",{\"1\":{\"868\":1}}],[\"当header和payload中指定的所有限制都得到满足时\",{\"1\":{\"857\":1}}],[\"当存储在其中的数据被第三方读取时\",{\"1\":{\"848\":1}}],[\"当存在表级锁和行级锁的情况下\",{\"1\":{\"233\":1}}],[\"当关闭的时候使用\",{\"1\":{\"709\":1}}],[\"当协程结束的时候\",{\"1\":{\"694\":1}}],[\"当系统调用\",{\"1\":{\"694\":1}}],[\"当错误发生时会\",{\"1\":{\"689\":1}}],[\"当错误条件\",{\"1\":{\"689\":1}}],[\"当正则表达式或模板中转入的转换字符串导致错误时\",{\"1\":{\"689\":1}}],[\"当发生错误必须中止程序时\",{\"1\":{\"689\":1}}],[\"当发生像数组下标越界或类型断言失败这样的运行错误时\",{\"1\":{\"689\":1}}],[\"当程序处于错误状态时可以用\",{\"1\":{\"687\":1}}],[\"当程序在工作中需要占用大量的内存\",{\"1\":{\"547\":1}}],[\"当源数据类型增加新字段后\",{\"1\":{\"686\":1}}],[\"当在命令行\",{\"1\":{\"682\":1}}],[\"当在命令行出现了第一个参数\",{\"1\":{\"682\":1}}],[\"当在进行大量的计算时\",{\"1\":{\"577\":1}}],[\"当打开\",{\"1\":{\"680\":1}}],[\"当打印到控制台时\",{\"1\":{\"550\":1}}],[\"当用户输入字符\",{\"1\":{\"677\":1}}],[\"当用户输入\",{\"1\":{\"677\":1}}],[\"当用户输入或从数据中获取正则表达式的时候\",{\"1\":{\"624\":1}}],[\"当碰到接口类型值时\",{\"1\":{\"662\":1}}],[\"当另一个实现了\",{\"1\":{\"662\":1}}],[\"当后缀\",{\"1\":{\"662\":1}}],[\"当定义了一个有很多方法的类型时\",{\"1\":{\"660\":1}}],[\"当参数作为指针传递\",{\"1\":{\"652\":1}}],[\"当两个字段拥有相同的名字\",{\"1\":{\"649\":1}}],[\"当两个事务同时执行\",{\"1\":{\"235\":1}}],[\"当为结构体定义了一个\",{\"1\":{\"640\":1}}],[\"当开始一个新项目或增加新的功能到现有的项目\",{\"1\":{\"638\":1}}],[\"当开发人员需要了解包的一些情况时\",{\"1\":{\"508\":1}}],[\"当着手自己的\",{\"1\":{\"637\":1}}],[\"当第\",{\"1\":{\"627\":1}}],[\"当第8个键值对插入时\",{\"1\":{\"372\":1}}],[\"当写自己包的时候\",{\"1\":{\"627\":1}}],[\"当对超出\",{\"1\":{\"626\":1}}],[\"当并行访问一个共享的\",{\"1\":{\"625\":1}}],[\"当相关数组还没有定义时\",{\"1\":{\"587\":1}}],[\"当相等运算符两边的值是完全相同的值的时候会返回\",{\"1\":{\"521\":1}}],[\"当声明数组时所有的元素都会被自动初始化为默认值\",{\"1\":{\"580\":1}}],[\"当需要定义一个类型\",{\"1\":{\"639\":1}}],[\"当需要在函数内改变一个占用内存比较大的变量时\",{\"1\":{\"566\":1}}],[\"当需要返回的时候\",{\"1\":{\"564\":1}}],[\"当需要返回多个非命名返回值时\",{\"1\":{\"564\":1}}],[\"当需要性能调优或者定位\",{\"1\":{\"438\":1}}],[\"当函数执行到代码块最后一行\",{\"1\":{\"561\":1}}],[\"当执行到该语句的时候\",{\"1\":{\"559\":1}}],[\"当任一分支的测试结果为\",{\"1\":{\"551\":1}}],[\"当您在分析和调试复杂的程序时\",{\"1\":{\"575\":1}}],[\"当您在\",{\"1\":{\"551\":1}}],[\"当您将字符串转换为整数时\",{\"1\":{\"550\":1}}],[\"当代码块只有一行时\",{\"1\":{\"551\":1}}],[\"当没有东西需要转换或者转换成整数失败时\",{\"1\":{\"689\":1}}],[\"当没有错误发生时\",{\"1\":{\"550\":2}}],[\"当没有二级索引的时候\",{\"1\":{\"303\":1}}],[\"当不同线程要使用同一个变量时\",{\"1\":{\"625\":1}}],[\"当不使用\",{\"1\":{\"550\":1}}],[\"当不等运算符两边的值是不同的时候会返回\",{\"1\":{\"521\":1}}],[\"当条件比较复杂时\",{\"1\":{\"549\":1}}],[\"当字符为\",{\"1\":{\"532\":1}}],[\"当和字符配合使用时\",{\"1\":{\"531\":1}}],[\"当希望把结果赋值给第一个操作数时\",{\"1\":{\"525\":1}}],[\"当进行类似\",{\"1\":{\"523\":1}}],[\"当运算符左边表达式的值已经能够决定整个表达式的值的时候\",{\"1\":{\"521\":1}}],[\"当使用此流时\",{\"1\":{\"892\":1}}],[\"当使用隐式流时\",{\"1\":{\"889\":1}}],[\"当使用max\",{\"1\":{\"873\":1}}],[\"当使用这个流时\",{\"1\":{\"873\":1}}],[\"当使用授权码流时\",{\"1\":{\"870\":1,\"877\":1,\"879\":1,\"886\":1}}],[\"当使用\",{\"1\":{\"627\":1}}],[\"当使用等于或者大于\",{\"1\":{\"580\":1}}],[\"当使用等号\",{\"1\":{\"516\":1}}],[\"当使用值时我们必须先做一个类型判断\",{\"1\":{\"580\":1}}],[\"当使用赋值语句\",{\"1\":{\"516\":1}}],[\"当使用数组作为参数和返回值的时候\",{\"1\":{\"355\":1}}],[\"当变量被赋值给一个接口类型的变量时\",{\"1\":{\"672\":1}}],[\"当变量被一个线程改变时\",{\"1\":{\"625\":1}}],[\"当变量\",{\"1\":{\"515\":1}}],[\"当常量赋值给一个精度过小的数字型变量时\",{\"1\":{\"513\":1}}],[\"当编译器捕捉到非法的类型转换时会引发编译时错误\",{\"1\":{\"511\":1}}],[\"当从一个取值范围较大的转换到取值范围较小的类型时\",{\"1\":{\"511\":1}}],[\"当被调用函数的代码执行到结束符\",{\"1\":{\"507\":1}}],[\"当标识符\",{\"1\":{\"506\":1}}],[\"当有多个\",{\"1\":{\"568\":1}}],[\"当有编译错误时\",{\"1\":{\"490\":1}}],[\"当有两个或以上数量的键被哈希到了同一个bucket时\",{\"1\":{\"367\":1}}],[\"当中的一个类型\",{\"1\":{\"531\":1}}],[\"当中并没有明确的字符串类型\",{\"1\":{\"501\":1}}],[\"当中\",{\"1\":{\"487\":1}}],[\"当中无法保证数据的正确性\",{\"1\":{\"237\":1}}],[\"当你试着在文本编辑中打开的时候会看到\",{\"1\":{\"686\":1}}],[\"当你广泛使用一个自定义类型时\",{\"1\":{\"660\":1}}],[\"当你阅读到这些章节时可以再回到这个例子\",{\"1\":{\"638\":1}}],[\"当你调用该函数时\",{\"1\":{\"586\":1}}],[\"当你使用等号\",{\"1\":{\"524\":1}}],[\"当你想要给变量的类型并不是自动推断出的某种类型时\",{\"1\":{\"515\":1}}],[\"当你想要使用某个类型作为\",{\"1\":{\"501\":1}}],[\"当你导入多个包时\",{\"1\":{\"506\":1}}],[\"当你在使用某个类型时\",{\"1\":{\"530\":1}}],[\"当你在使用不同的版本时\",{\"1\":{\"483\":1}}],[\"当你在函数体内声明局部变量时\",{\"1\":{\"515\":1}}],[\"当你在创建目录时\",{\"1\":{\"481\":1}}],[\"当你第一次看到这套命名系统的时候你会觉得很奇葩\",{\"1\":{\"481\":1}}],[\"当你发送jwt给别人是\",{\"1\":{\"39\":1}}],[\"当选\",{\"1\":{\"469\":1}}],[\"当我们要处理\",{\"1\":{\"607\":1}}],[\"当我们不希望给函数起名字的时候\",{\"1\":{\"573\":1}}],[\"当我们进入到物联网时代\",{\"1\":{\"476\":1}}],[\"当我们把切片当成参数的时候\",{\"1\":{\"355\":1}}],[\"当我深陷在\",{\"1\":{\"467\":1}}],[\"当距离上一个\",{\"1\":{\"432\":1}}],[\"当所分配的堆大小达到阈值\",{\"1\":{\"432\":1}}],[\"当要对数据库中的一条数据进行修改的时候\",{\"1\":{\"419\":1}}],[\"当线程的时间片用完之后\",{\"1\":{\"412\":1}}],[\"当本线程因为g进行系统调用阻塞时\",{\"1\":{\"411\":1}}],[\"当本线程无可运行的g时\",{\"1\":{\"411\":1}}],[\"当循环数组中数据已满时\",{\"1\":{\"398\":1}}],[\"当循环数组中没有数据时\",{\"1\":{\"398\":1}}],[\"当下标超过数组容量后会回到第一个位置\",{\"1\":{\"398\":1}}],[\"当判定一种类型是否满足某个接口时\",{\"1\":{\"390\":1}}],[\"当命中一个\",{\"1\":{\"389\":1}}],[\"当一个类型包含\",{\"1\":{\"676\":1}}],[\"当一个匿名类型被内嵌在结构体中时\",{\"1\":{\"655\":1}}],[\"当一个函数在其函数体内调用自身\",{\"1\":{\"570\":1}}],[\"当一个函数的形参是\",{\"1\":{\"389\":1}}],[\"当一个指针被定义后没有分配到任何变量时\",{\"1\":{\"547\":1}}],[\"当一个变量被声明之后\",{\"1\":{\"515\":1}}],[\"当一个对象的指针被多个方法或线程引用时\",{\"1\":{\"445\":1}}],[\"当一个学生选修了多门课时\",{\"1\":{\"291\":1}}],[\"当仅且当这两部分的值都为\",{\"1\":{\"384\":1}}],[\"当实现了一个接收者是指针类型的方法\",{\"1\":{\"381\":1}}],[\"当实现了一个接收者是值类型的方法\",{\"1\":{\"381\":1}}],[\"当类型和方法的接收者类型不同时\",{\"1\":{\"380\":1}}],[\"当时被问的一脸懵逼\",{\"1\":{\"376\":1}}],[\"当前存放的元素个数\",{\"1\":{\"707\":1}}],[\"当前值会被丢弃\",{\"1\":{\"700\":1}}],[\"当前目录下\",{\"1\":{\"627\":1}}],[\"当前时间必须在exp\",{\"1\":{\"887\":1}}],[\"当前时间和日期必须等于或晚于该日期和时间\",{\"1\":{\"852\":1}}],[\"当前时间加1个小时后\",{\"1\":{\"622\":1}}],[\"当前时间可以使用\",{\"1\":{\"546\":1}}],[\"当前最新的稳定版\",{\"1\":{\"483\":1}}],[\"当前\",{\"1\":{\"476\":1}}],[\"当前情况下\",{\"1\":{\"442\":1}}],[\"当前的mutex只有一个goruntine来获取\",{\"1\":{\"420\":1}}],[\"当前线程的g进行阻塞调用时\",{\"1\":{\"409\":1}}],[\"当前队列中剩余元素个数\",{\"1\":{\"405\":1}}],[\"当前方法和属性的集合\",{\"1\":{\"378\":1}}],[\"当前bucket没有找到\",{\"1\":{\"374\":1}}],[\"当前map存储了7个键值对\",{\"1\":{\"372\":1}}],[\"当oldbuckets中的键值对全部搬迁完毕后\",{\"1\":{\"372\":1}}],[\"当负载因子过大时\",{\"1\":{\"372\":1}}],[\"当新元素将要添加进map时\",{\"1\":{\"371\":1}}],[\"当切片作为参数的时候穿进去的是值\",{\"1\":{\"355\":1}}],[\"当切片较大的时\",{\"1\":{\"354\":1}}],[\"当切片比较小时\",{\"1\":{\"354\":1}}],[\"当原容量不够\",{\"1\":{\"354\":1}}],[\"当注册的线程和进程准备好数据后\",{\"1\":{\"331\":1}}],[\"当调用一些系统方法的时候\",{\"1\":{\"330\":1}}],[\"当当开源的\",{\"1\":{\"251\":1}}],[\"当找到\",{\"1\":{\"215\":1}}],[\"当触发器的触发条件满足时\",{\"1\":{\"166\":1,\"202\":1}}],[\"当触发器所在表上出现指定事件时\",{\"1\":{\"165\":1,\"201\":1}}],[\"当\",{\"1\":{\"151\":1,\"187\":1,\"247\":1,\"306\":2,\"316\":1,\"409\":2,\"549\":1,\"551\":2,\"606\":1,\"614\":1,\"669\":1,\"676\":1,\"688\":1,\"696\":1,\"697\":1}}],[\"当出现这种说法时\",{\"1\":{\"852\":1}}],[\"当出现\",{\"1\":{\"151\":1,\"187\":1}}],[\"当现实世界中的角色和访问需求与您的政策文件中概述的角色和访问需求不同时\",{\"1\":{\"75\":1}}],[\"当然也可能有其他用途\",{\"1\":{\"846\":1}}],[\"当然也可以先打印一条信息\",{\"1\":{\"662\":1}}],[\"当然也可以直接在\",{\"1\":{\"662\":1}}],[\"当然它可以是复杂的\",{\"1\":{\"656\":1}}],[\"当然类型可以有只作用于本身实例而不作用于内嵌\",{\"1\":{\"655\":1}}],[\"当然方法只在这个别名类型上有效\",{\"1\":{\"651\":1}}],[\"当然真实的链接会有很多数据节点\",{\"1\":{\"640\":1}}],[\"当然你也可以在运行时对变量进行赋值操作\",{\"1\":{\"515\":1}}],[\"当然你能说说具体的分析指标更加分咯\",{\"1\":{\"438\":1}}],[\"当然这并不值得创建一个自定义包\",{\"1\":{\"630\":1}}],[\"当然这两种\",{\"1\":{\"580\":1}}],[\"当然这也同时要求你通过学习不同的知识来对一个问题提出尽可能多的解决方案\",{\"1\":{\"467\":1}}],[\"当然这一切都是go编译器在背后帮我们完成的\",{\"1\":{\"445\":1}}],[\"当然如果你要统计的是某个字段的非空数据行数\",{\"1\":{\"303\":1}}],[\"当然离线访问一般走备库\",{\"1\":{\"256\":1}}],[\"当然一个事务可以读取自身未提交的快照\",{\"1\":{\"234\":1}}],[\"当然可以更短\",{\"1\":{\"699\":1}}],[\"当然可以\",{\"1\":{\"72\":1}}],[\"当然\",{\"1\":{\"72\":1,\"390\":1,\"467\":1,\"482\":1,\"487\":1,\"513\":1,\"529\":1,\"547\":1,\"572\":1,\"573\":1,\"600\":1}}],[\"当跨域时\",{\"1\":{\"38\":1}}],[\"当jwt未加密方法是\",{\"1\":{\"31\":1}}],[\"此值为id\",{\"1\":{\"892\":1}}],[\"此值为code\",{\"1\":{\"873\":1}}],[\"此错误可能返回\",{\"1\":{\"878\":2}}],[\"此参数的处理要求当前日期\",{\"1\":{\"869\":1}}],[\"此id令牌所针对的受众\",{\"1\":{\"869\":1}}],[\"此工具一些有趣的命令\",{\"1\":{\"692\":1}}],[\"此结构体类型和它的\",{\"1\":{\"640\":1}}],[\"此例为\",{\"1\":{\"553\":1}}],[\"此处类型断言会导致\",{\"1\":{\"667\":1}}],[\"此处我们使用冒泡排序\",{\"1\":{\"662\":1}}],[\"此处的方法指针表是通过运行时反射能力构建的\",{\"1\":{\"662\":1}}],[\"此处的退出代码\",{\"1\":{\"550\":1}}],[\"此处代码在\",{\"1\":{\"661\":1}}],[\"此处使用\",{\"1\":{\"547\":1}}],[\"此开发环境由国人\",{\"1\":{\"491\":1}}],[\"此变量不会被引用\",{\"1\":{\"445\":1}}],[\"此刻外界向在堆中的对象发生添加对象\",{\"1\":{\"429\":1}}],[\"此\",{\"1\":{\"420\":2}}],[\"此地负载因子为7\",{\"1\":{\"372\":1}}],[\"此时使用以下的方法会是最方便的\",{\"1\":{\"662\":1}}],[\"此时接口名以\",{\"1\":{\"662\":1}}],[\"此时程序可能会有短时的性能下降\",{\"1\":{\"661\":1}}],[\"此时类型就是字段的名字\",{\"1\":{\"647\":1}}],[\"此时节点包含指向临近节点的链接\",{\"1\":{\"640\":1}}],[\"此时结构体字段的值是它们所属类型的零值\",{\"1\":{\"640\":1}}],[\"此时传递给函数的是一个指针\",{\"1\":{\"563\":1}}],[\"此时\",{\"1\":{\"547\":1,\"640\":1}}],[\"此时直接从\",{\"1\":{\"405\":1}}],[\"此时直接从recvq取出g\",{\"1\":{\"402\":1}}],[\"此时说明缓冲区已满\",{\"1\":{\"403\":1,\"405\":1}}],[\"此时进行一次等量扩容\",{\"1\":{\"373\":1}}],[\"此时读取的结果和和第一次读取的结果不同\",{\"1\":{\"238\":1}}],[\"此时读取的结果和第一次读取的结果不同\",{\"1\":{\"238\":1}}],[\"此时每个记录都有唯一的索引与其对应\",{\"1\":{\"221\":1}}],[\"此时再启动\",{\"1\":{\"51\":1}}],[\"此时竟无法启动\",{\"1\":{\"51\":1}}],[\"此问题在其\",{\"1\":{\"51\":1}}],[\"此后\",{\"1\":{\"38\":1}}],[\"此外还要配置下配置文件\",{\"1\":{\"638\":1}}],[\"此外\",{\"1\":{\"26\":1,\"455\":1,\"473\":1,\"496\":1,\"497\":1,\"518\":1,\"548\":1,\"846\":1,\"851\":1,\"857\":1}}],[\"有这样一个经验法则\",{\"1\":{\"696\":1}}],[\"有个被称作\",{\"1\":{\"694\":1}}],[\"有标准的\",{\"1\":{\"692\":1}}],[\"有用的接口可以在开发的过程中被归纳出来\",{\"1\":{\"676\":1}}],[\"有用来表示大整数的\",{\"1\":{\"626\":1}}],[\"有叫做\",{\"1\":{\"668\":1}}],[\"有的时候\",{\"1\":{\"662\":1}}],[\"有的面试官就喜欢他问什么\",{\"1\":{\"438\":1}}],[\"有两个协程\",{\"1\":{\"707\":1}}],[\"有两个类型\",{\"1\":{\"662\":1}}],[\"有两种方法可以避免这种情况\",{\"1\":{\"583\":1}}],[\"有两种方式可以生成排序结果\",{\"1\":{\"225\":1}}],[\"有两种连接类型\",{\"1\":{\"137\":1,\"170\":1}}],[\"有两种排序模式\",{\"1\":{\"134\":1}}],[\"有另外一个方法\",{\"1\":{\"662\":1}}],[\"有可能你当前的用户不具有足够的资格使用\",{\"1\":{\"631\":1}}],[\"有自己的\",{\"1\":{\"656\":1}}],[\"有自己的地址和值\",{\"1\":{\"563\":1}}],[\"有自己的本地队列\",{\"1\":{\"410\":1}}],[\"有没有更好的办法了\",{\"1\":{\"532\":1}}],[\"有没有其他方案\",{\"0\":{\"361\":1}}],[\"有必须要的话可以使用大小写混合的方式\",{\"1\":{\"512\":1}}],[\"有必要先了解一下创建触发器的指令\",{\"1\":{\"167\":1,\"203\":1}}],[\"有效值的提供取决于实现\",{\"1\":{\"852\":1}}],[\"有效载荷\",{\"1\":{\"851\":2}}],[\"有效载荷和signatures\",{\"1\":{\"849\":2}}],[\"有效的与运行中的协程数量相等\",{\"1\":{\"696\":1}}],[\"有效的标识符必须以字母\",{\"1\":{\"504\":1}}],[\"有效减少分页数\",{\"1\":{\"256\":1}}],[\"有关授权码内容的实施说明\",{\"1\":{\"877\":1}}],[\"有关实现注意事项\",{\"1\":{\"873\":1,\"892\":1}}],[\"有关本规范定义的其他授权请求参数和参数值\",{\"1\":{\"873\":1}}],[\"有关本规范定义的其他范围值\",{\"1\":{\"873\":1}}],[\"有关本规范定义的其他权利要求\",{\"1\":{\"869\":1}}],[\"有关所执行的认证的信息将以json\",{\"1\":{\"866\":1}}],[\"有关\",{\"1\":{\"623\":1}}],[\"有关的一些使用工具\",{\"1\":{\"491\":1}}],[\"有关使用tls的更多信息\",{\"1\":{\"872\":1,\"880\":1}}],[\"有关使用\",{\"1\":{\"52\":1}}],[\"有许多项目均以失败告终\",{\"1\":{\"472\":1}}],[\"有许多由第三方发起的\",{\"1\":{\"467\":1}}],[\"有句话叫\",{\"1\":{\"469\":1}}],[\"有着更显著的优势\",{\"1\":{\"467\":1}}],[\"有着共享底层数组的风险\",{\"1\":{\"355\":1}}],[\"有更低的门槛\",{\"1\":{\"467\":1}}],[\"有多种类型的签名算法可供选择\",{\"1\":{\"858\":1}}],[\"有多种存储引擎\",{\"1\":{\"293\":1}}],[\"有多个目录的时候\",{\"1\":{\"450\":1}}],[\"有新的白色会被添加成黑色\",{\"1\":{\"429\":1}}],[\"有先天的优势\",{\"1\":{\"420\":1}}],[\"有几种模式\",{\"0\":{\"420\":1}}],[\"有以下问题\",{\"1\":{\"410\":1}}],[\"有以下函数依赖\",{\"1\":{\"291\":2}}],[\"有一种特殊的类型\",{\"1\":{\"699\":1}}],[\"有一些方法可以完成这个任务\",{\"1\":{\"669\":1}}],[\"有一个预先定义的\",{\"1\":{\"687\":1}}],[\"有一个\",{\"1\":{\"668\":1}}],[\"有一个整型参数\",{\"1\":{\"662\":1}}],[\"有一个名为\",{\"1\":{\"627\":1}}],[\"有一个地址\",{\"1\":{\"547\":1}}],[\"有一个全局队列\",{\"1\":{\"409\":1}}],[\"有一张\",{\"1\":{\"222\":1}}],[\"有缓冲通道\",{\"1\":{\"424\":1}}],[\"有缓冲channel内的缓冲数组会被作为一个\",{\"1\":{\"398\":1}}],[\"有缓存channel和无缓存channel\",{\"0\":{\"406\":1}}],[\"有数据的\",{\"0\":{\"399\":1}}],[\"有何不同\",{\"0\":{\"362\":1}}],[\"有助于代码重用\",{\"1\":{\"561\":1}}],[\"有助于减少操作系统上的调度负载\",{\"1\":{\"330\":1}}],[\"有助于更容易更快速地找到表中的一个特定的记录\",{\"1\":{\"112\":1}}],[\"有名返回值\",{\"1\":{\"325\":1}}],[\"有名返回值或者函数返回指针\",{\"1\":{\"325\":1}}],[\"有类型和方法\",{\"1\":{\"312\":1}}],[\"有如下函数依赖\",{\"1\":{\"291\":1}}],[\"有简单查询\",{\"1\":{\"264\":1}}],[\"有些是只在某些条件下存在\",{\"1\":{\"769\":1}}],[\"有些语言比如\",{\"1\":{\"706\":1}}],[\"有些人知道\",{\"1\":{\"699\":1}}],[\"有些人可能认为使用两种不同的语言实现同一个目标能够得出正确的结论\",{\"1\":{\"499\":1}}],[\"有些时候需要反射一个结构类型\",{\"1\":{\"670\":1}}],[\"有些甚至需要\",{\"1\":{\"595\":1}}],[\"有些函数只是完成一个任务\",{\"1\":{\"563\":1}}],[\"有些运算符拥有较高的优先级\",{\"1\":{\"529\":1}}],[\"有些开发工具甚至是跨平台的\",{\"1\":{\"489\":1}}],[\"有些依赖找不到\",{\"0\":{\"344\":1}}],[\"有些分页查询可以考虑走大数据平台\",{\"1\":{\"256\":1}}],[\"有些场合可能会放到\",{\"1\":{\"37\":1}}],[\"有什么不同呢\",{\"1\":{\"686\":1}}],[\"有什么优缺点\",{\"1\":{\"250\":1}}],[\"有什么用\",{\"0\":{\"446\":1},\"1\":{\"234\":1}}],[\"有哪些\",{\"1\":{\"228\":1}}],[\"有时显得很局限\",{\"1\":{\"703\":1}}],[\"有时非常有用\",{\"1\":{\"699\":1}}],[\"有时还可以结合像测试名字这样的额外信息来让测试输出更多的信息\",{\"1\":{\"689\":1}}],[\"有时这也叫\",{\"1\":{\"659\":1}}],[\"有时候\",{\"1\":{\"550\":1,\"576\":1}}],[\"有时候可以提升几倍甚至更高\",{\"1\":{\"303\":1}}],[\"有时候也需要使用\",{\"1\":{\"265\":1}}],[\"有时候需要索引很长的字符列\",{\"1\":{\"221\":1}}],[\"有时数据库会采用分库分表的方式\",{\"1\":{\"164\":1,\"200\":1}}],[\"有时也被称为\",{\"1\":{\"63\":1}}],[\"有唯一标识\",{\"1\":{\"112\":1}}],[\"有\",{\"1\":{\"72\":1,\"214\":1,\"532\":1,\"567\":1}}],[\"有人会问\",{\"1\":{\"72\":1}}],[\"有了用户之后\",{\"1\":{\"72\":1}}],[\"有3个基础组成部分\",{\"1\":{\"65\":1}}],[\"有三个字符+\",{\"1\":{\"37\":1}}],[\"有问题\",{\"0\":{\"6\":1},\"1\":{\"6\":1}}],[\"点\",{\"1\":{\"36\":1}}],[\"把函数\",{\"1\":{\"689\":1}}],[\"把这个数据编码并保存在接口值中\",{\"1\":{\"684\":1}}],[\"把这个优点单独拿出来\",{\"1\":{\"320\":1}}],[\"把人的名字作为程序命令行执行的一个参数\",{\"1\":{\"681\":1}}],[\"把它简化为了\",{\"1\":{\"676\":1}}],[\"把它注释掉\",{\"1\":{\"671\":1}}],[\"把它们括起来\",{\"1\":{\"564\":1}}],[\"把数组分片\",{\"1\":{\"586\":1}}],[\"把数据量从\",{\"1\":{\"73\":1}}],[\"把一个缓存\",{\"1\":{\"590\":1}}],[\"把一个大数组传递给函数会消耗很多内存\",{\"1\":{\"583\":1}}],[\"把一个有很多字段的表给拆分成多个表\",{\"1\":{\"246\":1}}],[\"把变量合理地分配到它该去的地方\",{\"1\":{\"445\":1}}],[\"把那些内存管理的复杂机制交给编译器\",{\"1\":{\"445\":1}}],[\"把p转移给其他空闲的线程执行\",{\"1\":{\"411\":1}}],[\"把本地队列关联到\",{\"1\":{\"410\":1}}],[\"把sendq中的g全部唤醒\",{\"1\":{\"404\":1}}],[\"把g唤醒\",{\"1\":{\"403\":1}}],[\"把g中数据写入缓冲区尾部\",{\"1\":{\"403\":1}}],[\"把g中数据读出\",{\"1\":{\"403\":1}}],[\"把值复制进去\",{\"1\":{\"390\":2}}],[\"把松散的键值对重新排列一次\",{\"1\":{\"373\":1}}],[\"把原本完整的数据切分成多个部分\",{\"1\":{\"245\":1}}],[\"把修改记录到另外一张表中\",{\"1\":{\"166\":1,\"202\":1}}],[\"把从数据表中查询的结果存放到变量中\",{\"1\":{\"163\":1,\"199\":1}}],[\"把\",{\"1\":{\"36\":1,\"405\":3,\"683\":1,\"689\":1}}],[\"把刚刚拿到的\",{\"1\":{\"30\":1}}],[\"算术运算符\",{\"0\":{\"527\":1}}],[\"算出签名以后\",{\"1\":{\"36\":1}}],[\"算法对硬件的要求更低\",{\"1\":{\"860\":1}}],[\"算法对字符串进行解码\",{\"1\":{\"856\":1}}],[\"算法对字节数组进行编码\",{\"1\":{\"855\":2}}],[\"算法获取一个八进制数组并返回一个新的八进制数组\",{\"1\":{\"859\":1}}],[\"算法接收一个八进制数组并返回一个新的八进制数组的函数\",{\"1\":{\"859\":1}}],[\"算法的变体\",{\"1\":{\"860\":1}}],[\"算法的\",{\"1\":{\"858\":3}}],[\"算法的定义可参考\",{\"1\":{\"602\":1}}],[\"算法规范\",{\"1\":{\"858\":1}}],[\"算法和示例代码见第\",{\"1\":{\"858\":1}}],[\"算法解码字符串\",{\"1\":{\"856\":1}}],[\"算法是怎么实现的\",{\"0\":{\"430\":1}}],[\"算法\",{\"0\":{\"793\":1},\"1\":{\"37\":1,\"257\":1,\"410\":2,\"439\":1,\"686\":2,\"859\":2,\"860\":1},\"2\":{\"795\":1}}],[\"算法基本类似\",{\"1\":{\"37\":1}}],[\"算法转成字符串\",{\"1\":{\"35\":1}}],[\"算法名称\",{\"1\":{\"34\":1}}],[\"按首选项排序\",{\"1\":{\"873\":1}}],[\"按列读取文件中的数据\",{\"1\":{\"678\":1}}],[\"按惯例\",{\"1\":{\"642\":1}}],[\"按引用传递也是按值传递\",{\"1\":{\"563\":1}}],[\"按引用传递\",{\"0\":{\"563\":1}}],[\"按值传递请求对象\",{\"0\":{\"948\":1}}],[\"按值传递\",{\"0\":{\"563\":1}}],[\"按位补足\",{\"1\":{\"525\":1}}],[\"按位异或\",{\"1\":{\"525\":1}}],[\"按位或\",{\"1\":{\"525\":1}}],[\"按位与\",{\"1\":{\"525\":1}}],[\"按照字典顺序遍历\",{\"1\":{\"682\":1}}],[\"按照约定\",{\"1\":{\"662\":1}}],[\"按照下面的约定是合理的\",{\"1\":{\"633\":1}}],[\"按照下面的公式产生签名\",{\"1\":{\"36\":1}}],[\"按照惯例\",{\"1\":{\"627\":1}}],[\"按照顺序执行\",{\"1\":{\"423\":2}}],[\"按照\",{\"1\":{\"268\":1}}],[\"按一个查询返回数据\",{\"1\":{\"144\":1,\"177\":1}}],[\"按分组字段进行排序后\",{\"1\":{\"135\":1,\"185\":1}}],[\"按以下方法解决\",{\"1\":{\"51\":1}}],[\"按顺序接收它们并打印出来\",{\"1\":{\"700\":1}}],[\"按顺序导入所有被\",{\"1\":{\"510\":1}}],[\"按顺序\",{\"1\":{\"33\":1,\"849\":1}}],[\"首次公开发布\",{\"1\":{\"469\":1}}],[\"首次启动\",{\"1\":{\"6\":1}}],[\"首字母小写\",{\"1\":{\"314\":1}}],[\"首字母大写\",{\"1\":{\"314\":1,\"670\":1}}],[\"首先所有的包都应该有一定的必要文档\",{\"1\":{\"689\":1}}],[\"首先需要用系统命令或可执行文件的名字创建一个\",{\"1\":{\"689\":1}}],[\"首先预测一下下面程序的结果\",{\"1\":{\"657\":1}}],[\"首先你必须使用\",{\"1\":{\"627\":1}}],[\"首先return\",{\"1\":{\"325\":1}}],[\"首先定位到deptno=3的记录并且扫描到第一个dept大于3的记录\",{\"1\":{\"277\":1}}],[\"首先是header\",{\"1\":{\"855\":1}}],[\"首先是类型的方法\",{\"1\":{\"510\":1}}],[\"首先是\",{\"1\":{\"71\":1}}],[\"首先\",{\"1\":{\"36\":1,\"51\":1,\"338\":1,\"400\":1,\"515\":1}}],[\"如3\",{\"1\":{\"888\":1}}],[\"如hs256\",{\"1\":{\"887\":1}}],[\"如oauth\",{\"1\":{\"875\":1,\"880\":1,\"881\":2,\"883\":1}}],[\"如有必要\",{\"1\":{\"873\":1}}],[\"如有索引\",{\"1\":{\"226\":1,\"227\":1}}],[\"如iso\",{\"1\":{\"868\":1}}],[\"如int\",{\"1\":{\"360\":1}}],[\"如空白\",{\"1\":{\"855\":2}}],[\"如此一来\",{\"1\":{\"708\":1}}],[\"如用负数或字母代替数字\",{\"1\":{\"689\":1}}],[\"如用户年龄\",{\"1\":{\"63\":1}}],[\"如上面程序所示\",{\"1\":{\"678\":1}}],[\"如同\",{\"1\":{\"659\":1,\"686\":1}}],[\"如同上面例子中那样\",{\"1\":{\"648\":1}}],[\"如同其它一些编程语言中的类库或命名空间的概念\",{\"1\":{\"506\":1}}],[\"如第9节所述\",{\"1\":{\"881\":1}}],[\"如第2节所述\",{\"1\":{\"873\":1}}],[\"如第2节中定义的那样\",{\"1\":{\"869\":1}}],[\"如第\",{\"1\":{\"631\":1,\"849\":1}}],[\"如需要将包安装到本地它会从远端仓库下载包\",{\"1\":{\"629\":1}}],[\"如自定义结构\",{\"1\":{\"569\":1}}],[\"如这种情况\",{\"1\":{\"549\":1}}],[\"如我们所见\",{\"1\":{\"547\":1}}],[\"如函数的参数\",{\"1\":{\"547\":1}}],[\"如值\",{\"1\":{\"518\":1}}],[\"如今越来越多的微服务选择使用\",{\"1\":{\"461\":1}}],[\"如add\",{\"1\":{\"423\":1}}],[\"如字符串\",{\"1\":{\"382\":1}}],[\"如下图\",{\"1\":{\"709\":1}}],[\"如下图所示\",{\"1\":{\"373\":1}}],[\"如下面程序所示\",{\"1\":{\"653\":1}}],[\"如下面的例子\",{\"1\":{\"653\":1}}],[\"如下面这个例子当中的\",{\"1\":{\"519\":1}}],[\"如下的例子\",{\"1\":{\"566\":1}}],[\"如下的两个函数调用有什么不同\",{\"1\":{\"563\":1}}],[\"如下\",{\"1\":{\"563\":1,\"564\":1,\"580\":1,\"697\":1,\"703\":1,\"708\":1}}],[\"如下表达式都是正确的\",{\"1\":{\"547\":1}}],[\"如下所示\",{\"1\":{\"365\":1,\"640\":1,\"657\":1,\"849\":1}}],[\"如下例\",{\"1\":{\"35\":1}}],[\"如指针\",{\"1\":{\"360\":1}}],[\"如文件\",{\"1\":{\"330\":1}}],[\"如释放锁\",{\"1\":{\"325\":1}}],[\"如加入异常机制会要求记住一些常见异常\",{\"1\":{\"321\":1}}],[\"如go\",{\"1\":{\"320\":1}}],[\"如普通的\",{\"1\":{\"312\":1}}],[\"如整型比字符型操作代价低\",{\"1\":{\"282\":1}}],[\"如何去掉所有文件选项\",{\"0\":{\"732\":1}}],[\"如何选择多个文件\",{\"0\":{\"731\":1}}],[\"如何选择文件夹\",{\"0\":{\"728\":1}}],[\"如何将页面修改为英文\",{\"0\":{\"730\":1}}],[\"如何过滤文件\",{\"0\":{\"729\":1}}],[\"如何来检测可以收到没有被阻塞\",{\"1\":{\"709\":1}}],[\"如何拷贝一个文件到另一个文件\",{\"1\":{\"680\":1}}],[\"如何就\",{\"1\":{\"659\":1}}],[\"如何强制使用工厂方法\",{\"1\":{\"642\":1}}],[\"如何调用\",{\"1\":{\"638\":1}}],[\"如何理解\",{\"1\":{\"588\":1}}],[\"如何才能解决这个问题呢\",{\"1\":{\"571\":1}}],[\"如何操作内存\",{\"1\":{\"467\":1}}],[\"如何在类型中嵌入功能\",{\"0\":{\"656\":1}}],[\"如何在\",{\"1\":{\"467\":2}}],[\"如何优雅的实现一个\",{\"0\":{\"426\":1}}],[\"如何实现原子操作\",{\"0\":{\"418\":1}}],[\"如何实现这种机制\",{\"0\":{\"336\":1}}],[\"如何用命令行指定使用的核心数量\",{\"0\":{\"697\":1}}],[\"如何用\",{\"0\":{\"391\":1}}],[\"如何检验修改后的\",{\"1\":{\"264\":1}}],[\"如何分辨jws或者jwe呢\",{\"1\":{\"39\":1}}],[\"如对\",{\"1\":{\"258\":1}}],[\"如学生系统\",{\"1\":{\"73\":1}}],[\"如页面\",{\"1\":{\"72\":1}}],[\"如密码\",{\"1\":{\"72\":1}}],[\"如手机号等\",{\"1\":{\"72\":1}}],[\"如手机号\",{\"1\":{\"72\":1}}],[\"如\",{\"1\":{\"70\":2,\"83\":1,\"91\":1,\"128\":2,\"166\":1,\"202\":1,\"210\":1,\"217\":2,\"223\":1,\"257\":1,\"280\":1,\"382\":1,\"472\":2,\"478\":1,\"486\":1,\"490\":2,\"491\":1,\"495\":1,\"499\":1,\"504\":3,\"506\":8,\"507\":5,\"509\":5,\"512\":1,\"513\":2,\"516\":1,\"517\":1,\"518\":2,\"523\":3,\"545\":1,\"546\":1,\"547\":4,\"549\":2,\"556\":1,\"580\":1,\"637\":1,\"689\":3,\"694\":1,\"866\":1,\"868\":1,\"869\":1}}],[\"如角色分层模型rbac1\",{\"1\":{\"65\":1}}],[\"如一篇文章\",{\"1\":{\"63\":1}}],[\"如读取\",{\"1\":{\"63\":1}}],[\"如当前时间\",{\"1\":{\"63\":1}}],[\"如微软的\",{\"1\":{\"61\":1}}],[\"如果请求的话\",{\"1\":{\"890\":1}}],[\"如果请求了auth\",{\"1\":{\"887\":1}}],[\"如果请求有效\",{\"1\":{\"875\":1}}],[\"如果aud是多值\",{\"1\":{\"887\":1}}],[\"如果alg是rs256\",{\"1\":{\"886\":1}}],[\"如果jwt\",{\"1\":{\"887\":1}}],[\"如果出现azp\",{\"1\":{\"887\":1}}],[\"如果出现在id令牌中\",{\"1\":{\"869\":1}}],[\"如果令牌请求无效或未经授权\",{\"1\":{\"884\":1}}],[\"如果只有一个已注册的redirect\",{\"1\":{\"882\":1}}],[\"如果只想获取\",{\"1\":{\"609\":1}}],[\"如果客户端被颁发客户端凭据\",{\"1\":{\"882\":1}}],[\"如果客户端是机密客户端\",{\"1\":{\"881\":1}}],[\"如果授权请求包含状态参数\",{\"1\":{\"878\":1}}],[\"如果授权服务器遇到任何错误\",{\"1\":{\"874\":1}}],[\"如果最终用户拒绝请求或最终用户认证失败\",{\"1\":{\"878\":1}}],[\"如果最终用户尚未经过身份验证或无法进行静默身份验证\",{\"1\":{\"875\":1}}],[\"如果最终用户尚未进行身份验证\",{\"1\":{\"873\":1}}],[\"如果实现支持claim参数\",{\"1\":{\"874\":1}}],[\"如果实现了接收者是值类型的方法\",{\"1\":{\"381\":1}}],[\"如果sub\",{\"1\":{\"874\":1}}],[\"如果session\",{\"1\":{\"854\":1}}],[\"如果rp首先向最终用户询问他们的电子邮件地址\",{\"1\":{\"873\":1}}],[\"如果由id令牌标识的最终用户已登录或已被请求登录\",{\"1\":{\"873\":1}}],[\"如果openid提供者不支持所请求的部分或全部区域设置\",{\"1\":{\"873\":1}}],[\"如果openid范围值不存在\",{\"1\":{\"873\":1}}],[\"如果运行时间大于此值\",{\"1\":{\"873\":1}}],[\"如果此参数不包含任何其他值\",{\"1\":{\"873\":1}}],[\"如果此时自动生成一个接收者是值类型的方法\",{\"1\":{\"381\":1}}],[\"如果id令牌包含at\",{\"1\":{\"888\":1}}],[\"如果id令牌包含多个受众\",{\"1\":{\"887\":1}}],[\"如果id令牌是通过客户端和令牌端点\",{\"1\":{\"887\":1}}],[\"如果id令牌是加密的\",{\"1\":{\"869\":1,\"887\":1}}],[\"如果id令牌没有将客户端列为有效受众\",{\"1\":{\"887\":1}}],[\"如果it或安全经理需要在没有人力资源或执行决策者帮助的情况下定义角色\",{\"1\":{\"75\":1}}],[\"如果合法用户变成了恶意用户\",{\"1\":{\"860\":1}}],[\"如果header的算法声明设置为none\",{\"1\":{\"857\":1}}],[\"如果无法做到这一点\",{\"1\":{\"852\":1}}],[\"如果拉取下来后如果进去冲突状态\",{\"1\":{\"830\":1}}],[\"如果消费者协程在独立的内核运行\",{\"1\":{\"709\":1}}],[\"如果容量是\",{\"1\":{\"703\":1}}],[\"如果容量大于\",{\"1\":{\"703\":1}}],[\"如果通道中没有数据\",{\"1\":{\"701\":1}}],[\"如果设置一个很大的\",{\"1\":{\"696\":1}}],[\"如果开启了\",{\"1\":{\"692\":1}}],[\"如果命令行设置了\",{\"1\":{\"692\":1}}],[\"如果代码使用了\",{\"1\":{\"691\":1}}],[\"如果大部分函数都可以写成这种形式\",{\"1\":{\"689\":1}}],[\"如果所有的测试都通过会打印出\",{\"1\":{\"689\":1}}],[\"如果加了\",{\"1\":{\"689\":1}}],[\"如果后者是\",{\"1\":{\"687\":1}}],[\"如果写入的东西很简单\",{\"1\":{\"680\":1}}],[\"如果写成\",{\"1\":{\"580\":1}}],[\"如果指定文件已存在\",{\"1\":{\"680\":1}}],[\"如果指定文件不存在\",{\"1\":{\"680\":1}}],[\"如果数据是按列排列并用空格分隔的\",{\"1\":{\"678\":1}}],[\"如果数组值已经提前知道了\",{\"1\":{\"581\":1}}],[\"如果文件存在的话就打印文件内容到屏幕\",{\"1\":{\"682\":1}}],[\"如果文件不存在则自动创建\",{\"1\":{\"680\":1}}],[\"如果文件不存在或者程序没有足够的权限打开这个文件\",{\"1\":{\"678\":1}}],[\"如果文件打开正常\",{\"1\":{\"678\":1}}],[\"如果文件名由多个部分组成\",{\"1\":{\"504\":1}}],[\"如果读取过程中没有碰到\",{\"1\":{\"677\":1}}],[\"如果读取的过程中发生了错误\",{\"1\":{\"662\":1}}],[\"如果碰到错误则返回\",{\"1\":{\"677\":1}}],[\"如果已经到达输入的尾端\",{\"1\":{\"662\":1}}],[\"如果仅仅是测试变量的类型\",{\"1\":{\"662\":1}}],[\"如果被检测类型没有在\",{\"1\":{\"662\":1}}],[\"如果忽略\",{\"1\":{\"662\":1}}],[\"如果转换合法\",{\"1\":{\"662\":1}}],[\"如果转换在程序运行时失败会导致错误发生\",{\"1\":{\"662\":1}}],[\"如果转换成功\",{\"1\":{\"545\":1}}],[\"如果谁能搞定这件事\",{\"1\":{\"662\":1}}],[\"如果真的需要更多面向对象的能力\",{\"1\":{\"659\":1}}],[\"如果内嵌类型嵌入了其他类型\",{\"1\":{\"656\":1}}],[\"如果按值调用的话就会是这样\",{\"1\":{\"653\":1}}],[\"如果方法调用作用于像\",{\"1\":{\"672\":1}}],[\"如果方法在此类型定义了\",{\"1\":{\"659\":1}}],[\"如果方法不需要使用\",{\"1\":{\"651\":1}}],[\"如果方法的接收者是指针类型\",{\"1\":{\"382\":1}}],[\"如果方法的接收者是值类型\",{\"1\":{\"382\":1}}],[\"如果相同的名字在同一级别出现了两次\",{\"1\":{\"649\":1}}],[\"如果字段在代码中从来也不会被用到\",{\"1\":{\"640\":1}}],[\"如果字符串只包含空白符号\",{\"1\":{\"542\":1}}],[\"如果包含了测试代码\",{\"1\":{\"689\":1}}],[\"如果包\",{\"1\":{\"627\":1}}],[\"如果包名以\",{\"1\":{\"506\":2}}],[\"如果包名不是以\",{\"1\":{\"506\":1}}],[\"如果前一个版本已经存在了\",{\"1\":{\"623\":1}}],[\"如果原始\",{\"1\":{\"612\":1}}],[\"如果key1存在则ok\",{\"1\":{\"608\":1}}],[\"如果再增加新的\",{\"1\":{\"606\":1}}],[\"如果再扩大的话就会导致运行时错误\",{\"1\":{\"585\":1}}],[\"如果返回\",{\"1\":{\"600\":1,\"687\":1}}],[\"如果返回值具有不同的类型\",{\"1\":{\"563\":1}}],[\"如果返回值具有相同类型\",{\"1\":{\"563\":1}}],[\"如果尝试运行\",{\"1\":{\"598\":1}}],[\"如果发现函数\",{\"1\":{\"692\":1}}],[\"如果发现错误的\",{\"1\":{\"595\":1}}],[\"如果发生错误\",{\"1\":{\"485\":1,\"689\":1}}],[\"如果发生任何错误\",{\"1\":{\"317\":1}}],[\"如果想知道当前的内存状态\",{\"1\":{\"661\":1}}],[\"如果想知道结构体类型\",{\"1\":{\"642\":1}}],[\"如果想让特定类型都具备日志功能\",{\"1\":{\"656\":1}}],[\"如果想增加切片的容量\",{\"1\":{\"593\":1}}],[\"如果想要方法改变接收者的数据\",{\"1\":{\"653\":1}}],[\"如果想要内层的\",{\"1\":{\"649\":1}}],[\"如果想要重复执行某些语句\",{\"1\":{\"552\":1}}],[\"如果想要构建一个程序\",{\"1\":{\"506\":1}}],[\"如果想要获取更多有关\",{\"1\":{\"497\":1}}],[\"如果想要了解有关\",{\"1\":{\"496\":1}}],[\"如果用切片形式方法实现不同长度数组的的和呢\",{\"1\":{\"591\":1}}],[\"如果用户信息的字段太多\",{\"1\":{\"72\":1}}],[\"如果把数组修改为切片的话代码要做怎样的修改\",{\"1\":{\"591\":1}}],[\"如果某个人写\",{\"1\":{\"585\":1}}],[\"如果检测不到的话编译会通过而运行时会\",{\"1\":{\"580\":1}}],[\"如果编译器可以检测到\",{\"1\":{\"580\":1}}],[\"如果编译器不能确保变量在函数\",{\"1\":{\"442\":1}}],[\"如果找不到\",{\"1\":{\"572\":1}}],[\"如果参数的取值范围是\",{\"1\":{\"689\":1}}],[\"如果参数被存储在一个\",{\"1\":{\"567\":1}}],[\"如果参数是一个负数的话将返回一个错误\",{\"1\":{\"564\":1}}],[\"如果参数超过\",{\"1\":{\"517\":1}}],[\"如果传递给函数的是一个指针\",{\"1\":{\"563\":1}}],[\"如果它不能获得最终用户做出的帐户选择\",{\"1\":{\"873\":1}}],[\"如果它不能获得同意\",{\"1\":{\"873\":1}}],[\"如果它不能重新验证最终用户\",{\"1\":{\"873\":1}}],[\"如果它一直读到文件结束\",{\"1\":{\"677\":1}}],[\"如果它们引用的是相同的函数或者都是\",{\"1\":{\"561\":1}}],[\"如果它表现为一个\",{\"1\":{\"39\":1}}],[\"如果退出条件满足\",{\"1\":{\"558\":1}}],[\"如果您不确定将处理您的\",{\"1\":{\"853\":1}}],[\"如果您想这么做\",{\"1\":{\"678\":1}}],[\"如果您想要反转\",{\"1\":{\"602\":1}}],[\"如果您还没有账号\",{\"1\":{\"635\":1}}],[\"如果您需要更加完整的方案\",{\"1\":{\"601\":1}}],[\"如果您对一段代码进行了所谓的优化\",{\"1\":{\"576\":1}}],[\"如果您必须使用\",{\"1\":{\"559\":1}}],[\"如果您使用两个切片来实现反转\",{\"1\":{\"602\":1}}],[\"如果您使用\",{\"1\":{\"553\":1}}],[\"如果您像下面一样\",{\"1\":{\"550\":1}}],[\"如果确实存在错误\",{\"1\":{\"550\":1}}],[\"如果变量是一个结构体类型\",{\"1\":{\"645\":1}}],[\"如果变量在\",{\"1\":{\"549\":1}}],[\"如果变量都分配到堆上\",{\"1\":{\"445\":1}}],[\"如果该条件成立\",{\"1\":{\"549\":1}}],[\"如果该包含有\",{\"1\":{\"510\":1}}],[\"如果该包又导入了其它的包\",{\"1\":{\"510\":1}}],[\"如果除以\",{\"1\":{\"527\":1}}],[\"如果以上条件都不满足\",{\"1\":{\"521\":1}}],[\"如果其中一个值是常量\",{\"1\":{\"521\":1}}],[\"如果其中一个表发生变化\",{\"1\":{\"268\":1}}],[\"如果值的类型是接口\",{\"1\":{\"521\":1}}],[\"如果这些物品存储在未加密的\",{\"1\":{\"848\":1}}],[\"如果这些函数读取到的结果与您预想的不同\",{\"1\":{\"677\":1}}],[\"如果这样做会引发一个编译错误\",{\"1\":{\"651\":1}}],[\"如果这种方式导致程序明显变慢或者引起其他问题\",{\"1\":{\"625\":1}}],[\"如果这种注释\",{\"1\":{\"508\":1}}],[\"如果这时候能够准确地知道哪个文件中的具体哪个函数正在执行\",{\"1\":{\"575\":1}}],[\"如果这个名字被程序使用了\",{\"1\":{\"649\":1}}],[\"如果这个线程\",{\"1\":{\"409\":1}}],[\"如果这个时候\",{\"1\":{\"409\":1}}],[\"如果这个学生还没选课\",{\"1\":{\"288\":1}}],[\"如果这个值表现为一个数字签名或者mac的算法\",{\"1\":{\"39\":1}}],[\"如果这个wjt是数字化签名\",{\"1\":{\"39\":1}}],[\"如果这个jwt签名是hmac算法\",{\"1\":{\"39\":1}}],[\"如果程序工作在多核心的机器上\",{\"1\":{\"709\":1}}],[\"如果程序中止也没关系的话甚至可以使用\",{\"1\":{\"687\":1}}],[\"如果程序因为异常而被终止\",{\"1\":{\"507\":1}}],[\"如果程序执行一切顺利并成功退出后\",{\"1\":{\"495\":1}}],[\"如果对\",{\"1\":{\"671\":1}}],[\"如果对接口概念没有良好的把握\",{\"1\":{\"662\":1}}],[\"如果对精度没有要求\",{\"1\":{\"626\":1}}],[\"如果对一个包进行更改或重新编译\",{\"1\":{\"506\":1}}],[\"如果对微服务性能有要求\",{\"1\":{\"461\":1,\"462\":1}}],[\"如果使用http\",{\"1\":{\"873\":2}}],[\"如果使用不当编译器会给出错误\",{\"1\":{\"662\":1}}],[\"如果使用\",{\"1\":{\"499\":1,\"549\":1,\"625\":1}}],[\"如果使用了\",{\"1\":{\"254\":1}}],[\"如果说\",{\"1\":{\"499\":2}}],[\"如果像\",{\"1\":{\"498\":1}}],[\"如果不使用则可能返回invalid\",{\"1\":{\"873\":1}}],[\"如果不指定display参数\",{\"1\":{\"873\":1}}],[\"如果不对oauth\",{\"1\":{\"866\":1}}],[\"如果不是基于github远程库的最新版所做的修改\",{\"1\":{\"830\":1}}],[\"如果不这样\",{\"1\":{\"697\":1,\"700\":1}}],[\"如果不这么做\",{\"1\":{\"680\":1}}],[\"如果不等就打印一个错误\",{\"1\":{\"689\":1}}],[\"如果不小心使用的话\",{\"1\":{\"566\":1}}],[\"如果不加参数\",{\"1\":{\"496\":1,\"682\":1}}],[\"如果不设置该环境变量的话\",{\"1\":{\"483\":1}}],[\"如果构建成功则不会输出任何信息\",{\"1\":{\"495\":1}}],[\"如果你设置环境变量\",{\"1\":{\"696\":1}}],[\"如果你设置了多个工作目录\",{\"1\":{\"483\":1}}],[\"如果你希望满足某个接口的类型显式地声明它们实现了这个接口\",{\"1\":{\"674\":1}}],[\"如果你希望函数可以直接修改参数的值\",{\"1\":{\"563\":1}}],[\"如果你从未使用过版本控制\",{\"1\":{\"636\":1}}],[\"如果你要在你的应用中使用一个或多个外部包\",{\"1\":{\"627\":1}}],[\"如果你错误地使用\",{\"1\":{\"605\":1}}],[\"如果你还想继续使用\",{\"1\":{\"593\":1}}],[\"如果你只关心值\",{\"1\":{\"609\":1}}],[\"如果你只是想判断某个\",{\"1\":{\"608\":1}}],[\"如果你只需要索引\",{\"1\":{\"591\":1}}],[\"如果你只想剔除开头或者结尾的字符串\",{\"1\":{\"541\":1}}],[\"如果你必须使用这种形式\",{\"1\":{\"549\":1}}],[\"如果你需要修改\",{\"1\":{\"591\":1}}],[\"如果你需要在应用程序在经过一定时间或周期执行某项任务\",{\"1\":{\"546\":1}}],[\"如果你需要范围无限大的整数或者有理数\",{\"1\":{\"527\":1}}],[\"如果你对内存的要求不是特别高\",{\"1\":{\"524\":1}}],[\"如果你对集成开发环境都不是很熟悉\",{\"1\":{\"491\":1}}],[\"如果你尝试编译该程序\",{\"1\":{\"523\":1}}],[\"如果你使用\",{\"1\":{\"626\":1}}],[\"如果你使用了\",{\"1\":{\"549\":1}}],[\"如果你使用了不在这个集合中的运算符\",{\"1\":{\"520\":1}}],[\"如果你使用的是\",{\"1\":{\"482\":2,\"483\":1,\"485\":1}}],[\"如果你声明了一个局部变量却没有在相同的代码块中使用它\",{\"1\":{\"518\":1}}],[\"如果你有一个函数需要对数组做操作\",{\"1\":{\"586\":1}}],[\"如果你有多个条件判断\",{\"1\":{\"521\":1}}],[\"如果你有多个类型需要定义\",{\"1\":{\"509\":1}}],[\"如果你有其它语言的编程经历\",{\"1\":{\"478\":1}}],[\"如果你的函数非常简短\",{\"1\":{\"507\":1}}],[\"如果你的\",{\"1\":{\"507\":1}}],[\"如果你导入了一个包却没有使用它\",{\"1\":{\"506\":1}}],[\"如果你打算从已编译的包中导入并加载公开声明的方法\",{\"1\":{\"506\":1}}],[\"如果你打算编译包名不是为\",{\"1\":{\"506\":1}}],[\"如果你打算将多个语句写在同一行\",{\"1\":{\"504\":1}}],[\"如果你不确定的话可以测试一下\",{\"1\":{\"591\":1}}],[\"如果你不小心为\",{\"1\":{\"507\":1}}],[\"如果你不想使用调试器\",{\"1\":{\"494\":1}}],[\"如果你不进行显示设置\",{\"1\":{\"482\":1}}],[\"如果你完全不想运行包的测试\",{\"1\":{\"483\":1}}],[\"如果你正在使用一个带有防火墙的机器\",{\"1\":{\"483\":1}}],[\"如果你能够自己下载并编译\",{\"1\":{\"483\":1}}],[\"如果你想自定义日志系统的话可以参考\",{\"1\":{\"689\":1}}],[\"如果你想更新\",{\"1\":{\"629\":1}}],[\"如果你想为\",{\"1\":{\"611\":1}}],[\"如果你想将切片\",{\"1\":{\"593\":1}}],[\"如果你想创建一个\",{\"1\":{\"587\":1}}],[\"如果你想去掉\",{\"1\":{\"585\":1}}],[\"如果你想修改原数组\",{\"1\":{\"580\":1}}],[\"如果你想获取更多有关性能的资料\",{\"1\":{\"499\":1}}],[\"如果你想获得更深层次的信息\",{\"1\":{\"481\":1}}],[\"如果你想要剔除指定字符\",{\"1\":{\"541\":1}}],[\"如果你想要交换两个变量的值\",{\"1\":{\"518\":1}}],[\"如果你想要这两个变量都是指针\",{\"1\":{\"515\":1}}],[\"如果你想要将一个\",{\"1\":{\"501\":1}}],[\"如果你想要在\",{\"1\":{\"485\":2}}],[\"如果你想要在你的\",{\"1\":{\"484\":1,\"501\":1}}],[\"如果你想要测试安装\",{\"1\":{\"485\":1}}],[\"如果你想要通过\",{\"1\":{\"483\":1}}],[\"如果你想知道更多有关构建过程的信息\",{\"1\":{\"481\":1}}],[\"如果你想知道一些其它组织使用\",{\"1\":{\"476\":1}}],[\"如果你在一个团队中工作\",{\"1\":{\"628\":1}}],[\"如果你在定义变量\",{\"1\":{\"518\":1}}],[\"如果你在代码中试图修改常量的值则会引发编译错误\",{\"1\":{\"513\":1}}],[\"如果你在至高点使用\",{\"1\":{\"478\":1}}],[\"如果你在\",{\"1\":{\"304\":1,\"483\":1,\"515\":2}}],[\"如果分开也可以\",{\"1\":{\"456\":1}}],[\"如果我发现你竟然在退出函数后没有用了\",{\"1\":{\"445\":1}}],[\"如果我们移除一个或所有\",{\"1\":{\"700\":1}}],[\"如果我们不在\",{\"1\":{\"697\":1}}],[\"如果我们不希望源数据被修改话的我们可以使用copy函数复制切片后再传入\",{\"1\":{\"355\":1}}],[\"如果我们让\",{\"1\":{\"697\":1}}],[\"如果我们事先知道\",{\"1\":{\"685\":1}}],[\"如果我们把\",{\"1\":{\"675\":1}}],[\"如果我们写了如下的\",{\"1\":{\"591\":1}}],[\"如果我们执行\",{\"1\":{\"588\":1}}],[\"如果我们打印\",{\"1\":{\"553\":1}}],[\"如果我们想安装的包在系统上的其他\",{\"1\":{\"632\":1}}],[\"如果我们想让数组元素类型为任意类型的话可以使用空接口作为类型\",{\"1\":{\"580\":1}}],[\"如果我们想要在错误发生的同时终止程序的运行\",{\"1\":{\"550\":1}}],[\"如果我们想要保证遍历map时元素有序\",{\"1\":{\"358\":1}}],[\"如果我们想调用指针\",{\"1\":{\"547\":1}}],[\"如果我们在函数传参的时候用到了数组传参\",{\"1\":{\"438\":1}}],[\"如果我们处理的客户端是欺骗者怎么办呢\",{\"1\":{\"39\":1}}],[\"如果考察到在函数返回后\",{\"1\":{\"445\":1}}],[\"如果申请大于\",{\"1\":{\"443\":1}}],[\"如果申请小对象时\",{\"1\":{\"443\":1}}],[\"如果函数的最后一个参数是采用\",{\"1\":{\"567\":1}}],[\"如果函数外部存在引用\",{\"1\":{\"445\":1}}],[\"如果函数外部没有引用\",{\"1\":{\"445\":1}}],[\"如果函数\",{\"1\":{\"442\":1}}],[\"如果可能\",{\"1\":{\"442\":1,\"882\":1}}],[\"如果短时间内分配大量内存\",{\"1\":{\"438\":1}}],[\"如果锁已经被其他线程获取\",{\"1\":{\"421\":1}}],[\"如果拥有\",{\"1\":{\"420\":1}}],[\"如果当前包是\",{\"1\":{\"510\":1}}],[\"如果当前mutex已经被获取了\",{\"1\":{\"420\":1}}],[\"如果当前处于搬迁过程\",{\"1\":{\"374\":1}}],[\"如果冲突\",{\"1\":{\"419\":1}}],[\"如果本地队列挂载在\",{\"1\":{\"410\":1}}],[\"如果管道满了\",{\"1\":{\"405\":1}}],[\"如果等待发送队列\",{\"1\":{\"405\":2}}],[\"如果等待发送队列sendq不为空\",{\"1\":{\"403\":2}}],[\"如果等待接收队列\",{\"1\":{\"405\":1}}],[\"如果等待接收队列recvq不为空\",{\"1\":{\"402\":1}}],[\"如果缓冲区中有数据\",{\"1\":{\"403\":1,\"405\":1}}],[\"如果缓冲区中有空余位置\",{\"1\":{\"402\":1,\"405\":1}}],[\"如果缓冲区中没有空余位置\",{\"1\":{\"402\":1,\"405\":1}}],[\"如果缓冲区中为空\",{\"1\":{\"400\":1}}],[\"如果类中至少有一个函数被声明为纯虚函数\",{\"1\":{\"392\":1}}],[\"如果类型定义了\",{\"1\":{\"660\":1}}],[\"如果类型的方法集完全包含接口的方法集\",{\"1\":{\"390\":1}}],[\"如果类型具备非原始的本质\",{\"1\":{\"382\":1}}],[\"如果类型具备\",{\"1\":{\"382\":1}}],[\"如果没找到将key\",{\"1\":{\"375\":1}}],[\"如果没有openid范围值\",{\"1\":{\"874\":1}}],[\"如果没有的话可以写成\",{\"1\":{\"700\":1}}],[\"如果没有实现就使用标准的反射方式\",{\"1\":{\"672\":1}}],[\"如果没有\",{\"1\":{\"672\":1}}],[\"如果没有错误发生\",{\"1\":{\"678\":1}}],[\"如果没有错误发生就是\",{\"1\":{\"662\":1}}],[\"如果没有错误发生返回\",{\"1\":{\"662\":1}}],[\"如果没有会导致异常发生\",{\"1\":{\"659\":1}}],[\"如果没有找到\",{\"1\":{\"577\":1}}],[\"如果没有特别指定\",{\"1\":{\"507\":1}}],[\"如果没有开启\",{\"1\":{\"432\":1}}],[\"如果没有闲置的线程\",{\"1\":{\"409\":1}}],[\"如果没有索引\",{\"1\":{\"231\":1}}],[\"如果没有设置保留点\",{\"1\":{\"151\":1,\"187\":1}}],[\"如果存在第三个分支\",{\"1\":{\"549\":1}}],[\"如果存在第二个分支\",{\"1\":{\"549\":1}}],[\"如果存在\",{\"1\":{\"510\":1,\"850\":1,\"869\":1}}],[\"如果存在则直接更新值\",{\"1\":{\"375\":1}}],[\"如果存在违反约束的数据行为\",{\"1\":{\"112\":1}}],[\"如果查找不到\",{\"1\":{\"374\":1}}],[\"如果查询中的列不是独立的列\",{\"1\":{\"220\":1}}],[\"如果查询只有数据列\",{\"1\":{\"217\":1}}],[\"如果tophash\",{\"1\":{\"374\":1}}],[\"如果t没有实现接口x\",{\"1\":{\"340\":1}}],[\"如果支持\",{\"1\":{\"363\":1}}],[\"如果删除的元素是引用类型\",{\"1\":{\"360\":1}}],[\"如果删除的元素是值类型\",{\"1\":{\"360\":1}}],[\"如果希望源数据被修改的话我们应该使用指针传递的方式\",{\"1\":{\"355\":1}}],[\"如果在身份验证请求中发送了一个nonce值\",{\"1\":{\"887\":1}}],[\"如果在注册时与op协商加密\",{\"1\":{\"887\":1}}],[\"如果在认证请求中出现\",{\"1\":{\"869\":1}}],[\"如果在程序结束之前\",{\"1\":{\"708\":1}}],[\"如果在程序发生这种情况\",{\"1\":{\"654\":1}}],[\"如果在执行完每个分支的代码后\",{\"1\":{\"551\":1}}],[\"如果在相同的代码块中\",{\"1\":{\"518\":1}}],[\"如果在\",{\"1\":{\"330\":1,\"653\":1}}],[\"如果系统方法调用的时候发生阻塞\",{\"1\":{\"330\":1}}],[\"如果要求acr索赔\",{\"1\":{\"887\":1}}],[\"如果要用结构体作为\",{\"1\":{\"605\":1}}],[\"如果要回收掉\",{\"1\":{\"439\":1}}],[\"如果要使用struct作为key\",{\"1\":{\"358\":1}}],[\"如果要统计count\",{\"1\":{\"303\":1}}],[\"如果要建立组合索引那么需要的空间就会更大\",{\"1\":{\"210\":1}}],[\"如果采用count\",{\"1\":{\"303\":1}}],[\"如果能找到\",{\"1\":{\"287\":1}}],[\"如果索引是建立在多个列上\",{\"1\":{\"279\":1}}],[\"如果表或列的名称太长了\",{\"1\":{\"275\":1}}],[\"如果需要在一个对象\",{\"1\":{\"661\":1}}],[\"如果需要一个\",{\"1\":{\"658\":1}}],[\"如果需要可以把这条语句放在不同的行\",{\"1\":{\"640\":1}}],[\"如果需要的话可以定义一个向量作为切片的别名来进行操作\",{\"1\":{\"601\":1}}],[\"如果需要对选项进行初始化\",{\"1\":{\"567\":1}}],[\"如果需要申明一个在外部定义的函数\",{\"1\":{\"561\":1}}],[\"如果需要查询非\",{\"1\":{\"536\":1}}],[\"如果需要使用到\",{\"1\":{\"531\":1}}],[\"如果需要多个包\",{\"1\":{\"506\":1}}],[\"如果需要手动安装\",{\"1\":{\"491\":1}}],[\"如果需要清空所有表记录\",{\"1\":{\"273\":1}}],[\"如果需要保留相同行\",{\"1\":{\"144\":1,\"177\":1}}],[\"如果多个表是有关系的话\",{\"1\":{\"270\":1}}],[\"如果多个表是完全无关系的话\",{\"1\":{\"270\":1}}],[\"如果有不同错误条件可能发生\",{\"1\":{\"688\":1}}],[\"如果有必要的话甚至会是整个程序\",{\"1\":{\"687\":1}}],[\"如果有人想安装您的远端项目到本地机器\",{\"1\":{\"636\":1}}],[\"如果有很多函数\",{\"1\":{\"510\":1}}],[\"如果有更多的方法\",{\"1\":{\"383\":1}}],[\"如果有多个二级索引\",{\"1\":{\"303\":1}}],[\"如果有\",{\"1\":{\"270\":1,\"507\":1}}],[\"如果遇到升级之类的都是自己中间件那里搞就行了\",{\"1\":{\"252\":1}}],[\"如果一定要看\",{\"1\":{\"256\":1}}],[\"如果一条语句操作了非主键索引\",{\"1\":{\"235\":1}}],[\"如果一条\",{\"1\":{\"235\":1}}],[\"如果一个变长参数的类型没有被指定\",{\"1\":{\"567\":1}}],[\"如果一个变量在函数体外声明\",{\"1\":{\"515\":1}}],[\"如果一个变量被取地址\",{\"1\":{\"442\":1}}],[\"如果一个函数想要改变这个变量可以这样写\",{\"1\":{\"625\":1}}],[\"如果一个函数需要返回四到五个值\",{\"1\":{\"563\":1}}],[\"如果一个函数需要返回值\",{\"1\":{\"562\":1}}],[\"如果一个函数返回对一个变量的引用\",{\"1\":{\"445\":1}}],[\"如果一个包有多个源文件包含\",{\"1\":{\"519\":1}}],[\"如果一个局部变量非常大\",{\"1\":{\"442\":1}}],[\"如果一个\",{\"1\":{\"137\":1,\"170\":1,\"338\":3}}],[\"如果将其作为文本打印\",{\"1\":{\"682\":1}}],[\"如果将\",{\"1\":{\"559\":1}}],[\"如果将实现了acid\",{\"1\":{\"242\":1}}],[\"如果将这三者组合为多列索引\",{\"1\":{\"222\":1}}],[\"如果将它存储在cookie中\",{\"1\":{\"38\":1}}],[\"如果是未加密的\",{\"1\":{\"849\":1}}],[\"如果是用\",{\"1\":{\"689\":1}}],[\"如果是用于修改某个对象\",{\"1\":{\"512\":1}}],[\"如果是正常执行\",{\"1\":{\"689\":1}}],[\"如果是就用于产生输出信息\",{\"1\":{\"675\":1}}],[\"如果是简单模式\",{\"1\":{\"624\":1}}],[\"如果是安装的是\",{\"1\":{\"506\":1}}],[\"如果是想实现本地队列\",{\"1\":{\"410\":1}}],[\"如果是\",{\"1\":{\"303\":1}}],[\"如果是后台批处理任务要求分批获取数据\",{\"1\":{\"256\":1}}],[\"如果是在前台应用提供分页\",{\"1\":{\"256\":1}}],[\"如果是联合索引\",{\"1\":{\"226\":1}}],[\"如果是组合索引\",{\"1\":{\"212\":1}}],[\"如果是服务器集群\",{\"1\":{\"28\":1}}],[\"如果还想再细分\",{\"1\":{\"72\":1}}],[\"如果\",{\"1\":{\"39\":1,\"238\":2,\"287\":1,\"354\":2,\"409\":2,\"410\":1,\"420\":1,\"438\":1,\"506\":1,\"516\":1,\"524\":1,\"525\":2,\"537\":1,\"550\":1,\"556\":1,\"557\":1,\"585\":2,\"591\":1,\"592\":1,\"593\":2,\"605\":2,\"608\":4,\"612\":1,\"642\":1,\"651\":2,\"662\":2,\"668\":1,\"671\":1,\"700\":1,\"701\":1}}],[\"如果服务端检测到任何修改\",{\"1\":{\"39\":1}}],[\"如果服务启动成功\",{\"1\":{\"10\":1,\"11\":1}}],[\"如果启动失败就打印\",{\"1\":{\"10\":1}}],[\"生产者在通道中放入给消费者读取的值\",{\"1\":{\"708\":1}}],[\"生产者消费者模式\",{\"1\":{\"708\":1}}],[\"生产者协程\",{\"1\":{\"699\":1}}],[\"生态丰富\",{\"1\":{\"320\":1}}],[\"生态\",{\"1\":{\"320\":1}}],[\"生态系统的数据库\",{\"1\":{\"296\":1}}],[\"生效\",{\"1\":{\"151\":1,\"187\":1,\"580\":1}}],[\"生效时间\",{\"1\":{\"35\":1}}],[\"生成可执行文件\",{\"1\":{\"631\":1}}],[\"生成像\",{\"1\":{\"623\":1}}],[\"生成数组\",{\"1\":{\"585\":1}}],[\"生成的序列是一个可打印的字符串\",{\"1\":{\"849\":1}}],[\"生成的\",{\"1\":{\"497\":1}}],[\"生成的用户密码和\",{\"1\":{\"6\":1}}],[\"生成代码文档\",{\"0\":{\"497\":1}}],[\"生成器和选择器并发请求\",{\"1\":{\"709\":1}}],[\"生成器\",{\"1\":{\"257\":1}}],[\"生成\",{\"1\":{\"251\":1,\"810\":1}}],[\"生成原始令牌后\",{\"1\":{\"31\":1}}],[\"生成一个\",{\"1\":{\"29\":1}}],[\"生成令牌\",{\"1\":{\"6\":1}}],[\"生成登录kibana的令牌\",{\"1\":{\"6\":1}}],[\"签署\",{\"0\":{\"966\":1}}],[\"签约\",{\"1\":{\"70\":1}}],[\"签名算法\",{\"1\":{\"860\":1}}],[\"签名算法的实用性\",{\"0\":{\"860\":1}}],[\"签名携带了完整的可验证的信息\",{\"1\":{\"39\":1}}],[\"签名\",{\"0\":{\"36\":1}}],[\"签发时间\",{\"1\":{\"35\":1}}],[\"签发人\",{\"1\":{\"35\":1}}],[\"签证\",{\"1\":{\"33\":1}}],[\"wza2mj\",{\"1\":{\"869\":1}}],[\"wq\",{\"1\":{\"815\":1}}],[\"w\",{\"1\":{\"481\":1,\"496\":6,\"638\":6,\"672\":5,\"682\":2,\"686\":1,\"689\":1}}],[\"wget\",{\"1\":{\"483\":1}}],[\"wg\",{\"1\":{\"424\":4}}],[\"woodward\",{\"1\":{\"640\":9}}],[\"words\",{\"1\":{\"689\":4}}],[\"word\",{\"1\":{\"677\":1,\"689\":4}}],[\"word哥的博客\",{\"1\":{\"426\":1}}],[\"world2\",{\"1\":{\"508\":1}}],[\"world1\",{\"1\":{\"483\":3,\"485\":1}}],[\"world\",{\"1\":{\"415\":1,\"450\":1,\"469\":1,\"483\":2,\"505\":2,\"506\":1,\"507\":2,\"508\":2,\"515\":3,\"518\":2,\"532\":2,\"573\":1,\"643\":2,\"656\":4,\"680\":4,\"681\":1,\"682\":4}}],[\"works\",{\"1\":{\"657\":2,\"669\":1,\"697\":1}}],[\"working\",{\"1\":{\"483\":1}}],[\"work\",{\"1\":{\"409\":1,\"410\":3,\"411\":1,\"430\":4,\"449\":1,\"506\":1,\"655\":1,\"682\":2,\"686\":1}}],[\"would\",{\"1\":{\"365\":1,\"686\":2,\"689\":1}}],[\"welcome\",{\"1\":{\"677\":8}}],[\"were\",{\"1\":{\"677\":1}}],[\"we\",{\"1\":{\"656\":6,\"672\":1,\"676\":2,\"677\":2,\"686\":1}}],[\"wed\",{\"1\":{\"546\":6,\"662\":1}}],[\"wednesday\",{\"1\":{\"513\":2,\"662\":6,\"670\":1,\"684\":2}}],[\"week\",{\"1\":{\"546\":5}}],[\"weekly\",{\"1\":{\"483\":1}}],[\"weixin\",{\"1\":{\"355\":1,\"356\":1}}],[\"weblist\",{\"1\":{\"692\":1}}],[\"websockets\",{\"1\":{\"686\":1}}],[\"webmvc\",{\"1\":{\"46\":1}}],[\"web\",{\"0\":{\"24\":1,\"843\":1,\"845\":1,\"849\":1,\"857\":1},\"1\":{\"25\":1,\"26\":1,\"39\":6,\"459\":1,\"467\":4,\"469\":1,\"476\":2,\"490\":1,\"497\":2,\"499\":6,\"638\":5,\"682\":2,\"689\":3,\"692\":3,\"694\":1,\"844\":1,\"845\":3,\"853\":1,\"857\":1,\"858\":1,\"866\":1,\"868\":3,\"869\":1},\"2\":{\"40\":1,\"862\":1}}],[\"wap\",{\"1\":{\"873\":1}}],[\"warnuser\",{\"1\":{\"763\":1}}],[\"warning\",{\"1\":{\"52\":1,\"763\":1}}],[\"wanted\",{\"1\":{\"689\":1}}],[\"wa\",{\"1\":{\"682\":2,\"686\":2}}],[\"way\",{\"1\":{\"678\":1,\"699\":1}}],[\"walking\",{\"1\":{\"671\":4}}],[\"walk\",{\"1\":{\"671\":5}}],[\"walker\",{\"1\":{\"497\":1,\"614\":1,\"637\":1}}],[\"washington\",{\"1\":{\"608\":6,\"700\":2,\"709\":2}}],[\"was\",{\"1\":{\"551\":5,\"670\":2,\"677\":1,\"678\":1,\"828\":1}}],[\"wait\",{\"1\":{\"423\":1,\"424\":1,\"704\":1,\"705\":2,\"707\":2}}],[\"waitgroup\",{\"1\":{\"423\":2,\"424\":1}}],[\"waiter\",{\"1\":{\"420\":7}}],[\"waiter按照先进先出的方式获取锁\",{\"1\":{\"420\":1}}],[\"waitq\",{\"1\":{\"398\":2}}],[\"waken\",{\"1\":{\"341\":1}}],[\"www\",{\"0\":{\"335\":1},\"1\":{\"205\":1,\"325\":1,\"339\":1,\"341\":1,\"343\":1,\"344\":1,\"363\":1,\"393\":1,\"397\":1,\"407\":2,\"416\":2,\"428\":2,\"457\":1,\"458\":1,\"460\":1,\"461\":1,\"462\":1,\"469\":1,\"638\":1,\"877\":1,\"881\":1}}],[\"whatisthis\",{\"1\":{\"663\":2}}],[\"what\",{\"1\":{\"593\":1}}],[\"whatjob\",{\"1\":{\"391\":1}}],[\"who\",{\"1\":{\"567\":2,\"681\":5}}],[\"whole++\",{\"1\":{\"523\":1}}],[\"whole\",{\"1\":{\"523\":2}}],[\"wheelcount\",{\"1\":{\"655\":1}}],[\"when\",{\"1\":{\"508\":1,\"559\":1,\"705\":1}}],[\"where\",{\"0\":{\"128\":1,\"129\":1,\"271\":1},\"1\":{\"85\":2,\"104\":1,\"118\":1,\"120\":1,\"128\":4,\"129\":13,\"131\":4,\"132\":3,\"133\":3,\"136\":6,\"137\":1,\"138\":1,\"144\":2,\"147\":1,\"156\":1,\"168\":1,\"170\":1,\"172\":1,\"177\":2,\"180\":1,\"186\":6,\"192\":1,\"204\":1,\"211\":2,\"217\":1,\"219\":1,\"220\":2,\"222\":1,\"235\":2,\"265\":2,\"267\":2,\"268\":4,\"270\":1,\"271\":5,\"277\":2,\"278\":2,\"279\":2,\"299\":2,\"305\":1,\"306\":3,\"575\":10}}],[\"which\",{\"1\":{\"365\":1,\"670\":1,\"688\":1,\"705\":1}}],[\"while\",{\"1\":{\"168\":2,\"204\":2,\"267\":1,\"552\":1,\"555\":1,\"704\":1,\"765\":1}}],[\"wsl\",{\"1\":{\"51\":1,\"52\":1}}],[\"wsl2中安装mysql\",{\"0\":{\"52\":1}}],[\"wsl2中安装docker\",{\"0\":{\"51\":1}}],[\"wsl2\",{\"1\":{\"51\":3,\"52\":1},\"2\":{\"54\":1}}],[\"wsl2的使用与bug\",{\"0\":{\"49\":1}}],[\"wsl如何重新启动\",{\"0\":{\"50\":1}}],[\"wr\",{\"1\":{\"682\":1}}],[\"writing\",{\"1\":{\"682\":2}}],[\"written\",{\"1\":{\"680\":1}}],[\"writeheapprofile\",{\"1\":{\"692\":1}}],[\"writes\",{\"1\":{\"686\":1}}],[\"writestring\",{\"1\":{\"590\":2,\"670\":5,\"680\":6,\"682\":2,\"686\":2}}],[\"writefile\",{\"1\":{\"678\":2}}],[\"writexml\",{\"1\":{\"672\":2}}],[\"writerw\",{\"1\":{\"682\":1}}],[\"writers\",{\"1\":{\"662\":1}}],[\"writer\",{\"1\":{\"662\":4,\"672\":3,\"676\":1,\"680\":3,\"682\":17,\"686\":10}}],[\"write\",{\"1\":{\"42\":2,\"52\":1,\"78\":1,\"590\":1,\"653\":5,\"658\":2,\"662\":4,\"678\":1,\"682\":6,\"686\":6,\"692\":2}}],[\"wronly\",{\"1\":{\"680\":3,\"682\":1,\"686\":1}}],[\"wronly|os\",{\"1\":{\"680\":2,\"682\":1}}],[\"wrong\",{\"1\":{\"642\":1}}],[\"wrappers\",{\"1\":{\"628\":1,\"662\":1}}],[\"wrapping\",{\"1\":{\"39\":2}}],[\"william\",{\"1\":{\"624\":3}}],[\"will\",{\"1\":{\"610\":1,\"656\":4,\"669\":1,\"686\":3}}],[\"window\",{\"1\":{\"689\":1}}],[\"windows\",{\"0\":{\"485\":1},\"1\":{\"296\":1,\"330\":1,\"469\":1,\"475\":1,\"481\":3,\"482\":3,\"485\":5,\"489\":1,\"490\":1,\"491\":1,\"506\":3,\"515\":2,\"547\":1,\"549\":2,\"633\":1,\"635\":1,\"677\":2,\"678\":1,\"680\":1,\"682\":1,\"689\":4}}],[\"winter\",{\"1\":{\"591\":1}}],[\"wiki\",{\"1\":{\"469\":1,\"665\":1,\"680\":1}}],[\"wikipedia\",{\"1\":{\"310\":1,\"469\":1}}],[\"width\",{\"1\":{\"42\":1,\"582\":3,\"662\":2,\"673\":2}}],[\"without\",{\"1\":{\"549\":1,\"662\":1}}],[\"within\",{\"1\":{\"506\":1}}],[\"withissuedat\",{\"1\":{\"35\":1}}],[\"withexpiresat\",{\"1\":{\"35\":1}}],[\"withclaim\",{\"1\":{\"35\":4}}],[\"withheader\",{\"1\":{\"35\":1}}],[\"with\",{\"1\":{\"34\":9,\"39\":1,\"52\":1,\"495\":1,\"507\":1,\"547\":1,\"550\":3,\"568\":1,\"585\":1,\"588\":1,\"614\":1,\"626\":2,\"627\":2,\"640\":1,\"649\":1,\"662\":3,\"672\":1,\"676\":2,\"677\":2,\"678\":1,\"680\":1,\"687\":1,\"689\":3,\"697\":1,\"700\":2}}],[\"描述了类的行为和功能\",{\"1\":{\"392\":1}}],[\"描述了具体的值\",{\"1\":{\"383\":1}}],[\"描述的接口包含方法\",{\"1\":{\"383\":1}}],[\"描述\",{\"1\":{\"34\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"459\":1,\"638\":1}}],[\"通知授权服务器将用于从授权端点返回参数的机制\",{\"1\":{\"873\":1}}],[\"通用定义\",{\"1\":{\"666\":1}}],[\"通用类型的节点数据结构\",{\"0\":{\"666\":1}}],[\"通用方法和方法命名\",{\"0\":{\"658\":1}}],[\"通用数据类型\",{\"1\":{\"301\":1}}],[\"通道可以被显式的关闭\",{\"1\":{\"709\":1}}],[\"通道可以比作\",{\"1\":{\"699\":1}}],[\"通道创建的时候都是双向的\",{\"1\":{\"709\":1}}],[\"通道类型可以用注解来表示它只发送或者只接收\",{\"1\":{\"709\":1}}],[\"通道迭代器模式\",{\"1\":{\"708\":1}}],[\"通道工厂模式\",{\"1\":{\"707\":1}}],[\"通道就是异步的了\",{\"1\":{\"703\":1}}],[\"通道交换数据进行协程同步\",{\"0\":{\"702\":1}}],[\"通道阻塞\",{\"0\":{\"701\":1}}],[\"通道的方向\",{\"0\":{\"709\":1}}],[\"通道的长度\",{\"1\":{\"707\":1}}],[\"通道的发送和接收都是原子操作\",{\"1\":{\"700\":1}}],[\"通道的通道\",{\"1\":{\"699\":1}}],[\"通道也是引用类型\",{\"1\":{\"699\":1}}],[\"通道实际上是类型化消息的队列\",{\"1\":{\"699\":1}}],[\"通道服务于通信的两个目的\",{\"1\":{\"699\":1}}],[\"通道等等\",{\"1\":{\"682\":1}}],[\"通道\",{\"1\":{\"509\":1,\"563\":1,\"699\":1,\"705\":1}}],[\"通信仅在收发双方准备好的情况下才可以成功\",{\"1\":{\"703\":1}}],[\"通信是一种同步形式\",{\"1\":{\"702\":1}}],[\"通信是同步且无缓冲的\",{\"1\":{\"701\":1}}],[\"通信操作符\",{\"0\":{\"700\":1}}],[\"通信强制协作\",{\"1\":{\"693\":1}}],[\"通信序列进程\",{\"1\":{\"471\":1}}],[\"通信并且增加nacos的集群端口上下偏移1000\",{\"1\":{\"4\":1}}],[\"通俗来讲\",{\"1\":{\"445\":1}}],[\"通配符位于开头处匹配会非常慢\",{\"1\":{\"133\":1}}],[\"通配符\",{\"0\":{\"133\":1}}],[\"通过引用传递请求对象\",{\"0\":{\"950\":1}}],[\"通过先前的行政同意\",{\"1\":{\"876\":1}}],[\"通过此参数\",{\"1\":{\"873\":1}}],[\"通过加密方式将该参数的值与浏览器cookie绑定\",{\"1\":{\"873\":1}}],[\"通过放入值\",{\"1\":{\"705\":1}}],[\"通过放宽对强一致性要求\",{\"1\":{\"242\":1}}],[\"通过通道发送信号告知处理已经完成\",{\"1\":{\"704\":1}}],[\"通过通道\",{\"1\":{\"700\":1,\"702\":1}}],[\"通过网络传输的数据必须加密\",{\"1\":{\"686\":1}}],[\"通过字符串转换让其变得可读性强一些\",{\"1\":{\"686\":1}}],[\"通过这种机制\",{\"1\":{\"689\":1}}],[\"通过这种方式\",{\"1\":{\"684\":1}}],[\"通过这个指针\",{\"1\":{\"566\":1}}],[\"通过把数据转换成纯文本\",{\"1\":{\"682\":1}}],[\"通过标识符首字母大写\",{\"1\":{\"676\":1}}],[\"通过标识符首字母小写\",{\"1\":{\"676\":1}}],[\"通过空接口和类型断言\",{\"1\":{\"676\":1}}],[\"通过反射修改\",{\"0\":{\"669\":1}}],[\"通过接口类型变量使用方法做\",{\"1\":{\"662\":1}}],[\"通过接口实现了\",{\"1\":{\"378\":1}}],[\"通过计算一个特定三角形的面积来进行测试\",{\"1\":{\"662\":1}}],[\"通过计算行数和矩阵值可以很方便的写出如\",{\"1\":{\"591\":1}}],[\"通过如下格式定义接口\",{\"1\":{\"662\":1}}],[\"通过调用\",{\"1\":{\"661\":1,\"686\":1}}],[\"通过它可以调用\",{\"1\":{\"662\":1}}],[\"通过它可以实现很多面向对象的特性\",{\"1\":{\"662\":1}}],[\"通过它可以实现你喜欢的其他编程语言里的一些结构\",{\"1\":{\"659\":1}}],[\"通过它可以\",{\"1\":{\"657\":1}}],[\"通过拷贝接受\",{\"1\":{\"653\":1}}],[\"通过结构体字面量新建一个结构体实例并打印它的内容\",{\"1\":{\"648\":1}}],[\"通过类型\",{\"1\":{\"647\":1}}],[\"通过类型别名\",{\"1\":{\"639\":1}}],[\"通过应用可见性规则参考\",{\"1\":{\"642\":1}}],[\"通过浏览\",{\"1\":{\"638\":1}}],[\"通过表单实现短地址和长地址的相互转换\",{\"1\":{\"638\":1}}],[\"通过指令编译并安装包到本地\",{\"1\":{\"631\":1}}],[\"通过指针实现\",{\"1\":{\"381\":1}}],[\"通过设置\",{\"1\":{\"628\":1}}],[\"通过以下内容创建一个包的\",{\"1\":{\"631\":1}}],[\"通过以下方式\",{\"1\":{\"627\":1}}],[\"通过以下的\",{\"1\":{\"469\":1}}],[\"通过包含\",{\"1\":{\"625\":1}}],[\"通过一个\",{\"0\":{\"702\":1},\"1\":{\"614\":1,\"662\":1,\"670\":1,\"686\":1}}],[\"通过将简单的数据格式与一系列定义明确的signatures算法相结合\",{\"1\":{\"857\":1}}],[\"通过将时间戳我们可以转换成日期字符串\",{\"1\":{\"619\":1}}],[\"通过将\",{\"1\":{\"607\":1}}],[\"通过分片的分片\",{\"1\":{\"589\":1}}],[\"通过内存缓存来提升性能\",{\"0\":{\"577\":1}}],[\"通过对不同的数据集并行执行代码\",{\"1\":{\"694\":1}}],[\"通过对\",{\"1\":{\"547\":1}}],[\"通过给予程序员基本内存布局\",{\"1\":{\"547\":1}}],[\"通过赋值给空白标识符来忽略值\",{\"1\":{\"525\":1}}],[\"通过源代码编译安装的过程与环境变量的配置与在\",{\"1\":{\"484\":1}}],[\"通过命令移动到\",{\"1\":{\"483\":1}}],[\"通过关键字\",{\"1\":{\"475\":1}}],[\"通过自身优良的构建机制\",{\"1\":{\"473\":1}}],[\"通过弹性设计保障了大并发服务端的稳定性\",{\"1\":{\"459\":1}}],[\"通过执行\",{\"1\":{\"449\":1}}],[\"通过逃逸分析\",{\"1\":{\"445\":1}}],[\"通过虚函数表来实现基类调用派生类的函数\",{\"1\":{\"392\":1}}],[\"通过前面提到的\",{\"1\":{\"390\":1}}],[\"通过增加地址就能获取到这些函数指针\",{\"1\":{\"383\":1}}],[\"通过fmt打印map时\",{\"1\":{\"362\":1}}],[\"通过组合实现了继承\",{\"1\":{\"338\":1}}],[\"通过使用application\",{\"1\":{\"877\":1}}],[\"通过使用方向注解来限制协程对通道的操作\",{\"1\":{\"709\":1}}],[\"通过使用接口\",{\"1\":{\"658\":1}}],[\"通过使用空接口类型\",{\"1\":{\"605\":1}}],[\"通过使用省略号操作符\",{\"1\":{\"591\":1}}],[\"通过使用\",{\"1\":{\"330\":1,\"623\":1,\"625\":1,\"678\":1}}],[\"通过使用索引\",{\"1\":{\"210\":1}}],[\"通过首字母大小写来控制\",{\"1\":{\"314\":1}}],[\"通过排序操作\",{\"1\":{\"225\":1}}],[\"通过\",{\"0\":{\"634\":1},\"1\":{\"112\":2,\"151\":1,\"168\":5,\"187\":1,\"204\":5,\"230\":1,\"330\":1,\"392\":1,\"417\":2,\"467\":1,\"477\":1,\"512\":1,\"580\":3,\"589\":1,\"590\":2,\"593\":1,\"605\":1,\"627\":1,\"669\":1,\"686\":3,\"696\":1,\"782\":1,\"848\":1}}],[\"通过索引可以更加快速高效地查询数据\",{\"1\":{\"106\":1}}],[\"通过只给用户访问视图的权限\",{\"1\":{\"103\":1}}],[\"通过在函数和方法中返回错误对象作为它们的唯一或最后一个返回值\",{\"1\":{\"687\":1}}],[\"通过在类型中嵌入所有必要的父类型\",{\"1\":{\"657\":1}}],[\"通过在内存中缓存和重复利用相同计算的结果\",{\"1\":{\"577\":1}}],[\"通过在内存中按字节比较来实现字符串的对比\",{\"1\":{\"532\":1}}],[\"通过在角色更改时自动更新访问权限来维护\",{\"1\":{\"74\":1}}],[\"通过在全球范围内跨多个平台和应用程序快速重新分配权限\",{\"1\":{\"74\":1}}],[\"通过为供应商和业务合作伙伴等外部用户提供预定义的角色来降低第三方风险\",{\"1\":{\"74\":1}}],[\"通过根据人力资源属性自动为新员工分配访问权限来加速入职\",{\"1\":{\"74\":1}}],[\"通常不超过几分钟\",{\"1\":{\"869\":1}}],[\"通常可以由第三方安全地阅读的权利要求的一个常见示例是sub要求\",{\"1\":{\"848\":1}}],[\"通常和\",{\"1\":{\"709\":1}}],[\"通常你想要返回包含错误参数的更有信息量的字符串\",{\"1\":{\"689\":1}}],[\"通常你在应用中定义了一个结构体\",{\"1\":{\"676\":1}}],[\"通常用于远程方法调用\",{\"1\":{\"686\":1}}],[\"通常用十六进制数表示\",{\"1\":{\"547\":1}}],[\"通常\",{\"1\":{\"682\":1,\"688\":1,\"708\":1,\"873\":1}}],[\"通常只有函数签名需要改变\",{\"1\":{\"676\":1}}],[\"通常需要编译器静态检查的支持\",{\"1\":{\"672\":1}}],[\"通常我们可以使用\",{\"1\":{\"662\":1}}],[\"通常它们会包含\",{\"1\":{\"662\":1}}],[\"通常叫节点\",{\"1\":{\"640\":1}}],[\"通常被称做类型\",{\"1\":{\"640\":1}}],[\"通常通过不同线程执行不同应用来实现程序的并发\",{\"1\":{\"625\":1}}],[\"通常使用这样的格式来声明通道\",{\"1\":{\"699\":1}}],[\"通常使用一个无限循环来达到这样的目的\",{\"1\":{\"697\":1}}],[\"通常使用切片\",{\"1\":{\"583\":1}}],[\"通常使用的格式化字符串作为第一个参数\",{\"1\":{\"517\":1}}],[\"通常指针的值指向一个变量的地址\",{\"1\":{\"563\":1}}],[\"通常简称为\",{\"1\":{\"506\":1}}],[\"通常在发现期间获得\",{\"1\":{\"887\":1}}],[\"通常在\",{\"1\":{\"483\":1}}],[\"通常小对象过多会导致\",{\"1\":{\"443\":1}}],[\"通常情况下\",{\"1\":{\"449\":1}}],[\"通常情况\",{\"1\":{\"358\":1}}],[\"通常称为内存泄漏\",{\"1\":{\"473\":1}}],[\"通常称为方法\",{\"1\":{\"310\":1}}],[\"通常称为属性或属性\",{\"1\":{\"310\":1}}],[\"通常来说\",{\"1\":{\"252\":1}}],[\"通常是account\",{\"1\":{\"873\":1}}],[\"通常是consent\",{\"1\":{\"873\":1}}],[\"通常是login\",{\"1\":{\"873\":1}}],[\"通常是一个访问令牌\",{\"1\":{\"869\":1}}],[\"通常是一个文件或一组文件\",{\"1\":{\"82\":1}}],[\"通常是静态\",{\"1\":{\"854\":1}}],[\"通常是添加用户数据的元素\",{\"1\":{\"851\":1}}],[\"通常是字符串\",{\"1\":{\"689\":1}}],[\"通常是匿名的\",{\"1\":{\"585\":1}}],[\"通常是通过消息传递的方式保证系统的最终一致性\",{\"1\":{\"242\":1}}],[\"通常比较费时\",{\"1\":{\"224\":1}}],[\"通常返回的列名取自第一个查询\",{\"1\":{\"144\":1,\"177\":1}}],[\"通常还涉及聚合函数\",{\"1\":{\"135\":1,\"185\":1}}],[\"通常有配置文件\",{\"1\":{\"63\":1}}],[\"通常直接使用\",{\"1\":{\"34\":1}}],[\"声明可以包含一个包含多个元素的数组\",{\"1\":{\"887\":1}}],[\"声明被请求为id令牌的特定值\",{\"1\":{\"874\":1}}],[\"声明值是在认证请求中发送的nonce值\",{\"1\":{\"869\":1}}],[\"声明相反\",{\"1\":{\"852\":1}}],[\"声明常量\",{\"1\":{\"753\":1}}],[\"声明变量\",{\"1\":{\"752\":1}}],[\"声明变量的一般形式是使用\",{\"1\":{\"515\":1}}],[\"声明\",{\"0\":{\"604\":1,\"752\":1,\"753\":1,\"768\":1},\"1\":{\"640\":1,\"759\":1,\"760\":1,\"850\":2}}],[\"声明切片的格式是\",{\"1\":{\"585\":1}}],[\"声明的值完全匹配\",{\"1\":{\"887\":1}}],[\"声明的格式是\",{\"1\":{\"580\":1}}],[\"声明的变量的作用域只存在于\",{\"1\":{\"549\":1}}],[\"声明的变量的值会自动初始化为该类型的零值\",{\"1\":{\"509\":1}}],[\"声明和初始化\",{\"0\":{\"579\":1}}],[\"声明与赋值\",{\"1\":{\"515\":1}}],[\"声明属于\",{\"1\":{\"449\":1}}],[\"声明他们的时候\",{\"1\":{\"382\":1}}],[\"声明了一个cat结构体\",{\"1\":{\"338\":1}}],[\"声明部分\",{\"1\":{\"39\":1}}],[\"声明加密的算法\",{\"1\":{\"34\":1}}],[\"声明类型\",{\"1\":{\"34\":1}}],[\"各元素的类型不必相同\",{\"1\":{\"759\":1}}],[\"各类变种题型\",{\"0\":{\"399\":1}}],[\"各键值项存储位置都可能会发生改变\",{\"1\":{\"359\":1}}],[\"各种库\",{\"1\":{\"320\":1}}],[\"各种服务收到请求后\",{\"1\":{\"28\":1}}],[\"各个阶段是如何解决的\",{\"0\":{\"431\":1}}],[\"各个系统都需要耦合\",{\"1\":{\"252\":1}}],[\"各个\",{\"1\":{\"83\":1}}],[\"各部分信息如何命名等信息\",{\"1\":{\"82\":1}}],[\"各字串之间也没有换行符\",{\"1\":{\"33\":1}}],[\"注解\",{\"1\":{\"506\":1}}],[\"注\",{\"1\":{\"374\":1,\"536\":1,\"581\":2,\"585\":1,\"688\":1}}],[\"注释必须以\",{\"1\":{\"628\":1}}],[\"注释不会被编译\",{\"1\":{\"508\":1}}],[\"注释\",{\"0\":{\"508\":1},\"1\":{\"130\":1,\"628\":1}}],[\"注释3\",{\"1\":{\"85\":1}}],[\"注释2\",{\"1\":{\"85\":1}}],[\"注释1\",{\"1\":{\"85\":1}}],[\"注册名称作为acr值\",{\"1\":{\"869\":1}}],[\"注册的claims\",{\"1\":{\"853\":1}}],[\"注册\",{\"0\":{\"961\":1},\"1\":{\"72\":1,\"331\":1}}],[\"注册来源\",{\"1\":{\"72\":1}}],[\"注册令牌将输出到终端\",{\"1\":{\"6\":1}}],[\"注意紧凑表示法中的尾点\",{\"1\":{\"854\":1}}],[\"注意上述代码中闭合函数的用法\",{\"1\":{\"705\":1}}],[\"注意也可以通过解指针的方式来设置值\",{\"1\":{\"640\":1}}],[\"注意对精确度的把握\",{\"1\":{\"524\":1}}],[\"注意官方博客发布的信息\",{\"1\":{\"483\":1}}],[\"注意事项\",{\"1\":{\"483\":1,\"484\":1,\"506\":1,\"518\":1,\"532\":1,\"547\":2,\"549\":2,\"550\":2,\"552\":1,\"580\":1}}],[\"注意设置缓冲区大小要和开启协程的个人相等\",{\"1\":{\"427\":1}}],[\"注意访问\",{\"1\":{\"335\":1}}],[\"注意\",{\"1\":{\"35\":1,\"133\":1,\"146\":1,\"166\":2,\"179\":1,\"202\":2,\"449\":1,\"481\":1,\"581\":1,\"585\":1,\"593\":1,\"605\":1,\"609\":1,\"653\":1,\"677\":1,\"678\":2,\"680\":1,\"700\":1,\"830\":1,\"869\":1,\"892\":1}}],[\"注意jwt对象为一个长字串\",{\"1\":{\"33\":1}}],[\"载荷\",{\"0\":{\"35\":1},\"1\":{\"33\":1}}],[\"对客户\",{\"1\":{\"868\":1}}],[\"对生成的\",{\"1\":{\"856\":1}}],[\"对话框\",{\"1\":{\"801\":1}}],[\"对实际测试会很有帮助\",{\"1\":{\"689\":1}}],[\"对其解码时\",{\"1\":{\"683\":1}}],[\"对其它表的查询缓存依然可以使用\",{\"1\":{\"268\":1}}],[\"对其它事务也是可见的\",{\"1\":{\"239\":1}}],[\"对比基于类的\",{\"1\":{\"676\":1}}],[\"对比进程和线程\",{\"1\":{\"320\":1}}],[\"对复数的操作\",{\"1\":{\"614\":1}}],[\"对复数进行比较运算时\",{\"1\":{\"524\":1}}],[\"对命令行参数的操作\",{\"1\":{\"614\":1}}],[\"对动态的伸缩\",{\"1\":{\"606\":1}}],[\"对\",{\"1\":{\"605\":1,\"606\":1}}],[\"对索引项为\",{\"1\":{\"580\":1}}],[\"对索引项之间的间隙加锁\",{\"1\":{\"235\":1}}],[\"对它们进行加密的可能性\",{\"1\":{\"845\":1}}],[\"对它们进行signatures或使用json\",{\"1\":{\"845\":1}}],[\"对它们进行分隔\",{\"1\":{\"504\":1}}],[\"对它的细节进行深入\",{\"1\":{\"600\":1}}],[\"对它所做的任何修改都不会影响到集合中原有的值\",{\"1\":{\"557\":1}}],[\"对字符串进行格式化\",{\"1\":{\"517\":1}}],[\"对代码编写\",{\"1\":{\"492\":1}}],[\"对你来说是非常有教育意义的\",{\"1\":{\"483\":1}}],[\"对内存管理进行的优化和简化\",{\"1\":{\"445\":1}}],[\"对内存的消耗也是非常恐怖的\",{\"1\":{\"438\":1}}],[\"对性能产生极大的影响\",{\"1\":{\"438\":1}}],[\"对异常处理的原则是\",{\"1\":{\"425\":1}}],[\"对同一个\",{\"0\":{\"425\":1}}],[\"对齐内存使用的\",{\"1\":{\"365\":1}}],[\"对集合\",{\"1\":{\"363\":1}}],[\"对应的文本文件\",{\"1\":{\"680\":1}}],[\"对应的值\",{\"1\":{\"608\":1}}],[\"对应的值赋值给\",{\"1\":{\"605\":1}}],[\"对应的值可以通过赋值符号来设置为\",{\"1\":{\"605\":1}}],[\"对应的\",{\"1\":{\"603\":1,\"608\":1,\"609\":1}}],[\"对应的另一个元素是\",{\"1\":{\"603\":1}}],[\"对应位置上的值根据以下规则组合\",{\"1\":{\"525\":1}}],[\"对应位置上的值经过或运算结果\",{\"1\":{\"525\":1}}],[\"对应位置上的值经过和运算结果\",{\"1\":{\"525\":1}}],[\"对应\",{\"1\":{\"333\":1,\"682\":4}}],[\"对应用程序内存的消耗是一个问题\",{\"1\":{\"256\":1}}],[\"对数据加锁\",{\"1\":{\"694\":1}}],[\"对数据类型的支持是不一样的\",{\"1\":{\"301\":1}}],[\"对数据库其中的对象和数据运行访问工作的编程语句\",{\"1\":{\"88\":1}}],[\"对业务侵入很小\",{\"1\":{\"241\":1}}],[\"对该数据做了修改\",{\"1\":{\"238\":1}}],[\"对所有的索引列计算一个\",{\"1\":{\"217\":1}}],[\"对视图的操作和对普通表的操作一样\",{\"1\":{\"103\":1}}],[\"对一个包做\",{\"1\":{\"689\":1}}],[\"对一个三维点使用它的极坐标定义一个\",{\"1\":{\"640\":1}}],[\"对一个空指针的反向引用是不合法的\",{\"1\":{\"547\":1}}],[\"对一个变量取地址\",{\"1\":{\"445\":1}}],[\"对一个表执行多个查询\",{\"1\":{\"144\":1,\"177\":1}}],[\"对一个角色的附加属性\",{\"1\":{\"70\":1}}],[\"对一个权限点的附加限制\",{\"1\":{\"70\":1}}],[\"对权限服务来说\",{\"1\":{\"70\":1}}],[\"对于基于mac的算法\",{\"1\":{\"887\":1}}],[\"对于基本类型的排序\",{\"1\":{\"662\":1}}],[\"对于公钥签名算法\",{\"1\":{\"859\":1,\"861\":1}}],[\"对于未加密的\",{\"1\":{\"850\":2}}],[\"对于树或图的算法\",{\"1\":{\"708\":1}}],[\"对于同一个通道\",{\"1\":{\"701\":2}}],[\"对于同时为\",{\"1\":{\"554\":1}}],[\"对于在函数结束时关闭打开的文件非常有用\",{\"1\":{\"682\":1}}],[\"对于动态语言非常重要的单元测试来说\",{\"1\":{\"672\":1}}],[\"对于一般性的排序\",{\"1\":{\"662\":1}}],[\"对于一个bucket数量为4\",{\"1\":{\"368\":1}}],[\"对于一个日期\",{\"1\":{\"148\":1,\"181\":1}}],[\"对于新定义的\",{\"1\":{\"659\":1}}],[\"对于类型\",{\"1\":{\"653\":1}}],[\"对于类型转换而言\",{\"1\":{\"388\":1}}],[\"对于大的\",{\"1\":{\"606\":1}}],[\"对于大括号\",{\"1\":{\"507\":1}}],[\"对于变量内部结构并不会执行相应的初始化操作\",{\"1\":{\"588\":1}}],[\"对于调试是十分有帮助的\",{\"1\":{\"575\":1}}],[\"对于任何一个变量\",{\"1\":{\"547\":1}}],[\"对于任意结点\",{\"1\":{\"214\":1}}],[\"对于只占用\",{\"1\":{\"531\":1}}],[\"对于整数的高精度计算\",{\"1\":{\"626\":1}}],[\"对于整数和浮点数\",{\"1\":{\"527\":1}}],[\"对于整数运算而言\",{\"1\":{\"527\":1}}],[\"对于有效载荷本\",{\"1\":{\"850\":1}}],[\"对于有符号\",{\"1\":{\"525\":1}}],[\"对于有缓冲的channel存储数据\",{\"1\":{\"398\":1}}],[\"对于无符号\",{\"1\":{\"525\":1}}],[\"对于布尔值的好的命名能够很好地提升代码的可读性\",{\"1\":{\"521\":1}}],[\"对于值之间的比较有非常严格的限制\",{\"1\":{\"521\":1}}],[\"对于代码的缩进层级方面使用\",{\"1\":{\"496\":1}}],[\"对于非常底层的纯\",{\"1\":{\"481\":1}}],[\"对于非常小的表\",{\"1\":{\"211\":1}}],[\"对于高性能分布式系统领域而言\",{\"1\":{\"476\":1}}],[\"对于高并发场景相当可怕\",{\"1\":{\"438\":1}}],[\"对于中文读者\",{\"1\":{\"469\":1}}],[\"对于那些熟悉\",{\"1\":{\"467\":1}}],[\"对于学习\",{\"1\":{\"467\":1}}],[\"对于他们也是直接定义值接收者类型的方法\",{\"1\":{\"382\":1}}],[\"对于切片的扩容规则\",{\"1\":{\"354\":1}}],[\"对于count\",{\"1\":{\"303\":1}}],[\"对于数据类型的支持详情必须参考各数据库的官方文档\",{\"1\":{\"301\":1}}],[\"对于连接查询\",{\"1\":{\"268\":1}}],[\"对于长事务来说\",{\"1\":{\"241\":1}}],[\"对于\",{\"1\":{\"221\":1,\"224\":1,\"287\":2,\"354\":1,\"491\":1,\"633\":1,\"654\":2,\"668\":1,\"682\":1,\"692\":2,\"696\":1}}],[\"对于每一个切片\",{\"1\":{\"585\":1}}],[\"对于每一行数据\",{\"1\":{\"217\":1}}],[\"对于每个结点\",{\"1\":{\"214\":1}}],[\"对于特大型表\",{\"1\":{\"211\":1}}],[\"对于复杂的存储过程来说\",{\"1\":{\"164\":1,\"200\":1}}],[\"对于jws\",{\"1\":{\"39\":1}}],[\"对于开发者来说\",{\"1\":{\"39\":1}}],[\"对于某些重要操作\",{\"1\":{\"31\":1}}],[\"对象标识符\",{\"1\":{\"868\":1,\"869\":1}}],[\"对象向标准错误输出中写入并打印每条日志信息的日期和时间\",{\"1\":{\"689\":1}}],[\"对象中\",{\"1\":{\"686\":1}}],[\"对象并将其序列化为字符串形式\",{\"1\":{\"859\":1}}],[\"对象并调用\",{\"1\":{\"686\":2}}],[\"对象并且用\",{\"1\":{\"590\":1}}],[\"对象和数组\",{\"1\":{\"684\":1}}],[\"对象只支持字符串类型的\",{\"1\":{\"682\":1}}],[\"对象只在它所在的包内可见\",{\"1\":{\"676\":1}}],[\"对象当中产出某些东西\",{\"1\":{\"676\":1}}],[\"对象集合\",{\"1\":{\"676\":1}}],[\"对象对所在包以外也可见\",{\"1\":{\"676\":1}}],[\"对象的行为\",{\"1\":{\"662\":1}}],[\"对象的字段\",{\"1\":{\"654\":1}}],[\"对象的内部状态受到保护\",{\"1\":{\"310\":1}}],[\"对象利用属性和方法的私有\",{\"1\":{\"310\":1}}],[\"对象经常被定义为类的一个实例\",{\"1\":{\"310\":1}}],[\"对象自己的程序可以访问并经常修改自己的数据字段\",{\"1\":{\"310\":1}}],[\"对象也要使用\",{\"1\":{\"35\":1}}],[\"对象\",{\"1\":{\"29\":2,\"35\":1,\"60\":1,\"310\":1,\"312\":1,\"316\":1,\"547\":1,\"624\":1,\"662\":4,\"677\":1,\"678\":1,\"680\":1,\"686\":1,\"689\":1,\"849\":2,\"851\":1}}],[\"因扩张⽽重新哈希时\",{\"1\":{\"359\":1}}],[\"因为oauth\",{\"1\":{\"882\":1}}],[\"因为客户端应该包含了该参数\",{\"1\":{\"882\":1}}],[\"因为不会返回id令牌\",{\"1\":{\"869\":1,\"892\":1}}],[\"因为java虚拟机会保证枚举对象的唯一性\",{\"1\":{\"803\":1}}],[\"因为jwt可以签名\",{\"1\":{\"26\":1}}],[\"因为jwt使用起来轻便\",{\"1\":{\"26\":1}}],[\"因为关闭通道是发送者用来表示不再给通道发送值了\",{\"1\":{\"709\":1}}],[\"因为协程不需要\",{\"1\":{\"705\":1}}],[\"因为创建非常廉价\",{\"1\":{\"694\":1}}],[\"因为示例\",{\"1\":{\"689\":1}}],[\"因为是执行\",{\"1\":{\"689\":1}}],[\"因为已经到达文件尾部\",{\"1\":{\"686\":1}}],[\"因为已有的类型不用变动\",{\"1\":{\"676\":1}}],[\"因为任何类型都实现了空接口\",{\"1\":{\"664\":1}}],[\"因为任何一种语言都有其所擅长和薄弱的方面\",{\"1\":{\"499\":1}}],[\"因为存储在接口中的值没有地址\",{\"1\":{\"662\":1}}],[\"因为指针会首先被解引用\",{\"1\":{\"662\":1}}],[\"因为指针会被自动解引用\",{\"1\":{\"662\":1}}],[\"因为指针对用户来说是完全不可见\",{\"1\":{\"597\":1}}],[\"因为一个结构体可以嵌入多个匿名类型\",{\"1\":{\"655\":1}}],[\"因为一般情况下\",{\"1\":{\"571\":1}}],[\"因为方法是函数\",{\"1\":{\"651\":1}}],[\"因为接口是一个抽象定义\",{\"1\":{\"651\":1}}],[\"因为外部源码将被下载到\",{\"1\":{\"638\":1}}],[\"因为标准库的搜索算法使用的是二分法\",{\"1\":{\"600\":1}}],[\"因为字符串中的每次字符都会对应一个整数\",{\"1\":{\"595\":1}}],[\"因为字符串是纯粹不可变的字节数组\",{\"1\":{\"587\":1}}],[\"因为读写长度未知的\",{\"1\":{\"590\":1}}],[\"因为切片是引用\",{\"1\":{\"585\":1}}],[\"因为匿名函数没有名称\",{\"1\":{\"573\":1}}],[\"因为没有必要创建\",{\"1\":{\"626\":1}}],[\"因为没有复制变量的值\",{\"1\":{\"566\":1}}],[\"因为没有找到和\",{\"1\":{\"166\":1,\"202\":1}}],[\"因为传递一个指针允许直接修改变量的值\",{\"1\":{\"563\":1}}],[\"因为相关函数都使用这个类型的参数\",{\"1\":{\"524\":1}}],[\"因为这会自动检测通道是否关闭\",{\"1\":{\"709\":1}}],[\"因为这种方式给所有的共享内存的多线程都带来了困难\",{\"1\":{\"699\":1}}],[\"因为这个结构可能相当巨大\",{\"1\":{\"680\":1}}],[\"因为这\",{\"1\":{\"542\":1}}],[\"因为这是给相同的变量赋予一个新的值\",{\"1\":{\"518\":1}}],[\"因为这些工作都将由\",{\"1\":{\"504\":1}}],[\"因为这些关键字在编译过程中少到甚至不需要符号表来协助解析\",{\"1\":{\"474\":1}}],[\"因为每台机器可能有不同的存储器布局\",{\"1\":{\"516\":1}}],[\"因为很难对\",{\"1\":{\"513\":1}}],[\"因为很有可能会有多个\",{\"1\":{\"389\":1}}],[\"因为在类继承层次中\",{\"1\":{\"657\":1}}],[\"因为在编译期间自定义函数均属于未知\",{\"1\":{\"513\":1}}],[\"因为在调用的时候会使用包名作为限定符\",{\"1\":{\"512\":1}}],[\"因为编译器没有任何可以用于自动推断类型的依据\",{\"1\":{\"515\":1}}],[\"因为编译器可以根据变量的值来推断其类型\",{\"1\":{\"513\":1}}],[\"因为编译的时候会自动内存逃逸处理\",{\"1\":{\"322\":1}}],[\"因为使用这种方法定义之后的类型可以拥有更多的特性\",{\"1\":{\"509\":1}}],[\"因为可以使用包名来区分它们\",{\"1\":{\"506\":1}}],[\"因为可能大公司系统和项目非常多\",{\"1\":{\"252\":1}}],[\"因为我们不希望生成的程序中有测试代码\",{\"1\":{\"689\":1}}],[\"因为我们不想要一个实例的拷贝\",{\"1\":{\"653\":1}}],[\"因为我们需要创建目录在\",{\"1\":{\"629\":1}}],[\"因为我们使用了一个独立的包\",{\"1\":{\"501\":1}}],[\"因为我相信在未来的发展中会把这些问题解决掉\",{\"1\":{\"320\":1}}],[\"因为你所查阅的文档可能和你正在使用的版本不相符\",{\"1\":{\"483\":1}}],[\"因为垃圾回收和自动内存分配的原因\",{\"1\":{\"476\":1}}],[\"因为当中包含了众多的有价值的代码片段以及相关的解释说明\",{\"1\":{\"467\":1}}],[\"因为提供平台依赖性的\",{\"1\":{\"467\":1}}],[\"因为整个go程序都是运行在用户态的\",{\"1\":{\"412\":1}}],[\"因为本地队列的管理会变得复杂\",{\"1\":{\"410\":1}}],[\"因为派生需要显示声明它继承自哪个基类\",{\"1\":{\"392\":1}}],[\"因为空接口\",{\"1\":{\"389\":1}}],[\"因为值类型会产生一个拷贝\",{\"1\":{\"381\":1}}],[\"因为两者都不会影响接收者\",{\"1\":{\"381\":1}}],[\"因为redis的每个bucket只能存1个键值对\",{\"1\":{\"368\":1}}],[\"因为go语言容易学习\",{\"1\":{\"320\":1}}],[\"因为实现的逻辑类似于\",{\"1\":{\"306\":1}}],[\"因为主键采用的索引是聚簇索引\",{\"1\":{\"303\":1}}],[\"因为它是零值\",{\"1\":{\"686\":1}}],[\"因为它限制了接口的实用性\",{\"1\":{\"674\":1}}],[\"因为它知道这个参数是\",{\"1\":{\"670\":1}}],[\"因为它占用内存少\",{\"1\":{\"640\":1}}],[\"因为它没有一个\",{\"1\":{\"627\":1}}],[\"因为它们都是非常理想的数字\",{\"1\":{\"513\":1}}],[\"因为它们都需要基于全部数据集合进行计算\",{\"1\":{\"256\":1}}],[\"因为它只提供了一到两种方法来解决某个问题\",{\"1\":{\"474\":1}}],[\"因为它使用\",{\"1\":{\"471\":1}}],[\"因为它在解决一些很难用\",{\"1\":{\"467\":1}}],[\"因为它必须是它指向的那个表中的值之一\",{\"1\":{\"228\":1}}],[\"因为\",{\"1\":{\"251\":1,\"274\":1,\"276\":1,\"303\":1,\"306\":1,\"329\":1,\"475\":1,\"487\":1,\"488\":1,\"489\":1,\"509\":1,\"523\":2,\"531\":1,\"547\":1,\"549\":1,\"568\":1,\"570\":1,\"573\":1,\"605\":1,\"626\":1,\"643\":1,\"653\":1,\"661\":1,\"662\":3}}],[\"因为还依赖淘宝的\",{\"1\":{\"251\":1}}],[\"因为索引条目通常远小于数据行的大小\",{\"1\":{\"224\":1}}],[\"因为索引数据结构紧凑\",{\"1\":{\"217\":1}}],[\"因为无法同时把数据行存放在两个不同的地方\",{\"1\":{\"223\":1}}],[\"因为数据库是有缓存的\",{\"1\":{\"246\":1}}],[\"因为数据库往往不允许索引这些列的完整长度\",{\"1\":{\"221\":1}}],[\"因为数据紧凑\",{\"1\":{\"223\":1}}],[\"因为对后期维护起来很麻烦\",{\"1\":{\"72\":1}}],[\"因为各种登录方式都会使用同一个密码\",{\"1\":{\"72\":1}}],[\"因此无法用它创建新的签名信息\",{\"1\":{\"860\":1}}],[\"因此无法用于常量的赋值\",{\"1\":{\"513\":1}}],[\"因此头中很少会出现\",{\"1\":{\"850\":1}}],[\"因此与用户的会话相关联\",{\"1\":{\"848\":1}}],[\"因此保持简单扼要\",{\"1\":{\"847\":1}}],[\"因此每一个枚举类型和定义的枚举变量在jvm中都是唯一的\",{\"1\":{\"803\":1}}],[\"因此每次迭代都会对条件进行检查\",{\"1\":{\"558\":1}}],[\"因此格式化字符串中只有\",{\"1\":{\"670\":1}}],[\"因此传递的是它的拷贝\",{\"1\":{\"653\":1}}],[\"因此方法是一种特殊类型的函数\",{\"1\":{\"651\":1}}],[\"因此对象本身是可以被改变的\",{\"1\":{\"640\":1}}],[\"因此该包的\",{\"1\":{\"627\":1}}],[\"因此该表主要是用来记录每一种登录方式的信息\",{\"1\":{\"72\":1}}],[\"因此更类似于\",{\"1\":{\"585\":1}}],[\"因此可以确保数组创建后再也不能被修改\",{\"1\":{\"770\":1}}],[\"因此可以通过\",{\"1\":{\"639\":1}}],[\"因此可以在需要的时候实现一个\",{\"1\":{\"575\":1}}],[\"因此可以说这是一门混合型的语言\",{\"1\":{\"475\":1}}],[\"因此很显然\",{\"1\":{\"574\":1}}],[\"因此很多时候它的速度要比单一大表快很多\",{\"1\":{\"256\":1}}],[\"因此这些八进制数的解释方式也各不相同\",{\"1\":{\"858\":1}}],[\"因此这些变量可以在闭包中被操作\",{\"1\":{\"573\":1}}],[\"因此这些值不能在后续的代码中使用\",{\"1\":{\"504\":1}}],[\"因此您也可以用它迭代字符串\",{\"1\":{\"557\":1}}],[\"因此它的首选格式是二进制\",{\"1\":{\"686\":1}}],[\"因此它会产生运行时错误\",{\"1\":{\"664\":1}}],[\"因此它不存在固定长度或者最大限制\",{\"1\":{\"606\":1}}],[\"因此它非常适合使用递归函数来实现\",{\"1\":{\"571\":1}}],[\"因此它比\",{\"1\":{\"569\":1}}],[\"因此它一般只具有只读性质\",{\"1\":{\"557\":1}}],[\"因此它也可以在安卓系统下运行\",{\"1\":{\"476\":1}}],[\"因此循环体内必须有相关的条件判断以确保会在某个时刻退出循环\",{\"1\":{\"556\":1}}],[\"因此字符同样称为\",{\"1\":{\"531\":1}}],[\"因此允许常量之间的混合使用\",{\"1\":{\"523\":1}}],[\"因此我们创建了一个长度可变但容量为\",{\"1\":{\"707\":1}}],[\"因此我们可以依旧把字符串看做是一个值类型\",{\"1\":{\"597\":1}}],[\"因此我们可以将它们简写为\",{\"1\":{\"518\":1}}],[\"因此我们无法在程序运行过程中修改它的值\",{\"1\":{\"513\":1}}],[\"因此所有的转换都必须显式说明\",{\"1\":{\"511\":1}}],[\"因此符合规范的函数一般写成如下的形式\",{\"1\":{\"507\":1}}],[\"因此才会引发像上面这样的错误\",{\"1\":{\"507\":1}}],[\"因此才单独使用了一个字段来标识\",{\"1\":{\"72\":1}}],[\"因此包也可以作为命名空间使用\",{\"1\":{\"506\":1}}],[\"因此根据惯例\",{\"1\":{\"506\":1}}],[\"因此文件名和包名一般来说都是不相同的\",{\"1\":{\"506\":1}}],[\"因此测试程序应该分别由各自语言的擅长者来编写\",{\"1\":{\"499\":1}}],[\"因此你可以在程序中使用包含变量的字符串\",{\"1\":{\"517\":1}}],[\"因此你必须在编译或提交版本管理系统之前使用\",{\"1\":{\"496\":1}}],[\"因此你需要通过安装\",{\"1\":{\"484\":1}}],[\"因此他们制作了一个工具\",{\"1\":{\"496\":1}}],[\"因此有一个好的调试器是非常重要的\",{\"1\":{\"494\":1}}],[\"因此不正确的赋值在编译期就会失败\",{\"1\":{\"662\":1}}],[\"因此不会进行隐式转换\",{\"1\":{\"520\":1}}],[\"因此不再赘述\",{\"1\":{\"484\":1}}],[\"因此不可移植\",{\"1\":{\"146\":1,\"179\":1}}],[\"因此如果使用一个有不同指令集的编译器来构建\",{\"1\":{\"481\":1}}],[\"因此尽管\",{\"1\":{\"473\":1}}],[\"因此人们需要一门新的系统编程语言来弥补这个空缺\",{\"1\":{\"472\":1}}],[\"因此学者们坐下来总结出了现在生产环境与软件开发之间的主要矛盾\",{\"1\":{\"467\":1}}],[\"因此使用\",{\"1\":{\"410\":1}}],[\"因此增加了一层安全性\",{\"1\":{\"317\":1}}],[\"因此在安装\",{\"1\":{\"483\":1}}],[\"因此在\",{\"1\":{\"316\":1,\"639\":1}}],[\"因此count\",{\"1\":{\"303\":1}}],[\"因此放在\",{\"1\":{\"270\":1}}],[\"因此会出现很多并发一致性问题\",{\"1\":{\"238\":1}}],[\"因此具有很高的性能\",{\"1\":{\"164\":1,\"200\":1}}],[\"因此其指令作法并不复杂\",{\"1\":{\"90\":1}}],[\"因此其语法都是以读写数据库为主\",{\"1\":{\"88\":1}}],[\"因此数据量从\",{\"1\":{\"72\":1}}],[\"因此需要耗费大量的时间在编译这些文件上\",{\"1\":{\"467\":1}}],[\"因此需要采用扫描全表\",{\"1\":{\"303\":1}}],[\"因此需要提供一个唯一标识\",{\"1\":{\"72\":1}}],[\"因此需要定义一张表来存储权限相关的信息\",{\"1\":{\"72\":1}}],[\"因此\",{\"1\":{\"51\":1,\"72\":1,\"73\":1,\"106\":1,\"166\":1,\"202\":1,\"215\":1,\"224\":1,\"226\":1,\"241\":1,\"271\":1,\"301\":1,\"315\":1,\"317\":1,\"337\":1,\"362\":1,\"389\":2,\"461\":1,\"467\":1,\"473\":1,\"506\":1,\"515\":1,\"527\":1,\"545\":1,\"547\":1,\"551\":2,\"555\":1,\"559\":1,\"569\":1,\"593\":1,\"598\":1,\"601\":1,\"627\":1,\"653\":1,\"672\":1,\"686\":1,\"845\":1,\"848\":1,\"850\":1,\"853\":1,\"857\":1,\"860\":2,\"869\":1}}],[\"因此得到了保密性\",{\"1\":{\"39\":1}}],[\"因此jwe带来了保密性\",{\"1\":{\"39\":1}}],[\"因此一个好的策略是创建一些小的\",{\"1\":{\"656\":1}}],[\"因此一个切片和相关数组的其他切片是共享存储的\",{\"1\":{\"585\":1}}],[\"因此一般是将它放入http请求的header中的authorization字段中\",{\"1\":{\"38\":1}}],[\"因此一旦信息泄露\",{\"1\":{\"31\":1}}],[\"善用jwt有助于减少服务器请求数据库的次数\",{\"1\":{\"31\":1}}],[\"4k\",{\"1\":{\"694\":1}}],[\"487\",{\"1\":{\"709\":1}}],[\"48\",{\"1\":{\"689\":3}}],[\"483\",{\"1\":{\"523\":2}}],[\"4simple\",{\"1\":{\"662\":1}}],[\"4rectangle\",{\"1\":{\"640\":1}}],[\"400\",{\"1\":{\"884\":1}}],[\"409\",{\"1\":{\"709\":1}}],[\"401\",{\"1\":{\"709\":1}}],[\"40\",{\"1\":{\"577\":1,\"587\":1,\"591\":1,\"678\":1}}],[\"40e+00\",{\"1\":{\"523\":1,\"668\":1}}],[\"4fibonacci2\",{\"1\":{\"571\":1}}],[\"4for\",{\"1\":{\"554\":1}}],[\"439\",{\"1\":{\"709\":1}}],[\"433\",{\"1\":{\"709\":1}}],[\"431\",{\"1\":{\"709\":1}}],[\"43492122561469640008497075573153004\",{\"1\":{\"626\":2}}],[\"43\",{\"1\":{\"557\":1,\"611\":3,\"612\":2,\"709\":1}}],[\"4d\",{\"1\":{\"546\":2}}],[\"419\",{\"1\":{\"709\":1}}],[\"4181\",{\"1\":{\"570\":1}}],[\"41\",{\"1\":{\"531\":2,\"577\":1,\"709\":1}}],[\"467\",{\"1\":{\"709\":1}}],[\"463\",{\"1\":{\"709\":1}}],[\"461\",{\"1\":{\"709\":1}}],[\"46\",{\"1\":{\"528\":1,\"568\":1,\"624\":1}}],[\"449\",{\"1\":{\"709\":1}}],[\"443\",{\"1\":{\"709\":1}}],[\"44387482\",{\"1\":{\"355\":1}}],[\"440\",{\"1\":{\"606\":1}}],[\"446\",{\"1\":{\"523\":1}}],[\"4节中\",{\"1\":{\"883\":1}}],[\"4节和第11节\",{\"1\":{\"873\":1}}],[\"4节\",{\"1\":{\"481\":1,\"869\":1}}],[\"457\",{\"1\":{\"709\":1}}],[\"450\",{\"1\":{\"676\":1}}],[\"45\",{\"1\":{\"523\":1,\"587\":1,\"678\":2}}],[\"452409\",{\"1\":{\"339\":1}}],[\"4567\",{\"1\":{\"624\":1}}],[\"456\",{\"1\":{\"268\":1}}],[\"42\",{\"1\":{\"627\":2,\"651\":1,\"662\":4,\"762\":1}}],[\"421\",{\"1\":{\"709\":1}}],[\"42117918\",{\"1\":{\"356\":1}}],[\"421352168\",{\"1\":{\"318\":1}}],[\"42570937\",{\"1\":{\"328\":1}}],[\"499\",{\"1\":{\"709\":1}}],[\"491\",{\"1\":{\"709\":1}}],[\"49\",{\"1\":{\"215\":1}}],[\"479\",{\"1\":{\"709\":1}}],[\"478285186\",{\"1\":{\"528\":1}}],[\"47\",{\"1\":{\"51\":1,\"686\":1,\"709\":1}}],[\"4\",{\"0\":{\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":2,\"37\":2,\"38\":1,\"90\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"111\":1,\"122\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"141\":1,\"150\":1,\"158\":1,\"317\":1,\"325\":1,\"356\":1,\"361\":1,\"384\":1,\"401\":1,\"413\":1,\"420\":1,\"427\":1,\"432\":1,\"441\":1,\"474\":1,\"484\":1,\"495\":1,\"503\":1,\"504\":1,\"505\":1,\"506\":1,\"507\":1,\"508\":1,\"509\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"514\":2,\"515\":2,\"516\":2,\"517\":2,\"518\":3,\"519\":2,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"524\":1,\"525\":1,\"526\":2,\"527\":1,\"528\":1,\"529\":1,\"530\":2,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":2,\"538\":1,\"539\":1,\"540\":1,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"552\":1,\"553\":1,\"555\":1,\"556\":1,\"557\":2,\"566\":1,\"568\":1,\"583\":1,\"588\":1,\"592\":1,\"598\":1,\"610\":1,\"626\":1,\"645\":1,\"654\":1,\"666\":1,\"674\":1,\"681\":1,\"682\":1,\"697\":1,\"702\":1,\"728\":1,\"758\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"810\":1,\"855\":1,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"861\":1,\"876\":1,\"884\":1,\"895\":1,\"909\":1,\"922\":1,\"936\":1,\"937\":1,\"954\":1,\"963\":1,\"982\":1},\"1\":{\"51\":1,\"70\":1,\"72\":2,\"112\":1,\"132\":1,\"148\":1,\"181\":1,\"226\":1,\"227\":3,\"258\":1,\"277\":1,\"311\":1,\"317\":1,\"320\":1,\"322\":1,\"330\":1,\"331\":1,\"346\":5,\"405\":1,\"421\":2,\"424\":1,\"426\":1,\"429\":3,\"431\":1,\"432\":1,\"438\":2,\"439\":1,\"467\":2,\"469\":1,\"476\":2,\"481\":1,\"483\":12,\"494\":1,\"496\":2,\"505\":1,\"506\":1,\"508\":1,\"509\":2,\"510\":2,\"513\":3,\"515\":4,\"516\":4,\"517\":2,\"518\":2,\"519\":6,\"520\":2,\"521\":1,\"523\":8,\"525\":4,\"526\":1,\"527\":5,\"528\":3,\"529\":1,\"530\":3,\"531\":5,\"532\":10,\"534\":1,\"536\":1,\"538\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":1,\"546\":1,\"547\":7,\"548\":1,\"549\":1,\"550\":6,\"551\":5,\"553\":6,\"555\":1,\"557\":3,\"558\":1,\"559\":1,\"560\":1,\"565\":1,\"567\":2,\"568\":2,\"569\":3,\"570\":1,\"571\":2,\"573\":4,\"577\":1,\"580\":3,\"581\":7,\"585\":10,\"586\":1,\"587\":2,\"588\":2,\"590\":1,\"591\":2,\"592\":6,\"593\":1,\"595\":1,\"597\":1,\"605\":3,\"608\":1,\"609\":4,\"610\":2,\"617\":2,\"627\":5,\"638\":1,\"640\":1,\"642\":1,\"643\":2,\"648\":2,\"651\":1,\"653\":1,\"655\":1,\"660\":4,\"662\":6,\"668\":7,\"669\":1,\"670\":1,\"676\":3,\"678\":1,\"680\":2,\"682\":1,\"686\":2,\"689\":16,\"697\":1,\"700\":1,\"701\":1,\"709\":4,\"761\":1,\"770\":1,\"782\":1,\"832\":6,\"849\":1,\"869\":1,\"877\":1,\"878\":2}}],[\"携带用户名和密码\",{\"1\":{\"30\":1}}],[\"比线程更轻\",{\"1\":{\"694\":1}}],[\"比线性查找快得多\",{\"1\":{\"605\":1}}],[\"比\",{\"1\":{\"273\":1,\"312\":1,\"499\":6}}],[\"比较多个文件\",{\"1\":{\"822\":1}}],[\"比较文件差异\",{\"0\":{\"822\":1}}],[\"比较第\",{\"1\":{\"662\":1}}],[\"比较它们的大小\",{\"1\":{\"565\":1}}],[\"比较\",{\"1\":{\"499\":1}}],[\"比较难\",{\"0\":{\"328\":1}}],[\"比较繁琐\",{\"1\":{\"321\":1}}],[\"比较重要的字段有\",{\"1\":{\"264\":1}}],[\"比较操作符\",{\"0\":{\"130\":1}}],[\"比较运算符也可以是多行运算符\",{\"1\":{\"128\":1}}],[\"比如没有实现信号量的\",{\"1\":{\"707\":1}}],[\"比如尝试使用整数通道发送一个指针\",{\"1\":{\"699\":1}}],[\"比如它需要进行非常密集的运算\",{\"1\":{\"694\":1}}],[\"比如等待\",{\"1\":{\"694\":1}}],[\"比如字节或字符串切片\",{\"1\":{\"662\":1}}],[\"比如解析诸如\",{\"1\":{\"662\":1}}],[\"比如接口\",{\"1\":{\"662\":1}}],[\"比如结构体\",{\"1\":{\"662\":1}}],[\"比如写到日志文件中\",{\"1\":{\"661\":1}}],[\"比如当内存资源不足时调用\",{\"1\":{\"661\":1}}],[\"比如下面这个协程中的匿名函数\",{\"1\":{\"705\":1}}],[\"比如下面这样\",{\"1\":{\"306\":1}}],[\"比如下面的例子\",{\"1\":{\"660\":1}}],[\"比如打开\",{\"1\":{\"658\":1}}],[\"比如想在\",{\"1\":{\"651\":1}}],[\"比如在前面的平方根例子中使用\",{\"1\":{\"689\":1}}],[\"比如在发送者看来\",{\"1\":{\"686\":1}}],[\"比如在同一个包里这么做是允许的\",{\"1\":{\"651\":1}}],[\"比如在影视作品中我们经常能看到特工在查询机密文件时\",{\"1\":{\"62\":1}}],[\"比如定义是包范围的\",{\"1\":{\"640\":1}}],[\"比如著名的\",{\"1\":{\"635\":1}}],[\"比如这里的\",{\"1\":{\"518\":1}}],[\"比如使用\",{\"1\":{\"513\":1,\"612\":1}}],[\"比如希腊文\",{\"1\":{\"506\":1}}],[\"比如说著名的快速排序算法\",{\"1\":{\"570\":1}}],[\"比如说它就无法解析\",{\"1\":{\"502\":1}}],[\"比如说你可以在运行\",{\"1\":{\"475\":1}}],[\"比如对于变量的默认初始化\",{\"1\":{\"467\":1}}],[\"比如虾p面试官\",{\"1\":{\"438\":1}}],[\"比如gomaxprocs\",{\"1\":{\"411\":1}}],[\"比如不断地增删\",{\"1\":{\"373\":1}}],[\"比如redis实现中负载因子大于1时就会触发rehash\",{\"1\":{\"368\":1}}],[\"比如整数\",{\"1\":{\"358\":1,\"660\":1}}],[\"比如某个函数返回三个参数\",{\"1\":{\"340\":1}}],[\"比如一个空结构体\",{\"1\":{\"337\":1}}],[\"比如访问一个\",{\"1\":{\"335\":1}}],[\"比如每次获取\",{\"1\":{\"256\":1}}],[\"比如数据表索引发生变化了\",{\"1\":{\"164\":1,\"200\":1}}],[\"比如复杂的连接\",{\"1\":{\"103\":1}}],[\"比如我们设想\",{\"1\":{\"72\":1}}],[\"比如无法简单地对一组文件设置统一的权限并开放给指定的一群用户\",{\"1\":{\"61\":1}}],[\"比如订单数据或图片文件\",{\"1\":{\"60\":1}}],[\"比如\",{\"1\":{\"37\":1,\"382\":1,\"467\":1,\"563\":3,\"564\":1,\"605\":1,\"639\":1,\"640\":1,\"645\":1,\"651\":2,\"658\":2,\"659\":1,\"660\":3,\"662\":2,\"676\":2,\"681\":1,\"686\":1,\"688\":2,\"689\":1,\"694\":2,\"698\":1,\"699\":1,\"709\":1}}],[\"比如用户角色\",{\"1\":{\"28\":1}}],[\"比存储在服务端的\",{\"1\":{\"29\":1}}],[\"只接收的通道\",{\"1\":{\"709\":1}}],[\"只关注长度\",{\"1\":{\"707\":1}}],[\"只在不确定的情况下使用缓冲\",{\"1\":{\"703\":1}}],[\"只在提交操作时检查是否违反数据完整性\",{\"1\":{\"230\":1}}],[\"只输出了一个数字\",{\"1\":{\"701\":1}}],[\"只写\",{\"1\":{\"680\":1}}],[\"只读属性\",{\"0\":{\"770\":1}}],[\"只读\",{\"1\":{\"680\":1}}],[\"只返回最顶部元素\",{\"1\":{\"676\":1}}],[\"只返回必要的行\",{\"1\":{\"265\":1}}],[\"只返回必要的列\",{\"1\":{\"265\":1}}],[\"只定义在指针上\",{\"1\":{\"662\":1}}],[\"只知道\",{\"1\":{\"662\":1}}],[\"只包含一个可导出函数\",{\"1\":{\"689\":1}}],[\"只包含一个方法的\",{\"1\":{\"662\":1}}],[\"只包含内建类型的\",{\"1\":{\"605\":1}}],[\"只执行它的\",{\"1\":{\"627\":1}}],[\"只到包的目录一层\",{\"1\":{\"627\":1}}],[\"只会带来轻微的性能下降\",{\"1\":{\"696\":1}}],[\"只会退出最内层的循环\",{\"1\":{\"558\":1}}],[\"只会增长一次\",{\"1\":{\"513\":1}}],[\"只可能执行其中一个\",{\"1\":{\"549\":1}}],[\"只占用\",{\"1\":{\"547\":1}}],[\"只不过现在是以\",{\"1\":{\"692\":1}}],[\"只不过没有显式地为这些导出方法额外定一个接口而已\",{\"1\":{\"662\":1}}],[\"只不过它们是在运行时进行推断\",{\"1\":{\"515\":1}}],[\"只不过使用索引指向了实际数据\",{\"1\":{\"294\":1}}],[\"只描述类型的行为的\",{\"1\":{\"509\":1}}],[\"只对\",{\"1\":{\"462\":1}}],[\"只用生成一次\",{\"1\":{\"390\":1}}],[\"只维护了一个\",{\"1\":{\"383\":1}}],[\"只维护一个row\",{\"1\":{\"303\":1}}],[\"只复制指向的对象的指针\",{\"1\":{\"346\":1}}],[\"只需要实现三个方法\",{\"1\":{\"662\":1}}],[\"只需要实现接口定义的函数\",{\"1\":{\"392\":1}}],[\"只需要将源码拷贝到相应平台上进行编译即可\",{\"1\":{\"481\":1}}],[\"只需几千个字节的额外内存\",{\"1\":{\"320\":1}}],[\"只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点\",{\"1\":{\"215\":1}}],[\"只要他们拥有同样的元素类型\",{\"1\":{\"703\":1}}],[\"只要其实现了某种接口\",{\"1\":{\"686\":1}}],[\"只要其实现了\",{\"1\":{\"682\":1}}],[\"只要底层类型实现了必要的方法\",{\"1\":{\"667\":1}}],[\"只要类型实现了读写接口\",{\"1\":{\"662\":1}}],[\"只要类型实现了接口中的方法\",{\"1\":{\"662\":1}}],[\"只要嵌入这两个类型就可以解决这个问题\",{\"1\":{\"657\":1}}],[\"只要内存足够大\",{\"1\":{\"626\":1}}],[\"只要该返回的切片不被释放\",{\"1\":{\"602\":1}}],[\"只要将第二个参数扩展成一个列表即可\",{\"1\":{\"593\":1}}],[\"只要\",{\"1\":{\"585\":1,\"667\":1}}],[\"只要它们拥有不同的形参\",{\"1\":{\"561\":1}}],[\"只要这个被调用函数的返回值个数\",{\"1\":{\"561\":1}}],[\"只要记住下面这点就可以了\",{\"1\":{\"381\":1}}],[\"只要配套的\",{\"1\":{\"316\":1}}],[\"只要符合规格就可以\",{\"1\":{\"316\":1}}],[\"只要是进行切分\",{\"1\":{\"255\":1}}],[\"只访问索引可以不使用系统调用\",{\"1\":{\"224\":1}}],[\"只有使用私人密钥才能解密这些信息\",{\"1\":{\"860\":1}}],[\"只有发送者需要关闭通道\",{\"1\":{\"709\":1}}],[\"只有一个独立的核心或处理器被专门用于\",{\"1\":{\"695\":1}}],[\"只有同时匹配名称和可兼容类型的字段才会被解码\",{\"1\":{\"686\":1}}],[\"只有可导出的字段会被编码\",{\"1\":{\"686\":1}}],[\"只有验证通过的数据结构才能被编码\",{\"1\":{\"682\":1}}],[\"只有字段的类型是必须的\",{\"1\":{\"647\":1}}],[\"只有字段是文本值时才使用\",{\"1\":{\"133\":1}}],[\"只有包\",{\"1\":{\"645\":1}}],[\"只有索引\",{\"1\":{\"581\":1}}],[\"只有有效的索引可以被使用\",{\"1\":{\"580\":1}}],[\"只有相应的形参类型\",{\"1\":{\"562\":1}}],[\"只有当id令牌具有单一受众价值且受众不同于被授权方时\",{\"1\":{\"869\":1}}],[\"只有当\",{\"1\":{\"551\":1}}],[\"只有当两边的值都为\",{\"1\":{\"521\":2}}],[\"只有当某个函数需要被外部包调用的时候才使用大写字母开头\",{\"1\":{\"507\":1}}],[\"只有两个类型相同的值才可以进行比较\",{\"1\":{\"521\":1}}],[\"只有两个类型相同的值才可以和二元运算符结合\",{\"1\":{\"520\":1}}],[\"只有引用\",{\"1\":{\"516\":1}}],[\"只有\",{\"1\":{\"423\":1,\"515\":1,\"689\":1}}],[\"只有1个bucket\",{\"1\":{\"372\":1}}],[\"只有在生成方和验证方都知道秘密的情况下\",{\"1\":{\"860\":1}}],[\"只有在当需要告诉接收者不会再提供新的值的时候\",{\"1\":{\"709\":1}}],[\"只有在没有任何切片指向的时候\",{\"1\":{\"602\":1}}],[\"只有在它的第一个列被\",{\"1\":{\"279\":1}}],[\"只有在最适合的场景中才能发挥它们的最大长处\",{\"1\":{\"242\":1}}],[\"只有在查询条件中使用了创建索引时的第一个字段\",{\"1\":{\"212\":1}}],[\"只有没有写锁时\",{\"1\":{\"231\":1}}],[\"只有遇到了\",{\"1\":{\"166\":1,\"202\":1}}],[\"只有少数\",{\"1\":{\"164\":1,\"200\":1}}],[\"只有操作\",{\"1\":{\"151\":1,\"187\":1}}],[\"只能后退\",{\"1\":{\"819\":2}}],[\"只能在\",{\"1\":{\"689\":2}}],[\"只能在编译单个包的时候出现\",{\"1\":{\"449\":1}}],[\"只能对应一个\",{\"1\":{\"607\":1}}],[\"只能用于数组\",{\"1\":{\"569\":1}}],[\"只能被用于\",{\"1\":{\"558\":1}}],[\"只能存储一组相同类型的数据结构\",{\"1\":{\"353\":1}}],[\"只能包含一个\",{\"1\":{\"144\":1,\"177\":1}}],[\"只能读取yml\",{\"0\":{\"16\":1}}],[\"只是把所有可变方法去掉了\",{\"1\":{\"770\":1}}],[\"只是输出一个数据流\",{\"1\":{\"682\":1}}],[\"只是这次通过方法\",{\"1\":{\"657\":1}}],[\"只是\",{\"1\":{\"591\":1}}],[\"只是有一些特点\",{\"1\":{\"578\":1}}],[\"只是多引入了一个本地变量\",{\"1\":{\"563\":1}}],[\"只是退出当前的循环体\",{\"1\":{\"556\":1}}],[\"只是nil的map不允许往里面添加值\",{\"1\":{\"362\":1}}],[\"只是list里的元素不能重复\",{\"1\":{\"337\":1}}],[\"只是统计行数\",{\"1\":{\"303\":1}}],[\"只是实现方式\",{\"1\":{\"259\":1}}],[\"只是连接的表是自身而已\",{\"1\":{\"138\":1,\"172\":1}}],[\"只是我们的\",{\"1\":{\"72\":1}}],[\"只使用实际表的一部分数据\",{\"1\":{\"103\":1}}],[\"只存储\",{\"1\":{\"215\":1}}],[\"只存储账号相关信息\",{\"1\":{\"72\":1}}],[\"只存储用户基本信息\",{\"1\":{\"72\":1}}],[\"只存在一台服务器上\",{\"1\":{\"29\":1}}],[\"只显示当前版本后的记录操作\",{\"1\":{\"818\":1}}],[\"只显示\",{\"1\":{\"42\":1}}],[\"存放在当前目录下一个名为\",{\"1\":{\"627\":1}}],[\"存放源文件编译后的库文件\",{\"1\":{\"446\":1}}],[\"存放源文件\",{\"1\":{\"446\":1}}],[\"存放等待运行的\",{\"1\":{\"409\":1}}],[\"存取效率低\",{\"1\":{\"368\":1}}],[\"存入当前bucket时会将哈希值的高位存储在该数组中\",{\"1\":{\"365\":1}}],[\"存在两种并发方式\",{\"1\":{\"694\":1}}],[\"存在于\",{\"1\":{\"608\":1}}],[\"存在的一个问题是它无法支持所有的\",{\"1\":{\"502\":1}}],[\"存在\",{\"1\":{\"331\":1,\"605\":1}}],[\"存在伪造跨站请求伪造攻击的风险\",{\"1\":{\"29\":1}}],[\"存储到接口值中\",{\"1\":{\"684\":1}}],[\"存储最后输入的值在函数的全局变量\",{\"1\":{\"627\":1}}],[\"存储了\",{\"1\":{\"547\":1}}],[\"存储的是\",{\"1\":{\"516\":1}}],[\"存储集群或类似用途的巨型中央服务器的系统编程语言\",{\"1\":{\"476\":1}}],[\"存储映射关系的数据库也可能成为性能瓶颈\",{\"1\":{\"249\":1}}],[\"存储引擎中\",{\"1\":{\"303\":1}}],[\"存储引擎\",{\"0\":{\"293\":1},\"1\":{\"294\":1,\"303\":1}}],[\"存储引擎的一种锁实现\",{\"1\":{\"235\":1}}],[\"存储引擎实现隔离级别的一种具体方式\",{\"1\":{\"234\":1}}],[\"存储过程会变得难以维护\",{\"1\":{\"164\":1,\"200\":1}}],[\"存储过程不能跨数据库移植\",{\"1\":{\"164\":1,\"200\":1}}],[\"存储过程的优缺点都非常突出\",{\"1\":{\"164\":1,\"200\":1}}],[\"存储过程的优点\",{\"1\":{\"164\":1,\"200\":1}}],[\"存储过程的缺点\",{\"1\":{\"164\":1,\"200\":1}}],[\"存储过程的利弊\",{\"0\":{\"164\":1,\"200\":1}}],[\"存储过程的出参\",{\"1\":{\"163\":1,\"199\":1}}],[\"存储过程的入参\",{\"1\":{\"163\":1,\"199\":1}}],[\"存储过程的\",{\"1\":{\"163\":1,\"199\":1}}],[\"存储过程的英文是\",{\"1\":{\"162\":1,\"198\":1}}],[\"存储过程定义语句类型\",{\"1\":{\"162\":1,\"198\":1}}],[\"存储过程名称\",{\"1\":{\"162\":1,\"198\":1}}],[\"存储过程\",{\"0\":{\"162\":1,\"198\":1},\"1\":{\"251\":1}}],[\"存储在常量中的数据类型只可以是布尔型\",{\"1\":{\"513\":1}}],[\"存储在堆上还是栈上由内部实现决定而和具体的语法没有关系\",{\"1\":{\"442\":1}}],[\"存储在索引中\",{\"1\":{\"217\":1}}],[\"存储在\",{\"1\":{\"29\":1}}],[\"存储在客户端的\",{\"1\":{\"29\":1}}],[\"存储在客户端\",{\"1\":{\"29\":1}}],[\"存储在服务端占用服务器资源\",{\"1\":{\"29\":1}}],[\"存储和搜索矢量嵌入\",{\"1\":{\"6\":1}}],[\"存储和分析日志\",{\"1\":{\"6\":1}}],[\"中描述的\",{\"1\":{\"866\":1}}],[\"中描述接口的底层结构体\",{\"1\":{\"383\":1}}],[\"中句号之后的字符串\",{\"1\":{\"856\":1}}],[\"中包含的数据未被篡改\",{\"1\":{\"857\":1}}],[\"中包含的数据\",{\"1\":{\"852\":1}}],[\"中包含的权利要求是关于该方的声明\",{\"1\":{\"852\":1}}],[\"中需要某些特定于用户的元数据\",{\"1\":{\"850\":1}}],[\"中放置一个值来处理结束的信号\",{\"1\":{\"705\":1}}],[\"中某刻同步交换数据\",{\"1\":{\"702\":1}}],[\"中缀\",{\"1\":{\"700\":1}}],[\"中等待\",{\"1\":{\"697\":1}}],[\"中打开\",{\"1\":{\"692\":1}}],[\"中引入\",{\"1\":{\"692\":1}}],[\"中有一些工具用来在低级别的代码中实现加锁\",{\"1\":{\"694\":1}}],[\"中有一篇很好的文章用具体的例子进行了分析\",{\"1\":{\"692\":1}}],[\"中有一个概念\",{\"1\":{\"651\":1}}],[\"中有具体的应用\",{\"1\":{\"689\":1}}],[\"中用协程实现起来非常容易\",{\"1\":{\"706\":1}}],[\"中用\",{\"1\":{\"689\":1}}],[\"中用到了\",{\"1\":{\"683\":1}}],[\"中调用这个函数并\",{\"1\":{\"689\":1}}],[\"中调用它\",{\"1\":{\"661\":1}}],[\"中也必须用\",{\"1\":{\"689\":1}}],[\"中也是不允许的\",{\"1\":{\"527\":1}}],[\"中抛出的运行时\",{\"1\":{\"689\":1}}],[\"中止程序\",{\"1\":{\"689\":1}}],[\"中阐明了它的工作方式\",{\"1\":{\"689\":1}}],[\"中你写了一个叫\",{\"1\":{\"689\":1}}],[\"中你可以看到一个简单的用例\",{\"1\":{\"688\":1}}],[\"中你会看到一个编解码\",{\"1\":{\"686\":1}}],[\"中检验\",{\"1\":{\"686\":1}}],[\"中传递过来\",{\"1\":{\"686\":1}}],[\"中传入一个闭包执行\",{\"1\":{\"676\":1}}],[\"中看到\",{\"1\":{\"686\":1}}],[\"中编码和解码数据\",{\"1\":{\"686\":1}}],[\"中对应的方法\",{\"1\":{\"687\":1}}],[\"中对\",{\"1\":{\"683\":1}}],[\"中一个简化版本的\",{\"1\":{\"682\":1}}],[\"中处理\",{\"1\":{\"682\":1}}],[\"中它们是怎样表现的呢\",{\"1\":{\"676\":1}}],[\"中得以阐明\",{\"1\":{\"671\":1}}],[\"中开发的\",{\"1\":{\"664\":1,\"677\":1}}],[\"中联合\",{\"1\":{\"663\":1}}],[\"中测试一下\",{\"1\":{\"662\":1}}],[\"中将看到在开发中为类型添加新的接口是多么的容易\",{\"1\":{\"662\":1}}],[\"中生成默认的输出\",{\"1\":{\"660\":1}}],[\"中同样的问题\",{\"1\":{\"659\":1}}],[\"中同样的事情\",{\"1\":{\"657\":1,\"662\":1}}],[\"中可以包含任何类型的值\",{\"1\":{\"662\":1}}],[\"中可以直接在基本类型\",{\"1\":{\"659\":1}}],[\"中可以如下定义\",{\"1\":{\"659\":1}}],[\"中可以如下定义二叉树\",{\"1\":{\"640\":1}}],[\"中添加\",{\"1\":{\"655\":1}}],[\"中进一步学习\",{\"1\":{\"655\":1}}],[\"中接收者类型是\",{\"1\":{\"653\":1}}],[\"中改变接收者\",{\"1\":{\"653\":1}}],[\"中并没有这两个关键字\",{\"1\":{\"651\":1}}],[\"中并不常用\",{\"1\":{\"583\":1}}],[\"中呢\",{\"1\":{\"640\":1}}],[\"中必须是唯一的\",{\"1\":{\"640\":1}}],[\"中结构体有着更为重要的地位\",{\"1\":{\"639\":1}}],[\"中设置\",{\"1\":{\"632\":1}}],[\"中实现\",{\"1\":{\"631\":1,\"642\":1}}],[\"中实体类型可能会无意中实现\",{\"1\":{\"392\":1}}],[\"中自动包安装工具\",{\"1\":{\"629\":1}}],[\"中这个包通过声明的方式被导入\",{\"1\":{\"627\":1}}],[\"中删除\",{\"1\":{\"608\":1}}],[\"中删除一个\",{\"0\":{\"360\":1}}],[\"中没有\",{\"1\":{\"605\":1}}],[\"中寻找值是很快的\",{\"1\":{\"605\":1}}],[\"中从索引\",{\"1\":{\"601\":1}}],[\"中变量\",{\"1\":{\"574\":1}}],[\"中我们开发了一些栈结构类型\",{\"1\":{\"676\":1}}],[\"中我们定义了一个\",{\"1\":{\"676\":1}}],[\"中我们遇到了诸如列表和树这样的数据结构\",{\"1\":{\"666\":1}}],[\"中我们看到了能被搜索和排序的\",{\"1\":{\"664\":1}}],[\"中我们看到\",{\"1\":{\"662\":1}}],[\"中我们将会看到函数\",{\"1\":{\"574\":1}}],[\"中我们有一个变量或函数叫做\",{\"1\":{\"506\":1}}],[\"中第一个空白字符的索引值\",{\"1\":{\"572\":1}}],[\"中第一个使函数\",{\"1\":{\"572\":1}}],[\"中出现\",{\"1\":{\"559\":1}}],[\"中出现的非重叠次数\",{\"1\":{\"538\":1}}],[\"中反转数组的示例\",{\"1\":{\"553\":1}}],[\"中演示了最简单的基于计数器的迭代\",{\"1\":{\"553\":1}}],[\"中减少了很多视觉混乱的因素\",{\"1\":{\"548\":1}}],[\"中读取内容\",{\"1\":{\"544\":1}}],[\"中定义\",{\"1\":{\"892\":1}}],[\"中定义的http\",{\"1\":{\"873\":1}}],[\"中定义的其他响应类型值\",{\"1\":{\"869\":1}}],[\"中定义的那样\",{\"1\":{\"869\":1}}],[\"中定义为\",{\"1\":{\"536\":1}}],[\"中定义了\",{\"1\":{\"166\":1,\"202\":1}}],[\"中最后出现位置的索引\",{\"1\":{\"536\":1}}],[\"中讲到的\",{\"1\":{\"532\":1}}],[\"中拥有以下逻辑运算符\",{\"1\":{\"526\":1}}],[\"中导入了包\",{\"1\":{\"519\":1}}],[\"中都是经过初始化的\",{\"1\":{\"515\":1}}],[\"中那样需要使用\",{\"1\":{\"640\":1}}],[\"中那样\",{\"1\":{\"640\":1,\"662\":1}}],[\"中那样使用混合着大小写和下划线的冗长的名称会严重降低代码的可读性\",{\"1\":{\"512\":1}}],[\"中那些本打算解决却未能解决的关键问题\",{\"1\":{\"467\":1}}],[\"中是合法的\",{\"1\":{\"653\":1}}],[\"中是否存在\",{\"1\":{\"608\":1}}],[\"中是指向首元素的指针\",{\"1\":{\"580\":1}}],[\"中是\",{\"1\":{\"509\":3}}],[\"中是不存在的\",{\"1\":{\"392\":1}}],[\"中写入\",{\"1\":{\"507\":1}}],[\"中提到的\",{\"1\":{\"567\":1}}],[\"中提取传递依赖类型的信息\",{\"1\":{\"506\":1}}],[\"中提供了两种封锁粒度\",{\"1\":{\"231\":1}}],[\"中括号\",{\"1\":{\"504\":1}}],[\"中函数的参数时\",{\"1\":{\"501\":1}}],[\"中被修复或者说改进\",{\"1\":{\"549\":1}}],[\"中被抛弃\",{\"1\":{\"518\":1}}],[\"中被广泛使用的\",{\"1\":{\"499\":1}}],[\"中被清理掉\",{\"1\":{\"429\":1}}],[\"中找到相关内容\",{\"1\":{\"487\":1}}],[\"中找到\",{\"1\":{\"481\":1}}],[\"中执行\",{\"1\":{\"476\":1,\"676\":1,\"682\":1}}],[\"中查看到\",{\"1\":{\"474\":1}}],[\"中兼容使用\",{\"1\":{\"467\":1}}],[\"中高级才会问\",{\"1\":{\"430\":1}}],[\"中高级肯定会问\",{\"0\":{\"328\":1}}],[\"中主协程如何等待其余协程退出\",{\"0\":{\"423\":1}}],[\"中摘除\",{\"1\":{\"409\":1}}],[\"中数据的一方必须在\",{\"1\":{\"852\":1}}],[\"中数据和方法被封装为类的概念\",{\"1\":{\"671\":1}}],[\"中数据写入缓冲区尾部\",{\"1\":{\"405\":1}}],[\"中数据读出\",{\"1\":{\"405\":1}}],[\"中取出\",{\"1\":{\"405\":1}}],[\"中所述\",{\"1\":{\"866\":1,\"883\":1}}],[\"中所有类的基类\",{\"1\":{\"663\":1}}],[\"中所有类型都实现了空接口\",{\"1\":{\"389\":1}}],[\"中所进行所有的操作\",{\"1\":{\"236\":1}}],[\"中存储的所有元素都是\",{\"1\":{\"664\":1}}],[\"中存储指针\",{\"1\":{\"439\":1}}],[\"中存储值也哈希值相等\",{\"1\":{\"374\":1}}],[\"中存在以下传递依赖\",{\"1\":{\"292\":1}}],[\"中其他的\",{\"1\":{\"330\":1}}],[\"中解析的\",{\"1\":{\"328\":1}}],[\"中解析\",{\"0\":{\"328\":1},\"1\":{\"662\":1}}],[\"中文版本\",{\"1\":{\"469\":1}}],[\"中文名为\",{\"1\":{\"447\":1}}],[\"中文字符在unicode下占2个字节\",{\"1\":{\"327\":1}}],[\"中文全称是基于角色的访问控制\",{\"1\":{\"64\":1}}],[\"中插入\",{\"1\":{\"235\":1}}],[\"中不存在\",{\"1\":{\"608\":1}}],[\"中不允许不同类型之间的混合使用\",{\"1\":{\"523\":1}}],[\"中不同节点存放的\",{\"1\":{\"215\":1}}],[\"中不能使用systemctl\",{\"1\":{\"51\":1}}],[\"中叶节点和内节点一般大小不同\",{\"1\":{\"215\":1}}],[\"中的一个标准说法是sub\",{\"1\":{\"845\":1}}],[\"中的一些所谓\",{\"1\":{\"467\":1}}],[\"中的元素\",{\"1\":{\"708\":1}}],[\"中的双向管道\",{\"1\":{\"699\":1}}],[\"中的测试\",{\"1\":{\"691\":1}}],[\"中的测试函数不会调用\",{\"1\":{\"689\":1}}],[\"中的编码模式通过整数除以\",{\"1\":{\"689\":1}}],[\"中的信息\",{\"1\":{\"689\":1}}],[\"中的接口跟\",{\"1\":{\"671\":1}}],[\"中的反射\",{\"1\":{\"670\":1}}],[\"中的练习\",{\"1\":{\"662\":1}}],[\"中的内容只是一个\",{\"1\":{\"686\":1}}],[\"中的内容\",{\"1\":{\"662\":1,\"857\":1}}],[\"中的内存泄漏一般都是\",{\"1\":{\"438\":1}}],[\"中的例子来说明覆写\",{\"1\":{\"662\":1}}],[\"中的例子\",{\"1\":{\"662\":1,\"689\":1}}],[\"中的混入\",{\"1\":{\"655\":1}}],[\"中的数据无人接收\",{\"1\":{\"701\":1}}],[\"中的数据库系统\",{\"1\":{\"237\":1}}],[\"中的数组类型\",{\"1\":{\"585\":1}}],[\"中的示例\",{\"1\":{\"573\":1}}],[\"中的代码\",{\"1\":{\"550\":1}}],[\"中的代码就可以使用包含以下内容的\",{\"1\":{\"501\":1}}],[\"中的引用类型\",{\"1\":{\"640\":1}}],[\"中的引用\",{\"1\":{\"547\":1}}],[\"中的前\",{\"1\":{\"537\":1}}],[\"中的索引\",{\"1\":{\"536\":1}}],[\"中的字符串是根据长度限定\",{\"1\":{\"532\":1}}],[\"中的字符串里面的字符也可能根据需要占用\",{\"1\":{\"532\":1}}],[\"中的写法在\",{\"1\":{\"527\":1}}],[\"中的相关函数\",{\"1\":{\"507\":1}}],[\"中的包模型采用了显式依赖关系的机制来达到快速编译的目的\",{\"1\":{\"506\":1}}],[\"中的无符号\",{\"1\":{\"501\":1}}],[\"中的类型转换遵循严格的规则\",{\"1\":{\"640\":1}}],[\"中的类型\",{\"1\":{\"501\":1}}],[\"中的函数\",{\"1\":{\"501\":1,\"575\":1}}],[\"中的注释内容\",{\"1\":{\"497\":1}}],[\"中的错误信息直接跳转到发生错误的那一行\",{\"1\":{\"495\":1}}],[\"中的许多语法风格\",{\"1\":{\"467\":1}}],[\"中的变量只要被引用就一直会存活\",{\"1\":{\"442\":1}}],[\"中的虚函数表是在编译期生成的\",{\"1\":{\"392\":1}}],[\"中的语句\",{\"1\":{\"389\":1}}],[\"中的方法更通用\",{\"1\":{\"312\":1}}],[\"中的方法比\",{\"1\":{\"312\":1}}],[\"中的\",{\"1\":{\"312\":2,\"330\":2,\"392\":2,\"498\":1,\"501\":4,\"532\":1,\"572\":1,\"585\":1,\"605\":1,\"609\":1,\"638\":2,\"654\":1,\"662\":1,\"670\":1,\"683\":1,\"689\":1}}],[\"中的位置\",{\"1\":{\"214\":1}}],[\"中的存储过程\",{\"1\":{\"205\":1}}],[\"中事务的实现\",{\"1\":{\"205\":1}}],[\"中使用多个signatures或接收方\",{\"1\":{\"849\":1}}],[\"中使用这些可以改进为版本\",{\"1\":{\"709\":1}}],[\"中使用协程开始它\",{\"1\":{\"701\":1}}],[\"中使用国际化字符\",{\"1\":{\"508\":1}}],[\"中使用下面的说明符来打印有关变量的相关信息\",{\"1\":{\"494\":1}}],[\"中使用\",{\"1\":{\"163\":1,\"199\":1,\"476\":1,\"533\":1,\"689\":1}}],[\"中连接表的列可能不同\",{\"1\":{\"145\":1,\"178\":1}}],[\"中参与查询的提取行\",{\"1\":{\"144\":1,\"177\":1}}],[\"中间件可以将它们写入日志文件\",{\"1\":{\"455\":1}}],[\"中间包含了多个语句\",{\"1\":{\"163\":1,\"199\":1}}],[\"中间数据量庞大\",{\"1\":{\"72\":1}}],[\"中间者进行修改的\",{\"1\":{\"39\":1}}],[\"中运行\",{\"1\":{\"51\":1,\"420\":1}}],[\"中\",{\"0\":{\"322\":1,\"431\":1},\"1\":{\"29\":1,\"145\":1,\"166\":1,\"178\":1,\"202\":1,\"231\":1,\"260\":1,\"298\":2,\"363\":1,\"410\":1,\"417\":1,\"429\":1,\"494\":1,\"495\":1,\"501\":1,\"506\":3,\"515\":2,\"517\":1,\"530\":1,\"550\":1,\"567\":1,\"572\":1,\"574\":1,\"608\":1,\"627\":1,\"633\":2,\"640\":1,\"651\":1,\"652\":1,\"654\":1,\"659\":3,\"663\":1,\"681\":1,\"682\":1,\"684\":1,\"689\":5,\"691\":1,\"694\":1,\"697\":1,\"704\":1,\"709\":1,\"848\":1}}],[\"而公钥只能用来验证信息的真实性\",{\"1\":{\"860\":1}}],[\"而其余数据仅用于客户端构建视图\",{\"1\":{\"854\":1}}],[\"而验证signatures所需的密钥\",{\"1\":{\"849\":1}}],[\"而静态内部类方式在singleton类被装载时并不会立即实例化\",{\"1\":{\"803\":1}}],[\"而检测通道当前是否阻塞\",{\"1\":{\"709\":1}}],[\"而并非你预想中的那样被悄悄回收掉\",{\"1\":{\"708\":1}}],[\"而用函数来生成一个通道并返回\",{\"1\":{\"707\":1}}],[\"而用户并不具有\",{\"1\":{\"62\":1}}],[\"而用户能否对该对象进行操作取决于双方权限标识的关系\",{\"1\":{\"62\":1}}],[\"而从通道读取数据也不会阻塞\",{\"1\":{\"703\":1}}],[\"而从服务器用来处理读操作\",{\"1\":{\"261\":1}}],[\"而运行时\",{\"1\":{\"700\":1}}],[\"而通过通信来共享内存\",{\"1\":{\"693\":1}}],[\"而通道是\",{\"1\":{\"320\":1}}],[\"而忽略具体的\",{\"1\":{\"686\":1}}],[\"而忽略它们的实际类型\",{\"1\":{\"671\":1}}],[\"而避免了去操作比较底层的字节\",{\"1\":{\"678\":1}}],[\"而没有\",{\"1\":{\"670\":1}}],[\"而它的方法\",{\"1\":{\"662\":1}}],[\"而你的项目将作为\",{\"1\":{\"631\":1}}],[\"而大有理数是通过\",{\"1\":{\"626\":1}}],[\"而我们要做就是将第\",{\"1\":{\"577\":1}}],[\"而此时\",{\"1\":{\"559\":1}}],[\"而汉字\",{\"1\":{\"557\":1}}],[\"而如果你想要做的是系统编程\",{\"1\":{\"547\":1}}],[\"而使用公钥方案\",{\"1\":{\"860\":1}}],[\"而使用\",{\"1\":{\"531\":1,\"677\":1}}],[\"而非特殊字符\",{\"1\":{\"532\":1}}],[\"而非表达式\",{\"1\":{\"527\":1}}],[\"而非\",{\"1\":{\"521\":1,\"553\":1,\"588\":1}}],[\"而二元运算符则可以和两个值或者操作数结合\",{\"1\":{\"520\":1}}],[\"而这个时候再在\",{\"1\":{\"518\":1}}],[\"而这些路径下又必须分别包含三个规定的目录\",{\"1\":{\"482\":1}}],[\"而这些指令会自动调用相关的编译器或链接器\",{\"1\":{\"481\":1}}],[\"而这些版本都使用了不同的概念和技巧\",{\"1\":{\"467\":1}}],[\"而后者还会在字符串的最后加上一个换行符\",{\"1\":{\"517\":1}}],[\"而后两个方向一般是\",{\"1\":{\"262\":1}}],[\"而内部同名变量则被释放\",{\"1\":{\"515\":1}}],[\"而作为一门新生语言的\",{\"1\":{\"499\":1}}],[\"而作为临时解决方案创建的角色有时管理员可能会忘记或甚至故意选择保留这些角色\",{\"1\":{\"75\":1}}],[\"而开始将\",{\"1\":{\"499\":1}}],[\"而像谷歌这样拥有成千上万台服务器的公司都抛弃\",{\"1\":{\"499\":1}}],[\"而当发生编译时错误时\",{\"1\":{\"495\":1}}],[\"而言\",{\"1\":{\"491\":1}}],[\"而言更加传统的编译器\",{\"1\":{\"481\":1}}],[\"而只是占用以\",{\"1\":{\"587\":1}}],[\"而只需要安装它的命令行工具部分\",{\"1\":{\"484\":1}}],[\"而只有\",{\"1\":{\"51\":1}}],[\"而应该使用下划线\",{\"1\":{\"481\":1}}],[\"而应该通过map\",{\"1\":{\"362\":1}}],[\"而同样作为静态语言的\",{\"1\":{\"473\":1}}],[\"而堆分配内存首先需要去找到一块大小合适的内存块\",{\"1\":{\"445\":1}}],[\"而垃圾回收会占用比较大的系统开销\",{\"1\":{\"445\":1}}],[\"而程序员可以去享受生活\",{\"1\":{\"445\":1}}],[\"而又来不及\",{\"1\":{\"438\":1}}],[\"而有缓存channel适用于无数据同步的场景\",{\"1\":{\"406\":1}}],[\"而有缓冲的channel是非同步的\",{\"1\":{\"400\":1}}],[\"而对于接口转接口\",{\"1\":{\"390\":1}}],[\"而接口值包括动态类型和动态值\",{\"1\":{\"384\":1}}],[\"而实现了接收者是指针类型的方法\",{\"1\":{\"381\":1}}],[\"而实际上在使用中值的类型是不固定的\",{\"1\":{\"365\":1}}],[\"而键值对正好集中在一小部分的bucket\",{\"1\":{\"373\":1}}],[\"而buckets指向了新申请的bucket\",{\"1\":{\"372\":1}}],[\"而hmap\",{\"1\":{\"364\":1}}],[\"而函数外的\",{\"1\":{\"354\":1}}],[\"而rune用来表示unicode的code\",{\"1\":{\"333\":1}}],[\"而进行系统调用的\",{\"1\":{\"330\":1}}],[\"而不会在用户被重定向到上次访问的页面时对后台造成影响\",{\"1\":{\"854\":1}}],[\"而不会因为使用了两次就增长两次\",{\"1\":{\"513\":1}}],[\"而不需要了解文件的内容\",{\"1\":{\"686\":1}}],[\"而不需要创建新的\",{\"1\":{\"330\":1}}],[\"而不清楚数据的用意\",{\"1\":{\"682\":1}}],[\"而不用废弃之前的决定\",{\"1\":{\"673\":1}}],[\"而不用显式地声明\",{\"1\":{\"671\":1}}],[\"而不用依次使用\",{\"1\":{\"581\":1}}],[\"而不可以用于全局变量的声明与赋值\",{\"1\":{\"518\":1}}],[\"而不必拥挤在一起\",{\"1\":{\"508\":1}}],[\"而不必浪费大量的时间在等待程序的构建上\",{\"1\":{\"473\":1}}],[\"而不替换成空格\",{\"1\":{\"496\":1}}],[\"而不做具体实现\",{\"1\":{\"392\":1}}],[\"而不使用包中其他功能\",{\"1\":{\"340\":1}}],[\"而不是检查令牌签名\",{\"1\":{\"887\":1}}],[\"而不是普通的错误\",{\"1\":{\"687\":1}}],[\"而不是像\",{\"1\":{\"682\":1,\"686\":1}}],[\"而不是说要排序的对象一定要是一组\",{\"1\":{\"662\":1}}],[\"而不是无理数或\",{\"1\":{\"626\":1}}],[\"而不是数组或切片\",{\"1\":{\"577\":1}}],[\"而不是数字\",{\"1\":{\"333\":1}}],[\"而不是单纯地返回某个值\",{\"1\":{\"568\":1}}],[\"而不是对参数的副本进行操作\",{\"1\":{\"563\":1}}],[\"而不是相应的数字\",{\"1\":{\"554\":1}}],[\"而不是使用下划线来分割多个名称\",{\"1\":{\"512\":1}}],[\"而不是可执行程序\",{\"1\":{\"506\":1}}],[\"而不是在艰难抉择中痛苦前行\",{\"1\":{\"473\":1}}],[\"而不是销毁线程\",{\"1\":{\"411\":1}}],[\"而不是一阻塞就导致全部停止\",{\"1\":{\"410\":1}}],[\"而不是引用\",{\"1\":{\"346\":1}}],[\"而不是\",{\"1\":{\"137\":1,\"170\":1,\"215\":1,\"481\":1,\"506\":1,\"649\":1,\"658\":1,\"689\":1}}],[\"而不是签名\",{\"1\":{\"39\":1}}],[\"而go的bucket可能存8个键值对\",{\"1\":{\"368\":1}}],[\"而go则在在负载因子达到6\",{\"1\":{\"368\":1}}],[\"而golang默认编码正好是utf\",{\"1\":{\"327\":1}}],[\"而go有内置的并发机制\",{\"1\":{\"317\":1}}],[\"而go是一种静态类型语言\",{\"1\":{\"317\":1}}],[\"而go没有\",{\"1\":{\"311\":1}}],[\"而java的继承通过extends关键字完成\",{\"1\":{\"311\":1}}],[\"而java并不总是具有足够的可扩展性\",{\"1\":{\"311\":1}}],[\"而java使用akka\",{\"1\":{\"311\":1}}],[\"而java允许函数重载\",{\"1\":{\"311\":1}}],[\"而一个包在程序执行中只能初始化一次\",{\"1\":{\"627\":1}}],[\"而一个健康的单库最好保持在每秒\",{\"1\":{\"246\":1}}],[\"而一致性则由表级锁来保证\",{\"1\":{\"303\":1}}],[\"而在接收者这边可以用一个结构体\",{\"1\":{\"686\":1}}],[\"而在写文件时\",{\"1\":{\"680\":1}}],[\"而在第\",{\"1\":{\"532\":1}}],[\"而在这些结构中声明的变量的作用域只在相应的代码块内\",{\"1\":{\"515\":1}}],[\"而在本身的例子当中\",{\"1\":{\"496\":1}}],[\"而在\",{\"1\":{\"298\":1,\"515\":1}}],[\"而分解后的多个查询\",{\"1\":{\"268\":1}}],[\"而最终一致性\",{\"1\":{\"242\":1}}],[\"而读操作去读旧版本快照\",{\"1\":{\"234\":1}}],[\"而未提交读隔离级别总是读取最新的数据行\",{\"1\":{\"234\":1}}],[\"而数据依赖于操作系统来缓存\",{\"1\":{\"224\":1}}],[\"而是在需要实例化时\",{\"1\":{\"803\":1}}],[\"而是在协程退出后自动释放\",{\"1\":{\"694\":1}}],[\"而是在编码和解码过程中用到了\",{\"1\":{\"686\":1}}],[\"而是在每个包完成初始化后自动执行\",{\"1\":{\"519\":1}}],[\"而是直接忽略掉\",{\"1\":{\"683\":1}}],[\"而是直接退出外层循环了\",{\"1\":{\"559\":1}}],[\"而是写入一个\",{\"1\":{\"682\":1}}],[\"而是松耦合的类型\",{\"1\":{\"676\":1}}],[\"而是接受一个空接口参数\",{\"1\":{\"663\":1}}],[\"而是使用go的诞生时间\",{\"1\":{\"617\":2}}],[\"而是使用加密的https协议进行传输\",{\"1\":{\"31\":1}}],[\"而是和\",{\"1\":{\"471\":1}}],[\"而是建立并改善了\",{\"1\":{\"467\":1}}],[\"而是对线程的复用\",{\"1\":{\"411\":1}}],[\"而是通过通信来共享内存\",{\"1\":{\"396\":1}}],[\"而是应该基于该类型的本质\",{\"1\":{\"382\":1}}],[\"而是由它\",{\"1\":{\"378\":1}}],[\"而是以\",{\"1\":{\"363\":1}}],[\"而是返回相应类型的0值\",{\"1\":{\"374\":1}}],[\"而是返回\",{\"1\":{\"335\":1}}],[\"而是聚焦于打造一门简单的语言\",{\"1\":{\"320\":1}}],[\"而是一种数据存储方式\",{\"1\":{\"223\":1}}],[\"而是被该语句检索出来的结果集\",{\"1\":{\"168\":1,\"204\":1}}],[\"而自然连接自动连接所有同名列\",{\"1\":{\"139\":1,\"173\":1}}],[\"而包含子查询的语句也称为外部查询或外部选择\",{\"1\":{\"128\":1}}],[\"而权限\",{\"1\":{\"71\":1}}],[\"而受限继承关系则进一步要求角色继承关系是一个树结构\",{\"1\":{\"67\":1}}],[\"而且还能防止反序列化重新创建新的对象\",{\"1\":{\"803\":1}}],[\"而且自行实例化并向整个系统提供这个实例\",{\"1\":{\"801\":1}}],[\"而且使用了协程的\",{\"1\":{\"709\":1}}],[\"而且必须在写入完成后才关闭\",{\"1\":{\"708\":1}}],[\"而且从底层向更高的层级抛异常太耗费资源\",{\"1\":{\"687\":1}}],[\"而且从go语言的发展态势来看\",{\"1\":{\"320\":1}}],[\"而且是与平台无关的\",{\"1\":{\"682\":1}}],[\"而且是单协程操作\",{\"1\":{\"331\":1}}],[\"而且接口间是不相关的\",{\"1\":{\"676\":1}}],[\"而且不需要像传统的基于类的面向对象语言那样维护整个的类层次结构\",{\"1\":{\"673\":1}}],[\"而且不支持读写分离\",{\"1\":{\"251\":1}}],[\"而且它还包含一个十分有用的类型\",{\"1\":{\"590\":1}}],[\"而且您还可以将它应用到其它类型的计算中\",{\"1\":{\"577\":1}}],[\"而且赋予了函数直接修改外部变量的能力\",{\"1\":{\"566\":1}}],[\"而且代码可读性更强\",{\"1\":{\"561\":1}}],[\"而且总有更加可读的替代方案来实现相同的需求\",{\"1\":{\"559\":1}}],[\"而且即使你只使用\",{\"1\":{\"506\":1}}],[\"而且在接手外部\",{\"1\":{\"496\":1}}],[\"而且在某些方面更加通用\",{\"1\":{\"312\":1}}],[\"而且比学习\",{\"1\":{\"467\":1}}],[\"而且会形成内存碎片\",{\"1\":{\"445\":1}}],[\"而且会锁定相邻的键值\",{\"1\":{\"235\":1}}],[\"而且go的设计思想就是\",{\"1\":{\"396\":1}}],[\"而且容易出错\",{\"1\":{\"320\":1}}],[\"而且中小型公司系统复杂度会低一些\",{\"1\":{\"252\":1}}],[\"而且维护成本低\",{\"1\":{\"252\":1}}],[\"而且目前应该是非常火的而且不断流行的数据库中间件\",{\"1\":{\"251\":1}}],[\"而且目前推出到了\",{\"1\":{\"251\":1}}],[\"而且确实之前使用的公司会比较多一些\",{\"1\":{\"251\":1}}],[\"而且对可扩展性要求很高\",{\"1\":{\"164\":1,\"200\":1}}],[\"而且需要在其他语句使用之前进行变量的声明\",{\"1\":{\"163\":1,\"199\":1}}],[\"而且大部分的用户\",{\"1\":{\"73\":1}}],[\"而且每当我们新增\",{\"1\":{\"72\":1}}],[\"而且\",{\"1\":{\"63\":1,\"442\":1,\"561\":1,\"589\":1,\"694\":1}}],[\"而拥有对象权限的用户\",{\"1\":{\"61\":1}}],[\"而\",{\"1\":{\"29\":1,\"63\":1,\"136\":1,\"186\":1,\"216\":1,\"273\":1,\"317\":1,\"320\":2,\"382\":1,\"383\":1,\"392\":3,\"410\":1,\"499\":1,\"506\":1,\"515\":1,\"550\":1,\"551\":1,\"556\":1,\"580\":1,\"588\":1,\"596\":1,\"607\":1,\"609\":1,\"660\":1,\"678\":1,\"689\":1,\"698\":1,\"699\":1,\"782\":1}}],[\"以授权代码的形式\",{\"1\":{\"881\":1}}],[\"以响应由rp发送的授权请求消息\",{\"1\":{\"878\":1}}],[\"以响应上面客户端的http\",{\"1\":{\"873\":1}}],[\"以秒为单位\",{\"1\":{\"873\":1}}],[\"以防止攻击者猜测值\",{\"1\":{\"873\":1,\"892\":1}}],[\"以防止被\",{\"1\":{\"686\":1}}],[\"以考虑时钟倾斜\",{\"1\":{\"869\":1}}],[\"以确保最终用户要求的具体任务的顺利授权体验\",{\"1\":{\"868\":1}}],[\"以确保临时访问特权文件\",{\"1\":{\"75\":1}}],[\"以表明它们将被视为字面意思\",{\"1\":{\"867\":1}}],[\"以获得和使用对http资源的有限访问\",{\"1\":{\"866\":1}}],[\"以获得最佳性能\",{\"1\":{\"696\":1}}],[\"以并行的方式\",{\"1\":{\"697\":1}}],[\"以空格为间隔连接这些参数\",{\"1\":{\"681\":1}}],[\"以空格分隔的bcp47\",{\"1\":{\"873\":1}}],[\"以空格分隔\",{\"1\":{\"681\":1}}],[\"以清楚地记录这个事实\",{\"1\":{\"674\":1}}],[\"以前\",{\"1\":{\"659\":1}}],[\"以前是有一些公司在用的\",{\"1\":{\"251\":1}}],[\"以纳秒为单位\",{\"1\":{\"621\":1}}],[\"以所有子进程的\",{\"1\":{\"607\":1}}],[\"以父进程\",{\"1\":{\"607\":1}}],[\"以至于被认为拥有函数式编程语言的多种特性\",{\"1\":{\"560\":1}}],[\"以人为地提升某个表达式的运算优先级\",{\"1\":{\"520\":1}}],[\"以保证程序状态的正确性\",{\"1\":{\"519\":1}}],[\"以十六进制数表示\",{\"1\":{\"516\":1}}],[\"以一个大写字母开头\",{\"1\":{\"506\":1}}],[\"以一种通用的方式对待个使用的对象\",{\"1\":{\"391\":1}}],[\"以相对路径在\",{\"1\":{\"506\":1}}],[\"以数字开头\",{\"1\":{\"504\":1}}],[\"以避免名称冲突\",{\"1\":{\"506\":1}}],[\"以避免不必要的错误\",{\"1\":{\"483\":1}}],[\"以避免你在不了解某些高级概念的情况下而感到迷茫\",{\"1\":{\"467\":1}}],[\"以避免关联查询\",{\"1\":{\"283\":1}}],[\"以满足协议层扩展的任意需求\",{\"1\":{\"461\":1}}],[\"以\",{\"1\":{\"449\":1,\"469\":1,\"506\":1,\"578\":1,\"852\":1}}],[\"以此来展示多态行为\",{\"1\":{\"662\":1}}],[\"以此来实现高效快速的垃圾回收\",{\"1\":{\"473\":1}}],[\"以此类推\",{\"1\":{\"580\":1}}],[\"以此判断是否需要停止循环\",{\"1\":{\"558\":1}}],[\"以此记录最后一次标记终止时的堆配置文件快照\",{\"1\":{\"431\":1}}],[\"以此实现在\",{\"1\":{\"314\":1}}],[\"以外还有那些方式安全读写共享变量\",{\"0\":{\"417\":1}}],[\"以使最终用户能够得到认证\",{\"1\":{\"869\":1}}],[\"以使这些环境变量生效\",{\"1\":{\"483\":1}}],[\"以使bucket的使用率更高\",{\"1\":{\"373\":1}}],[\"以使配置生效\",{\"1\":{\"52\":1}}],[\"以方便后续匹配\",{\"1\":{\"365\":1}}],[\"以test开头\",{\"1\":{\"342\":1}}],[\"以提供类似的东西\",{\"1\":{\"312\":1}}],[\"以下id令牌声明的这些附加要求适用\",{\"1\":{\"886\":1}}],[\"以下演示并非用于生产\",{\"1\":{\"847\":1}}],[\"以下内容的\",{\"1\":{\"689\":1}}],[\"以下命令用来从源码安装本地包\",{\"1\":{\"632\":1}}],[\"以下状态总是成立的\",{\"1\":{\"585\":1}}],[\"以下是一个简单的列表\",{\"1\":{\"569\":1}}],[\"以下是无效的标识符\",{\"1\":{\"504\":1}}],[\"以下代码展示了何时调用这两个函数\",{\"1\":{\"568\":1}}],[\"以下代码模拟了上面描述的第\",{\"1\":{\"568\":1}}],[\"以下程序的输出结果是什么\",{\"1\":{\"557\":1}}],[\"以下就是他们讨论得出的对编程语言的设计要求\",{\"1\":{\"467\":1}}],[\"以下的学生课程关系的函数依赖为\",{\"1\":{\"288\":1}}],[\"以下为\",{\"1\":{\"90\":1,\"112\":1,\"150\":1,\"153\":1,\"186\":1,\"189\":1}}],[\"以帮助开发者进行技术选型\",{\"1\":{\"242\":1}}],[\"以匹配尽可能多的索引列\",{\"1\":{\"227\":1}}],[\"以分号结束\",{\"1\":{\"166\":1,\"202\":1}}],[\"以便从令牌端点返回id令牌\",{\"1\":{\"882\":1}}],[\"以便客户端可以依赖它\",{\"1\":{\"869\":1}}],[\"以便让用户或计算机不必等待\",{\"1\":{\"694\":1}}],[\"以便测试某个条件是否满足\",{\"1\":{\"521\":1}}],[\"以便进行垃圾回收\",{\"1\":{\"516\":1}}],[\"以便进行\",{\"1\":{\"257\":1}}],[\"以便可以将内部查询的结果传递给外部查询\",{\"1\":{\"128\":1}}],[\"以便于从资源服务器获取资源\",{\"1\":{\"26\":1}}],[\"以及可能的其他要求\",{\"1\":{\"869\":1}}],[\"以及用户要求的任何内容\",{\"1\":{\"857\":1}}],[\"以及完整地实现了\",{\"1\":{\"686\":1}}],[\"以及应用程序和机器之间的数据传输\",{\"1\":{\"686\":1}}],[\"以及其他格式化输出函数\",{\"1\":{\"670\":1}}],[\"以及三种调用这个方法的不同方式\",{\"1\":{\"640\":1}}],[\"以及详细介绍了如何使用它\",{\"1\":{\"638\":1}}],[\"以及它的标准库了\",{\"1\":{\"637\":1}}],[\"以及一般情况下如何解析\",{\"1\":{\"850\":1}}],[\"以及一个没有任何初始化的\",{\"1\":{\"567\":1}}],[\"以及一些非常有用的代码片段\",{\"1\":{\"467\":1}}],[\"以及显示和测量时间和日期的功能函数\",{\"1\":{\"546\":1}}],[\"以及第\",{\"1\":{\"532\":1}}],[\"以及使用claims来交流关于终端用户的信息\",{\"1\":{\"866\":1}}],[\"以及使用\",{\"1\":{\"523\":1}}],[\"以及任何结果为布尔值的表达式\",{\"1\":{\"521\":1}}],[\"以及相应的的环境变量的值\",{\"1\":{\"515\":1}}],[\"以及相应的环境变量的值\",{\"1\":{\"515\":1}}],[\"以及如何做分离开来\",{\"1\":{\"662\":1}}],[\"以及如何通过\",{\"1\":{\"515\":1}}],[\"以及如何使用注释\",{\"1\":{\"508\":1}}],[\"以及如何安装\",{\"1\":{\"467\":1}}],[\"以及\",{\"1\":{\"499\":1,\"547\":1,\"588\":1,\"868\":1}}],[\"以及更简洁却不失健壮的控制结构\",{\"1\":{\"467\":1}}],[\"以及章节练习的答案和所有参考资源和文献的清单\",{\"1\":{\"467\":1}}],[\"以及脚手架代码\",{\"1\":{\"462\":1}}],[\"以及在栈中的对象添加对象\",{\"1\":{\"429\":1}}],[\"以及创建和初始化由gomaxprocs个p构成的p列表\",{\"1\":{\"415\":1}}],[\"以及基于通道的并发性方法使其非常容易使用所有可用的\",{\"1\":{\"320\":1}}],[\"以及聚合函数\",{\"0\":{\"256\":1}}],[\"以及表\",{\"1\":{\"106\":1}}],[\"以及不同的安全性实体\",{\"1\":{\"90\":1}}],[\"以及配置\",{\"1\":{\"85\":1}}],[\"以控制用户的访问权限为主\",{\"1\":{\"90\":1}}],[\"以上的方式对于本地包来说是可以的\",{\"1\":{\"635\":1}}],[\"以上的大对象时\",{\"1\":{\"443\":1}}],[\"以上两种方式实用性都不高\",{\"1\":{\"588\":1}}],[\"以上5个特性是死东西\",{\"1\":{\"400\":1}}],[\"以上学生课程关系中\",{\"1\":{\"291\":1}}],[\"以上\",{\"1\":{\"73\":1}}],[\"以后\",{\"1\":{\"29\":1}}],[\"角色组\",{\"1\":{\"73\":1}}],[\"角色权限\",{\"1\":{\"72\":1}}],[\"角色介绍\",{\"1\":{\"72\":1}}],[\"角色名称\",{\"1\":{\"72\":1}}],[\"角色唯一code代码\",{\"1\":{\"72\":1}}],[\"角色id\",{\"1\":{\"72\":5,\"73\":2}}],[\"角色表的作用是为了将零散的权限进行聚合\",{\"1\":{\"72\":1}}],[\"角色表\",{\"1\":{\"72\":4,\"73\":1}}],[\"角色关联全局权限点后\",{\"1\":{\"70\":1}}],[\"角色属性通过\",{\"1\":{\"70\":1}}],[\"角色属性\",{\"1\":{\"70\":1}}],[\"角色限制模型\",{\"0\":{\"68\":1}}],[\"角色限制模型rbac2\",{\"1\":{\"65\":1}}],[\"角色间的继承关系可分为一般继承关系和受限继承关系\",{\"1\":{\"67\":1}}],[\"角色分层模型\",{\"0\":{\"67\":1}}],[\"角色映射\",{\"1\":{\"65\":1}}],[\"角色和权限之间的映射\",{\"1\":{\"65\":1}}],[\"角色和权限\",{\"1\":{\"65\":1}}],[\"角色\",{\"1\":{\"29\":1,\"60\":1,\"65\":2,\"66\":1,\"70\":1,\"71\":1,\"72\":3}}],[\"姓名\",{\"1\":{\"29\":1,\"72\":1,\"270\":1}}],[\"每层的\",{\"1\":{\"689\":1}}],[\"每行的第一个字段为标题\",{\"1\":{\"678\":1}}],[\"每种语言都有一些对于字符串的预定义处理函数\",{\"1\":{\"533\":1}}],[\"每遇到一次\",{\"1\":{\"513\":1}}],[\"每当函数返回时\",{\"1\":{\"689\":1}}],[\"每当\",{\"1\":{\"513\":1}}],[\"每天的讨论和问题解答数以百计\",{\"1\":{\"469\":1}}],[\"每条\",{\"1\":{\"447\":1}}],[\"每次更新后\",{\"1\":{\"689\":1}}],[\"每次都在输出的数据前面打印使用帮助信息\",{\"1\":{\"682\":1}}],[\"每次遍历的起点\",{\"1\":{\"609\":1}}],[\"每次的地址都可能不一样\",{\"1\":{\"516\":1}}],[\"每次构建程序之前都会自动调用源码格式化工具\",{\"1\":{\"495\":1}}],[\"每次搬迁2个键值对\",{\"1\":{\"372\":1}}],[\"每次插入\",{\"1\":{\"332\":1}}],[\"每次只能给一个变量赋值\",{\"1\":{\"163\":1,\"199\":1}}],[\"每次请求都发回服务器\",{\"1\":{\"28\":1}}],[\"每执行一条语句就把这条语句当成一个事务然后进行提交\",{\"1\":{\"151\":1,\"187\":1}}],[\"每一段代码只会被编译一次\",{\"1\":{\"506\":1}}],[\"每一个都会对切片\",{\"1\":{\"705\":1}}],[\"每一个请求都会启动一个协程来处理\",{\"1\":{\"697\":1}}],[\"每一个函数都在运行的开始和结束阶段输出了消息\",{\"1\":{\"697\":1}}],[\"每一个程序都包含很多的函数\",{\"1\":{\"561\":1}}],[\"每一个包应该有相关注释\",{\"1\":{\"508\":1}}],[\"每一个\",{\"1\":{\"389\":1,\"551\":1,\"635\":1}}],[\"每一个索引还要占一定的物理空间\",{\"1\":{\"210\":1}}],[\"每一个对象都有一些权限标识\",{\"1\":{\"62\":1}}],[\"每一条记录都会关联到唯一的一条用户记录\",{\"1\":{\"72\":1}}],[\"每个执行的测试函数以及测试状态会被打印\",{\"1\":{\"689\":1}}],[\"每个字符的输出都新起一行\",{\"1\":{\"682\":1}}],[\"每个字段都有一个类型和一个名字\",{\"1\":{\"639\":1}}],[\"每个字都指示了下一个字所在的内存地址\",{\"1\":{\"516\":1}}],[\"每个属性都有自己的类型和值的时候\",{\"1\":{\"639\":1}}],[\"每个包\",{\"1\":{\"627\":1}}],[\"每个元素是一个整型值\",{\"1\":{\"580\":1}}],[\"每个元素的大小\",{\"1\":{\"405\":1}}],[\"每个分支内的代码都会缩进\",{\"1\":{\"549\":1}}],[\"每个内存块\",{\"1\":{\"547\":1}}],[\"每个类型都定义了可以和自己结合的运算符集合\",{\"1\":{\"520\":1}}],[\"每个源文件可以包含多个\",{\"1\":{\"519\":1}}],[\"每个新单词的首字母大写\",{\"1\":{\"515\":1}}],[\"每个含有该函数的包都会首先执行这个函数\",{\"1\":{\"510\":1}}],[\"每个值都必须在经过编译后属于某个类型\",{\"1\":{\"509\":1}}],[\"每个参数的名称后面必须紧跟着该参数的类型\",{\"1\":{\"507\":1}}],[\"每个目录都只包含一个包\",{\"1\":{\"506\":1}}],[\"每个程序都由包\",{\"1\":{\"506\":1}}],[\"每个语句不需要像\",{\"1\":{\"504\":1}}],[\"每个语句都以\",{\"1\":{\"163\":1,\"199\":1}}],[\"每个可执行文件都包含\",{\"1\":{\"499\":1}}],[\"每个m都会有一个自己的g0\",{\"1\":{\"415\":1}}],[\"每个进程至少包含一个线程\",{\"1\":{\"408\":1}}],[\"每个进程都有独立的内存空间\",{\"1\":{\"408\":1}}],[\"每个哈希表的实现对负载因子容忍程度不同\",{\"1\":{\"368\":1}}],[\"每个bucket可以存储8个键值对\",{\"1\":{\"365\":1}}],[\"每个切片都引用了一个底层数组\",{\"1\":{\"353\":1}}],[\"每个文件也可以有多个\",{\"1\":{\"350\":1}}],[\"每个\",{\"1\":{\"331\":1,\"332\":1,\"363\":2,\"410\":2,\"496\":1,\"506\":2,\"557\":1,\"663\":1,\"709\":1,\"850\":1}}],[\"每个线程或者进程都先到注册和接受的\",{\"1\":{\"331\":1}}],[\"每个学生的每门课都有特定的成绩\",{\"1\":{\"291\":1}}],[\"每个非主属性完全函数依赖于键码\",{\"1\":{\"291\":1}}],[\"每个节点能索引的范围更大更精确\",{\"1\":{\"216\":1}}],[\"每个节点的指针上限为\",{\"1\":{\"215\":1}}],[\"每个节点中都包含了\",{\"1\":{\"214\":1}}],[\"每个结点至多有\",{\"1\":{\"214\":1}}],[\"每个表只能有一个\",{\"1\":{\"212\":1}}],[\"每个查询中涉及表的列的数据类型必须相同或兼容\",{\"1\":{\"144\":1,\"177\":1}}],[\"每个系统主体用户\",{\"1\":{\"73\":1}}],[\"每个人平均配置\",{\"1\":{\"72\":1}}],[\"每个环境都不一样\",{\"1\":{\"72\":1}}],[\"每个用户注册时\",{\"1\":{\"73\":1}}],[\"每个用户只会有几个角色\",{\"1\":{\"72\":1}}],[\"每个用户都有唯一的uid识别\",{\"1\":{\"65\":1}}],[\"每个用户同样也会有一些权限标识\",{\"1\":{\"62\":1}}],[\"每个部分之间用\",{\"1\":{\"36\":1}}],[\"每台服务器都能够读取\",{\"1\":{\"28\":1}}],[\"所含数据的真实性\",{\"1\":{\"860\":1}}],[\"所含信息的相关方\",{\"1\":{\"852\":1}}],[\"所定义的oauth\",{\"1\":{\"868\":1}}],[\"所定义的术语\",{\"1\":{\"868\":3}}],[\"所定义的\",{\"1\":{\"852\":1}}],[\"所演示的那样\",{\"1\":{\"656\":1}}],[\"所需功能类型\",{\"1\":{\"656\":1}}],[\"所展示的那样\",{\"1\":{\"577\":1}}],[\"所简要描述的函数进行详细的讲解\",{\"1\":{\"560\":1}}],[\"所表示的字符串类型的十进制数\",{\"1\":{\"545\":1}}],[\"所使用的一半\",{\"1\":{\"499\":1}}],[\"所指向的位置\",{\"1\":{\"483\":1}}],[\"所指的子结点继续查找\",{\"1\":{\"214\":1}}],[\"所组成的黄金团队\",{\"1\":{\"469\":1}}],[\"所带来的效果就是锁竞争的减少\",{\"1\":{\"410\":1}}],[\"所谓的stateless\",{\"1\":{\"848\":1}}],[\"所谓的指针算法\",{\"1\":{\"547\":1}}],[\"所谓的哈希桶实际上就是bucket\",{\"1\":{\"364\":1}}],[\"所谓等量扩容\",{\"1\":{\"373\":1}}],[\"所谓引用类型\",{\"1\":{\"329\":1}}],[\"所谓引用传递是指在调用函数时将实际参数的地址传递到函数中\",{\"1\":{\"329\":1}}],[\"所谓值类型\",{\"1\":{\"329\":1}}],[\"所谓值传递\",{\"1\":{\"329\":1}}],[\"所有包含令牌\",{\"1\":{\"883\":1}}],[\"所有令牌都从授权端点返回\",{\"1\":{\"889\":1}}],[\"所有令牌都是从令牌端点返回的\",{\"1\":{\"870\":1}}],[\"所有令牌从令牌端点返回\",{\"1\":{\"868\":1}}],[\"所有这些权利要求都是不安全\",{\"1\":{\"861\":1}}],[\"所有这些特性使得接口具有很大的灵活性\",{\"1\":{\"662\":1}}],[\"所有签名算法的目的都是一样的\",{\"1\":{\"860\":1}}],[\"所有不属于已注册claims部分的claims都属于私人claims或公共claims\",{\"1\":{\"853\":1}}],[\"所有名称都很短\",{\"1\":{\"852\":1}}],[\"所有代码均可从公共存储库中获取\",{\"1\":{\"847\":1}}],[\"所有必须做的事情就是\",{\"1\":{\"662\":1}}],[\"所有\",{\"1\":{\"662\":1,\"849\":1}}],[\"所有实现了\",{\"1\":{\"662\":1}}],[\"所有属于这个包中的\",{\"1\":{\"627\":1}}],[\"所有像\",{\"1\":{\"516\":1}}],[\"所有引用了这个包的客户端程序都必须全部重新编译\",{\"1\":{\"506\":1}}],[\"所有的令牌都从授权端点返回\",{\"1\":{\"868\":1}}],[\"所有的协程都休眠了\",{\"1\":{\"702\":1}}],[\"所有的协程都会共享同一个线程除非将\",{\"1\":{\"696\":1}}],[\"所有的类型都可以用于通道\",{\"1\":{\"699\":1}}],[\"所有的错误都会被\",{\"1\":{\"689\":1}}],[\"所有的处理函数都是下面这样\",{\"1\":{\"689\":1}}],[\"所有的\",{\"1\":{\"689\":1}}],[\"所有的例子都遵循同一种命名规范\",{\"1\":{\"688\":1}}],[\"所有的接口方法\",{\"1\":{\"676\":1}}],[\"所有的子进程\",{\"1\":{\"607\":1}}],[\"所有的组成元素都有相同的常量语法\",{\"1\":{\"581\":1}}],[\"所有的字都使用相关的内存地址来进行表示\",{\"1\":{\"516\":1}}],[\"所有的字都具有\",{\"1\":{\"516\":1}}],[\"所有的内存在\",{\"1\":{\"515\":1}}],[\"所有的结构将在这一章或接下来的章节中进一步地解释说明\",{\"1\":{\"510\":1}}],[\"所有的包名都应该使用小写字母\",{\"1\":{\"506\":1}}],[\"所有的源代码文件都是通过包\",{\"1\":{\"481\":1}}],[\"所有的对象放到白色集合\",{\"1\":{\"429\":1}}],[\"所有的数据都在内存中\",{\"1\":{\"293\":1}}],[\"所有叶结点在同一层\",{\"1\":{\"214\":1}}],[\"所有查询的列数和列顺序必须相同\",{\"1\":{\"144\":1,\"145\":1,\"177\":1,\"178\":1}}],[\"所有空格都被忽略\",{\"1\":{\"85\":1}}],[\"所有表都是由一个或多个列组成的\",{\"1\":{\"82\":1}}],[\"所有数据都保存在客户端\",{\"1\":{\"28\":1}}],[\"所属父级用户组id\",{\"1\":{\"73\":1}}],[\"所属父级角色id\",{\"1\":{\"72\":1}}],[\"所属父级权限id\",{\"1\":{\"72\":1}}],[\"所以比较返回值即可\",{\"1\":{\"727\":1}}],[\"所以上边的迭代用到了一个通道和两个协程\",{\"1\":{\"708\":1}}],[\"所以发送操作会等待\",{\"1\":{\"701\":1}}],[\"所以以下代码是合法的\",{\"1\":{\"700\":1}}],[\"所以通道的容量需要限制一下最大值\",{\"1\":{\"709\":1}}],[\"所以通道的发送\",{\"1\":{\"701\":1}}],[\"所以通道是第一类对象\",{\"1\":{\"699\":1}}],[\"所以通道只能传输一种类型的数据\",{\"1\":{\"699\":1}}],[\"所以共享内存的方式一定是同步的\",{\"1\":{\"694\":1}}],[\"所以并发程序可以是并行的\",{\"1\":{\"694\":1}}],[\"所以并不会因为牵扯到一些概念而将某个概念复杂化\",{\"1\":{\"474\":1}}],[\"所以会得到一个\",{\"1\":{\"689\":1}}],[\"所以测试代码和包中的业务代码是分开的\",{\"1\":{\"689\":1}}],[\"所以错误信息\",{\"1\":{\"688\":1}}],[\"所以文本可以被安全地嵌在\",{\"1\":{\"682\":1}}],[\"所以当放应用部署到生产环境时它们不会被部署\",{\"1\":{\"689\":1}}],[\"所以当值是\",{\"1\":{\"682\":1}}],[\"所以当你尝试将你的\",{\"1\":{\"478\":1}}],[\"所以你的错误信息不要以大写字母开头\",{\"1\":{\"688\":1}}],[\"所以你不用提前设计出所有的接口\",{\"1\":{\"673\":1}}],[\"所以你需要给不同的函数使用不同的名字\",{\"1\":{\"561\":1}}],[\"所以你需要从头开始\",{\"1\":{\"478\":1}}],[\"所以实际上我们可以有一个简单版本的多重继承\",{\"1\":{\"655\":1}}],[\"所以实际的时间复杂度为\",{\"1\":{\"390\":1}}],[\"所以同样的\",{\"1\":{\"651\":1}}],[\"所以同一个bucket存放超过8个键值对时就会再创建一个键值对\",{\"1\":{\"367\":1}}],[\"所以需要打开你的文本编辑器\",{\"1\":{\"635\":1}}],[\"所以需要注意发布版本和包的兼容性\",{\"1\":{\"629\":1}}],[\"所以需要有两个字段记录当前读和写的下标位置\",{\"1\":{\"398\":1}}],[\"所以是很好的浏览和查找源代码的方式\",{\"1\":{\"628\":1}}],[\"所以链接器将包的对象和主程序对象链接在一起\",{\"1\":{\"627\":1}}],[\"所以运算可以被链式地调用\",{\"1\":{\"626\":1}}],[\"所以所有大数字类型都有像是\",{\"1\":{\"626\":1}}],[\"所以真正的\",{\"1\":{\"610\":1}}],[\"所以即使未扩容时我们遍历出来的\",{\"1\":{\"609\":1}}],[\"所以出于性能的考虑\",{\"1\":{\"606\":1}}],[\"所以如果在某一时间只有一个协程在执行\",{\"1\":{\"696\":1}}],[\"所以如果在函数内部进行了更改的时候\",{\"1\":{\"355\":1}}],[\"所以如果你很在乎性能的话还是建议用切片来解决问题\",{\"1\":{\"605\":1}}],[\"所以数组\",{\"1\":{\"605\":1}}],[\"所以数组是\",{\"1\":{\"580\":1}}],[\"所以定义\",{\"1\":{\"587\":1}}],[\"所以对只接收通道是没有意义的\",{\"1\":{\"709\":1}}],[\"所以对于切片\",{\"1\":{\"585\":1}}],[\"所以对数组中元素的修改\",{\"1\":{\"346\":1}}],[\"所以切片是一个引用类型\",{\"1\":{\"585\":1}}],[\"所以输出结果为\",{\"1\":{\"581\":1}}],[\"所以被修改的变量不再需要使用\",{\"1\":{\"566\":1}}],[\"所以给它赋一个具有不同签名的函数值是不可能的\",{\"1\":{\"561\":1}}],[\"所以函数编写的顺序是无关紧要的\",{\"1\":{\"561\":1}}],[\"所以程序会直接停止运行\",{\"1\":{\"550\":1}}],[\"所以从它们被创建开始就具有相互独立的生命周期\",{\"1\":{\"547\":1}}],[\"所以说\",{\"1\":{\"547\":1}}],[\"所以习惯使用\",{\"1\":{\"542\":1}}],[\"所以我们必须对要使用的测试用例思考再三\",{\"1\":{\"689\":1}}],[\"所以我们可以定义一个函数来产生特定的添加函数和\",{\"1\":{\"676\":1}}],[\"所以我们需要使用\",{\"1\":{\"629\":1}}],[\"所以我们需要根据不同的需求来处理\",{\"1\":{\"355\":1}}],[\"所以我们实际上拥有的是一个函数值\",{\"1\":{\"573\":1}}],[\"所以我们使用\",{\"1\":{\"531\":1,\"699\":1}}],[\"所以下面的表达式是\",{\"1\":{\"668\":1}}],[\"所以下面的写法是等效的\",{\"1\":{\"531\":1}}],[\"所以下面两种方法可以生成相同的切片\",{\"1\":{\"587\":1}}],[\"所以下面主要介绍\",{\"1\":{\"259\":1}}],[\"所以可以\",{\"1\":{\"703\":1}}],[\"所以可以这样打印\",{\"1\":{\"668\":1}}],[\"所以可以将一个\",{\"1\":{\"662\":1}}],[\"所以可以说\",{\"1\":{\"647\":1}}],[\"所以可以通过\",{\"1\":{\"580\":1}}],[\"所以可以通过编译\",{\"1\":{\"523\":1}}],[\"所以可以被本包中所有的函数调用\",{\"1\":{\"506\":1}}],[\"所以使用\",{\"1\":{\"518\":1}}],[\"所以使用比较广泛\",{\"1\":{\"26\":1}}],[\"所以它会自动恢复执行\",{\"1\":{\"694\":1}}],[\"所以它也可以作为一个匿名字段来使用\",{\"1\":{\"648\":1}}],[\"所以它的\",{\"1\":{\"640\":1}}],[\"所以它是一个最可能保证你可以得到开发者项目中最好的软件\",{\"1\":{\"636\":1}}],[\"所以它是类型安全的一门语言\",{\"1\":{\"475\":1}}],[\"所以它本身就是一个指针\",{\"1\":{\"585\":1}}],[\"所以它们不需要使用额外的内存并且比使用数组更有效率\",{\"1\":{\"585\":1}}],[\"所以它能够被导出\",{\"1\":{\"506\":1}}],[\"所以它对那些逃离\",{\"1\":{\"475\":1}}],[\"所以它和\",{\"1\":{\"475\":1}}],[\"所以任何人都可以进行商业软件的开发而不需要支付任何费用\",{\"1\":{\"471\":1}}],[\"所以直接研究ants底层吧\",{\"1\":{\"426\":1}}],[\"所以这些协程是并发运行的\",{\"1\":{\"695\":1}}],[\"所以这个经典的方法明显不再适合现代多核\",{\"1\":{\"694\":1}}],[\"所以这个结构也称为关联数组或字典\",{\"1\":{\"603\":1}}],[\"所以这个限制可以忽略\",{\"1\":{\"409\":1}}],[\"所以这种表示方式是\",{\"1\":{\"585\":1}}],[\"所以这在严格意义上并不是科学\",{\"1\":{\"499\":1}}],[\"所以这里做一下比较\",{\"1\":{\"297\":1}}],[\"所以go可以容忍更高的负载因子\",{\"1\":{\"368\":1}}],[\"所以官方避免大家依赖顺序\",{\"1\":{\"359\":1}}],[\"所以修改切片的时候修改的是底层数组中的数据\",{\"1\":{\"353\":1}}],[\"所以方法对array中元素的重新赋值不起作用\",{\"1\":{\"346\":1}}],[\"所以无法像\",{\"1\":{\"303\":1}}],[\"所以无法用于排序\",{\"1\":{\"217\":1}}],[\"所以不会发生数据竞争\",{\"1\":{\"699\":1}}],[\"所以不需要我们再重复造轮子了\",{\"1\":{\"662\":1}}],[\"所以不应当使用而选择更好的替代方案\",{\"1\":{\"559\":1}}],[\"所以不管是在集成开发环境\",{\"1\":{\"489\":1}}],[\"所以不能像操作系统那样利用时钟中断来打断运行中的goroutine\",{\"1\":{\"412\":1}}],[\"所以不能为类型实现的所有接口都生成一个\",{\"1\":{\"392\":1}}],[\"所以不建议使用这种策略\",{\"1\":{\"249\":1}}],[\"所以不要把秘密信息放在这个部分\",{\"1\":{\"35\":1}}],[\"所以若只读取索引\",{\"1\":{\"224\":1}}],[\"所以一个普通的大学生花几个星期就能写出来可以上手的\",{\"1\":{\"320\":1}}],[\"所以一个表只能有一个聚簇索引\",{\"1\":{\"223\":1}}],[\"所以一个节点可以存储更多的内节点\",{\"1\":{\"216\":1}}],[\"所以访问快\",{\"1\":{\"223\":1}}],[\"所以查询速度非常快\",{\"1\":{\"217\":1}}],[\"所以在这里\",{\"1\":{\"803\":1}}],[\"所以在使用\",{\"1\":{\"643\":1,\"680\":1}}],[\"所以在使用期间不可能取消令牌或更改令牌的权限\",{\"1\":{\"31\":1}}],[\"所以在函数中数组作为参数传入时\",{\"1\":{\"580\":1}}],[\"所以在函数内被修改\",{\"1\":{\"355\":1}}],[\"所以在\",{\"1\":{\"578\":1,\"585\":1,\"689\":1}}],[\"所以在非常注意性能的的场合\",{\"1\":{\"561\":1}}],[\"所以在数据进行提交更新的时候\",{\"1\":{\"419\":1}}],[\"所以在实现中\",{\"1\":{\"215\":1}}],[\"所以理论上能够实现非常灵活的权限控制\",{\"1\":{\"63\":1}}],[\"所以称之为\",{\"1\":{\"61\":1}}],[\"所以\",{\"1\":{\"39\":2,\"216\":1,\"251\":1,\"362\":1,\"381\":1,\"409\":1,\"420\":1,\"442\":1,\"450\":1,\"518\":1,\"550\":1,\"563\":1,\"566\":1,\"580\":1,\"585\":1,\"588\":1,\"589\":1,\"598\":1,\"625\":1,\"670\":1,\"695\":1}}],[\"所以要被替换掉\",{\"1\":{\"37\":1}}],[\"另见练习\",{\"1\":{\"550\":1}}],[\"另见第\",{\"1\":{\"549\":1}}],[\"另一些不是\",{\"1\":{\"640\":1}}],[\"另一种方法就是生成数组切片并将其传递给函数\",{\"1\":{\"580\":1}}],[\"另一种方案是服务器索性不保存\",{\"1\":{\"28\":1}}],[\"另一种表示方式为\",{\"1\":{\"573\":1}}],[\"另一种说法是指针转移\",{\"1\":{\"547\":1}}],[\"另一方面\",{\"1\":{\"257\":1,\"547\":1,\"705\":1}}],[\"另一个线程也通过了这个判断语句\",{\"1\":{\"803\":1}}],[\"另一个类型\",{\"1\":{\"676\":2}}],[\"另一个是\",{\"1\":{\"668\":1}}],[\"另一个用来存储它包含的数据或者指向数据的指针\",{\"1\":{\"663\":1}}],[\"另一个参数是毫秒\",{\"1\":{\"619\":1}}],[\"另一个例子\",{\"1\":{\"592\":1}}],[\"另一个不错的应用就是使用闭包来完成更加简洁的错误检查\",{\"1\":{\"573\":1}}],[\"另一个示例见第\",{\"1\":{\"531\":1}}],[\"另一个获取锁完成事务\",{\"1\":{\"235\":1}}],[\"另一个锁定了非主键索引\",{\"1\":{\"235\":1}}],[\"另外它们是类型化的\",{\"1\":{\"699\":1}}],[\"另外结构内部可能包含匿名字段\",{\"1\":{\"682\":1}}],[\"另外提供如下方法\",{\"1\":{\"662\":1}}],[\"另外复制\",{\"1\":{\"631\":1}}],[\"另外我们也可以使用\",{\"1\":{\"624\":1}}],[\"另外一种表述方式是\",{\"1\":{\"585\":1}}],[\"另外一种可能的写法是\",{\"1\":{\"531\":1}}],[\"另外一个协程必须写入\",{\"1\":{\"708\":1}}],[\"另外一个机器\",{\"1\":{\"699\":1}}],[\"另外一个例子\",{\"1\":{\"648\":1}}],[\"另外一个示例\",{\"1\":{\"565\":1}}],[\"另外一个参数可以忽略\",{\"1\":{\"340\":1}}],[\"另外要注意的是\",{\"1\":{\"506\":1,\"520\":1}}],[\"另外使用\",{\"1\":{\"491\":1}}],[\"另外由于\",{\"1\":{\"410\":1}}],[\"另外在\",{\"1\":{\"303\":1}}],[\"另外可以通过\",{\"1\":{\"51\":1}}],[\"另外\",{\"1\":{\"28\":1,\"235\":1,\"383\":1,\"473\":1,\"499\":1,\"504\":1,\"508\":1,\"513\":1,\"516\":1,\"521\":1,\"546\":1,\"558\":1,\"559\":1,\"595\":1,\"631\":1,\"678\":1,\"697\":1}}],[\"都符合要求为止\",{\"1\":{\"857\":1}}],[\"都包含特定声明和任意数据\",{\"1\":{\"850\":1}}],[\"都包含了数组从第三个到最后的所有元素\",{\"1\":{\"585\":1}}],[\"都带有一个header\",{\"1\":{\"850\":1}}],[\"都由三个不同的元素构成\",{\"1\":{\"849\":1}}],[\"都需要使用\",{\"1\":{\"680\":1}}],[\"都必须实现对应的接口\",{\"1\":{\"662\":1}}],[\"都不会执行\",{\"1\":{\"661\":1}}],[\"都存放在和包名相同的子目录下\",{\"1\":{\"627\":1}}],[\"都在堆上分配内存\",{\"1\":{\"588\":1}}],[\"都被共享到闭包的环境中\",{\"1\":{\"573\":1}}],[\"都要有\",{\"1\":{\"562\":1}}],[\"都要发回这个\",{\"1\":{\"29\":1}}],[\"都有一个选择器\",{\"1\":{\"709\":1}}],[\"都有协程的概念\",{\"1\":{\"698\":1}}],[\"都有\",{\"1\":{\"668\":1}}],[\"都有许多方法用于检查和操作它们\",{\"1\":{\"668\":1}}],[\"都有指针的概念\",{\"1\":{\"547\":1}}],[\"都有自己的实现\",{\"1\":{\"83\":1}}],[\"都已经被声明\",{\"1\":{\"518\":1}}],[\"都使用同样的\",{\"1\":{\"640\":1}}],[\"都使用非常冗长的代码\",{\"1\":{\"499\":1}}],[\"都使用更少的代码\",{\"1\":{\"499\":1}}],[\"都可以用\",{\"1\":{\"688\":1}}],[\"都可以通过值类型或指针类型调用\",{\"1\":{\"381\":1}}],[\"都可以是一个权限点\",{\"1\":{\"70\":1}}],[\"都申请一个结构通过链表串起来\",{\"1\":{\"363\":1}}],[\"都为map\",{\"1\":{\"362\":1}}],[\"都是工厂\",{\"1\":{\"709\":1}}],[\"都是作为参数传入闭合函数的\",{\"1\":{\"705\":1}}],[\"都是必须提供一个指定方法集的实现\",{\"1\":{\"671\":1}}],[\"都是不带缓冲的\",{\"1\":{\"662\":1}}],[\"都是可以的\",{\"1\":{\"564\":1}}],[\"都是值传递\",{\"1\":{\"355\":1}}],[\"都是这底层数组存储数据\",{\"1\":{\"353\":1}}],[\"都是通过下标来访问\",{\"1\":{\"353\":1}}],[\"都是通过反射来实现的\",{\"1\":{\"328\":1}}],[\"都是\",{\"1\":{\"345\":1,\"383\":1,\"396\":1,\"588\":1,\"626\":1}}],[\"都是传值\",{\"0\":{\"329\":1}}],[\"都是对所有结果进行\",{\"1\":{\"303\":1}}],[\"都是用于过滤\",{\"1\":{\"136\":1,\"186\":1}}],[\"都部分依赖于键码\",{\"1\":{\"291\":1}}],[\"都会产生完全不同的输出\",{\"1\":{\"860\":1}}],[\"都会有像\",{\"1\":{\"688\":1}}],[\"都会使用反射来分析它的\",{\"1\":{\"670\":1}}],[\"都会包含对应的\",{\"1\":{\"595\":1}}],[\"都会重置为\",{\"1\":{\"513\":1}}],[\"都会涉及到相关的话题\",{\"1\":{\"469\":1}}],[\"都会检查是否需要扩容\",{\"1\":{\"371\":1}}],[\"都会分配相同的角色组\",{\"1\":{\"73\":1}}],[\"都会通过\",{\"1\":{\"28\":1}}],[\"都向持久层请求数据\",{\"1\":{\"28\":1}}],[\"请遵循rfc\",{\"1\":{\"885\":1}}],[\"请根据第9节进行身份验证\",{\"1\":{\"882\":1}}],[\"请执行以下步骤\",{\"1\":{\"855\":1,\"856\":1}}],[\"请注意避免重复声明\",{\"1\":{\"853\":1}}],[\"请注意分隔\",{\"1\":{\"849\":1}}],[\"请注意\",{\"1\":{\"847\":1,\"849\":1}}],[\"请测试这个函数\",{\"1\":{\"689\":1}}],[\"请给这个结构编写一个\",{\"1\":{\"680\":1}}],[\"请读取出文件的内容\",{\"1\":{\"678\":1}}],[\"请看\",{\"1\":{\"696\":1}}],[\"请看示例\",{\"1\":{\"678\":1}}],[\"请看以下程序\",{\"1\":{\"677\":1,\"678\":1,\"680\":1}}],[\"请参见章节15\",{\"1\":{\"877\":1}}],[\"请参见15\",{\"1\":{\"873\":1,\"892\":1}}],[\"请参见第5\",{\"1\":{\"873\":1}}],[\"请参见第3\",{\"1\":{\"869\":1,\"873\":1}}],[\"请参考章节\",{\"1\":{\"677\":1,\"680\":1}}],[\"请参阅第16\",{\"1\":{\"872\":1,\"880\":1}}],[\"请参阅\",{\"1\":{\"52\":1,\"545\":1}}],[\"请使用您在练习\",{\"1\":{\"677\":1}}],[\"请使用\",{\"1\":{\"602\":1,\"680\":2}}],[\"请再尝试使用一个切片\",{\"1\":{\"602\":1}}],[\"请务必对它们之间的效率进行对比再做出最后的判断\",{\"1\":{\"576\":1}}],[\"请务必安装\",{\"1\":{\"485\":1}}],[\"请学习以下示例并思考\",{\"1\":{\"573\":1}}],[\"请学习它的源代码并基于该函数书写一个程序\",{\"1\":{\"572\":1}}],[\"请将\",{\"1\":{\"568\":1}}],[\"请将输出结果和\",{\"1\":{\"557\":1}}],[\"请描述下面\",{\"1\":{\"559\":1}}],[\"请描述以下\",{\"1\":{\"557\":1}}],[\"请说出下面代码片段输出的结果\",{\"1\":{\"551\":1}}],[\"请访问\",{\"1\":{\"499\":1}}],[\"请访问该页面\",{\"1\":{\"496\":1,\"497\":1}}],[\"请简述\",{\"0\":{\"440\":1}}],[\"请求参数提供信息\",{\"0\":{\"961\":1}}],[\"请求参数组装和验证\",{\"0\":{\"958\":1}}],[\"请求参数请求\",{\"0\":{\"949\":1,\"952\":1}}],[\"请求参数请求索赔\",{\"0\":{\"938\":1}}],[\"请求参数包含无效的请求对象\",{\"1\":{\"878\":1}}],[\"请求参数将使用表单序列化\",{\"1\":{\"873\":1}}],[\"请求参数将使用uri查询字符串序列化序列化\",{\"1\":{\"873\":1}}],[\"请求可能仍然是有效的oauth\",{\"1\":{\"874\":1}}],[\"请求可以由一系列中间件和最终操作来处理\",{\"1\":{\"455\":1}}],[\"请求的认证上下文类参考值\",{\"1\":{\"873\":1}}],[\"请求uri内容必须能被授权服务器检索到\",{\"1\":{\"868\":1}}],[\"请求uri\",{\"1\":{\"868\":1}}],[\"请求对象\",{\"1\":{\"868\":1}}],[\"请求授权服务器\",{\"1\":{\"868\":1}}],[\"请求和回复\",{\"1\":{\"623\":1}}],[\"请求期间发生的所有错误\",{\"1\":{\"455\":1}}],[\"请求中的\",{\"1\":{\"455\":1}}],[\"请求数大于消费能力怎么设计协程池\",{\"1\":{\"426\":1}}],[\"请求\",{\"0\":{\"940\":1},\"1\":{\"405\":1,\"703\":1}}],[\"请在\",{\"1\":{\"52\":1}}],[\"请输入\",{\"1\":{\"52\":3}}],[\"请从\",{\"1\":{\"51\":1}}],[\"请问怎么实现\",{\"1\":{\"28\":1}}],[\"请勿暴露到外部网络环境和客户端测\",{\"1\":{\"4\":1}}],[\"数目\",{\"1\":{\"605\":1}}],[\"数值的方法\",{\"1\":{\"580\":1}}],[\"数值处理\",{\"0\":{\"149\":1,\"182\":1}}],[\"数列如下所示\",{\"1\":{\"570\":1}}],[\"数字值转换\",{\"1\":{\"523\":1}}],[\"数字类型\",{\"0\":{\"522\":1}}],[\"数字型和字符型的相关知识\",{\"1\":{\"520\":1}}],[\"数字型的常量是没有大小和符号的\",{\"1\":{\"513\":1}}],[\"数字型\",{\"1\":{\"513\":1}}],[\"数字\",{\"0\":{\"756\":1},\"1\":{\"504\":1,\"513\":1,\"516\":1,\"580\":1}}],[\"数字数据还是地理空间数据\",{\"1\":{\"6\":1}}],[\"数量的\",{\"1\":{\"409\":1}}],[\"数组进行排序\",{\"1\":{\"662\":2}}],[\"数组作为底层数据结构\",{\"1\":{\"660\":1}}],[\"数组可以看作是一种结构体类型\",{\"1\":{\"640\":1}}],[\"数组可以视为一种简单形式的\",{\"1\":{\"605\":1}}],[\"数组相等\",{\"1\":{\"599\":1}}],[\"数组和切片的应用\",{\"0\":{\"594\":1}}],[\"数组和切片的区别\",{\"0\":{\"353\":1}}],[\"数组成的数组\",{\"1\":{\"591\":1}}],[\"数组追加到\",{\"1\":{\"590\":1}}],[\"数组实际上是切片的构建块\",{\"1\":{\"585\":1}}],[\"数组除切片之外的长度\",{\"1\":{\"585\":1}}],[\"数组通常是一维的\",{\"1\":{\"582\":1}}],[\"数组常量\",{\"0\":{\"581\":1},\"1\":{\"581\":1}}],[\"数组以及\",{\"1\":{\"664\":1}}],[\"数组以\",{\"1\":{\"580\":1}}],[\"数组元素可以通过\",{\"1\":{\"580\":1}}],[\"数组长度最大为\",{\"1\":{\"580\":1}}],[\"数组长度也是数组类型的一部分\",{\"1\":{\"580\":1}}],[\"数组长度必须是一个常量表达式\",{\"1\":{\"580\":1}}],[\"数组长度较短时\",{\"1\":{\"214\":1}}],[\"数组有特定的用处\",{\"1\":{\"578\":1}}],[\"数组指针\",{\"1\":{\"364\":1}}],[\"数组还是切片\",{\"1\":{\"355\":1}}],[\"数组的结构体作为底层数据结构\",{\"1\":{\"660\":1}}],[\"数组的长度可能不同\",{\"1\":{\"599\":1}}],[\"数组的编译时值初始化是按照数组顺序完成的\",{\"1\":{\"580\":1}}],[\"数组的大小为\",{\"1\":{\"383\":1}}],[\"数组的初始化\",{\"1\":{\"353\":1}}],[\"数组的定义\",{\"1\":{\"353\":1}}],[\"数组切片都是值传递\",{\"1\":{\"353\":1}}],[\"数组需要指定大小\",{\"1\":{\"353\":1}}],[\"数组是具有相同\",{\"1\":{\"580\":1}}],[\"数组是值类型\",{\"1\":{\"353\":1}}],[\"数组是定长\",{\"1\":{\"353\":1}}],[\"数组\",{\"0\":{\"578\":1,\"758\":1},\"1\":{\"214\":1,\"335\":1,\"569\":1,\"585\":1,\"664\":2}}],[\"数\",{\"1\":{\"148\":1,\"150\":1,\"181\":1,\"183\":1,\"580\":1}}],[\"数据的所有权\",{\"1\":{\"699\":1}}],[\"数据的处理速度快\",{\"1\":{\"293\":1}}],[\"数据在通道中进行传递\",{\"1\":{\"699\":1}}],[\"数据内容\",{\"1\":{\"686\":1}}],[\"数据可以序列化为结构\",{\"1\":{\"686\":1}}],[\"数据流读写\",{\"1\":{\"686\":1}}],[\"数据反序列化\",{\"1\":{\"685\":1}}],[\"数据并将结果存入指针\",{\"1\":{\"683\":1}}],[\"数据隐藏\",{\"1\":{\"676\":1}}],[\"数据和关联的方法\",{\"1\":{\"659\":1}}],[\"数据将会出错\",{\"1\":{\"625\":1}}],[\"数据\",{\"1\":{\"461\":1,\"623\":1,\"652\":1,\"671\":1,\"682\":3,\"684\":2,\"685\":1,\"686\":1}}],[\"数据搬迁过程中原bucket中的键值对将存在于新bucket的前面\",{\"1\":{\"372\":1}}],[\"数据结构的使用都是利用jws紧凑序列化或jwe紧凑序列化\",{\"1\":{\"867\":1}}],[\"数据结构与算法\",{\"2\":{\"794\":1,\"797\":1}}],[\"数据结构可以是任何类型\",{\"1\":{\"686\":1}}],[\"数据结构要在网络中传输或保存到文件\",{\"1\":{\"682\":1}}],[\"数据结构从而获取长地址\",{\"1\":{\"638\":1}}],[\"数据结构从而获取短地址\",{\"1\":{\"638\":1}}],[\"数据结构\",{\"0\":{\"397\":1,\"398\":1,\"796\":1},\"1\":{\"660\":1,\"662\":1,\"682\":2},\"2\":{\"798\":1}}],[\"数据结构中\",{\"1\":{\"332\":1}}],[\"数据结构比较\",{\"1\":{\"294\":1}}],[\"数据以字段的形式存在\",{\"1\":{\"310\":1}}],[\"数据类型对比表摘自\",{\"1\":{\"301\":1}}],[\"数据类型\",{\"1\":{\"301\":1}}],[\"数据类型比较\",{\"0\":{\"301\":1}}],[\"数据类型优化原则\",{\"0\":{\"282\":1}}],[\"数据类型优化\",{\"1\":{\"281\":1}}],[\"数据迁移\",{\"0\":{\"258\":1}}],[\"数据存储在一个位置\",{\"1\":{\"212\":1}}],[\"数据根据\",{\"1\":{\"129\":1}}],[\"数据定义\",{\"0\":{\"91\":1}}],[\"数据定义语言\",{\"0\":{\"87\":1},\"1\":{\"87\":1}}],[\"数据控制语言\",{\"0\":{\"90\":1},\"1\":{\"90\":1}}],[\"数据操纵语言\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"数据如何分解\",{\"1\":{\"82\":1}}],[\"数据表中对储存数据对象予以唯一和完整标识的数据列或属性的组合\",{\"1\":{\"228\":1}}],[\"数据表\",{\"0\":{\"96\":1},\"1\":{\"82\":1,\"91\":1}}],[\"数据库并通过网络发送\",{\"1\":{\"455\":1}}],[\"数据库实例\",{\"1\":{\"298\":1}}],[\"数据库对象差异\",{\"0\":{\"298\":1}}],[\"数据库比较\",{\"0\":{\"295\":1}}],[\"数据库理论\",{\"0\":{\"286\":1}}],[\"数据库扩容\",{\"1\":{\"285\":1}}],[\"数据库结构优化可以从以下方向着手\",{\"1\":{\"281\":1}}],[\"数据库按照从右到左的顺序解析\",{\"1\":{\"271\":1}}],[\"数据库按照从右到左的顺序处理\",{\"1\":{\"270\":1}}],[\"数据库优化的路线一般为\",{\"1\":{\"262\":1}}],[\"数据库优化\",{\"0\":{\"262\":1}}],[\"数据库服务器磁盘使用率大大降低\",{\"1\":{\"248\":1}}],[\"数据库隔离级别解决的问题\",{\"1\":{\"239\":1}}],[\"数据库隔离级别\",{\"1\":{\"239\":1}}],[\"数据库管理系统提供了事务的隔离级别\",{\"1\":{\"238\":1}}],[\"数据库事务正确执行的四个基本要素\",{\"1\":{\"237\":1}}],[\"数据库的乐观锁和悲观锁如何实现\",{\"1\":{\"230\":1}}],[\"数据库的乐观锁和悲观锁是什么\",{\"1\":{\"230\":1}}],[\"数据库的更多信息\",{\"1\":{\"52\":1}}],[\"数据库约束\",{\"1\":{\"228\":1}}],[\"数据库和表都有模式\",{\"1\":{\"82\":1}}],[\"数据库\",{\"0\":{\"92\":1},\"1\":{\"82\":1,\"91\":1,\"298\":1}}],[\"数据库术语\",{\"0\":{\"82\":1}}],[\"数据量大两个问题的\",{\"1\":{\"245\":1}}],[\"数据量将从\",{\"1\":{\"73\":1}}],[\"数据量也很庞大\",{\"1\":{\"72\":1}}],[\"数据权限\",{\"1\":{\"60\":1,\"70\":1}}],[\"数据了\",{\"1\":{\"28\":1,\"29\":1}}],[\"数据持久化\",{\"1\":{\"28\":1}}],[\"数据共享\",{\"1\":{\"28\":1}}],[\"就有可能将公钥的\",{\"1\":{\"861\":1}}],[\"就有可能让协程不会出现阻塞\",{\"1\":{\"709\":1}}],[\"就近原则\",{\"1\":{\"811\":1}}],[\"就无法再给通道传入其他数据\",{\"1\":{\"701\":1}}],[\"就无法使用了\",{\"1\":{\"678\":1}}],[\"就没有机会输出\",{\"1\":{\"700\":1}}],[\"就\",{\"1\":{\"689\":1}}],[\"就必须对其编码和解码\",{\"1\":{\"682\":1}}],[\"就将该文件的长度截为\",{\"1\":{\"680\":1}}],[\"就创建该文件\",{\"1\":{\"680\":1}}],[\"就指向了当前的方法实现\",{\"1\":{\"662\":1}}],[\"就应该遵守这些约定\",{\"1\":{\"658\":1}}],[\"就应该使用结构体\",{\"1\":{\"639\":1}}],[\"就在普通的值类型上定义方法\",{\"1\":{\"653\":1}}],[\"就在接收者的指针类型上定义该方法\",{\"1\":{\"653\":1}}],[\"就在此时\",{\"1\":{\"467\":1}}],[\"就更是如此了\",{\"1\":{\"653\":1}}],[\"就好像它是一个独立实体的一部分\",{\"1\":{\"639\":1}}],[\"就如同数组索引符号一样\",{\"1\":{\"605\":1}}],[\"就等于完整的\",{\"1\":{\"585\":1}}],[\"就等于\",{\"1\":{\"585\":1}}],[\"就很明显需要用一个\",{\"1\":{\"550\":1}}],[\"就重置为\",{\"1\":{\"513\":1}}],[\"就要比任何非静态和编译型语言快\",{\"1\":{\"499\":1}}],[\"就要求\",{\"1\":{\"28\":1}}],[\"就需要针对操作系统和处理器架构\",{\"1\":{\"481\":1}}],[\"就需要根据实际情况进行相应地修改了\",{\"1\":{\"481\":1}}],[\"就连它的源码文件格式都是使用的\",{\"1\":{\"475\":1}}],[\"就开始研发一款以\",{\"1\":{\"469\":1}}],[\"就进入到了饥饿模式\",{\"1\":{\"420\":1}}],[\"就像oauth\",{\"1\":{\"873\":1}}],[\"就像以下代码\",{\"1\":{\"709\":1}}],[\"就像一个可以用于发送类型化数据的管道\",{\"1\":{\"699\":1}}],[\"就像当\",{\"1\":{\"689\":1}}],[\"就像那些通用方法那样\",{\"1\":{\"658\":1}}],[\"就像类那样\",{\"1\":{\"652\":1}}],[\"就像是面向对象语言中的\",{\"1\":{\"651\":1}}],[\"就像在面向对象语言中那样\",{\"1\":{\"642\":1}}],[\"就像在面向对象语言所作的那样\",{\"1\":{\"640\":1}}],[\"就像在基于类的\",{\"1\":{\"642\":1}}],[\"就像数组和结构体一样\",{\"1\":{\"605\":1}}],[\"就像上面警告所指出的那样\",{\"1\":{\"564\":1}}],[\"就像输出文本到终端\",{\"1\":{\"563\":1}}],[\"就像这样\",{\"1\":{\"562\":1,\"606\":1}}],[\"就像\",{\"1\":{\"561\":2,\"562\":1,\"640\":1,\"655\":1}}],[\"就像调用一个函数一样\",{\"1\":{\"511\":1}}],[\"就像操作系统要负责线程的调度一样\",{\"1\":{\"412\":1}}],[\"就像下面这样\",{\"1\":{\"29\":1}}],[\"就比较简单了\",{\"1\":{\"383\":1}}],[\"就不应该被复制\",{\"1\":{\"382\":1}}],[\"就新建一个bucket\",{\"1\":{\"372\":1}}],[\"就做了随机播种\",{\"1\":{\"359\":1}}],[\"就意味着满足了条件\",{\"1\":{\"316\":1}}],[\"就能够使得该表达式的结果为\",{\"1\":{\"521\":1}}],[\"就能很好的解决这个问题\",{\"1\":{\"410\":1}}],[\"就能确定其它信息\",{\"1\":{\"288\":1}}],[\"就能顺利启动\",{\"1\":{\"51\":1}}],[\"就最好让单表行数越少\",{\"1\":{\"247\":1}}],[\"就停止匹配\",{\"1\":{\"226\":1}}],[\"就形成了带有顺序访问指针的\",{\"1\":{\"215\":1}}],[\"就完成了用户账号模块的设计\",{\"1\":{\"72\":1}}],[\"就是说你可以把\",{\"1\":{\"764\":1}}],[\"就是所谓的信号量模式\",{\"1\":{\"704\":1}}],[\"就是通道值被接收时\",{\"1\":{\"701\":1}}],[\"就是通过使用空接口\",{\"1\":{\"664\":1}}],[\"就是通过这种形式实现的\",{\"1\":{\"497\":1}}],[\"就是发生了错误\",{\"1\":{\"687\":1}}],[\"就是成功\",{\"1\":{\"687\":1}}],[\"就是第一个真实的\",{\"1\":{\"682\":1}}],[\"就是错误的\",{\"1\":{\"654\":1}}],[\"就是一个空值\",{\"1\":{\"608\":1}}],[\"就是一个值类型的空值\",{\"1\":{\"608\":1}}],[\"就是空值\",{\"1\":{\"608\":1}}],[\"就是用这种方式创建的\",{\"1\":{\"605\":1}}],[\"就是用在利用\",{\"1\":{\"389\":1}}],[\"就是需要被升序排序的数组或切片\",{\"1\":{\"600\":1}}],[\"就是从\",{\"1\":{\"585\":1}}],[\"就是依照这个原则实现的\",{\"1\":{\"577\":1}}],[\"就是这样做的\",{\"1\":{\"675\":1}}],[\"就是这个计算所消耗的时间\",{\"1\":{\"576\":1}}],[\"就是这种方案的一个代表\",{\"1\":{\"28\":1}}],[\"就是很好的例子\",{\"1\":{\"565\":1}}],[\"就是不被允许的\",{\"1\":{\"518\":1}}],[\"就是以函数作为返回类型\",{\"1\":{\"509\":1}}],[\"就是将一切没有必要的东西都去掉\",{\"1\":{\"467\":1}}],[\"就是\",{\"1\":{\"328\":1,\"359\":1,\"438\":1,\"530\":1,\"608\":1}}],[\"就是分配的位置\",{\"1\":{\"322\":1}}],[\"就是动物是一个大父类\",{\"1\":{\"315\":2}}],[\"就是对应\",{\"1\":{\"605\":1}}],[\"就是对三者进行初始化的一种操作方式\",{\"1\":{\"588\":1}}],[\"就是对记录进行排序\",{\"1\":{\"304\":1}}],[\"就是对象属性了\",{\"1\":{\"63\":1}}],[\"就是部分函数依赖\",{\"1\":{\"287\":1}}],[\"就是介于应用服务器和数据库服务器之间\",{\"1\":{\"251\":1}}],[\"就是表现为json格式的claims\",{\"1\":{\"39\":1}}],[\"就可以用公钥加密信息\",{\"1\":{\"860\":1}}],[\"就可以了\",{\"1\":{\"678\":1}}],[\"就可以调用该方法\",{\"1\":{\"676\":1}}],[\"就可以调用它\",{\"1\":{\"659\":1}}],[\"就可以从它读取数据\",{\"1\":{\"662\":1}}],[\"就可以通过\",{\"1\":{\"645\":1}}],[\"就可以禁止使用\",{\"1\":{\"642\":1}}],[\"就可以使用\",{\"1\":{\"628\":1}}],[\"就可以使用索引来对结果排序\",{\"1\":{\"225\":1}}],[\"就可以\",{\"1\":{\"608\":1}}],[\"就可以优雅地解决这个问题\",{\"1\":{\"607\":1}}],[\"就可以这样调用\",{\"1\":{\"561\":1}}],[\"就可以像面向对象语言那样使用点标记来调用\",{\"1\":{\"506\":1}}],[\"就可以自动生成一个接收者是对应指针类型的方法\",{\"1\":{\"381\":1}}],[\"就可以自动发送\",{\"1\":{\"38\":1}}],[\"就可以抢先进来执行\",{\"1\":{\"330\":1}}],[\"就可以在缓存里缓存更多的行\",{\"1\":{\"246\":1}}],[\"就可以返回给用户\",{\"1\":{\"36\":1}}],[\"就构成整个jwt对象token\",{\"1\":{\"36\":1}}],[\"就会返回具体的错误信息\",{\"1\":{\"662\":1}}],[\"就会返回\",{\"1\":{\"572\":1}}],[\"就会跳转到\",{\"1\":{\"559\":1}}],[\"就会发生内存泄露\",{\"1\":{\"445\":1}}],[\"就会导致\",{\"1\":{\"438\":1}}],[\"就会被放入到全局队列中\",{\"1\":{\"409\":1}}],[\"就会从其他的\",{\"1\":{\"409\":1}}],[\"就会执行\",{\"1\":{\"389\":1,\"662\":1}}],[\"就会锁定这条主键索引\",{\"1\":{\"235\":1}}],[\"就会单点失败\",{\"1\":{\"28\":1}}],[\"就会阻塞后续执行\",{\"1\":{\"11\":1}}],[\"不建议使用此参数\",{\"1\":{\"873\":1}}],[\"不建议\",{\"1\":{\"867\":1}}],[\"不应该\",{\"1\":{\"867\":1}}],[\"不应该由\",{\"1\":{\"654\":1}}],[\"不应当\",{\"1\":{\"867\":1}}],[\"不安全的\",{\"1\":{\"854\":1}}],[\"不安全的jwt\",{\"0\":{\"854\":1}}],[\"不得设置内容类型声明\",{\"1\":{\"850\":1}}],[\"不更改本地\",{\"1\":{\"829\":1}}],[\"不再进行赋值\",{\"1\":{\"753\":1}}],[\"不再使用\",{\"1\":{\"481\":1}}],[\"不必每次都关闭\",{\"1\":{\"709\":1}}],[\"不必严格符合接收者的类型\",{\"1\":{\"380\":1}}],[\"不然代码就阻塞在\",{\"1\":{\"708\":1}}],[\"不将通道作为参数传递给协程\",{\"1\":{\"707\":1}}],[\"不停的接收数据来等待所有的协程完成\",{\"1\":{\"705\":1}}],[\"不返回结果\",{\"1\":{\"705\":1}}],[\"不论它启动了多少个协程\",{\"1\":{\"695\":1}}],[\"不出现栈溢出\",{\"1\":{\"694\":1}}],[\"不与操作系统和编程语言的类型相关\",{\"1\":{\"682\":1}}],[\"不用管通道中存放的是什么\",{\"1\":{\"707\":1}}],[\"不用理解这个数据的结构\",{\"1\":{\"684\":1}}],[\"不用它的值\",{\"1\":{\"662\":1}}],[\"不用考虑月份的日期\",{\"1\":{\"551\":1}}],[\"不合适时\",{\"1\":{\"662\":1}}],[\"不知道类似面向对象语言的类继承的概念\",{\"1\":{\"659\":1}}],[\"不使用会造成内存浪费\",{\"1\":{\"803\":2}}],[\"不使用没关系\",{\"1\":{\"649\":1}}],[\"不使用递归但使用闭包改写第\",{\"1\":{\"574\":1}}],[\"不接受任何参数\",{\"1\":{\"574\":1}}],[\"不打印相应的数字\",{\"1\":{\"554\":1}}],[\"不像大多数面向对象编程语言\",{\"1\":{\"662\":1}}],[\"不像\",{\"1\":{\"547\":1,\"580\":1,\"640\":1}}],[\"不像其它语言\",{\"1\":{\"320\":1}}],[\"不包含后面的分隔符\",{\"1\":{\"678\":1}}],[\"不包含任何方法\",{\"1\":{\"663\":1}}],[\"不包含字符串\",{\"1\":{\"536\":2}}],[\"不包括第四个\",{\"1\":{\"585\":1}}],[\"不包括密码信息\",{\"1\":{\"72\":1}}],[\"不包括密码\",{\"1\":{\"72\":1}}],[\"不限制错误打印的个数\",{\"1\":{\"481\":1}}],[\"不仅能避免多线程同步问题\",{\"1\":{\"803\":1}}],[\"不仅可以对\",{\"1\":{\"662\":1}}],[\"不仅限于例子中的递归\",{\"1\":{\"577\":1}}],[\"不仅仅是结构体类型\",{\"1\":{\"651\":1}}],[\"不仅仅是\",{\"1\":{\"506\":1}}],[\"不仅支持了日益重要的多核与多处理器计算机\",{\"1\":{\"473\":1}}],[\"不仅如此\",{\"1\":{\"471\":1}}],[\"不仅锁定\",{\"1\":{\"235\":1}}],[\"不仅锁定一个记录上的索引\",{\"1\":{\"235\":1}}],[\"不真正执行\",{\"1\":{\"449\":1}}],[\"不过所有的迭代都必须是独立完成的\",{\"1\":{\"706\":1}}],[\"不过有两点不同\",{\"1\":{\"698\":1}}],[\"不过有些开发者还是希望能够通过支付一定金额以获得更好的开发环境\",{\"1\":{\"490\":1}}],[\"不过届时\",{\"1\":{\"695\":1}}],[\"不过过去的软件开发经验告诉我们这会带来更高的复杂度\",{\"1\":{\"694\":1}}],[\"不过在实际应用中你必须要合理的处理这些错误\",{\"1\":{\"682\":1}}],[\"不过在大部分情况下可以通过接口\",{\"1\":{\"561\":1}}],[\"不过它使用下标而不是具名的字段\",{\"1\":{\"640\":1}}],[\"不过因为没有接收者\",{\"1\":{\"701\":1}}],[\"不过因为\",{\"1\":{\"639\":1}}],[\"不过我们很不鼓励这样做\",{\"1\":{\"694\":1}}],[\"不过我们也可以定义没有形参名的函数\",{\"1\":{\"562\":1}}],[\"不过我们可以通过使用匿名函数\",{\"1\":{\"561\":1}}],[\"不过我们将会在这一小节对此进行解释\",{\"1\":{\"547\":1}}],[\"不过将在第\",{\"1\":{\"549\":1}}],[\"不过如果你实际存的数字超出你要转换到的类型的取值范围的话\",{\"1\":{\"523\":1}}],[\"不过前者将格式化后的字符串以返回值的形式返回给调用者\",{\"1\":{\"517\":1}}],[\"不过自动推断类型并不是任何时候都适用的\",{\"1\":{\"515\":1}}],[\"不过需要注意的是\",{\"1\":{\"513\":1}}],[\"不过这个模式只有当所有的函数都是同一种签名时可用\",{\"1\":{\"689\":1}}],[\"不过这很好地展示了一个\",{\"1\":{\"510\":1}}],[\"不过这些命名都是来自于\",{\"1\":{\"481\":1}}],[\"不过目前还是有一些\",{\"1\":{\"489\":1}}],[\"不过\",{\"1\":{\"469\":1,\"531\":1,\"858\":1}}],[\"不过现阶段的\",{\"1\":{\"467\":1}}],[\"不过他考察的内容特别多\",{\"1\":{\"438\":1}}],[\"不过你还是可以把它俩的执行效率看成是相等的\",{\"1\":{\"303\":1}}],[\"不喜欢巴拉巴拉详细解释一通\",{\"1\":{\"438\":1}}],[\"不易维护\",{\"1\":{\"427\":1}}],[\"不挂起\",{\"1\":{\"420\":1}}],[\"不断增加的话\",{\"1\":{\"410\":1}}],[\"不超过\",{\"1\":{\"409\":1}}],[\"不为空\",{\"1\":{\"405\":3}}],[\"不影响调用者\",{\"1\":{\"382\":1}}],[\"不管是\",{\"1\":{\"680\":1}}],[\"不管是按照\",{\"1\":{\"611\":1}}],[\"不管外部函数退出与否\",{\"1\":{\"574\":1}}],[\"不管你声明在哪个源文件里或在哪个源文件里调用该变量\",{\"1\":{\"515\":1}}],[\"不管接收者类型是值类型还是指针类型\",{\"1\":{\"381\":1}}],[\"不管方法的接收者是什么类型\",{\"1\":{\"380\":1}}],[\"不管包被导入多少次\",{\"1\":{\"350\":1}}],[\"不是可外部定义\",{\"1\":{\"686\":1}}],[\"不是可设置的\",{\"1\":{\"669\":1}}],[\"不是所有的数据都可以编码为\",{\"1\":{\"682\":1}}],[\"不是写入一个文件\",{\"1\":{\"682\":1}}],[\"不是写给机器看的\",{\"1\":{\"474\":1}}],[\"不是一个指针\",{\"1\":{\"640\":1}}],[\"不是必须的\",{\"1\":{\"640\":1}}],[\"不是按照\",{\"1\":{\"609\":1}}],[\"不是\",{\"1\":{\"515\":1}}],[\"不是由该方法是否修改了调用者\",{\"1\":{\"382\":1}}],[\"不是由继承自特定的类或实现特定的接口\",{\"1\":{\"378\":1}}],[\"不是每个bmap都有会这个字段\",{\"1\":{\"365\":1}}],[\"不是每一个\",{\"1\":{\"363\":1}}],[\"不注意就容易发生程序运行时并发读写导致的panic\",{\"1\":{\"358\":1}}],[\"不共享内存\",{\"1\":{\"346\":1}}],[\"不会出现错误但也没有输出呢\",{\"1\":{\"700\":1}}],[\"不会对\",{\"1\":{\"580\":1}}],[\"不会执行后续的代码\",{\"1\":{\"556\":1}}],[\"不会产生错误\",{\"1\":{\"527\":1}}],[\"不会有额外性能的开销\",{\"1\":{\"439\":1}}],[\"不会尝试获取锁\",{\"1\":{\"420\":1}}],[\"不会真正影响调用者\",{\"1\":{\"381\":1}}],[\"不会自动生成对应接收者是值类型的方法\",{\"1\":{\"381\":1}}],[\"不会\",{\"1\":{\"335\":1}}],[\"不会展开讲解特性\",{\"1\":{\"80\":1,\"168\":1}}],[\"不存在\",{\"1\":{\"608\":2}}],[\"不存在还是它对应的\",{\"1\":{\"608\":1}}],[\"不存在像\",{\"1\":{\"520\":1}}],[\"不存在自我引导之类的功能\",{\"1\":{\"481\":1}}],[\"不存在的\",{\"1\":{\"335\":1}}],[\"不存储\",{\"1\":{\"216\":1}}],[\"不屏蔽底层且底层友好\",{\"1\":{\"320\":1}}],[\"不可否认性和可选的机密性\",{\"1\":{\"869\":1}}],[\"不可解析的字符串会导致错误并被打印出来\",{\"1\":{\"689\":1}}],[\"不可以\",{\"1\":{\"506\":1}}],[\"不可以被外部访问\",{\"1\":{\"314\":1}}],[\"不可重复读\",{\"1\":{\"238\":1,\"239\":1}}],[\"不受外界影响\",{\"1\":{\"310\":1}}],[\"不符合范式的关系\",{\"1\":{\"288\":1}}],[\"不引用索引的第一个列时\",{\"1\":{\"279\":1}}],[\"不需要一个显式的类定义\",{\"1\":{\"659\":1}}],[\"不需要说明长度\",{\"1\":{\"585\":1}}],[\"不需要函数体\",{\"1\":{\"561\":1}}],[\"不需要给出函数体\",{\"1\":{\"561\":1}}],[\"不需要插入已编译包的源代码\",{\"1\":{\"506\":1}}],[\"不需要依赖任何其它文件\",{\"1\":{\"487\":1}}],[\"不需要在heap上分配\",{\"1\":{\"414\":1}}],[\"不需要开发人员特殊处理\",{\"1\":{\"412\":1}}],[\"不需要显式声明\",{\"1\":{\"392\":1}}],[\"不需要额外增派人手\",{\"1\":{\"252\":1}}],[\"不需要代理层的二次转发请求\",{\"1\":{\"252\":1}}],[\"不需要用户干预\",{\"1\":{\"233\":1}}],[\"不需要考虑=\",{\"1\":{\"227\":1}}],[\"不需要语句结束标识\",{\"1\":{\"166\":1,\"202\":1}}],[\"不重复的索引值和数据表记录总数的比值\",{\"1\":{\"221\":1}}],[\"不允许显式的超出包范围的\",{\"1\":{\"689\":1}}],[\"不允许有\",{\"1\":{\"662\":1}}],[\"不允许有空值\",{\"1\":{\"212\":1}}],[\"不允许方法重载\",{\"1\":{\"651\":1}}],[\"不允许并发读写\",{\"1\":{\"405\":1}}],[\"不允许出现类型不相同的变量\",{\"1\":{\"387\":1}}],[\"不允许在触发器中使用\",{\"1\":{\"166\":1,\"202\":1}}],[\"不适合高并发的场景\",{\"1\":{\"164\":1,\"200\":1}}],[\"不通用\",{\"1\":{\"164\":1,\"200\":1}}],[\"不能推送\",{\"1\":{\"830\":1}}],[\"不能随意地用\",{\"1\":{\"689\":1}}],[\"不能执行抛异常操作\",{\"1\":{\"687\":1}}],[\"不能编译\",{\"1\":{\"643\":1}}],[\"不能用来修改\",{\"1\":{\"591\":1}}],[\"不能用于\",{\"1\":{\"569\":1}}],[\"不能存储更多数据的时候自动扩容\",{\"1\":{\"590\":1}}],[\"不能嵌套\",{\"1\":{\"561\":1}}],[\"不能单纯地使用索引来判断是否为同一个字符\",{\"1\":{\"553\":1}}],[\"不能去掉的就无底线地简化\",{\"1\":{\"467\":1}}],[\"不能被实现理解的作用域值应该被忽略\",{\"1\":{\"873\":1}}],[\"不能被转换为整数\",{\"1\":{\"550\":1}}],[\"不能被\",{\"1\":{\"438\":1}}],[\"不能被安全地复制\",{\"1\":{\"382\":1}}],[\"不能作为map\",{\"1\":{\"376\":1}}],[\"不能对未初始化的map进行赋值\",{\"1\":{\"362\":1}}],[\"不能在原有文件中书写\",{\"1\":{\"342\":1}}],[\"不能解决幻读问题\",{\"1\":{\"235\":1}}],[\"不能是范围匹配\",{\"1\":{\"226\":1}}],[\"不能回退\",{\"1\":{\"151\":1,\"187\":1}}],[\"不能泄露给用户\",{\"1\":{\"36\":1}}],[\"不支持循环数据结构\",{\"1\":{\"682\":1}}],[\"不支持静态变量\",{\"1\":{\"477\":1}}],[\"不支持泛型\",{\"1\":{\"477\":1}}],[\"不支持动态链接库\",{\"1\":{\"477\":1}}],[\"不支持动态加载代码\",{\"1\":{\"477\":1}}],[\"不支持隐式转换\",{\"1\":{\"477\":1}}],[\"不支持函数重载和操作符重载\",{\"1\":{\"477\":1}}],[\"不支持下标操作\",{\"1\":{\"321\":1}}],[\"不支持多继承\",{\"1\":{\"311\":1}}],[\"不支持故障恢复\",{\"1\":{\"294\":1}}],[\"不支持事务\",{\"1\":{\"294\":1}}],[\"不支持任何范围查询\",{\"1\":{\"217\":1}}],[\"不支持集合的操作\",{\"1\":{\"163\":1,\"199\":1}}],[\"不支持\",{\"1\":{\"141\":1,\"174\":1,\"243\":2,\"484\":1}}],[\"不变\",{\"1\":{\"137\":1,\"170\":1}}],[\"不要设置\",{\"1\":{\"696\":1}}],[\"不要执行它\",{\"1\":{\"689\":1}}],[\"不要在\",{\"1\":{\"660\":1}}],[\"不要忘记\",{\"1\":{\"652\":1}}],[\"不要忘记它的括号\",{\"1\":{\"569\":1}}],[\"不要使用打印状态来表明通道的发送和接收顺序\",{\"1\":{\"700\":1}}],[\"不要使用全局变量或者共享内存\",{\"1\":{\"694\":1}}],[\"不要使用\",{\"1\":{\"605\":1}}],[\"不要小看它\",{\"1\":{\"552\":1}}],[\"不要同时在\",{\"1\":{\"549\":1}}],[\"不要用异常代替错误\",{\"1\":{\"425\":1}}],[\"不要通过共享内存来通信\",{\"1\":{\"396\":1,\"693\":1}}],[\"不要直接把\",{\"1\":{\"324\":1}}],[\"不要查询不需要的列\",{\"1\":{\"265\":1}}],[\"不要太大\",{\"1\":{\"246\":1}}],[\"不要为每个列都创建独立索引\",{\"1\":{\"222\":1}}],[\"不要为所有列都创建索引\",{\"1\":{\"219\":1}}],[\"不要新建索引\",{\"1\":{\"219\":1}}],[\"不要滥用通配符\",{\"1\":{\"133\":1}}],[\"不要发送任何敏感信息\",{\"1\":{\"39\":1}}],[\"不等于\",{\"1\":{\"130\":1}}],[\"不行吗\",{\"1\":{\"72\":1}}],[\"不同包存放在不同的目录下\",{\"1\":{\"627\":1}}],[\"不同类型以及他们的属性和方法\",{\"1\":{\"492\":1}}],[\"不同对象针对同一消息就有多种表现\",{\"1\":{\"391\":1}}],[\"不同之处\",{\"1\":{\"389\":1}}],[\"不同之处在于\",{\"1\":{\"387\":1}}],[\"不同数据类型的底层存储结构和实现可能不太一样\",{\"1\":{\"329\":1}}],[\"不同数据库中\",{\"1\":{\"301\":1}}],[\"不同数据库的函数往往各不相同\",{\"1\":{\"146\":1,\"179\":1}}],[\"不同点\",{\"1\":{\"322\":1}}],[\"不同场景下\",{\"1\":{\"284\":1}}],[\"不同的地方在饿汉式方式是只要singleton类被装载就会实例化\",{\"1\":{\"803\":1}}],[\"不同的错误处理必须对应不同的函数类型\",{\"1\":{\"689\":1}}],[\"不同的问候应该放到单独的\",{\"1\":{\"627\":1}}],[\"不同的数组总是代表不同的存储\",{\"1\":{\"585\":1}}],[\"不同的\",{\"1\":{\"455\":1}}],[\"不同的进程通过进程间的通信方式来通信\",{\"1\":{\"408\":1}}],[\"不同的存储引擎保存数据和索引的方式是不同的\",{\"1\":{\"293\":1}}],[\"不同的是每个节点的查询可以并行执行\",{\"1\":{\"256\":1}}],[\"不同的分库分表中间件各自有什么特性\",{\"1\":{\"250\":1}}],[\"不同的角色有不同的权限\",{\"1\":{\"64\":1}}],[\"不同\",{\"1\":{\"167\":1,\"203\":1,\"215\":1,\"532\":1,\"869\":1}}],[\"不同项目间的权限数据是相互隔离的\",{\"1\":{\"70\":1}}],[\"不同角色具有不同的权限\",{\"1\":{\"65\":1}}],[\"不同于常见的将用户通过某种方式关联到权限的方式\",{\"1\":{\"63\":1}}],[\"不便于管理\",{\"1\":{\"61\":1}}],[\"不想cookies只能在web环境起作用\",{\"1\":{\"39\":1}}],[\"不利于分布式应用\",{\"1\":{\"29\":1}}],[\"不好\",{\"1\":{\"28\":1}}],[\"不配置nacos报错\",{\"1\":{\"4\":2}}],[\"由客户指定的索赔\",{\"1\":{\"868\":1}}],[\"由oauth\",{\"1\":{\"868\":1}}],[\"由rfc2616\",{\"1\":{\"868\":1}}],[\"由json\",{\"1\":{\"868\":2}}],[\"由三个元素组成\",{\"1\":{\"858\":1}}],[\"由一个简单\",{\"1\":{\"854\":1}}],[\"由枚举值找到枚举名字\",{\"1\":{\"760\":1}}],[\"由枚举名字找到枚举值\",{\"1\":{\"760\":1}}],[\"由其负责协程之间的通信\",{\"1\":{\"699\":1}}],[\"由此我们可以发现\",{\"1\":{\"553\":1}}],[\"由此得知用户的身份\",{\"1\":{\"28\":1}}],[\"由花括号括起来的代码块会被重复执行已知次数\",{\"1\":{\"553\":1}}],[\"由上至下代表优先级由高到低\",{\"1\":{\"529\":1}}],[\"由控制器计算的触发堆的大小\",{\"1\":{\"432\":1}}],[\"由启动时环境变量gomaxprocs或者是由runtime的方法gomaxprocs\",{\"1\":{\"409\":1}}],[\"由应用程序和数据库共同控制\",{\"1\":{\"254\":1}}],[\"由于没有signatures\",{\"1\":{\"854\":1}}],[\"由于没有signatures或加密\",{\"1\":{\"854\":1}}],[\"由于容器中元素的数量通常是已知的\",{\"1\":{\"709\":1}}],[\"由于打印状态和通道实际发生读写的时间延迟会导致和真实发生的顺序不同\",{\"1\":{\"700\":1}}],[\"由于操作系统线程上的协程时间片\",{\"1\":{\"694\":1}}],[\"由于测试需要具体的输入用例且不可能测试到所有的用例\",{\"1\":{\"689\":1}}],[\"由于索引的存在\",{\"1\":{\"580\":1}}],[\"由于本例的函数调用者属于\",{\"1\":{\"550\":1}}],[\"由于本人较为熟悉\",{\"1\":{\"259\":1}}],[\"由于其符号的原因\",{\"1\":{\"550\":1}}],[\"由于一个指针导致的间接引用\",{\"1\":{\"547\":1}}],[\"由于各种原因\",{\"1\":{\"547\":1}}],[\"由于编译器行尾自动补全分号的缘故\",{\"1\":{\"532\":1}}],[\"由于该编码对占用字节长度的不定性\",{\"1\":{\"532\":1}}],[\"由于精确度的缘故\",{\"1\":{\"523\":1}}],[\"由于\",{\"1\":{\"511\":1,\"686\":1,\"688\":1}}],[\"由于出版时间限制\",{\"1\":{\"499\":1}}],[\"由于在类装载的时候完成实例化\",{\"1\":{\"803\":2}}],[\"由于在\",{\"1\":{\"483\":1}}],[\"由于网络环境的特殊性\",{\"1\":{\"483\":1}}],[\"由于网络请求和\",{\"1\":{\"330\":1}}],[\"由于内存问题\",{\"1\":{\"473\":1}}],[\"由于内节点\",{\"1\":{\"216\":1}}],[\"由于二进制文件一般都是非常巨大的\",{\"1\":{\"467\":1}}],[\"由于分层设计\",{\"1\":{\"461\":1}}],[\"由于堆中对象插入屏障\",{\"1\":{\"429\":1}}],[\"由于并发特性\",{\"1\":{\"429\":1}}],[\"由于并不是所有节点都具有相同的域\",{\"1\":{\"215\":1}}],[\"由于每个bucket可以存放8个键值对\",{\"1\":{\"367\":1}}],[\"由于原子\",{\"1\":{\"330\":1}}],[\"由于有这个特性\",{\"1\":{\"324\":1}}],[\"由于缺乏类型层次\",{\"1\":{\"312\":1}}],[\"由于不同数据库的存储过程语法几乎都不一样\",{\"1\":{\"164\":1,\"200\":1}}],[\"由于是预先编译\",{\"1\":{\"164\":1,\"200\":1}}],[\"由于使用标头和有效负载计算签名\",{\"1\":{\"26\":1}}],[\"由\",{\"1\":{\"83\":1,\"296\":1,\"585\":1}}],[\"登录系统\",{\"1\":{\"846\":1}}],[\"登录当前操作系统的作用范围\",{\"1\":{\"811\":1}}],[\"登录命令\",{\"1\":{\"782\":1}}],[\"登录\",{\"1\":{\"782\":1}}],[\"登录密码\",{\"1\":{\"72\":1}}],[\"登录账号表\",{\"1\":{\"72\":1}}],[\"登录账号\",{\"1\":{\"72\":1}}],[\"登录时间等等\",{\"1\":{\"28\":1}}],[\"登录elasticsearch\",{\"1\":{\"6\":1}}],[\"在系统变量中新建环境变量node\",{\"1\":{\"981\":1}}],[\"在nodejs安装目录中新建node\",{\"1\":{\"979\":1,\"980\":1}}],[\"在nonce值中必须存在足够的熵\",{\"1\":{\"873\":1,\"892\":1}}],[\"在从客户端接收并验证有效的授权令牌请求后\",{\"1\":{\"883\":1}}],[\"在与最终用户交互时\",{\"1\":{\"875\":1}}],[\"在以下情况下\",{\"1\":{\"875\":2}}],[\"在可能的情况下\",{\"1\":{\"873\":1}}],[\"在可重复读\",{\"1\":{\"235\":1}}],[\"在授权服务器上有效的oauth\",{\"1\":{\"873\":1}}],[\"在amr声明中使用的特定值的定义超出了本规范的范围\",{\"1\":{\"869\":1}}],[\"在acid事务中对隔离性的要求很高\",{\"1\":{\"242\":1}}],[\"在id令牌不能被接受处理的过期时间或之后\",{\"1\":{\"869\":1}}],[\"在常见的特殊情况下\",{\"1\":{\"869\":1}}],[\"在发行方内部为最终用户提供的本地唯一且从未重新分配的标识符\",{\"1\":{\"869\":1}}],[\"在openid\",{\"1\":{\"869\":1}}],[\"在颁发者中为最终用户在本地唯一且从未重新分配的标识符\",{\"1\":{\"868\":1}}],[\"在特定情况下被认为是相互对等的一套认证方法或程序\",{\"1\":{\"868\":1}}],[\"在协议信息中使用这些值时\",{\"1\":{\"867\":1}}],[\"在协程里\",{\"1\":{\"708\":1}}],[\"在协程中\",{\"1\":{\"704\":1}}],[\"在协程和操作系统线程之间并无一对一的关系\",{\"1\":{\"694\":1}}],[\"在此流程中\",{\"1\":{\"887\":1}}],[\"在此\",{\"1\":{\"858\":1}}],[\"在此之前\",{\"1\":{\"476\":1}}],[\"在实践中\",{\"1\":{\"853\":1}}],[\"在实际编程中尽可能的使用这些接口\",{\"1\":{\"662\":1}}],[\"在实际开发中一般使用\",{\"1\":{\"501\":1}}],[\"在实际开发中\",{\"1\":{\"496\":1}}],[\"在实际执行中\",{\"1\":{\"303\":1}}],[\"在名称前加上命名空间\",{\"1\":{\"853\":1}}],[\"在过期日期后的几分钟内有效\",{\"1\":{\"852\":1}}],[\"在过去的\",{\"1\":{\"469\":1}}],[\"在签发方的上下文中\",{\"1\":{\"852\":1}}],[\"在深入了解\",{\"1\":{\"847\":1}}],[\"在行业中的常用方法\",{\"1\":{\"844\":1}}],[\"在类进行初始化时\",{\"1\":{\"803\":1}}],[\"在类装载的时候完成实例化\",{\"1\":{\"803\":2}}],[\"在类型之间也没有层级之说\",{\"1\":{\"475\":1}}],[\"在计算机系统中\",{\"1\":{\"801\":1}}],[\"在创建一个通道后使用\",{\"1\":{\"709\":1}}],[\"在其启动时\",{\"1\":{\"705\":1}}],[\"在其他协程运行时让\",{\"1\":{\"704\":1}}],[\"在其他语言中\",{\"1\":{\"698\":1}}],[\"在其他包里使用工厂方法\",{\"1\":{\"642\":1}}],[\"在循环中从通道\",{\"1\":{\"705\":1}}],[\"在循环中使用加号\",{\"1\":{\"532\":1}}],[\"在缓冲满载\",{\"1\":{\"703\":1}}],[\"在缓冲写入的最后千万不要忘了使用\",{\"1\":{\"682\":1}}],[\"在传送带上放置物品\",{\"1\":{\"699\":1}}],[\"在传统的面向对象语言中\",{\"1\":{\"475\":1}}],[\"在后台计算总和\",{\"1\":{\"694\":1}}],[\"在后面的章节\",{\"1\":{\"682\":1}}],[\"在后面用如下代码来测试\",{\"1\":{\"682\":1}}],[\"在相同的地址空间中并且分配了独立的栈\",{\"1\":{\"694\":1}}],[\"在同一个线程中\",{\"1\":{\"709\":1}}],[\"在同一个地址空间中\",{\"1\":{\"694\":1}}],[\"在同一个包中创建一个\",{\"1\":{\"627\":1}}],[\"在他们之上的\",{\"1\":{\"694\":1}}],[\"在诸多比较合适的范式中\",{\"1\":{\"694\":1}}],[\"在诸多问题上都不能给出令人满意的解决方案\",{\"1\":{\"467\":1}}],[\"在我们的模式中使用了两个帮助函数\",{\"1\":{\"689\":1}}],[\"在我们的系统中\",{\"1\":{\"72\":1}}],[\"在包内部\",{\"1\":{\"689\":2}}],[\"在包安装前的先决条件是要自动处理包自身依赖关系的安装\",{\"1\":{\"629\":1}}],[\"在栈顶处程序崩溃\",{\"1\":{\"689\":1}}],[\"在解析\",{\"1\":{\"688\":1}}],[\"在解码结构体的时候\",{\"1\":{\"686\":1}}],[\"在前面的章节中我们了解了\",{\"1\":{\"687\":1}}],[\"在前面章节完成对所有的\",{\"1\":{\"467\":1}}],[\"在输入流的结尾处\",{\"1\":{\"686\":1}}],[\"在读文件的时候\",{\"1\":{\"680\":1}}],[\"在读写\",{\"1\":{\"662\":1}}],[\"在很多情况下\",{\"1\":{\"678\":1}}],[\"在很多情况下这种比较是没有意义的\",{\"1\":{\"499\":1}}],[\"在之前的例子中\",{\"1\":{\"678\":1}}],[\"在之后m0就和其他的m一样了\",{\"1\":{\"414\":1}}],[\"在练习\",{\"1\":{\"676\":2,\"689\":1}}],[\"在经典的面向对象语言\",{\"1\":{\"671\":1}}],[\"在没有格式字符串的情况下还能如此漂亮地输出\",{\"1\":{\"670\":1}}],[\"在没有条件语句的情况下返回笛卡尔积\",{\"1\":{\"140\":1,\"171\":1}}],[\"在处理来自于外部的\",{\"1\":{\"662\":1}}],[\"在对象被\",{\"1\":{\"661\":1}}],[\"在哪儿碰到过面向对象的点号\",{\"1\":{\"659\":1}}],[\"在如\",{\"1\":{\"659\":1}}],[\"在标准库中这些通用方法都有一致的名字\",{\"1\":{\"658\":1}}],[\"在标准库就提供生成抽象语法树和通过抽象语法树对代码进行还原的功能\",{\"1\":{\"498\":1}}],[\"在指针上有一个方法\",{\"1\":{\"653\":1}}],[\"在值上有一个方法\",{\"1\":{\"653\":1}}],[\"在值和指针上调用方法\",{\"1\":{\"653\":1}}],[\"在值的类型为大型结构体时\",{\"1\":{\"382\":1}}],[\"在接收者准备好之前是阻塞的\",{\"1\":{\"701\":1}}],[\"在接收者中\",{\"1\":{\"686\":1}}],[\"在接收者是指针时\",{\"1\":{\"652\":1}}],[\"在接口上调用方法时\",{\"1\":{\"662\":1}}],[\"在接下来的内容中\",{\"1\":{\"521\":1}}],[\"在接下来的章节中\",{\"1\":{\"482\":1,\"576\":1,\"662\":1}}],[\"在接下来的文章里\",{\"1\":{\"447\":1}}],[\"在方法名之前\",{\"1\":{\"651\":1}}],[\"在上一部分章节\",{\"1\":{\"706\":1}}],[\"在上面的程序中\",{\"1\":{\"678\":1}}],[\"在上面的基础上\",{\"1\":{\"676\":1}}],[\"在上面的例子中\",{\"1\":{\"662\":1,\"663\":1,\"677\":1}}],[\"在上面例子的第二种情况中\",{\"1\":{\"640\":1}}],[\"在上例中即\",{\"1\":{\"662\":1}}],[\"在上述例子中\",{\"1\":{\"314\":1,\"315\":1,\"316\":1}}],[\"在定义它的包\",{\"1\":{\"640\":1}}],[\"在定义接口方式上的不同\",{\"1\":{\"392\":1}}],[\"在面向对象的编程语言中\",{\"1\":{\"639\":1}}],[\"在浏览器打开你的\",{\"1\":{\"638\":1}}],[\"在浏览器打开地址\",{\"1\":{\"628\":1}}],[\"在云端创建一个新的\",{\"1\":{\"635\":1}}],[\"在任何给定时间\",{\"1\":{\"699\":1}}],[\"在任何\",{\"1\":{\"632\":1}}],[\"在该目录下的命令行调用\",{\"1\":{\"631\":1}}],[\"在显示自定义包中的注释也有很好的效果\",{\"1\":{\"628\":1}}],[\"在主程序中构建一个充满不同类型元素的栈\",{\"1\":{\"676\":1}}],[\"在主程序中新建一个此类型的变量\",{\"1\":{\"662\":1}}],[\"在主程序外边定义了一个接收者类型是\",{\"1\":{\"662\":1}}],[\"在主程序\",{\"1\":{\"627\":1}}],[\"在贯穿本书的例子和练习中\",{\"1\":{\"614\":1}}],[\"在例子中我们看到\",{\"1\":{\"669\":1}}],[\"在例子\",{\"1\":{\"608\":1,\"704\":1}}],[\"在运行时进行\",{\"1\":{\"672\":1}}],[\"在运行时可以动态添加和删除\",{\"1\":{\"605\":1}}],[\"在运算时\",{\"1\":{\"527\":1}}],[\"在声明的时候不需要知道\",{\"1\":{\"605\":1}}],[\"在声明和包的设计方面\",{\"1\":{\"471\":1}}],[\"在索引\",{\"1\":{\"601\":3}}],[\"在拷贝结束后执行\",{\"1\":{\"593\":1}}],[\"在图\",{\"1\":{\"588\":1}}],[\"在赋值后修改\",{\"1\":{\"580\":1}}],[\"在闭包中使用到的变量可以是在闭包函数体内声明的\",{\"1\":{\"574\":1}}],[\"在闭包中引用包外的值\",{\"1\":{\"439\":1}}],[\"在多层嵌套的函数调用中调用\",{\"1\":{\"689\":1}}],[\"在多次调用中\",{\"1\":{\"574\":1}}],[\"在多段注释之间应以空行分隔加以区分\",{\"1\":{\"508\":1}}],[\"在必要时\",{\"1\":{\"566\":1}}],[\"在必要以及可行的情况下\",{\"1\":{\"511\":1}}],[\"在使用隐式流时\",{\"1\":{\"891\":1}}],[\"在使用授权码流时\",{\"1\":{\"888\":1}}],[\"在使用授权码流时向令牌端点发送令牌请求以获得令牌响应\",{\"1\":{\"880\":1}}],[\"在使用的请求参数允许的情况下\",{\"1\":{\"876\":1}}],[\"在使用\",{\"1\":{\"659\":1,\"678\":1}}],[\"在使用递归函数时经常会遇到的一个重要问题就是栈溢出\",{\"1\":{\"570\":1}}],[\"在使用变量的过程中可能对副本的值进行更改\",{\"1\":{\"563\":1}}],[\"在使用格式化说明符时\",{\"1\":{\"524\":1}}],[\"在初始化语句后方必须加上分号\",{\"1\":{\"549\":1}}],[\"在不同的阶段打印消息并观察输出\",{\"1\":{\"701\":1}}],[\"在不同的操作系统上运行的程序以不同的代码实现是非常少见的\",{\"1\":{\"633\":1}}],[\"在不同的情况执行不同的语句\",{\"1\":{\"549\":1}}],[\"在不同环境\",{\"1\":{\"284\":1}}],[\"在有接受者接收数据之前\",{\"1\":{\"701\":1}}],[\"在有些情况下\",{\"1\":{\"549\":1}}],[\"在有效期内将会一直有效\",{\"1\":{\"31\":1}}],[\"在下次稳定版本发布的时候\",{\"1\":{\"623\":1}}],[\"在下面的程序里\",{\"1\":{\"624\":1}}],[\"在下面的代码段中\",{\"1\":{\"590\":1}}],[\"在下面的例子中能看到可以通过在值的前面放上字段名来初始化字段的方式\",{\"1\":{\"640\":1}}],[\"在下面的例子中\",{\"1\":{\"565\":1,\"682\":1}}],[\"在下面这个代码片段中\",{\"1\":{\"551\":1}}],[\"在下面这个示例中\",{\"1\":{\"545\":1}}],[\"在下一节\",{\"1\":{\"532\":1,\"627\":1}}],[\"在下一轮\",{\"1\":{\"429\":1}}],[\"在字符串\",{\"1\":{\"536\":2,\"538\":1}}],[\"在字节内部已广泛使用\",{\"1\":{\"462\":1}}],[\"在中括号\",{\"1\":{\"532\":1}}],[\"在内\",{\"1\":{\"532\":1}}],[\"在内存中它们只能被近似的表示\",{\"1\":{\"626\":1}}],[\"在内存中的结构可以用下图表示\",{\"1\":{\"597\":1}}],[\"在内存中的结构是\",{\"1\":{\"580\":1}}],[\"在内存中\",{\"1\":{\"597\":1}}],[\"在内存中只会存在一份\",{\"1\":{\"324\":1}}],[\"在内存中只缓存索引\",{\"1\":{\"224\":1}}],[\"在内存管理方面也可以和\",{\"1\":{\"499\":1}}],[\"在书写表达式类似\",{\"1\":{\"547\":1}}],[\"在书写\",{\"1\":{\"531\":1}}],[\"在文档中\",{\"1\":{\"531\":1}}],[\"在进行字符串拼接时允许使用对运算符\",{\"1\":{\"527\":1}}],[\"在进行这些系统调用时阻塞\",{\"1\":{\"330\":1}}],[\"在通讯中使用位左移表示标识的用例\",{\"1\":{\"525\":1}}],[\"在格式化字符串里\",{\"1\":{\"523\":1}}],[\"在格式化输出时\",{\"1\":{\"521\":1}}],[\"在它们的定义中使用了一种叫节点的递归结构体类型\",{\"1\":{\"666\":1}}],[\"在它中添加一个\",{\"1\":{\"663\":1}}],[\"在它上面定义方法都会得到和上面同样的错误\",{\"1\":{\"651\":1}}],[\"在它的对外接口\",{\"1\":{\"689\":1}}],[\"在它的\",{\"1\":{\"519\":1}}],[\"在它之后的内存空间里继续存储\",{\"1\":{\"383\":1}}],[\"在示例程序\",{\"1\":{\"709\":1}}],[\"在示例\",{\"1\":{\"517\":1,\"655\":1,\"662\":1,\"686\":2,\"688\":1,\"689\":1}}],[\"在每次接收通道的数据之前都使用\",{\"1\":{\"709\":1}}],[\"在每次循环开始前都会进行判断\",{\"1\":{\"553\":1}}],[\"在每次循环时\",{\"1\":{\"324\":1}}],[\"在每遇到一个新的常量块或单个常量声明时\",{\"1\":{\"513\":1}}],[\"在新的一行被使用时\",{\"1\":{\"513\":1}}],[\"在新的调度器中依然有全局g队列\",{\"1\":{\"411\":1}}],[\"在首行的简要注释之后可以用成段的注释来进行更详细的说明\",{\"1\":{\"508\":1}}],[\"在部署环境中建议使用\",{\"1\":{\"569\":1}}],[\"在部署程序的时候务必将它们替换成\",{\"1\":{\"507\":1}}],[\"在部署到数量巨大的集群时\",{\"1\":{\"487\":1}}],[\"在程序死亡时被打印出来\",{\"1\":{\"689\":1}}],[\"在程序自动生成\",{\"1\":{\"660\":1}}],[\"在程序\",{\"1\":{\"574\":1}}],[\"在程序中都有一定的作用范围\",{\"1\":{\"515\":1}}],[\"在程序开始执行并完成初始化后\",{\"1\":{\"507\":1}}],[\"在程序运行过程中\",{\"1\":{\"438\":1}}],[\"在导入一个外部包后\",{\"1\":{\"506\":1}}],[\"在最理想的情况下\",{\"1\":{\"499\":1}}],[\"在简单的\",{\"1\":{\"499\":1}}],[\"在线版的第三方包\",{\"1\":{\"497\":1}}],[\"在线程基础上多路复用技术的自动化\",{\"1\":{\"473\":1}}],[\"在命令行输入\",{\"1\":{\"496\":1,\"497\":1}}],[\"在命令行输入指令\",{\"1\":{\"491\":1}}],[\"在大部分情况下自定义错误结构类型很有意义的\",{\"1\":{\"688\":1}}],[\"在大多数情况下很好用\",{\"1\":{\"593\":1}}],[\"在大多数情况下\",{\"1\":{\"547\":1}}],[\"在大多数\",{\"1\":{\"495\":1}}],[\"在大型或成长中的组织中\",{\"1\":{\"75\":1}}],[\"在合适的位置使用打印语句输出相关变量的值\",{\"1\":{\"494\":1}}],[\"在编码之前\",{\"1\":{\"855\":1}}],[\"在编码过程中\",{\"1\":{\"504\":1}}],[\"在编程阶段还不清楚类型的变量指定一个类型\",{\"1\":{\"761\":1}}],[\"在编程中一些基本操作会一遍又一遍的出现\",{\"1\":{\"658\":1}}],[\"在编辑\",{\"1\":{\"491\":1}}],[\"在编译方面都有等价的功能\",{\"1\":{\"481\":1}}],[\"在编译原理中\",{\"1\":{\"445\":1}}],[\"在默认情况下\",{\"1\":{\"485\":1}}],[\"在测试环境中\",{\"1\":{\"696\":1}}],[\"在测试\",{\"1\":{\"483\":1}}],[\"在测试或开发环境中\",{\"1\":{\"51\":1}}],[\"在完成这一切之后\",{\"1\":{\"510\":1}}],[\"在完成这些设置后\",{\"1\":{\"483\":1}}],[\"在完成包的\",{\"1\":{\"510\":1}}],[\"在完成安装包的安装之后\",{\"1\":{\"485\":1}}],[\"在完成编译之后\",{\"1\":{\"483\":1}}],[\"在终端使用以下指令来进行编译工作\",{\"1\":{\"483\":1}}],[\"在开发\",{\"1\":{\"483\":1}}],[\"在开始新的一轮\",{\"1\":{\"431\":1}}],[\"在开始处理循环逻辑的时候\",{\"1\":{\"359\":1}}],[\"在你源码中的位置或接受用冒号形式分隔的路径\",{\"1\":{\"628\":1}}],[\"在你的本地机器上安装它们\",{\"1\":{\"627\":1}}],[\"在你的电脑上的安装位置\",{\"1\":{\"482\":1}}],[\"在你使用\",{\"1\":{\"549\":1}}],[\"在你进入到\",{\"1\":{\"478\":1}}],[\"在各个操作系统平台上的可移植性是非常强的\",{\"1\":{\"481\":1}}],[\"在各种编程语言称雄争霸的局面下推出新的编程语言\",{\"1\":{\"320\":1}}],[\"在第一个例子中\",{\"1\":{\"699\":1}}],[\"在第一次查询的结果集中找出关联数据的\",{\"1\":{\"255\":1}}],[\"在第二幅图中\",{\"1\":{\"588\":1}}],[\"在第四种情况中\",{\"1\":{\"549\":1}}],[\"在第\",{\"1\":{\"532\":1,\"545\":1,\"550\":1,\"551\":1,\"572\":1,\"574\":1,\"580\":1,\"631\":1,\"638\":1,\"654\":1,\"655\":1,\"662\":2,\"682\":1,\"689\":1,\"709\":1,\"860\":1}}],[\"在第六章\",{\"1\":{\"475\":1}}],[\"在构建速度上非常不理想的噩梦\",{\"1\":{\"473\":1}}],[\"在并发原理的设计上\",{\"1\":{\"471\":1}}],[\"在并发环境下\",{\"1\":{\"238\":1}}],[\"在官网的首页有一个功能叫做\",{\"1\":{\"469\":1}}],[\"在当前的运行时\",{\"1\":{\"695\":1}}],[\"在当前的命名空间导入\",{\"1\":{\"627\":1}}],[\"在当前对话\",{\"1\":{\"28\":1}}],[\"在当时都是极其荒谬的主意\",{\"1\":{\"467\":1}}],[\"在本文档的html版本中\",{\"1\":{\"867\":1}}],[\"在本文档的\",{\"1\":{\"867\":1}}],[\"在本章中\",{\"1\":{\"858\":1}}],[\"在本地库中移动head指针\",{\"1\":{\"820\":1}}],[\"在本地库移动head指针\",{\"1\":{\"820\":1}}],[\"在本例中\",{\"1\":{\"849\":1}}],[\"在本例中是\",{\"1\":{\"681\":1}}],[\"在本例中这是一个指向\",{\"1\":{\"547\":1}}],[\"在本包范围内\",{\"1\":{\"506\":1}}],[\"在本书的最后一章\",{\"1\":{\"467\":1}}],[\"在本书的第三部分\",{\"1\":{\"467\":1}}],[\"在本书的第二部分\",{\"1\":{\"467\":1}}],[\"在本书的第一部分\",{\"1\":{\"467\":1}}],[\"在本轮\",{\"1\":{\"431\":1}}],[\"在软件开发的重要地位\",{\"1\":{\"467\":1}}],[\"在迭代过程中\",{\"1\":{\"461\":1}}],[\"在设计算法时首先考虑使用无缓冲通道\",{\"1\":{\"703\":1}}],[\"在设计之初参考了其他开源框架\",{\"1\":{\"461\":1}}],[\"在设定存储过程的时候可以设置对用户的使用权限\",{\"1\":{\"164\":1,\"200\":1}}],[\"在main中关闭数据库\",{\"1\":{\"456\":1}}],[\"在mutex被释放后\",{\"1\":{\"420\":1}}],[\"在项目根目录执行\",{\"1\":{\"450\":1}}],[\"在准备回收白色前\",{\"1\":{\"429\":1}}],[\"在堆中的对象会触发插入屏障机制\",{\"1\":{\"429\":1}}],[\"在堆上还是在栈上\",{\"1\":{\"322\":1}}],[\"在极个别的情况下\",{\"1\":{\"425\":1}}],[\"在极端场景下\",{\"1\":{\"373\":1}}],[\"在空转完后再次调用\",{\"1\":{\"421\":1}}],[\"在饥饿模式下\",{\"1\":{\"420\":1}}],[\"在高并发的场景下\",{\"1\":{\"438\":1}}],[\"在高并发的性能至上场景中\",{\"1\":{\"241\":1}}],[\"在高并发情况下\",{\"1\":{\"420\":1}}],[\"在修改数据之前先锁定\",{\"1\":{\"419\":1}}],[\"在修改数据的时候把事务锁起来\",{\"1\":{\"230\":1}}],[\"在调用代码中你可以像这样用类型断言测试错误是不是上面的类型\",{\"1\":{\"688\":1}}],[\"在调用函数后必须检查错误\",{\"1\":{\"687\":1}}],[\"在调用\",{\"1\":{\"662\":1}}],[\"在调用方法的时候\",{\"1\":{\"380\":1}}],[\"在调度或系统调用时会使用g0的栈空间\",{\"1\":{\"415\":1}}],[\"在coroutine中要等待一个协程主动让出cpu才执行下一个协程\",{\"1\":{\"411\":1}}],[\"在业务中是经常被使用的\",{\"1\":{\"394\":1}}],[\"在于类型断言是对接口进行的操作\",{\"1\":{\"389\":1}}],[\"在哈希函数的选择上\",{\"1\":{\"363\":1}}],[\"在函数的结尾把输出跟想要的结果对比\",{\"1\":{\"689\":1}}],[\"在函数\",{\"1\":{\"682\":1,\"689\":1}}],[\"在函数式编程语言中\",{\"1\":{\"602\":1}}],[\"在函数调用时\",{\"1\":{\"563\":1}}],[\"在函数块里面\",{\"1\":{\"562\":1}}],[\"在函数体内声明的变量称之为局部变量\",{\"1\":{\"515\":1}}],[\"在函数中传递的时候如果没有指定为指针传递的话\",{\"1\":{\"355\":1}}],[\"在函数内部对数组进行修改并不会影响原数据\",{\"1\":{\"355\":1}}],[\"在函数内出现扩容\",{\"1\":{\"354\":1}}],[\"在函数内没有出现扩容\",{\"1\":{\"354\":1}}],[\"在函数传递中\",{\"1\":{\"353\":1}}],[\"在golang中time包提供了时间的显示和测量用的函数\",{\"1\":{\"615\":1}}],[\"在golang规范中\",{\"1\":{\"376\":1}}],[\"在go中\",{\"1\":{\"411\":1}}],[\"在go中没有extends关键字\",{\"1\":{\"338\":1}}],[\"在go语言中其实有两种方法进行协程之间的通信\",{\"1\":{\"427\":1}}],[\"在go语言中\",{\"1\":{\"358\":1}}],[\"在gorm配置文件中添加单数表名配置项\",{\"0\":{\"56\":1}}],[\"在utf\",{\"1\":{\"327\":1}}],[\"在什么时机会修改返回值\",{\"0\":{\"325\":1}}],[\"在国内大家都追求快\",{\"1\":{\"320\":1}}],[\"在日常工作中\",{\"1\":{\"316\":1}}],[\"在语言设计上采取的是组合的方式\",{\"1\":{\"315\":1}}],[\"在配套上存在\",{\"1\":{\"314\":1}}],[\"在速度方面\",{\"1\":{\"311\":1}}],[\"在了解\",{\"1\":{\"310\":1}}],[\"在应用层进行连接\",{\"1\":{\"268\":1}}],[\"在应用程序或网站中添加搜索框\",{\"1\":{\"6\":1}}],[\"在执行过程中动态类型可能会有所不同\",{\"1\":{\"662\":1}}],[\"在执行完相应代码后就会退出整个\",{\"1\":{\"551\":1}}],[\"在执行前者的时候\",{\"1\":{\"450\":1}}],[\"在执行时被阻塞而无法退出\",{\"1\":{\"438\":1}}],[\"在执行\",{\"1\":{\"263\":1,\"409\":1}}],[\"在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中\",{\"1\":{\"246\":1}}],[\"在数据列\",{\"1\":{\"217\":1}}],[\"在事务执行过程中\",{\"1\":{\"242\":1}}],[\"在事务进行读取操作时\",{\"1\":{\"234\":1}}],[\"在单一数据节点中\",{\"1\":{\"240\":1}}],[\"在等待扫除完毕前的阻塞时间\",{\"1\":{\"431\":1}}],[\"在等待主键索引\",{\"1\":{\"235\":1}}],[\"在等待其他相关索引\",{\"1\":{\"235\":1}}],[\"在查询完数据的时候就把事务锁起来\",{\"1\":{\"230\":1}}],[\"在一般情况下\",{\"1\":{\"869\":1}}],[\"在一般开发的平均水平测试中\",{\"1\":{\"499\":1}}],[\"在一台核心数多于\",{\"1\":{\"696\":1}}],[\"在一台\",{\"1\":{\"696\":2}}],[\"在一些老的编程语言中叫\",{\"1\":{\"639\":1}}],[\"在一些复杂的程序中\",{\"1\":{\"625\":1}}],[\"在一些特殊场景相较于\",{\"1\":{\"461\":1}}],[\"在一个协程中\",{\"1\":{\"694\":1}}],[\"在一个切片缓冲内使用无限\",{\"1\":{\"682\":1}}],[\"在一个对象上调用方法时\",{\"1\":{\"659\":1}}],[\"在一个变量上调用\",{\"1\":{\"645\":1}}],[\"在一个结构体中对于每一种数据类型只能有一个匿名字段\",{\"1\":{\"647\":1}}],[\"在一个结构体中\",{\"1\":{\"639\":1}}],[\"在一个\",{\"1\":{\"320\":1}}],[\"在一个表中存在的另一个表的主键称此表的外键\",{\"1\":{\"228\":1}}],[\"在一个查询中从不同的表返回结构数据\",{\"1\":{\"144\":1,\"177\":1}}],[\"在一起\",{\"1\":{\"216\":1}}],[\"在存储过程中使用游标可以对一个结果集进行移动遍历\",{\"1\":{\"168\":1,\"204\":1}}],[\"在这本小手册中\",{\"1\":{\"844\":1}}],[\"在这两种方式中\",{\"1\":{\"640\":1}}],[\"在这我们创建了一个\",{\"1\":{\"631\":1}}],[\"在这里用了和\",{\"1\":{\"672\":1}}],[\"在这里数组长度同样可以写成\",{\"1\":{\"581\":1}}],[\"在这里\",{\"1\":{\"561\":1,\"580\":1}}],[\"在这里是不可以省略的\",{\"1\":{\"506\":1}}],[\"在这一章\",{\"1\":{\"560\":1}}],[\"在这个简单例子中一切都正常执行\",{\"1\":{\"689\":1}}],[\"在这个意义上\",{\"1\":{\"659\":1}}],[\"在这个例子中\",{\"1\":{\"513\":1,\"515\":1,\"516\":1}}],[\"在这个命名空间里所包含的\",{\"1\":{\"501\":1}}],[\"在这个范围内插入新的数据\",{\"1\":{\"238\":1}}],[\"在这方面的发展还不是很完善\",{\"1\":{\"494\":1}}],[\"在这之前\",{\"1\":{\"473\":1}}],[\"在这之后的语句\",{\"1\":{\"166\":1,\"202\":1}}],[\"在这种特定的算法变体中\",{\"1\":{\"860\":1}}],[\"在这种模式下\",{\"1\":{\"689\":1}}],[\"在这种风格中\",{\"1\":{\"378\":1}}],[\"在这种方式下效率是最高的\",{\"1\":{\"306\":1}}],[\"在这种情况下\",{\"1\":{\"164\":1,\"200\":1,\"678\":1,\"850\":1,\"869\":1,\"875\":2,\"892\":1}}],[\"在某种意义上也是一种像\",{\"1\":{\"689\":1}}],[\"在某个值的原子操作执行的过程中\",{\"1\":{\"418\":1}}],[\"在某个\",{\"1\":{\"214\":1}}],[\"在某个范围内\",{\"1\":{\"131\":1}}],[\"在某些情况下我们希望在命令行给常量一些不一样的值\",{\"1\":{\"682\":1}}],[\"在某些情况下\",{\"1\":{\"84\":1}}],[\"在出现新需求时创建临时角色\",{\"1\":{\"75\":1}}],[\"在决定如何对角色进行分类以及如何管理这些角色的访问权限时\",{\"1\":{\"75\":1}}],[\"在rbac项目开始时定义的角色可能不再符合公司目标\",{\"1\":{\"75\":1}}],[\"在rbac0基础上假如了约束的概念\",{\"1\":{\"68\":1}}],[\"在rbac模型里面\",{\"1\":{\"65\":1}}],[\"在rbac模型中\",{\"1\":{\"64\":1}}],[\"在\",{\"0\":{\"483\":1,\"484\":1,\"485\":1,\"638\":1},\"1\":{\"37\":1,\"52\":1,\"62\":1,\"63\":1,\"129\":1,\"130\":1,\"166\":4,\"202\":4,\"214\":2,\"215\":1,\"231\":1,\"235\":1,\"270\":1,\"298\":1,\"303\":1,\"314\":1,\"315\":2,\"316\":1,\"324\":1,\"330\":1,\"331\":1,\"409\":1,\"410\":1,\"429\":1,\"439\":2,\"450\":1,\"461\":2,\"469\":4,\"472\":1,\"476\":2,\"482\":1,\"484\":1,\"485\":1,\"494\":1,\"499\":2,\"506\":5,\"508\":1,\"509\":3,\"513\":1,\"515\":1,\"516\":1,\"518\":2,\"521\":1,\"523\":2,\"530\":1,\"531\":1,\"547\":3,\"549\":1,\"551\":1,\"561\":1,\"564\":1,\"567\":1,\"570\":1,\"573\":1,\"605\":2,\"610\":1,\"625\":2,\"627\":2,\"628\":1,\"631\":2,\"632\":1,\"635\":2,\"638\":1,\"639\":1,\"640\":3,\"642\":1,\"647\":1,\"651\":3,\"652\":1,\"658\":1,\"659\":6,\"661\":1,\"662\":8,\"664\":1,\"666\":1,\"668\":1,\"670\":2,\"675\":2,\"676\":1,\"678\":1,\"682\":4,\"688\":1,\"689\":3,\"690\":1,\"692\":2,\"694\":3,\"696\":1,\"697\":1,\"701\":1,\"706\":2,\"707\":1,\"709\":2,\"858\":3,\"860\":1}}],[\"一系列claims的打印表示\",{\"1\":{\"845\":1}}],[\"一元运算的前缀操作符\",{\"1\":{\"700\":1}}],[\"一元运算符\",{\"1\":{\"525\":1}}],[\"一元运算符只可以用于一个值的操作\",{\"1\":{\"520\":1}}],[\"一词\",{\"1\":{\"625\":1,\"852\":3}}],[\"一秒后\",{\"1\":{\"623\":1}}],[\"一点点有用的数据却占用了整个文件的内存\",{\"1\":{\"602\":1}}],[\"一刻才执行某个语句或函数\",{\"1\":{\"568\":1}}],[\"一款相对于\",{\"1\":{\"481\":1}}],[\"一键生成各端代码\",{\"1\":{\"459\":1}}],[\"一不小心\",{\"1\":{\"445\":1}}],[\"一只处于阻塞状态\",{\"1\":{\"438\":1}}],[\"一次往返的通信\",{\"1\":{\"869\":1}}],[\"一次性安装\",{\"1\":{\"627\":1}}],[\"一次性搬迁将会造成比较大的延时\",{\"1\":{\"372\":1}}],[\"一次编译多次使用\",{\"1\":{\"164\":1,\"200\":1}}],[\"一定会带来额外的性能开销\",{\"1\":{\"439\":1}}],[\"一定要先初始化\",{\"1\":{\"358\":1}}],[\"一定数量权限点的集合\",{\"1\":{\"70\":1}}],[\"一\",{\"0\":{\"319\":1,\"800\":1}}],[\"一条完整的\",{\"1\":{\"305\":1}}],[\"一样的数据与文本混合的数据驱动模板\",{\"1\":{\"623\":1}}],[\"一样的值\",{\"1\":{\"482\":1}}],[\"一样都是非常好的使用例子\",{\"1\":{\"572\":1}}],[\"一样快\",{\"1\":{\"499\":1}}],[\"一样属于\",{\"1\":{\"471\":1}}],[\"一样\",{\"1\":{\"303\":1,\"482\":1,\"561\":1,\"668\":1,\"851\":1}}],[\"一方面\",{\"1\":{\"257\":1}}],[\"一致性\",{\"1\":{\"237\":1,\"243\":1}}],[\"一棵\",{\"1\":{\"214\":1}}],[\"一种可阅读性和打印性的输出\",{\"1\":{\"660\":1}}],[\"一种可能用到条件语句的场景是测试变量的值\",{\"1\":{\"549\":1}}],[\"一种解决方法就是仔细检查唯一性并且使用多值\",{\"1\":{\"612\":1}}],[\"一种解决方案是\",{\"1\":{\"28\":1}}],[\"一种元素对\",{\"1\":{\"603\":1}}],[\"一种类型具有多种类型的能力\",{\"1\":{\"391\":1}}],[\"一种特殊的唯一索引\",{\"1\":{\"212\":1}}],[\"一旦最终用户通过身份验证\",{\"1\":{\"876\":1}}],[\"一旦陆续启动一些协程\",{\"1\":{\"697\":1}}],[\"一旦读取到文件末尾\",{\"1\":{\"678\":1}}],[\"一旦判断结果为\",{\"1\":{\"553\":1}}],[\"一旦成功地匹配到某个分支\",{\"1\":{\"551\":1}}],[\"一旦数据库被切分到多个物理节点上\",{\"1\":{\"257\":1}}],[\"一旦存储过程被创建出来\",{\"1\":{\"162\":1,\"198\":1}}],[\"一旦jwt签发\",{\"1\":{\"31\":1}}],[\"一起使用\",{\"1\":{\"129\":1}}],[\"一行\",{\"1\":{\"85\":1}}],[\"一列\",{\"1\":{\"82\":1}}],[\"一些令牌从授权端点返回\",{\"1\":{\"868\":1}}],[\"一些对象属性只能在对象刚刚创建的时候修改其值\",{\"1\":{\"770\":1}}],[\"一些底层的除外\",{\"1\":{\"614\":1}}],[\"一些如\",{\"1\":{\"548\":1}}],[\"一些像游戏或者统计学类的应用需要用到随机数\",{\"1\":{\"528\":1}}],[\"一些员工开始以全职工作状态投入到这个项目的编译器和运行实现上\",{\"1\":{\"469\":1}}],[\"一些资源申请和释放动作不太方便\",{\"1\":{\"321\":1}}],[\"一些常见的主键生成策略\",{\"1\":{\"257\":1}}],[\"一些存储引擎\",{\"1\":{\"224\":1}}],[\"一些团队试图通过定义越来越细粒度的角色\",{\"1\":{\"75\":1}}],[\"一些私密数据无法通过jwt传输\",{\"1\":{\"31\":1}}],[\"一级安全许可\",{\"1\":{\"62\":1}}],[\"一组jwt声明\",{\"1\":{\"39\":1}}],[\"一个公钥和一个私钥\",{\"1\":{\"860\":1}}],[\"一个八进制数组和一个密文\",{\"1\":{\"859\":1}}],[\"一个代表特定日期和时间的数字\",{\"1\":{\"852\":1}}],[\"一个区分大小写的字符串或\",{\"1\":{\"852\":2}}],[\"一个可能不宜公开的权利要求可能是代表用户购物车的\",{\"1\":{\"848\":1}}],[\"一个可能的用途是在开始执行程序之前对数据进行检验或修复\",{\"1\":{\"519\":1}}],[\"一个^符号表示退一步\",{\"1\":{\"819\":1}}],[\"一个协程为了写入一个永远无人读取的通道而被挂起就成了一个\",{\"1\":{\"708\":1}}],[\"一个协程在无限循环中给通道发送整数数据\",{\"1\":{\"701\":1}}],[\"一个无缓冲通道只能包含\",{\"1\":{\"703\":1}}],[\"一个机器\",{\"1\":{\"699\":1}}],[\"一个数据被设计为只有一个协程可以对其访问\",{\"1\":{\"699\":1}}],[\"一个数据库连接等等\",{\"1\":{\"658\":1}}],[\"一个数据库实例可拥有多个用户\",{\"1\":{\"298\":1}}],[\"一个设计良好的并发程序在并行方面的表现也非常出色\",{\"1\":{\"695\":1}}],[\"一个函数或者方法来实现的\",{\"1\":{\"694\":1}}],[\"一个函数可以拥有多返回值\",{\"1\":{\"509\":1}}],[\"一个并发程序可以在一个处理器或者内核上使用多个线程来执行任务\",{\"1\":{\"694\":1}}],[\"一个进程由一个或多个操作系统线程组成\",{\"1\":{\"694\":1}}],[\"一个进程执行了另一个地址\",{\"1\":{\"547\":1}}],[\"一个应用程序是运行在机器上的一个进程\",{\"1\":{\"694\":1}}],[\"一个应用程序可以包含不同的包\",{\"1\":{\"506\":1}}],[\"一个较好的办法是把测试的输入数据和期望的结果写在一起组成一个数据表\",{\"1\":{\"689\":1}}],[\"一个很好的使用它的例子是\",{\"1\":{\"689\":1}}],[\"一个很好的例子是来自标准库的\",{\"1\":{\"662\":1}}],[\"一个检查程序是否被已知用户启动的具体例子\",{\"1\":{\"689\":1}}],[\"一个值和一个错误码\",{\"1\":{\"687\":1}}],[\"一个或多个标志\",{\"1\":{\"680\":1}}],[\"一个重要的例子是\",{\"1\":{\"668\":1}}],[\"一个重要的区别是\",{\"1\":{\"651\":1}}],[\"一个用来存储它包含的类型\",{\"1\":{\"663\":1}}],[\"一个用户默认拥有一个表空间\",{\"1\":{\"298\":1}}],[\"一个用户可以创建多个库\",{\"1\":{\"298\":1}}],[\"一个标准库的例子\",{\"1\":{\"662\":1}}],[\"一个接收\",{\"1\":{\"859\":1}}],[\"一个接口的值可以赋值给另一个接口变量\",{\"1\":{\"667\":1}}],[\"一个接口类型的变量\",{\"1\":{\"662\":1}}],[\"一个接口类型的变量或一个\",{\"1\":{\"662\":1}}],[\"一个接口可以包含一个或多个其他的接口\",{\"1\":{\"662\":1}}],[\"一个接受变长参数的函数可以将这个参数作为其它函数的参数进行传递\",{\"1\":{\"567\":1}}],[\"一个新栈中所有格子的值都是\",{\"1\":{\"660\":1}}],[\"一个网络连接\",{\"1\":{\"658\":1}}],[\"一个类型可以实现多个接口\",{\"1\":{\"662\":1}}],[\"一个类型加上它的方法等价于面向对象中的一个类\",{\"1\":{\"651\":1}}],[\"一个类型的值可以被转换成另一种类型的值\",{\"1\":{\"511\":1}}],[\"一个结构体变量\",{\"1\":{\"643\":1}}],[\"一个结构体字面量\",{\"1\":{\"640\":1}}],[\"一个对象要是可写的\",{\"1\":{\"662\":1}}],[\"一个对象要是可读的\",{\"1\":{\"662\":1}}],[\"一个对象和它里面包含的对象可能会在不同的内存空间中\",{\"1\":{\"640\":1}}],[\"一个对象有效的语义\",{\"1\":{\"378\":1}}],[\"一个方法\",{\"1\":{\"640\":1}}],[\"一个导出的结构体类型中有些字段是导出的\",{\"1\":{\"640\":1}}],[\"一个带属性的结构体试图表示一个现实世界中的实体\",{\"1\":{\"639\":1}}],[\"一个优秀的系统在你遇到任何问题的时候将\",{\"1\":{\"635\":1}}],[\"一个源文件是否能包含多个包\",{\"1\":{\"627\":1}}],[\"一个源文件可以包含任意多行的代码\",{\"1\":{\"504\":1}}],[\"一个没有导入的包将通过分配初始值给所有的包级变量和调用源码中定义的包级\",{\"1\":{\"627\":1}}],[\"一个没有指定类型的常量被使用时\",{\"1\":{\"513\":1}}],[\"一个参数是秒\",{\"1\":{\"619\":1}}],[\"一个整数列表\",{\"1\":{\"602\":1}}],[\"一个将整数乘以\",{\"1\":{\"602\":1}}],[\"一个字符串数组\",{\"1\":{\"662\":1}}],[\"一个字符串实际上是一个双字结构\",{\"1\":{\"597\":1}}],[\"一个字符串是\",{\"1\":{\"557\":1}}],[\"一个切片\",{\"1\":{\"585\":1}}],[\"一个切片在未初始化之前默认为\",{\"1\":{\"585\":1}}],[\"一个由数字\",{\"1\":{\"585\":1}}],[\"一个返回值为另一个函数的函数可以被称之为工厂函数\",{\"1\":{\"574\":1}}],[\"一个闭包继承了函数所声明时的作用域\",{\"1\":{\"573\":1}}],[\"一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息\",{\"1\":{\"568\":1}}],[\"一个地址\",{\"1\":{\"563\":1}}],[\"一个简单的函数调用其他函数的例子\",{\"1\":{\"561\":1}}],[\"一个简单的例子\",{\"1\":{\"521\":1}}],[\"一个建议使用\",{\"1\":{\"559\":1}}],[\"一个指针变量通常缩写为\",{\"1\":{\"547\":1}}],[\"一个指针变量可以指向任何一个值的内存地址\",{\"1\":{\"547\":1}}],[\"一个指针数组\",{\"1\":{\"214\":1}}],[\"一个引用类型的变量\",{\"1\":{\"516\":1}}],[\"一个变量\",{\"1\":{\"515\":1}}],[\"一个包能分成多个源文件么\",{\"1\":{\"627\":1}}],[\"一个包可能有多个\",{\"1\":{\"627\":1}}],[\"一个包可以分散在多个文件中\",{\"1\":{\"508\":1}}],[\"一个包可以由许多以\",{\"1\":{\"506\":1}}],[\"一个包即是编译时的一个单元\",{\"1\":{\"506\":1}}],[\"一个包下可以有多个\",{\"1\":{\"350\":1}}],[\"一个发生在\",{\"1\":{\"455\":1}}],[\"一个goroutine最多占用cpu\",{\"1\":{\"411\":1}}],[\"一个m阻塞\",{\"1\":{\"409\":1}}],[\"一个m阻塞了\",{\"1\":{\"409\":1}}],[\"一个粗略的比较\",{\"1\":{\"318\":1}}],[\"一个大查询如果一次性执行的话\",{\"1\":{\"267\":1}}],[\"一个事务所做的修改在提交之前对其它事务是不可见的\",{\"1\":{\"239\":1}}],[\"一个事务只能读取已经提交的事务所做的修改\",{\"1\":{\"239\":1}}],[\"一个支持事务\",{\"1\":{\"237\":1}}],[\"一个\",{\"1\":{\"236\":1,\"363\":1,\"438\":1,\"496\":1,\"506\":1,\"558\":1,\"563\":1,\"602\":1,\"643\":1,\"655\":1,\"708\":1}}],[\"一个锁住了主键索引\",{\"1\":{\"235\":1}}],[\"一个表允许有多个\",{\"1\":{\"228\":1}}],[\"一个表只能有一个主键\",{\"1\":{\"212\":1}}],[\"一个存储过程替代大量\",{\"1\":{\"164\":1,\"200\":1}}],[\"一个人可能被赋予过多的角色权限\",{\"1\":{\"75\":1}}],[\"一个是命名返回值\",{\"1\":{\"564\":2}}],[\"一个是非命名返回值\",{\"1\":{\"564\":2}}],[\"一个是消息传递\",{\"1\":{\"427\":1}}],[\"一个是共享内存\",{\"1\":{\"427\":1}}],[\"一个是数据权限\",{\"1\":{\"71\":1}}],[\"一个是操作权限\",{\"1\":{\"71\":1}}],[\"一个是页面权限\",{\"1\":{\"71\":1}}],[\"一个项目\",{\"1\":{\"70\":1}}],[\"一个权限系统需要具备如下的几个关键要素\",{\"1\":{\"70\":1}}],[\"一个角色被分配的用户数量受限\",{\"1\":{\"68\":1}}],[\"一个jwt的声明\",{\"1\":{\"39\":1}}],[\"一个token分3部分\",{\"1\":{\"33\":1}}],[\"一般称之为回调\",{\"1\":{\"572\":1}}],[\"一般出现在大量的递归调用导致的程序栈内存分配耗尽\",{\"1\":{\"570\":1}}],[\"一般建议使用全部大写字母\",{\"1\":{\"559\":1}}],[\"一般形式为\",{\"1\":{\"557\":1}}],[\"一般习惯使用\",{\"1\":{\"553\":1}}],[\"一般使用以下写法\",{\"1\":{\"549\":1}}],[\"一般使用格式\",{\"1\":{\"531\":1}}],[\"一般的程序中不会被使用\",{\"1\":{\"614\":1}}],[\"一般的格式化设计是通过对于一个标准时间的格式化描述来展现的\",{\"1\":{\"546\":1}}],[\"一般的比较运算符\",{\"1\":{\"532\":1}}],[\"一般用于增加或减少计数器\",{\"1\":{\"553\":1}}],[\"一般用法\",{\"1\":{\"497\":1}}],[\"一般用作开发\",{\"1\":{\"296\":1}}],[\"一般都是直接使用\",{\"1\":{\"496\":1}}],[\"一般都是通过内置\",{\"1\":{\"491\":1}}],[\"一般都可以检测到\",{\"1\":{\"235\":1}}],[\"一般推荐安装\",{\"1\":{\"485\":1}}],[\"一般每周更新一次\",{\"1\":{\"483\":1}}],[\"一般需要\",{\"1\":{\"483\":1}}],[\"一般而言我们会使用一个\",{\"1\":{\"567\":1}}],[\"一般而言\",{\"1\":{\"447\":1}}],[\"一般而言是一个指向堆内存的指针\",{\"1\":{\"383\":1}}],[\"一般小对象通过\",{\"1\":{\"443\":1}}],[\"一般通过\",{\"1\":{\"438\":1}}],[\"一般来讲\",{\"1\":{\"410\":1}}],[\"一般来说都是在启动后第一个执行的函数\",{\"1\":{\"507\":1}}],[\"一般来说你可能还需要\",{\"1\":{\"501\":1}}],[\"一般来说\",{\"1\":{\"246\":2,\"247\":1,\"853\":1}}],[\"一般在每次给接口赋值发生转换时会更新此表\",{\"1\":{\"383\":1}}],[\"一般在数据库系统或文件系统中使用的\",{\"1\":{\"215\":1}}],[\"一般是为了具有更好的测试效果\",{\"1\":{\"627\":1}}],[\"一般是\",{\"1\":{\"284\":1}}],[\"一般是在建表的时候同时创建主键索引\",{\"1\":{\"212\":1}}],[\"一般还有配套大数据平台汇总所有分库的记录\",{\"1\":{\"256\":1}}],[\"一般看后面的分页意义不大\",{\"1\":{\"256\":1}}],[\"一般指磁盘存储\",{\"1\":{\"216\":1}}],[\"一般数据保护规则\",{\"1\":{\"74\":1}}],[\"一般情况下都会使用当前时间的纳秒级数字\",{\"1\":{\"528\":1}}],[\"一般情况下你可以将它的值设置为空\",{\"1\":{\"482\":1}}],[\"一般情况下构建一个程序的时间只需要数百毫秒到几秒\",{\"1\":{\"473\":1}}],[\"一般情况下\",{\"1\":{\"303\":1,\"495\":1,\"506\":1,\"515\":2,\"677\":1}}],[\"一般情况\",{\"1\":{\"72\":1}}],[\"一般定义为一种动作\",{\"1\":{\"70\":1}}],[\"一般继承关系仅要求角色继承关系是一个绝对偏序关系\",{\"1\":{\"67\":1}}],[\"一般\",{\"1\":{\"51\":1}}],[\"一般格式为\",{\"1\":{\"33\":1}}],[\"一般流程是下面这样\",{\"1\":{\"28\":1}}],[\"一下四个环境变量使用鉴权必须都配置\",{\"1\":{\"4\":1}}],[\"可接受的范围是客户特定的\",{\"1\":{\"887\":1}}],[\"可根据已签名\",{\"1\":{\"861\":1}}],[\"可不写\",{\"1\":{\"782\":4}}],[\"可匹配至少一个space\",{\"1\":{\"723\":1}}],[\"可从某个通道读取或者写入某个通道\",{\"1\":{\"700\":1}}],[\"可是我们明白这是模拟出来的\",{\"1\":{\"697\":1}}],[\"可视化工具需要的格式写入运行时报告数据\",{\"1\":{\"692\":1}}],[\"可视化和共享对数据的见解\",{\"1\":{\"6\":1}}],[\"可被应用的场景非常广泛\",{\"1\":{\"686\":1}}],[\"可被外部访问的\",{\"1\":{\"314\":1}}],[\"可导出的\",{\"1\":{\"676\":1}}],[\"可惜不能这么做\",{\"1\":{\"665\":1}}],[\"可惜的是\",{\"1\":{\"494\":1}}],[\"可运行的代码可以在\",{\"1\":{\"662\":1}}],[\"可运行的例子\",{\"1\":{\"655\":1}}],[\"可执行程序\",{\"1\":{\"690\":1}}],[\"可执行文件\",{\"1\":{\"629\":1}}],[\"可执行目标文件可以直接在机器上执行\",{\"1\":{\"447\":1}}],[\"可表示的最大长度段大约290年\",{\"1\":{\"621\":1}}],[\"可用于识别与该等信息相关的自然人的信息\",{\"1\":{\"868\":1}}],[\"可用于识别信息而无需实际共享信息\",{\"1\":{\"860\":1}}],[\"可用权利要求的补充\",{\"1\":{\"861\":1}}],[\"可用在\",{\"1\":{\"614\":1}}],[\"可用的编译器标记如下\",{\"1\":{\"481\":1}}],[\"可变的\",{\"1\":{\"580\":1}}],[\"可选\",{\"1\":{\"867\":1}}],[\"可选择验证或加密的容器格式的形式进行标准化工作\",{\"1\":{\"846\":1}}],[\"可选择下面的\",{\"1\":{\"34\":1}}],[\"可选属性\",{\"0\":{\"769\":1},\"1\":{\"769\":1}}],[\"可选的header声明包括\",{\"1\":{\"850\":1}}],[\"可选的更加通用的方式是用一个空接口类型的切片作为参数和返回值\",{\"1\":{\"689\":1}}],[\"可选的\",{\"1\":{\"551\":1,\"869\":3,\"873\":9,\"878\":2,\"886\":1}}],[\"可读的代码和简洁性是\",{\"1\":{\"512\":1}}],[\"可见性规则\",{\"1\":{\"506\":1,\"515\":1}}],[\"可可酱\",{\"1\":{\"463\":2}}],[\"可支持生成\",{\"1\":{\"462\":1}}],[\"可参考\",{\"1\":{\"461\":1}}],[\"可参考下图\",{\"1\":{\"461\":1}}],[\"可扩展性\",{\"1\":{\"455\":1}}],[\"可预测的\",{\"1\":{\"455\":1}}],[\"可比较的类型都可以作为map\",{\"1\":{\"376\":1}}],[\"可作为\",{\"1\":{\"296\":2}}],[\"可通过下表详细对比它们之间的区别\",{\"1\":{\"242\":1}}],[\"可串行化\",{\"1\":{\"239\":1}}],[\"可串行化隔离级别需要对所有读取的行都加锁\",{\"1\":{\"234\":1}}],[\"可重复读\",{\"1\":{\"239\":1}}],[\"可确定\",{\"1\":{\"214\":1}}],[\"可移植性差\",{\"1\":{\"164\":1,\"200\":1}}],[\"可复用的类型作为一个工具箱\",{\"1\":{\"656\":1}}],[\"可复用\",{\"1\":{\"164\":1,\"200\":1}}],[\"可在几个层次上控制访问权限\",{\"1\":{\"154\":1,\"190\":1}}],[\"可利用\",{\"1\":{\"90\":1}}],[\"可能\",{\"1\":{\"867\":1}}],[\"可能适合客户端使用\",{\"1\":{\"854\":1}}],[\"可能需要额外的声明来唯一地标识用户\",{\"1\":{\"848\":1}}],[\"可能需要添加上亿条记录\",{\"1\":{\"72\":1}}],[\"可能运行在不同的线程上\",{\"1\":{\"708\":1}}],[\"可能被隐藏在错误处理包内部\",{\"1\":{\"689\":1}}],[\"可能输出\",{\"1\":{\"547\":1}}],[\"可能的输出\",{\"1\":{\"528\":1}}],[\"可能导致程序崩溃\",{\"1\":{\"527\":1}}],[\"可能大厂\",{\"1\":{\"430\":1}}],[\"可能比较悲剧地获取不到锁\",{\"1\":{\"420\":1}}],[\"可能它们的数量还不少\",{\"1\":{\"420\":1}}],[\"可能一次锁住很多数据\",{\"1\":{\"267\":1}}],[\"可能是继承来的名字\",{\"1\":{\"649\":1}}],[\"可能是因为这种需求并不是那么强烈\",{\"1\":{\"552\":1}}],[\"可能是因为\",{\"1\":{\"483\":1}}],[\"可能是为了节约时间\",{\"1\":{\"438\":1}}],[\"可能是\",{\"1\":{\"247\":1}}],[\"可能会返回此错误\",{\"1\":{\"878\":2}}],[\"可能会出现其他范围值\",{\"1\":{\"873\":1}}],[\"可能会出现很多问题\",{\"1\":{\"75\":1}}],[\"可能会刷新令牌\",{\"1\":{\"869\":1}}],[\"可能会获取这些物品\",{\"1\":{\"848\":1}}],[\"可能会是会改变的\",{\"1\":{\"676\":1}}],[\"可能会像这样\",{\"1\":{\"656\":1}}],[\"可能会在运行时抛出错误\",{\"1\":{\"545\":1}}],[\"可能会因为无法正确表达常量所代表的数值而导致溢出\",{\"1\":{\"513\":1}}],[\"可能会被分配到堆上\",{\"1\":{\"445\":1}}],[\"可能会触发\",{\"1\":{\"443\":2}}],[\"可能会导致存储过程失效\",{\"1\":{\"164\":1,\"200\":1}}],[\"可能还想运行包含的安全脚本\",{\"1\":{\"52\":1}}],[\"可配置为权限点的数据范围或附加条件\",{\"1\":{\"70\":1}}],[\"可认证\",{\"1\":{\"39\":1}}],[\"可以缓解跨站点请求伪造\",{\"1\":{\"873\":1}}],[\"可以构建不安全的\",{\"1\":{\"854\":1}}],[\"可以先进行查看\",{\"1\":{\"829\":1}}],[\"可以先定义该类型\",{\"1\":{\"651\":1}}],[\"可以传入变量\",{\"1\":{\"701\":1}}],[\"可以想象一个无缓冲的通道在没有空间来保存数据的时候\",{\"1\":{\"701\":1}}],[\"可以为我们检测到这种情况\",{\"1\":{\"700\":1}}],[\"可以单独调用获取通道的\",{\"1\":{\"700\":1}}],[\"可以存储在变量中\",{\"1\":{\"699\":1}}],[\"可以读写数据的能力\",{\"1\":{\"699\":1}}],[\"可以使计算均匀分布\",{\"1\":{\"694\":1}}],[\"可以使用id\",{\"1\":{\"874\":1}}],[\"可以使用包\",{\"1\":{\"654\":1}}],[\"可以使用点号符给字段赋值\",{\"1\":{\"640\":1}}],[\"可以使用如下声明\",{\"1\":{\"605\":1}}],[\"可以使用函数\",{\"1\":{\"600\":1}}],[\"可以使用匿名函数\",{\"1\":{\"573\":1}}],[\"可以使用正常的参数\",{\"1\":{\"567\":1}}],[\"可以使用外部脚本获取到\",{\"1\":{\"550\":1}}],[\"可以使用迭代或循环结构来重复执行一次或多次某段代码\",{\"1\":{\"548\":1}}],[\"可以使用因式分解关键字的方式\",{\"1\":{\"509\":1}}],[\"可以使用自身的包或者从其它包中导入内容\",{\"1\":{\"506\":1}}],[\"可以使用任何排序算法来实现\",{\"1\":{\"662\":1}}],[\"可以使用任何\",{\"1\":{\"504\":1}}],[\"可以使用多值返回来返回错误\",{\"1\":{\"425\":1}}],[\"可以使用辅助的数据结构\",{\"1\":{\"358\":1}}],[\"可以使用触发器来进行审计跟踪\",{\"1\":{\"166\":1,\"202\":1}}],[\"可以使用\",{\"1\":{\"132\":1,\"497\":1,\"501\":2,\"524\":1,\"551\":1,\"556\":1,\"576\":1,\"609\":1,\"642\":1,\"653\":1,\"661\":1,\"669\":1,\"678\":1,\"682\":1,\"686\":1,\"689\":1}}],[\"可以使用改令牌再次对其进行加密\",{\"1\":{\"31\":1}}],[\"可以参见第\",{\"1\":{\"694\":1}}],[\"可以参考rfc7519\",{\"1\":{\"39\":1}}],[\"可以抽象为下面的代码段\",{\"1\":{\"689\":1}}],[\"可以接收一个或多个函数程序作为参数\",{\"1\":{\"689\":1}}],[\"可以马上中止当前函数的执行\",{\"1\":{\"689\":1}}],[\"可以把它用于计算平方根函数的参数测试\",{\"1\":{\"688\":1}}],[\"可以减少需要的类型和方法数量\",{\"1\":{\"673\":1}}],[\"可以拿它和\",{\"1\":{\"667\":1}}],[\"可以给一个空接口类型的变量\",{\"1\":{\"663\":1}}],[\"可以给角色分组分层\",{\"1\":{\"67\":1}}],[\"可以作用于一个文件\",{\"1\":{\"658\":1}}],[\"可以很简单的实现多重继承\",{\"1\":{\"657\":1}}],[\"可以彼此访问对方所有的字段和方法\",{\"1\":{\"655\":1}}],[\"可以覆写方法\",{\"1\":{\"655\":1}}],[\"可以替代\",{\"1\":{\"653\":1}}],[\"可以粗略地将这个和面向对象语言中的继承概念相比较\",{\"1\":{\"647\":1}}],[\"可以获取变量的正确类型\",{\"1\":{\"645\":1}}],[\"可以声明结构体类型的一个变量\",{\"1\":{\"640\":1}}],[\"可以声明指针指向任何类型的值来表明它的原始性或结构性\",{\"1\":{\"547\":1}}],[\"可以去注册一个开源项目的免费帐号\",{\"1\":{\"635\":1}}],[\"可以到网上浏览\",{\"1\":{\"629\":1}}],[\"可以表示为\",{\"1\":{\"626\":1}}],[\"可以胜任\",{\"1\":{\"626\":1}}],[\"可以这么使用\",{\"1\":{\"609\":1}}],[\"可以这样做\",{\"1\":{\"662\":1}}],[\"可以这样调用此方法\",{\"1\":{\"662\":1}}],[\"可以这样定义\",{\"1\":{\"590\":1}}],[\"可以这样扩展到它的大小上限\",{\"1\":{\"585\":1}}],[\"可以提供各种类型的signatures和加密\",{\"1\":{\"848\":1}}],[\"可以提供\",{\"1\":{\"605\":1}}],[\"可以提高代码复用\",{\"1\":{\"164\":1,\"200\":1}}],[\"可以迅速定位\",{\"1\":{\"603\":1}}],[\"可以尝试下面这段代码\",{\"1\":{\"602\":1}}],[\"可以学习一下\",{\"1\":{\"601\":1}}],[\"可以从文件中读取和写入\",{\"1\":{\"686\":1}}],[\"可以从字符串\",{\"1\":{\"596\":1}}],[\"可以从左边起开始忽略\",{\"1\":{\"581\":1}}],[\"可以测量切片最长可以达到多少\",{\"1\":{\"585\":1}}],[\"可以返回其它函数的函数和接受其它函数作为参数的函数均被称之为高阶函数\",{\"1\":{\"574\":1}}],[\"可以查看第\",{\"1\":{\"553\":1}}],[\"可以直接执行\",{\"1\":{\"689\":1}}],[\"可以直接从代码初始化\",{\"1\":{\"689\":1}}],[\"可以直接通过指针\",{\"1\":{\"640\":1}}],[\"可以直接放置在\",{\"1\":{\"551\":1}}],[\"可以直接运行\",{\"1\":{\"320\":1}}],[\"可以包含除了\",{\"1\":{\"688\":1}}],[\"可以包含一个初始化语句\",{\"1\":{\"549\":1}}],[\"可以包含多个工作目录\",{\"1\":{\"483\":1}}],[\"可以实现某个接口的方法集\",{\"1\":{\"662\":1}}],[\"可以实现对某个进程\",{\"1\":{\"546\":1}}],[\"可以实现类似变体类型的功能\",{\"1\":{\"477\":1}}],[\"可以自定义一个方法用来输出更加人性化的时区信息\",{\"1\":{\"530\":1}}],[\"可以自动保存代码\",{\"1\":{\"490\":1}}],[\"可以简写为\",{\"1\":{\"525\":1}}],[\"可以分别获得相应的实数和虚数部分\",{\"1\":{\"524\":1}}],[\"可以高效地创建一个新的变量\",{\"1\":{\"518\":1}}],[\"可以被调用多次\",{\"1\":{\"561\":1}}],[\"可以被不同类型所对应的标识符替换\",{\"1\":{\"517\":1}}],[\"可以被用作枚举值\",{\"1\":{\"513\":1}}],[\"可以得到相同的结果\",{\"1\":{\"507\":1}}],[\"可以得出以下结论\",{\"1\":{\"499\":1}}],[\"可以代表\",{\"1\":{\"496\":1}}],[\"可以更快地了解其代码的含义\",{\"1\":{\"496\":1}}],[\"可以更容易对数据库进行拆分\",{\"1\":{\"268\":1}}],[\"可以更容易地支持多粒度封锁\",{\"1\":{\"233\":1}}],[\"可以清楚地纵览项目中的常量\",{\"1\":{\"492\":1}}],[\"可以清空表\",{\"1\":{\"119\":1}}],[\"可以注释或取消注释选中的一行或多行代码\",{\"1\":{\"490\":1}}],[\"可以同时编辑多个源文件并设置书签\",{\"1\":{\"490\":1}}],[\"可以显示代码所在的行数\",{\"1\":{\"490\":1}}],[\"可以和\",{\"1\":{\"462\":1}}],[\"可以根据需要添加空白\",{\"1\":{\"856\":1}}],[\"可以根据一些\",{\"1\":{\"686\":1}}],[\"可以根据一个格式化字符串来将一个时间\",{\"1\":{\"546\":1}}],[\"可以根据新增的\",{\"1\":{\"606\":1}}],[\"可以根据定义的\",{\"1\":{\"459\":1}}],[\"可以根据实现项目需求选择\",{\"1\":{\"406\":1}}],[\"可以解析并验证请求的\",{\"1\":{\"455\":1}}],[\"可以解决分布式\",{\"1\":{\"249\":1}}],[\"可以解决幻读问题\",{\"1\":{\"235\":1}}],[\"可以\",{\"1\":{\"455\":1}}],[\"可以尽量把那些不需要分配到堆上的变量直接分配到栈上\",{\"1\":{\"445\":1}}],[\"可以是单个区分大小写的字符串或\",{\"1\":{\"852\":1}}],[\"可以是文档或其他的重要标记\",{\"1\":{\"645\":1}}],[\"可以是任意类型的数组\",{\"1\":{\"662\":1}}],[\"可以是任意类型的\",{\"1\":{\"605\":1}}],[\"可以是任意可以用\",{\"1\":{\"605\":1}}],[\"可以是任何类型\",{\"1\":{\"551\":1}}],[\"可以是\",{\"1\":{\"438\":1,\"536\":1,\"651\":1}}],[\"可以记录程序的运行信息\",{\"1\":{\"438\":1}}],[\"可以捕获异常\",{\"1\":{\"425\":1}}],[\"可以多次add\",{\"1\":{\"423\":1}}],[\"可以一次add多个\",{\"1\":{\"423\":1}}],[\"可以并发执行协程\",{\"1\":{\"423\":1}}],[\"可以用一种称为\",{\"1\":{\"849\":1}}],[\"可以用来实现一个互斥的例子\",{\"1\":{\"707\":1}}],[\"可以用这个便捷脚本\",{\"1\":{\"690\":1}}],[\"可以用于错误处理模式\",{\"1\":{\"689\":1}}],[\"可以用于忽略索引\",{\"1\":{\"591\":1}}],[\"可以用它们来实现对其他类型的数据\",{\"1\":{\"662\":1}}],[\"可以用\",{\"1\":{\"605\":1,\"651\":1,\"662\":1,\"689\":1}}],[\"可以用个数为\",{\"1\":{\"417\":1}}],[\"可以用索引号访问某字节\",{\"1\":{\"333\":1}}],[\"可以放在一个指针前\",{\"1\":{\"547\":1}}],[\"可以放\",{\"1\":{\"363\":1}}],[\"可以对未初始化的map进行取值\",{\"1\":{\"362\":1}}],[\"可以转换为\",{\"1\":{\"351\":2}}],[\"可以转化成任何类型的指针\",{\"1\":{\"351\":1}}],[\"可以访问该指南的\",{\"1\":{\"469\":1}}],[\"可以访问\",{\"1\":{\"328\":1}}],[\"可以借助通道实现\",{\"1\":{\"320\":1}}],[\"可以针对三大特性\",{\"1\":{\"316\":1}}],[\"可以设置多个目录\",{\"1\":{\"446\":1}}],[\"可以设置\",{\"1\":{\"299\":1}}],[\"可以设为\",{\"1\":{\"166\":1,\"202\":1}}],[\"可以将该函数返回的错误忽略\",{\"1\":{\"550\":1}}],[\"可以将错误的获取放置在\",{\"1\":{\"550\":1}}],[\"可以将字符串输出到控制台\",{\"1\":{\"507\":1}}],[\"可以将\",{\"1\":{\"293\":1,\"550\":1,\"605\":1,\"678\":1}}],[\"可以将一个字符串转换为描述其语音表示的字母数字模式\",{\"1\":{\"147\":1,\"180\":1}}],[\"可以进行以下分解\",{\"1\":{\"292\":1}}],[\"可以过滤多条记录\",{\"1\":{\"271\":1}}],[\"可以让\",{\"1\":{\"268\":1}}],[\"可以让汇总函数值汇总不同的值\",{\"1\":{\"150\":1,\"183\":1}}],[\"可以要求用户缩小范围重新查询\",{\"1\":{\"256\":1}}],[\"可以看到\",{\"1\":{\"338\":1,\"383\":1,\"680\":1}}],[\"可以看到会正常的输出\",{\"1\":{\"338\":1}}],[\"可以看到从\",{\"1\":{\"251\":1}}],[\"可以看到是\",{\"1\":{\"51\":1}}],[\"可以平均分配每个库的数据量和请求压力\",{\"1\":{\"249\":1}}],[\"可以通过与最终用户进行互动对话\",{\"1\":{\"876\":1}}],[\"可以通过使用带缓冲\",{\"1\":{\"709\":1}}],[\"可以通过信道回报\",{\"1\":{\"704\":1}}],[\"可以通过如下方式调用函数来实现\",{\"1\":{\"661\":1}}],[\"可以通过如下方法实现\",{\"1\":{\"656\":1}}],[\"可以通过查阅第\",{\"1\":{\"614\":1}}],[\"可以通过拷贝我们需要的部分到一个新的切片中\",{\"1\":{\"602\":1}}],[\"可以通过函数\",{\"1\":{\"600\":1}}],[\"可以通过代码\",{\"1\":{\"595\":1}}],[\"可以通过标准索引法来获取\",{\"1\":{\"532\":1}}],[\"可以通过以下方式来获得\",{\"1\":{\"524\":1}}],[\"可以通过以下例子实现\",{\"1\":{\"483\":1}}],[\"可以通过分解来满足\",{\"1\":{\"291\":1}}],[\"可以通过\",{\"1\":{\"236\":1,\"532\":1,\"649\":1,\"661\":1}}],[\"可以通过检查\",{\"1\":{\"39\":1}}],[\"可以乱序\",{\"0\":{\"227\":1}}],[\"可以索引开始的部分字符\",{\"1\":{\"221\":1}}],[\"可以有其他的方法\",{\"1\":{\"662\":1}}],[\"可以有连接到类型的方法\",{\"1\":{\"653\":1}}],[\"可以有多个\",{\"1\":{\"212\":1}}],[\"可以有两个参数\",{\"1\":{\"122\":1}}],[\"可以考虑使用分区技术或\",{\"1\":{\"211\":1}}],[\"可以开始执行了\",{\"1\":{\"166\":1,\"202\":1}}],[\"可以降低网络通信量\",{\"1\":{\"164\":1,\"200\":1}}],[\"可以取消自动提交\",{\"1\":{\"151\":1,\"187\":1}}],[\"可以以汇总字段来进行排序\",{\"1\":{\"135\":1,\"185\":1}}],[\"可以按照指定的时间来暂停函数或协程的执行\",{\"1\":{\"697\":1}}],[\"可以按照\",{\"1\":{\"249\":1}}],[\"可以按一列或多列进行分组\",{\"1\":{\"135\":1,\"185\":1}}],[\"可以按多个列进行排序\",{\"1\":{\"134\":1}}],[\"可以在标头中添加用户定义的附加声明\",{\"1\":{\"850\":1}}],[\"可以在元素类型后面接上\",{\"1\":{\"758\":1}}],[\"可以在扩展的\",{\"1\":{\"703\":1}}],[\"可以在程序必须中止或发生了临界错误时使用它们\",{\"1\":{\"689\":1}}],[\"可以在导入包的\",{\"1\":{\"689\":1}}],[\"可以在任何实现了这些接口的类型上使用读写方法\",{\"1\":{\"662\":1}}],[\"可以在练习\",{\"1\":{\"655\":1}}],[\"可以在整个包甚至外部包\",{\"1\":{\"515\":1}}],[\"可以在常量表达式中作为多行的连接符使用\",{\"1\":{\"513\":1}}],[\"可以在查询的过程中使用优化隐藏器\",{\"1\":{\"210\":1}}],[\"可以在两个或多个表上工作\",{\"1\":{\"137\":1,\"170\":1}}],[\"可以在相同的查询中\",{\"1\":{\"136\":1,\"186\":1}}],[\"可以在\",{\"1\":{\"129\":1,\"163\":1,\"199\":1,\"517\":1,\"686\":1}}],[\"可以在双方之间进行传输\",{\"1\":{\"39\":1}}],[\"可以与\",{\"1\":{\"129\":1,\"462\":1}}],[\"可以持久地影响纲要和数据\",{\"1\":{\"84\":1}}],[\"可以产生任何标量值\",{\"1\":{\"84\":1}}],[\"可以编写简单的逻辑\",{\"1\":{\"63\":1}}],[\"可以采取适当的动作\",{\"1\":{\"39\":1}}],[\"可以确定请求方是合法的\",{\"1\":{\"26\":1}}],[\"无根目录的路径为相对于当前目录的相对路径\",{\"1\":{\"628\":1}}],[\"无数个函数在不同的代码文件中相互调用\",{\"1\":{\"575\":1}}],[\"无限循环的经典应用是服务器\",{\"1\":{\"556\":1}}],[\"无限循环\",{\"0\":{\"556\":1}}],[\"无视了错误\",{\"1\":{\"550\":1}}],[\"无效的\",{\"1\":{\"549\":1}}],[\"无符号整数\",{\"1\":{\"523\":1}}],[\"无类型的数字型常量\",{\"1\":{\"513\":1}}],[\"无压缩和并行的方式进行编译\",{\"1\":{\"481\":1}}],[\"无疑从根本上摆脱了\",{\"1\":{\"473\":1}}],[\"无需配置和额外代码\",{\"1\":{\"459\":1}}],[\"无需\",{\"1\":{\"429\":1}}],[\"无需使用\",{\"1\":{\"234\":1}}],[\"无缓存channel适用于数据要求同步的场景\",{\"1\":{\"406\":1}}],[\"无缓冲通道会被阻塞\",{\"1\":{\"702\":1}}],[\"无缓冲通道成为了多个协程同步的完美工具\",{\"1\":{\"702\":1}}],[\"无缓冲和有缓冲区别\",{\"1\":{\"405\":1}}],[\"无缓冲的channel是同步的\",{\"1\":{\"400\":1}}],[\"无论是通过对该claim的特定请求还是使用max\",{\"1\":{\"887\":1}}],[\"无论变量是一个结构体类型还是一个结构体类型指针\",{\"1\":{\"640\":1}}],[\"无论实际上存储了多少数据\",{\"1\":{\"605\":1}}],[\"无论满足哪个条件都会返回\",{\"1\":{\"549\":1}}],[\"无论调用者是对象还是对象指针\",{\"1\":{\"382\":1}}],[\"无论您的用例与其中一个类似\",{\"1\":{\"6\":1}}],[\"无论您是结构化还是非结构化文本\",{\"1\":{\"6\":1}}],[\"无序的\",{\"1\":{\"359\":1}}],[\"无侵入式的接口\",{\"1\":{\"320\":1}}],[\"无影响\",{\"1\":{\"243\":1}}],[\"无\",{\"1\":{\"243\":2}}],[\"无法关闭\",{\"1\":{\"709\":1}}],[\"无法预测的错误\",{\"1\":{\"687\":1}}],[\"无法预知变量被不同线程修改的顺序\",{\"1\":{\"625\":1}}],[\"无法正常工作\",{\"1\":{\"591\":1}}],[\"无法使用\",{\"1\":{\"330\":1}}],[\"无法使用该索引\",{\"1\":{\"217\":1}}],[\"无法保证在全局上是唯一的\",{\"1\":{\"257\":1}}],[\"无法实现\",{\"1\":{\"234\":1}}],[\"无法命中\",{\"1\":{\"226\":1}}],[\"无法进行区间查找\",{\"1\":{\"216\":1}}],[\"无法访问\",{\"1\":{\"62\":1}}],[\"无状态\",{\"1\":{\"26\":1}}],[\"这取决于使用的请求参数值和使用的身份验证方法\",{\"1\":{\"875\":1}}],[\"这取决于所使用的请求参数值\",{\"1\":{\"875\":1}}],[\"这符合设计要求之一\",{\"1\":{\"852\":1}}],[\"这通常是通过动态注册完成的\",{\"1\":{\"866\":1}}],[\"这通常用处有限\",{\"1\":{\"850\":1}}],[\"这通常被称为资源竞争\",{\"1\":{\"625\":1}}],[\"这并不要求声明是唯一的\",{\"1\":{\"848\":1}}],[\"这并不是\",{\"1\":{\"531\":1}}],[\"这实际上加倍了迭代容器所需要的内存使用量\",{\"1\":{\"709\":1}}],[\"这句命令行输出类似\",{\"1\":{\"690\":1}}],[\"这句话所说\",{\"1\":{\"471\":1}}],[\"这跟\",{\"1\":{\"689\":1}}],[\"这行代码\",{\"1\":{\"677\":1}}],[\"这被认为是\",{\"1\":{\"676\":1}}],[\"这被称为反引用\",{\"1\":{\"547\":1}}],[\"这被称为\",{\"1\":{\"518\":1}}],[\"这被称为导出\",{\"1\":{\"506\":1}}],[\"这间接地使用指针\",{\"1\":{\"669\":1}}],[\"这从下面两个函数签名能够很明显的看出来\",{\"1\":{\"668\":1}}],[\"这相当于直接将这些内嵌接口的方法列举在外层接口中一样\",{\"1\":{\"662\":1}}],[\"这叫做\",{\"1\":{\"660\":2}}],[\"这提供了一种重载字段或方法的方式\",{\"1\":{\"649\":1}}],[\"这还不是太糟糕\",{\"1\":{\"643\":1}}],[\"这点函数也可以做到\",{\"1\":{\"652\":1}}],[\"这点和\",{\"1\":{\"640\":1}}],[\"这点与\",{\"1\":{\"215\":1}}],[\"这么做的好处是我们的切片在达到容量上限后可以扩容\",{\"1\":{\"592\":1}}],[\"这么好\",{\"1\":{\"63\":1}}],[\"这表示\",{\"1\":{\"585\":1}}],[\"这章我们开始剖析\",{\"1\":{\"578\":1}}],[\"这仅仅是个指导性的例子\",{\"1\":{\"566\":1}}],[\"这得益于\",{\"1\":{\"553\":1}}],[\"这三个元素之间用点\",{\"1\":{\"849\":1}}],[\"这三个目录分别用于存放源码文件\",{\"1\":{\"482\":1}}],[\"这三部分组成的循环的头部\",{\"1\":{\"553\":1}}],[\"这比在循环之前声明更为简短\",{\"1\":{\"553\":1}}],[\"这看起来非常像链式的\",{\"1\":{\"551\":1}}],[\"这儿还有一段示例来演示如何根据操作系统来决定输入结束的提示\",{\"1\":{\"549\":1}}],[\"这将产生一个错误\",{\"1\":{\"669\":1}}],[\"这将创建一个\",{\"1\":{\"631\":1}}],[\"这将导致一个编译错误\",{\"1\":{\"561\":1}}],[\"这将导致编译报错\",{\"1\":{\"549\":1}}],[\"这将对你学习好\",{\"1\":{\"467\":1}}],[\"这听起来很奇怪\",{\"1\":{\"546\":1}}],[\"这有点像\",{\"1\":{\"515\":1}}],[\"这与其它语言如\",{\"1\":{\"532\":1}}],[\"这与\",{\"1\":{\"504\":1,\"860\":1}}],[\"这只是\",{\"1\":{\"501\":1}}],[\"这款\",{\"1\":{\"492\":1}}],[\"这款编译器使用非分代\",{\"1\":{\"481\":1}}],[\"这恰恰说明了\",{\"1\":{\"487\":1}}],[\"这主要是\",{\"1\":{\"476\":1}}],[\"这很可能会被用于在\",{\"1\":{\"476\":1}}],[\"这项技术要求海量并行支持\",{\"1\":{\"476\":1}}],[\"这违背了编程语言应该提升生产力的宗旨\",{\"1\":{\"475\":1}}],[\"这对应于openid\",{\"1\":{\"869\":1}}],[\"这对于没有源代码的包尤其有用\",{\"1\":{\"668\":1}}],[\"这对于游戏服务端的开发而言是再好不过了\",{\"1\":{\"476\":1}}],[\"这对于编程多年受尽并发和异步折磨的编程者来说\",{\"1\":{\"320\":1}}],[\"这对语言本身拥有更好的编码规范起到很大帮助\",{\"1\":{\"474\":1}}],[\"这正是加密的目的所在\",{\"1\":{\"857\":1}}],[\"这正是遵循了\",{\"1\":{\"506\":1}}],[\"这正是\",{\"1\":{\"473\":1}}],[\"这不仅增强了代码的可读性\",{\"1\":{\"496\":1}}],[\"这不仅体现在它可以处理使用\",{\"1\":{\"475\":1}}],[\"这不仅极大地提升了开发者的生产力\",{\"1\":{\"473\":1}}],[\"这不算是脏读\",{\"1\":{\"234\":1}}],[\"这俨然形成了世界上最大的开源团队\",{\"1\":{\"469\":1}}],[\"这使得在授权服务器上拥有多个帐户的最终用户可以在可能拥有当前会话的多个帐户中进行选择\",{\"1\":{\"873\":1}}],[\"这使得它们更具有一般性\",{\"1\":{\"662\":1}}],[\"这使得它再也不再适合这个时代\",{\"1\":{\"467\":1}}],[\"这使得开发者们的代码都非常容易阅读和理解\",{\"1\":{\"474\":1}}],[\"这使得使用\",{\"1\":{\"471\":1}}],[\"这使得\",{\"1\":{\"467\":1}}],[\"这门全新的\",{\"1\":{\"467\":1}}],[\"这本书是为那些想要学习\",{\"1\":{\"467\":1}}],[\"这本书无疑是最适合你的一本书籍\",{\"1\":{\"467\":1}}],[\"这块的\",{\"1\":{\"640\":1}}],[\"这块内存的使用和销毁的责任都在程序员\",{\"1\":{\"445\":1}}],[\"这块我比较模糊\",{\"1\":{\"322\":1}}],[\"这篇文章的目录是\",{\"1\":{\"426\":1}}],[\"这应该是保证高并发系统稳定性\",{\"1\":{\"426\":1}}],[\"这一说法设定了该\",{\"1\":{\"852\":1}}],[\"这一做法使得每个协程\",{\"1\":{\"705\":1}}],[\"这一行最好紧跟在使用\",{\"1\":{\"501\":1}}],[\"这一个环境变量就可以开始使用\",{\"1\":{\"485\":1}}],[\"这一点对于谷歌内部的使用来说就非常重要了\",{\"1\":{\"473\":1}}],[\"这一点和\",{\"1\":{\"234\":1}}],[\"这一块能啃下来\",{\"1\":{\"426\":1}}],[\"这家公司就没有然后了\",{\"1\":{\"423\":1}}],[\"这偏底层了\",{\"1\":{\"412\":1}}],[\"这显然是不合理的\",{\"1\":{\"410\":1}}],[\"这时便会产生多个实例\",{\"1\":{\"803\":1}}],[\"这时协程就真正的是并行运行了\",{\"1\":{\"695\":1}}],[\"这时程序输出\",{\"1\":{\"677\":1}}],[\"这时就可以创建一个接口来使用\",{\"1\":{\"673\":1}}],[\"这时就会用到\",{\"1\":{\"166\":1,\"202\":1}}],[\"这时\",{\"1\":{\"420\":1}}],[\"这时候就有小伙伴会疑惑了\",{\"1\":{\"410\":1}}],[\"这当然是安全的\",{\"1\":{\"396\":1}}],[\"这在练习\",{\"1\":{\"689\":1}}],[\"这在程序\",{\"1\":{\"671\":1}}],[\"这在效果上等同于外层类型\",{\"1\":{\"655\":1}}],[\"这在定义链表或二叉树的元素\",{\"1\":{\"640\":1}}],[\"这在性能上带来了很大的优势\",{\"1\":{\"640\":1}}],[\"这在您需要创建一系列相似的函数的时候非常有用\",{\"1\":{\"574\":1}}],[\"这在任何语言中都是非常差的实践\",{\"1\":{\"553\":1}}],[\"这在\",{\"1\":{\"392\":1,\"653\":1,\"689\":1}}],[\"这部分的代码可以在\",{\"1\":{\"487\":1}}],[\"这部分\",{\"1\":{\"328\":1}}],[\"这包括互联网应用\",{\"1\":{\"320\":1}}],[\"这可用于在返回语句之后修改返回的\",{\"1\":{\"573\":1}}],[\"这可以用作检查现有身份验证和\",{\"1\":{\"873\":1}}],[\"这可以通过面向对象语言一个众所周知的技术来完成\",{\"1\":{\"654\":1}}],[\"这可以通过常量\",{\"1\":{\"549\":1}}],[\"这可以和大多数面向对象编程语言中笨拙的初始化方式做个比较\",{\"1\":{\"642\":1}}],[\"这可以在\",{\"1\":{\"585\":1}}],[\"这可以让\",{\"1\":{\"330\":1}}],[\"这可以进一步减少生产后期的严重错误\",{\"1\":{\"317\":1}}],[\"这可能会将它们暴露给最终用户和有权访问最终用户的用户代理的应用程序\",{\"1\":{\"889\":1}}],[\"这可能比随机的连接要更高效\",{\"1\":{\"268\":1}}],[\"这可能是一项艰巨的任务\",{\"1\":{\"75\":1}}],[\"这就告诉实现者需要进一步处理嵌套的\",{\"1\":{\"850\":1}}],[\"这就可能使\",{\"1\":{\"609\":1}}],[\"这就会给我们带来困惑了\",{\"1\":{\"608\":1}}],[\"这就迫切地需要一门具备更高层次概念的低级语言来突破现状\",{\"1\":{\"472\":1}}],[\"这就导致了内存逃逸\",{\"1\":{\"439\":1}}],[\"这就需要用到执行计划\",{\"1\":{\"264\":1}}],[\"这就是为什么在服务器程序中\",{\"1\":{\"697\":1}}],[\"这就是为什么不能在\",{\"1\":{\"651\":1}}],[\"这就是多态的本质\",{\"1\":{\"662\":1}}],[\"这就是如何使用\",{\"1\":{\"600\":1}}],[\"这就是按引用传递\",{\"1\":{\"563\":1}}],[\"这就是goroutine不同于coroutine的一个地方\",{\"1\":{\"411\":1}}],[\"这就是签名\",{\"1\":{\"39\":1}}],[\"这就是\",{\"1\":{\"37\":1}}],[\"这段程序在运行时不做任何的事情\",{\"1\":{\"627\":1}}],[\"这段程序\",{\"1\":{\"627\":1}}],[\"这段代码可以顺利运行\",{\"1\":{\"602\":1}}],[\"这段代码一般被放在\",{\"1\":{\"549\":1}}],[\"这段代码将会输出\",{\"1\":{\"483\":1}}],[\"这段代码不会执行\",{\"1\":{\"10\":1}}],[\"这段时间内\",{\"1\":{\"260\":1}}],[\"这意味着程序将无法继续执行\",{\"1\":{\"700\":1}}],[\"这意味着对象可以根据提供的方法被处理\",{\"1\":{\"671\":1}}],[\"这意味着线程将有序的对同一变量进行访问\",{\"1\":{\"625\":1}}],[\"这意味着在程序执行的任意时刻都只有$gomaxprocs个goroutine在同时运行\",{\"1\":{\"409\":1}}],[\"这意味着将耗费更多的时间\",{\"1\":{\"272\":1}}],[\"这意味着\",{\"1\":{\"260\":1}}],[\"这两条规则都是被编译器强制规定的\",{\"1\":{\"549\":1}}],[\"这两款编译器都是在类\",{\"1\":{\"481\":1}}],[\"这两者都是\",{\"1\":{\"390\":1}}],[\"这两者会包含\",{\"1\":{\"315\":2}}],[\"这两个值的含义都在oauth\",{\"1\":{\"892\":1}}],[\"这两个内置函数已经在第\",{\"1\":{\"643\":1}}],[\"这两个节点本身又可以有左右节点\",{\"1\":{\"640\":1}}],[\"这两个都是仅\",{\"1\":{\"609\":1}}],[\"这两个函数也支持使用变量\",{\"1\":{\"507\":1}}],[\"这两个变量只有在进行交叉编译的时候才会用到\",{\"1\":{\"482\":1}}],[\"这两个编译器都是以单通道的形式工作\",{\"1\":{\"481\":1}}],[\"这两个神器简直就是并发和异步编程的巨大福音\",{\"1\":{\"320\":1}}],[\"这两个方案其实都可以选用\",{\"1\":{\"252\":1}}],[\"这两种方式都是在主库上记录二进制日志\",{\"1\":{\"260\":1}}],[\"这类语言\",{\"1\":{\"672\":1}}],[\"这类语言的高性能和安全性\",{\"1\":{\"467\":1}}],[\"这类动态语言中的动态类型\",{\"1\":{\"671\":1}}],[\"这类动态语言\",{\"1\":{\"515\":1}}],[\"这类接口支持方法重载\",{\"1\":{\"502\":1}}],[\"这类\",{\"1\":{\"252\":1}}],[\"这也使它越来越受欢迎\",{\"1\":{\"682\":1}}],[\"这也使得它们之间存在相互转换的可能\",{\"1\":{\"509\":1}}],[\"这也体现了谷歌确实想要投资这门语言\",{\"1\":{\"469\":1}}],[\"这也是计算效率最高的一种存储形式\",{\"1\":{\"516\":1}}],[\"这也是人们在讲解它的时候的画法\",{\"1\":{\"516\":1}}],[\"这也是每个开发工具都提供配置文件来实现自定义配置的原因\",{\"1\":{\"490\":1}}],[\"这也是\",{\"1\":{\"392\":1}}],[\"这也是为什么\",{\"1\":{\"670\":1}}],[\"这也是为什么我在文章开头用了伪继承这个词\",{\"1\":{\"338\":1}}],[\"这也是为什么国内go流行的原因之一\",{\"1\":{\"320\":1}}],[\"这也从一个侧面反映出了\",{\"1\":{\"258\":1}}],[\"这也要视具体情况而定\",{\"1\":{\"247\":1}}],[\"这也难怪\",{\"1\":{\"75\":1}}],[\"这会告诉运行时有多少个协程同时执行\",{\"1\":{\"695\":1}}],[\"这会让出处理器\",{\"1\":{\"694\":1}}],[\"这会让索引变得大且慢\",{\"1\":{\"221\":1}}],[\"这会产生一个文本可读数据和二进制数据的混合\",{\"1\":{\"686\":1}}],[\"这会变得有点复杂\",{\"1\":{\"662\":1}}],[\"这会将\",{\"1\":{\"631\":1}}],[\"这会在编译期间就引发错误\",{\"1\":{\"513\":1}}],[\"这会重写\",{\"1\":{\"449\":1}}],[\"这会阻塞其他用户对该表的所有读写操作\",{\"1\":{\"231\":1}}],[\"这会随着数据量的增加而增加\",{\"1\":{\"210\":1}}],[\"这会更改一些不太安全的默认选项\",{\"1\":{\"52\":1}}],[\"这些response\",{\"1\":{\"869\":1}}],[\"这些流决定如何将id令牌和访问令牌返回给客户端\",{\"1\":{\"869\":1}}],[\"这些字符串是身份验证中使用的身份验证方法的标识符\",{\"1\":{\"869\":1}}],[\"这些值按优先级顺序显示\",{\"1\":{\"873\":1}}],[\"这些值可能与上下文有关\",{\"1\":{\"869\":2}}],[\"这些值被传递给被调用函数的形参\",{\"1\":{\"561\":1}}],[\"这些步骤如下图所示\",{\"1\":{\"869\":1}}],[\"这些信息通常是通过\",{\"1\":{\"866\":1}}],[\"这些算法的全部细节见第\",{\"1\":{\"859\":1}}],[\"这些缩写词的含义将在第\",{\"1\":{\"858\":1}}],[\"这些都是所需和推荐的三种主要算法的变体\",{\"1\":{\"858\":1}}],[\"这些都是可选的\",{\"1\":{\"84\":1}}],[\"这些是用于特定情况的特殊要求\",{\"1\":{\"853\":1}}],[\"这些是一类问题\",{\"1\":{\"256\":1}}],[\"这些声明确定了所使用的算法\",{\"1\":{\"850\":1}}],[\"这些示例仅用于教育目的\",{\"1\":{\"847\":1}}],[\"这些常见操作之一是确定某些当事人的身份\",{\"1\":{\"845\":1}}],[\"这些线程其实是共享同一个内存地址空间的一起工作的执行体\",{\"1\":{\"694\":1}}],[\"这些可以在例子\",{\"1\":{\"686\":1}}],[\"这些可以用于\",{\"1\":{\"527\":1}}],[\"这些动态语言相比较\",{\"1\":{\"667\":1}}],[\"这些网站有一些很好的帮助并且你可以通过在谷歌搜索\",{\"1\":{\"636\":1}}],[\"这些例子清楚地展示了如何在\",{\"1\":{\"574\":1}}],[\"这些局部变量同样可以是参数\",{\"1\":{\"574\":1}}],[\"这些被调用函数按顺序\",{\"1\":{\"561\":1}}],[\"这些实参将被复制\",{\"1\":{\"561\":1}}],[\"这些参数将作为返回值\",{\"1\":{\"561\":1}}],[\"这些循环的本质就是无限循环\",{\"1\":{\"556\":1}}],[\"这些对构建运行良好的系统是非常重要的\",{\"1\":{\"547\":1}}],[\"这些对象的作用域都是全局的\",{\"1\":{\"506\":1}}],[\"这些转义字符包括\",{\"1\":{\"532\":1}}],[\"这些函数会\",{\"1\":{\"689\":1}}],[\"这些函数会返回\",{\"1\":{\"545\":1}}],[\"这些函数的声明顺序可以是任意的\",{\"1\":{\"570\":1}}],[\"这些函数返回单个布尔值\",{\"1\":{\"531\":1}}],[\"这些函数只可以用于调试阶段\",{\"1\":{\"507\":1}}],[\"这些类型可以实现任意位类型的数字\",{\"1\":{\"626\":1}}],[\"这些类型的长度都是根据运行程序所在的操作系统类型所决定的\",{\"1\":{\"523\":1}}],[\"这些类型比较特殊\",{\"1\":{\"382\":1}}],[\"这些标识符所对应的值从格式化字符串后的第一个逗号开始按照相同顺序添加\",{\"1\":{\"517\":1}}],[\"这些复合类型也是值类型\",{\"1\":{\"516\":1}}],[\"这些基本类型都属于值类型\",{\"1\":{\"516\":1}}],[\"这些箱子被称为\",{\"1\":{\"516\":1}}],[\"这些控制结构\",{\"1\":{\"515\":1}}],[\"这些枚举值可以用于测试某个变量或常量的实际值\",{\"1\":{\"513\":1}}],[\"这些数据也是\",{\"1\":{\"849\":1}}],[\"这些数据一般使用引用类型保存\",{\"1\":{\"516\":1}}],[\"这些数据可以有不同的数据类型\",{\"1\":{\"509\":1}}],[\"这些数据就会出现多次\",{\"1\":{\"291\":1}}],[\"这些变量被统称为匿名变量\",{\"1\":{\"504\":1}}],[\"这些文件名均由小写字母组成\",{\"1\":{\"504\":1}}],[\"这些库可以使用\",{\"1\":{\"502\":1}}],[\"这些编辑器包含了代码高亮和其它与\",{\"1\":{\"491\":1}}],[\"这些代码仍旧运行在\",{\"1\":{\"487\":1}}],[\"这些设计理念没有建立其它概念之上\",{\"1\":{\"474\":1}}],[\"这些有着庞大体系的语言相比\",{\"1\":{\"467\":1}}],[\"这些情况都充分证明了现有的编程语言已不符合时下的生产环境\",{\"1\":{\"467\":1}}],[\"这些组可以无限制地嵌套而不会降低性能\",{\"1\":{\"455\":1}}],[\"这些命令会共用一套\",{\"1\":{\"449\":1}}],[\"这些记录的信息是相当重要\",{\"1\":{\"438\":1}}],[\"这些方面的工作都是为了减少编码的工作量\",{\"1\":{\"474\":1}}],[\"这些方法是按照函数名称的字典序进行排列的\",{\"1\":{\"383\":1}}],[\"这些方案都不是十分的理想\",{\"1\":{\"258\":1}}],[\"这些语言的并发和异步方式太控制就比较复杂了\",{\"1\":{\"320\":1}}],[\"这些单表查询的缓存结果更可能被其它查询使用到\",{\"1\":{\"268\":1}}],[\"这些因素也会对查询性能造成较大影响\",{\"1\":{\"222\":1}}],[\"这些用于管理由\",{\"1\":{\"89\":1}}],[\"这四个指令合称\",{\"1\":{\"88\":1}}],[\"这是通过将用户代理发送到授权服务器的授权端点进行身份验证和授权来实现的\",{\"1\":{\"872\":1}}],[\"这是留给用户决定的\",{\"1\":{\"848\":1}}],[\"这是设计使然\",{\"1\":{\"708\":1}}],[\"这是死锁\",{\"1\":{\"700\":1}}],[\"这是用来检查是否有错误和\",{\"1\":{\"689\":1}}],[\"这是所有自定义包实现者应该遵守的最佳实践\",{\"1\":{\"689\":1}}],[\"这是从开始标签到结束标签之间的实际文本\",{\"1\":{\"686\":1}}],[\"这是元编程的一种形式\",{\"1\":{\"668\":1}}],[\"这是自动间接发生的\",{\"1\":{\"653\":1}}],[\"这是合法的\",{\"1\":{\"640\":1}}],[\"这是可能的\",{\"1\":{\"640\":1}}],[\"这是最简单的\",{\"1\":{\"854\":1}}],[\"这是最好的例子来测定包的值是否只依赖于相同包下的其他值或者函数\",{\"1\":{\"627\":1}}],[\"这是最常见的使用场景\",{\"1\":{\"26\":1}}],[\"这是在\",{\"1\":{\"625\":1}}],[\"这是无效的代码\",{\"1\":{\"553\":1}}],[\"这是测试\",{\"1\":{\"550\":1}}],[\"这是将类型写在标识符后面的一个重要原因\",{\"1\":{\"518\":1}}],[\"这是使用变量的首选形式\",{\"1\":{\"518\":1}}],[\"这是编译器的强制规定\",{\"1\":{\"507\":1}}],[\"这是定义一个函数最简单的格式\",{\"1\":{\"507\":1}}],[\"这是第一门完全支持\",{\"1\":{\"475\":1}}],[\"这是一种非紧凑型表示法\",{\"1\":{\"849\":1}}],[\"这是一种快速寻找值的理想结构\",{\"1\":{\"603\":1}}],[\"这是一种同构的数据结构\",{\"1\":{\"580\":1}}],[\"这是一种建立在\",{\"1\":{\"578\":1}}],[\"这是一类非常特殊的函数\",{\"1\":{\"519\":1}}],[\"这是一个包装函数\",{\"1\":{\"689\":1}}],[\"这是一个展示\",{\"1\":{\"689\":1}}],[\"这是一个典型的反序列化引用类型\",{\"1\":{\"685\":1}}],[\"这是一个简短的\",{\"1\":{\"682\":1}}],[\"这是一个独立的练习\",{\"1\":{\"680\":1}}],[\"这是一个强大的工具\",{\"1\":{\"668\":1}}],[\"这是一个长度可变的\",{\"1\":{\"590\":1}}],[\"这是一个有\",{\"1\":{\"581\":1}}],[\"这是一个特殊的函数\",{\"1\":{\"510\":1}}],[\"这是一个非常好的编辑器\",{\"1\":{\"493\":1}}],[\"这是一个由计算机领域\",{\"1\":{\"469\":1}}],[\"这是一款专门针对\",{\"1\":{\"491\":1}}],[\"这是一门完全开源的编程语言\",{\"1\":{\"471\":1}}],[\"这是因为结构中只有被导出字段\",{\"1\":{\"670\":1}}],[\"这是因为它以大写字母\",{\"1\":{\"517\":1}}],[\"这是因为编译器会产生\",{\"1\":{\"507\":1}}],[\"这是因为我们在切片的底层维护这一个匿名的数组\",{\"1\":{\"355\":1}}],[\"这是因为go提供了软件生命周期\",{\"1\":{\"320\":1}}],[\"这是因为每张\",{\"1\":{\"303\":1}}],[\"这是多棒的一件事啊\",{\"1\":{\"320\":1}}],[\"这是oop的主要原则之一\",{\"1\":{\"317\":1}}],[\"这是由于索引本身也需要更新\",{\"1\":{\"106\":1}}],[\"这是\",{\"1\":{\"84\":1,\"557\":1,\"662\":2,\"667\":1,\"692\":1,\"857\":1}}],[\"这需要清楚地了解组织的理想结构以及支持它的技术基础设施\",{\"1\":{\"75\":1}}],[\"这样我们就有了一个典型的生产者\",{\"1\":{\"708\":1}}],[\"这样我们就能写出通用的代码\",{\"1\":{\"666\":1}}],[\"这样许多并行的协程可以用来进行查找任务\",{\"1\":{\"697\":1}}],[\"这样同时就只有一个线程可以变更数据\",{\"1\":{\"694\":1}}],[\"这样向上冒泡直到最顶层\",{\"1\":{\"689\":1}}],[\"这样即可以减少单元测试的部分需求\",{\"1\":{\"672\":1}}],[\"这样你就可以更好的应用上面的原则\",{\"1\":{\"662\":1}}],[\"这样你也不会像使用其它语言一样在各种不同版本的依赖文件之间混淆\",{\"1\":{\"487\":1}}],[\"这样给结构体字段赋值\",{\"1\":{\"640\":1}}],[\"这样更短的\",{\"1\":{\"638\":1}}],[\"这样现在这台机器上的其他\",{\"1\":{\"636\":1}}],[\"这样只通过名字就可以将包在程序中导入\",{\"1\":{\"627\":1}}],[\"这样会在当前的计算过程中开始一个同时进行的函数\",{\"1\":{\"694\":1}}],[\"这样会更有效\",{\"1\":{\"611\":1}}],[\"这样会造成调度的不公平\",{\"1\":{\"412\":1}}],[\"这样会造成overflow的bucket数量增多\",{\"1\":{\"373\":1}}],[\"这样切片中的每个\",{\"1\":{\"595\":1}}],[\"这样分配一个有\",{\"1\":{\"588\":1}}],[\"这样两个数组就有了不同的值\",{\"1\":{\"580\":1}}],[\"这样闭包函数就能够被应用到整个集合的元素上\",{\"1\":{\"574\":1}}],[\"这样是不正确的\",{\"1\":{\"561\":1}}],[\"这样一来\",{\"1\":{\"550\":2}}],[\"这样不会传递变量的拷贝\",{\"1\":{\"547\":1}}],[\"这样省去了使用交换函数的必要\",{\"1\":{\"518\":1}}],[\"这样才能得到具有可比性的结果\",{\"1\":{\"499\":1}}],[\"这样才能更加方便的构建\",{\"1\":{\"490\":1}}],[\"这样才能保证所有子协程结束\",{\"1\":{\"423\":1}}],[\"这样的控制流机制\",{\"1\":{\"689\":1}}],[\"这样的语言中的\",{\"1\":{\"689\":1}}],[\"这样的标准错误\",{\"1\":{\"688\":1}}],[\"这样的前缀\",{\"1\":{\"688\":1}}],[\"这样的数据格式可以通过网络传输\",{\"1\":{\"682\":1}}],[\"这样的约束在大量相似的接口中被用来解决歧义\",{\"1\":{\"674\":1}}],[\"这样的继承层次是完全没必要的\",{\"1\":{\"659\":1}}],[\"这样的面向对象语言中\",{\"1\":{\"659\":1}}],[\"这样的\",{\"1\":{\"638\":1,\"672\":1}}],[\"这样的形式指出\",{\"1\":{\"628\":1}}],[\"这样的形式又称之为\",{\"1\":{\"550\":1}}],[\"这样的方式来引入\",{\"1\":{\"627\":1}}],[\"这样的方法来检查对象是否可以响应某个方法\",{\"1\":{\"672\":1}}],[\"这样的方法\",{\"1\":{\"626\":1}}],[\"这样的分数\",{\"1\":{\"626\":1}}],[\"这样的表达式是不可以被放在等号左侧的\",{\"1\":{\"598\":1}}],[\"这样的一个函数不能够独立存在\",{\"1\":{\"573\":1}}],[\"这样的函数称为变参函数\",{\"1\":{\"567\":1}}],[\"这样的引用类型都是默认使用引用传递\",{\"1\":{\"563\":1}}],[\"这样的关键字可以用于中途改变循环的状态\",{\"1\":{\"548\":1}}],[\"这样的类型\",{\"1\":{\"527\":1}}],[\"这样的逻辑语句就其本身而言\",{\"1\":{\"521\":1}}],[\"这样的结果就是当把一个数组赋值给另一个时\",{\"1\":{\"580\":1}}],[\"这样的结果\",{\"1\":{\"507\":1}}],[\"这样的版本控制工具\",{\"1\":{\"490\":1}}],[\"这样的动态语言\",{\"1\":{\"467\":1}}],[\"这样的话服务可以被实现得更加高效和优化\",{\"1\":{\"686\":1}}],[\"这样的话代码可以这样写\",{\"1\":{\"340\":1}}],[\"这样的话就可以同时加密和签名\",{\"1\":{\"39\":1}}],[\"这样可以通过结构体的域计算出唯一的数字或者字符串的\",{\"1\":{\"605\":1}}],[\"这样可以提高程序的吞吐量\",{\"1\":{\"419\":1}}],[\"这样可以大大节约索引空间\",{\"1\":{\"221\":1}}],[\"这样重复下去\",{\"1\":{\"415\":1}}],[\"这样做会使\",{\"1\":{\"658\":1}}],[\"这样做会更加高效\",{\"1\":{\"382\":1}}],[\"这样做稍微有点昂贵\",{\"1\":{\"653\":1}}],[\"这样做\",{\"1\":{\"632\":1}}],[\"这样做是非常不好的\",{\"1\":{\"550\":1}}],[\"这样做是因为\",{\"1\":{\"518\":1}}],[\"这样做的好处是不会将任何令牌暴露给用户代理\",{\"1\":{\"870\":1}}],[\"这样做的好处是不仅减少了内存和硬盘空间占用\",{\"1\":{\"532\":1}}],[\"这样做的好处有\",{\"1\":{\"268\":1}}],[\"这样做更加清晰易读\",{\"1\":{\"506\":1}}],[\"这样将会抛出一个异常\",{\"1\":{\"362\":1}}],[\"这样在函数中如果对参数进行修改\",{\"1\":{\"329\":1}}],[\"这样子用户就不需要关注你内部是怎么实现的\",{\"1\":{\"314\":1}}],[\"这样当我们使用select\",{\"1\":{\"303\":1}}],[\"这样就很好地指出了运行过程中消耗最大的代码\",{\"1\":{\"692\":1}}],[\"这样就有相当大的限制\",{\"1\":{\"689\":1}}],[\"这样就允许我们传递任何数量任何类型的参数给函数\",{\"1\":{\"675\":1}}],[\"这样就允许类型自己实现从流编解码的具体方式\",{\"1\":{\"672\":1}}],[\"这样就不用显式地调用\",{\"1\":{\"662\":1}}],[\"这样就不会忘记释放内存了\",{\"1\":{\"501\":1}}],[\"这样就创建了一个长度为\",{\"1\":{\"585\":1}}],[\"这样就可以构建一个多对一的安全通信通道\",{\"1\":{\"860\":1}}],[\"这样就可以访问局部切片\",{\"1\":{\"676\":1}}],[\"这样就可以用来做分支结构\",{\"1\":{\"605\":1}}],[\"这样就可以接受任何类型的参数\",{\"1\":{\"567\":1}}],[\"这样就可以专注于一个开发环境\",{\"1\":{\"490\":1}}],[\"这样就会发生死锁\",{\"1\":{\"235\":1}}],[\"这样就和视图一样具有较强的安全性\",{\"1\":{\"164\":1,\"200\":1}}],[\"这样其它进程还是可以对同一个表中的其它记录进行操作\",{\"1\":{\"231\":1}}],[\"这样\",{\"1\":{\"225\":1,\"382\":1,\"455\":1,\"523\":1,\"547\":1,\"709\":1,\"853\":1}}],[\"这样处理后\",{\"1\":{\"73\":1}}],[\"这条规则\",{\"1\":{\"63\":1}}],[\"这里先声明了一个字符串通道\",{\"1\":{\"699\":1}}],[\"这里使用了纳秒\",{\"1\":{\"697\":1}}],[\"这里应当是考虑到这一点\",{\"1\":{\"688\":1}}],[\"这里具体类型是\",{\"1\":{\"686\":1}}],[\"这里简单地实现为返回\",{\"1\":{\"673\":1}}],[\"这里用了\",{\"1\":{\"670\":1}}],[\"这里用到了\",{\"1\":{\"515\":1}}],[\"这里并不是说值不可寻址\",{\"1\":{\"669\":1}}],[\"这里并不是真正意义上的别名\",{\"1\":{\"509\":1}}],[\"这里值的顺序必须按照字段顺序来写\",{\"1\":{\"640\":1}}],[\"这里将通过为第\",{\"1\":{\"635\":1}}],[\"这里有个简单例子来说明包是如何相互调用以及可见性是如何实现的\",{\"1\":{\"627\":1}}],[\"这里有一些定义这种\",{\"1\":{\"607\":1}}],[\"这里有一些使用\",{\"1\":{\"502\":1}}],[\"这里有一些评测结果\",{\"1\":{\"499\":1}}],[\"这里有一个来自\",{\"1\":{\"709\":1}}],[\"这里有一个\",{\"1\":{\"606\":1}}],[\"这里有一个计算数组元素和的方法\",{\"1\":{\"586\":1}}],[\"这里有一个可以用来开发\",{\"1\":{\"490\":1}}],[\"这里有一个单独的邮件列表\",{\"1\":{\"469\":1}}],[\"这里有一段来自在\",{\"1\":{\"467\":1}}],[\"这里对调是指调换\",{\"1\":{\"612\":1}}],[\"这里给出了一个使用\",{\"1\":{\"605\":1}}],[\"这里\",{\"1\":{\"587\":1}}],[\"这里举一些有用的例子\",{\"1\":{\"549\":1}}],[\"这里是\",{\"1\":{\"682\":1,\"703\":1}}],[\"这里是一个字符串\",{\"1\":{\"547\":1}}],[\"这里是jwt\",{\"1\":{\"34\":1}}],[\"这里的真实性是指\",{\"1\":{\"857\":1}}],[\"这里的\",{\"1\":{\"547\":1,\"689\":1,\"690\":1}}],[\"这里作者解释的并不清晰\",{\"1\":{\"513\":1}}],[\"这里列举几个最为重要的环境变量\",{\"1\":{\"482\":1}}],[\"这里列举一些\",{\"1\":{\"479\":1}}],[\"这里还有一些更加高级的\",{\"1\":{\"491\":1}}],[\"这里还有一个在\",{\"1\":{\"469\":1}}],[\"这里还包含一个\",{\"1\":{\"383\":1}}],[\"这里包含了当前最全面的学习资源\",{\"1\":{\"467\":1}}],[\"这里把dao逻辑也写入其中\",{\"1\":{\"456\":1}}],[\"这里不需要使用\",{\"1\":{\"549\":1}}],[\"这里不展开了\",{\"1\":{\"450\":1}}],[\"这里不再介绍\",{\"1\":{\"72\":1}}],[\"这里描述的比较简单\",{\"1\":{\"440\":1}}],[\"这里细节还要多去查查资料\",{\"1\":{\"418\":1}}],[\"这里我们构建一个\",{\"1\":{\"699\":1}}],[\"这里我们会用更多的例子进行详细说明\",{\"1\":{\"689\":1}}],[\"这里我们只是按功能进行分组来介绍这些包的简单用途\",{\"1\":{\"614\":1}}],[\"这里我们可以看到\",{\"1\":{\"509\":1}}],[\"这里我们来探索将一个接口转换给另外一个接口背后的原理\",{\"1\":{\"390\":1}}],[\"这里我总结一下\",{\"1\":{\"303\":1}}],[\"这里通过一张图来看下\",{\"1\":{\"383\":1}}],[\"这里存储的是第一个方法的函数指针\",{\"1\":{\"383\":1}}],[\"这里只举例其中的几个\",{\"1\":{\"467\":1}}],[\"这里只会列出实体类型和接口相关的方法\",{\"1\":{\"383\":1}}],[\"这里只有一个\",{\"1\":{\"365\":1}}],[\"这里面实际上通过语法糖起作用的\",{\"1\":{\"381\":1}}],[\"这里要注意\",{\"1\":{\"52\":1}}],[\"这个uri必须精确匹配预先在openid提供者中注册的客户端的重定向uri值之一\",{\"1\":{\"873\":1,\"892\":1}}],[\"这个claim是required\",{\"1\":{\"869\":1}}],[\"这个括号里面是可以传路径参数的\",{\"1\":{\"726\":1}}],[\"这个将通道标记为无法通过发送操作\",{\"1\":{\"709\":1}}],[\"这个模式用到了后边\",{\"1\":{\"708\":1}}],[\"这个模型通过严格的依赖关系检查机制来加快程序构建的速度\",{\"1\":{\"473\":1}}],[\"这个信号也可以是其他的\",{\"1\":{\"705\":1}}],[\"这个很有效的用法在传统计算机中称为信号量\",{\"1\":{\"704\":1}}],[\"这个操作符直观的标示了数据的传输\",{\"1\":{\"700\":1}}],[\"这个名字表明它和\",{\"1\":{\"698\":1}}],[\"这个名字必须在方法中被使用\",{\"1\":{\"652\":1}}],[\"这个情况在以后可能会发生改变\",{\"1\":{\"695\":1}}],[\"这个可以使用\",{\"1\":{\"694\":1}}],[\"这个可达的被删除的节点也是灰色\",{\"1\":{\"429\":1}}],[\"这个命令需要安装\",{\"1\":{\"692\":1}}],[\"这个命令行参数会放置在切片\",{\"1\":{\"681\":1}}],[\"这个分析程序最后需要在程序退出之前调用\",{\"1\":{\"692\":1}}],[\"这个包以\",{\"1\":{\"692\":1}}],[\"这个包会\",{\"1\":{\"689\":1}}],[\"这个包有自己特殊的\",{\"1\":{\"689\":1}}],[\"这个包可以通过\",{\"1\":{\"631\":1}}],[\"这个终止过程就是\",{\"1\":{\"689\":1}}],[\"这个错误值有个\",{\"1\":{\"689\":1}}],[\"这个子包提供了跨平台的函数\",{\"1\":{\"678\":1}}],[\"这个类型的工厂方法像这样\",{\"1\":{\"676\":1}}],[\"这个类型就可以使用\",{\"1\":{\"676\":1}}],[\"这个类型必须在和方法同样的包中被声明\",{\"1\":{\"652\":1}}],[\"这个函数属于\",{\"1\":{\"689\":1}}],[\"这个函数返回被启动进程的\",{\"1\":{\"689\":1}}],[\"这个函数通过枚举\",{\"1\":{\"675\":1}}],[\"这个函数接受一个类似于切片\",{\"1\":{\"567\":1}}],[\"这个转换是在运行时进行检查的\",{\"1\":{\"667\":1}}],[\"这个接口也只有一个签名是\",{\"1\":{\"662\":1}}],[\"这个接口只有一个签名是\",{\"1\":{\"662\":1}}],[\"这个接口总结了需要用于排序的抽象方法\",{\"1\":{\"662\":1}}],[\"这个接口值就才会被认为\",{\"1\":{\"384\":1}}],[\"这个时\",{\"1\":{\"662\":1}}],[\"这个时候触发删除写屏障\",{\"1\":{\"429\":1}}],[\"这个时候别断定map是空还是nil\",{\"1\":{\"362\":1}}],[\"这个实现可以描述为\",{\"1\":{\"662\":1}}],[\"这个方法需要和类\",{\"1\":{\"659\":1}}],[\"这个方法确保被调用函数只能被调用一次\",{\"1\":{\"625\":1}}],[\"这个机制提供了一种简单的方式来模拟经典面向对象语言中的子类和继承相关的效果\",{\"1\":{\"655\":1}}],[\"这个简单的\",{\"1\":{\"648\":1}}],[\"这个片段可以是整个数组\",{\"1\":{\"585\":1}}],[\"这个长度可以为\",{\"1\":{\"567\":1}}],[\"这个变量知道自己指向的函数的签名\",{\"1\":{\"561\":1}}],[\"这个其他函数被称为调用函数\",{\"1\":{\"561\":1}}],[\"这个代码块中的代码只有在条件不满足时才会执行\",{\"1\":{\"549\":1}}],[\"这个地址可以存储在一个叫做指针的特殊数据类型中\",{\"1\":{\"547\":1}}],[\"这个值也可以是phone\",{\"1\":{\"873\":1}}],[\"这个值随着你每次运行程序而变化\",{\"1\":{\"547\":1}}],[\"这个值必须被使用\",{\"1\":{\"518\":1}}],[\"这个例子同样演示了转义字符\",{\"1\":{\"534\":1}}],[\"这个例子中假定\",{\"1\":{\"660\":1}}],[\"这个例子中\",{\"1\":{\"62\":1}}],[\"这个格式化字符串可以含有一个或多个的格式化标识符\",{\"1\":{\"517\":1}}],[\"这个指针实际上也被存在另外的某一个字中\",{\"1\":{\"516\":1}}],[\"这个内存地址被称之为指针\",{\"1\":{\"516\":1}}],[\"这个内容被用来存放jwt的声明\",{\"1\":{\"39\":1}}],[\"这个数目是可以伸缩的\",{\"1\":{\"605\":1}}],[\"这个数值可以用来测试是否成功执行一个程序\",{\"1\":{\"507\":1}}],[\"这个数据库中\",{\"1\":{\"154\":1,\"190\":1}}],[\"这个工具只能获取在\",{\"1\":{\"497\":1}}],[\"这个工具可以将你的源代码格式化成符合官方统一标准的风格\",{\"1\":{\"496\":1}}],[\"这个大型开发环境\",{\"1\":{\"493\":1}}],[\"这个目录在安装\",{\"1\":{\"483\":1}}],[\"这个文件提供了更多详细的信息\",{\"1\":{\"481\":1}}],[\"这个特性显然是\",{\"1\":{\"473\":1}}],[\"这个站点采用\",{\"1\":{\"469\":1}}],[\"这个能保证一组\",{\"1\":{\"423\":1}}],[\"这个不能保证一组\",{\"1\":{\"423\":1}}],[\"这个m对应的实例会在全局变量runtime\",{\"1\":{\"414\":1}}],[\"这个哈希表的负载因子为1\",{\"1\":{\"368\":1}}],[\"这个结构体看起来可能有点让人费解\",{\"1\":{\"365\":1}}],[\"这个区别在最新的go\",{\"1\":{\"362\":1}}],[\"这个规则很好理解\",{\"1\":{\"342\":1}}],[\"这个父类的基本定义\",{\"1\":{\"315\":2}}],[\"这个专题需要根据熟悉哪个数据库而定\",{\"1\":{\"259\":1}}],[\"这个限制在业务上也是合理的\",{\"1\":{\"256\":1}}],[\"这个在官网有登记使用的公司\",{\"1\":{\"251\":1}}],[\"这个一般在表层面做的较多一些\",{\"1\":{\"246\":1}}],[\"这个延时对客户来说不一定能够察觉\",{\"1\":{\"242\":1}}],[\"这个优化的目的是为了提高区间访问的性能\",{\"1\":{\"215\":1}}],[\"这个过程没有实际检索出数据\",{\"1\":{\"168\":1,\"204\":1}}],[\"这个问题可以通过一个名为\",{\"1\":{\"570\":1}}],[\"这个问题又延伸到在\",{\"1\":{\"376\":1}}],[\"这个问题还需要大家去搜索下答案\",{\"1\":{\"360\":1}}],[\"这个问题通常被称为角色爆炸\",{\"1\":{\"75\":1}}],[\"这个问题正好能被简单地解决\",{\"1\":{\"51\":1}}],[\"这个关系的判断通常是由系统硬性限制的\",{\"1\":{\"62\":1}}],[\"这个成员存在的话说明是jwe\",{\"1\":{\"39\":1}}],[\"这个json对象可以是一个json\",{\"1\":{\"39\":1}}],[\"这个算法跟\",{\"1\":{\"37\":1}}],[\"这个密钥只有服务器才知道\",{\"1\":{\"36\":1}}],[\"这个\",{\"1\":{\"35\":1,\"409\":1,\"420\":1,\"487\":1,\"552\":1,\"689\":1}}],[\"这种背景可以包括但不限于实际使用的认证方法或保证级别\",{\"1\":{\"868\":1}}],[\"这种变体用于加密\",{\"1\":{\"860\":1}}],[\"这种变体被称为\",{\"1\":{\"849\":1}}],[\"这种编码基本上是用\",{\"1\":{\"849\":1}}],[\"这种应用的关键在于使用signatures和可能的加密来验证和保护会话内容\",{\"1\":{\"848\":1}}],[\"这种形式嵌入表达式\",{\"1\":{\"757\":1}}],[\"这种形式可以非常优雅地进行条件判断\",{\"1\":{\"551\":1}}],[\"这种看起来并不符合预期的行为正是由通道这种线程安全的通信方式所导致的\",{\"1\":{\"708\":1}}],[\"这种简单的\",{\"1\":{\"708\":1}}],[\"这种简化实施的常见尝试实际上使问题变得更糟\",{\"1\":{\"75\":1}}],[\"这种通过通道进行通信的方式保证了同步性\",{\"1\":{\"699\":1}}],[\"这种格式的数据简称为\",{\"1\":{\"686\":1}}],[\"这种映射关系\",{\"1\":{\"676\":1}}],[\"这种托管在\",{\"1\":{\"627\":1}}],[\"这种数据结构在其他编程语言中也称为字典\",{\"1\":{\"603\":1}}],[\"这种特性有时会导致程序占用多余的内存\",{\"1\":{\"602\":1}}],[\"这种构建方法可以应用于数组和切片\",{\"1\":{\"591\":1}}],[\"这种实现方式比使用\",{\"1\":{\"590\":1}}],[\"这种方案允许一对多信息的安全分发\",{\"1\":{\"860\":1}}],[\"这种方案的优点是架构清晰\",{\"1\":{\"28\":1}}],[\"这种方式跟饿汉式方式采用的机制类似\",{\"1\":{\"803\":1}}],[\"这种方法\",{\"1\":{\"588\":1}}],[\"这种技术还可以应用于纯函数中\",{\"1\":{\"577\":1}}],[\"这种状态\",{\"1\":{\"573\":1}}],[\"这种做法一般都用在测试\",{\"1\":{\"549\":1}}],[\"这种转换方案只对纯\",{\"1\":{\"532\":1}}],[\"这种写法具有固定的格式\",{\"1\":{\"549\":1}}],[\"这种写法是无效的\",{\"1\":{\"527\":1}}],[\"这种写法主要用于声明包级别的全局变量\",{\"1\":{\"515\":1}}],[\"这种情况很少发生\",{\"1\":{\"850\":1}}],[\"这种情况一般发生当从取值范围较大的类型转换为取值范围较小的类型时\",{\"1\":{\"523\":1}}],[\"这种情况下值的顺序不必一致\",{\"1\":{\"640\":1}}],[\"这种情况下不会报错\",{\"1\":{\"612\":1}}],[\"这种情况下\",{\"1\":{\"330\":1,\"631\":1,\"633\":1}}],[\"这种因式分解关键字的写法一般用于声明全局变量\",{\"1\":{\"515\":1}}],[\"这种语法是不正确的\",{\"1\":{\"515\":1}}],[\"这种语法能够按照从左至右的顺序阅读\",{\"1\":{\"515\":1}}],[\"这种语法标准在编译时不需要符号表来协助解析\",{\"1\":{\"474\":1}}],[\"这种结构并没有被强制要求\",{\"1\":{\"510\":1}}],[\"这种多返回值一般用于判断某个函数是否执行成功\",{\"1\":{\"509\":1}}],[\"这种类型可以是任意的原始类型例如整型\",{\"1\":{\"580\":1}}],[\"这种类型的声明要写在函数名和可选的参数列表之后\",{\"1\":{\"509\":1}}],[\"这种类型总是应该被共享\",{\"1\":{\"382\":1}}],[\"这种机制对于编译大型的项目时可以显著地提升编译速度\",{\"1\":{\"506\":1}}],[\"这种更为复杂编码的语言要出色的多\",{\"1\":{\"499\":1}}],[\"这种闪电般的编译速度甚至比编译\",{\"1\":{\"473\":1}}],[\"这种轻量级线程的概念来实现这个目标\",{\"1\":{\"473\":1}}],[\"这种借助数据库锁机制\",{\"1\":{\"419\":1}}],[\"这种抢占对于线程本身是无感知的\",{\"1\":{\"412\":1}}],[\"这种使用方式仅让导入的包做初始化\",{\"1\":{\"340\":1}}],[\"这种索引有被称为聚集索引\",{\"1\":{\"294\":1}}],[\"这种索引的模式被称为非聚集索引\",{\"1\":{\"294\":1}}],[\"这种优化比较考验\",{\"1\":{\"284\":1}}],[\"这种\",{\"1\":{\"252\":2}}],[\"这种策略容易产生热点问题\",{\"1\":{\"249\":1}}],[\"这种文本类型的列\",{\"1\":{\"221\":1}}],[\"这种模型适合于角色之间层次分明\",{\"1\":{\"67\":1}}],[\"这种模式的问题在于\",{\"1\":{\"28\":1}}],[\"这种思想就已经被提出来\",{\"1\":{\"64\":1}}],[\"这种设计最常见的应用就是文件系统的权限设计\",{\"1\":{\"61\":1}}],[\"场景\",{\"1\":{\"26\":1}}],[\"是合适的一个例子\",{\"1\":{\"869\":1}}],[\"是合法的\",{\"1\":{\"547\":1}}],[\"是最常用的\",{\"1\":{\"860\":1}}],[\"是最低级别的范式\",{\"1\":{\"289\":1}}],[\"是由\",{\"1\":{\"853\":1}}],[\"是由数组\",{\"1\":{\"585\":1}}],[\"是保密的\",{\"1\":{\"849\":1}}],[\"是协程\",{\"1\":{\"709\":1}}],[\"是协程安全的\",{\"1\":{\"394\":1}}],[\"是机器上处理器或者核心的数量\",{\"1\":{\"696\":1}}],[\"是非常大的数\",{\"1\":{\"689\":1}}],[\"是传给测试函数的结构类型\",{\"1\":{\"689\":1}}],[\"是很实用的\",{\"1\":{\"689\":1}}],[\"是很有用的\",{\"1\":{\"688\":1}}],[\"是低阶外部包\",{\"1\":{\"688\":1}}],[\"是自身存储作为空接口类型的值\",{\"1\":{\"684\":1}}],[\"是自动生成\",{\"1\":{\"72\":1}}],[\"是另一个有用的功能\",{\"1\":{\"682\":1}}],[\"是被测试函数的字母描述\",{\"1\":{\"689\":1}}],[\"是被定义成一个含有如下字段的结构体\",{\"1\":{\"682\":1}}],[\"是被广泛使用的编码格式\",{\"1\":{\"532\":1}}],[\"是唯一结合了接口值\",{\"1\":{\"671\":1}}],[\"是唯一的\",{\"1\":{\"612\":1}}],[\"是怎么处理普通错误的呢\",{\"1\":{\"687\":1}}],[\"是怎么运用同样的反射原则的\",{\"1\":{\"670\":1}}],[\"是怎么实现扩容\",{\"0\":{\"369\":1}}],[\"是怎么实现的\",{\"0\":{\"328\":1,\"429\":1}}],[\"是空接口一个很好的别名或缩写\",{\"1\":{\"663\":1}}],[\"是待排序序列长度的类型\",{\"1\":{\"662\":1}}],[\"是这个类型的变量\",{\"1\":{\"653\":1}}],[\"是作为值传递给方法的\",{\"1\":{\"653\":1}}],[\"是值\",{\"1\":{\"653\":1}}],[\"是值而\",{\"1\":{\"653\":1}}],[\"是独立的\",{\"1\":{\"652\":1}}],[\"是它的方法名\",{\"1\":{\"651\":1}}],[\"是没问题的\",{\"1\":{\"649\":1}}],[\"是没有类似extends关键字的这种继承的方式\",{\"1\":{\"315\":1}}],[\"是错误的\",{\"1\":{\"649\":1}}],[\"是私有的\",{\"1\":{\"642\":1}}],[\"是等价的\",{\"1\":{\"640\":1,\"642\":1}}],[\"是等待一组协程结束\",{\"1\":{\"423\":1}}],[\"是结构体类型变量\",{\"1\":{\"640\":1}}],[\"是类型\",{\"1\":{\"640\":1,\"662\":1}}],[\"是你在\",{\"1\":{\"636\":1}}],[\"是默认安装的\",{\"1\":{\"635\":1}}],[\"是从\",{\"1\":{\"605\":1}}],[\"是前\",{\"1\":{\"593\":1}}],[\"是字符串那么元素类型就是\",{\"1\":{\"593\":1}}],[\"是新的末尾索引\",{\"1\":{\"592\":1}}],[\"是可以作为\",{\"1\":{\"605\":1}}],[\"是可以动态增长的\",{\"1\":{\"605\":1}}],[\"是可以的\",{\"1\":{\"518\":1,\"662\":2}}],[\"是可选参数\",{\"1\":{\"587\":1}}],[\"是数组或者切片的索引\",{\"1\":{\"591\":1}}],[\"是数组的长度并且也是\",{\"1\":{\"587\":1}}],[\"是数据指针\",{\"1\":{\"384\":1}}],[\"是数据库基本操作中的基本操作\",{\"1\":{\"113\":1}}],[\"是属于不同类型的\",{\"1\":{\"580\":1}}],[\"是函数式语言的特点\",{\"1\":{\"574\":1}}],[\"是容量的意思\",{\"1\":{\"569\":1}}],[\"是拥有三个返回值的不需要任何参数的函数\",{\"1\":{\"565\":1}}],[\"是编译型语言\",{\"1\":{\"561\":1}}],[\"是编译器在编译阶段预先生成好的\",{\"1\":{\"390\":1}}],[\"是不是我们必须得自己编程实现它们\",{\"1\":{\"664\":1}}],[\"是不可能理解它是如何构建的\",{\"1\":{\"662\":1}}],[\"是不被允许的\",{\"1\":{\"547\":1}}],[\"是不合理的\",{\"1\":{\"410\":1}}],[\"是语法正确的\",{\"1\":{\"547\":1}}],[\"是语句结束的标识符\",{\"1\":{\"166\":1,\"202\":1}}],[\"是语句和查询的组成成分\",{\"1\":{\"84\":1}}],[\"是文本文件的标准编码\",{\"1\":{\"532\":1}}],[\"是必须的\",{\"1\":{\"523\":1}}],[\"是常量\",{\"1\":{\"523\":1}}],[\"是具有快捷性质的运算符\",{\"1\":{\"521\":1}}],[\"是强类型语言\",{\"1\":{\"520\":1}}],[\"是变量\",{\"1\":{\"509\":1}}],[\"是安装\",{\"1\":{\"498\":1}}],[\"是官方的\",{\"1\":{\"469\":1}}],[\"是对数组一个连续片段的引用\",{\"1\":{\"585\":1}}],[\"是对\",{\"1\":{\"462\":1}}],[\"是对分的组排序还是对分组中的记录排序呢\",{\"0\":{\"304\":1}}],[\"是在空间受限的环境中安全传递请求的标准\",{\"1\":{\"844\":1}}],[\"是在执行\",{\"1\":{\"573\":1}}],[\"是在编译时就已经完成推断过程\",{\"1\":{\"515\":1}}],[\"是在\",{\"1\":{\"446\":1}}],[\"是如何分配内存的\",{\"0\":{\"440\":1}}],[\"是每隔指定的时间就会向通道内写数据\",{\"1\":{\"438\":1}}],[\"是什么意思\",{\"1\":{\"423\":1}}],[\"是添加计数\",{\"1\":{\"423\":1}}],[\"是悲观锁还是乐观锁\",{\"0\":{\"419\":1}}],[\"是应用程序的启动实例\",{\"1\":{\"408\":1}}],[\"是接口表指针\",{\"1\":{\"384\":1}}],[\"是直接\",{\"1\":{\"382\":1}}],[\"是使用结构体的一个典型例子\",{\"1\":{\"640\":1}}],[\"是使用值接收者还是指针接收者\",{\"1\":{\"382\":1}}],[\"是使用组合来代替的继承\",{\"1\":{\"338\":1}}],[\"是个长度为8的数组\",{\"1\":{\"365\":1}}],[\"是通道可以同时容纳的元素\",{\"1\":{\"703\":1}}],[\"是通过提供一组作用于一个共同类型的方法集来隐式定义的\",{\"1\":{\"659\":1}}],[\"是通过调用\",{\"1\":{\"518\":1}}],[\"是通过反射实现的\",{\"1\":{\"328\":1}}],[\"是通用指针类型\",{\"1\":{\"351\":1}}],[\"是有重载的\",{\"1\":{\"651\":1}}],[\"是有若干个结构为\",{\"1\":{\"363\":1}}],[\"是有效的\",{\"1\":{\"346\":1}}],[\"是有不少公司在用的\",{\"1\":{\"251\":1}}],[\"是引用拷贝\",{\"1\":{\"345\":1}}],[\"是引用类型\",{\"1\":{\"329\":1,\"605\":1}}],[\"是的\",{\"1\":{\"312\":1}}],[\"是面向对象的语言吗\",{\"0\":{\"312\":1}}],[\"是啥\",{\"1\":{\"310\":1}}],[\"是目前使用的最多的两种\",{\"1\":{\"294\":1}}],[\"是目前最流行的跨域认证解决方案\",{\"1\":{\"25\":1}}],[\"是关系的一个或多个属性的集合\",{\"1\":{\"287\":1}}],[\"是关系型数据库\",{\"1\":{\"216\":1}}],[\"是将整个表删除\",{\"1\":{\"273\":1}}],[\"是指在iana\",{\"1\":{\"853\":1}}],[\"是指向一个结构体类型变量的指针\",{\"1\":{\"640\":1}}],[\"是指当前目录\",{\"1\":{\"628\":1}}],[\"是指能够接受一个函数原型和一个列表\",{\"1\":{\"602\":1}}],[\"是指可以通过命令行设置可选参数来影响编译器或链接器的构建过程或得到一个特殊的目标结果\",{\"1\":{\"481\":1}}],[\"是指针\",{\"1\":{\"653\":2}}],[\"是指针而\",{\"1\":{\"515\":1}}],[\"是指针对象进行运算\",{\"1\":{\"351\":1}}],[\"是指针运算的工具\",{\"1\":{\"351\":1}}],[\"是指事务的参与者\",{\"1\":{\"240\":1}}],[\"是指索引列不能是表达式的一部分\",{\"1\":{\"220\":1}}],[\"是指经过编码后的一个json对象\",{\"1\":{\"39\":1}}],[\"是升序排列的\",{\"1\":{\"214\":1}}],[\"是帮助数据库高效查询数据的数据结构\",{\"1\":{\"209\":1}}],[\"是定界符\",{\"1\":{\"166\":1,\"202\":1}}],[\"是用来处理真正的异常\",{\"1\":{\"687\":1}}],[\"是用切片组成的切片\",{\"1\":{\"585\":1}}],[\"是用于测试某个条件\",{\"1\":{\"549\":1}}],[\"是用于表示位的格式化标识符\",{\"1\":{\"525\":1}}],[\"是用于对过滤条件的逻辑处理指令\",{\"1\":{\"132\":1}}],[\"是用于数据库操作\",{\"1\":{\"88\":1}}],[\"是用户的角色属性\",{\"1\":{\"63\":1}}],[\"是相同的类型吗\",{\"1\":{\"523\":1}}],[\"是相同的\",{\"1\":{\"85\":1}}],[\"是rbac最常见的反对意见之一\",{\"1\":{\"75\":1}}],[\"是一款非常好用的轻量级\",{\"1\":{\"492\":1}}],[\"是一款非常流行的\",{\"1\":{\"481\":1}}],[\"是一款\",{\"1\":{\"491\":1}}],[\"是一门开源语言\",{\"1\":{\"486\":1}}],[\"是一条一条记录的删除\",{\"1\":{\"273\":1}}],[\"是一条或多条\",{\"1\":{\"167\":1,\"203\":1}}],[\"是一个难以猜测的数字\",{\"1\":{\"854\":1}}],[\"是一个包含以下字段的结构\",{\"1\":{\"680\":1}}],[\"是一个值\",{\"1\":{\"662\":1}}],[\"是一个多字\",{\"1\":{\"662\":1}}],[\"是一个指针\",{\"1\":{\"651\":1}}],[\"是一个指向\",{\"1\":{\"566\":1,\"640\":1,\"677\":1}}],[\"是一个结构体类型\",{\"1\":{\"642\":1}}],[\"是一个需要上锁的放在共享内存中的变量\",{\"1\":{\"625\":1}}],[\"是一个互斥锁\",{\"1\":{\"625\":1}}],[\"是一个字符串\",{\"1\":{\"595\":1,\"684\":1}}],[\"是一个切片\",{\"1\":{\"585\":2,\"592\":1}}],[\"是一个使用数组的经典例子\",{\"1\":{\"581\":1}}],[\"是一个函数\",{\"1\":{\"569\":1}}],[\"是一个轻量级的单元测试框架\",{\"1\":{\"498\":1}}],[\"是一个革命性的跨平台\",{\"1\":{\"491\":1}}],[\"是一个集成了各种工程实践的\",{\"1\":{\"459\":1}}],[\"是一个\",{\"1\":{\"363\":1,\"461\":1,\"469\":1,\"491\":1,\"662\":2,\"668\":1,\"690\":1}}],[\"是一个传递依赖\",{\"1\":{\"287\":1}}],[\"是一个存储在\",{\"1\":{\"168\":1,\"204\":1}}],[\"是一个间接地\",{\"1\":{\"39\":1}}],[\"是一种公钥算法\",{\"1\":{\"860\":1}}],[\"是一种使用加密散列函数将特定有效载荷与秘密结合起来的算法\",{\"1\":{\"860\":1}}],[\"是一种简写\",{\"1\":{\"640\":1}}],[\"是一种特殊的数据结构\",{\"1\":{\"603\":1}}],[\"是一种特殊的权限点\",{\"1\":{\"70\":1}}],[\"是一种非常高效的语言\",{\"1\":{\"320\":1}}],[\"是一种基于\",{\"1\":{\"310\":1}}],[\"是一种可对数据访问权进行控制的指令\",{\"1\":{\"90\":1}}],[\"是20世纪90年代研究出来的一种新模型\",{\"1\":{\"64\":1}}],[\"是\",{\"0\":{\"430\":1},\"1\":{\"63\":1,\"87\":1,\"215\":1,\"234\":1,\"246\":1,\"320\":1,\"345\":2,\"438\":1,\"446\":1,\"449\":1,\"462\":1,\"469\":2,\"474\":1,\"499\":1,\"546\":1,\"561\":1,\"605\":2,\"609\":1,\"614\":1,\"629\":1,\"651\":1,\"662\":2,\"678\":1,\"682\":2,\"686\":1,\"689\":1,\"858\":1,\"860\":2}}],[\"是操作属性\",{\"1\":{\"63\":1}}],[\"是环境属性\",{\"1\":{\"63\":1}}],[\"是为了简化在编译过程第一步中的代码解析\",{\"1\":{\"504\":1}}],[\"是为了给其他类提供一个可以继承的适当的基类\",{\"1\":{\"392\":1}}],[\"是为了弥补\",{\"1\":{\"62\":1}}],[\"是为了网络应用环境间传递声明而执行的一种基于json的开发标准\",{\"1\":{\"26\":1}}],[\"是否已signatures或加密\",{\"1\":{\"850\":1}}],[\"是否在等待着什么东西\",{\"1\":{\"700\":1}}],[\"是否该类型实现了某个接口\",{\"1\":{\"671\":1}}],[\"是否可设置是\",{\"1\":{\"669\":1}}],[\"是否包含类型\",{\"1\":{\"662\":1}}],[\"是否包含\",{\"1\":{\"535\":1}}],[\"是否以\",{\"1\":{\"534\":2}}],[\"是否需要授权\",{\"1\":{\"455\":1}}],[\"是否线程安全\",{\"0\":{\"396\":1}}],[\"是否支持\",{\"1\":{\"363\":1}}],[\"是否并发安全\",{\"0\":{\"358\":1}}],[\"是否真正获取对象实体\",{\"1\":{\"346\":1}}],[\"是否存在而不关心它对应的值到底是多少\",{\"1\":{\"608\":1}}],[\"是否存在\",{\"1\":{\"226\":1}}],[\"是否存在来判断\",{\"1\":{\"39\":1}}],[\"是否使用一定要慎重\",{\"1\":{\"164\":1,\"200\":1}}],[\"是否有效\",{\"1\":{\"112\":1}}],[\"是否应为用户分配部门之外的角色\",{\"1\":{\"75\":1}}],[\"是否覆盖\",{\"1\":{\"42\":1}}],[\"用这种习惯用法写一个程序\",{\"1\":{\"707\":2}}],[\"用带缓冲通道实现一个信号量\",{\"0\":{\"707\":1}}],[\"用完整的信号量模式对长度为\",{\"1\":{\"705\":1}}],[\"用通道\",{\"1\":{\"700\":1}}],[\"用拿到的名字创建了用来写入分析数据的文件\",{\"1\":{\"692\":1}}],[\"用下面这些函数来通知测试失败\",{\"1\":{\"689\":1}}],[\"用示例\",{\"1\":{\"689\":1}}],[\"用接口实现\",{\"1\":{\"676\":1}}],[\"用组合实现\",{\"1\":{\"676\":1}}],[\"用切片作为\",{\"0\":{\"607\":1}}],[\"用顺序函数过滤容器\",{\"1\":{\"593\":1}}],[\"用一行代码实现\",{\"1\":{\"590\":1}}],[\"用一个表格来呈现\",{\"1\":{\"380\":1}}],[\"用以存储所有可能的参数\",{\"1\":{\"567\":1}}],[\"用法\",{\"1\":{\"525\":2}}],[\"用法和详细的数据结构\",{\"1\":{\"25\":1}}],[\"用大括号括起来的部分\",{\"1\":{\"515\":1}}],[\"用更少的代码\",{\"1\":{\"467\":1}}],[\"用类似链表的方式将bucket连接起来\",{\"1\":{\"367\":1}}],[\"用链表来解决冲突\",{\"1\":{\"363\":1}}],[\"用在import\",{\"1\":{\"340\":1}}],[\"用在变量\",{\"1\":{\"340\":1}}],[\"用作类型断言\",{\"1\":{\"340\":1}}],[\"用\",{\"0\":{\"273\":1,\"277\":1,\"278\":1,\"587\":1,\"689\":1,\"691\":1,\"692\":1},\"1\":{\"306\":1,\"478\":1,\"521\":1,\"545\":1,\"672\":1,\"692\":1}}],[\"用来启动这个协程的函数不会得到任何的返回值\",{\"1\":{\"694\":1}}],[\"用来展示分析结果中最开头的\",{\"1\":{\"692\":1}}],[\"用来管理测试状态\",{\"1\":{\"689\":1}}],[\"用来把输入的字符串解析为整数切片\",{\"1\":{\"689\":1}}],[\"用来提供系统基本调用的原始接口\",{\"1\":{\"688\":1}}],[\"用来计算\",{\"1\":{\"686\":1}}],[\"用来计算正方形的面积\",{\"1\":{\"662\":1}}],[\"用来解析\",{\"1\":{\"686\":1}}],[\"用来保存解码的数据\",{\"1\":{\"683\":1}}],[\"用来保存goroutine之间传递数据的循环链表\",{\"1\":{\"398\":1}}],[\"用来处理一些基本的命令行参数\",{\"1\":{\"681\":1}}],[\"用来决定如何读取\",{\"1\":{\"677\":1}}],[\"用来给\",{\"1\":{\"673\":1}}],[\"用来对此类对象进行排序\",{\"1\":{\"662\":1}}],[\"用来操作在当前系统中的目标文件名路径\",{\"1\":{\"614\":1}}],[\"用来选择要执行的函数\",{\"1\":{\"605\":1}}],[\"用来编译指定\",{\"1\":{\"449\":1}}],[\"用来让一个线程执行程序的关键部分\",{\"1\":{\"418\":1}}],[\"用来记录此循环链表当前发送或接收数据的下标值\",{\"1\":{\"398\":1}}],[\"用来分析\",{\"1\":{\"264\":1}}],[\"用来表示一个\",{\"1\":{\"668\":1}}],[\"用来表示将要或已经被删除的原数据\",{\"1\":{\"166\":1,\"202\":1}}],[\"用来表示将要或已经被修改的原数据\",{\"1\":{\"166\":1,\"202\":1}}],[\"用来表示将要或已经修改为的新数据\",{\"1\":{\"166\":1,\"202\":1}}],[\"用来表示将要\",{\"1\":{\"166\":1,\"202\":1}}],[\"用来表示触发器的所在表中\",{\"1\":{\"166\":1,\"202\":1}}],[\"用来声明变量\",{\"1\":{\"163\":1,\"199\":1}}],[\"用来存储每一种登录方式的信息\",{\"1\":{\"72\":1}}],[\"用来存放实际需要传递的数据\",{\"1\":{\"35\":1}}],[\"用来指代对某种对象的某一种操作\",{\"1\":{\"60\":1}}],[\"用来描述权限规则或用户和权限之间关系的数据表\",{\"1\":{\"60\":1}}],[\"用户信息请求\",{\"0\":{\"933\":1}}],[\"用户信息端点\",{\"0\":{\"932\":1},\"1\":{\"868\":1}}],[\"用户信息表\",{\"1\":{\"72\":1}}],[\"用户代理\",{\"1\":{\"868\":1}}],[\"用户有责任确保根据自己的要求验证\",{\"1\":{\"857\":1}}],[\"用户可在此注册其claims\",{\"1\":{\"853\":1}}],[\"用户可以针对不同的场景选择合适的网络库\",{\"1\":{\"461\":1}}],[\"用户可以专注于业务逻辑\",{\"1\":{\"320\":1}}],[\"用户可以像使用本地事务一样使用基于\",{\"1\":{\"241\":1}}],[\"用户或组织帐户的名称\",{\"1\":{\"782\":1}}],[\"用户点了取消按钮或者打开\",{\"1\":{\"727\":1}}],[\"用户点击保存\",{\"1\":{\"42\":1}}],[\"用户下的\",{\"1\":{\"629\":1}}],[\"用户界面的最终用户首选语言和脚本\",{\"1\":{\"873\":1}}],[\"用户界面\",{\"1\":{\"467\":1}}],[\"用户也可以自行扩展\",{\"1\":{\"461\":1}}],[\"用户层眼中看到的\",{\"1\":{\"330\":1}}],[\"用户需要自己运行整个代码\",{\"1\":{\"317\":1}}],[\"用户数据库等\",{\"1\":{\"246\":1}}],[\"用户对表进行写操作前\",{\"1\":{\"231\":1}}],[\"用户无法看到索引\",{\"1\":{\"106\":1}}],[\"用户名\",{\"1\":{\"98\":1,\"112\":1,\"811\":1}}],[\"用户自定义函数等数据库对象的控制权\",{\"1\":{\"90\":1}}],[\"用户量大\",{\"0\":{\"73\":1}}],[\"用户量小\",{\"0\":{\"72\":1}}],[\"用户角色权限设计\",{\"2\":{\"77\":1}}],[\"用户角色\",{\"1\":{\"72\":1}}],[\"用户权限表\",{\"1\":{\"72\":1}}],[\"用户账号表\",{\"1\":{\"72\":1}}],[\"用户状态\",{\"1\":{\"72\":1}}],[\"用户表\",{\"1\":{\"72\":2,\"73\":1,\"98\":1,\"112\":1}}],[\"用户id\",{\"1\":{\"72\":4,\"73\":2}}],[\"用户与角色关联后\",{\"1\":{\"64\":1}}],[\"用户与服务端通信的时候\",{\"1\":{\"29\":1}}],[\"用户通过被分配为不同的角色从而获得不同角色的权限\",{\"1\":{\"64\":1}}],[\"用户属性\",{\"1\":{\"63\":1}}],[\"用户创建一个主目录\",{\"1\":{\"52\":1}}],[\"用户\",{\"1\":{\"51\":1,\"60\":1,\"65\":3,\"66\":1,\"71\":1,\"72\":3,\"631\":1,\"853\":1}}],[\"用户和商家同时都是主题用户\",{\"1\":{\"73\":1}}],[\"用户和角色之间的映射关系\",{\"1\":{\"65\":1}}],[\"用户和\",{\"1\":{\"51\":1}}],[\"用户组角色\",{\"1\":{\"73\":1}}],[\"用户组成员\",{\"1\":{\"73\":1}}],[\"用户组id\",{\"1\":{\"73\":4}}],[\"用户组code代码\",{\"1\":{\"73\":1}}],[\"用户组code唯一代码\",{\"1\":{\"73\":1}}],[\"用户组介绍\",{\"1\":{\"73\":1}}],[\"用户组名称\",{\"1\":{\"73\":1}}],[\"用户组和角色组的区别\",{\"1\":{\"73\":1}}],[\"用户组表\",{\"1\":{\"73\":1}}],[\"用户组\",{\"1\":{\"51\":2,\"73\":4}}],[\"用户在使用时应该每次都进行进行身份验证\",{\"1\":{\"31\":1}}],[\"用户只要在其中一个网站登录\",{\"1\":{\"28\":1}}],[\"用户随后的每一次请求\",{\"1\":{\"28\":1}}],[\"用户向服务器发送用户名和密码\",{\"1\":{\"28\":1}}],[\"用于响应rp发送的授权请求消息\",{\"1\":{\"877\":1}}],[\"用于指定授权服务器是否提示最终用户进行重新身份验证和同意\",{\"1\":{\"873\":1}}],[\"用于维护请求和回调之间的状态的不透明值\",{\"1\":{\"873\":1}}],[\"用于客户端使用\",{\"1\":{\"869\":1}}],[\"用于客户端向服务端发起连接和请求\",{\"1\":{\"4\":1}}],[\"用于唯一标识此\",{\"1\":{\"852\":1}}],[\"用于唯一标识该\",{\"1\":{\"852\":1}}],[\"用于唯一标识\",{\"1\":{\"852\":1}}],[\"用于签署或解密此\",{\"1\":{\"850\":1}}],[\"用于建立对某些当事人的声明\",{\"1\":{\"846\":1}}],[\"用于取得\",{\"1\":{\"689\":1}}],[\"用于处理文件名和路径\",{\"1\":{\"678\":1}}],[\"用于处理服务端间的raft相关请求\",{\"1\":{\"4\":1}}],[\"用于显示错误信息\",{\"1\":{\"677\":1}}],[\"用于停止处于在非正常情况下的程序\",{\"1\":{\"662\":1}}],[\"用于调试\",{\"1\":{\"660\":1}}],[\"用于组成域类型\",{\"1\":{\"656\":1}}],[\"用于创建空节点的\",{\"1\":{\"666\":1}}],[\"用于创建和操作复数\",{\"1\":{\"569\":1}}],[\"用于创建存储过程\",{\"1\":{\"162\":1,\"198\":1}}],[\"用于复制和连接切片\",{\"1\":{\"569\":1}}],[\"用于内置引用类型\",{\"1\":{\"569\":1}}],[\"用于值类型和用户定义的类型\",{\"1\":{\"569\":1}}],[\"用于管道通信\",{\"1\":{\"569\":1}}],[\"用于管理数据库中的事务\",{\"1\":{\"89\":1}}],[\"用于不断等待和接受新的请求\",{\"1\":{\"556\":1}}],[\"用于比较两个整型数字的大小\",{\"1\":{\"549\":1}}],[\"用于返回某个类型的最大容量\",{\"1\":{\"569\":1}}],[\"用于返回某个类型的长度或数量\",{\"1\":{\"569\":1}}],[\"用于返回一个整型数字的绝对值\",{\"1\":{\"549\":1}}],[\"用于返回唯一不同的值\",{\"1\":{\"122\":1}}],[\"用于\",{\"1\":{\"548\":1}}],[\"用于生成一个\",{\"1\":{\"544\":1}}],[\"用于生产环境才足够说明它本身所具有的优势\",{\"1\":{\"499\":1}}],[\"用于自定义分割符号来对指定字符串进行分割\",{\"1\":{\"542\":1}}],[\"用于重复\",{\"1\":{\"539\":1}}],[\"用于计算字符串\",{\"1\":{\"538\":1}}],[\"用于将客户端会话与id令牌相关联并减轻重放攻击的字符串值\",{\"1\":{\"869\":1,\"873\":1,\"892\":1}}],[\"用于将元素类型为\",{\"1\":{\"543\":1}}],[\"用于将字符串\",{\"1\":{\"537\":1}}],[\"用于将你的\",{\"1\":{\"498\":1}}],[\"用于表示索赔值的语法\",{\"1\":{\"868\":1}}],[\"用于表示字符\",{\"1\":{\"531\":1}}],[\"用于表示程序中的时区\",{\"1\":{\"530\":1}}],[\"用于表示数字\",{\"1\":{\"523\":1}}],[\"用于简化名称或解决名称冲突\",{\"1\":{\"530\":1}}],[\"用于规定输出长度为\",{\"1\":{\"523\":1}}],[\"用于格式化浮点型\",{\"1\":{\"523\":1}}],[\"用于格式化\",{\"1\":{\"523\":1}}],[\"用于格式化整数\",{\"1\":{\"523\":1}}],[\"用于存储不会改变的数据\",{\"1\":{\"513\":1}}],[\"用于设置应用程序可使用的处理器个数与核数\",{\"1\":{\"482\":1}}],[\"用于服务治理\",{\"1\":{\"462\":1}}],[\"用于服务间同步等\",{\"1\":{\"4\":1}}],[\"用于编译并运行命令源码文件\",{\"1\":{\"451\":1}}],[\"用于编译并安装指定的代码包及它们的依赖包\",{\"1\":{\"450\":1}}],[\"用于测试程序的功能和性能\",{\"1\":{\"449\":1}}],[\"用于保存向该chan发送和从改chan接收数据的goroutine的队列\",{\"1\":{\"398\":1}}],[\"用于扩容的指针\",{\"1\":{\"364\":1}}],[\"用于描述动物的名字\",{\"1\":{\"338\":1}}],[\"用于检测是否有读写事件是否\",{\"1\":{\"331\":1}}],[\"用于统一的访问和设置控制\",{\"1\":{\"314\":1}}],[\"用于各种数据库的数据类型\",{\"1\":{\"301\":1}}],[\"用于实现提交读和可重复读这两种隔离级别\",{\"1\":{\"234\":1}}],[\"用于控制字段的值范围\",{\"1\":{\"228\":1}}],[\"用于控制字段的内容一定不能为空\",{\"1\":{\"228\":1}}],[\"用于预防破坏表之间连接的动作\",{\"1\":{\"228\":1}}],[\"用于定义语句的结束符\",{\"1\":{\"163\":1,\"199\":1}}],[\"用于定义和维护角色\",{\"1\":{\"74\":1}}],[\"用于修改存储过程\",{\"1\":{\"162\":1,\"198\":1}}],[\"用于删除存储过程\",{\"1\":{\"162\":1,\"198\":1}}],[\"用于对实体和所提交的身份之间的约束力达到足够的信心的过程\",{\"1\":{\"868\":1}}],[\"用于对变量进行赋值\",{\"1\":{\"163\":1,\"199\":1}}],[\"用于对汇总的\",{\"1\":{\"136\":1,\"186\":1}}],[\"用于对结果集进行排序\",{\"1\":{\"134\":1}}],[\"本规范还定义了以下错误码\",{\"1\":{\"878\":1}}],[\"本规范还定义了以下术语\",{\"1\":{\"868\":1}}],[\"本规范定义了正常的\",{\"1\":{\"868\":1}}],[\"本规范定义了openid\",{\"1\":{\"865\":1}}],[\"本规范使用\",{\"1\":{\"868\":1}}],[\"本规范中所有对json网络签名\",{\"1\":{\"867\":1}}],[\"本规范假定信赖方已经获得了足够的凭证并提供了使用\",{\"1\":{\"866\":1}}],[\"本规范假定信赖方已经获得了有关\",{\"1\":{\"866\":1}}],[\"本章将让您了解目前业界常用的基于\",{\"1\":{\"847\":1}}],[\"本章介绍\",{\"1\":{\"662\":1}}],[\"本章主要针对\",{\"1\":{\"613\":1}}],[\"本\",{\"1\":{\"557\":2}}],[\"本书会尽可能地将前后章节的内容联系起来\",{\"1\":{\"467\":1}}],[\"本书将会在最后给出一些对\",{\"1\":{\"467\":1}}],[\"本书将会从最基础的概念讲起\",{\"1\":{\"467\":1}}],[\"本书通过对官方的在线文档\",{\"1\":{\"467\":1}}],[\"本该分配到栈上的变量\",{\"1\":{\"439\":1}}],[\"本该写入g的数据位置为nil\",{\"1\":{\"404\":1}}],[\"本人面传音控股被问道\",{\"1\":{\"426\":1}}],[\"本身的媒体类型\",{\"1\":{\"850\":1}}],[\"本身\",{\"1\":{\"614\":1}}],[\"本身已经是一个布尔类型的值\",{\"1\":{\"549\":1}}],[\"本身不是\",{\"1\":{\"849\":1}}],[\"本身不允许开发者进行自定义的运算符重载\",{\"1\":{\"527\":1}}],[\"本身不存储数据\",{\"1\":{\"103\":1}}],[\"本身就是一个特殊的标识符\",{\"1\":{\"504\":1}}],[\"本身就是为复制设计的\",{\"1\":{\"382\":1}}],[\"本身没有对源文件的大小进行限制\",{\"1\":{\"504\":1}}],[\"本身所具有的诸多功能\",{\"1\":{\"493\":1}}],[\"本例中的id令牌签名可以使用附录a\",{\"1\":{\"883\":1}}],[\"本例中打印的是\",{\"1\":{\"682\":1}}],[\"本例中\",{\"1\":{\"364\":1,\"559\":1}}],[\"本质上是一个字节数组\",{\"1\":{\"595\":1}}],[\"本质上\",{\"1\":{\"338\":1}}],[\"本质上并没有区别\",{\"1\":{\"303\":1}}],[\"本地库中的历史版本\",{\"1\":{\"822\":1}}],[\"本地库初始化\",{\"0\":{\"810\":1}}],[\"本地维护\",{\"1\":{\"808\":1}}],[\"本地区\",{\"1\":{\"808\":1}}],[\"本地仓库的操作命令已经完成\",{\"1\":{\"635\":1}}],[\"本地包在用户目录下\",{\"1\":{\"632\":1}}],[\"本地安装包\",{\"0\":{\"632\":1}}],[\"本地文档等\",{\"1\":{\"486\":1}}],[\"本地事务\",{\"1\":{\"240\":1,\"243\":1}}],[\"本地开发环境配置\",{\"2\":{\"8\":1}}],[\"本节描述了如何使用授权码流执行身份验证\",{\"1\":{\"870\":1}}],[\"本节我们进一步探讨强大的反射功能\",{\"1\":{\"668\":1}}],[\"本节我们将创建一个\",{\"1\":{\"638\":1}}],[\"本节主要以\",{\"1\":{\"146\":1,\"179\":1}}],[\"本节所说的精简版代表的是\",{\"1\":{\"72\":1}}],[\"本文中关键字\",{\"1\":{\"867\":1}}],[\"本文档中所有对\",{\"1\":{\"849\":1}}],[\"本文语法主要针对\",{\"1\":{\"80\":1,\"168\":1}}],[\"本文侧重说明用法\",{\"1\":{\"80\":1,\"168\":1}}],[\"本文针对关系型数据库的基本语法\",{\"1\":{\"80\":1,\"168\":1}}],[\"本文就将向大家介绍该权限模型\",{\"1\":{\"60\":1}}],[\"本文介绍它的原理\",{\"1\":{\"25\":1}}],[\"缩写\",{\"1\":{\"25\":1,\"419\":1}}],[\"`$\",{\"1\":{\"859\":4}}],[\"`this\",{\"1\":{\"532\":1}}],[\"`trigger\",{\"1\":{\"167\":1,\"203\":1}}],[\"`build\",{\"1\":{\"507\":1}}],[\"`localhost`\",{\"1\":{\"163\":1,\"199\":1}}],[\"`my\",{\"1\":{\"757\":1}}],[\"`member\",{\"1\":{\"72\":1,\"73\":3}}],[\"`mobile`\",{\"1\":{\"72\":1}}],[\"`role\",{\"1\":{\"72\":11,\"73\":4}}],[\"`role`\",{\"1\":{\"72\":3,\"73\":1}}],[\"`uri`\",{\"1\":{\"72\":1}}],[\"`user`\",{\"1\":{\"72\":3,\"73\":1,\"102\":1,\"151\":2,\"167\":1,\"187\":2,\"203\":1}}],[\"`user\",{\"1\":{\"72\":9,\"73\":18,\"167\":1,\"203\":1}}],[\"`intro`\",{\"1\":{\"72\":2,\"73\":1}}],[\"`idx\",{\"1\":{\"72\":1}}],[\"`id`\",{\"1\":{\"72\":17,\"73\":10}}],[\"`proc\",{\"1\":{\"163\":2,\"199\":2}}],[\"`permission\",{\"1\":{\"72\":4}}],[\"`permission`\",{\"1\":{\"72\":2}}],[\"`parent\",{\"1\":{\"72\":6,\"73\":3}}],[\"`password`\",{\"1\":{\"72\":1}}],[\"`salt`\",{\"1\":{\"72\":1}}],[\"`state`\",{\"1\":{\"72\":1}}],[\"`head\",{\"1\":{\"72\":1}}],[\"`name`\",{\"1\":{\"72\":3,\"73\":1}}],[\"`nat\",{\"1\":{\"51\":1}}],[\"`account\",{\"1\":{\"72\":1}}],[\"`account`\",{\"1\":{\"72\":1}}],[\"`deleted`\",{\"1\":{\"72\":6,\"73\":3}}],[\"`editor`\",{\"1\":{\"72\":6,\"73\":3}}],[\"`edited`\",{\"1\":{\"72\":6,\"73\":3}}],[\"`code`\",{\"1\":{\"72\":6,\"73\":3}}],[\"`creator`\",{\"1\":{\"72\":6,\"73\":3}}],[\"`created`\",{\"1\":{\"72\":6,\"73\":3}}],[\"`category`\",{\"1\":{\"72\":2}}],[\"`open\",{\"1\":{\"72\":1}}],[\"`\",{\"1\":{\"18\":15,\"21\":15,\"483\":1,\"507\":1,\"532\":2,\"638\":2,\"684\":2,\"757\":2,\"859\":4}}],[\"`yaml\",{\"1\":{\"18\":15,\"21\":15}}],[\"uu\",{\"1\":{\"690\":1}}],[\"uctests\",{\"1\":{\"631\":2}}],[\"uctest\",{\"1\":{\"631\":5}}],[\"ucmain\",{\"1\":{\"631\":10,\"632\":1}}],[\"uc\",{\"1\":{\"630\":1,\"631\":30,\"632\":9,\"635\":8,\"636\":7}}],[\"u754c\",{\"1\":{\"595\":1}}],[\"u+fffd\",{\"1\":{\"595\":1}}],[\"u+8a9e\",{\"1\":{\"557\":1}}],[\"u+672c\",{\"1\":{\"557\":1}}],[\"u+65e5\",{\"1\":{\"557\":1}}],[\"u+101234\",{\"1\":{\"531\":1}}],[\"u+0020\",{\"1\":{\"557\":1}}],[\"u+003a\",{\"1\":{\"557\":1}}],[\"u+0073\",{\"1\":{\"557\":1}}],[\"u+0065\",{\"1\":{\"557\":2}}],[\"u+006e\",{\"1\":{\"557\":1}}],[\"u+0069\",{\"1\":{\"557\":1}}],[\"u+0068\",{\"1\":{\"557\":1}}],[\"u+0043\",{\"1\":{\"557\":1}}],[\"u+0041\",{\"1\":{\"531\":1}}],[\"u+03b2\",{\"1\":{\"531\":1}}],[\"u+hhhh\",{\"1\":{\"531\":2}}],[\"u00ff\",{\"1\":{\"595\":1}}],[\"u00101234\",{\"1\":{\"531\":1}}],[\"u0041\",{\"1\":{\"531\":1}}],[\"u03b2\",{\"1\":{\"531\":1}}],[\"ugrp\",{\"1\":{\"469\":1}}],[\"ut\",{\"1\":{\"631\":5}}],[\"utc\",{\"1\":{\"546\":6,\"660\":2,\"869\":3}}],[\"utf\",{\"1\":{\"469\":1,\"475\":3,\"504\":1,\"531\":3,\"532\":3,\"557\":1,\"662\":1,\"849\":1,\"855\":2}}],[\"utf8mb4\",{\"1\":{\"72\":4}}],[\"utf8\",{\"1\":{\"72\":56,\"73\":24,\"531\":1,\"532\":1,\"595\":2,\"859\":5}}],[\"util\",{\"1\":{\"450\":2}}],[\"ui\",{\"1\":{\"873\":1}}],[\"uitvoering\",{\"1\":{\"689\":1}}],[\"uint64\",{\"1\":{\"504\":1,\"523\":3,\"577\":3,\"626\":1,\"668\":1}}],[\"uint32\",{\"1\":{\"364\":1,\"383\":1,\"398\":1,\"504\":1,\"523\":1,\"668\":1}}],[\"uint16\",{\"1\":{\"364\":1,\"398\":1,\"504\":1,\"523\":1,\"668\":1}}],[\"uintptr\",{\"1\":{\"351\":4,\"364\":1,\"365\":2,\"383\":1,\"504\":1,\"523\":2,\"561\":1,\"614\":3,\"668\":1}}],[\"uintptr和\",{\"0\":{\"351\":1}}],[\"uint8fromint\",{\"1\":{\"523\":1}}],[\"uint8和int32类型\",{\"1\":{\"333\":1}}],[\"uint8\",{\"1\":{\"326\":2,\"364\":2,\"365\":2,\"504\":1,\"523\":4,\"525\":2,\"531\":1,\"668\":1}}],[\"uint\",{\"0\":{\"326\":1},\"1\":{\"398\":4,\"501\":3,\"504\":1,\"523\":2,\"668\":2}}],[\"ui<\",{\"1\":{\"46\":1}}],[\"up\",{\"1\":{\"682\":2}}],[\"upperson\",{\"1\":{\"640\":6}}],[\"uppercase\",{\"1\":{\"540\":2,\"630\":1,\"631\":4}}],[\"upper\",{\"1\":{\"147\":1,\"180\":1,\"540\":3}}],[\"updatea\",{\"1\":{\"151\":4,\"187\":4}}],[\"update\",{\"1\":{\"51\":1,\"52\":4,\"72\":5,\"73\":4,\"85\":2,\"88\":2,\"90\":1,\"118\":2,\"128\":1,\"129\":3,\"156\":1,\"166\":1,\"167\":1,\"192\":1,\"202\":1,\"203\":1,\"210\":1,\"211\":1,\"232\":1,\"234\":1,\"235\":2,\"625\":1}}],[\"urn\",{\"1\":{\"869\":1}}],[\"uri值而没有出现redirect\",{\"1\":{\"882\":1}}],[\"uri参数值\",{\"1\":{\"882\":1}}],[\"uri参数值相同\",{\"1\":{\"882\":1}}],[\"uri参数值与初始授权请求中包含的redirect\",{\"1\":{\"882\":1}}],[\"uri参数\",{\"1\":{\"878\":1}}],[\"uri返回错误或包含无效数据\",{\"1\":{\"878\":1}}],[\"uri中\",{\"1\":{\"877\":1}}],[\"uri=https\",{\"1\":{\"873\":2,\"881\":1}}],[\"uri重定向\",{\"1\":{\"868\":1}}],[\"uri\",{\"0\":{\"952\":1,\"954\":1},\"1\":{\"852\":5,\"868\":2,\"873\":1,\"878\":3,\"892\":1}}],[\"uroot\",{\"1\":{\"52\":1}}],[\"url引用请求对象\",{\"0\":{\"951\":1}}],[\"urlencoded\",{\"1\":{\"881\":1}}],[\"urlencoded格式将它们作为查询参数添加到授权请求中指定的redirect\",{\"1\":{\"877\":1}}],[\"urlshort\",{\"1\":{\"638\":4}}],[\"urlshortenersvc\",{\"1\":{\"638\":8}}],[\"urlshortener\",{\"1\":{\"638\":17}}],[\"url规则\",{\"1\":{\"72\":1}}],[\"url`\",{\"1\":{\"72\":1}}],[\"url安全的\",{\"1\":{\"39\":1}}],[\"url\",{\"1\":{\"37\":2,\"39\":1,\"627\":2,\"638\":22,\"692\":2,\"849\":3,\"855\":2,\"856\":2,\"859\":1,\"861\":1}}],[\"u\",{\"1\":{\"52\":1,\"481\":1,\"491\":1,\"531\":9,\"532\":2,\"553\":3,\"557\":4,\"573\":2,\"635\":1,\"643\":3,\"662\":2,\"670\":1,\"684\":2,\"686\":5,\"764\":1,\"782\":1}}],[\"ubuntu\",{\"1\":{\"51\":1,\"52\":3,\"78\":1,\"483\":1}}],[\"unable\",{\"1\":{\"828\":1}}],[\"unaddressable\",{\"1\":{\"669\":2}}],[\"unlink\",{\"1\":{\"688\":1}}],[\"unlock\",{\"1\":{\"427\":2,\"568\":1,\"625\":1,\"662\":1,\"707\":1}}],[\"unbuffered\",{\"1\":{\"682\":3,\"703\":1}}],[\"unboxing\",{\"1\":{\"664\":1}}],[\"underlying\",{\"1\":{\"667\":1,\"686\":2}}],[\"undefined\",{\"0\":{\"764\":1},\"1\":{\"507\":1,\"518\":1,\"654\":1,\"762\":1,\"764\":2}}],[\"unchecked\",{\"1\":{\"662\":1}}],[\"uncommitted\",{\"1\":{\"239\":1}}],[\"unexported\",{\"1\":{\"627\":1,\"654\":1,\"670\":2}}],[\"unexpected\",{\"1\":{\"507\":1,\"564\":1,\"662\":1,\"663\":1}}],[\"un\",{\"1\":{\"568\":3}}],[\"untrace\",{\"1\":{\"568\":4}}],[\"until\",{\"1\":{\"568\":2,\"678\":1}}],[\"unused\",{\"1\":{\"383\":1}}],[\"unsupported\",{\"1\":{\"878\":1}}],[\"unsorted\",{\"1\":{\"611\":2}}],[\"unsafepointer\",{\"1\":{\"668\":1}}],[\"unsafe\",{\"0\":{\"351\":1},\"1\":{\"351\":6,\"364\":2,\"383\":2,\"398\":1,\"481\":1,\"501\":4,\"614\":1,\"623\":1,\"642\":1}}],[\"unsigned\",{\"1\":{\"72\":6,\"73\":3,\"98\":1,\"112\":1,\"670\":1}}],[\"universal\",{\"1\":{\"660\":1}}],[\"unicode\",{\"1\":{\"499\":1,\"504\":1,\"506\":1,\"521\":1,\"531\":8,\"532\":3,\"540\":2,\"553\":1,\"557\":2,\"572\":2,\"595\":2,\"602\":1,\"614\":3}}],[\"union\",{\"0\":{\"144\":1,\"145\":1,\"177\":1,\"178\":1},\"1\":{\"144\":5,\"145\":2,\"177\":5,\"178\":2,\"205\":1}}],[\"uniq\",{\"1\":{\"108\":1,\"109\":1,\"602\":1}}],[\"unique\",{\"1\":{\"108\":1,\"112\":3,\"212\":1,\"228\":2}}],[\"unixnano\",{\"1\":{\"618\":1}}],[\"unixnatime\",{\"1\":{\"618\":1}}],[\"unixtime\",{\"1\":{\"618\":1}}],[\"unix\",{\"1\":{\"51\":2,\"446\":1,\"469\":3,\"481\":1,\"549\":2,\"607\":1,\"614\":1,\"618\":1,\"619\":1,\"620\":1,\"677\":2,\"678\":1,\"680\":1,\"682\":1,\"689\":1,\"690\":1,\"699\":1}}],[\"unknown\",{\"1\":{\"84\":1,\"513\":1,\"662\":1,\"663\":1,\"689\":1}}],[\"unrecognized\",{\"1\":{\"51\":1}}],[\"unmarshal\",{\"1\":{\"18\":1,\"21\":1,\"683\":4,\"684\":2,\"685\":1,\"686\":1}}],[\"us\",{\"1\":{\"365\":1,\"725\":1,\"730\":2,\"731\":1,\"732\":1}}],[\"used\",{\"1\":{\"383\":1,\"495\":1,\"506\":1,\"513\":1,\"518\":1,\"559\":1,\"638\":1,\"682\":1,\"689\":1}}],[\"use\",{\"1\":{\"95\":1,\"154\":1,\"190\":1,\"506\":1,\"523\":2,\"536\":1,\"640\":2,\"654\":2,\"662\":2,\"665\":1,\"671\":1,\"672\":2,\"697\":1,\"708\":1,\"709\":2}}],[\"userinfo响应验证\",{\"0\":{\"936\":1}}],[\"userinfo错误响应\",{\"0\":{\"935\":1}}],[\"userinfo成功响应\",{\"0\":{\"934\":1}}],[\"userinfo端点返回关于最终用户的声明\",{\"1\":{\"869\":1}}],[\"userinfo端点url必须使用https方案\",{\"1\":{\"868\":1}}],[\"userinfo\",{\"1\":{\"868\":1,\"869\":2}}],[\"userinstance\",{\"1\":{\"803\":2}}],[\"user123\",{\"1\":{\"854\":1}}],[\"users\",{\"1\":{\"112\":1}}],[\"user`\",{\"1\":{\"73\":1,\"167\":1,\"203\":1}}],[\"usermod\",{\"1\":{\"51\":1,\"52\":1}}],[\"user\",{\"1\":{\"35\":1,\"52\":1,\"65\":1,\"66\":1,\"72\":10,\"73\":7,\"85\":2,\"97\":2,\"98\":3,\"100\":1,\"101\":1,\"104\":2,\"105\":1,\"107\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":1,\"121\":1,\"154\":2,\"155\":1,\"156\":1,\"157\":1,\"167\":3,\"190\":2,\"191\":1,\"192\":1,\"193\":1,\"203\":3,\"222\":1,\"328\":4,\"427\":2,\"515\":2,\"519\":1,\"631\":3,\"632\":3,\"638\":1,\"689\":4,\"768\":5,\"769\":1,\"772\":3,\"803\":57,\"811\":4,\"832\":4,\"868\":2,\"869\":1}}],[\"username=\",{\"1\":{\"85\":2,\"118\":1}}],[\"username+\",{\"1\":{\"56\":1}}],[\"username\",{\"1\":{\"6\":1,\"85\":2,\"98\":1,\"104\":1,\"108\":2,\"109\":1,\"112\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":1,\"154\":2,\"190\":2}}],[\"user==null\",{\"1\":{\"803\":4}}],[\"user=\",{\"1\":{\"156\":2,\"192\":2}}],[\"user=root\",{\"1\":{\"4\":1}}],[\"user=admin\",{\"1\":{\"3\":1}}],[\"usage\",{\"1\":{\"90\":1,\"449\":1,\"682\":2,\"689\":1}}],[\"using\",{\"1\":{\"72\":15,\"73\":9,\"631\":2,\"669\":2,\"670\":4,\"682\":1,\"686\":1}}],[\"usr\",{\"1\":{\"6\":4,\"51\":1,\"446\":1,\"449\":1,\"690\":1}}],[\"ftype1\",{\"1\":{\"689\":4}}],[\"fsv\",{\"1\":{\"725\":2,\"726\":4,\"727\":2,\"728\":2,\"729\":2,\"730\":2,\"731\":2,\"732\":2}}],[\"fscanln\",{\"1\":{\"678\":1}}],[\"fscan\",{\"1\":{\"678\":1}}],[\"fssl\",{\"1\":{\"51\":2}}],[\"fd\",{\"1\":{\"642\":4}}],[\"f0\",{\"1\":{\"606\":1}}],[\"fnv\",{\"1\":{\"686\":1}}],[\"fname\",{\"1\":{\"679\":3}}],[\"fn\",{\"1\":{\"593\":3,\"682\":2,\"689\":4}}],[\"full\",{\"1\":{\"651\":2,\"677\":1}}],[\"future\",{\"1\":{\"593\":1}}],[\"fun\",{\"1\":{\"383\":3,\"392\":2}}],[\"fun4all\",{\"1\":{\"144\":1,\"177\":1}}],[\"funcchan\",{\"1\":{\"699\":1}}],[\"functobetested\",{\"1\":{\"689\":3}}],[\"functional\",{\"1\":{\"678\":1}}],[\"functionality\",{\"1\":{\"676\":1}}],[\"function2\",{\"1\":{\"568\":4}}],[\"function1\",{\"1\":{\"550\":2,\"568\":6,\"652\":1}}],[\"functionname\",{\"1\":{\"507\":2,\"509\":2}}],[\"functions\",{\"1\":{\"376\":1,\"561\":1}}],[\"function\",{\"0\":{\"560\":1},\"1\":{\"340\":2,\"497\":1,\"510\":1,\"519\":3,\"549\":1,\"561\":4,\"562\":1,\"563\":4,\"566\":1,\"568\":6,\"572\":1,\"573\":2,\"574\":6,\"602\":2,\"628\":1,\"640\":1,\"671\":1,\"672\":3,\"676\":7,\"678\":1,\"689\":5,\"705\":1,\"762\":1,\"763\":1,\"765\":3,\"768\":1}}],[\"funcreturnslice\",{\"1\":{\"665\":2}}],[\"funcarray\",{\"1\":{\"587\":1}}],[\"funcname\",{\"1\":{\"561\":1}}],[\"func2\",{\"1\":{\"496\":1,\"656\":1}}],[\"func1\",{\"1\":{\"496\":1,\"510\":3,\"518\":2,\"568\":4,\"575\":1,\"580\":3,\"656\":1,\"687\":3}}],[\"func\",{\"1\":{\"12\":1,\"18\":1,\"21\":1,\"314\":3,\"315\":3,\"316\":5,\"325\":8,\"328\":2,\"338\":1,\"342\":3,\"346\":4,\"388\":1,\"389\":1,\"409\":1,\"415\":1,\"424\":4,\"425\":1,\"427\":4,\"430\":1,\"438\":2,\"449\":1,\"483\":2,\"501\":3,\"504\":1,\"505\":1,\"506\":2,\"507\":5,\"508\":2,\"509\":3,\"510\":4,\"515\":1,\"517\":1,\"518\":1,\"519\":12,\"523\":4,\"525\":1,\"528\":1,\"530\":1,\"534\":1,\"536\":2,\"538\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":1,\"546\":2,\"547\":3,\"549\":5,\"550\":4,\"551\":2,\"553\":2,\"555\":1,\"557\":1,\"558\":2,\"559\":3,\"561\":6,\"562\":2,\"563\":4,\"564\":4,\"565\":4,\"566\":2,\"567\":8,\"568\":24,\"570\":6,\"572\":9,\"573\":17,\"574\":21,\"575\":2,\"577\":2,\"580\":4,\"581\":3,\"582\":1,\"583\":2,\"585\":1,\"586\":2,\"587\":2,\"590\":1,\"591\":2,\"592\":1,\"593\":5,\"595\":1,\"599\":1,\"600\":6,\"602\":3,\"605\":8,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"614\":1,\"622\":1,\"624\":2,\"625\":1,\"626\":1,\"627\":2,\"628\":25,\"631\":3,\"638\":6,\"640\":4,\"642\":2,\"643\":1,\"644\":1,\"645\":2,\"647\":1,\"648\":1,\"651\":15,\"653\":7,\"654\":3,\"655\":4,\"656\":8,\"657\":7,\"659\":4,\"660\":3,\"661\":3,\"662\":41,\"663\":4,\"664\":2,\"666\":3,\"667\":1,\"668\":4,\"669\":1,\"670\":8,\"671\":4,\"672\":2,\"673\":5,\"674\":2,\"676\":26,\"677\":4,\"678\":4,\"679\":1,\"680\":4,\"681\":1,\"682\":16,\"683\":1,\"686\":8,\"688\":4,\"689\":42,\"692\":1,\"697\":3,\"699\":1,\"700\":3,\"701\":3,\"702\":2,\"705\":5,\"706\":1,\"707\":10,\"708\":7,\"709\":17}}],[\"fv3pbmk1qiiwkicjlehaioiaxmzexmjgxotcwlaogimlhdci6idezmteyoda5nz\",{\"1\":{\"883\":1}}],[\"fv\",{\"1\":{\"573\":2}}],[\"f3\",{\"1\":{\"551\":1,\"567\":2,\"667\":1}}],[\"f2\",{\"1\":{\"519\":2,\"551\":1,\"561\":3,\"567\":2}}],[\"f1\",{\"1\":{\"519\":2,\"551\":1,\"561\":4,\"565\":4,\"567\":4,\"640\":3,\"689\":1,\"702\":2}}],[\"fz\",{\"1\":{\"509\":1,\"679\":2}}],[\"fm\",{\"1\":{\"506\":3}}],[\"fmt\",{\"0\":{\"689\":1},\"1\":{\"21\":2,\"315\":3,\"316\":2,\"325\":6,\"328\":1,\"335\":1,\"338\":2,\"346\":6,\"362\":1,\"388\":2,\"389\":1,\"415\":2,\"424\":1,\"425\":1,\"427\":12,\"483\":2,\"485\":1,\"494\":4,\"496\":1,\"497\":4,\"505\":2,\"506\":11,\"507\":5,\"508\":2,\"510\":2,\"515\":3,\"517\":5,\"518\":2,\"519\":2,\"523\":5,\"524\":1,\"525\":2,\"528\":5,\"530\":2,\"531\":4,\"532\":3,\"534\":3,\"536\":9,\"538\":5,\"539\":2,\"540\":4,\"543\":8,\"545\":6,\"546\":12,\"547\":8,\"549\":11,\"550\":12,\"551\":14,\"553\":7,\"554\":1,\"555\":2,\"557\":14,\"558\":1,\"559\":7,\"563\":3,\"564\":2,\"565\":4,\"566\":2,\"567\":3,\"568\":25,\"569\":1,\"570\":6,\"572\":2,\"573\":6,\"574\":7,\"576\":1,\"577\":3,\"580\":6,\"581\":4,\"583\":2,\"585\":8,\"587\":4,\"590\":1,\"591\":6,\"592\":3,\"593\":4,\"595\":2,\"605\":7,\"608\":7,\"609\":4,\"610\":3,\"611\":6,\"612\":3,\"614\":3,\"616\":1,\"617\":2,\"619\":1,\"620\":1,\"622\":1,\"623\":2,\"624\":4,\"626\":3,\"627\":5,\"631\":2,\"638\":4,\"640\":12,\"644\":3,\"645\":2,\"647\":7,\"648\":3,\"651\":9,\"653\":7,\"654\":2,\"655\":3,\"656\":7,\"657\":7,\"660\":12,\"661\":2,\"662\":31,\"663\":16,\"666\":2,\"668\":10,\"669\":8,\"670\":10,\"671\":3,\"673\":7,\"675\":2,\"676\":5,\"677\":24,\"678\":12,\"679\":4,\"680\":7,\"681\":2,\"682\":23,\"684\":5,\"686\":12,\"687\":2,\"688\":7,\"689\":42,\"697\":8,\"700\":2,\"701\":3,\"702\":2,\"707\":2,\"708\":3,\"709\":10}}],[\"ffi\",{\"1\":{\"501\":1}}],[\"fr\",{\"1\":{\"873\":2}}],[\"fri\",{\"1\":{\"662\":1}}],[\"friday\",{\"1\":{\"513\":2,\"662\":6,\"670\":1}}],[\"free\",{\"1\":{\"501\":3}}],[\"freebsd\",{\"1\":{\"481\":1,\"482\":2}}],[\"freenode\",{\"1\":{\"469\":1}}],[\"france\",{\"1\":{\"609\":1}}],[\"frank\",{\"1\":{\"467\":1}}],[\"fraction\",{\"1\":{\"523\":2}}],[\"framed\",{\"1\":{\"462\":1}}],[\"framework简介\",{\"0\":{\"744\":1}}],[\"framework\",{\"0\":{\"743\":1},\"1\":{\"457\":1}}],[\"frame\",{\"1\":{\"442\":1}}],[\"from\",{\"1\":{\"98\":1,\"104\":1,\"117\":1,\"120\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":3,\"128\":3,\"129\":3,\"131\":2,\"132\":3,\"133\":2,\"134\":1,\"135\":2,\"136\":1,\"138\":1,\"139\":1,\"140\":1,\"142\":1,\"143\":1,\"144\":2,\"147\":1,\"150\":1,\"154\":1,\"160\":1,\"168\":1,\"171\":1,\"172\":1,\"173\":1,\"175\":1,\"176\":1,\"177\":2,\"180\":1,\"183\":1,\"185\":2,\"186\":1,\"190\":1,\"196\":1,\"204\":1,\"220\":1,\"221\":2,\"235\":1,\"267\":2,\"268\":4,\"270\":4,\"271\":1,\"277\":2,\"278\":2,\"279\":1,\"299\":6,\"305\":1,\"306\":4,\"546\":2,\"568\":4,\"627\":6,\"662\":1,\"677\":2,\"682\":1,\"686\":1,\"688\":1,\"689\":4,\"709\":2}}],[\"front\",{\"1\":{\"78\":1,\"614\":1}}],[\"fprint\",{\"1\":{\"682\":1}}],[\"fprintf\",{\"1\":{\"670\":1,\"678\":1,\"679\":1,\"680\":2,\"682\":13}}],[\"fplus\",{\"1\":{\"573\":2}}],[\"fputs\",{\"1\":{\"501\":1}}],[\"fp\",{\"1\":{\"348\":1,\"580\":2,\"581\":2}}],[\"fp+offset\",{\"1\":{\"348\":1}}],[\"fifo\",{\"1\":{\"699\":1}}],[\"fiesta\",{\"1\":{\"676\":1}}],[\"field3\",{\"1\":{\"645\":1}}],[\"fieldname\",{\"1\":{\"640\":2}}],[\"field2\",{\"1\":{\"640\":2,\"645\":1}}],[\"field1\",{\"1\":{\"640\":2,\"645\":1}}],[\"fields2numbers\",{\"1\":{\"689\":3}}],[\"fields\",{\"1\":{\"542\":1,\"543\":1,\"625\":1,\"639\":1,\"640\":1,\"647\":1,\"670\":1,\"689\":6}}],[\"fieldbyname\",{\"1\":{\"328\":1}}],[\"field\",{\"1\":{\"328\":6,\"645\":2,\"647\":2,\"651\":1,\"654\":1,\"670\":13,\"689\":3}}],[\"fi\",{\"1\":{\"662\":1,\"663\":1,\"679\":4}}],[\"fibo\",{\"1\":{\"627\":3}}],[\"fibonnaci\",{\"1\":{\"577\":1}}],[\"fibonacci\",{\"1\":{\"564\":1,\"570\":17,\"576\":1,\"577\":8,\"580\":4,\"587\":2,\"627\":1}}],[\"fibs\",{\"1\":{\"577\":4}}],[\"fizzbuzz\",{\"1\":{\"554\":2}}],[\"fizz\",{\"1\":{\"554\":2}}],[\"first3chars\",{\"1\":{\"651\":4}}],[\"firstname><lastname>lynn<\",{\"1\":{\"686\":1}}],[\"firstname>\",{\"1\":{\"686\":1}}],[\"firstname\",{\"1\":{\"640\":8,\"654\":9,\"657\":1,\"662\":1,\"677\":4,\"682\":3,\"686\":2}}],[\"first\",{\"1\":{\"536\":2,\"549\":8,\"561\":1,\"651\":2,\"670\":1}}],[\"fig=4\",{\"1\":{\"513\":1}}],[\"fig\",{\"1\":{\"513\":1}}],[\"fix\",{\"1\":{\"498\":2,\"826\":1}}],[\"fixed\",{\"1\":{\"301\":1}}],[\"final\",{\"1\":{\"803\":2}}],[\"finally\",{\"1\":{\"568\":1}}],[\"finish\",{\"1\":{\"705\":2}}],[\"findloops\",{\"1\":{\"692\":2}}],[\"findline\",{\"1\":{\"688\":1}}],[\"findall\",{\"1\":{\"602\":1,\"676\":4}}],[\"findfiledigits\",{\"1\":{\"602\":1}}],[\"finddigits\",{\"1\":{\"602\":3}}],[\"find\",{\"1\":{\"485\":1,\"602\":2,\"676\":2,\"689\":1}}],[\"finghting321\",{\"1\":{\"426\":1}}],[\"fill\",{\"1\":{\"662\":1}}],[\"filter\",{\"1\":{\"593\":2,\"709\":8}}],[\"filterplc\",{\"1\":{\"42\":2}}],[\"filterpng\",{\"1\":{\"42\":2}}],[\"filecopy\",{\"1\":{\"680\":2}}],[\"filechooser\",{\"1\":{\"42\":8,\"725\":12,\"726\":6,\"727\":5,\"728\":5,\"729\":6,\"730\":5,\"731\":6,\"732\":8}}],[\"filewrite\",{\"1\":{\"680\":2}}],[\"fileoutput\",{\"1\":{\"680\":1}}],[\"file2\",{\"1\":{\"678\":1}}],[\"file1\",{\"1\":{\"678\":1}}],[\"fileinput\",{\"1\":{\"678\":1}}],[\"filepath\",{\"1\":{\"614\":2,\"678\":3,\"689\":1}}],[\"filepng\",{\"1\":{\"42\":5}}],[\"filebytes\",{\"1\":{\"602\":3}}],[\"filename\",{\"1\":{\"602\":6,\"678\":1}}],[\"filenameextensionfilter\",{\"1\":{\"42\":4,\"725\":4,\"729\":4,\"730\":2}}],[\"filesystemview\",{\"1\":{\"725\":2,\"726\":4,\"727\":2,\"728\":2,\"729\":2,\"730\":2,\"731\":2,\"732\":2}}],[\"files\",{\"1\":{\"284\":1,\"689\":2,\"725\":1,\"729\":1,\"730\":1,\"731\":1}}],[\"filefilter\",{\"1\":{\"42\":4,\"729\":4,\"730\":2}}],[\"file\",{\"1\":{\"42\":5,\"52\":1,\"382\":1,\"501\":1,\"550\":1,\"568\":2,\"574\":4,\"575\":2,\"642\":9,\"662\":2,\"678\":8,\"679\":1,\"680\":3,\"682\":7,\"686\":3,\"688\":2,\"689\":1,\"691\":1,\"692\":2,\"709\":2,\"729\":1}}],[\"flow\",{\"1\":{\"868\":3,\"869\":10}}],[\"float32\",{\"1\":{\"504\":1,\"511\":1,\"515\":1,\"523\":3,\"524\":1,\"528\":2,\"545\":1,\"565\":2,\"581\":1,\"591\":2,\"605\":7,\"606\":2,\"609\":1,\"626\":1,\"640\":6,\"644\":1,\"647\":1,\"648\":2,\"649\":2,\"651\":2,\"660\":1,\"662\":19,\"663\":2,\"668\":1,\"673\":5,\"677\":1}}],[\"float64array\",{\"1\":{\"628\":4,\"662\":1}}],[\"float64saresorted\",{\"1\":{\"628\":3}}],[\"float64s\",{\"1\":{\"600\":1}}],[\"float64\",{\"1\":{\"388\":2,\"504\":1,\"509\":1,\"519\":1,\"523\":6,\"525\":1,\"528\":1,\"545\":4,\"550\":2,\"562\":1,\"564\":1,\"582\":1,\"583\":3,\"600\":5,\"626\":2,\"628\":1,\"640\":4,\"653\":2,\"655\":3,\"660\":2,\"662\":4,\"668\":15,\"669\":3,\"670\":2,\"682\":2,\"688\":2,\"705\":4,\"706\":1,\"709\":1}}],[\"float\",{\"0\":{\"523\":1},\"1\":{\"301\":2,\"349\":1,\"360\":1,\"509\":1,\"513\":1,\"516\":1,\"523\":1,\"565\":2,\"567\":1,\"627\":2,\"640\":2,\"662\":1,\"664\":1,\"667\":1,\"668\":3}}],[\"flate\",{\"1\":{\"679\":1}}],[\"flag\",{\"0\":{\"682\":1},\"1\":{\"525\":1,\"575\":1,\"614\":2,\"682\":52,\"692\":9,\"697\":2,\"755\":1}}],[\"flags\",{\"1\":{\"364\":1,\"449\":2,\"481\":2,\"682\":2,\"697\":1}}],[\"fly\",{\"1\":{\"508\":1}}],[\"flushicache\",{\"1\":{\"561\":1}}],[\"flush\",{\"1\":{\"156\":1,\"192\":1,\"680\":2,\"682\":2}}],[\"fooer\",{\"1\":{\"674\":2}}],[\"foo\",{\"1\":{\"643\":4,\"674\":2}}],[\"food\",{\"1\":{\"340\":1}}],[\"foxtrot\",{\"1\":{\"611\":3,\"612\":2}}],[\"fox\",{\"1\":{\"543\":3}}],[\"followed\",{\"1\":{\"365\":2}}],[\"fourth\",{\"1\":{\"328\":1}}],[\"found\",{\"1\":{\"168\":1,\"204\":1,\"328\":1,\"624\":2,\"682\":1,\"688\":2,\"709\":2,\"873\":1,\"877\":1,\"878\":1}}],[\"fortress\",{\"1\":{\"706\":1}}],[\"fortran\",{\"1\":{\"447\":1,\"473\":1}}],[\"fork\",{\"1\":{\"689\":1,\"808\":1,\"831\":1}}],[\"ford\",{\"1\":{\"676\":6}}],[\"forrange2\",{\"1\":{\"591\":2,\"610\":1}}],[\"forrange\",{\"1\":{\"591\":1,\"609\":1}}],[\"for6\",{\"1\":{\"559\":1}}],[\"for5\",{\"1\":{\"558\":1}}],[\"for4\",{\"1\":{\"558\":2}}],[\"for3\",{\"1\":{\"558\":1}}],[\"foreach\",{\"1\":{\"557\":1}}],[\"foreign\",{\"1\":{\"72\":5,\"73\":4,\"112\":1,\"228\":1}}],[\"for2\",{\"1\":{\"555\":1,\"558\":1}}],[\"for1\",{\"1\":{\"553\":2}}],[\"forcegcperiod\",{\"1\":{\"432\":1}}],[\"formvalue\",{\"1\":{\"638\":2}}],[\"form>\",{\"1\":{\"638\":2}}],[\"forms\",{\"1\":{\"638\":1}}],[\"form\",{\"1\":{\"270\":1,\"877\":1,\"881\":1}}],[\"format进行格式化\",{\"1\":{\"617\":2}}],[\"formatting\",{\"1\":{\"546\":1}}],[\"formatted\",{\"1\":{\"508\":1}}],[\"formatfloat\",{\"1\":{\"545\":1,\"624\":1,\"670\":1}}],[\"format\",{\"1\":{\"72\":6,\"73\":3,\"148\":1,\"181\":1,\"517\":1,\"546\":6,\"617\":2,\"619\":1,\"670\":1,\"675\":1,\"677\":2,\"682\":3}}],[\"forward=1\",{\"1\":{\"51\":2}}],[\"for\",{\"0\":{\"324\":1,\"552\":1,\"557\":1,\"591\":1,\"609\":1,\"706\":1,\"708\":1},\"1\":{\"12\":1,\"158\":1,\"161\":1,\"167\":3,\"168\":3,\"194\":1,\"197\":1,\"203\":3,\"204\":3,\"232\":1,\"235\":1,\"306\":4,\"324\":2,\"359\":1,\"365\":3,\"383\":1,\"424\":2,\"427\":4,\"430\":2,\"504\":1,\"508\":2,\"515\":1,\"521\":1,\"528\":3,\"532\":2,\"542\":1,\"543\":2,\"548\":2,\"552\":3,\"553\":12,\"554\":4,\"555\":4,\"556\":6,\"557\":13,\"558\":6,\"559\":8,\"561\":1,\"562\":1,\"567\":4,\"568\":1,\"570\":1,\"573\":2,\"574\":3,\"577\":1,\"580\":14,\"581\":2,\"582\":2,\"583\":1,\"585\":3,\"586\":1,\"587\":2,\"590\":1,\"591\":14,\"592\":2,\"593\":1,\"595\":3,\"599\":1,\"602\":1,\"609\":7,\"610\":2,\"611\":4,\"612\":2,\"614\":1,\"623\":2,\"628\":2,\"631\":1,\"645\":1,\"651\":2,\"662\":14,\"665\":2,\"670\":4,\"671\":1,\"673\":6,\"676\":4,\"677\":2,\"678\":3,\"679\":1,\"680\":2,\"682\":9,\"684\":3,\"686\":3,\"689\":8,\"697\":2,\"700\":1,\"701\":2,\"704\":2,\"705\":5,\"706\":3,\"707\":4,\"708\":11,\"709\":16}}],[\"federated\",{\"1\":{\"846\":1}}],[\"female\",{\"1\":{\"513\":1}}],[\"featureb\",{\"1\":{\"315\":1}}],[\"featurea\",{\"1\":{\"315\":1}}],[\"fetch\",{\"1\":{\"168\":3,\"204\":3,\"829\":2}}],[\"fegin\",{\"1\":{\"78\":1}}],[\"f\",{\"1\":{\"52\":2,\"328\":1,\"388\":6,\"481\":1,\"513\":1,\"521\":10,\"523\":2,\"524\":1,\"525\":2,\"527\":1,\"534\":2,\"545\":3,\"550\":5,\"551\":2,\"553\":1,\"557\":1,\"562\":1,\"565\":1,\"568\":1,\"572\":4,\"573\":5,\"574\":6,\"580\":2,\"583\":1,\"602\":4,\"605\":1,\"609\":1,\"624\":3,\"627\":2,\"640\":2,\"642\":2,\"644\":1,\"647\":1,\"659\":2,\"662\":4,\"670\":4,\"676\":15,\"677\":4,\"680\":6,\"682\":15,\"684\":4,\"688\":5,\"689\":11,\"690\":1,\"692\":5}}],[\"familymember\",{\"1\":{\"685\":2}}],[\"failnow\",{\"1\":{\"689\":1}}],[\"failure\",{\"1\":{\"667\":1}}],[\"fail\",{\"1\":{\"662\":3,\"664\":1,\"689\":10,\"765\":1}}],[\"fails\",{\"1\":{\"662\":1}}],[\"failed\",{\"1\":{\"12\":1,\"51\":3,\"689\":2,\"765\":1}}],[\"father\",{\"1\":{\"655\":1}}],[\"fatal\",{\"1\":{\"485\":1,\"686\":2,\"689\":1,\"692\":2,\"828\":1}}],[\"factor\",{\"1\":{\"593\":2,\"640\":1}}],[\"fallthrough\",{\"1\":{\"504\":1,\"551\":7,\"662\":1,\"677\":2}}],[\"false\",{\"1\":{\"6\":1,\"84\":1,\"129\":1,\"168\":1,\"204\":1,\"504\":1,\"509\":1,\"515\":5,\"518\":1,\"521\":13,\"525\":2,\"549\":2,\"550\":2,\"553\":1,\"570\":2,\"572\":1,\"608\":2,\"624\":1,\"662\":3,\"669\":4,\"682\":3,\"755\":2,\"761\":1,\"762\":1,\"828\":2}}],[\"fasthttp\",{\"1\":{\"461\":1}}],[\"faq\",{\"0\":{\"302\":1}}],[\"整除的数字\",{\"1\":{\"709\":1}}],[\"整体的查找时间会缩短\",{\"1\":{\"697\":1}}],[\"整体过程需要启动\",{\"1\":{\"429\":1}}],[\"整型都被映射到函数地址\",{\"1\":{\"605\":1}}],[\"整型的零值为\",{\"1\":{\"523\":1}}],[\"整型\",{\"0\":{\"523\":1}}],[\"整型值等\",{\"1\":{\"382\":1}}],[\"整齐和简洁的语法也能够提高程序的编译速度\",{\"1\":{\"474\":1}}],[\"整数被编码成没有固定长度的可变长度\",{\"1\":{\"686\":1}}],[\"整数除以\",{\"1\":{\"527\":1}}],[\"整数型\",{\"1\":{\"513\":1}}],[\"整数\",{\"1\":{\"312\":1,\"523\":1}}],[\"整个处理过程可以替换为无限循环\",{\"1\":{\"708\":1}}],[\"整个设计可以持续演进\",{\"1\":{\"673\":1}}],[\"整个\",{\"1\":{\"473\":1}}],[\"整个过程完毕\",{\"1\":{\"447\":1}}],[\"整个过程不要\",{\"1\":{\"429\":1}}],[\"整个array的值拷贝\",{\"1\":{\"346\":1}}],[\"整个事务进行期间对数据的独占\",{\"1\":{\"241\":1}}],[\"整个数据库\",{\"1\":{\"154\":1,\"190\":1}}],[\"整个服务器\",{\"1\":{\"154\":1,\"190\":1}}],[\"整段代码都不会被执行\",{\"1\":{\"11\":1}}],[\"整合和分析空间信息\",{\"1\":{\"6\":1}}],[\"后端必须非常小心地处理这些数据\",{\"1\":{\"848\":1}}],[\"后端和浏览器之间的通讯\",{\"1\":{\"682\":1}}],[\"后退n步\",{\"1\":{\"819\":1}}],[\"后退二步\",{\"1\":{\"819\":1}}],[\"后退一步\",{\"1\":{\"819\":1}}],[\"后执行了\",{\"1\":{\"682\":1}}],[\"后边的括号\",{\"1\":{\"652\":1}}],[\"后一个是剩余的\",{\"1\":{\"590\":1}}],[\"后者包含一个人的名字\",{\"1\":{\"640\":1}}],[\"后者的括号大多数情况下是必须的\",{\"1\":{\"549\":1}}],[\"后者就是channel\",{\"1\":{\"396\":1}}],[\"后的两个代码块是相互独立的分支\",{\"1\":{\"549\":1}}],[\"后的过滤查询字段最好是索引字段\",{\"1\":{\"265\":1}}],[\"后由大括号括起来的代码块\",{\"1\":{\"549\":1}}],[\"后将会被强制换行\",{\"1\":{\"506\":1}}],[\"后你不再需要自成一套代码风格而是和所有人使用相同的规则\",{\"1\":{\"496\":1}}],[\"后缀组成\",{\"1\":{\"662\":1}}],[\"后缀为\",{\"1\":{\"446\":1}}],[\"后缀名过滤器\",{\"1\":{\"42\":1}}],[\"后续会考虑支持\",{\"1\":{\"462\":1}}],[\"后续也会支持\",{\"1\":{\"462\":1}}],[\"后续对map的访问操作会触发迁移\",{\"1\":{\"372\":1}}],[\"后续退化为线性查找\",{\"1\":{\"226\":1}}],[\"后入先出\",{\"1\":{\"325\":1}}],[\"后跟一个返回\",{\"1\":{\"129\":1}}],[\"后\",{\"1\":{\"73\":1,\"215\":1,\"469\":1,\"497\":1}}],[\"后面加入太多的\",{\"1\":{\"549\":1}}],[\"后面加入用双引号括起来的替换规则实现代码的简单重构\",{\"1\":{\"496\":1}}],[\"后面紧跟着长度为\",{\"1\":{\"531\":1}}],[\"后面要参与链接\",{\"1\":{\"449\":1}}],[\"后面会再详细介绍\",{\"1\":{\"367\":1}}],[\"后面\",{\"1\":{\"11\":1,\"590\":1,\"593\":1}}],[\"后台运行容器\",{\"1\":{\"1\":1}}],[\"也在闭合函数中但并不是参数\",{\"1\":{\"705\":1}}],[\"也被叫做生产者\",{\"1\":{\"701\":1}}],[\"也被用于抛弃值\",{\"1\":{\"518\":1}}],[\"也因此被传递\",{\"1\":{\"699\":1}}],[\"也很容易从协程的逻辑复用到\",{\"1\":{\"698\":1}}],[\"也很出名\",{\"1\":{\"636\":1}}],[\"也同样需要遵守这条规则\",{\"1\":{\"696\":1}}],[\"也叫做文件句柄\",{\"1\":{\"678\":1}}],[\"也许我们想根据不同的厂商添加汽车到不同的集合\",{\"1\":{\"676\":1}}],[\"也许从现在开始你将看到通过接口如何产生\",{\"1\":{\"662\":1}}],[\"也许更有实际意义\",{\"1\":{\"499\":1}}],[\"也实现了\",{\"1\":{\"662\":1}}],[\"也为\",{\"1\":{\"657\":1}}],[\"也类似\",{\"1\":{\"655\":1}}],[\"也总是无序的\",{\"1\":{\"609\":1}}],[\"也最好先标明\",{\"1\":{\"606\":1}}],[\"也需要使用\",{\"1\":{\"564\":1}}],[\"也需要考虑\",{\"1\":{\"222\":1}}],[\"也都使用该编码\",{\"1\":{\"532\":1}}],[\"也会以一种稍微不同的方式来使用接口这个词\",{\"1\":{\"662\":1}}],[\"也会自动使用\",{\"1\":{\"660\":1}}],[\"也会给\",{\"1\":{\"640\":1}}],[\"也会通过这个方案来优化斐波那契数列的生成问题\",{\"1\":{\"570\":1}}],[\"也会随之更改\",{\"1\":{\"547\":1}}],[\"也会受到影响\",{\"1\":{\"516\":1}}],[\"也会经历如上图所示的过程\",{\"1\":{\"415\":1}}],[\"也执行同样的过程\",{\"1\":{\"510\":1}}],[\"也是一个\",{\"1\":{\"851\":1}}],[\"也是可以的\",{\"1\":{\"656\":1,\"662\":1}}],[\"也是合法的语法\",{\"1\":{\"640\":1}}],[\"也是数组的索引\",{\"1\":{\"580\":1}}],[\"也是\",{\"1\":{\"531\":1,\"605\":1}}],[\"也是不错的选择\",{\"1\":{\"491\":1}}],[\"也是存放等待运行的\",{\"1\":{\"409\":1}}],[\"也是存储过程的出参\",{\"1\":{\"163\":1,\"199\":1}}],[\"也称为长度或者数组大小\",{\"1\":{\"580\":1}}],[\"也称为\",{\"1\":{\"481\":1,\"850\":1}}],[\"也弥补了现存编程语言在这方面所存在的不足\",{\"1\":{\"473\":1}}],[\"也加入到了开发团队中\",{\"1\":{\"469\":1}}],[\"也得益于完全在用户态实现\",{\"1\":{\"412\":1}}],[\"也照样可以实现类似的组件\",{\"1\":{\"410\":1}}],[\"也有\",{\"1\":{\"686\":1}}],[\"也有基于架构的类型\",{\"1\":{\"523\":1}}],[\"也有可能会创建很多个m出来\",{\"1\":{\"409\":1}}],[\"也有一些公司开始在用了\",{\"1\":{\"251\":1}}],[\"也常常问你项目中怎么用\",{\"1\":{\"394\":1}}],[\"也导致了底层实现上的不同\",{\"1\":{\"392\":1}}],[\"也即overflow数量超过32768时\",{\"1\":{\"371\":1}}],[\"也即平均每个bucket存储的键值对达到6\",{\"1\":{\"371\":1}}],[\"也即键值对重新组织\",{\"1\":{\"368\":1}}],[\"也没有运行时错误发生\",{\"1\":{\"662\":1}}],[\"也没有返回类型\",{\"1\":{\"507\":1}}],[\"也没有任何关联\",{\"1\":{\"346\":1}}],[\"也没有去实现eat方法\",{\"1\":{\"338\":1}}],[\"也没有故障恢复功能\",{\"1\":{\"293\":1}}],[\"也锁定索引之间的间隙\",{\"1\":{\"235\":1}}],[\"也能够拥有自己的独立属性和方法\",{\"1\":{\"315\":1}}],[\"也能防止非法数据插入外键列\",{\"1\":{\"228\":1}}],[\"也能用\",{\"1\":{\"72\":1}}],[\"也由多个列组成\",{\"1\":{\"226\":1}}],[\"也不需要\",{\"1\":{\"656\":1}}],[\"也不可以使用这个标识符作为变量对其它变量进行赋值或运算\",{\"1\":{\"504\":1}}],[\"也不会暴露给可能访问用户代理的其他恶意应用程序\",{\"1\":{\"870\":1}}],[\"也不会得到任何好处\",{\"1\":{\"854\":1}}],[\"也不会\",{\"1\":{\"420\":1}}],[\"也不会返回空值\",{\"1\":{\"374\":1}}],[\"也不会导致全部用户的密码泄露\",{\"1\":{\"72\":1}}],[\"也不是按照\",{\"1\":{\"609\":1}}],[\"也不是\",{\"1\":{\"312\":1}}],[\"也不支持行级锁和外键\",{\"1\":{\"293\":1,\"294\":1}}],[\"也不能够被隐式转换为\",{\"1\":{\"523\":1}}],[\"也不能是函数的参数\",{\"1\":{\"220\":1}}],[\"也不能回退\",{\"1\":{\"151\":1,\"187\":1}}],[\"也就需要使用互斥锁来确保数据安全性\",{\"1\":{\"427\":1}}],[\"也就意味着go并没有原生级别的继承支持\",{\"1\":{\"338\":1}}],[\"也就不能对其进行索引操作\",{\"1\":{\"103\":1}}],[\"也就是除number\",{\"1\":{\"762\":1}}],[\"也就是一个字符数组\",{\"1\":{\"597\":1}}],[\"也就是指向类型\",{\"1\":{\"569\":1}}],[\"也就是传递参数的副本\",{\"1\":{\"563\":1}}],[\"也就是可执行目标文件\",{\"1\":{\"447\":1}}],[\"也就是如果存在系统阻塞调用\",{\"1\":{\"410\":1}}],[\"也就是接收者\",{\"1\":{\"382\":1}}],[\"也就是值传递\",{\"1\":{\"355\":1}}],[\"也就是新的\",{\"1\":{\"354\":1}}],[\"也就是\",{\"1\":{\"351\":1,\"469\":1}}],[\"也就是都是一套外部模板\",{\"1\":{\"316\":1}}],[\"也就是采用全表扫描\",{\"1\":{\"303\":1}}],[\"也就是不能调用存储过程\",{\"1\":{\"166\":1,\"202\":1}}],[\"也就是为变量赋值\",{\"1\":{\"163\":1,\"199\":1}}],[\"也就是删除所有行\",{\"1\":{\"119\":1}}],[\"也就是说它不支持那种支持多种类型的函数\",{\"1\":{\"561\":1}}],[\"也就是说它的成员都是由\",{\"1\":{\"382\":1}}],[\"也就是说它的索引和实际数据是分开的\",{\"1\":{\"294\":1}}],[\"也就是说您不需要特别使用\",{\"1\":{\"551\":1}}],[\"也就是说在代码里进行条件判断\",{\"1\":{\"548\":1}}],[\"也就是说编写源代码的机器可以和目标机器有完全不同的特性\",{\"1\":{\"482\":1}}],[\"也就是说你可以在一台机器上构建能够在不同操作系统和处理器架构上运行的应用程序\",{\"1\":{\"482\":1}}],[\"也就是说生成一个\",{\"1\":{\"390\":1}}],[\"也就是说使用\",{\"1\":{\"216\":1}}],[\"也就是说所有列的值都相同才算相同\",{\"1\":{\"122\":1}}],[\"也就是说\",{\"1\":{\"29\":1,\"31\":1,\"270\":2,\"288\":1,\"380\":1,\"387\":1,\"396\":1,\"598\":1,\"627\":1,\"638\":1}}],[\"也就是服务启动后\",{\"1\":{\"11\":1}}],[\"也把rbac0包括在内\",{\"1\":{\"69\":1}}],[\"也可用于验证其真实性\",{\"1\":{\"860\":1}}],[\"也可能不会出现错误\",{\"1\":{\"882\":1}}],[\"也可能不是\",{\"1\":{\"695\":1}}],[\"也可能因其他原因而被视为无效\",{\"1\":{\"857\":1}}],[\"也可能存在名称不同\",{\"1\":{\"301\":1}}],[\"也可能是\",{\"1\":{\"247\":1}}],[\"也可以像第5\",{\"1\":{\"874\":1}}],[\"也可以包括它\",{\"1\":{\"869\":1}}],[\"也可以运行在线程之内\",{\"1\":{\"694\":1}}],[\"也可以不是\",{\"1\":{\"694\":1}}],[\"也可以从对象反射回接口值\",{\"1\":{\"668\":1}}],[\"也可以对用户自定义类型\",{\"1\":{\"662\":1}}],[\"也可以\",{\"1\":{\"657\":1,\"699\":1}}],[\"也可以有连接到类型指针的方法\",{\"1\":{\"653\":1}}],[\"也可以简写为\",{\"1\":{\"587\":1}}],[\"也可以返回零个或多个值\",{\"1\":{\"562\":1}}],[\"也可以格式化生成并返回你所需要的字符串\",{\"1\":{\"532\":1}}],[\"也可以在指向这个类型的指针上调用此方法\",{\"1\":{\"653\":1}}],[\"也可以在\",{\"1\":{\"519\":1}}],[\"也可以将其缩写为\",{\"1\":{\"636\":1}}],[\"也可以将这些字分散存放在内存中\",{\"1\":{\"516\":1}}],[\"也可以将jwt被放置于post请求的数据主体中\",{\"1\":{\"38\":1}}],[\"也可以用函数作为自己的值\",{\"1\":{\"605\":1}}],[\"也可以用于字符串\",{\"1\":{\"532\":1}}],[\"也可以用于生成非标准库的\",{\"1\":{\"497\":1}}],[\"也可以用在表达式中\",{\"1\":{\"513\":1}}],[\"也可以用len\",{\"1\":{\"333\":1}}],[\"也可以通过其他机制获得\",{\"1\":{\"866\":2}}],[\"也可以通过在参数\",{\"1\":{\"496\":1}}],[\"也可以通过口诀来记忆\",{\"1\":{\"400\":1}}],[\"也可以调用值接收者的方法\",{\"1\":{\"380\":1}}],[\"也可以调用指针接收者的方法\",{\"1\":{\"380\":1}}],[\"也可以是此类值的数组\",{\"1\":{\"852\":1}}],[\"也可以是匿名或者\",{\"1\":{\"694\":1}}],[\"也可以是一个匿名函数\",{\"1\":{\"661\":1}}],[\"也可以是函数或者接口\",{\"1\":{\"640\":1}}],[\"也可以是在外部函数声明的\",{\"1\":{\"574\":1}}],[\"也可以是指针接收者\",{\"1\":{\"380\":1}}],[\"也可以是两个值\",{\"1\":{\"358\":1}}],[\"也可以说\",{\"1\":{\"287\":1}}],[\"也可以使用通道让\",{\"1\":{\"704\":1}}],[\"也可以使用通道来达到同步的目的\",{\"1\":{\"704\":1}}],[\"也可以使用一个\",{\"1\":{\"550\":1}}],[\"也可以使用\",{\"1\":{\"236\":1,\"580\":1,\"682\":1}}],[\"也可以复杂如多个列\",{\"1\":{\"226\":1}}],[\"也可以视为二级索引\",{\"1\":{\"212\":1}}],[\"也可以分写为多行\",{\"1\":{\"85\":1}}],[\"也可以控制数据库事务\",{\"1\":{\"84\":1}}],[\"也可以增加一些额外的其它业务逻辑所必须的声明信息\",{\"1\":{\"26\":1}}],[\"也可被加密\",{\"1\":{\"26\":1}}],[\"也暴露出来\",{\"1\":{\"4\":1}}],[\"且在协程中调用这个动作\",{\"1\":{\"708\":1}}],[\"且在类型转换时必须显式转换\",{\"1\":{\"509\":1}}],[\"且包含空接口类型的元素\",{\"1\":{\"705\":1}}],[\"且提高了代码可读性\",{\"1\":{\"689\":1}}],[\"且没有其它效果\",{\"1\":{\"689\":1}}],[\"且没有缓冲区\",{\"1\":{\"403\":1,\"405\":1}}],[\"且此时对调后的\",{\"1\":{\"612\":1}}],[\"且所有的\",{\"1\":{\"612\":1}}],[\"且确定转换一定能够成功时\",{\"1\":{\"550\":1}}],[\"且值不可变\",{\"1\":{\"532\":1}}],[\"且需当它们拥有等长位模式时\",{\"1\":{\"525\":1}}],[\"且比栈拥有更大的内存空间\",{\"1\":{\"516\":1}}],[\"且不可以嵌套使用\",{\"1\":{\"508\":1}}],[\"且第一行用\",{\"1\":{\"449\":1}}],[\"且库文件的目录层级和源码层级一致\",{\"1\":{\"449\":1}}],[\"且这个数组够大\",{\"1\":{\"438\":1}}],[\"且一旦宕机\",{\"1\":{\"249\":1}}],[\"且可以使用url传输\",{\"1\":{\"39\":1}}],[\"且\",{\"1\":{\"10\":1,\"410\":1,\"585\":1,\"588\":1}}],[\"+1\",{\"1\":{\"592\":1}}],[\"+0000\",{\"1\":{\"546\":3}}],[\"+0100\",{\"1\":{\"546\":2}}],[\"++\",{\"1\":{\"527\":2}}],[\"+=\",{\"1\":{\"527\":2,\"532\":2,\"559\":1,\"573\":1,\"574\":2,\"583\":1,\"586\":1,\"590\":1,\"651\":1,\"656\":2,\"681\":1,\"682\":3}}],[\"+inf\",{\"1\":{\"527\":1}}],[\"+v\",{\"1\":{\"494\":1}}],[\"+config\",{\"1\":{\"56\":3}}],[\"+替换成\",{\"1\":{\"37\":1}}],[\"+\",{\"1\":{\"10\":2,\"11\":1,\"36\":2,\"42\":1,\"163\":1,\"168\":1,\"199\":1,\"204\":1,\"220\":1,\"235\":1,\"303\":2,\"330\":1,\"430\":2,\"481\":1,\"507\":1,\"513\":4,\"523\":6,\"524\":2,\"527\":4,\"529\":1,\"530\":1,\"532\":6,\"545\":1,\"549\":1,\"550\":1,\"557\":2,\"570\":1,\"573\":3,\"574\":6,\"577\":1,\"585\":2,\"593\":1,\"602\":2,\"624\":2,\"627\":1,\"638\":1,\"651\":3,\"653\":2,\"655\":1,\"656\":4,\"660\":4,\"662\":1,\"670\":5,\"677\":1,\"678\":2,\"682\":1,\"688\":4,\"689\":5,\"696\":1,\"725\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"829\":1,\"849\":1,\"858\":1,\"860\":1,\"869\":12}}],[\"服务中添加\",{\"1\":{\"692\":1}}],[\"服务的\",{\"1\":{\"638\":1}}],[\"服务的文档可以在\",{\"1\":{\"638\":1}}],[\"服务治理支持服务注册\",{\"1\":{\"462\":1}}],[\"服务层统一处理的\",{\"1\":{\"293\":1}}],[\"服务器应该支持持名令牌类型\",{\"1\":{\"883\":1}}],[\"服务器应该在可能的情况下成功响应\",{\"1\":{\"873\":1}}],[\"服务器的ssl证书没有经过第三方机构的签署\",{\"1\":{\"828\":1}}],[\"服务器不能启动时那样\",{\"1\":{\"689\":1}}],[\"服务器和基础客户端\",{\"1\":{\"623\":1}}],[\"服务器方面的性能\",{\"1\":{\"499\":1}}],[\"服务器提供文本内容\",{\"1\":{\"469\":1}}],[\"服务器是由两部分组成\",{\"1\":{\"298\":1}}],[\"服务器配置说明\",{\"1\":{\"284\":1}}],[\"服务器总是先将小写字母转成大写后\",{\"1\":{\"276\":1}}],[\"服务器上的数据库查询\",{\"1\":{\"168\":1,\"204\":1}}],[\"服务器\",{\"1\":{\"52\":1,\"284\":1,\"476\":1,\"497\":2,\"694\":1}}],[\"服务器可以确认\",{\"1\":{\"39\":1}}],[\"服务器期望客户端在下次请求的时候将jws作为请求的一部分\",{\"1\":{\"39\":1}}],[\"服务器返回该用户的用户资料\",{\"1\":{\"30\":1}}],[\"服务器返回jwt信息给浏览器\",{\"1\":{\"30\":1}}],[\"服务器发现数据中有\",{\"1\":{\"30\":1}}],[\"服务器变成无状态了\",{\"1\":{\"29\":1}}],[\"服务器就不保存任何\",{\"1\":{\"29\":1}}],[\"服务器在生成这个对象的时候\",{\"1\":{\"29\":1}}],[\"服务器完全只靠这个对象认定用户身份\",{\"1\":{\"29\":1}}],[\"服务器认证以后\",{\"1\":{\"29\":1}}],[\"服务器收到\",{\"1\":{\"28\":1}}],[\"服务器向用户返回一个\",{\"1\":{\"28\":1}}],[\"服务器验证通过后\",{\"1\":{\"28\":1}}],[\"服务器启动失败\",{\"1\":{\"10\":1}}],[\"服务器启动\",{\"1\":{\"10\":3,\"12\":2}}],[\"服务端程序作为示例对这个用法进行深入讨论\",{\"1\":{\"572\":1}}],[\"服务端通过验证消息的签名来确保客户端没有修改声明\",{\"1\":{\"39\":1}}],[\"服务端签名出jwt并且发送到客户端\",{\"1\":{\"39\":1}}],[\"服务端验证身份\",{\"1\":{\"30\":1}}],[\"服务端不用记录用户状态信息\",{\"1\":{\"26\":1}}],[\"服务端grpc请求服务端端口\",{\"1\":{\"4\":1}}],[\"服务启动成功\",{\"1\":{\"10\":1}}],[\"=nil\",{\"1\":{\"686\":1}}],[\"=len\",{\"1\":{\"686\":1}}],[\"=reflect\",{\"1\":{\"668\":1}}],[\"=0\",{\"1\":{\"553\":4,\"556\":1,\"558\":2,\"559\":1,\"580\":3,\"581\":1,\"599\":1,\"680\":1,\"689\":1}}],[\"=>\",{\"0\":{\"749\":1},\"1\":{\"546\":2,\"689\":1}}],[\"=b\",{\"1\":{\"527\":1}}],[\"=make\",{\"1\":{\"353\":1,\"703\":1}}],[\"=1\",{\"1\":{\"326\":1}}],[\"=255\",{\"1\":{\"326\":1}}],[\"==>\",{\"1\":{\"808\":6}}],[\"===\",{\"1\":{\"689\":2}}],[\"=====>\",{\"1\":{\"398\":4}}],[\"==0\",{\"1\":{\"567\":1}}],[\"==\",{\"1\":{\"42\":2,\"306\":2,\"362\":1,\"384\":1,\"427\":2,\"430\":5,\"521\":4,\"523\":1,\"524\":1,\"525\":4,\"526\":1,\"529\":1,\"532\":1,\"547\":1,\"549\":6,\"551\":5,\"556\":1,\"558\":1,\"559\":2,\"570\":2,\"585\":1,\"587\":2,\"588\":1,\"593\":1,\"598\":1,\"599\":1,\"605\":1,\"608\":1,\"668\":1,\"676\":2,\"677\":1,\"678\":2,\"682\":7,\"686\":1,\"689\":5,\"703\":1,\"725\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"803\":1,\"808\":10}}],[\"=被省略\",{\"1\":{\"37\":1}}],[\"=\",{\"0\":{\"138\":1,\"172\":1,\"227\":1,\"518\":1},\"1\":{\"10\":2,\"12\":7,\"18\":4,\"21\":4,\"42\":11,\"56\":1,\"72\":36,\"73\":18,\"85\":2,\"98\":1,\"118\":1,\"120\":1,\"128\":2,\"129\":4,\"130\":2,\"132\":3,\"138\":3,\"140\":1,\"142\":1,\"143\":1,\"144\":1,\"147\":1,\"161\":1,\"163\":3,\"168\":3,\"171\":1,\"172\":3,\"175\":1,\"176\":1,\"177\":1,\"180\":1,\"197\":1,\"199\":3,\"204\":3,\"220\":1,\"226\":3,\"227\":6,\"267\":2,\"270\":1,\"271\":1,\"278\":3,\"279\":1,\"303\":1,\"314\":1,\"315\":2,\"321\":1,\"324\":1,\"326\":1,\"328\":2,\"335\":2,\"338\":1,\"340\":3,\"346\":4,\"353\":3,\"362\":1,\"368\":1,\"387\":1,\"388\":5,\"389\":4,\"392\":2,\"411\":1,\"424\":7,\"425\":2,\"427\":20,\"430\":5,\"438\":4,\"481\":2,\"501\":1,\"509\":1,\"510\":2,\"511\":7,\"513\":31,\"515\":24,\"516\":3,\"518\":12,\"519\":10,\"521\":7,\"523\":12,\"524\":3,\"525\":8,\"526\":2,\"527\":9,\"528\":6,\"529\":1,\"530\":2,\"531\":6,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":2,\"539\":2,\"540\":3,\"543\":7,\"545\":5,\"546\":5,\"547\":12,\"549\":10,\"550\":21,\"551\":8,\"553\":7,\"555\":2,\"556\":2,\"557\":17,\"558\":2,\"559\":6,\"561\":1,\"562\":5,\"563\":7,\"564\":16,\"565\":7,\"566\":3,\"567\":8,\"568\":4,\"569\":1,\"570\":5,\"571\":2,\"573\":5,\"574\":11,\"575\":3,\"576\":3,\"577\":12,\"580\":9,\"581\":10,\"582\":5,\"583\":3,\"585\":22,\"586\":3,\"587\":8,\"588\":10,\"590\":2,\"591\":17,\"592\":11,\"593\":12,\"595\":6,\"596\":1,\"597\":2,\"598\":5,\"601\":10,\"602\":11,\"605\":16,\"606\":2,\"607\":2,\"608\":11,\"609\":11,\"610\":8,\"611\":7,\"612\":5,\"614\":6,\"616\":4,\"617\":1,\"618\":3,\"619\":2,\"620\":3,\"622\":2,\"623\":3,\"624\":10,\"625\":1,\"626\":9,\"627\":4,\"631\":6,\"638\":11,\"640\":31,\"642\":6,\"643\":12,\"644\":7,\"645\":4,\"647\":7,\"648\":1,\"651\":8,\"653\":5,\"654\":3,\"655\":1,\"656\":6,\"657\":2,\"660\":5,\"662\":59,\"663\":12,\"664\":1,\"665\":6,\"666\":6,\"667\":6,\"668\":7,\"669\":7,\"670\":18,\"671\":2,\"672\":1,\"673\":6,\"676\":41,\"677\":12,\"678\":21,\"679\":9,\"680\":12,\"681\":1,\"682\":42,\"684\":6,\"685\":1,\"686\":30,\"687\":2,\"688\":16,\"689\":53,\"692\":8,\"697\":1,\"699\":4,\"700\":7,\"701\":2,\"702\":1,\"703\":2,\"704\":2,\"705\":12,\"706\":1,\"707\":7,\"708\":7,\"709\":31,\"725\":4,\"726\":5,\"727\":4,\"728\":3,\"729\":5,\"730\":4,\"731\":3,\"732\":3,\"752\":1,\"753\":1,\"755\":1,\"756\":1,\"757\":2,\"758\":2,\"759\":1,\"760\":1,\"761\":3,\"764\":2,\"766\":3,\"768\":1,\"770\":7,\"772\":2,\"803\":7,\"829\":1,\"855\":2,\"859\":8}}],[\"重定向uri片段处理\",{\"0\":{\"898\":1,\"912\":1}}],[\"重定向uri绝对不能使用http方案\",{\"1\":{\"892\":1}}],[\"重定向uri可以使用另一种方案\",{\"1\":{\"873\":1}}],[\"重定向uri应该使用https方案\",{\"1\":{\"873\":1}}],[\"重置工作区\",{\"1\":{\"820\":1}}],[\"重置暂存区\",{\"1\":{\"820\":2}}],[\"重置密码\",{\"1\":{\"6\":2}}],[\"重安装所有的\",{\"1\":{\"629\":1}}],[\"重编译\",{\"1\":{\"629\":1}}],[\"重写本节中生成斐波那契数列的程序并返回两个命名返回值\",{\"1\":{\"571\":1}}],[\"重试\",{\"1\":{\"462\":1}}],[\"重要\",{\"0\":{\"399\":1}}],[\"重复请求\",{\"1\":{\"853\":1}}],[\"重复字符串\",{\"0\":{\"539\":1}}],[\"重复的\",{\"1\":{\"498\":1,\"853\":1}}],[\"重复关闭\",{\"1\":{\"335\":1}}],[\"重复读\",{\"1\":{\"239\":1}}],[\"重构查询方式\",{\"0\":{\"266\":1}}],[\"重新运行程序\",{\"1\":{\"697\":1}}],[\"重新获得控制权\",{\"1\":{\"689\":1}}],[\"重新实现上面的\",{\"1\":{\"660\":1}}],[\"重新分片\",{\"1\":{\"592\":1}}],[\"重新遍历扫描一次栈空间\",{\"1\":{\"429\":1}}],[\"重新做一遍类似增量扩容的搬迁动作\",{\"1\":{\"373\":1}}],[\"重新调度\",{\"1\":{\"330\":1}}],[\"重新恢复隐式提交\",{\"1\":{\"151\":1,\"187\":1}}],[\"重新生成后也不一样\",{\"1\":{\"72\":1}}],[\"重启来体现它的能力\",{\"1\":{\"614\":1}}],[\"重启\",{\"1\":{\"51\":1,\"983\":1}}],[\"重启nacos容器\",{\"1\":{\"4\":1}}],[\"yi6icjodhrwoi8vc2vydmvylmv4yw1wbguuy29tiiwkicjzdwiioiaimjq4mjg5\",{\"1\":{\"883\":1}}],[\"yisu\",{\"1\":{\"339\":1}}],[\"y++\",{\"1\":{\"582\":1}}],[\"yb\",{\"1\":{\"513\":1,\"525\":1}}],[\"yacc\",{\"1\":{\"481\":1}}],[\"yaml等\",{\"1\":{\"63\":1}}],[\"yamlfile\",{\"1\":{\"18\":2}}],[\"yaml\",{\"0\":{\"19\":1},\"1\":{\"18\":2,\"21\":1,\"328\":1,\"638\":1}}],[\"yaml配置文件\",{\"0\":{\"17\":1,\"20\":1}}],[\"y\",{\"1\":{\"474\":1,\"481\":2,\"525\":2,\"549\":4,\"551\":1,\"572\":2,\"573\":6,\"582\":3,\"585\":4,\"593\":2,\"617\":2,\"640\":2,\"643\":5,\"653\":3,\"655\":3,\"668\":2,\"686\":8,\"770\":2}}],[\"yuque\",{\"1\":{\"458\":1}}],[\"yet\",{\"1\":{\"682\":1}}],[\"year\",{\"1\":{\"148\":1,\"181\":1,\"546\":2,\"616\":3}}],[\"yes\",{\"1\":{\"42\":2,\"656\":6}}],[\"yyyy\",{\"1\":{\"148\":1,\"181\":1}}],[\"yyyyy\",{\"1\":{\"33\":1}}],[\"you\",{\"1\":{\"51\":1,\"540\":4,\"677\":3,\"678\":1}}],[\"yourself\",{\"1\":{\"561\":1}}],[\"your\",{\"1\":{\"6\":1,\"677\":3}}],[\"yjhbgcioijiuzi1niisinr5cci6ikpxvcj9\",{\"1\":{\"33\":1}}],[\"yml\",{\"1\":{\"6\":11,\"18\":1,\"21\":1}}],[\"5中添加的枚举来实现单例模式\",{\"1\":{\"803\":1}}],[\"571\",{\"1\":{\"709\":1}}],[\"577\",{\"1\":{\"662\":1,\"709\":1}}],[\"53\",{\"1\":{\"709\":1}}],[\"535\",{\"1\":{\"523\":1}}],[\"5interfaces\",{\"1\":{\"662\":1}}],[\"599\",{\"1\":{\"709\":1}}],[\"593\",{\"1\":{\"709\":1}}],[\"59\",{\"1\":{\"662\":3,\"709\":1}}],[\"591415086\",{\"1\":{\"528\":1}}],[\"547\",{\"1\":{\"709\":1}}],[\"541\",{\"1\":{\"709\":1}}],[\"5467984\",{\"1\":{\"662\":3}}],[\"54\",{\"1\":{\"651\":1}}],[\"5156\",{\"1\":{\"624\":1}}],[\"510to1\",{\"1\":{\"571\":1}}],[\"512\",{\"1\":{\"34\":3,\"682\":2,\"858\":4}}],[\"5for\",{\"1\":{\"554\":1}}],[\"587\",{\"1\":{\"709\":1}}],[\"58\",{\"1\":{\"528\":1,\"557\":1}}],[\"557\",{\"1\":{\"709\":1}}],[\"55\",{\"1\":{\"528\":2,\"570\":2,\"608\":1,\"663\":2,\"678\":1,\"692\":2}}],[\"551\",{\"1\":{\"523\":1}}],[\"509\",{\"1\":{\"709\":1}}],[\"503\",{\"1\":{\"709\":1}}],[\"50\",{\"1\":{\"513\":1,\"515\":1,\"518\":1,\"566\":1,\"580\":1,\"587\":2,\"588\":4,\"591\":1,\"605\":1,\"606\":2,\"689\":2}}],[\"500\",{\"1\":{\"247\":1,\"424\":1,\"655\":1,\"678\":1}}],[\"500000\",{\"1\":{\"565\":1,\"640\":1,\"647\":1}}],[\"5000\",{\"1\":{\"246\":1,\"256\":1}}],[\"5anonymous\",{\"1\":{\"648\":1}}],[\"5a\",{\"1\":{\"481\":1}}],[\"5c\",{\"1\":{\"481\":1}}],[\"5个\",{\"1\":{\"371\":1}}],[\"5时\",{\"1\":{\"371\":1}}],[\"5时才会触发rehash\",{\"1\":{\"368\":1}}],[\"523\",{\"1\":{\"709\":1}}],[\"52\",{\"1\":{\"546\":6}}],[\"52^b\",{\"1\":{\"370\":2}}],[\"5212\",{\"1\":{\"677\":2}}],[\"521\",{\"1\":{\"34\":1,\"709\":1}}],[\"5\",{\"0\":{\"38\":1,\"39\":1,\"111\":1,\"112\":1,\"133\":1,\"134\":1,\"142\":1,\"159\":1,\"318\":1,\"326\":1,\"362\":1,\"385\":1,\"405\":1,\"421\":1,\"442\":1,\"475\":1,\"485\":1,\"496\":1,\"510\":1,\"519\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"524\":1,\"525\":1,\"526\":1,\"527\":2,\"528\":1,\"529\":1,\"530\":1,\"531\":2,\"538\":1,\"548\":1,\"549\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":1,\"555\":1,\"556\":1,\"557\":1,\"558\":2,\"559\":1,\"569\":1,\"589\":1,\"593\":1,\"599\":1,\"611\":1,\"627\":1,\"646\":1,\"647\":1,\"648\":1,\"649\":1,\"655\":1,\"667\":1,\"675\":1,\"698\":1,\"703\":1,\"729\":1,\"759\":1,\"771\":1,\"772\":1,\"773\":1,\"811\":1,\"856\":1,\"877\":1,\"885\":1,\"896\":1,\"910\":1,\"923\":1,\"928\":1,\"929\":1,\"930\":1,\"931\":1,\"932\":1,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"937\":1,\"938\":2,\"939\":2,\"940\":2,\"941\":2,\"942\":1,\"943\":1,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"964\":1,\"983\":1},\"1\":{\"6\":1,\"34\":3,\"70\":1,\"72\":1,\"127\":4,\"131\":1,\"132\":1,\"220\":1,\"251\":1,\"293\":1,\"299\":1,\"311\":1,\"317\":1,\"320\":1,\"331\":1,\"353\":3,\"370\":2,\"405\":1,\"429\":4,\"431\":1,\"438\":2,\"439\":1,\"467\":1,\"469\":5,\"476\":2,\"481\":2,\"482\":1,\"483\":1,\"487\":1,\"499\":3,\"501\":1,\"504\":1,\"509\":1,\"510\":1,\"511\":2,\"513\":9,\"515\":3,\"517\":1,\"518\":5,\"520\":1,\"521\":6,\"523\":5,\"524\":2,\"525\":2,\"526\":2,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":2,\"538\":1,\"545\":2,\"546\":1,\"547\":6,\"549\":9,\"550\":3,\"551\":6,\"553\":7,\"554\":7,\"555\":2,\"556\":2,\"557\":10,\"558\":5,\"559\":6,\"561\":1,\"562\":1,\"563\":5,\"565\":4,\"566\":1,\"567\":3,\"568\":1,\"569\":1,\"570\":3,\"571\":1,\"574\":2,\"580\":8,\"581\":8,\"582\":3,\"583\":1,\"585\":8,\"586\":1,\"587\":3,\"588\":1,\"590\":1,\"591\":2,\"592\":9,\"593\":1,\"601\":1,\"605\":5,\"609\":1,\"610\":2,\"617\":2,\"626\":1,\"627\":2,\"629\":1,\"640\":13,\"642\":1,\"644\":1,\"647\":7,\"653\":1,\"655\":1,\"656\":1,\"661\":1,\"662\":12,\"663\":3,\"668\":2,\"673\":6,\"678\":3,\"681\":1,\"682\":2,\"686\":1,\"687\":1,\"689\":12,\"692\":4,\"697\":2,\"700\":1,\"707\":2,\"709\":1,\"770\":1,\"832\":3,\"849\":1,\"857\":1,\"858\":1,\"869\":2,\"873\":4,\"874\":1,\"877\":1,\"892\":1}}],[\"569\",{\"1\":{\"709\":1}}],[\"563\",{\"1\":{\"709\":1}}],[\"5632\",{\"1\":{\"624\":1}}],[\"56\",{\"1\":{\"528\":1,\"546\":1,\"611\":6,\"612\":3,\"626\":1,\"677\":2,\"678\":2,\"690\":2}}],[\"567\",{\"1\":{\"268\":1}}],[\"5672\",{\"1\":{\"3\":2}}],[\"5601\",{\"1\":{\"6\":2}}],[\"omxzr0ehr9r6jgdqroof4dagu96sr\",{\"1\":{\"883\":1}}],[\"owner资源所有者\",{\"1\":{\"868\":1}}],[\"owner\",{\"1\":{\"782\":6}}],[\"own\",{\"1\":{\"672\":1}}],[\"our\",{\"1\":{\"657\":2,\"672\":1}}],[\"outfile\",{\"1\":{\"689\":1}}],[\"outside\",{\"0\":{\"566\":1},\"1\":{\"573\":1}}],[\"outputstring\",{\"1\":{\"680\":4,\"682\":2}}],[\"outputerror\",{\"1\":{\"680\":4}}],[\"outputwriter\",{\"1\":{\"680\":7,\"682\":2}}],[\"outputfile\",{\"1\":{\"678\":2,\"680\":7,\"682\":3}}],[\"output\",{\"1\":{\"449\":1,\"568\":1,\"591\":1,\"626\":1,\"651\":1,\"654\":1,\"666\":1,\"680\":3,\"686\":1,\"689\":6}}],[\"out\",{\"1\":{\"163\":2,\"199\":2,\"523\":2,\"559\":1,\"580\":1,\"585\":1,\"631\":3,\"655\":1,\"689\":4,\"691\":2,\"702\":3,\"709\":14,\"725\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"803\":1}}],[\"outer2\",{\"1\":{\"647\":4}}],[\"outers\",{\"1\":{\"647\":3}}],[\"outer\",{\"0\":{\"141\":1,\"174\":1},\"1\":{\"647\":22,\"648\":1}}],[\"outlook\",{\"1\":{\"78\":1}}],[\"o9suo\",{\"1\":{\"638\":1}}],[\"oauth\",{\"1\":{\"637\":1,\"866\":1,\"868\":8,\"869\":2,\"873\":2,\"878\":1,\"883\":1,\"892\":2}}],[\"odbc\",{\"1\":{\"637\":1}}],[\"oddeven\",{\"1\":{\"689\":3}}],[\"oddven\",{\"1\":{\"627\":1}}],[\"odd\",{\"1\":{\"559\":1,\"570\":9,\"689\":5}}],[\"ovr\",{\"1\":{\"469\":1}}],[\"overcome\",{\"1\":{\"686\":1}}],[\"overloading\",{\"1\":{\"561\":1}}],[\"over\",{\"1\":{\"543\":3,\"559\":1}}],[\"overview\",{\"1\":{\"461\":1,\"462\":1}}],[\"overflow的bucket中大部分是空的\",{\"1\":{\"373\":1}}],[\"overflow数量\",{\"1\":{\"371\":1}}],[\"overflow\",{\"1\":{\"365\":3}}],[\"ohloh\",{\"1\":{\"469\":1}}],[\"osjzw2paithfubeebluvvk4\",{\"1\":{\"883\":1}}],[\"os\",{\"0\":{\"484\":1,\"681\":1},\"1\":{\"469\":1,\"476\":1,\"481\":2,\"482\":1,\"486\":1,\"489\":1,\"490\":1,\"491\":1,\"506\":6,\"515\":7,\"550\":4,\"614\":5,\"627\":1,\"633\":1,\"635\":1,\"662\":3,\"670\":6,\"677\":12,\"678\":13,\"679\":6,\"680\":21,\"681\":13,\"682\":42,\"686\":3,\"687\":1,\"688\":4,\"689\":21,\"692\":3}}],[\"oo\",{\"1\":{\"467\":1,\"642\":1,\"676\":3}}],[\"oops\",{\"1\":{\"568\":2}}],[\"oop\",{\"1\":{\"310\":4}}],[\"occurred\",{\"1\":{\"678\":1,\"680\":1,\"688\":1,\"689\":3}}],[\"occured\",{\"1\":{\"550\":1}}],[\"oct\",{\"1\":{\"651\":1,\"678\":1}}],[\"ocp\",{\"1\":{\"316\":1}}],[\"ocker\",{\"1\":{\"51\":1}}],[\"oldbuckets\",{\"1\":{\"364\":1}}],[\"old\",{\"1\":{\"166\":4,\"202\":4,\"537\":3}}],[\"otherwise\",{\"1\":{\"667\":1}}],[\"other\",{\"1\":{\"78\":1,\"625\":1,\"628\":1}}],[\"once\",{\"1\":{\"625\":2}}],[\"oneline\",{\"1\":{\"818\":1}}],[\"one\",{\"1\":{\"605\":4}}],[\"oneway\",{\"1\":{\"462\":2}}],[\"only\",{\"1\":{\"547\":1,\"610\":1,\"701\":1,\"709\":4,\"728\":2,\"729\":1,\"730\":1,\"731\":1}}],[\"on\",{\"1\":{\"72\":10,\"73\":8,\"78\":1,\"107\":1,\"108\":1,\"137\":1,\"140\":1,\"142\":1,\"143\":1,\"154\":2,\"159\":1,\"160\":1,\"167\":2,\"170\":1,\"171\":1,\"175\":1,\"176\":1,\"190\":2,\"195\":1,\"196\":1,\"203\":2,\"268\":2,\"279\":1,\"305\":1,\"518\":1,\"553\":38,\"557\":28,\"610\":1,\"651\":2,\"653\":1,\"662\":1,\"678\":2,\"682\":1,\"704\":1,\"705\":1}}],[\"offset\",{\"1\":{\"688\":3}}],[\"offer满天飞\",{\"1\":{\"426\":1}}],[\"off\",{\"1\":{\"409\":1,\"411\":1}}],[\"of\",{\"1\":{\"68\":2,\"205\":2,\"365\":1,\"383\":1,\"508\":1,\"510\":1,\"517\":1,\"518\":1,\"523\":2,\"532\":2,\"534\":2,\"536\":12,\"538\":4,\"543\":4,\"545\":3,\"547\":2,\"550\":2,\"553\":4,\"557\":8,\"559\":3,\"568\":2,\"572\":2,\"573\":5,\"576\":1,\"577\":1,\"580\":2,\"583\":3,\"585\":11,\"587\":4,\"592\":12,\"605\":1,\"608\":3,\"609\":1,\"610\":5,\"638\":2,\"640\":7,\"645\":2,\"655\":1,\"657\":2,\"662\":18,\"668\":1,\"669\":12,\"670\":1,\"672\":1,\"673\":8,\"676\":2,\"678\":1,\"682\":1,\"684\":1,\"686\":7,\"688\":5,\"689\":2,\"697\":10,\"709\":3}}],[\"obtained\",{\"1\":{\"670\":2,\"688\":1}}],[\"obtaining\",{\"1\":{\"51\":1}}],[\"obama\",{\"1\":{\"645\":1,\"656\":5}}],[\"obj\",{\"1\":{\"627\":1,\"629\":1,\"631\":2,\"661\":5,\"676\":1}}],[\"object表示非原始类型\",{\"1\":{\"762\":1}}],[\"objects\",{\"1\":{\"692\":1,\"832\":4}}],[\"objective\",{\"1\":{\"447\":1,\"509\":1}}],[\"object\",{\"0\":{\"762\":1},\"1\":{\"301\":1,\"478\":1,\"640\":1,\"651\":1,\"659\":1,\"663\":2,\"682\":1,\"762\":1,\"868\":1,\"878\":1}}],[\"object的声明\",{\"1\":{\"39\":1}}],[\"oberon\",{\"1\":{\"471\":1,\"670\":4}}],[\"o\",{\"0\":{\"990\":1},\"1\":{\"51\":2,\"210\":2,\"260\":2,\"303\":1,\"330\":2,\"390\":2,\"449\":2,\"481\":1,\"506\":3,\"508\":1,\"519\":3,\"553\":1,\"557\":1,\"585\":1,\"588\":1,\"662\":4,\"680\":12,\"682\":6,\"686\":2,\"694\":1,\"762\":1}}],[\"oriented\",{\"1\":{\"659\":1}}],[\"orig\",{\"1\":{\"540\":4,\"545\":2,\"550\":4}}],[\"origstr\",{\"1\":{\"550\":3}}],[\"origs\",{\"1\":{\"539\":2}}],[\"original\",{\"1\":{\"540\":2}}],[\"origin\",{\"1\":{\"483\":1,\"635\":2,\"827\":2,\"828\":1,\"829\":2}}],[\"orbit\",{\"1\":{\"508\":1}}],[\"oracle\",{\"0\":{\"297\":1},\"1\":{\"246\":1,\"276\":1,\"280\":1,\"296\":2,\"297\":1,\"298\":2,\"299\":2,\"300\":2,\"301\":1}}],[\"or\",{\"0\":{\"278\":1},\"1\":{\"39\":2,\"52\":1,\"132\":6,\"278\":2,\"507\":1,\"508\":2,\"547\":1,\"549\":5,\"550\":1,\"551\":2,\"564\":2,\"565\":1,\"568\":3,\"649\":1,\"654\":1,\"662\":2,\"680\":1,\"687\":1,\"708\":1,\"755\":1,\"815\":1,\"817\":1}}],[\"org1\",{\"1\":{\"627\":1}}],[\"org\",{\"1\":{\"39\":1,\"469\":5,\"496\":1,\"497\":2,\"501\":1,\"627\":1,\"638\":5,\"678\":1,\"682\":1,\"689\":1,\"873\":2,\"877\":1,\"878\":1,\"881\":1}}],[\"orderitems\",{\"1\":{\"128\":1}}],[\"orders\",{\"1\":{\"128\":1,\"142\":3,\"143\":3,\"175\":3,\"176\":3}}],[\"order\",{\"0\":{\"134\":1,\"256\":1,\"304\":1},\"1\":{\"6\":1,\"128\":2,\"134\":3,\"135\":2,\"142\":1,\"143\":1,\"144\":1,\"175\":1,\"176\":1,\"177\":1,\"185\":2,\"221\":2,\"299\":2,\"304\":2,\"305\":1}}],[\"op不支持使用章节7\",{\"1\":{\"878\":1}}],[\"op不支持使用第6节中定义的request\",{\"1\":{\"878\":1}}],[\"op不支持使用第6节中定义的请求参数\",{\"1\":{\"878\":1}}],[\"op必须尝试主动重新验证终端用户\",{\"1\":{\"873\":1}}],[\"op响应一个id令牌\",{\"1\":{\"869\":1}}],[\"op对终端用户进行认证并获得授权\",{\"1\":{\"869\":1}}],[\"opid\",{\"1\":{\"689\":1}}],[\"op\",{\"1\":{\"572\":1,\"688\":2,\"689\":1,\"866\":1,\"868\":2,\"869\":2,\"878\":1}}],[\"operator\",{\"1\":{\"583\":1,\"677\":1}}],[\"operation\",{\"1\":{\"605\":1,\"688\":1}}],[\"operations\",{\"1\":{\"568\":2}}],[\"operating\",{\"1\":{\"515\":3,\"517\":1}}],[\"operate\",{\"1\":{\"167\":2,\"203\":2,\"686\":1}}],[\"openssl\",{\"1\":{\"828\":1}}],[\"opens\",{\"1\":{\"689\":1}}],[\"openfile\",{\"1\":{\"680\":6,\"682\":3,\"686\":1}}],[\"openid连接还使用以下oauth\",{\"1\":{\"873\":1}}],[\"openid连接请求必须包含openid范围值\",{\"1\":{\"873\":1}}],[\"openid连接使用授权代码流中的以下oauth\",{\"1\":{\"873\":1}}],[\"openid连接协议\",{\"1\":{\"869\":1}}],[\"openid提供者的发行者标识符\",{\"1\":{\"887\":1}}],[\"openid提供者\",{\"1\":{\"868\":1}}],[\"openid依赖方和openid提供者之间的请求或响应\",{\"1\":{\"868\":1}}],[\"openid\",{\"0\":{\"864\":1},\"1\":{\"865\":1,\"866\":10,\"868\":2,\"869\":4},\"2\":{\"970\":1,\"971\":1}}],[\"openidprovider\",{\"1\":{\"17\":1,\"18\":2,\"20\":1,\"21\":2}}],[\"opening\",{\"1\":{\"678\":1,\"680\":1}}],[\"openbsd\",{\"1\":{\"482\":1}}],[\"open\",{\"1\":{\"56\":1,\"168\":2,\"204\":2,\"284\":1,\"513\":1,\"550\":2,\"568\":2,\"658\":3,\"662\":1,\"678\":5,\"679\":2,\"680\":1,\"682\":4,\"688\":3,\"709\":5}}],[\"openapi\",{\"0\":{\"46\":1},\"1\":{\"46\":1}}],[\"opt\",{\"1\":{\"42\":2}}],[\"options\",{\"1\":{\"567\":5}}],[\"option\",{\"1\":{\"42\":3,\"682\":1,\"725\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1}}],[\"optional\",{\"1\":{\"6\":1,\"867\":1}}],[\"opts=\",{\"1\":{\"6\":1}}],[\"ok\",{\"1\":{\"12\":1,\"328\":2,\"335\":1,\"389\":2,\"394\":1,\"427\":2,\"550\":8,\"568\":4,\"590\":2,\"608\":3,\"624\":5,\"643\":4,\"662\":15,\"667\":2,\"672\":2,\"676\":4,\"688\":4,\"689\":8,\"709\":9,\"762\":2,\"770\":1,\"883\":1}}],[\"hybrid\",{\"1\":{\"868\":1,\"869\":4}}],[\"h1>\",{\"1\":{\"638\":1}}],[\"h>\",{\"1\":{\"501\":5}}],[\"human\",{\"1\":{\"689\":1}}],[\"hugo\",{\"1\":{\"538\":2}}],[\"hundt\",{\"1\":{\"499\":1}}],[\"huchao\",{\"1\":{\"458\":1}}],[\"h\",{\"1\":{\"481\":2,\"502\":1,\"531\":1,\"538\":3,\"557\":2,\"617\":2,\"689\":2,\"696\":1}}],[\"hg\",{\"1\":{\"469\":1,\"484\":1,\"490\":1,\"629\":5,\"636\":3}}],[\"hchan\",{\"1\":{\"398\":1}}],[\"hcl\",{\"0\":{\"19\":1}}],[\"hmap数据结构中oldbuckets成员指身原bucket\",{\"1\":{\"372\":1}}],[\"hmap\",{\"0\":{\"364\":1},\"1\":{\"363\":1,\"364\":2}}],[\"hmacsha256\",{\"1\":{\"36\":1}}],[\"hmac512\",{\"1\":{\"34\":1}}],[\"hmac384\",{\"1\":{\"34\":1}}],[\"hmac256\",{\"1\":{\"34\":1}}],[\"hmac\",{\"1\":{\"34\":4,\"36\":1,\"858\":1,\"859\":4,\"860\":4}}],[\"h2\",{\"1\":{\"296\":1}}],[\"hard\",{\"1\":{\"819\":4,\"820\":1,\"821\":1}}],[\"hardeight\",{\"1\":{\"513\":1}}],[\"hangs\",{\"1\":{\"701\":1}}],[\"handle\",{\"1\":{\"684\":1}}],[\"handlefunc\",{\"1\":{\"638\":3}}],[\"handler1\",{\"1\":{\"689\":1}}],[\"handlers\",{\"1\":{\"638\":1}}],[\"handler\",{\"1\":{\"168\":1,\"204\":1}}],[\"hand\",{\"1\":{\"409\":1,\"411\":1}}],[\"hacker\",{\"1\":{\"686\":1}}],[\"have\",{\"1\":{\"507\":1,\"534\":2,\"662\":1,\"672\":1,\"676\":2,\"678\":1}}],[\"having\",{\"0\":{\"136\":1,\"186\":1},\"1\":{\"136\":8,\"186\":8,\"305\":1}}],[\"haiku\",{\"1\":{\"482\":1}}],[\"hassuffix\",{\"1\":{\"534\":2,\"574\":1}}],[\"hasprefix\",{\"1\":{\"534\":3}}],[\"has\",{\"1\":{\"383\":1,\"508\":1,\"530\":2,\"573\":5,\"662\":4,\"663\":6,\"667\":1}}],[\"hash声明\",{\"1\":{\"888\":1}}],[\"hash值是区分大小写的字符串\",{\"1\":{\"886\":1}}],[\"hasher\",{\"1\":{\"686\":8}}],[\"hashtable\",{\"1\":{\"603\":1}}],[\"hash0\",{\"1\":{\"364\":1}}],[\"hashcode\",{\"1\":{\"217\":2}}],[\"hash\",{\"0\":{\"217\":1},\"1\":{\"217\":2,\"249\":1,\"363\":2,\"364\":1,\"365\":1,\"383\":3,\"390\":1,\"603\":1,\"605\":1,\"686\":17,\"886\":1}}],[\"haodawang\",{\"1\":{\"337\":1}}],[\"hh\",{\"1\":{\"148\":1,\"181\":1}}],[\"hint参数发出这样的请求\",{\"1\":{\"874\":1}}],[\"hint应该出现\",{\"1\":{\"873\":1}}],[\"hint\",{\"1\":{\"873\":2}}],[\"hi\",{\"1\":{\"536\":8,\"539\":4,\"561\":2,\"677\":2}}],[\"hisal\",{\"1\":{\"270\":1}}],[\"history`\",{\"1\":{\"167\":1,\"203\":1}}],[\"hipaa\",{\"1\":{\"74\":1}}],[\"hierarchal\",{\"1\":{\"65\":1}}],[\"hex\",{\"1\":{\"678\":1}}],[\"here\",{\"1\":{\"547\":6,\"559\":2,\"568\":4,\"590\":1,\"626\":2,\"677\":3,\"689\":1}}],[\"hertz\",{\"0\":{\"461\":1},\"1\":{\"461\":7}}],[\"hey\",{\"1\":{\"540\":4}}],[\"hector\",{\"1\":{\"469\":1,\"485\":1}}],[\"hel\",{\"1\":{\"532\":1}}],[\"hello\",{\"1\":{\"415\":1,\"450\":1,\"469\":1,\"483\":5,\"485\":1,\"505\":2,\"506\":1,\"507\":2,\"508\":1,\"515\":3,\"517\":2,\"518\":2,\"532\":1,\"538\":2,\"567\":1,\"573\":1,\"597\":1,\"598\":2,\"627\":2,\"643\":2,\"663\":2,\"680\":4,\"681\":4,\"682\":4}}],[\"helloworld\",{\"1\":{\"315\":2}}],[\"helpful\",{\"1\":{\"508\":1}}],[\"help\",{\"1\":{\"299\":1,\"449\":1,\"682\":1,\"689\":2}}],[\"head~n\",{\"1\":{\"819\":1}}],[\"head^^\",{\"1\":{\"819\":1}}],[\"head^\",{\"1\":{\"819\":1}}],[\"head\",{\"1\":{\"640\":1,\"822\":3}}],[\"header和payload\",{\"1\":{\"858\":1}}],[\"header的唯一强制声明是算法声明\",{\"1\":{\"850\":1}}],[\"header参数的值来区分\",{\"1\":{\"39\":1}}],[\"header\",{\"0\":{\"34\":1,\"850\":1,\"861\":1},\"1\":{\"33\":1,\"35\":1,\"36\":3,\"37\":1,\"382\":3,\"849\":1,\"850\":3,\"851\":1,\"856\":1,\"858\":1,\"859\":2,\"868\":2,\"883\":2}}],[\"heap\",{\"1\":{\"284\":1,\"614\":1,\"692\":2}}],[\"height\",{\"1\":{\"42\":1,\"582\":3}}],[\"html>\",{\"1\":{\"638\":1}}],[\"html5\",{\"1\":{\"623\":1}}],[\"html\",{\"0\":{\"335\":1},\"1\":{\"39\":1,\"339\":1,\"341\":1,\"344\":1,\"394\":1,\"455\":1,\"490\":1,\"623\":3,\"682\":2}}],[\"http响应代码为400\",{\"1\":{\"884\":1}}],[\"http响应体使用application\",{\"1\":{\"884\":1}}],[\"http=\",{\"1\":{\"497\":1,\"628\":1}}],[\"http2\",{\"1\":{\"462\":2}}],[\"http1\",{\"1\":{\"461\":1}}],[\"httpget\",{\"1\":{\"427\":4}}],[\"https\",{\"0\":{\"335\":1},\"1\":{\"39\":1,\"205\":1,\"318\":2,\"325\":1,\"336\":1,\"337\":1,\"338\":1,\"339\":1,\"341\":1,\"343\":1,\"344\":1,\"355\":1,\"356\":1,\"361\":3,\"363\":1,\"393\":1,\"397\":2,\"406\":1,\"407\":2,\"416\":2,\"428\":2,\"454\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"462\":1,\"469\":1,\"483\":2,\"484\":1,\"488\":1,\"828\":2,\"869\":1,\"873\":1,\"877\":1,\"878\":1}}],[\"http\",{\"0\":{\"461\":1},\"1\":{\"6\":4,\"10\":1,\"11\":1,\"12\":5,\"335\":1,\"427\":7,\"455\":3,\"461\":1,\"467\":1,\"483\":2,\"496\":1,\"497\":3,\"499\":1,\"501\":1,\"623\":4,\"627\":2,\"628\":1,\"635\":1,\"638\":23,\"662\":1,\"678\":1,\"682\":2,\"686\":1,\"689\":3,\"692\":5,\"828\":1,\"873\":2,\"877\":1,\"878\":1,\"881\":1,\"883\":1,\"884\":1,\"984\":1}}],[\"hs512\",{\"1\":{\"858\":1}}],[\"hs384或hs512\",{\"1\":{\"887\":1}}],[\"hs384\",{\"1\":{\"34\":2,\"858\":1}}],[\"hs256\",{\"1\":{\"34\":2,\"845\":1,\"849\":1,\"858\":3,\"860\":1}}],[\"hot\",{\"1\":{\"826\":1}}],[\"hotel\",{\"1\":{\"611\":3,\"612\":2}}],[\"hotspot\",{\"1\":{\"469\":1}}],[\"hollyday\",{\"1\":{\"609\":1}}],[\"hoare\",{\"1\":{\"471\":1,\"694\":1}}],[\"hour\",{\"1\":{\"148\":1,\"181\":1,\"622\":1}}],[\"howold\",{\"1\":{\"380\":2}}],[\"how\",{\"1\":{\"78\":1,\"538\":2,\"540\":4,\"645\":2,\"684\":1}}],[\"host\",{\"1\":{\"17\":1,\"18\":2,\"20\":1,\"21\":2,\"154\":1,\"190\":1,\"873\":1,\"881\":1}}],[\"hosts=http\",{\"1\":{\"6\":1}}],[\"host=localhost\",{\"1\":{\"4\":1}}],[\"home\",{\"1\":{\"1\":5,\"2\":4,\"3\":5,\"4\":4,\"6\":10,\"482\":1,\"515\":2,\"631\":3,\"632\":3}}],[\"0指定的响应参数外\",{\"1\":{\"883\":1}}],[\"0允许在这种情况下省略该参数\",{\"1\":{\"882\":1}}],[\"0状态值\",{\"1\":{\"878\":1}}],[\"0请求\",{\"1\":{\"874\":1}}],[\"0请求参数\",{\"1\":{\"873\":2}}],[\"0参数\",{\"1\":{\"874\":1}}],[\"0规范验证所有oauth\",{\"1\":{\"874\":1}}],[\"0规范定义了openid\",{\"1\":{\"866\":1}}],[\"0响应类型值\",{\"1\":{\"873\":1,\"892\":1}}],[\"0定义的请求参数和openid\",{\"1\":{\"872\":1}}],[\"0还为隐式流定义了令牌响应类型值\",{\"1\":{\"869\":1,\"892\":1}}],[\"0多响应类型编码实践\",{\"1\":{\"869\":2,\"873\":1,\"892\":1}}],[\"0多重响应类型编码实践\",{\"1\":{\"868\":1}}],[\"0s6\",{\"1\":{\"869\":1}}],[\"0的2\",{\"1\":{\"873\":1}}],[\"0的pape\",{\"1\":{\"869\":1}}],[\"0的响应参数\",{\"1\":{\"869\":1}}],[\"0的主要扩展是id\",{\"1\":{\"869\":1}}],[\"0z\",{\"1\":{\"869\":3}}],[\"0客户端标识符\",{\"1\":{\"873\":1}}],[\"0客户端id\",{\"1\":{\"869\":1}}],[\"0客户端应用程序需要终端用户身份验证和来自openid提供者的声明\",{\"1\":{\"868\":1}}],[\"0客户端也被称为信赖方\",{\"1\":{\"866\":1}}],[\"0流程中\",{\"1\":{\"868\":3,\"869\":1}}],[\"0认证服务器也被称为openid提供商\",{\"1\":{\"866\":1}}],[\"0授权错误响应消息\",{\"1\":{\"878\":1}}],[\"0授权响应消息\",{\"1\":{\"877\":1}}],[\"0授权服务器\",{\"1\":{\"868\":1}}],[\"0授权请求\",{\"1\":{\"868\":1,\"873\":1}}],[\"0授权请求使用openid\",{\"1\":{\"868\":1}}],[\"0授权过程的一个扩展来实现\",{\"1\":{\"866\":1}}],[\"0授权框架\",{\"1\":{\"866\":1}}],[\"0进行剖析\",{\"1\":{\"866\":1}}],[\"0承载令牌使用\",{\"1\":{\"866\":1,\"883\":1}}],[\"0之上的认证\",{\"1\":{\"865\":1,\"866\":1}}],[\"0协议之上的一个简单身份层\",{\"1\":{\"865\":1}}],[\"0是oauth\",{\"1\":{\"865\":1,\"866\":1}}],[\"06\",{\"1\":{\"689\":1}}],[\"0666\",{\"1\":{\"680\":5,\"682\":2,\"686\":1}}],[\"0664\",{\"1\":{\"550\":1}}],[\"0644\",{\"1\":{\"678\":1}}],[\"03\",{\"1\":{\"617\":1,\"689\":1}}],[\"036\",{\"1\":{\"523\":2}}],[\"05\",{\"1\":{\"546\":1,\"617\":2,\"619\":1,\"620\":2}}],[\"0852\",{\"1\":{\"546\":1}}],[\"08\",{\"1\":{\"546\":5,\"618\":1,\"620\":1}}],[\"08b\",{\"1\":{\"525\":1}}],[\"09\",{\"1\":{\"546\":2}}],[\"04\",{\"1\":{\"546\":4,\"568\":1,\"617\":2,\"619\":1,\"620\":1,\"689\":4}}],[\"02\",{\"1\":{\"546\":4,\"617\":2,\"619\":1,\"620\":1}}],[\"02d\",{\"1\":{\"546\":4,\"616\":2}}],[\"022\",{\"1\":{\"523\":1}}],[\"022e23\",{\"1\":{\"523\":1}}],[\"01t0\",{\"1\":{\"869\":3}}],[\"01234\",{\"1\":{\"559\":1}}],[\"012345\",{\"1\":{\"558\":3}}],[\"01\",{\"1\":{\"525\":1,\"546\":1,\"617\":2,\"619\":1,\"620\":1,\"869\":3}}],[\"0100\",{\"1\":{\"513\":1}}],[\"0nd\",{\"1\":{\"523\":1}}],[\"0x4f08e8\",{\"1\":{\"689\":1}}],[\"0x442938\",{\"1\":{\"689\":1}}],[\"0x125275e0\",{\"1\":{\"666\":1}}],[\"0x125275f0\",{\"1\":{\"666\":1}}],[\"0x126d2be0\",{\"1\":{\"640\":1,\"682\":1,\"686\":1}}],[\"0x126d2b80\",{\"1\":{\"640\":1,\"682\":1,\"686\":1}}],[\"0x1234567\",{\"1\":{\"614\":1}}],[\"0x10903bc0\",{\"1\":{\"605\":1}}],[\"0x10903ba0\",{\"1\":{\"605\":1}}],[\"0x10903be0\",{\"1\":{\"605\":1}}],[\"0x681400\",{\"1\":{\"573\":1}}],[\"0x681ac0\",{\"1\":{\"573\":1}}],[\"0x681a80\",{\"1\":{\"573\":1}}],[\"0x681b00\",{\"1\":{\"573\":1}}],[\"0x6b0820\",{\"1\":{\"547\":2}}],[\"0x2540820\",{\"1\":{\"547\":1}}],[\"0x24f0820\",{\"1\":{\"547\":2}}],[\"0xfee1dead\",{\"1\":{\"614\":1}}],[\"0xf8400128c0\",{\"1\":{\"689\":1}}],[\"0xf84001d7f0\",{\"1\":{\"547\":1}}],[\"0xf84000e9c0\",{\"1\":{\"689\":2}}],[\"0xf84000e9f0\",{\"1\":{\"689\":2}}],[\"0xf84000ea50\",{\"1\":{\"689\":2}}],[\"0xf840000210\",{\"1\":{\"689\":1}}],[\"0xf840000040\",{\"1\":{\"516\":1}}],[\"0xf840003b70\",{\"1\":{\"676\":2}}],[\"0xf840003ba0\",{\"1\":{\"676\":2}}],[\"0xf840003bd0\",{\"1\":{\"676\":3}}],[\"0xf8400038a0\",{\"1\":{\"676\":2}}],[\"0xffffffff\",{\"1\":{\"525\":1}}],[\"0xff\",{\"1\":{\"523\":1}}],[\"0x\",{\"1\":{\"523\":1}}],[\"07\",{\"1\":{\"546\":1,\"620\":1,\"689\":3}}],[\"077\",{\"1\":{\"523\":1}}],[\"073\",{\"1\":{\"523\":1}}],[\"00gmt\",{\"1\":{\"618\":1}}],[\"00\",{\"1\":{\"618\":1,\"689\":1}}],[\"000\",{\"1\":{\"694\":1}}],[\"000000\",{\"1\":{\"609\":4,\"644\":1,\"662\":2}}],[\"00001011\",{\"1\":{\"525\":1}}],[\"0001\",{\"1\":{\"513\":1}}],[\"001000\",{\"1\":{\"577\":1}}],[\"0010\",{\"1\":{\"513\":1}}],[\"0总之类型溢出会出现难以意料的事\",{\"1\":{\"326\":1}}],[\"0=正常\",{\"1\":{\"72\":1}}],[\"0=未删除\",{\"1\":{\"72\":6,\"73\":3}}],[\"0<\",{\"1\":{\"46\":1}}],[\"0\",{\"0\":{\"309\":1,\"310\":1,\"320\":1,\"408\":1,\"423\":1,\"455\":1,\"864\":1},\"1\":{\"6\":1,\"17\":1,\"20\":1,\"72\":19,\"73\":9,\"122\":1,\"127\":1,\"163\":2,\"168\":1,\"199\":2,\"204\":1,\"251\":1,\"267\":2,\"320\":1,\"335\":1,\"346\":2,\"365\":2,\"392\":2,\"424\":2,\"427\":3,\"430\":2,\"438\":1,\"457\":3,\"481\":1,\"482\":1,\"493\":1,\"495\":1,\"504\":1,\"506\":1,\"507\":3,\"509\":1,\"511\":1,\"513\":7,\"515\":3,\"523\":13,\"525\":24,\"527\":4,\"528\":11,\"532\":3,\"536\":1,\"542\":1,\"547\":1,\"549\":6,\"550\":5,\"551\":16,\"553\":7,\"554\":1,\"555\":2,\"557\":7,\"558\":4,\"559\":6,\"562\":4,\"566\":1,\"567\":5,\"568\":4,\"570\":6,\"571\":1,\"573\":3,\"574\":3,\"577\":4,\"580\":15,\"581\":6,\"582\":3,\"583\":1,\"585\":18,\"586\":3,\"587\":5,\"588\":4,\"591\":2,\"592\":10,\"593\":2,\"595\":1,\"596\":1,\"598\":1,\"599\":2,\"602\":2,\"605\":2,\"608\":1,\"609\":4,\"611\":1,\"619\":1,\"623\":3,\"624\":2,\"638\":1,\"640\":3,\"642\":1,\"645\":1,\"648\":2,\"651\":2,\"660\":3,\"662\":11,\"670\":7,\"676\":9,\"678\":1,\"679\":2,\"680\":2,\"681\":1,\"682\":18,\"686\":2,\"688\":2,\"689\":14,\"690\":1,\"692\":1,\"701\":4,\"703\":4,\"705\":1,\"707\":5,\"708\":2,\"709\":3,\"759\":1,\"760\":1,\"762\":1,\"770\":1,\"866\":3,\"868\":1,\"869\":7,\"873\":1,\"874\":1,\"875\":1,\"877\":1,\"878\":2,\"880\":1,\"881\":2,\"883\":3,\"884\":1},\"2\":{\"971\":1}}],[\"6和7\",{\"1\":{\"873\":1}}],[\"6中定义的其他代码\",{\"1\":{\"873\":1}}],[\"6g\",{\"1\":{\"696\":1}}],[\"626\",{\"1\":{\"692\":2}}],[\"623951027\",{\"1\":{\"528\":1}}],[\"631\",{\"1\":{\"709\":1}}],[\"63u\",{\"1\":{\"690\":1}}],[\"6379\",{\"1\":{\"2\":2,\"17\":1,\"20\":1}}],[\"6point\",{\"1\":{\"662\":1}}],[\"661\",{\"1\":{\"709\":1}}],[\"66\",{\"1\":{\"692\":1}}],[\"66500\",{\"1\":{\"662\":2}}],[\"666\",{\"1\":{\"545\":2}}],[\"6factorial\",{\"1\":{\"571\":1}}],[\"6employee\",{\"1\":{\"651\":1}}],[\"6e\",{\"1\":{\"557\":1}}],[\"691\",{\"1\":{\"709\":1}}],[\"69\",{\"1\":{\"557\":1}}],[\"693147180559945309417232121458\",{\"1\":{\"513\":1}}],[\"683\",{\"1\":{\"709\":1}}],[\"68\",{\"1\":{\"557\":1,\"624\":1}}],[\"6749中的验证规则\",{\"1\":{\"885\":1}}],[\"6749验证响应\",{\"1\":{\"879\":1}}],[\"6749无关的http错误将使用适当的http状态码返回给用户代理\",{\"1\":{\"878\":1}}],[\"677\",{\"1\":{\"709\":1}}],[\"673\",{\"1\":{\"709\":1}}],[\"672274793\",{\"1\":{\"614\":1}}],[\"6765\",{\"1\":{\"570\":1}}],[\"67\",{\"1\":{\"557\":1,\"709\":1}}],[\"671\",{\"1\":{\"545\":1}}],[\"6bitwise\",{\"1\":{\"554\":1}}],[\"607\",{\"1\":{\"709\":1}}],[\"601\",{\"1\":{\"709\":1}}],[\"600000\",{\"1\":{\"583\":1}}],[\"60\",{\"1\":{\"546\":2,\"563\":1,\"606\":1,\"647\":4}}],[\"6060\",{\"1\":{\"497\":2,\"628\":2,\"692\":2}}],[\"619\",{\"1\":{\"709\":1}}],[\"617\",{\"1\":{\"709\":1}}],[\"613\",{\"1\":{\"709\":1}}],[\"610\",{\"1\":{\"570\":1}}],[\"61\",{\"1\":{\"528\":1,\"709\":1}}],[\"615\",{\"1\":{\"523\":1}}],[\"659\",{\"1\":{\"709\":1}}],[\"653\",{\"1\":{\"709\":1}}],[\"65\",{\"1\":{\"523\":1,\"528\":2,\"531\":3,\"557\":2,\"565\":2,\"611\":3,\"612\":2}}],[\"6a\",{\"1\":{\"481\":1}}],[\"6count\",{\"1\":{\"532\":1}}],[\"6c\",{\"1\":{\"481\":1}}],[\"6+\",{\"1\":{\"481\":1}}],[\"643\",{\"1\":{\"709\":1}}],[\"641\",{\"1\":{\"709\":1}}],[\"647\",{\"1\":{\"523\":1,\"709\":1}}],[\"648\",{\"1\":{\"523\":1}}],[\"64\",{\"1\":{\"72\":4,\"98\":3,\"112\":3,\"438\":1,\"481\":1,\"484\":1,\"485\":2,\"515\":1,\"516\":1,\"523\":2,\"524\":1,\"545\":4,\"547\":1,\"563\":1,\"605\":2,\"651\":2,\"670\":1}}],[\"6\",{\"0\":{\"135\":1,\"136\":1,\"143\":1,\"160\":1,\"327\":1,\"363\":1,\"386\":1,\"406\":1,\"443\":1,\"476\":1,\"486\":1,\"497\":1,\"511\":1,\"528\":1,\"532\":1,\"539\":1,\"559\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":1,\"565\":1,\"566\":1,\"567\":1,\"568\":1,\"569\":1,\"570\":2,\"572\":1,\"573\":1,\"574\":1,\"575\":1,\"576\":1,\"577\":1,\"590\":1,\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":2,\"601\":1,\"602\":1,\"612\":1,\"628\":1,\"650\":1,\"651\":1,\"652\":1,\"653\":1,\"654\":1,\"655\":1,\"656\":2,\"657\":1,\"658\":1,\"659\":1,\"676\":1,\"704\":1,\"730\":1,\"760\":1,\"812\":1,\"878\":1,\"886\":1,\"897\":1,\"911\":1,\"924\":1,\"942\":1,\"943\":1,\"944\":1,\"945\":1,\"946\":1,\"948\":1,\"949\":1,\"950\":1,\"951\":1,\"952\":1,\"953\":1,\"954\":1,\"955\":1,\"956\":1,\"957\":1,\"958\":1,\"984\":1},\"1\":{\"6\":1,\"70\":1,\"72\":1,\"311\":1,\"317\":1,\"320\":1,\"370\":4,\"371\":1,\"429\":1,\"431\":1,\"438\":2,\"439\":1,\"467\":1,\"482\":2,\"491\":1,\"494\":1,\"497\":1,\"499\":3,\"504\":1,\"508\":2,\"509\":1,\"513\":3,\"519\":2,\"523\":2,\"528\":1,\"529\":1,\"532\":3,\"550\":1,\"551\":3,\"553\":3,\"556\":1,\"557\":3,\"558\":1,\"561\":7,\"562\":1,\"563\":7,\"564\":5,\"565\":3,\"566\":2,\"567\":2,\"568\":4,\"570\":3,\"571\":4,\"572\":1,\"573\":3,\"574\":5,\"576\":1,\"577\":6,\"580\":3,\"581\":3,\"583\":1,\"585\":2,\"587\":1,\"590\":1,\"591\":1,\"592\":6,\"593\":1,\"611\":3,\"627\":3,\"628\":2,\"631\":1,\"644\":1,\"647\":4,\"655\":1,\"656\":1,\"662\":5,\"664\":2,\"675\":2,\"678\":1,\"682\":3,\"684\":2,\"689\":5,\"692\":3,\"707\":1,\"708\":2,\"832\":3,\"869\":1,\"874\":1}}],[\"tjva95orm7e2cbab30rmhrhdcefxjoyzgefonfh7hgq\",{\"1\":{\"845\":1,\"849\":1,\"858\":1}}],[\"tsx\",{\"1\":{\"750\":2}}],[\"tsc\",{\"1\":{\"749\":2}}],[\"ts\",{\"0\":{\"749\":1},\"1\":{\"749\":1,\"750\":1}}],[\"tn\",{\"1\":{\"651\":6,\"660\":3}}],[\"tttype\",{\"1\":{\"645\":2}}],[\"tt\",{\"1\":{\"645\":4,\"660\":4,\"689\":9}}],[\"ttheader\",{\"1\":{\"462\":2}}],[\"txt版本中\",{\"1\":{\"867\":1}}],[\"txt\",{\"1\":{\"642\":1,\"662\":1,\"678\":4,\"680\":2,\"689\":2,\"725\":1}}],[\"tmp\",{\"1\":{\"620\":2}}],[\"tp\",{\"1\":{\"545\":1}}],[\"tz\",{\"1\":{\"530\":6,\"660\":2}}],[\"tb\",{\"1\":{\"513\":1,\"525\":1}}],[\"tup\",{\"1\":{\"759\":3}}],[\"tuple\",{\"0\":{\"759\":1}}],[\"tue\",{\"1\":{\"662\":1}}],[\"tuesday\",{\"1\":{\"513\":2,\"609\":1,\"662\":6,\"670\":2}}],[\"tu\",{\"1\":{\"660\":1}}],[\"tutorial\",{\"1\":{\"636\":1}}],[\"tunny\",{\"1\":{\"424\":2}}],[\"two2\",{\"1\":{\"651\":2,\"653\":2}}],[\"two1\",{\"1\":{\"651\":5,\"660\":15}}],[\"twoints\",{\"1\":{\"651\":5,\"653\":2,\"660\":5}}],[\"twoadder\",{\"1\":{\"574\":2}}],[\"twopi\",{\"1\":{\"519\":2}}],[\"two\",{\"1\":{\"513\":1,\"605\":5,\"699\":1}}],[\"twitterstream\",{\"1\":{\"637\":1}}],[\"twitter\",{\"1\":{\"257\":1,\"469\":1,\"637\":1,\"638\":1,\"683\":1,\"686\":1}}],[\"tdef\",{\"1\":{\"660\":2}}],[\"tdm\",{\"1\":{\"485\":1}}],[\"tddl\",{\"1\":{\"251\":1}}],[\"t是否实现了x\",{\"1\":{\"340\":1}}],[\"t2\",{\"1\":{\"238\":8,\"509\":1}}],[\"t1\",{\"1\":{\"238\":8,\"509\":1}}],[\"those\",{\"1\":{\"709\":1}}],[\"though\",{\"1\":{\"667\":1}}],[\"thompson\",{\"1\":{\"469\":2,\"481\":1}}],[\"thu\",{\"1\":{\"662\":1}}],[\"thursday\",{\"1\":{\"513\":2,\"662\":6,\"670\":1}}],[\"th\",{\"1\":{\"534\":3}}],[\"that\",{\"1\":{\"508\":2,\"640\":1,\"662\":2,\"688\":1,\"689\":2,\"709\":2}}],[\"than\",{\"1\":{\"365\":1,\"549\":4}}],[\"things\",{\"1\":{\"662\":1}}],[\"thingtwo\",{\"1\":{\"643\":3}}],[\"thingone\",{\"1\":{\"643\":3}}],[\"thing\",{\"1\":{\"506\":5,\"645\":2,\"653\":2}}],[\"this\",{\"1\":{\"42\":2,\"365\":1,\"383\":1,\"513\":1,\"534\":2,\"553\":6,\"559\":3,\"561\":1,\"566\":1,\"572\":1,\"576\":1,\"577\":1,\"610\":1,\"638\":2,\"651\":2,\"662\":3,\"669\":1,\"673\":6,\"686\":3,\"689\":2,\"692\":1,\"709\":2,\"763\":1,\"766\":1,\"772\":2}}],[\"throw\",{\"1\":{\"765\":1}}],[\"through\",{\"1\":{\"662\":2,\"670\":1,\"673\":4}}],[\"threevalues\",{\"1\":{\"565\":3}}],[\"thread\",{\"1\":{\"409\":1,\"694\":1}}],[\"thrift\",{\"1\":{\"462\":8}}],[\"them\",{\"1\":{\"651\":2}}],[\"there\",{\"1\":{\"539\":4,\"559\":1,\"568\":1,\"645\":2,\"677\":1,\"689\":1}}],[\"the\",{\"0\":{\"850\":1,\"851\":1},\"1\":{\"205\":1,\"328\":1,\"365\":5,\"483\":1,\"508\":2,\"515\":6,\"517\":1,\"523\":3,\"524\":1,\"530\":2,\"532\":2,\"534\":2,\"536\":12,\"539\":2,\"540\":6,\"543\":9,\"545\":7,\"546\":1,\"547\":10,\"549\":3,\"550\":3,\"553\":10,\"555\":7,\"557\":4,\"558\":1,\"565\":4,\"567\":6,\"568\":11,\"572\":2,\"574\":3,\"583\":7,\"585\":14,\"587\":5,\"592\":13,\"608\":3,\"610\":2,\"611\":1,\"638\":6,\"640\":19,\"645\":4,\"651\":6,\"656\":4,\"662\":16,\"663\":6,\"664\":1,\"669\":3,\"670\":3,\"676\":2,\"677\":3,\"678\":6,\"682\":3,\"686\":17,\"688\":5,\"689\":19,\"697\":3,\"704\":2,\"705\":2,\"708\":1,\"709\":10}}],[\"then\",{\"1\":{\"163\":4,\"199\":4,\"306\":2,\"365\":2}}],[\"task\",{\"1\":{\"676\":6}}],[\"tail\",{\"1\":{\"640\":1}}],[\"takeapicture\",{\"1\":{\"657\":3}}],[\"take\",{\"1\":{\"547\":2,\"669\":1}}],[\"targ=even\",{\"1\":{\"689\":1}}],[\"targ=github\",{\"1\":{\"636\":1}}],[\"targ=ucmain\",{\"1\":{\"631\":1}}],[\"targ=uc\",{\"1\":{\"631\":1,\"636\":1}}],[\"targ=pack1\",{\"1\":{\"627\":1}}],[\"targ=rand\",{\"1\":{\"501\":1}}],[\"target\",{\"1\":{\"559\":3,\"680\":1}}],[\"tar\",{\"1\":{\"483\":3,\"614\":1}}],[\"tao\",{\"1\":{\"476\":1}}],[\"taylor\",{\"1\":{\"469\":1}}],[\"tab\",{\"1\":{\"383\":2,\"384\":1,\"390\":3,\"481\":1,\"496\":5,\"532\":1,\"549\":1}}],[\"table\",{\"0\":{\"96\":1},\"1\":{\"51\":2,\"72\":6,\"73\":3,\"82\":1,\"97\":2,\"98\":2,\"100\":1,\"101\":1,\"102\":1,\"109\":2,\"110\":1,\"111\":1,\"112\":3,\"119\":1,\"121\":1,\"154\":1,\"167\":2,\"168\":1,\"190\":1,\"203\":2,\"204\":1,\"231\":1,\"284\":1,\"363\":1,\"662\":1,\"689\":1}}],[\"tags\",{\"1\":{\"645\":1}}],[\"tagtype\",{\"1\":{\"645\":3}}],[\"tag是啥\",{\"1\":{\"328\":1}}],[\"tag=\",{\"1\":{\"268\":2}}],[\"tag\",{\"0\":{\"328\":1},\"1\":{\"268\":9,\"328\":1,\"645\":4,\"782\":3}}],[\"tan\",{\"1\":{\"149\":1,\"182\":1}}],[\"temporary\",{\"1\":{\"688\":2}}],[\"template\",{\"1\":{\"467\":1,\"623\":2,\"638\":5,\"689\":2}}],[\"telephone\",{\"1\":{\"611\":1}}],[\"ten\",{\"1\":{\"605\":3}}],[\"tencent\",{\"1\":{\"361\":1}}],[\"termination\",{\"1\":{\"568\":1}}],[\"terminate\",{\"1\":{\"568\":1}}],[\"techtalk\",{\"1\":{\"469\":1}}],[\"textpad\",{\"1\":{\"491\":1}}],[\"textmate\",{\"1\":{\"491\":1}}],[\"textwrangler\",{\"1\":{\"491\":1}}],[\"text\",{\"1\":{\"221\":1,\"301\":1,\"491\":2,\"623\":2,\"638\":3,\"682\":1}}],[\"teddy\",{\"1\":{\"133\":1}}],[\"testnum\",{\"1\":{\"689\":2}}],[\"testodd\",{\"1\":{\"689\":1}}],[\"testeven\",{\"1\":{\"689\":4}}],[\"testelement\",{\"1\":{\"608\":1}}],[\"testarrayprinter\",{\"1\":{\"689\":2}}],[\"testabcde\",{\"1\":{\"689\":1}}],[\"testpayemployees\",{\"1\":{\"689\":1}}],[\"testflagparser\",{\"1\":{\"689\":2}}],[\"testfmtinterface\",{\"1\":{\"689\":1}}],[\"testfunction\",{\"1\":{\"689\":3}}],[\"testfunc\",{\"1\":{\"663\":2}}],[\"testzzz\",{\"1\":{\"689\":2}}],[\"testzipfiles\",{\"1\":{\"342\":1}}],[\"testuc\",{\"1\":{\"631\":1}}],[\"test1\",{\"1\":{\"627\":3}}],[\"testcase\",{\"1\":{\"689\":2}}],[\"testcrash\",{\"1\":{\"547\":1}}],[\"testcontroller\",{\"1\":{\"456\":1}}],[\"tests=1\",{\"1\":{\"483\":1}}],[\"tests\",{\"1\":{\"483\":1,\"689\":3}}],[\"testservice\",{\"1\":{\"456\":1}}],[\"testmodel\",{\"1\":{\"456\":1}}],[\"testing\",{\"1\":{\"342\":2,\"631\":2,\"689\":14,\"691\":1}}],[\"testxxx\",{\"1\":{\"342\":1}}],[\"test\",{\"0\":{\"630\":1,\"691\":1},\"1\":{\"51\":2,\"320\":1,\"340\":1,\"342\":2,\"449\":3,\"498\":1,\"504\":1,\"627\":1,\"628\":1,\"631\":5,\"635\":1,\"638\":1,\"642\":1,\"662\":1,\"677\":2,\"680\":4,\"682\":2,\"686\":1,\"689\":25,\"691\":3}}],[\"tcc\",{\"1\":{\"251\":1}}],[\"tcl\",{\"0\":{\"89\":1},\"1\":{\"89\":2}}],[\"tcp\",{\"1\":{\"56\":1,\"517\":1,\"559\":1}}],[\"title\",{\"1\":{\"680\":4}}],[\"tideland\",{\"1\":{\"629\":6}}],[\"tip\",{\"1\":{\"483\":1}}],[\"tips中已经没有了\",{\"1\":{\"362\":1}}],[\"tiobe\",{\"1\":{\"469\":1}}],[\"ticker\",{\"1\":{\"438\":1,\"546\":1,\"623\":3,\"662\":1}}],[\"tinyint\",{\"1\":{\"72\":8,\"73\":3,\"102\":1,\"112\":1}}],[\"time声明在语义上对应于openid\",{\"1\":{\"869\":1}}],[\"time作为essential\",{\"1\":{\"869\":1}}],[\"timeout\",{\"1\":{\"688\":2}}],[\"timeobj5\",{\"1\":{\"620\":2}}],[\"timeobj4\",{\"1\":{\"619\":2}}],[\"timeobj3\",{\"1\":{\"618\":3}}],[\"timeobj2\",{\"1\":{\"617\":3}}],[\"timeobj\",{\"1\":{\"616\":4}}],[\"time包中定义的时间间隔类型的常量如下\",{\"1\":{\"621\":1}}],[\"timestr2\",{\"1\":{\"620\":2}}],[\"timestr\",{\"1\":{\"619\":2}}],[\"times\",{\"1\":{\"546\":2}}],[\"timens\",{\"1\":{\"528\":2}}],[\"time\",{\"0\":{\"615\":1,\"616\":1},\"1\":{\"12\":2,\"35\":3,\"148\":1,\"167\":3,\"181\":1,\"203\":3,\"328\":1,\"394\":2,\"424\":5,\"427\":6,\"438\":1,\"528\":2,\"546\":20,\"576\":4,\"577\":4,\"614\":2,\"616\":1,\"617\":1,\"618\":1,\"619\":1,\"620\":2,\"621\":2,\"622\":4,\"623\":6,\"627\":1,\"651\":15,\"660\":1,\"689\":2,\"690\":1,\"697\":5,\"700\":5,\"701\":1,\"707\":2,\"708\":2,\"869\":2,\"873\":1,\"887\":2}}],[\"t\",{\"1\":{\"51\":2,\"164\":1,\"200\":1,\"235\":2,\"340\":2,\"342\":3,\"388\":2,\"485\":1,\"494\":1,\"506\":1,\"510\":3,\"521\":11,\"525\":2,\"532\":1,\"534\":3,\"545\":1,\"546\":21,\"550\":4,\"551\":3,\"553\":1,\"556\":2,\"557\":1,\"561\":1,\"569\":5,\"570\":3,\"573\":1,\"587\":1,\"588\":8,\"593\":5,\"597\":1,\"601\":4,\"608\":1,\"622\":1,\"631\":3,\"640\":20,\"642\":2,\"651\":7,\"653\":5,\"660\":12,\"662\":30,\"663\":11,\"667\":1,\"670\":7,\"675\":3,\"679\":1,\"682\":3,\"684\":1,\"686\":9,\"689\":46,\"709\":1,\"770\":2,\"782\":1}}],[\"typing\",{\"1\":{\"671\":1}}],[\"typ\",{\"1\":{\"34\":1,\"383\":1,\"670\":3,\"845\":1,\"849\":1,\"850\":2,\"858\":1}}],[\"type响应参数值必须是承载型\",{\"1\":{\"883\":1}}],[\"type响应类型\",{\"1\":{\"868\":1}}],[\"type值authorization\",{\"1\":{\"881\":1}}],[\"type值选择以下流\",{\"1\":{\"869\":1}}],[\"type值决定\",{\"1\":{\"869\":1}}],[\"type授权类型\",{\"1\":{\"868\":1}}],[\"typeobj\",{\"1\":{\"661\":3}}],[\"typeoft\",{\"1\":{\"670\":2}}],[\"typeof\",{\"1\":{\"328\":1,\"645\":2,\"668\":4,\"670\":1}}],[\"type=authorization\",{\"1\":{\"881\":1}}],[\"type=code\",{\"1\":{\"873\":2}}],[\"type=id\",{\"1\":{\"869\":2}}],[\"type=\",{\"1\":{\"638\":6,\"869\":1}}],[\"type=single\",{\"1\":{\"6\":1}}],[\"typecheck\",{\"1\":{\"567\":1}}],[\"typefunc\",{\"1\":{\"509\":2}}],[\"typeb\",{\"1\":{\"509\":2,\"511\":1}}],[\"typea\",{\"1\":{\"509\":2}}],[\"type2\",{\"1\":{\"507\":2,\"509\":1,\"567\":1,\"640\":1,\"689\":4}}],[\"type1\",{\"1\":{\"507\":2,\"509\":1,\"567\":1,\"640\":1,\"689\":4}}],[\"typeswitch\",{\"1\":{\"663\":2}}],[\"types\",{\"1\":{\"205\":1,\"628\":1,\"639\":2,\"662\":1,\"670\":1}}],[\"typescript具有readonlyarray<\",{\"1\":{\"770\":1}}],[\"typescript的核心原则之一是对值所具有的结构进行类型检查\",{\"1\":{\"767\":1}}],[\"typescript里的所有数字都是浮点数\",{\"1\":{\"756\":1}}],[\"typescript编译和运行\",{\"0\":{\"748\":1}}],[\"typescript\",{\"0\":{\"747\":1},\"1\":{\"78\":1,\"459\":1,\"983\":1},\"2\":{\"774\":1}}],[\"type\",{\"1\":{\"18\":4,\"21\":4,\"42\":1,\"167\":1,\"203\":1,\"264\":1,\"314\":1,\"315\":3,\"316\":2,\"328\":2,\"338\":2,\"340\":2,\"364\":1,\"365\":2,\"383\":16,\"389\":1,\"390\":3,\"398\":2,\"504\":1,\"506\":2,\"509\":3,\"510\":1,\"513\":2,\"515\":2,\"523\":5,\"525\":2,\"530\":3,\"547\":2,\"551\":1,\"561\":2,\"567\":3,\"569\":2,\"572\":1,\"573\":5,\"580\":1,\"581\":1,\"582\":1,\"585\":3,\"587\":4,\"590\":1,\"592\":1,\"605\":1,\"611\":1,\"625\":2,\"628\":6,\"631\":1,\"639\":1,\"640\":24,\"642\":2,\"643\":3,\"644\":1,\"645\":1,\"647\":2,\"648\":2,\"649\":4,\"651\":7,\"652\":1,\"653\":4,\"654\":1,\"655\":5,\"656\":4,\"657\":5,\"659\":3,\"660\":3,\"662\":65,\"663\":19,\"664\":2,\"665\":2,\"666\":1,\"667\":4,\"668\":13,\"669\":4,\"670\":11,\"671\":4,\"672\":2,\"673\":4,\"674\":2,\"676\":9,\"680\":1,\"682\":9,\"684\":3,\"685\":1,\"686\":10,\"687\":1,\"688\":5,\"689\":1,\"703\":1,\"705\":1,\"707\":2,\"868\":1,\"869\":1,\"873\":1,\"878\":1,\"881\":1,\"883\":2,\"884\":1,\"892\":1}}],[\"tracing2\",{\"1\":{\"568\":1}}],[\"tracing\",{\"1\":{\"568\":1}}],[\"trace\",{\"1\":{\"568\":7}}],[\"trans\",{\"1\":{\"519\":5}}],[\"transaction\",{\"1\":{\"89\":1,\"151\":5,\"187\":5,\"237\":2}}],[\"transact\",{\"1\":{\"83\":1}}],[\"transport\",{\"1\":{\"6\":4}}],[\"tripoli\",{\"1\":{\"700\":2,\"709\":2}}],[\"triangle\",{\"1\":{\"662\":1}}],[\"trimright\",{\"1\":{\"541\":1}}],[\"trimleft\",{\"1\":{\"541\":1}}],[\"trim\",{\"1\":{\"541\":1}}],[\"trimspace\",{\"1\":{\"541\":1}}],[\"triggers\",{\"1\":{\"167\":1,\"203\":1}}],[\"trigger\",{\"1\":{\"167\":13,\"203\":13}}],[\"trk=myg\",{\"1\":{\"469\":1}}],[\"tree\",{\"1\":{\"214\":2,\"215\":4,\"483\":1,\"640\":3}}],[\"try\",{\"1\":{\"42\":1,\"687\":2}}],[\"trunc\",{\"1\":{\"680\":1}}],[\"truncate\",{\"0\":{\"273\":1},\"1\":{\"119\":1,\"121\":1,\"273\":2}}],[\"truststore\",{\"1\":{\"6\":2}}],[\"true\",{\"1\":{\"6\":3,\"35\":1,\"46\":1,\"56\":1,\"84\":1,\"129\":1,\"168\":1,\"204\":1,\"504\":1,\"509\":1,\"521\":16,\"525\":2,\"526\":1,\"534\":1,\"549\":6,\"550\":3,\"551\":2,\"556\":2,\"570\":3,\"572\":2,\"600\":1,\"608\":2,\"624\":1,\"645\":1,\"662\":2,\"668\":1,\"669\":2,\"682\":4,\"689\":1,\"705\":1,\"709\":1,\"725\":1,\"731\":2,\"755\":1,\"765\":1,\"845\":1,\"849\":1,\"851\":1,\"858\":1}}],[\"todo\",{\"1\":{\"664\":1}}],[\"tostring\",{\"1\":{\"658\":1,\"725\":1,\"731\":1}}],[\"tokio\",{\"1\":{\"709\":2}}],[\"tokyo\",{\"1\":{\"609\":1,\"700\":2}}],[\"token时\",{\"1\":{\"892\":1}}],[\"token或id\",{\"1\":{\"892\":1}}],[\"token或response\",{\"1\":{\"869\":1}}],[\"token值\",{\"1\":{\"886\":1}}],[\"token值的ascii表示的八字节哈希的最左半部分的base64url编码\",{\"1\":{\"886\":1}}],[\"token的内容如第2节所述\",{\"1\":{\"886\":1}}],[\"token的外观如下\",{\"1\":{\"845\":1}}],[\"token验证规则\",{\"1\":{\"885\":1}}],[\"token成功响应\",{\"0\":{\"883\":1,\"921\":1}}],[\"token中使用了以下要求\",{\"1\":{\"869\":1}}],[\"token表示为json\",{\"1\":{\"869\":1}}],[\"token是一个安全令牌\",{\"1\":{\"869\":1}}],[\"token数据结构\",{\"1\":{\"869\":1}}],[\"token刷新令牌\",{\"1\":{\"868\":1}}],[\"tokens\",{\"1\":{\"39\":1,\"481\":1}}],[\"token=xxx\",{\"1\":{\"37\":1}}],[\"token=secretkey012345678901234567890123456789012345678901234567890123456789\",{\"1\":{\"4\":2}}],[\"token一起发送给服务器\",{\"1\":{\"30\":1}}],[\"token\",{\"0\":{\"24\":1,\"843\":1,\"845\":1,\"849\":1,\"880\":1,\"881\":1,\"886\":1,\"887\":1},\"1\":{\"6\":1,\"25\":1,\"26\":1,\"30\":2,\"37\":1,\"39\":1,\"556\":2,\"686\":19,\"782\":1,\"844\":1,\"853\":1,\"866\":2,\"868\":5,\"869\":10,\"873\":2,\"874\":1,\"881\":1,\"883\":6,\"887\":1,\"892\":3},\"2\":{\"40\":1,\"862\":1}}],[\"too\",{\"1\":{\"657\":2}}],[\"took\",{\"1\":{\"576\":1,\"577\":1}}],[\"tool\",{\"1\":{\"320\":1}}],[\"tools\",{\"1\":{\"39\":1}}],[\"tolower\",{\"1\":{\"540\":3}}],[\"tobject\",{\"1\":{\"502\":1}}],[\"tornado\",{\"1\":{\"499\":1}}],[\"tony\",{\"1\":{\"471\":1}}],[\"toupper\",{\"1\":{\"540\":4,\"631\":1,\"640\":2}}],[\"tour\",{\"1\":{\"469\":3}}],[\"touch\",{\"1\":{\"1\":1,\"2\":1,\"4\":1,\"873\":1}}],[\"together\",{\"1\":{\"365\":2,\"709\":1}}],[\"total\",{\"1\":{\"168\":5,\"204\":5,\"689\":1,\"692\":2}}],[\"top5\",{\"1\":{\"692\":2}}],[\"topn\",{\"1\":{\"692\":1}}],[\"topological\",{\"1\":{\"673\":3}}],[\"topologicalgenus\",{\"1\":{\"673\":3}}],[\"topgen\",{\"1\":{\"673\":6}}],[\"topgoer\",{\"1\":{\"325\":1,\"363\":1,\"393\":1,\"397\":1,\"407\":1,\"416\":2,\"428\":2}}],[\"topbits\",{\"1\":{\"365\":2}}],[\"tophash\",{\"1\":{\"365\":5}}],[\"top\",{\"1\":{\"104\":1,\"105\":1,\"365\":1,\"568\":2,\"628\":6,\"676\":1,\"692\":1,\"696\":1}}],[\"to\",{\"1\":{\"51\":3,\"52\":1,\"78\":1,\"151\":2,\"159\":1,\"187\":2,\"195\":1,\"220\":2,\"362\":1,\"365\":1,\"383\":1,\"483\":1,\"508\":2,\"515\":3,\"517\":1,\"549\":2,\"551\":4,\"568\":2,\"574\":1,\"580\":1,\"583\":4,\"592\":1,\"598\":1,\"627\":2,\"628\":1,\"638\":2,\"640\":1,\"643\":1,\"651\":2,\"654\":1,\"655\":1,\"658\":1,\"662\":6,\"663\":2,\"664\":1,\"667\":1,\"670\":1,\"672\":2,\"678\":1,\"684\":1,\"686\":6,\"689\":4,\"692\":2,\"697\":4,\"705\":2,\"709\":6,\"828\":1}}],[\"toml\",{\"0\":{\"19\":1}}],[\"时将添加一个\",{\"1\":{\"682\":1}}],[\"时传入的第三个参数可以用\",{\"1\":{\"680\":1}}],[\"时会导致一个编译器错误\",{\"1\":{\"662\":1}}],[\"时该怎么办呢\",{\"1\":{\"649\":1}}],[\"时要特别谨慎\",{\"1\":{\"643\":1}}],[\"时特别有用\",{\"1\":{\"640\":1}}],[\"时测试通过\",{\"1\":{\"631\":1}}],[\"时应当直接停止对调\",{\"1\":{\"612\":1}}],[\"时被移除\",{\"1\":{\"556\":1}}],[\"时便终止\",{\"1\":{\"553\":1}}],[\"时函数也会被调用\",{\"1\":{\"551\":1}}],[\"时函数不会被调用\",{\"1\":{\"551\":1}}],[\"时才会进入分支\",{\"1\":{\"551\":1}}],[\"时长为\",{\"1\":{\"546\":1}}],[\"时使用\",{\"1\":{\"525\":1,\"573\":1}}],[\"时就会出现错误提示\",{\"1\":{\"507\":1}}],[\"时下流行的语言大都是运行在虚拟机上\",{\"1\":{\"499\":1}}],[\"时所有被调用函数的列表\",{\"1\":{\"494\":1}}],[\"时远程包将会被安装在第一个目录下\",{\"1\":{\"483\":1}}],[\"时有多少种不同的模式\",{\"1\":{\"467\":1}}],[\"时延上均具有一定优势\",{\"1\":{\"461\":1}}],[\"时候\",{\"1\":{\"438\":1}}],[\"时候发生系统调用或者阻塞\",{\"1\":{\"409\":1}}],[\"时间的秒数\",{\"1\":{\"869\":3}}],[\"时间之前\",{\"1\":{\"869\":1}}],[\"时间必须在值中列出的过期日期\",{\"1\":{\"869\":1}}],[\"时间\",{\"1\":{\"852\":3}}],[\"时间和特别utc的详细信息\",{\"1\":{\"869\":1}}],[\"时间和内存消耗\",{\"0\":{\"690\":1}}],[\"时间和日期是我们编程中经常会用到的\",{\"1\":{\"615\":1}}],[\"时间和日期\",{\"0\":{\"546\":1}}],[\"时间差\",{\"1\":{\"622\":1}}],[\"时间相加\",{\"1\":{\"622\":1}}],[\"时间操作函数\",{\"0\":{\"622\":1}}],[\"时间间隔\",{\"0\":{\"621\":1},\"1\":{\"623\":1,\"640\":1}}],[\"时间戳转换年月日时分秒\",{\"1\":{\"619\":1}}],[\"时间戳转日期字符串\",{\"0\":{\"619\":1}}],[\"时间戳是自1070年1月1日\",{\"1\":{\"618\":1}}],[\"时间类型有一个自带的方法\",{\"1\":{\"617\":2}}],[\"时间轴\",{\"1\":{\"469\":1}}],[\"时间周期以runtime\",{\"1\":{\"432\":1}}],[\"时间格式\",{\"1\":{\"148\":1,\"181\":1}}],[\"时机\",{\"0\":{\"431\":1}}],[\"时用\",{\"1\":{\"306\":1}}],[\"时很可能需要更新索引\",{\"1\":{\"210\":1}}],[\"时\",{\"1\":{\"6\":1,\"148\":1,\"181\":1,\"247\":1,\"306\":1,\"389\":1,\"432\":1,\"501\":1,\"516\":1,\"547\":1,\"549\":1,\"551\":1,\"677\":1,\"696\":1}}],[\"1和章节10\",{\"1\":{\"885\":1}}],[\"1和7\",{\"1\":{\"869\":1}}],[\"1中定义的注册参数\",{\"1\":{\"878\":1}}],[\"1中定义的错误码外\",{\"1\":{\"878\":1}}],[\"1节中定义的错误响应参数通知rp\",{\"1\":{\"878\":1}}],[\"1节中定义的那样\",{\"1\":{\"873\":1}}],[\"1节中描述的那样请求特定的claim\",{\"1\":{\"874\":1}}],[\"1节\",{\"1\":{\"873\":1}}],[\"1节的描述进行匹配\",{\"1\":{\"873\":1,\"892\":1}}],[\"1st\",{\"1\":{\"689\":4}}],[\"1simple\",{\"1\":{\"662\":1}}],[\"1下不再有效\",{\"1\":{\"661\":1}}],[\"1vcard\",{\"1\":{\"640\":1}}],[\"1q20\",{\"1\":{\"623\":1}}],[\"1map\",{\"1\":{\"609\":1}}],[\"1b\",{\"1\":{\"550\":1}}],[\"1<<\",{\"1\":{\"525\":1}}],[\"1int\",{\"1\":{\"523\":1}}],[\"1e6\",{\"1\":{\"573\":1}}],[\"1e23\",{\"1\":{\"523\":1}}],[\"1e3\",{\"1\":{\"523\":1}}],[\"1e308\",{\"1\":{\"523\":1}}],[\"1e38\",{\"1\":{\"523\":1}}],[\"1e\",{\"1\":{\"523\":2}}],[\"1e9\",{\"1\":{\"513\":1,\"546\":1,\"697\":4,\"700\":2,\"701\":1,\"707\":1,\"708\":1}}],[\"1ab\",{\"1\":{\"504\":1}}],[\"1cmee076rjgk7\",{\"1\":{\"428\":1}}],[\"1cmee0q64ij5p\",{\"1\":{\"325\":1}}],[\"1cmeduvk27bo0\",{\"1\":{\"407\":1}}],[\"199\",{\"1\":{\"709\":1,\"832\":28}}],[\"197\",{\"1\":{\"709\":1}}],[\"193\",{\"1\":{\"709\":1}}],[\"191\",{\"1\":{\"709\":1}}],[\"1956\",{\"1\":{\"626\":3}}],[\"1951252986\",{\"1\":{\"528\":1}}],[\"1920\",{\"1\":{\"582\":1}}],[\"19\",{\"0\":{\"341\":1,\"714\":1,\"825\":1},\"1\":{\"467\":1,\"545\":1,\"553\":1,\"557\":1,\"626\":1,\"638\":2,\"656\":1,\"682\":1,\"686\":1,\"709\":1}}],[\"17节\",{\"1\":{\"872\":1,\"880\":1}}],[\"179\",{\"1\":{\"709\":1}}],[\"173\",{\"1\":{\"709\":1}}],[\"177\",{\"1\":{\"686\":1}}],[\"17main\",{\"1\":{\"661\":1}}],[\"17map\",{\"1\":{\"602\":1}}],[\"176568075500134360255254120680009\",{\"1\":{\"513\":1}}],[\"17\",{\"0\":{\"339\":1,\"712\":1,\"823\":1},\"1\":{\"540\":1,\"553\":1,\"557\":1,\"570\":3,\"577\":1,\"654\":1,\"662\":1,\"673\":1,\"676\":1,\"686\":1,\"697\":1,\"699\":1,\"709\":1}}],[\"167\",{\"1\":{\"709\":1}}],[\"1642640kb\",{\"1\":{\"690\":1}}],[\"166\",{\"1\":{\"686\":1}}],[\"169\",{\"1\":{\"686\":1}}],[\"16stack\",{\"1\":{\"660\":1}}],[\"16bubblesort\",{\"1\":{\"602\":1}}],[\"1654146165\",{\"1\":{\"528\":1}}],[\"16182001\",{\"1\":{\"344\":1}}],[\"16\",{\"0\":{\"338\":1,\"711\":1,\"822\":1},\"1\":{\"523\":4,\"528\":1,\"531\":6,\"539\":1,\"553\":1,\"557\":1,\"570\":3,\"573\":2,\"581\":2,\"606\":1,\"611\":3,\"612\":2,\"644\":2,\"654\":1,\"661\":1,\"671\":1,\"676\":1,\"682\":1,\"683\":1,\"689\":5}}],[\"163\",{\"1\":{\"115\":1,\"116\":1,\"151\":2,\"187\":2,\"709\":1}}],[\"1nf\",{\"0\":{\"290\":1},\"1\":{\"289\":1}}],[\"154\",{\"1\":{\"832\":4}}],[\"157\",{\"1\":{\"709\":1}}],[\"151\",{\"1\":{\"709\":1}}],[\"152\",{\"1\":{\"686\":1}}],[\"155\",{\"1\":{\"686\":1}}],[\"15585467\",{\"0\":{\"335\":1}}],[\"15timezones\",{\"1\":{\"660\":1}}],[\"1595289901\",{\"1\":{\"619\":1}}],[\"1597\",{\"1\":{\"570\":1}}],[\"15表示二十四小时\",{\"1\":{\"617\":1}}],[\"15点04分\",{\"1\":{\"617\":2}}],[\"15q29\",{\"1\":{\"602\":1}}],[\"150\",{\"1\":{\"469\":1,\"614\":1,\"678\":1}}],[\"1500\",{\"1\":{\"271\":1,\"278\":2,\"678\":1}}],[\"15字口诀\",{\"0\":{\"400\":1}}],[\"1539049\",{\"1\":{\"361\":1}}],[\"15\",{\"0\":{\"337\":1,\"710\":1,\"821\":1},\"1\":{\"235\":1,\"467\":1,\"515\":4,\"517\":1,\"523\":2,\"525\":1,\"538\":1,\"546\":4,\"553\":1,\"554\":1,\"557\":3,\"559\":2,\"580\":1,\"581\":2,\"587\":1,\"617\":1,\"619\":1,\"620\":1,\"623\":2,\"626\":1,\"638\":1,\"640\":5,\"651\":1,\"654\":1,\"662\":1,\"670\":1,\"673\":1,\"680\":1,\"682\":5,\"683\":1,\"686\":2,\"687\":2,\"688\":1,\"689\":3,\"692\":1,\"693\":1,\"701\":1}}],[\"15672\",{\"1\":{\"3\":2}}],[\"185\",{\"1\":{\"832\":28}}],[\"18528\",{\"1\":{\"689\":1}}],[\"181\",{\"1\":{\"709\":1}}],[\"180\",{\"1\":{\"689\":1}}],[\"187\",{\"1\":{\"686\":1}}],[\"18\",{\"0\":{\"340\":1,\"713\":1,\"824\":1},\"1\":{\"215\":2,\"467\":2,\"469\":1,\"476\":2,\"523\":1,\"543\":1,\"553\":1,\"557\":2,\"570\":3,\"581\":2,\"606\":1,\"624\":1,\"655\":1,\"670\":2,\"676\":1,\"686\":2,\"768\":1}}],[\"12中的验证规则\",{\"1\":{\"885\":1}}],[\"12和10\",{\"1\":{\"875\":1}}],[\"12type\",{\"1\":{\"660\":1}}],[\"12小时制\",{\"1\":{\"617\":1}}],[\"12split\",{\"1\":{\"602\":1}}],[\"12remove\",{\"1\":{\"593\":1}}],[\"127\",{\"1\":{\"523\":1,\"709\":1}}],[\"128\",{\"1\":{\"523\":1}}],[\"123765745\",{\"1\":{\"376\":1}}],[\"123\",{\"1\":{\"268\":1,\"756\":1,\"758\":6}}],[\"12345678901234567890\",{\"1\":{\"438\":1}}],[\"1234567890\",{\"1\":{\"35\":1,\"845\":1,\"849\":1,\"851\":1,\"858\":1}}],[\"123456\",{\"1\":{\"17\":1,\"20\":1,\"52\":1}}],[\"12\",{\"0\":{\"162\":1,\"163\":1,\"164\":1,\"333\":1,\"545\":1,\"577\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1,\"675\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":1,\"682\":1,\"766\":1,\"818\":1,\"917\":1},\"1\":{\"292\":1,\"467\":1,\"531\":1,\"546\":1,\"551\":2,\"553\":1,\"557\":3,\"558\":1,\"561\":2,\"568\":2,\"570\":1,\"571\":1,\"593\":1,\"611\":3,\"612\":2,\"623\":1,\"651\":2,\"660\":4,\"662\":4,\"669\":1,\"670\":1,\"676\":2,\"677\":7,\"678\":6,\"679\":1,\"680\":6,\"681\":2,\"682\":8,\"683\":1,\"686\":11,\"687\":1,\"689\":3,\"770\":1,\"879\":1}}],[\"14节\",{\"1\":{\"869\":1}}],[\"140\",{\"1\":{\"832\":30}}],[\"149\",{\"1\":{\"709\":1}}],[\"148\",{\"1\":{\"689\":1}}],[\"145\",{\"1\":{\"686\":1}}],[\"143\",{\"1\":{\"686\":1}}],[\"14days\",{\"1\":{\"660\":1}}],[\"1415\",{\"1\":{\"669\":6}}],[\"141590\",{\"1\":{\"605\":1}}],[\"14159\",{\"1\":{\"513\":1,\"605\":1}}],[\"1416\",{\"1\":{\"626\":1}}],[\"14string\",{\"1\":{\"602\":1}}],[\"144\",{\"1\":{\"570\":1}}],[\"14439957\",{\"1\":{\"394\":1}}],[\"147\",{\"1\":{\"523\":2}}],[\"14\",{\"0\":{\"168\":1,\"336\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"820\":1},\"1\":{\"148\":1,\"181\":1,\"467\":1,\"482\":1,\"536\":2,\"546\":6,\"548\":1,\"553\":1,\"557\":1,\"559\":1,\"569\":1,\"570\":3,\"572\":1,\"573\":1,\"574\":3,\"625\":2,\"627\":1,\"643\":1,\"653\":1,\"654\":1,\"662\":1,\"670\":1,\"682\":1,\"689\":2,\"694\":2,\"697\":1,\"698\":1,\"699\":1,\"700\":3,\"701\":3,\"702\":1,\"703\":1,\"706\":1,\"707\":3,\"708\":3,\"709\":8}}],[\"109\",{\"1\":{\"709\":1,\"832\":7}}],[\"10946\",{\"1\":{\"570\":1}}],[\"10s\",{\"1\":{\"697\":1}}],[\"10min\",{\"1\":{\"664\":1}}],[\"10ms\",{\"1\":{\"411\":1}}],[\"1032\",{\"1\":{\"689\":1}}],[\"103\",{\"1\":{\"623\":1,\"692\":1,\"709\":1}}],[\"102\",{\"1\":{\"623\":1}}],[\"1024\",{\"1\":{\"354\":2,\"661\":2,\"678\":1}}],[\"108\",{\"1\":{\"832\":7}}],[\"1080\",{\"1\":{\"582\":1}}],[\"108567205\",{\"1\":{\"325\":1}}],[\"1013\",{\"1\":{\"709\":1}}],[\"101\",{\"1\":{\"557\":2,\"623\":1,\"709\":1}}],[\"101234\",{\"1\":{\"531\":1}}],[\"105\",{\"1\":{\"557\":1}}],[\"1053236\",{\"1\":{\"531\":1}}],[\"104\",{\"1\":{\"557\":1}}],[\"10496454\",{\"1\":{\"341\":1}}],[\"10inherit\",{\"1\":{\"657\":1}}],[\"10i\",{\"1\":{\"524\":2}}],[\"1073741783\",{\"1\":{\"689\":1}}],[\"1073741819\",{\"1\":{\"547\":1}}],[\"107\",{\"1\":{\"523\":1,\"709\":1}}],[\"107959381\",{\"1\":{\"456\":1}}],[\"106492915\",{\"1\":{\"426\":1}}],[\"10\",{\"0\":{\"151\":1,\"152\":1,\"153\":1,\"331\":1,\"376\":1,\"392\":1,\"543\":1,\"575\":1,\"637\":1,\"639\":1,\"640\":1,\"641\":1,\"642\":1,\"643\":1,\"644\":1,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"649\":1,\"650\":1,\"651\":1,\"652\":1,\"653\":1,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"668\":1,\"669\":1,\"670\":1,\"690\":1,\"691\":1,\"692\":1,\"708\":1,\"764\":1,\"816\":1,\"901\":1,\"915\":1,\"966\":1,\"967\":1,\"968\":1,\"969\":1},\"1\":{\"72\":1,\"73\":3,\"98\":1,\"104\":2,\"105\":1,\"112\":1,\"115\":1,\"168\":1,\"204\":1,\"220\":1,\"221\":2,\"235\":1,\"299\":1,\"388\":1,\"424\":2,\"438\":1,\"467\":1,\"469\":4,\"477\":1,\"487\":1,\"499\":4,\"509\":1,\"513\":9,\"516\":1,\"521\":4,\"523\":1,\"525\":3,\"526\":1,\"528\":5,\"530\":1,\"532\":1,\"546\":1,\"547\":2,\"549\":7,\"551\":4,\"553\":2,\"554\":2,\"557\":1,\"558\":2,\"561\":1,\"564\":3,\"566\":1,\"567\":1,\"568\":3,\"569\":1,\"570\":2,\"571\":2,\"572\":1,\"573\":1,\"574\":1,\"580\":1,\"581\":2,\"587\":6,\"588\":5,\"591\":2,\"592\":4,\"593\":3,\"602\":1,\"605\":1,\"620\":1,\"623\":1,\"640\":14,\"642\":1,\"643\":1,\"644\":4,\"645\":2,\"647\":5,\"648\":2,\"651\":7,\"653\":4,\"654\":2,\"655\":4,\"656\":3,\"657\":4,\"658\":1,\"659\":2,\"660\":11,\"661\":2,\"662\":9,\"666\":2,\"668\":1,\"670\":2,\"675\":1,\"676\":2,\"680\":2,\"682\":2,\"688\":1,\"689\":7,\"692\":1,\"697\":3,\"707\":1,\"709\":1,\"770\":1}}],[\"10053\",{\"1\":{\"828\":1}}],[\"1009\",{\"1\":{\"709\":1}}],[\"1000000\",{\"1\":{\"689\":1}}],[\"10000\",{\"1\":{\"267\":1,\"410\":1}}],[\"1000\",{\"1\":{\"246\":1,\"469\":1,\"523\":1,\"574\":2,\"689\":2,\"700\":1}}],[\"100\",{\"1\":{\"72\":3,\"73\":1,\"217\":1,\"247\":1,\"288\":1,\"291\":2,\"424\":1,\"438\":1,\"513\":1,\"528\":1,\"551\":5,\"554\":1,\"557\":1,\"573\":1,\"580\":1,\"587\":2,\"605\":1,\"606\":1,\"627\":1,\"655\":1,\"689\":3,\"692\":1,\"694\":1,\"703\":1,\"709\":2,\"770\":1}}],[\"1=禁用\",{\"1\":{\"72\":1}}],[\"1=已删除\",{\"1\":{\"72\":6,\"73\":3}}],[\"1`\",{\"1\":{\"72\":3,\"73\":2}}],[\"13节所述\",{\"1\":{\"875\":1}}],[\"133\",{\"1\":{\"832\":24}}],[\"139\",{\"1\":{\"709\":1}}],[\"137\",{\"1\":{\"709\":1}}],[\"1372544545\",{\"1\":{\"528\":1}}],[\"1311280969\",{\"1\":{\"869\":1}}],[\"1311280970\",{\"1\":{\"869\":1}}],[\"1311281970\",{\"1\":{\"869\":1}}],[\"131\",{\"1\":{\"709\":1}}],[\"135\",{\"1\":{\"686\":1}}],[\"13celsius\",{\"1\":{\"660\":1}}],[\"13string\",{\"1\":{\"602\":1}}],[\"1325201247\",{\"1\":{\"528\":1}}],[\"130\",{\"1\":{\"467\":1}}],[\"13\",{\"0\":{\"165\":1,\"166\":1,\"167\":1,\"334\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":1,\"691\":1,\"692\":1,\"819\":1},\"1\":{\"51\":1,\"467\":2,\"469\":1,\"477\":2,\"494\":1,\"498\":1,\"516\":1,\"523\":1,\"527\":1,\"534\":1,\"550\":1,\"553\":1,\"557\":1,\"558\":1,\"559\":1,\"562\":1,\"570\":3,\"580\":1,\"588\":1,\"595\":1,\"624\":1,\"627\":1,\"631\":1,\"653\":1,\"662\":2,\"670\":2,\"676\":2,\"677\":1,\"682\":1,\"687\":3,\"688\":2,\"689\":22,\"709\":1}}],[\"1\",{\"0\":{\"25\":1,\"28\":1,\"33\":1,\"37\":1,\"42\":1,\"81\":1,\"82\":2,\"83\":1,\"84\":2,\"85\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":1,\"90\":1,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"97\":1,\"104\":1,\"107\":1,\"114\":1,\"129\":1,\"136\":1,\"138\":1,\"145\":1,\"147\":1,\"152\":1,\"155\":1,\"163\":1,\"166\":1,\"303\":1,\"311\":1,\"322\":1,\"353\":1,\"358\":1,\"378\":1,\"394\":1,\"396\":1,\"409\":1,\"417\":1,\"424\":1,\"429\":1,\"438\":1,\"456\":1,\"468\":1,\"469\":2,\"470\":1,\"471\":2,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"481\":1,\"490\":1,\"492\":1,\"501\":1,\"504\":1,\"506\":1,\"515\":1,\"521\":1,\"523\":1,\"534\":1,\"549\":1,\"553\":1,\"561\":1,\"563\":1,\"579\":1,\"580\":2,\"581\":1,\"582\":1,\"583\":1,\"585\":1,\"595\":1,\"604\":1,\"605\":2,\"606\":1,\"607\":1,\"614\":1,\"631\":1,\"635\":1,\"640\":1,\"642\":1,\"647\":1,\"651\":1,\"663\":1,\"668\":1,\"671\":1,\"678\":1,\"681\":1,\"688\":2,\"689\":1,\"690\":1,\"694\":2,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"720\":1,\"722\":1,\"725\":1,\"736\":1,\"740\":1,\"744\":1,\"748\":1,\"749\":2,\"750\":1,\"752\":1,\"755\":1,\"768\":1,\"772\":1,\"777\":1,\"786\":1,\"788\":1,\"807\":1,\"836\":1,\"840\":1,\"844\":1,\"845\":2,\"846\":1,\"848\":1,\"850\":1,\"852\":1,\"858\":1,\"859\":2,\"860\":1,\"861\":1,\"864\":1,\"866\":1,\"867\":2,\"868\":1,\"869\":1,\"870\":1,\"871\":2,\"872\":1,\"873\":2,\"874\":1,\"875\":1,\"876\":1,\"877\":1,\"878\":1,\"879\":1,\"880\":1,\"881\":2,\"882\":1,\"883\":1,\"884\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":1,\"890\":1,\"892\":1,\"904\":1,\"906\":1,\"919\":1,\"928\":1,\"929\":2,\"930\":1,\"933\":1,\"939\":1,\"940\":2,\"943\":1,\"945\":1,\"948\":1,\"949\":2,\"951\":1,\"956\":1,\"959\":1,\"961\":1,\"965\":1,\"966\":1,\"967\":2,\"969\":1,\"973\":1,\"977\":1,\"979\":1},\"1\":{\"6\":1,\"63\":1,\"70\":2,\"72\":19,\"73\":8,\"136\":1,\"151\":1,\"166\":1,\"168\":1,\"186\":1,\"187\":1,\"202\":1,\"204\":1,\"220\":1,\"221\":1,\"226\":1,\"227\":3,\"246\":1,\"258\":2,\"288\":8,\"291\":14,\"292\":6,\"293\":1,\"299\":1,\"303\":7,\"311\":1,\"317\":1,\"318\":1,\"320\":1,\"322\":1,\"331\":1,\"335\":1,\"346\":3,\"353\":3,\"354\":3,\"362\":4,\"383\":2,\"394\":1,\"405\":1,\"411\":1,\"417\":1,\"418\":1,\"420\":3,\"421\":2,\"423\":1,\"424\":2,\"426\":1,\"427\":1,\"429\":3,\"430\":2,\"431\":1,\"432\":1,\"438\":2,\"439\":2,\"461\":1,\"463\":1,\"467\":1,\"469\":4,\"471\":1,\"474\":1,\"476\":3,\"481\":6,\"482\":4,\"483\":11,\"487\":1,\"492\":1,\"493\":1,\"495\":1,\"496\":1,\"499\":2,\"505\":1,\"507\":1,\"513\":20,\"515\":1,\"517\":1,\"518\":1,\"519\":2,\"524\":1,\"525\":36,\"526\":1,\"527\":5,\"528\":2,\"529\":1,\"531\":1,\"532\":8,\"536\":3,\"537\":1,\"542\":1,\"545\":2,\"549\":4,\"550\":4,\"551\":6,\"553\":5,\"554\":2,\"555\":3,\"556\":1,\"557\":4,\"558\":2,\"559\":2,\"561\":1,\"562\":2,\"564\":1,\"567\":3,\"568\":1,\"569\":4,\"570\":11,\"571\":3,\"572\":5,\"573\":6,\"574\":6,\"575\":1,\"577\":3,\"580\":8,\"581\":5,\"583\":1,\"585\":13,\"586\":1,\"587\":1,\"588\":2,\"591\":5,\"592\":5,\"593\":2,\"596\":3,\"599\":6,\"601\":2,\"605\":5,\"606\":1,\"608\":1,\"609\":5,\"610\":9,\"614\":1,\"617\":2,\"626\":3,\"627\":2,\"638\":1,\"640\":3,\"642\":1,\"643\":2,\"645\":1,\"648\":3,\"649\":1,\"651\":1,\"653\":7,\"656\":6,\"657\":1,\"659\":1,\"660\":3,\"661\":1,\"662\":13,\"666\":1,\"670\":5,\"671\":1,\"673\":3,\"675\":1,\"676\":2,\"677\":2,\"678\":1,\"679\":1,\"680\":1,\"681\":3,\"682\":4,\"687\":1,\"688\":4,\"689\":24,\"692\":3,\"696\":9,\"697\":2,\"700\":1,\"701\":3,\"703\":1,\"705\":1,\"707\":3,\"709\":2,\"759\":2,\"770\":1,\"782\":1,\"849\":1,\"856\":1,\"865\":1,\"866\":4,\"869\":2,\"873\":6,\"874\":1,\"877\":4,\"878\":4,\"879\":1,\"881\":4,\"883\":3,\"884\":2,\"885\":2,\"891\":1,\"892\":2},\"2\":{\"971\":1}}],[\"111\",{\"1\":{\"832\":7}}],[\"111111111\",{\"1\":{\"811\":1}}],[\"1111\",{\"1\":{\"626\":1}}],[\"114\",{\"1\":{\"832\":10}}],[\"113\",{\"1\":{\"709\":1,\"832\":10}}],[\"118\",{\"1\":{\"692\":1}}],[\"11magic\",{\"1\":{\"657\":1}}],[\"112\",{\"1\":{\"626\":2,\"832\":10}}],[\"11264\",{\"1\":{\"624\":1}}],[\"11222\",{\"1\":{\"35\":1}}],[\"11insert\",{\"1\":{\"593\":1}}],[\"1157555\",{\"1\":{\"689\":1}}],[\"115\",{\"1\":{\"557\":1,\"686\":1}}],[\"115573947\",{\"1\":{\"336\":1}}],[\"110\",{\"1\":{\"557\":1,\"832\":7}}],[\"1105\",{\"1\":{\"51\":1}}],[\"119763558\",{\"1\":{\"355\":1}}],[\"11\",{\"0\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"332\":1,\"544\":1,\"576\":1,\"638\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1,\"675\":1,\"676\":1,\"709\":1,\"765\":1,\"817\":1,\"902\":1,\"916\":1},\"1\":{\"6\":3,\"72\":1,\"148\":1,\"181\":1,\"292\":1,\"467\":1,\"469\":3,\"477\":2,\"521\":1,\"525\":1,\"530\":1,\"546\":1,\"551\":1,\"553\":1,\"557\":1,\"558\":1,\"561\":2,\"567\":1,\"568\":2,\"574\":1,\"577\":2,\"580\":2,\"585\":2,\"592\":1,\"600\":1,\"605\":2,\"628\":1,\"640\":1,\"645\":1,\"651\":2,\"658\":1,\"662\":20,\"663\":3,\"664\":2,\"666\":1,\"667\":1,\"668\":2,\"669\":2,\"670\":3,\"671\":1,\"672\":1,\"673\":3,\"675\":1,\"676\":7,\"677\":2,\"681\":1,\"682\":1,\"689\":3,\"708\":1,\"709\":1,\"869\":1}}],[\"n0yzfc6g6ejboeoros\",{\"1\":{\"883\":1}}],[\"nqegpe\",{\"1\":{\"883\":1}}],[\"nzyxmdaxiiwkicjhdwqioiaiczzcagrsa3f0myisciaibm9uy2uioiaibi0wuzz\",{\"1\":{\"883\":1}}],[\"npmmirror\",{\"1\":{\"984\":1}}],[\"npm换国内源\",{\"0\":{\"984\":1}}],[\"npm\",{\"1\":{\"749\":1,\"750\":1,\"979\":1,\"980\":1,\"983\":1,\"984\":2}}],[\"ns\",{\"1\":{\"689\":2,\"697\":2}}],[\"nsf\",{\"1\":{\"491\":1}}],[\"nn\",{\"1\":{\"682\":1}}],[\"nnnn\",{\"1\":{\"635\":3,\"636\":5}}],[\"nw\",{\"1\":{\"682\":4}}],[\"n=false\",{\"1\":{\"682\":2}}],[\"nlog\",{\"1\":{\"656\":1}}],[\"n>5\",{\"1\":{\"623\":1}}],[\"nthe\",{\"1\":{\"587\":1}}],[\"ntfs\",{\"1\":{\"61\":1}}],[\"nr\",{\"1\":{\"570\":10,\"640\":5,\"682\":12}}],[\"n`\",{\"1\":{\"532\":1}}],[\"n++\",{\"1\":{\"623\":1}}],[\"n+2\",{\"1\":{\"430\":1}}],[\"n+1\",{\"1\":{\"430\":3,\"592\":1,\"593\":1}}],[\"nbuf\",{\"1\":{\"682\":4}}],[\"nbgsweep++\",{\"1\":{\"430\":1}}],[\"nbf\",{\"1\":{\"35\":1,\"852\":2}}],[\"nist\",{\"1\":{\"869\":1}}],[\"night\",{\"1\":{\"627\":1}}],[\"nigel\",{\"1\":{\"476\":1}}],[\"niuben\",{\"1\":{\"344\":1}}],[\"niladic\",{\"1\":{\"562\":2}}],[\"nil来判断\",{\"1\":{\"362\":1}}],[\"nil语句较多\",{\"1\":{\"321\":1}}],[\"nil\",{\"0\":{\"362\":1,\"399\":1},\"1\":{\"10\":2,\"12\":5,\"18\":2,\"21\":2,\"331\":2,\"335\":1,\"362\":2,\"384\":4,\"400\":2,\"405\":2,\"424\":1,\"425\":1,\"427\":2,\"504\":1,\"509\":2,\"515\":1,\"523\":1,\"547\":3,\"550\":9,\"556\":1,\"561\":1,\"585\":1,\"588\":1,\"605\":1,\"614\":1,\"638\":3,\"640\":2,\"642\":1,\"643\":2,\"662\":9,\"666\":7,\"670\":2,\"677\":4,\"678\":6,\"679\":3,\"680\":3,\"682\":6,\"686\":5,\"687\":4,\"688\":3,\"689\":12,\"692\":2,\"699\":1}}],[\"nuts\",{\"1\":{\"467\":1,\"469\":2}}],[\"nuci\",{\"1\":{\"407\":1}}],[\"numcores\",{\"1\":{\"697\":2}}],[\"nums\",{\"1\":{\"689\":2}}],[\"numships\",{\"1\":{\"515\":2}}],[\"numfield\",{\"1\":{\"670\":3}}],[\"numx3\",{\"1\":{\"564\":4}}],[\"numx2\",{\"1\":{\"564\":4}}],[\"num1\",{\"1\":{\"551\":6}}],[\"numeric\",{\"1\":{\"301\":1}}],[\"number声明中指定格式的电话号码\",{\"1\":{\"873\":1}}],[\"numbers\",{\"1\":{\"689\":5}}],[\"numbered\",{\"1\":{\"682\":1}}],[\"number2\",{\"1\":{\"677\":1}}],[\"number1\",{\"1\":{\"677\":1}}],[\"numberofwheels\",{\"1\":{\"655\":1}}],[\"number\",{\"0\":{\"756\":1},\"1\":{\"301\":2,\"508\":1,\"538\":4,\"550\":1,\"551\":4,\"640\":6,\"682\":1,\"686\":1,\"688\":3,\"689\":1,\"697\":1,\"756\":1,\"758\":1,\"759\":1,\"766\":2,\"768\":1,\"769\":1,\"770\":4}}],[\"num\",{\"1\":{\"128\":2,\"135\":2,\"136\":1,\"142\":1,\"143\":1,\"175\":1,\"176\":1,\"185\":2,\"186\":1,\"564\":13,\"662\":3,\"689\":2,\"756\":1}}],[\"null和undefined赋值给number类型的变量\",{\"1\":{\"764\":1}}],[\"null或undefined之外的类型\",{\"1\":{\"762\":1}}],[\"null\",{\"0\":{\"764\":1},\"1\":{\"42\":4,\"72\":106,\"73\":46,\"98\":4,\"112\":8,\"136\":1,\"150\":1,\"163\":2,\"183\":1,\"186\":1,\"199\":2,\"228\":3,\"282\":1,\"509\":2,\"682\":1,\"725\":3,\"726\":2,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"762\":2,\"764\":2,\"803\":1}}],[\"n\",{\"1\":{\"51\":1,\"249\":2,\"256\":1,\"301\":3,\"303\":1,\"388\":2,\"390\":1,\"392\":1,\"430\":5,\"438\":1,\"449\":3,\"496\":2,\"507\":2,\"508\":1,\"513\":2,\"515\":3,\"517\":1,\"519\":7,\"523\":15,\"525\":9,\"527\":1,\"528\":1,\"531\":3,\"532\":2,\"534\":1,\"536\":4,\"537\":3,\"538\":2,\"539\":1,\"540\":3,\"543\":3,\"545\":3,\"546\":2,\"547\":6,\"549\":7,\"550\":6,\"553\":7,\"555\":1,\"557\":8,\"558\":1,\"559\":1,\"563\":2,\"564\":1,\"565\":2,\"566\":2,\"567\":1,\"568\":4,\"570\":8,\"571\":4,\"572\":1,\"573\":1,\"574\":2,\"576\":1,\"577\":13,\"580\":1,\"581\":1,\"585\":8,\"587\":3,\"590\":2,\"591\":3,\"592\":5,\"593\":8,\"600\":1,\"605\":4,\"608\":4,\"609\":2,\"610\":2,\"616\":1,\"623\":1,\"626\":6,\"627\":4,\"628\":1,\"640\":6,\"644\":2,\"645\":1,\"647\":5,\"651\":3,\"655\":5,\"656\":2,\"659\":1,\"660\":6,\"661\":2,\"662\":32,\"663\":7,\"666\":3,\"668\":1,\"670\":9,\"673\":6,\"675\":1,\"677\":21,\"678\":15,\"679\":2,\"680\":6,\"682\":21,\"686\":11,\"688\":2,\"689\":10,\"692\":1,\"696\":5,\"697\":1,\"705\":6,\"707\":10,\"708\":1,\"764\":1,\"869\":1}}],[\"nested\",{\"1\":{\"868\":1}}],[\"never类型表示的是那些永不存在的值的类型\",{\"1\":{\"765\":1}}],[\"never\",{\"0\":{\"765\":1},\"1\":{\"686\":1,\"765\":2}}],[\"nevacuate\",{\"1\":{\"364\":1}}],[\"necessary\",{\"1\":{\"583\":1,\"593\":1,\"667\":1}}],[\"negative\",{\"1\":{\"551\":1,\"688\":3,\"689\":1}}],[\"nexus\",{\"1\":{\"476\":1}}],[\"nextfree\",{\"1\":{\"443\":1}}],[\"next\",{\"0\":{\"235\":1},\"1\":{\"232\":1,\"235\":5,\"610\":1,\"614\":1}}],[\"needs\",{\"1\":{\"640\":1,\"662\":2,\"673\":2}}],[\"needed\",{\"1\":{\"365\":1,\"593\":1}}],[\"need\",{\"1\":{\"51\":1}}],[\"newloop\",{\"1\":{\"692\":1}}],[\"newline\",{\"1\":{\"507\":1,\"564\":1,\"678\":1,\"682\":10}}],[\"newparser\",{\"1\":{\"686\":1}}],[\"newdecoder\",{\"1\":{\"686\":7}}],[\"newencoder\",{\"1\":{\"682\":3,\"686\":6}}],[\"newwriter\",{\"1\":{\"680\":2,\"682\":3}}],[\"newtask\",{\"1\":{\"676\":1}}],[\"newticker\",{\"1\":{\"623\":2}}],[\"newnode\",{\"1\":{\"666\":5}}],[\"newname\",{\"1\":{\"654\":2}}],[\"newmatrix\",{\"1\":{\"642\":2}}],[\"newfloat64array\",{\"1\":{\"662\":1}}],[\"newfile\",{\"1\":{\"642\":2}}],[\"newfunc\",{\"1\":{\"424\":1}}],[\"newrat\",{\"1\":{\"626\":6}}],[\"newreader\",{\"1\":{\"544\":1,\"662\":2,\"677\":6,\"678\":2,\"679\":3,\"682\":3,\"686\":2}}],[\"newint\",{\"1\":{\"626\":4}}],[\"newbuffer\",{\"1\":{\"590\":2}}],[\"newslice\",{\"1\":{\"593\":3}}],[\"news\",{\"1\":{\"539\":3,\"545\":3,\"550\":3}}],[\"newsqueak\",{\"1\":{\"471\":1}}],[\"new内存分配是在堆上还是在栈上\",{\"1\":{\"322\":1}}],[\"new返回指向变量的指针\",{\"1\":{\"322\":1}}],[\"new给string\",{\"1\":{\"322\":1}}],[\"newanimal\",{\"1\":{\"314\":1,\"315\":1}}],[\"newuser\",{\"1\":{\"156\":1,\"192\":1}}],[\"new\",{\"0\":{\"322\":1,\"588\":1,\"643\":1},\"1\":{\"42\":5,\"56\":1,\"166\":7,\"167\":1,\"202\":7,\"203\":1,\"322\":1,\"389\":1,\"504\":1,\"518\":1,\"537\":3,\"539\":2,\"545\":2,\"550\":1,\"569\":8,\"580\":2,\"587\":1,\"588\":7,\"590\":2,\"605\":3,\"608\":1,\"625\":1,\"638\":4,\"639\":1,\"640\":10,\"642\":7,\"643\":7,\"644\":1,\"647\":1,\"651\":3,\"653\":2,\"654\":1,\"656\":2,\"657\":4,\"660\":1,\"662\":4,\"663\":1,\"667\":1,\"671\":1,\"676\":4,\"686\":2,\"688\":4,\"707\":1,\"709\":2,\"725\":2,\"726\":3,\"727\":1,\"728\":1,\"729\":3,\"730\":2,\"731\":1,\"732\":1,\"765\":1,\"772\":1,\"803\":7}}],[\"netbsd\",{\"1\":{\"482\":1}}],[\"netpoll\",{\"1\":{\"461\":2,\"462\":1}}],[\"netpoller\",{\"1\":{\"330\":4}}],[\"net\",{\"1\":{\"6\":1,\"51\":2,\"325\":1,\"328\":1,\"336\":1,\"337\":1,\"355\":1,\"356\":1,\"376\":1,\"426\":1,\"427\":2,\"430\":1,\"456\":1,\"461\":1,\"462\":1,\"469\":1,\"472\":1,\"475\":1,\"483\":5,\"487\":1,\"499\":2,\"547\":2,\"623\":3,\"638\":1,\"662\":1,\"687\":1,\"688\":2,\"689\":1}}],[\"network\",{\"1\":{\"6\":2,\"51\":1,\"568\":2,\"686\":7}}],[\"normally\",{\"1\":{\"686\":1,\"689\":4}}],[\"noverflow\",{\"1\":{\"364\":1}}],[\"nonce值是区分大小写的字符串\",{\"1\":{\"869\":1}}],[\"nonce\",{\"1\":{\"869\":2,\"873\":1,\"892\":1}}],[\"non\",{\"1\":{\"212\":1,\"330\":1,\"506\":1,\"536\":1,\"573\":1,\"651\":1,\"662\":1}}],[\"nonexistent\",{\"1\":{\"52\":1}}],[\"none\",{\"1\":{\"39\":1,\"682\":3,\"686\":2,\"850\":2,\"854\":1,\"873\":1}}],[\"nosql\",{\"1\":{\"211\":1}}],[\"now\",{\"0\":{\"616\":1},\"1\":{\"148\":2,\"167\":1,\"181\":2,\"203\":1,\"267\":2,\"427\":4,\"528\":1,\"546\":6,\"555\":7,\"557\":1,\"558\":1,\"576\":3,\"577\":2,\"592\":1,\"616\":1,\"617\":1,\"618\":1,\"622\":3,\"651\":3,\"670\":2,\"682\":1}}],[\"no\",{\"1\":{\"42\":1,\"52\":1,\"507\":2,\"518\":1,\"559\":1,\"672\":1,\"689\":5,\"883\":4,\"884\":2}}],[\"notsure\",{\"1\":{\"761\":3}}],[\"notknowntype\",{\"1\":{\"670\":7}}],[\"nothing\",{\"1\":{\"662\":1,\"682\":1}}],[\"notation\",{\"1\":{\"640\":1,\"682\":1}}],[\"notepad\",{\"1\":{\"635\":1}}],[\"notepad++\",{\"1\":{\"491\":1}}],[\"notefrequency\",{\"1\":{\"606\":1}}],[\"note\",{\"1\":{\"365\":1,\"583\":1,\"662\":1,\"667\":1,\"669\":1}}],[\"not\",{\"1\":{\"12\":1,\"35\":1,\"51\":1,\"72\":6,\"73\":3,\"93\":1,\"98\":4,\"112\":6,\"132\":5,\"136\":1,\"168\":2,\"186\":1,\"204\":2,\"228\":1,\"328\":1,\"383\":1,\"495\":1,\"506\":1,\"518\":1,\"549\":2,\"550\":1,\"551\":1,\"559\":1,\"583\":1,\"585\":1,\"590\":1,\"608\":3,\"610\":1,\"643\":2,\"652\":1,\"662\":7,\"667\":1,\"671\":1,\"677\":3,\"678\":1,\"686\":1,\"688\":3,\"689\":4,\"705\":1,\"867\":4,\"878\":3}}],[\"nodes\",{\"1\":{\"666\":1}}],[\"nodejs安装\",{\"0\":{\"978\":1}}],[\"nodejs简介\",{\"0\":{\"977\":1}}],[\"nodejs\",{\"0\":{\"976\":1},\"1\":{\"78\":1},\"2\":{\"985\":1}}],[\"node\",{\"0\":{\"318\":1,\"979\":1,\"980\":1},\"1\":{\"6\":1,\"318\":1,\"640\":5,\"666\":12,\"979\":1,\"980\":1,\"981\":1}}],[\"narg\",{\"1\":{\"682\":6}}],[\"naegels\",{\"1\":{\"677\":1}}],[\"nanosec\",{\"1\":{\"546\":1}}],[\"nanoseconds\",{\"1\":{\"697\":1}}],[\"nanosecond\",{\"1\":{\"528\":1}}],[\"nano\",{\"1\":{\"491\":1}}],[\"nacl\",{\"1\":{\"476\":1}}],[\"nacos\",{\"0\":{\"4\":1},\"1\":{\"4\":23,\"78\":1}}],[\"namingstrategy\",{\"1\":{\"56\":2}}],[\"namer\",{\"1\":{\"662\":5}}],[\"name=\",{\"1\":{\"638\":2}}],[\"name=nacos\",{\"1\":{\"4\":1}}],[\"namedpoint\",{\"1\":{\"655\":3}}],[\"named\",{\"0\":{\"564\":1}}],[\"name\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":2,\"5\":1,\"6\":2,\"17\":1,\"18\":2,\"20\":1,\"21\":2,\"35\":2,\"52\":2,\"56\":1,\"93\":1,\"94\":1,\"95\":1,\"117\":1,\"123\":1,\"124\":1,\"128\":1,\"129\":4,\"132\":2,\"133\":4,\"134\":1,\"135\":5,\"136\":2,\"138\":3,\"140\":2,\"144\":3,\"167\":4,\"168\":6,\"171\":2,\"172\":3,\"177\":3,\"185\":5,\"186\":2,\"203\":4,\"204\":6,\"222\":2,\"314\":6,\"315\":1,\"328\":6,\"338\":3,\"342\":1,\"383\":1,\"389\":1,\"392\":1,\"550\":2,\"574\":5,\"611\":1,\"627\":1,\"636\":2,\"640\":6,\"642\":3,\"645\":2,\"651\":1,\"655\":1,\"656\":4,\"663\":2,\"670\":1,\"677\":3,\"682\":4,\"684\":2,\"685\":1,\"686\":11,\"688\":2,\"689\":1,\"757\":1,\"760\":2,\"768\":3,\"769\":1,\"772\":5,\"782\":8,\"811\":2,\"845\":1,\"849\":1,\"851\":1,\"854\":2,\"858\":1,\"868\":1,\"883\":1}}],[\"natural\",{\"0\":{\"139\":1,\"173\":1},\"1\":{\"139\":2,\"173\":2}}],[\"native\",{\"1\":{\"52\":1}}],[\"nat\",{\"1\":{\"51\":2}}],[\"单页面网络应用程序可以使用这些数据为用户构建一个具有\",{\"1\":{\"854\":1}}],[\"单例类必须给所有其他对象提供这一实例\",{\"1\":{\"802\":1}}],[\"单例类必须自己创建自己的唯一实例\",{\"1\":{\"802\":1}}],[\"单例类只能有一个实例\",{\"1\":{\"802\":1}}],[\"单例模式确保类只有一个实例\",{\"1\":{\"801\":1}}],[\"单例模式\",{\"0\":{\"800\":1}}],[\"单元\",{\"1\":{\"689\":1}}],[\"单元测试方法的参数必须是t\",{\"1\":{\"342\":1}}],[\"单元测试方法参数\",{\"1\":{\"342\":1}}],[\"单元测试方法命名规则\",{\"1\":{\"342\":1}}],[\"单元测试文件方法\",{\"1\":{\"342\":1}}],[\"单元测试文件中的测试方法和原文件中的待测试的方法名相对应\",{\"1\":{\"342\":1}}],[\"单元测试文件包名\",{\"1\":{\"342\":1}}],[\"单元测试文件的包名为原文件的包名添加下划线接test\",{\"1\":{\"342\":1}}],[\"单元测试文件命名规则\",{\"1\":{\"342\":1}}],[\"单元测试包命令规则\",{\"1\":{\"342\":1}}],[\"单元测试需要创建单独的测试文件\",{\"1\":{\"342\":1}}],[\"单位为\",{\"1\":{\"689\":1}}],[\"单位为传输量每秒\",{\"1\":{\"499\":1}}],[\"单位是\",{\"1\":{\"661\":1}}],[\"单个或多个\",{\"1\":{\"562\":1}}],[\"单行注释是最常见的注释形式\",{\"1\":{\"508\":1}}],[\"单行或多行注释均可\",{\"1\":{\"501\":1}}],[\"单纯地给\",{\"1\":{\"518\":1}}],[\"单纯地打印一个字符串或变量甚至可以使用预定义的方法来实现\",{\"1\":{\"507\":1}}],[\"单纯使用\",{\"1\":{\"234\":1}}],[\"单步执行\",{\"1\":{\"490\":1}}],[\"单步调试\",{\"0\":{\"343\":1}}],[\"单引号\",{\"0\":{\"333\":1},\"1\":{\"333\":1}}],[\"单一职责原则\",{\"1\":{\"316\":1}}],[\"单表数据量减少\",{\"1\":{\"248\":1}}],[\"单表数据量太大\",{\"1\":{\"247\":1,\"248\":1}}],[\"单表有\",{\"1\":{\"247\":1}}],[\"单库超过每秒\",{\"1\":{\"246\":1}}],[\"单库超过\",{\"1\":{\"246\":2}}],[\"单机磁盘容量几乎撑满\",{\"1\":{\"248\":1}}],[\"单机部署\",{\"1\":{\"248\":1}}],[\"单机当然没有问题\",{\"1\":{\"28\":1}}],[\"单机模式\",{\"1\":{\"4\":1}}],[\"单节点elasticsearch集群安装\",{\"1\":{\"6\":1}}],[\"您可能已经注意到\",{\"1\":{\"852\":1}}],[\"您可以检查成功读入数据的个数和返回的错误\",{\"1\":{\"677\":1}}],[\"您可以通过查看\",{\"1\":{\"600\":1}}],[\"您可以通过操作切片来完成对字符串的操作\",{\"1\":{\"598\":1}}],[\"您可以查看示例\",{\"1\":{\"576\":1}}],[\"您可以看到当\",{\"1\":{\"559\":1}}],[\"您可以使用切片和\",{\"1\":{\"601\":1}}],[\"您可以使用\",{\"1\":{\"558\":1,\"575\":1,\"600\":1,\"782\":2}}],[\"您可以使用比较运算符\",{\"1\":{\"128\":1}}],[\"您可以将两个\",{\"1\":{\"553\":1}}],[\"您可以同时测试多个可能符合条件的值\",{\"1\":{\"551\":1}}],[\"您可以远远超出简单的数据检索和汇总信息\",{\"1\":{\"6\":1}}],[\"您就可以使用函数\",{\"1\":{\"600\":1}}],[\"您必须先将字符串转换成字节数组\",{\"1\":{\"598\":1}}],[\"您需要怎么做才能删除这些字符呢\",{\"1\":{\"572\":1}}],[\"您也可以使用\",{\"1\":{\"677\":1}}],[\"您也可以将字符串转换为元素类型为\",{\"1\":{\"595\":1}}],[\"您也可以设置\",{\"1\":{\"575\":1}}],[\"您也可以直接对匿名函数进行调用\",{\"1\":{\"573\":1}}],[\"您也可以书写自己的函数\",{\"1\":{\"572\":1}}],[\"您也可以认为这是没有初始化语句和修饰语句的\",{\"1\":{\"555\":1}}],[\"您会发现它在许多情况下都非常有用\",{\"1\":{\"557\":1}}],[\"您会得到一个编译错误\",{\"1\":{\"550\":1}}],[\"您还可以将一个字符串追加到某一个字节切片的尾部\",{\"1\":{\"595\":1}}],[\"您还可以通过\",{\"1\":{\"595\":1}}],[\"您还可以在循环中同时使用多个计数器\",{\"1\":{\"553\":1}}],[\"您还需要在\",{\"1\":{\"551\":1}}],[\"您同样可以使用\",{\"1\":{\"551\":1,\"595\":1}}],[\"您不需要使用花括号将多行语句括起来\",{\"1\":{\"551\":1}}],[\"您在elasticsearch中处理数据\",{\"1\":{\"6\":1}}],[\"还带有一个附加元素\",{\"1\":{\"858\":1}}],[\"还未来得及往下执行\",{\"1\":{\"803\":1}}],[\"还会导致代码错误\",{\"1\":{\"662\":1}}],[\"还希望继续执行后续分支的代码\",{\"1\":{\"551\":1}}],[\"还需要使用变量\",{\"1\":{\"501\":1}}],[\"还需要把\",{\"1\":{\"4\":1}}],[\"还要注意的是\",{\"1\":{\"499\":1}}],[\"还要对这些变量做逃逸分析\",{\"1\":{\"442\":1}}],[\"还没有回收器\",{\"1\":{\"487\":1}}],[\"还没自旋超过\",{\"1\":{\"421\":1}}],[\"还有\",{\"1\":{\"501\":1,\"660\":1}}],[\"还有那些\",{\"1\":{\"467\":1}}],[\"还有一个叫做\",{\"1\":{\"694\":1}}],[\"还有一个很有用的例子是通过\",{\"1\":{\"625\":1}}],[\"还有一个\",{\"1\":{\"409\":1,\"563\":1,\"686\":1,\"692\":1}}],[\"还有一个区别\",{\"1\":{\"362\":1}}],[\"还有一些较早的标准\",{\"1\":{\"846\":1}}],[\"还有一些通过实验观察到的现象\",{\"1\":{\"696\":1}}],[\"还有一些不常用的方式\",{\"1\":{\"662\":1}}],[\"还有一些方法可以将类型嵌入到其他类型中\",{\"1\":{\"312\":1}}],[\"还有一些在此基础上演化出来的模型\",{\"1\":{\"65\":1}}],[\"还是\",{\"1\":{\"627\":1,\"649\":1,\"670\":1,\"680\":1}}],[\"还是按照\",{\"1\":{\"611\":1}}],[\"还是不要在\",{\"1\":{\"549\":1}}],[\"还是空格并没有强制规定\",{\"1\":{\"496\":1}}],[\"还是相关的插件方面\",{\"1\":{\"489\":1}}],[\"还是使用编译速度较快但执行效率不佳的语言\",{\"1\":{\"472\":1}}],[\"还是使用之前\",{\"1\":{\"450\":1}}],[\"还是您正在使用elasticsearch来解决新问题\",{\"1\":{\"6\":1}}],[\"还原成原先的接口变量\",{\"1\":{\"328\":1}}],[\"还算是比较活跃\",{\"1\":{\"251\":1}}],[\"还增加空间开销\",{\"1\":{\"211\":1}}],[\"还可以有一个可选的标签\",{\"1\":{\"645\":1}}],[\"还可以搜索\",{\"1\":{\"600\":1}}],[\"还可以用于任何不确定类型的参数\",{\"1\":{\"567\":1}}],[\"还可以使用\",{\"1\":{\"523\":1,\"559\":1,\"595\":1,\"687\":1}}],[\"还可以直接编译指定的源码文件\",{\"1\":{\"449\":1}}],[\"还可以通过header里的\",{\"1\":{\"39\":1}}],[\"还可以验证内容是否未被篡改\",{\"1\":{\"26\":1}}],[\"还可用于信息交换\",{\"1\":{\"31\":1}}],[\"但最终用户没有选择会话\",{\"1\":{\"878\":1}}],[\"但最好将它放在最后\",{\"1\":{\"551\":1}}],[\"但openid连接不使用此响应类型\",{\"1\":{\"869\":1,\"892\":1}}],[\"但实际上\",{\"1\":{\"854\":1}}],[\"但实际上这一过程是由编译器自动完成\",{\"1\":{\"507\":1}}],[\"但仍添加了点\",{\"1\":{\"854\":1}}],[\"但没有定义提供身份信息的标准方法\",{\"1\":{\"866\":1}}],[\"但没有任何声明是强制性的\",{\"1\":{\"851\":1}}],[\"但没有类型层次\",{\"1\":{\"312\":1}}],[\"但又有不同\",{\"1\":{\"803\":1}}],[\"但也可以分配给有方向的通道变量\",{\"1\":{\"709\":1}}],[\"但也会让rbac变得混乱\",{\"1\":{\"75\":1}}],[\"但为了可读性通道的命名通常以\",{\"1\":{\"700\":1}}],[\"但他们不是并行运行的\",{\"1\":{\"695\":1}}],[\"但往往是\",{\"1\":{\"695\":1}}],[\"但作者肯定有记载的\",{\"1\":{\"638\":1}}],[\"但返回的\",{\"1\":{\"602\":1}}],[\"但很明显绝大多数情况下前两个数的值都是已经计算过的\",{\"1\":{\"577\":1}}],[\"但函数\",{\"1\":{\"574\":1}}],[\"但指针的值所指向的地址上的值不会被复制\",{\"1\":{\"563\":1}}],[\"但注意标签和\",{\"1\":{\"559\":1}}],[\"但您依旧可以获得每次迭代所对应的索引\",{\"1\":{\"557\":1}}],[\"但您可以在分支中进行任意形式的编码\",{\"1\":{\"551\":1}}],[\"但一般情况下都会直接写\",{\"1\":{\"556\":1}}],[\"但一定要让人感觉操作方便\",{\"1\":{\"490\":1}}],[\"但打印一次\",{\"1\":{\"554\":1}}],[\"但必须是相同的类型\",{\"1\":{\"551\":1}}],[\"但当输出到文件流\",{\"1\":{\"550\":1}}],[\"但当你希望只表示其中的一个部分的时候需要使用\",{\"1\":{\"524\":1}}],[\"但要注意的是\",{\"1\":{\"549\":1}}],[\"但我们经常会需要只有在满足一些特定情况时才执行某些代码\",{\"1\":{\"548\":1}}],[\"但我觉得不是问题\",{\"1\":{\"320\":1}}],[\"但看下面这个例子你就会一目了然\",{\"1\":{\"546\":1}}],[\"但只能用于后缀\",{\"1\":{\"527\":1}}],[\"但内置函数可以使用\",{\"1\":{\"513\":1}}],[\"但总体思路如下\",{\"1\":{\"510\":1}}],[\"但总的来说\",{\"1\":{\"487\":1}}],[\"但可以说其中最重要的方面是以一种简单\",{\"1\":{\"846\":1}}],[\"但可以被赋值于某个变量\",{\"1\":{\"573\":1}}],[\"但可以通过\",{\"1\":{\"508\":1}}],[\"但可以加密\",{\"1\":{\"31\":1}}],[\"但任何赋给这个标识符的值都将被抛弃\",{\"1\":{\"504\":1}}],[\"但任何使用\",{\"1\":{\"499\":1}}],[\"但比\",{\"1\":{\"499\":1}}],[\"但使用从令牌端点返回的id令牌和访问令牌\",{\"1\":{\"888\":1}}],[\"但使用统一的结构能够在从上至下阅读\",{\"1\":{\"510\":1}}],[\"但使用\",{\"1\":{\"496\":1,\"506\":1,\"595\":1}}],[\"但却能提供类似的安全保证\",{\"1\":{\"860\":1}}],[\"但却可以很容易地享有\",{\"1\":{\"493\":1}}],[\"但却又拥有像\",{\"1\":{\"467\":1}}],[\"但目前的发行版已经由\",{\"1\":{\"485\":1}}],[\"但从\",{\"1\":{\"482\":1}}],[\"但产生的本地代码运行要稍微快一点\",{\"1\":{\"481\":1}}],[\"但编译后的程序不能够使用\",{\"1\":{\"481\":1}}],[\"但如果没有显示最终用户同意的用户界面\",{\"1\":{\"878\":1}}],[\"但如果不显示用户界面提示会话使用\",{\"1\":{\"878\":1}}],[\"但如果不显示终端用户认证的用户界面\",{\"1\":{\"878\":1}}],[\"但如果不显示终端用户交互的用户界面\",{\"1\":{\"878\":1}}],[\"但如果对精度有严格要求的时候\",{\"1\":{\"626\":1}}],[\"但如果你的全局变量希望能够被外部包所使用\",{\"1\":{\"515\":1}}],[\"但如果你在安装过程中修改安装目录\",{\"1\":{\"485\":1}}],[\"但如果你打算使用\",{\"1\":{\"481\":1}}],[\"但如果结果集很大\",{\"1\":{\"256\":1}}],[\"但本身不支持变体类型\",{\"1\":{\"477\":1}}],[\"但其背后的数学原理不同\",{\"1\":{\"860\":1}}],[\"但其中的一部分可能会在未来被支持\",{\"1\":{\"477\":1}}],[\"但其实在20世纪70年代的多用户计算时期\",{\"1\":{\"64\":1}}],[\"但考虑这将是未来并发应用程序发展的一个重要组成部分\",{\"1\":{\"473\":1}}],[\"但并不需要括号\",{\"1\":{\"553\":1}}],[\"但并不允许进行指针运算\",{\"1\":{\"473\":1}}],[\"但并不是\",{\"1\":{\"329\":1}}],[\"但你也可以使用取反\",{\"1\":{\"549\":1}}],[\"但你可以在某个代码块的内层代码块中使用相同名称的变量\",{\"1\":{\"515\":1}}],[\"但你并不需要对\",{\"1\":{\"467\":1}}],[\"但你要知道屏障的作用\",{\"1\":{\"429\":1}}],[\"但人们依旧没有找到机会去改变\",{\"1\":{\"467\":1}}],[\"但功能已经被弱化了\",{\"1\":{\"411\":1}}],[\"但数量有限\",{\"1\":{\"409\":1}}],[\"但它依旧运行在某种意义上的虚拟机\",{\"1\":{\"473\":1}}],[\"但它通过接口却非常优雅地支持了面向对象的特性\",{\"1\":{\"391\":1}}],[\"但它们也会造成安全漏洞和法规遵从性挑战\",{\"1\":{\"75\":1}}],[\"但负载因子又不高\",{\"1\":{\"373\":1}}],[\"但冲突过多也是要控制的\",{\"1\":{\"367\":1}}],[\"但增加值会报错\",{\"1\":{\"362\":1}}],[\"但取出来的东西是空\",{\"1\":{\"362\":1}}],[\"但释放的内存是子元素应用类型的内存占用\",{\"1\":{\"360\":1}}],[\"但包级别变量的初始化先于包内\",{\"1\":{\"350\":1}}],[\"但基本依靠返回错误是否为空来判断函数是否执行成功\",{\"1\":{\"321\":1}}],[\"但基本没人会这样来用的\",{\"1\":{\"72\":1}}],[\"但自动\",{\"1\":{\"296\":1}}],[\"但这个更通用\",{\"1\":{\"686\":1}}],[\"但这只在某些罕见的场景下才有用\",{\"1\":{\"661\":1}}],[\"但这只能在定义正确的情况下转换成功\",{\"1\":{\"511\":1}}],[\"但这不被视为一个好的方法\",{\"1\":{\"627\":1}}],[\"但这在\",{\"1\":{\"583\":1}}],[\"但这两者之间有所区别\",{\"1\":{\"556\":1}}],[\"但这还是符合了软件工程原则的主流做法\",{\"1\":{\"549\":1}}],[\"但这些g会panic\",{\"1\":{\"404\":1}}],[\"但这种表不支持索引\",{\"1\":{\"293\":1}}],[\"但这样也会降低索引的选择性\",{\"1\":{\"221\":1}}],[\"但这样做是不好的\",{\"1\":{\"72\":1}}],[\"但表的定义则是在\",{\"1\":{\"293\":1}}],[\"但有些时候\",{\"1\":{\"682\":1}}],[\"但有时你并不需要使用从一个函数得到的所有返回值\",{\"1\":{\"518\":1}}],[\"但有时候这样做可以极大地增强代码的灵活性\",{\"1\":{\"504\":1}}],[\"但有时\",{\"1\":{\"222\":1}}],[\"但有一些小的不同\",{\"1\":{\"37\":1}}],[\"但允许有空值\",{\"1\":{\"212\":1}}],[\"但在大多数情况这会使你的代码结构不清晰\",{\"1\":{\"547\":1}}],[\"但在实际开发中我们并不鼓励这种做法\",{\"1\":{\"504\":1}}],[\"但在\",{\"1\":{\"145\":1,\"178\":1,\"558\":1}}],[\"但在运行中不可同时激活这两个角色\",{\"1\":{\"68\":1}}],[\"但大部分的语法对其他关系型数据库也适用\",{\"1\":{\"80\":1,\"168\":1}}],[\"但rbac还有很多其他好处\",{\"1\":{\"74\":1}}],[\"但\",{\"1\":{\"73\":1,\"145\":1,\"178\":1,\"527\":1,\"700\":1,\"844\":1}}],[\"但不能用它创建新信息\",{\"1\":{\"860\":1}}],[\"但不难想象它们可以如何使用\",{\"1\":{\"846\":1}}],[\"但不会影响到原来的变量\",{\"1\":{\"563\":1}}],[\"但不会删除配置文件\",{\"1\":{\"52\":1}}],[\"但不是openid连接请求\",{\"1\":{\"874\":1}}],[\"但不是必要的\",{\"1\":{\"868\":1}}],[\"但不是由垃圾回收器管理的\",{\"1\":{\"694\":1}}],[\"但不是无条件执行下一次循环\",{\"1\":{\"558\":1}}],[\"但不是真的加锁\",{\"1\":{\"233\":1}}],[\"但不等同于子类\",{\"1\":{\"312\":1}}],[\"但不支持任何转义序列\",{\"1\":{\"333\":1}}],[\"但不支持\",{\"1\":{\"251\":1}}],[\"但不包括\",{\"1\":{\"528\":1,\"677\":1}}],[\"但不包括登录账号\",{\"1\":{\"72\":1}}],[\"但不包含密码信息\",{\"1\":{\"72\":1}}],[\"但对于类似商业服务系统\",{\"1\":{\"62\":1}}],[\"但是却不能够在它上面调用任意的方法\",{\"1\":{\"761\":1}}],[\"但是却有一些呆板\",{\"1\":{\"578\":1}}],[\"但是object类型的变量只是允许你给它赋任意值\",{\"1\":{\"761\":1}}],[\"但是很不提倡这样做\",{\"1\":{\"699\":1}}],[\"但是很多时候测试者可能对一门语言非常了解而对另一门语言只是大概明白\",{\"1\":{\"499\":1}}],[\"但是可导出的\",{\"1\":{\"689\":1}}],[\"但是可以用来验证\",{\"1\":{\"700\":1}}],[\"但是可以用来组装成多维数组\",{\"1\":{\"582\":1}}],[\"但是可以看到两个方法都可以在两种类型的变量上被调用\",{\"1\":{\"653\":1}}],[\"但是可以很容易的在\",{\"1\":{\"642\":1}}],[\"但是更轻量\",{\"1\":{\"687\":1}}],[\"但是更加灵活通用\",{\"1\":{\"671\":1}}],[\"但是通常被用来替换基本常量\",{\"1\":{\"682\":1}}],[\"但是通过数组我们可以更快的计算出\",{\"1\":{\"580\":1}}],[\"但是同时也是为章节\",{\"1\":{\"680\":1}}],[\"但是同样的技巧也可以应用在更复杂的包中\",{\"1\":{\"630\":1}}],[\"但是有一套\",{\"1\":{\"687\":1}}],[\"但是有一个间接的方式\",{\"1\":{\"651\":1}}],[\"但是有些时候\",{\"1\":{\"674\":1}}],[\"但是必须小心使用\",{\"1\":{\"669\":1}}],[\"但是基本的概念是一致的\",{\"1\":{\"658\":1}}],[\"但是第一个方法属于类型\",{\"1\":{\"657\":1}}],[\"但是这会导致重复乏味的代码\",{\"1\":{\"689\":1}}],[\"但是这\",{\"1\":{\"676\":1}}],[\"但是这也意味着更大的编码量和更多的测试工作\",{\"1\":{\"672\":1}}],[\"但是这些方法不包含\",{\"1\":{\"662\":1}}],[\"但是这没关系\",{\"1\":{\"653\":1}}],[\"但是这个时候\",{\"1\":{\"640\":1}}],[\"但是开始的\",{\"1\":{\"653\":1}}],[\"但是方法却是具体实现\",{\"1\":{\"651\":1}}],[\"但是接收者不能是一个接口类型\",{\"1\":{\"651\":1}}],[\"但是两者的内存空间都保留\",{\"1\":{\"649\":1}}],[\"但是分配却没有必要在开始就做\",{\"1\":{\"640\":1}}],[\"但是首先要验证环境变量中是否含有\",{\"1\":{\"638\":1}}],[\"但是没有文档和示例\",{\"1\":{\"629\":1}}],[\"但是当正则不合法时程序将\",{\"1\":{\"624\":1}}],[\"但是当遇到不唯一的\",{\"1\":{\"612\":1}}],[\"但是当我在函数里面修改切片的时候\",{\"1\":{\"355\":1}}],[\"但是仍然比从数组和切片的索引中直接读取要慢\",{\"1\":{\"605\":1}}],[\"但是仍然指向相同的相关数组\",{\"1\":{\"585\":1}}],[\"但是使用这种类型作为值时需要先做一次类型断言\",{\"1\":{\"605\":1}}],[\"但是使用new函数得到的内存不一定就在堆上\",{\"1\":{\"445\":1}}],[\"但是指针和接口类型可以\",{\"1\":{\"605\":1}}],[\"但是指向一个空的数组\",{\"1\":{\"588\":1}}],[\"但是也可以由一维组合成高维\",{\"1\":{\"589\":1}}],[\"但是也可以定义一个已经存在的类型的别名\",{\"1\":{\"509\":1}}],[\"但是末尾没有移动\",{\"1\":{\"585\":1}}],[\"但是拥有切片\",{\"1\":{\"578\":1}}],[\"但是将类型作为参数\",{\"1\":{\"569\":1}}],[\"但是如果尝试更改一个值\",{\"1\":{\"670\":1}}],[\"但是如果基于接收者类型\",{\"1\":{\"651\":1}}],[\"但是如果你想要一个排序的列表\",{\"1\":{\"611\":1}}],[\"但是如果你想完全掌控整个追加过程\",{\"1\":{\"593\":1}}],[\"但是如果变长参数的类型并不是都相同的呢\",{\"1\":{\"567\":1}}],[\"但是如果遇到升级啥的需要各个系统都重新升级版本再发布\",{\"1\":{\"252\":1}}],[\"但是绝大部分的函数还是带有返回值的\",{\"1\":{\"563\":1}}],[\"但是每当遇到\",{\"1\":{\"554\":1}}],[\"但是每个包只会被导入一次\",{\"1\":{\"510\":1}}],[\"但是每个节点的域和上限是一致的\",{\"1\":{\"215\":1}}],[\"但是在其它场景也同样的有用\",{\"1\":{\"682\":1}}],[\"但是在接口实例上调用此方法更令人兴奋\",{\"1\":{\"662\":1}}],[\"但是在\",{\"1\":{\"657\":1,\"662\":1}}],[\"但是在真实的生产环境的应用中一定要做检测\",{\"1\":{\"638\":1}}],[\"但是在测试条件非常多的情况下\",{\"1\":{\"551\":1}}],[\"但是在更复杂的表达式中\",{\"1\":{\"547\":1}}],[\"但是为了代码的可读性\",{\"1\":{\"549\":1}}],[\"但是为此付出的代价是分配速度较慢\",{\"1\":{\"445\":1}}],[\"但是对于经常导致\",{\"1\":{\"547\":1}}],[\"但是对于常量的类型限制非常少\",{\"1\":{\"523\":1}}],[\"但是你也可以选择标明\",{\"1\":{\"606\":1}}],[\"但是你也可以创建自己的包\",{\"1\":{\"506\":1}}],[\"但是你可以通过使用括号将其中的表达式括起来\",{\"1\":{\"520\":1}}],[\"但是全局变量是允许声明但不使用\",{\"1\":{\"518\":1}}],[\"但是所有用于计算的值必须在编译期间就能获得\",{\"1\":{\"513\":1}}],[\"但是只有同一个程序在某个时间点同时运行在多核或者多处理器上才是真正的并行\",{\"1\":{\"694\":1}}],[\"但是只有真正匹配上的字段才会填充数据\",{\"1\":{\"683\":1}}],[\"但是只能一个线程进行写操作\",{\"1\":{\"625\":1}}],[\"但是只能捕获一次\",{\"1\":{\"425\":1}}],[\"但是只需要在其中一个进行注释说明即可\",{\"1\":{\"508\":1}}],[\"但是相同的标识符可以在不同的包中使用\",{\"1\":{\"506\":1}}],[\"但是还有更短且更优雅的方法\",{\"1\":{\"506\":1}}],[\"但是与其它各个语言相比已经拥有非常出色的表现\",{\"1\":{\"499\":1}}],[\"但是该调试器的调试方式并不灵活且操作难度较大\",{\"1\":{\"494\":1}}],[\"但是该设计过于复杂\",{\"1\":{\"63\":1}}],[\"但是经过逃逸分析后发现在退出函数之后还有其他地方在引用\",{\"1\":{\"445\":1}}],[\"但是编译器进行逃逸分析后\",{\"1\":{\"445\":1}}],[\"但是和操作系统的线程调度还是有些区别的\",{\"1\":{\"412\":1}}],[\"但是内核很难支持这么多的线程数\",{\"1\":{\"409\":1}}],[\"但是受内存限制\",{\"1\":{\"409\":1}}],[\"但是delete\",{\"1\":{\"362\":1}}],[\"但是切片在传递的过程中\",{\"1\":{\"355\":1}}],[\"但是创建的这个切片和我们原来的数据是共享数据源的\",{\"1\":{\"355\":1}}],[\"但是它不可能预见所有的可能性\",{\"1\":{\"662\":1}}],[\"但是它不能持有指针对象\",{\"1\":{\"351\":1}}],[\"但是它总是可以分配给接口变量本身的类型\",{\"1\":{\"662\":1}}],[\"但是它的字段没有被导出\",{\"1\":{\"654\":1}}],[\"但是它可以是任何其他允许类型的指针\",{\"1\":{\"651\":1}}],[\"但是它们被限制为某种固定的内建类型\",{\"1\":{\"676\":1}}],[\"但是它们的行为不同\",{\"1\":{\"588\":1}}],[\"但是它们在整个包的内部是可见并且可用的\",{\"1\":{\"506\":1}}],[\"但是它只能被用在函数体内\",{\"1\":{\"518\":1}}],[\"但是它通过接口\",{\"1\":{\"475\":1}}],[\"但是它在极大程度上简化了这些语法\",{\"1\":{\"471\":1}}],[\"但是它要通过查询数据字典完成的\",{\"1\":{\"272\":1}}],[\"但是我们在命令行加入参数\",{\"1\":{\"681\":1}}],[\"但是我们如何打包代码到开发者圈子呢\",{\"1\":{\"635\":1}}],[\"但是我们需要利用共享变量来进行协程的通信\",{\"1\":{\"427\":1}}],[\"但是我们只需要其中的两个\",{\"1\":{\"340\":1}}],[\"但是我们知道\",{\"1\":{\"337\":1}}],[\"但是我个人建议中小型公司选用\",{\"1\":{\"252\":1}}],[\"但是存在\",{\"1\":{\"331\":1}}],[\"但是存储过程本身没有版本控制\",{\"1\":{\"164\":1,\"200\":1}}],[\"但是结合上述优点\",{\"1\":{\"320\":1}}],[\"但是安全性不高\",{\"1\":{\"293\":1}}],[\"但是另一个记录中相同的信息却没有被修改\",{\"1\":{\"288\":1}}],[\"但是主流\",{\"1\":{\"259\":1}}],[\"但是依然需要进行表级别的迁移\",{\"1\":{\"258\":1}}],[\"但是良好的设计和切分却可以减少此类情况的发生\",{\"1\":{\"255\":1}}],[\"但是中大型公司最好还是选用\",{\"1\":{\"252\":1}}],[\"但是好处在于对于各个项目是透明的\",{\"1\":{\"252\":1}}],[\"但是确实相比于\",{\"1\":{\"251\":1}}],[\"但是确实有一个很大的问题就是社区最新的维护都在\",{\"1\":{\"251\":1}}],[\"但是最近几年都没更新了\",{\"1\":{\"251\":1}}],[\"但是封锁操作需要用户自己控制\",{\"1\":{\"238\":1}}],[\"但是不能并发执行\",{\"1\":{\"423\":1}}],[\"但是不能直接赋值\",{\"1\":{\"335\":1}}],[\"但是不包含索引本身\",{\"1\":{\"235\":1}}],[\"但是不会跨域\",{\"1\":{\"38\":1}}],[\"但是数据库表名\",{\"1\":{\"85\":1}}],[\"但是输入任何内容都可以成功登录\",{\"1\":{\"52\":1}}],[\"但是\",{\"1\":{\"6\":1,\"247\":1,\"317\":2,\"381\":1,\"473\":1,\"476\":1,\"515\":1,\"518\":1,\"547\":1,\"564\":1,\"605\":1,\"637\":1,\"643\":1,\"651\":1,\"662\":2,\"671\":1,\"682\":1,\"873\":2}}],[\"但elasticsearch提供了在各种用例中处理数据的速度和灵活性\",{\"1\":{\"6\":1}}],[\"度量和安全事件数据\",{\"1\":{\"6\":1}}],[\"k5hodalrcvrylsrqazzkflyuvcyixeov9gfnqc3\",{\"1\":{\"883\":1}}],[\"ksp0aap1toj1zzwgjxqgbykhiotx7tpd\",{\"1\":{\"883\":1}}],[\"knows\",{\"1\":{\"705\":1}}],[\"know\",{\"1\":{\"684\":1}}],[\"known\",{\"1\":{\"577\":1}}],[\"knd\",{\"1\":{\"670\":2}}],[\"kb\",{\"1\":{\"513\":1,\"525\":2,\"661\":2}}],[\"kate\",{\"1\":{\"491\":1,\"492\":1}}],[\"kafka简介\",{\"0\":{\"836\":1}}],[\"kafka\",{\"0\":{\"835\":1},\"1\":{\"18\":2,\"21\":2},\"2\":{\"837\":1}}],[\"kd\",{\"1\":{\"491\":1}}],[\"kersschot\",{\"1\":{\"640\":1,\"682\":3,\"686\":2}}],[\"ken\",{\"1\":{\"469\":2,\"481\":1}}],[\"key2\",{\"1\":{\"605\":5}}],[\"key1\",{\"1\":{\"605\":12,\"608\":14}}],[\"keyblog\",{\"1\":{\"376\":1}}],[\"keytype\",{\"1\":{\"365\":2,\"605\":4,\"606\":1}}],[\"keys\",{\"1\":{\"365\":4,\"611\":4}}],[\"keystore\",{\"1\":{\"6\":2}}],[\"key类型的ke必须是可比较的\",{\"1\":{\"358\":1}}],[\"key\",{\"0\":{\"235\":1,\"360\":1},\"1\":{\"39\":5,\"72\":11,\"73\":7,\"82\":1,\"110\":1,\"111\":1,\"112\":3,\"214\":6,\"215\":3,\"216\":1,\"226\":2,\"228\":2,\"232\":1,\"235\":5,\"249\":1,\"264\":1,\"303\":1,\"335\":1,\"358\":2,\"363\":1,\"365\":3,\"376\":3,\"581\":1,\"603\":2,\"605\":11,\"606\":2,\"607\":3,\"608\":1,\"609\":20,\"611\":30,\"612\":13,\"682\":1,\"684\":1}}],[\"key=admin\",{\"1\":{\"4\":2}}],[\"kotlin\",{\"1\":{\"459\":1}}],[\"kv\",{\"1\":{\"363\":2}}],[\"kqueue\",{\"1\":{\"330\":1}}],[\"k+1\",{\"1\":{\"214\":1}}],[\"k\",{\"1\":{\"214\":4,\"536\":1,\"551\":2,\"611\":7,\"612\":4,\"660\":2,\"684\":5}}],[\"kili\",{\"1\":{\"611\":3,\"612\":2}}],[\"kiss\",{\"1\":{\"467\":1}}],[\"kitex\",{\"0\":{\"462\":1},\"1\":{\"462\":7}}],[\"kind\",{\"1\":{\"430\":1,\"668\":9,\"670\":1}}],[\"kids\",{\"1\":{\"129\":3}}],[\"kibana验证\",{\"1\":{\"6\":1}}],[\"kibana\",{\"1\":{\"6\":16}}],[\"kibana使您能够交互式地探索\",{\"1\":{\"6\":1}}],[\"kubernetes组件\",{\"0\":{\"790\":1}}],[\"kubernetes安装\",{\"0\":{\"787\":1}}],[\"kubernetes简介\",{\"0\":{\"786\":1}}],[\"kubernetes\",{\"0\":{\"785\":1},\"1\":{\"63\":1,\"78\":1},\"2\":{\"791\":1}}],[\"并检查其值以验证它与在身份验证请求中发送的值相同\",{\"1\":{\"887\":1}}],[\"并按照rfc3986第6\",{\"1\":{\"873\":1,\"892\":1}}],[\"并产生固定长度的输出\",{\"1\":{\"860\":1}}],[\"并特别注意其签名组件\",{\"1\":{\"858\":1}}],[\"并记录当前执行的\",{\"1\":{\"692\":1}}],[\"并向依赖方提供关于身份验证事件和最终用户的声明\",{\"1\":{\"868\":1}}],[\"并向\",{\"1\":{\"691\":1}}],[\"并指定一些选项\",{\"1\":{\"689\":1}}],[\"并写一些名字以\",{\"1\":{\"689\":1}}],[\"并写入到标准输出\",{\"1\":{\"682\":1}}],[\"并写入文本\",{\"1\":{\"631\":1}}],[\"并写入从服务器的日志中\",{\"1\":{\"260\":1}}],[\"并打印在日志中\",{\"1\":{\"689\":1}}],[\"并打印它的内容\",{\"1\":{\"640\":1}}],[\"并用所有这些信息返回一个错误给调用者\",{\"1\":{\"689\":1}}],[\"并用类型断言检查传入的变量是否实现了该接口\",{\"1\":{\"672\":1}}],[\"并展示\",{\"1\":{\"689\":2}}],[\"并调用\",{\"1\":{\"683\":1,\"686\":1}}],[\"并调用它\",{\"1\":{\"655\":1}}],[\"并设置\",{\"1\":{\"682\":1}}],[\"并查看每个类型是否实现了\",{\"1\":{\"675\":1}}],[\"并根据类型来输出每个参数的值\",{\"1\":{\"670\":1}}],[\"并通过一个\",{\"1\":{\"662\":1}}],[\"并通过应用程序来总控各个小事务\",{\"1\":{\"254\":1}}],[\"并从\",{\"1\":{\"661\":1}}],[\"并为它定义\",{\"1\":{\"660\":1}}],[\"并给它定义\",{\"1\":{\"660\":1}}],[\"并添加一些类似转换成字符串的方法\",{\"1\":{\"659\":1}}],[\"并添加一些说明进去\",{\"1\":{\"635\":1}}],[\"并新建\",{\"1\":{\"655\":1}}],[\"并改变它内部的成员\",{\"1\":{\"653\":1}}],[\"并试图向其填充数据\",{\"1\":{\"643\":1}}],[\"并定义方法\",{\"1\":{\"640\":1}}],[\"并零值化内存\",{\"1\":{\"640\":1}}],[\"并导入到你的代码中\",{\"1\":{\"627\":1}}],[\"并节省内存\",{\"1\":{\"626\":1}}],[\"并实现一个属于我们自己的版本\",{\"1\":{\"600\":1}}],[\"并修改它们的值\",{\"1\":{\"574\":1}}],[\"并没有返回值\",{\"1\":{\"563\":1}}],[\"并没有足够的时间来推导各类问题的最佳解决方案\",{\"1\":{\"499\":1}}],[\"并提供\",{\"1\":{\"656\":1}}],[\"并提供了行级锁和外键的约束\",{\"1\":{\"293\":1,\"294\":1}}],[\"并提高代码的可读性\",{\"1\":{\"549\":1}}],[\"并读取字符串中的内容\",{\"1\":{\"544\":1}}],[\"并返回utf\",{\"1\":{\"859\":1}}],[\"并返回对应结果的索引值\",{\"1\":{\"600\":1}}],[\"并返回一个新的八进制数组\",{\"1\":{\"859\":1}}],[\"并返回一个新的字符串\",{\"1\":{\"537\":1,\"539\":1}}],[\"并返回一个调用\",{\"1\":{\"689\":1}}],[\"并返回一个\",{\"1\":{\"542\":1}}],[\"并返回容器id\",{\"1\":{\"1\":1}}],[\"并对其反序列化\",{\"1\":{\"685\":1}}],[\"并对字符串\",{\"1\":{\"532\":1}}],[\"并对用户授予某个角色从而来控制用户的权限\",{\"1\":{\"65\":1}}],[\"并声明一个该类型的变量\",{\"1\":{\"530\":1}}],[\"并声明了name字段\",{\"1\":{\"338\":1}}],[\"并将他们放入通道\",{\"1\":{\"707\":1}}],[\"并将其与标准输入绑定\",{\"1\":{\"677\":1}}],[\"并将其存储在elasticsearch中\",{\"1\":{\"6\":1}}],[\"并将以下两个安装目录复制到这个目录\",{\"1\":{\"638\":1}}],[\"并将系统特定的代码写到\",{\"1\":{\"633\":1}}],[\"并将当前字符和前一个字符不相同的字符拷贝至另一个数组\",{\"1\":{\"602\":1}}],[\"并将\",{\"1\":{\"525\":2,\"782\":1}}],[\"并精确到小数点后\",{\"1\":{\"523\":1}}],[\"并解释你的答案\",{\"1\":{\"519\":1}}],[\"并行是一种通过使用多处理器以提高速度的能力\",{\"1\":{\"694\":1,\"695\":1}}],[\"并行赋值也被用于当一个函数返回多个返回值时\",{\"1\":{\"518\":1}}],[\"并行\",{\"1\":{\"518\":1}}],[\"并行和异步编程几乎无痛点\",{\"1\":{\"320\":1}}],[\"并遵循\",{\"1\":{\"507\":1}}],[\"并不多见\",{\"1\":{\"854\":1}}],[\"并不是一种不同于\",{\"1\":{\"686\":1}}],[\"并不是一个完整的\",{\"1\":{\"521\":1}}],[\"并不总是可能的\",{\"1\":{\"545\":1}}],[\"并不属于标准库的一部分\",{\"1\":{\"501\":1}}],[\"并不会panic\",{\"1\":{\"362\":1}}],[\"并比这两门语言占用的内存降低了\",{\"1\":{\"499\":1}}],[\"并生成一个解析器类型的对象\",{\"1\":{\"686\":1}}],[\"并生成一个结果集\",{\"1\":{\"144\":1,\"177\":1}}],[\"并生成相关文档\",{\"1\":{\"497\":1}}],[\"并保存到\",{\"1\":{\"515\":1}}],[\"并保存格式化后的源文件\",{\"1\":{\"495\":1}}],[\"并保存为文件名\",{\"1\":{\"483\":1}}],[\"并集成在主要发行版中\",{\"1\":{\"481\":1}}],[\"并以可互操作的\",{\"1\":{\"865\":1,\"866\":1}}],[\"并以\",{\"1\":{\"508\":1,\"626\":1}}],[\"并以囊地鼠\",{\"1\":{\"469\":1}}],[\"并以二进制磁盘文件的形式存储起来\",{\"1\":{\"447\":1}}],[\"并认为它是有生产价值的\",{\"1\":{\"469\":1}}],[\"并使用id令牌\",{\"1\":{\"890\":1}}],[\"并使用claims来交流关于终端用户的信息\",{\"1\":{\"865\":1}}],[\"并使用练习\",{\"1\":{\"682\":1}}],[\"并使用列表中的值依次执行函数原型\",{\"1\":{\"602\":1}}],[\"并使用小括号\",{\"1\":{\"509\":1}}],[\"并使用了和\",{\"1\":{\"471\":1}}],[\"并使该项目跻身\",{\"1\":{\"469\":1}}],[\"并使一个事务释放锁回退\",{\"1\":{\"235\":1}}],[\"并吸引更多的开发者来使用并改善它\",{\"1\":{\"469\":1}}],[\"并于\",{\"1\":{\"469\":2}}],[\"并获得有关本书的勘误情况和内容更新\",{\"1\":{\"467\":1}}],[\"并尝试设计一门全新的编程语言来解决这些问题\",{\"1\":{\"467\":1}}],[\"并结合我自身在软件工程\",{\"1\":{\"467\":1}}],[\"并结合字节跳动内部的需求\",{\"1\":{\"461\":1}}],[\"并可直接运行\",{\"1\":{\"459\":1}}],[\"并\",{\"1\":{\"455\":1}}],[\"并执行必要的测试\",{\"1\":{\"689\":1}}],[\"并执行程序中所有的\",{\"1\":{\"689\":1}}],[\"并执行\",{\"1\":{\"449\":1,\"689\":1}}],[\"并持续扫除\",{\"1\":{\"431\":1}}],[\"并把数据打印出来\",{\"1\":{\"678\":1}}],[\"并把数据写入\",{\"1\":{\"402\":1,\"405\":1}}],[\"并把读到的数据放入参数中的字节切片中\",{\"1\":{\"662\":1}}],[\"并把2者关联\",{\"1\":{\"415\":1}}],[\"并放入到这个\",{\"1\":{\"409\":1}}],[\"并在确定距离最后一次最终用户身份验证已经经过了太长时间时请求重新身份验证\",{\"1\":{\"887\":1}}],[\"并在网络浏览器中打开它\",{\"1\":{\"692\":1}}],[\"并在命令行中用传给\",{\"1\":{\"689\":1}}],[\"并在\",{\"1\":{\"662\":1,\"676\":1,\"692\":1}}],[\"并在包里定义类型\",{\"1\":{\"662\":1}}],[\"并在第\",{\"1\":{\"625\":1}}],[\"并在条件语句中作为判定条件来决定是否执行\",{\"1\":{\"549\":1}}],[\"并在未来的章节中展开深入讨论\",{\"1\":{\"547\":1}}],[\"并在内存中使用\",{\"1\":{\"531\":1}}],[\"并在内存中开辟一个新的内存地址\",{\"1\":{\"346\":1}}],[\"并在类型的名称中就可以看出来\",{\"1\":{\"523\":1}}],[\"并在最后自动增加换行字符\",{\"1\":{\"507\":1}}],[\"并在完成代码更新后在控制台输出相关的文件名称\",{\"1\":{\"498\":1}}],[\"并在实际开发过程中忍受着它所带来的令人头疼的一些问题\",{\"1\":{\"467\":1}}],[\"并在用户成功认证后进行应答\",{\"1\":{\"39\":1}}],[\"并有机会修改它\",{\"1\":{\"328\":1}}],[\"并处理并发的\",{\"1\":{\"320\":1}}],[\"并发的\",{\"1\":{\"696\":1}}],[\"并发程序可能是并行的\",{\"1\":{\"695\":1}}],[\"并发和并行的差异\",{\"0\":{\"695\":1}}],[\"并发和并行编程的极佳支持\",{\"1\":{\"473\":1}}],[\"并发访问对象\",{\"1\":{\"654\":1}}],[\"并发支持\",{\"1\":{\"479\":1}}],[\"并发支撑情况\",{\"1\":{\"248\":1}}],[\"并发相关\",{\"0\":{\"422\":1}}],[\"并发读写的时候运行时会有检查\",{\"1\":{\"358\":1}}],[\"并发而生的一种编程语言\",{\"1\":{\"320\":1}}],[\"并发\",{\"1\":{\"317\":1}}],[\"并发性能\",{\"1\":{\"243\":1}}],[\"并发一致性解决方案\",{\"1\":{\"238\":1}}],[\"并发一致性问题\",{\"0\":{\"238\":1}}],[\"并发控制可以通过封锁来实现\",{\"1\":{\"238\":1}}],[\"并发控制\",{\"0\":{\"229\":1},\"1\":{\"405\":1}}],[\"并且id令牌没有加密\",{\"1\":{\"887\":1}}],[\"并且客户端在注册时明确要求使用none\",{\"1\":{\"869\":1}}],[\"并且可选地分别使用jws\",{\"1\":{\"869\":1}}],[\"并且可以包含端口\",{\"1\":{\"868\":1}}],[\"并且可以在一个环境中被识别的东西\",{\"1\":{\"868\":1}}],[\"并且可以根据错误场景做一些补救和恢复操作\",{\"1\":{\"688\":1}}],[\"并且可以由\",{\"1\":{\"585\":1}}],[\"并且可以进行任意深度的嵌套\",{\"1\":{\"547\":1}}],[\"并且可以使用任何精度而不会导致溢出\",{\"1\":{\"513\":1}}],[\"并且可以同时指定多个\",{\"1\":{\"449\":1}}],[\"并且以$\",{\"1\":{\"757\":1}}],[\"并且以字节缓冲模拟网络传输的简单例子\",{\"1\":{\"686\":1}}],[\"并且文件名满足这种形式\",{\"1\":{\"689\":1}}],[\"并且调用函数后的错误检查代码也被简化为调用\",{\"1\":{\"689\":1}}],[\"并且主调\",{\"1\":{\"687\":1}}],[\"并且只有\",{\"1\":{\"695\":1}}],[\"并且只有在两个的值的类型相同的情况下才可以使用\",{\"1\":{\"521\":1}}],[\"并且只应该作为\",{\"1\":{\"687\":1}}],[\"并且保证发出的数据和收到的数据检验和一致\",{\"1\":{\"686\":1}}],[\"并且还包含一些基准测试函数的功能\",{\"1\":{\"689\":1}}],[\"并且还提供了很大的灵活性\",{\"1\":{\"686\":1}}],[\"并且还没有取得很大进展\",{\"1\":{\"317\":1}}],[\"并且总是可以用\",{\"1\":{\"686\":1}}],[\"并且对每个标签调用\",{\"1\":{\"682\":1}}],[\"并且忽略了可能发生的错误\",{\"1\":{\"680\":1}}],[\"并且多重继承可以通过实现多个接口实现\",{\"1\":{\"676\":1}}],[\"并且开发者想要抽象出这些行为\",{\"1\":{\"673\":1}}],[\"并且不应该遮住它弹出的整个窗口\",{\"1\":{\"873\":1}}],[\"并且不需要显式地声明类型是否满足某个接口\",{\"1\":{\"671\":1}}],[\"并且不能剥离\",{\"1\":{\"671\":1}}],[\"并且不是所有的反射值都有这个属性\",{\"1\":{\"669\":1}}],[\"并且仍然是不可设置的\",{\"1\":{\"669\":1}}],[\"并且它们的使用符合此规范\",{\"1\":{\"874\":1}}],[\"并且它们对栈进行了分割\",{\"1\":{\"694\":1}}],[\"并且它们都有一个大致的意思\",{\"1\":{\"658\":1}}],[\"并且它的方法\",{\"1\":{\"662\":1}}],[\"并且有相同的方法签名\",{\"1\":{\"662\":1}}],[\"并且有容量长度\",{\"1\":{\"353\":1}}],[\"并且表现出了相对应的行为\",{\"1\":{\"662\":1}}],[\"并且支持多重继承和类型独立分派\",{\"1\":{\"659\":1}}],[\"并且在这种情况下op允许使用http重定向uri\",{\"1\":{\"873\":1}}],[\"并且在它里面调用了\",{\"1\":{\"656\":1}}],[\"并且在每个文件非注释的第一行都使用\",{\"1\":{\"506\":1}}],[\"并且给\",{\"1\":{\"655\":1}}],[\"并且大体上意思相同\",{\"1\":{\"651\":1}}],[\"并且链表可以动态增长或收缩\",{\"1\":{\"640\":1}}],[\"并且某些字段还可以被忽略掉\",{\"1\":{\"640\":1}}],[\"并且名字也是\",{\"1\":{\"639\":1}}],[\"并且源代码树被存储在网络硬盘上\",{\"1\":{\"628\":1}}],[\"并且索引向前移动一个字节\",{\"1\":{\"595\":1}}],[\"并且返回拷贝的元素个数\",{\"1\":{\"593\":1}}],[\"并且返回类型为\",{\"1\":{\"588\":1}}],[\"并且创建了一个长度为\",{\"1\":{\"588\":1}}],[\"并且将数组打印在屏幕上\",{\"1\":{\"580\":1}}],[\"并且必须是一个非负整数\",{\"1\":{\"580\":1}}],[\"并且必须位于语句的最后\",{\"1\":{\"144\":1,\"177\":1}}],[\"并且您的函数是有返回值的\",{\"1\":{\"551\":1}}],[\"并且右大括号与对应的\",{\"1\":{\"549\":1}}],[\"并且会使程序崩溃\",{\"1\":{\"547\":1}}],[\"并且隐藏间接引用\",{\"1\":{\"547\":1}}],[\"并且更改这个变量自己的值\",{\"1\":{\"547\":1}}],[\"并且与它所指向的值的大小无关\",{\"1\":{\"547\":1}}],[\"并且是大规模编程和可适应的演进型设计的关键\",{\"1\":{\"676\":1}}],[\"并且是\",{\"1\":{\"531\":1}}],[\"并且是每个\",{\"1\":{\"487\":1}}],[\"并且原生支持复数\",{\"1\":{\"523\":1}}],[\"并且执行优先级比\",{\"1\":{\"519\":1}}],[\"并且位置分配也可能不同\",{\"1\":{\"516\":1}}],[\"并且没有赋值的常量默认会应用上一行的赋值表达式\",{\"1\":{\"513\":1}}],[\"并且能够更加高效地使用内存\",{\"1\":{\"499\":1}}],[\"并且使用到了变量\",{\"1\":{\"519\":1}}],[\"并且使用\",{\"1\":{\"469\":1}}],[\"并且拥有合适的学习环境\",{\"1\":{\"467\":1}}],[\"并且生成一个\",{\"1\":{\"450\":1}}],[\"并且放置到当前工作区的\",{\"1\":{\"449\":1}}],[\"并且划分\",{\"1\":{\"440\":1}}],[\"并且需要实现基类中所有的纯虚函数\",{\"1\":{\"392\":1}}],[\"并且存储在调用函数的栈帧中\",{\"1\":{\"348\":1}}],[\"并且允许面向对象的编程风格\",{\"1\":{\"312\":1}}],[\"并且仅返回来自此表中满足连接条件的那些行\",{\"1\":{\"141\":1,\"174\":1}}],[\"并且比子查询的效率一般会更快\",{\"1\":{\"137\":1,\"170\":1}}],[\"并且条件语句使用\",{\"1\":{\"137\":1,\"170\":1}}],[\"并且为每个列指定不同的排序方式\",{\"1\":{\"134\":1}}],[\"并且\",{\"1\":{\"132\":1,\"450\":1,\"551\":1,\"608\":2,\"653\":1,\"669\":1}}],[\"并且把\",{\"1\":{\"51\":1}}],[\"并限制语句和查询的效果\",{\"1\":{\"84\":1}}],[\"并被授予不同的角色\",{\"1\":{\"65\":1}}],[\"并得到了普遍的公认\",{\"1\":{\"64\":1}}],[\"并先后提出了许多类型的rbac模型\",{\"1\":{\"64\":1}}],[\"并管理和监视堆栈\",{\"1\":{\"6\":1}}],[\"8表示形式的字节作为验证签名的密钥\",{\"1\":{\"887\":1}}],[\"8中的访问令牌验证规则\",{\"1\":{\"885\":1}}],[\"8xloxbtzp8\",{\"1\":{\"883\":1}}],[\"8编码的八进制数组\",{\"1\":{\"859\":1}}],[\"8编码下占3个字节\",{\"1\":{\"327\":1}}],[\"863\",{\"1\":{\"709\":1}}],[\"82\",{\"1\":{\"832\":30}}],[\"829\",{\"1\":{\"709\":1}}],[\"827\",{\"1\":{\"709\":1}}],[\"823\",{\"1\":{\"709\":1}}],[\"821\",{\"1\":{\"709\":1}}],[\"84\",{\"1\":{\"689\":1}}],[\"8sort\",{\"1\":{\"662\":1}}],[\"8inheritance\",{\"1\":{\"655\":1}}],[\"877\",{\"1\":{\"709\":1}}],[\"87\",{\"1\":{\"606\":1,\"611\":6,\"612\":3,\"692\":1}}],[\"8719\",{\"1\":{\"5\":2}}],[\"839\",{\"1\":{\"709\":1}}],[\"83\",{\"1\":{\"606\":1,\"709\":1}}],[\"8min\",{\"1\":{\"591\":1}}],[\"8mb\",{\"1\":{\"438\":1}}],[\"8rectangle\",{\"1\":{\"554\":1}}],[\"859\",{\"1\":{\"709\":1}}],[\"857\",{\"1\":{\"709\":1}}],[\"853\",{\"1\":{\"709\":1}}],[\"85\",{\"1\":{\"528\":1}}],[\"854\",{\"1\":{\"523\":2}}],[\"89\",{\"1\":{\"528\":1,\"570\":2,\"571\":1,\"709\":1}}],[\"8904\",{\"1\":{\"268\":1}}],[\"811\",{\"1\":{\"709\":1}}],[\"81\",{\"1\":{\"692\":1}}],[\"816681689\",{\"1\":{\"528\":1}}],[\"81913036\",{\"1\":{\"356\":1}}],[\"8l\",{\"1\":{\"481\":1}}],[\"8g\",{\"1\":{\"481\":1,\"696\":1}}],[\"8a\",{\"1\":{\"481\":1}}],[\"8c\",{\"1\":{\"481\":1}}],[\"8字符\",{\"1\":{\"327\":1}}],[\"809\",{\"1\":{\"709\":1}}],[\"807\",{\"1\":{\"523\":1}}],[\"8080\",{\"1\":{\"638\":3}}],[\"808\",{\"1\":{\"523\":1}}],[\"80\",{\"1\":{\"288\":1,\"291\":2}}],[\"800w\",{\"1\":{\"438\":1}}],[\"800\",{\"1\":{\"278\":2,\"427\":2,\"676\":1}}],[\"800049\",{\"1\":{\"662\":1}}],[\"80006059\",{\"1\":{\"337\":1}}],[\"8000\",{\"1\":{\"10\":2,\"12\":3,\"17\":1,\"20\":1,\"427\":2}}],[\"8\",{\"0\":{\"144\":1,\"145\":1,\"329\":1,\"374\":1,\"390\":1,\"478\":1,\"488\":1,\"499\":1,\"541\":1,\"546\":1,\"573\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"630\":1,\"631\":1,\"632\":1,\"633\":1,\"658\":1,\"661\":1,\"706\":1,\"732\":1,\"762\":1,\"814\":1,\"888\":1,\"899\":1,\"913\":1,\"926\":1,\"965\":1},\"1\":{\"6\":4,\"63\":1,\"317\":1,\"320\":1,\"327\":1,\"363\":1,\"365\":3,\"388\":1,\"429\":3,\"438\":1,\"467\":1,\"469\":3,\"475\":3,\"487\":1,\"496\":2,\"499\":1,\"504\":1,\"513\":1,\"516\":2,\"523\":3,\"528\":2,\"531\":5,\"532\":3,\"536\":1,\"547\":2,\"549\":1,\"551\":2,\"553\":2,\"555\":1,\"557\":5,\"558\":1,\"559\":2,\"561\":3,\"568\":1,\"569\":1,\"570\":4,\"573\":1,\"574\":1,\"580\":1,\"581\":4,\"583\":1,\"587\":2,\"588\":1,\"592\":5,\"605\":3,\"608\":2,\"609\":3,\"610\":2,\"611\":2,\"612\":2,\"629\":1,\"631\":3,\"635\":1,\"638\":1,\"640\":1,\"647\":1,\"655\":1,\"662\":1,\"663\":1,\"670\":1,\"676\":1,\"677\":1,\"680\":3,\"682\":3,\"686\":4,\"689\":3,\"692\":4,\"709\":1,\"849\":1,\"855\":2}}],[\"887\",{\"1\":{\"709\":1}}],[\"883\",{\"1\":{\"709\":1}}],[\"881\",{\"1\":{\"709\":1}}],[\"8858\",{\"1\":{\"5\":2}}],[\"88480107\",{\"1\":{\"338\":1}}],[\"8848\",{\"1\":{\"4\":5}}],[\"b向上翻页\",{\"1\":{\"818\":1}}],[\"bzip2\",{\"1\":{\"679\":1}}],[\"bzr\",{\"1\":{\"636\":1}}],[\"b2\",{\"1\":{\"653\":5}}],[\"b2b\",{\"1\":{\"251\":1}}],[\"b1\",{\"1\":{\"653\":5}}],[\"bx\",{\"1\":{\"648\":2}}],[\"b0\",{\"1\":{\"606\":1}}],[\"bmws\",{\"1\":{\"676\":4}}],[\"bmw2\",{\"1\":{\"676\":2}}],[\"bmwcount\",{\"1\":{\"676\":3}}],[\"bmw\",{\"1\":{\"662\":1,\"676\":11}}],[\"bmp\",{\"1\":{\"574\":2}}],[\"bmap定义\",{\"1\":{\"365\":1}}],[\"bmap\",{\"1\":{\"363\":3,\"365\":3}}],[\"b3\",{\"1\":{\"526\":2}}],[\"bbedit\",{\"1\":{\"491\":1}}],[\"bsd\",{\"1\":{\"469\":1,\"471\":1,\"709\":2}}],[\"b取模确定bucket位置\",{\"1\":{\"374\":1,\"375\":1}}],[\"b=2\",{\"1\":{\"364\":1}}],[\"b=5\",{\"1\":{\"163\":1,\"199\":1}}],[\"businessmethod\",{\"1\":{\"803\":1}}],[\"buzz\",{\"1\":{\"554\":2}}],[\"burger\",{\"1\":{\"536\":3}}],[\"buildyear\",{\"1\":{\"676\":4}}],[\"build\",{\"0\":{\"449\":1},\"1\":{\"448\":1,\"449\":9,\"450\":1,\"481\":1,\"495\":1,\"506\":1,\"782\":1}}],[\"bug\",{\"1\":{\"438\":1,\"469\":1,\"477\":1,\"549\":1,\"682\":1,\"708\":1}}],[\"bufio\",{\"1\":{\"614\":2,\"662\":3,\"677\":11,\"678\":5,\"679\":4,\"680\":5,\"682\":13}}],[\"buffers\",{\"1\":{\"637\":1}}],[\"buffer\",{\"1\":{\"532\":1,\"590\":19,\"625\":2,\"662\":3,\"686\":1,\"703\":1}}],[\"buffered\",{\"1\":{\"462\":1,\"677\":1,\"682\":3,\"703\":1}}],[\"bufferedimage\",{\"1\":{\"42\":7}}],[\"buf\",{\"1\":{\"398\":2,\"405\":1,\"590\":4,\"678\":5,\"682\":12,\"703\":3}}],[\"but\",{\"1\":{\"365\":1,\"592\":1,\"686\":1,\"689\":3}}],[\"bucket0\",{\"1\":{\"609\":1}}],[\"bucket数量\",{\"1\":{\"368\":1}}],[\"bucket数据结构指示下一个bucket的指针称为overflow\",{\"1\":{\"367\":1}}],[\"bucket数据结构由runtime\",{\"1\":{\"365\":1}}],[\"bucket数据结构\",{\"0\":{\"365\":1}}],[\"bucketcnt\",{\"1\":{\"365\":3}}],[\"bucket很多时候被翻译为桶\",{\"1\":{\"364\":1}}],[\"buckets数量不变\",{\"1\":{\"373\":1}}],[\"buckets长度是2^b为4\",{\"1\":{\"364\":1}}],[\"buckets\",{\"1\":{\"364\":2}}],[\"bucket\",{\"1\":{\"363\":2,\"365\":4,\"367\":1,\"609\":1}}],[\"bound\",{\"1\":{\"585\":1,\"686\":1}}],[\"bottom\",{\"1\":{\"568\":2}}],[\"boom\",{\"1\":{\"682\":2,\"686\":1}}],[\"book\",{\"1\":{\"561\":1,\"627\":1}}],[\"bootstrap=$home\",{\"1\":{\"483\":1}}],[\"bootstrap\",{\"1\":{\"483\":3}}],[\"bool1\",{\"1\":{\"549\":5}}],[\"bool\",{\"0\":{\"521\":1},\"1\":{\"360\":1,\"383\":2,\"504\":1,\"509\":1,\"515\":4,\"516\":1,\"518\":1,\"521\":1,\"526\":1,\"534\":2,\"535\":1,\"549\":1,\"550\":1,\"567\":1,\"570\":2,\"572\":2,\"593\":1,\"600\":1,\"608\":2,\"628\":3,\"645\":1,\"651\":1,\"662\":15,\"663\":3,\"668\":2,\"676\":5,\"682\":7,\"688\":2,\"689\":3,\"705\":1}}],[\"booleans\",{\"1\":{\"549\":1}}],[\"boolean\",{\"0\":{\"755\":1},\"1\":{\"301\":2,\"663\":1,\"682\":1,\"755\":1,\"762\":1}}],[\"body><\",{\"1\":{\"638\":1}}],[\"body\",{\"1\":{\"12\":1,\"427\":8,\"573\":1,\"680\":2}}],[\"blue\",{\"1\":{\"760\":2}}],[\"blank\",{\"0\":{\"565\":1},\"1\":{\"565\":2}}],[\"bladex\",{\"1\":{\"5\":2}}],[\"blowfish\",{\"1\":{\"686\":1}}],[\"blog\",{\"0\":{\"987\":1},\"1\":{\"336\":1,\"337\":1,\"355\":1,\"356\":1,\"456\":1,\"668\":1,\"692\":1}}],[\"blocked\",{\"1\":{\"709\":1}}],[\"blocking\",{\"1\":{\"702\":1}}],[\"block3\",{\"1\":{\"701\":1,\"703\":1}}],[\"block2\",{\"1\":{\"701\":1,\"707\":1}}],[\"blocksize\",{\"1\":{\"686\":2}}],[\"block\",{\"1\":{\"330\":2,\"686\":2,\"701\":2}}],[\"blob\",{\"1\":{\"221\":1,\"301\":1,\"684\":1}}],[\"b+tree\",{\"1\":{\"215\":7}}],[\"b+\",{\"0\":{\"215\":1,\"216\":1},\"1\":{\"213\":1,\"216\":4,\"294\":3}}],[\"bravo\",{\"1\":{\"611\":3,\"612\":2}}],[\"branch\",{\"1\":{\"483\":2,\"823\":1,\"824\":1}}],[\"brown\",{\"1\":{\"543\":3}}],[\"bruce\",{\"1\":{\"467\":1}}],[\"brs01\",{\"1\":{\"131\":1,\"132\":1}}],[\"breakdown\",{\"1\":{\"205\":1}}],[\"break\",{\"0\":{\"558\":1},\"1\":{\"12\":1,\"427\":1,\"504\":1,\"548\":1,\"549\":1,\"551\":1,\"556\":2,\"558\":7,\"559\":3,\"590\":1,\"678\":2,\"682\":1,\"709\":4}}],[\"bare\",{\"1\":{\"662\":1}}],[\"barak\",{\"1\":{\"645\":1,\"656\":5}}],[\"bar\",{\"1\":{\"643\":4,\"674\":4}}],[\"barval\",{\"1\":{\"611\":5,\"612\":3}}],[\"banana=2\",{\"1\":{\"513\":1}}],[\"banana\",{\"1\":{\"513\":1}}],[\"badcall\",{\"1\":{\"689\":2}}],[\"bad\",{\"1\":{\"383\":1,\"689\":3,\"884\":1}}],[\"baidu\",{\"1\":{\"361\":4}}],[\"bag\",{\"1\":{\"133\":1}}],[\"backend\",{\"1\":{\"519\":2}}],[\"back\",{\"1\":{\"78\":1,\"583\":1}}],[\"basic\",{\"1\":{\"881\":1}}],[\"basically\",{\"1\":{\"242\":1}}],[\"base\",{\"1\":{\"657\":7,\"678\":2,\"689\":1}}],[\"base是基本可用\",{\"1\":{\"242\":1}}],[\"based\",{\"0\":{\"59\":1},\"1\":{\"60\":2,\"63\":3,\"64\":1}}],[\"base64\",{\"1\":{\"37\":2,\"849\":4,\"855\":2,\"856\":2,\"859\":8}}],[\"base64url算法\",{\"0\":{\"37\":1}}],[\"base64urlencode\",{\"1\":{\"36\":2}}],[\"base64url\",{\"1\":{\"35\":1,\"37\":2,\"849\":1}}],[\"bashrc\",{\"1\":{\"483\":2,\"629\":1,\"631\":1,\"632\":1}}],[\"bash\",{\"1\":{\"3\":1,\"4\":1,\"6\":3,\"481\":1,\"483\":4,\"689\":1}}],[\"btree\",{\"1\":{\"72\":15,\"73\":9}}],[\"bidirectional\",{\"1\":{\"709\":1}}],[\"bill\",{\"1\":{\"681\":2}}],[\"billion\",{\"1\":{\"513\":1}}],[\"bird\",{\"1\":{\"671\":7}}],[\"bigarray\",{\"1\":{\"694\":1,\"704\":3}}],[\"big\",{\"0\":{\"626\":1},\"1\":{\"527\":3,\"571\":1,\"614\":2,\"626\":23}}],[\"bigints\",{\"1\":{\"626\":2}}],[\"bigint\",{\"1\":{\"72\":14,\"73\":8}}],[\"bison\",{\"1\":{\"481\":1,\"483\":1}}],[\"bitsize\",{\"1\":{\"545\":3}}],[\"bitflag\",{\"1\":{\"525\":2}}],[\"bitp\",{\"1\":{\"525\":4}}],[\"bitbucket\",{\"1\":{\"469\":1,\"636\":1}}],[\"bitmap\",{\"1\":{\"440\":1}}],[\"bit\",{\"1\":{\"365\":1,\"523\":4}}],[\"binop\",{\"1\":{\"561\":2,\"572\":2}}],[\"binet\",{\"1\":{\"488\":1}}],[\"bindings\",{\"1\":{\"637\":1}}],[\"bind\",{\"1\":{\"328\":1}}],[\"binary\",{\"1\":{\"301\":2,\"686\":1}}],[\"binlog\",{\"1\":{\"260\":4}}],[\"bin\",{\"1\":{\"6\":6,\"446\":3,\"482\":2,\"483\":1,\"486\":1,\"631\":1,\"689\":4,\"690\":2}}],[\"bye\",{\"1\":{\"547\":1}}],[\"bytes\",{\"0\":{\"590\":1},\"1\":{\"531\":1,\"532\":1,\"550\":1,\"557\":2,\"590\":10,\"602\":2,\"614\":2,\"625\":1,\"662\":1,\"686\":3,\"688\":1}}],[\"bytesize\",{\"1\":{\"525\":2}}],[\"byte用来强调数据是raw\",{\"1\":{\"333\":1}}],[\"byte\",{\"1\":{\"301\":1,\"327\":1,\"365\":1,\"383\":1,\"504\":1,\"531\":4,\"532\":1,\"544\":2,\"545\":1,\"557\":14,\"585\":1,\"588\":2,\"590\":5,\"593\":5,\"595\":3,\"598\":1,\"599\":1,\"602\":7,\"624\":2,\"662\":5,\"677\":1,\"678\":3,\"680\":1,\"682\":6,\"683\":2,\"684\":1,\"686\":7}}],[\"by\",{\"0\":{\"134\":1,\"135\":1,\"185\":1,\"256\":2,\"304\":1,\"563\":2},\"1\":{\"52\":1,\"134\":3,\"135\":9,\"136\":3,\"144\":1,\"155\":1,\"177\":1,\"185\":9,\"186\":3,\"191\":1,\"221\":4,\"283\":2,\"299\":2,\"304\":3,\"305\":2,\"365\":2,\"543\":2,\"648\":2,\"688\":1,\"709\":4}}],[\"bench=\",{\"1\":{\"689\":1}}],[\"benchmarkreverse\",{\"1\":{\"689\":1}}],[\"benchmarkzzz\",{\"1\":{\"689\":1}}],[\"benchmark\",{\"1\":{\"461\":1,\"499\":1,\"689\":1}}],[\"being\",{\"1\":{\"682\":1}}],[\"beijing\",{\"1\":{\"608\":5,\"700\":2,\"709\":2}}],[\"behavior\",{\"1\":{\"657\":2}}],[\"behaviors\",{\"1\":{\"657\":2}}],[\"better\",{\"1\":{\"656\":4}}],[\"between\",{\"1\":{\"131\":4,\"132\":1,\"226\":2,\"235\":1,\"270\":1,\"549\":1,\"551\":2}}],[\"beyond\",{\"1\":{\"585\":1}}],[\"becomes\",{\"1\":{\"572\":1,\"682\":1}}],[\"beef\",{\"1\":{\"513\":1}}],[\"been\",{\"1\":{\"383\":1}}],[\"belgium\",{\"1\":{\"662\":1,\"682\":4,\"686\":2}}],[\"bel\",{\"1\":{\"463\":1}}],[\"be\",{\"1\":{\"365\":1,\"517\":1,\"546\":2,\"610\":1,\"631\":1,\"638\":1,\"652\":1,\"656\":4,\"662\":1,\"686\":2,\"688\":1,\"689\":2,\"709\":2}}],[\"beginning\",{\"1\":{\"532\":1,\"697\":6}}],[\"begin\",{\"1\":{\"162\":1,\"163\":4,\"166\":3,\"167\":2,\"168\":1,\"198\":1,\"199\":4,\"202\":3,\"203\":2,\"204\":1,\"561\":1}}],[\"beautiful\",{\"1\":{\"553\":1,\"557\":1}}],[\"bear\",{\"1\":{\"133\":1}}],[\"bearer\",{\"1\":{\"38\":1,\"883\":1}}],[\"bean\",{\"1\":{\"133\":1}}],[\"before\",{\"1\":{\"35\":1,\"166\":1,\"167\":1,\"202\":1,\"203\":1,\"507\":1,\"561\":2,\"568\":2}}],[\"b\",{\"0\":{\"214\":1,\"216\":1},\"1\":{\"28\":1,\"151\":1,\"163\":5,\"187\":1,\"199\":5,\"213\":1,\"214\":2,\"215\":4,\"216\":2,\"217\":1,\"223\":1,\"226\":4,\"227\":5,\"287\":4,\"306\":8,\"324\":5,\"325\":2,\"326\":1,\"353\":1,\"364\":1,\"370\":2,\"483\":2,\"496\":2,\"506\":4,\"507\":2,\"509\":2,\"511\":3,\"513\":5,\"515\":11,\"518\":10,\"521\":1,\"523\":4,\"525\":2,\"527\":3,\"530\":2,\"545\":1,\"551\":5,\"553\":1,\"554\":1,\"557\":1,\"559\":5,\"561\":3,\"563\":7,\"565\":6,\"566\":2,\"567\":4,\"568\":12,\"572\":3,\"574\":9,\"580\":1,\"585\":5,\"591\":2,\"595\":3,\"599\":9,\"601\":7,\"602\":9,\"610\":4,\"627\":1,\"640\":14,\"647\":5,\"648\":8,\"649\":13,\"651\":6,\"653\":14,\"656\":2,\"659\":2,\"660\":5,\"662\":4,\"666\":3,\"670\":2,\"671\":5,\"674\":2,\"682\":6,\"684\":3,\"685\":1,\"686\":6,\"689\":8,\"868\":1}}],[\"iii\",{\"1\":{\"677\":1}}],[\"ii\",{\"1\":{\"677\":1}}],[\"ivo\",{\"1\":{\"677\":4,\"689\":10}}],[\"iveryimportantpig\",{\"1\":{\"458\":1}}],[\"i是一个整数且\",{\"1\":{\"585\":1}}],[\"i==5\",{\"1\":{\"559\":1}}],[\"i<=100\",{\"1\":{\"689\":1}}],[\"i<10\",{\"1\":{\"680\":1}}],[\"i<7\",{\"1\":{\"559\":1}}],[\"i<3\",{\"1\":{\"558\":1}}],[\"i<5\",{\"1\":{\"553\":1}}],[\"ixfield\",{\"1\":{\"645\":2}}],[\"ix++\",{\"1\":{\"553\":2,\"676\":2}}],[\"ix\",{\"1\":{\"553\":9,\"557\":1,\"562\":5,\"591\":9,\"645\":2,\"676\":4}}],[\"i1\",{\"1\":{\"547\":13,\"563\":2,\"565\":4,\"640\":3}}],[\"iec\",{\"1\":{\"868\":1,\"869\":1}}],[\"ieee\",{\"1\":{\"523\":1}}],[\"ietf\",{\"1\":{\"39\":1}}],[\"iz\",{\"1\":{\"509\":3,\"511\":2}}],[\"igo\",{\"1\":{\"488\":1}}],[\"ibm\",{\"1\":{\"487\":1}}],[\"ibfk\",{\"1\":{\"72\":5,\"73\":4}}],[\"irc\",{\"1\":{\"469\":2}}],[\"iap\",{\"1\":{\"869\":1}}],[\"ian\",{\"1\":{\"469\":1}}],[\"iatdate\",{\"1\":{\"35\":1}}],[\"iat\",{\"1\":{\"35\":1,\"852\":1,\"869\":2,\"887\":1}}],[\"i为interface\",{\"1\":{\"340\":1}}],[\"i++\",{\"1\":{\"325\":4,\"424\":2,\"427\":2,\"527\":4,\"528\":3,\"553\":4,\"556\":1,\"557\":2,\"558\":2,\"559\":4,\"568\":2,\"570\":1,\"573\":2,\"577\":1,\"580\":3,\"581\":2,\"585\":3,\"586\":1,\"587\":2,\"592\":2,\"599\":1,\"611\":1,\"645\":1,\"662\":3,\"670\":2,\"671\":1,\"680\":1,\"682\":3,\"689\":1,\"701\":1,\"705\":1,\"707\":3,\"708\":2,\"709\":2}}],[\"i+1\",{\"1\":{\"214\":1,\"553\":1,\"557\":1,\"592\":1,\"601\":1,\"662\":3}}],[\"il\",{\"1\":{\"144\":1,\"177\":1}}],[\"ip\",{\"1\":{\"51\":2,\"72\":1,\"626\":5}}],[\"ipv4\",{\"1\":{\"51\":3}}],[\"iptables\",{\"1\":{\"51\":7}}],[\"im\",{\"1\":{\"524\":3,\"626\":4}}],[\"imag\",{\"1\":{\"504\":1,\"524\":1,\"569\":1}}],[\"images\",{\"1\":{\"782\":2,\"832\":4}}],[\"imagesize\",{\"1\":{\"42\":3}}],[\"image\",{\"1\":{\"246\":1,\"247\":1,\"621\":1,\"782\":7}}],[\"imageio\",{\"1\":{\"42\":2}}],[\"imethod\",{\"1\":{\"383\":1}}],[\"implicit\",{\"1\":{\"868\":1,\"869\":3}}],[\"implementation\",{\"1\":{\"672\":1,\"688\":1}}],[\"implemented\",{\"1\":{\"561\":1}}],[\"implementsfooer\",{\"1\":{\"674\":3}}],[\"implements\",{\"1\":{\"508\":1,\"662\":1,\"667\":3,\"682\":1}}],[\"implementing\",{\"1\":{\"508\":1}}],[\"implement\",{\"1\":{\"383\":1,\"662\":3,\"671\":1}}],[\"impossible\",{\"1\":{\"662\":1}}],[\"important\",{\"1\":{\"645\":2}}],[\"imported\",{\"1\":{\"506\":1}}],[\"import\",{\"1\":{\"18\":1,\"21\":1,\"340\":1,\"346\":2,\"415\":1,\"424\":1,\"427\":2,\"483\":1,\"485\":1,\"501\":7,\"504\":1,\"505\":1,\"506\":13,\"508\":1,\"510\":2,\"515\":1,\"519\":2,\"523\":1,\"525\":1,\"528\":1,\"530\":1,\"534\":1,\"536\":1,\"538\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":1,\"546\":1,\"547\":2,\"549\":2,\"550\":1,\"551\":2,\"553\":2,\"555\":1,\"557\":1,\"559\":2,\"563\":1,\"564\":1,\"565\":2,\"566\":1,\"567\":1,\"568\":5,\"570\":2,\"572\":1,\"573\":2,\"574\":2,\"577\":1,\"580\":2,\"581\":2,\"583\":1,\"585\":1,\"587\":1,\"590\":1,\"591\":2,\"592\":1,\"593\":1,\"595\":1,\"605\":2,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"614\":1,\"624\":1,\"625\":1,\"626\":1,\"627\":13,\"628\":1,\"629\":1,\"631\":3,\"632\":1,\"636\":1,\"638\":2,\"640\":3,\"642\":1,\"644\":1,\"645\":1,\"647\":1,\"648\":1,\"651\":4,\"653\":2,\"654\":1,\"655\":1,\"656\":2,\"657\":2,\"660\":1,\"662\":6,\"663\":2,\"666\":1,\"668\":1,\"669\":1,\"670\":3,\"671\":1,\"673\":1,\"676\":1,\"677\":3,\"678\":4,\"679\":1,\"680\":3,\"681\":1,\"682\":6,\"686\":4,\"688\":2,\"689\":8,\"692\":1,\"697\":1,\"700\":1,\"701\":1,\"702\":1,\"707\":1,\"708\":1,\"709\":3}}],[\"img\",{\"1\":{\"72\":1,\"80\":1,\"84\":1,\"168\":1,\"236\":1,\"237\":1,\"238\":4,\"260\":1,\"261\":1,\"315\":1,\"326\":1,\"327\":1,\"361\":1,\"364\":1,\"365\":1,\"367\":1,\"372\":3,\"373\":1,\"383\":2,\"398\":1,\"402\":1,\"403\":1,\"413\":1,\"446\":4,\"447\":1}}],[\"id对应的client\",{\"1\":{\"887\":1}}],[\"id是否为索赔值\",{\"1\":{\"887\":1}}],[\"id值\",{\"1\":{\"887\":1}}],[\"id与已认证会话关联的令牌值\",{\"1\":{\"883\":1}}],[\"id注册的身份验证方法向令牌端点进行身份验证\",{\"1\":{\"881\":1}}],[\"id令牌验证\",{\"0\":{\"902\":1,\"917\":1,\"925\":1}}],[\"id令牌必须被拒绝\",{\"1\":{\"887\":1}}],[\"id令牌必须使用jws\",{\"1\":{\"869\":1}}],[\"id令牌和可选的刷新令牌\",{\"1\":{\"880\":1}}],[\"id令牌不应该使用jws或jwe\",{\"1\":{\"869\":1}}],[\"id令牌绝对不能使用none作为alg值\",{\"1\":{\"869\":1}}],[\"id令牌可能包含其他声明\",{\"1\":{\"869\":1}}],[\"id作为受众值\",{\"1\":{\"869\":1}}],[\"iduck\",{\"1\":{\"671\":6}}],[\"idiom2\",{\"1\":{\"708\":1}}],[\"idiomatic\",{\"1\":{\"682\":1}}],[\"idiom\",{\"1\":{\"580\":2,\"707\":1}}],[\"idea\",{\"1\":{\"491\":4}}],[\"ide\",{\"1\":{\"489\":3,\"490\":1,\"491\":1,\"492\":1,\"495\":2,\"681\":1}}],[\"idex\",{\"1\":{\"279\":1}}],[\"identifiable\",{\"1\":{\"868\":1}}],[\"identifier客户端标识符\",{\"1\":{\"868\":1}}],[\"identifier\",{\"0\":{\"565\":1},\"1\":{\"513\":1,\"515\":2,\"565\":2,\"580\":1,\"585\":1,\"640\":1,\"699\":1,\"868\":5}}],[\"identified\",{\"1\":{\"52\":1,\"155\":1,\"191\":1}}],[\"identical\",{\"1\":{\"662\":2}}],[\"identity\",{\"1\":{\"4\":4,\"846\":1,\"868\":1}}],[\"id=s6bhdrkqt3\",{\"1\":{\"873\":2}}],[\"id=1234\",{\"1\":{\"268\":1}}],[\"id=post\",{\"1\":{\"268\":1}}],[\"id=tag\",{\"1\":{\"268\":1}}],[\"idx\",{\"1\":{\"107\":1,\"109\":1,\"689\":2}}],[\"id说\",{\"1\":{\"73\":1}}],[\"id`\",{\"1\":{\"72\":26,\"73\":19}}],[\"id\",{\"0\":{\"257\":1,\"886\":1,\"887\":1},\"1\":{\"28\":3,\"35\":2,\"72\":4,\"73\":2,\"98\":2,\"104\":2,\"110\":1,\"112\":2,\"124\":1,\"126\":1,\"128\":3,\"131\":1,\"132\":5,\"133\":2,\"138\":1,\"140\":2,\"142\":3,\"143\":3,\"167\":2,\"168\":1,\"171\":2,\"172\":1,\"175\":3,\"176\":3,\"203\":2,\"204\":1,\"220\":2,\"249\":3,\"251\":1,\"255\":2,\"257\":5,\"268\":4,\"299\":1,\"638\":2,\"657\":5,\"689\":4,\"782\":3,\"852\":1,\"854\":1,\"868\":1,\"869\":7,\"873\":3,\"883\":2,\"886\":1}}],[\"inuse\",{\"1\":{\"692\":1}}],[\"in3\",{\"1\":{\"689\":1}}],[\"inheritance\",{\"1\":{\"657\":1}}],[\"inhash\",{\"1\":{\"383\":1}}],[\"in2\",{\"1\":{\"647\":5,\"689\":1}}],[\"in1\",{\"1\":{\"647\":5,\"648\":1,\"689\":1}}],[\"invalue\",{\"1\":{\"709\":2}}],[\"invalid\",{\"1\":{\"545\":1,\"547\":1,\"605\":1,\"651\":1,\"662\":1,\"668\":1,\"878\":2,\"884\":1}}],[\"investigate\",{\"1\":{\"670\":1}}],[\"inverted\",{\"1\":{\"612\":2}}],[\"invert\",{\"1\":{\"612\":1}}],[\"invmap\",{\"1\":{\"612\":3}}],[\"indicates\",{\"1\":{\"689\":1}}],[\"indio\",{\"1\":{\"611\":3,\"612\":1}}],[\"indexfunc\",{\"1\":{\"572\":4}}],[\"indexrune\",{\"1\":{\"536\":5}}],[\"index\",{\"0\":{\"106\":1},\"1\":{\"72\":9,\"73\":6,\"107\":1,\"108\":1,\"109\":2,\"205\":1,\"212\":1,\"279\":1,\"536\":6,\"557\":4,\"580\":7,\"585\":1,\"598\":1,\"605\":1,\"614\":1,\"689\":2}}],[\"infile\",{\"1\":{\"689\":1}}],[\"infiniteloop\",{\"1\":{\"765\":1}}],[\"infinite\",{\"1\":{\"559\":1}}],[\"information\",{\"1\":{\"868\":1}}],[\"info\",{\"1\":{\"625\":7}}],[\"inferno\",{\"1\":{\"469\":1}}],[\"inputstring\",{\"1\":{\"678\":2,\"682\":2}}],[\"inputerror\",{\"1\":{\"678\":3}}],[\"inputfile\",{\"1\":{\"678\":9,\"682\":3}}],[\"inputreader\",{\"1\":{\"677\":9,\"678\":3,\"682\":2,\"686\":2}}],[\"input\",{\"1\":{\"163\":1,\"199\":1,\"564\":6,\"677\":16,\"678\":4,\"686\":2,\"689\":5,\"700\":3,\"709\":7}}],[\"inners\",{\"1\":{\"647\":3}}],[\"inner\",{\"0\":{\"140\":1,\"171\":1},\"1\":{\"140\":2,\"171\":2}}],[\"innodb\",{\"0\":{\"294\":1},\"1\":{\"72\":6,\"73\":3,\"210\":1,\"223\":2,\"224\":1,\"231\":2,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"293\":1,\"294\":5,\"303\":3}}],[\"incommon\",{\"1\":{\"869\":1}}],[\"inc\",{\"1\":{\"501\":1,\"627\":1,\"631\":2,\"689\":1}}],[\"included\",{\"1\":{\"585\":1}}],[\"include\",{\"1\":{\"501\":7,\"627\":3,\"631\":4,\"689\":2}}],[\"inch\",{\"1\":{\"133\":1}}],[\"increment=2\",{\"1\":{\"112\":1}}],[\"increment\",{\"1\":{\"72\":12,\"73\":6,\"112\":1,\"299\":1}}],[\"instead\",{\"1\":{\"365\":1,\"761\":1}}],[\"instance\",{\"1\":{\"51\":1,\"536\":4,\"640\":1,\"803\":1}}],[\"installation\",{\"1\":{\"52\":1}}],[\"install\",{\"0\":{\"450\":1,\"629\":1,\"630\":1},\"1\":{\"51\":1,\"52\":1,\"448\":1,\"449\":1,\"450\":5,\"469\":2,\"473\":1,\"481\":1,\"483\":1,\"495\":1,\"498\":1,\"506\":1,\"627\":4,\"629\":7,\"631\":3,\"632\":4,\"636\":1,\"637\":1,\"638\":3,\"689\":1,\"749\":1,\"750\":1,\"983\":1}}],[\"insertstringslice\",{\"1\":{\"593\":1}}],[\"insert\",{\"1\":{\"88\":1,\"90\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"128\":1,\"151\":2,\"159\":1,\"160\":1,\"166\":1,\"167\":5,\"187\":2,\"195\":1,\"196\":1,\"202\":1,\"203\":5,\"210\":1,\"211\":1,\"234\":1,\"638\":3}}],[\"ins\",{\"1\":{\"51\":1}}],[\"ini和java\",{\"0\":{\"19\":1}}],[\"initial\",{\"1\":{\"635\":1,\"686\":1}}],[\"initialization\",{\"1\":{\"510\":1,\"549\":1,\"551\":1}}],[\"initialized\",{\"1\":{\"635\":1}}],[\"initialize\",{\"1\":{\"51\":1,\"686\":1}}],[\"initializing\",{\"1\":{\"51\":1}}],[\"init\",{\"0\":{\"519\":1},\"1\":{\"18\":1,\"21\":1,\"52\":1,\"350\":5,\"507\":1,\"510\":3,\"519\":13,\"549\":2,\"561\":1,\"627\":4,\"635\":1,\"638\":1,\"689\":1,\"694\":1,\"810\":1}}],[\"int2\",{\"1\":{\"700\":4}}],[\"int1\",{\"1\":{\"700\":2}}],[\"int16\",{\"1\":{\"504\":1,\"511\":2,\"523\":4,\"531\":1,\"668\":1}}],[\"intfromint64\",{\"1\":{\"689\":1}}],[\"intfromfloat64\",{\"1\":{\"523\":1}}],[\"intvector\",{\"1\":{\"651\":3}}],[\"intr\",{\"1\":{\"640\":3}}],[\"introduction\",{\"1\":{\"454\":1,\"459\":1}}],[\"intarray\",{\"1\":{\"628\":7,\"662\":14}}],[\"intp\",{\"1\":{\"547\":10}}],[\"intsaresortedfunc\",{\"1\":{\"628\":1}}],[\"intsaresorted\",{\"1\":{\"600\":1,\"628\":2,\"662\":1}}],[\"ints\",{\"1\":{\"545\":3,\"550\":1,\"600\":2,\"662\":2}}],[\"intsize\",{\"1\":{\"545\":2,\"550\":1}}],[\"intn\",{\"1\":{\"528\":2}}],[\"int32\",{\"1\":{\"504\":1,\"511\":2,\"523\":9,\"531\":1,\"595\":2,\"602\":1,\"668\":1,\"686\":1}}],[\"int8\",{\"1\":{\"365\":1,\"504\":1,\"523\":2,\"668\":1,\"686\":1}}],[\"int64\",{\"1\":{\"365\":1,\"504\":1,\"515\":1,\"523\":2,\"528\":1,\"546\":1,\"626\":3,\"662\":1,\"668\":2,\"680\":1,\"688\":1,\"689\":1}}],[\"int和数组分配内存\",{\"1\":{\"322\":1}}],[\"into\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"151\":2,\"163\":1,\"167\":1,\"168\":3,\"187\":2,\"199\":1,\"203\":1,\"204\":3,\"508\":1,\"689\":2}}],[\"intellij\",{\"1\":{\"491\":4}}],[\"intel\",{\"1\":{\"476\":1,\"481\":1,\"484\":1}}],[\"integers\",{\"1\":{\"585\":1,\"689\":1}}],[\"integer\",{\"1\":{\"301\":3,\"523\":1,\"531\":1,\"545\":2,\"547\":4,\"550\":2,\"627\":2,\"659\":11,\"689\":2}}],[\"integrity\",{\"1\":{\"39\":1}}],[\"interaction\",{\"1\":{\"873\":1,\"878\":1}}],[\"internal\",{\"1\":{\"474\":1,\"672\":1}}],[\"inter\",{\"1\":{\"383\":2}}],[\"interval\",{\"1\":{\"267\":2,\"640\":4}}],[\"interface3\",{\"1\":{\"663\":1}}],[\"interface2\",{\"1\":{\"662\":1}}],[\"interfaceslice\",{\"1\":{\"665\":3}}],[\"interfaces\",{\"1\":{\"662\":5,\"673\":3,\"682\":3}}],[\"interfacetype\",{\"1\":{\"383\":3,\"390\":1}}],[\"interface\",{\"0\":{\"391\":1,\"662\":1,\"767\":1},\"1\":{\"18\":3,\"21\":3,\"316\":2,\"321\":1,\"335\":1,\"349\":1,\"382\":1,\"383\":2,\"389\":3,\"390\":1,\"424\":2,\"439\":1,\"475\":1,\"504\":1,\"509\":1,\"521\":1,\"551\":1,\"561\":1,\"563\":1,\"567\":2,\"628\":3,\"655\":1,\"662\":22,\"663\":6,\"664\":2,\"665\":4,\"666\":2,\"667\":3,\"668\":8,\"669\":1,\"670\":5,\"671\":1,\"672\":4,\"673\":2,\"674\":1,\"675\":1,\"676\":9,\"682\":4,\"683\":1,\"684\":7,\"686\":3,\"687\":1,\"688\":1,\"689\":2,\"699\":1,\"705\":1,\"707\":1,\"768\":1,\"769\":1,\"770\":1}}],[\"intention\",{\"1\":{\"233\":1}}],[\"int\",{\"0\":{\"523\":1},\"1\":{\"18\":1,\"21\":1,\"42\":3,\"98\":1,\"100\":1,\"112\":1,\"163\":4,\"168\":4,\"199\":4,\"204\":4,\"301\":2,\"325\":3,\"328\":1,\"346\":4,\"349\":1,\"353\":7,\"364\":1,\"388\":2,\"389\":1,\"424\":1,\"427\":4,\"438\":1,\"501\":8,\"504\":1,\"507\":2,\"509\":5,\"510\":2,\"511\":3,\"513\":2,\"515\":6,\"516\":1,\"518\":2,\"523\":14,\"525\":1,\"527\":1,\"528\":1,\"530\":4,\"531\":5,\"536\":7,\"537\":1,\"538\":1,\"539\":1,\"545\":8,\"547\":5,\"549\":5,\"550\":2,\"551\":3,\"555\":1,\"557\":3,\"561\":8,\"562\":3,\"563\":7,\"564\":12,\"565\":10,\"566\":4,\"567\":5,\"568\":1,\"569\":1,\"570\":6,\"571\":2,\"572\":8,\"573\":13,\"574\":27,\"577\":1,\"580\":11,\"581\":9,\"582\":2,\"585\":6,\"586\":3,\"587\":5,\"588\":8,\"591\":5,\"592\":2,\"593\":7,\"595\":1,\"599\":1,\"600\":8,\"605\":11,\"607\":5,\"608\":2,\"609\":1,\"610\":8,\"611\":2,\"612\":3,\"623\":1,\"626\":5,\"627\":1,\"628\":3,\"640\":9,\"642\":2,\"643\":1,\"644\":1,\"645\":2,\"647\":9,\"648\":2,\"649\":2,\"651\":12,\"653\":4,\"659\":8,\"660\":7,\"662\":45,\"663\":6,\"664\":3,\"668\":5,\"670\":5,\"673\":4,\"675\":1,\"676\":6,\"677\":1,\"682\":4,\"684\":2,\"685\":1,\"686\":4,\"689\":12,\"697\":1,\"699\":3,\"701\":3,\"702\":2,\"704\":1,\"705\":5,\"706\":1,\"707\":6,\"708\":3,\"709\":22,\"725\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1}}],[\"in\",{\"0\":{\"227\":1,\"278\":1,\"306\":1},\"1\":{\"18\":1,\"128\":3,\"131\":4,\"144\":2,\"163\":3,\"177\":2,\"199\":3,\"227\":1,\"232\":1,\"268\":2,\"278\":1,\"306\":7,\"362\":1,\"365\":1,\"469\":1,\"506\":1,\"523\":3,\"536\":1,\"538\":4,\"543\":4,\"546\":1,\"547\":5,\"550\":2,\"561\":7,\"567\":2,\"568\":10,\"577\":1,\"608\":5,\"626\":2,\"631\":3,\"635\":1,\"640\":2,\"643\":1,\"655\":1,\"662\":2,\"665\":1,\"671\":1,\"680\":1,\"682\":2,\"686\":3,\"687\":1,\"689\":21,\"697\":7,\"702\":2,\"705\":1,\"709\":11,\"883\":1}}],[\"iota\",{\"1\":{\"504\":1,\"513\":21,\"525\":4,\"660\":1,\"668\":1}}],[\"ios\",{\"1\":{\"459\":1}}],[\"iocp\",{\"1\":{\"330\":1}}],[\"io多路复用\",{\"0\":{\"323\":1}}],[\"ioutil\",{\"1\":{\"18\":2,\"21\":1,\"427\":4,\"602\":3,\"678\":5,\"680\":1,\"682\":1}}],[\"io\",{\"1\":{\"18\":1,\"21\":1,\"51\":1,\"78\":1,\"216\":2,\"320\":1,\"330\":3,\"331\":3,\"427\":2,\"460\":1,\"461\":1,\"462\":1,\"506\":1,\"568\":2,\"614\":2,\"626\":2,\"662\":11,\"672\":3,\"676\":2,\"677\":4,\"678\":5,\"680\":4,\"682\":20,\"686\":20,\"782\":5}}],[\"ifelse\",{\"1\":{\"549\":1}}],[\"iface包含两个字段\",{\"1\":{\"384\":1}}],[\"iface\",{\"0\":{\"383\":1},\"1\":{\"383\":6,\"390\":2}}],[\"if\",{\"0\":{\"549\":1},\"1\":{\"10\":1,\"11\":1,\"12\":4,\"18\":2,\"21\":2,\"42\":5,\"93\":1,\"94\":1,\"97\":2,\"163\":7,\"167\":1,\"199\":7,\"203\":1,\"306\":2,\"321\":1,\"328\":1,\"365\":1,\"389\":1,\"425\":1,\"427\":5,\"430\":1,\"504\":1,\"507\":1,\"515\":1,\"521\":1,\"523\":3,\"536\":1,\"545\":1,\"548\":2,\"549\":43,\"550\":13,\"551\":2,\"558\":3,\"559\":4,\"562\":1,\"565\":1,\"567\":2,\"568\":1,\"570\":4,\"572\":1,\"574\":1,\"577\":3,\"590\":1,\"593\":2,\"599\":3,\"608\":4,\"623\":1,\"624\":1,\"628\":1,\"631\":1,\"638\":2,\"642\":1,\"662\":15,\"667\":1,\"670\":1,\"672\":1,\"676\":4,\"677\":2,\"678\":7,\"679\":3,\"680\":3,\"681\":1,\"682\":13,\"686\":5,\"687\":2,\"688\":5,\"689\":28,\"692\":4,\"700\":1,\"709\":10,\"725\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"803\":4}}],[\"i\",{\"0\":{\"990\":1},\"1\":{\"6\":1,\"51\":1,\"78\":2,\"210\":2,\"214\":2,\"260\":2,\"306\":4,\"325\":8,\"330\":2,\"374\":1,\"388\":2,\"389\":2,\"424\":8,\"427\":6,\"449\":2,\"481\":1,\"501\":4,\"504\":1,\"507\":2,\"508\":1,\"509\":1,\"515\":1,\"516\":4,\"524\":1,\"527\":8,\"528\":6,\"532\":3,\"536\":1,\"545\":3,\"547\":3,\"551\":9,\"553\":15,\"555\":12,\"556\":1,\"557\":18,\"558\":11,\"559\":14,\"568\":5,\"570\":4,\"573\":8,\"574\":2,\"577\":4,\"580\":22,\"581\":12,\"585\":15,\"586\":3,\"587\":8,\"592\":8,\"595\":2,\"598\":2,\"599\":7,\"601\":13,\"602\":1,\"610\":3,\"611\":2,\"623\":2,\"640\":5,\"645\":3,\"659\":3,\"660\":2,\"662\":56,\"663\":1,\"664\":6,\"665\":2,\"668\":2,\"670\":13,\"671\":10,\"677\":4,\"680\":1,\"682\":16,\"684\":3,\"689\":17,\"694\":1,\"701\":2,\"705\":14,\"706\":4,\"707\":6,\"708\":5,\"709\":13,\"815\":1}}],[\"iso29115\",{\"1\":{\"868\":1,\"869\":1}}],[\"isolation\",{\"1\":{\"237\":1}}],[\"isempty\",{\"1\":{\"676\":1}}],[\"isevening\",{\"1\":{\"627\":1}}],[\"isafternoon\",{\"1\":{\"627\":1}}],[\"isam\",{\"1\":{\"627\":1}}],[\"isascii\",{\"1\":{\"572\":1}}],[\"isgreater\",{\"1\":{\"549\":2}}],[\"isletter\",{\"1\":{\"531\":1}}],[\"isdigit\",{\"1\":{\"521\":1,\"531\":1}}],[\"isvisible\",{\"1\":{\"521\":1}}],[\"isfinished\",{\"1\":{\"521\":1}}],[\"ispresent\",{\"1\":{\"608\":11}}],[\"isp\",{\"1\":{\"316\":1}}],[\"istio\",{\"1\":{\"78\":1}}],[\"iss值是一个大小写敏感的url\",{\"1\":{\"869\":1}}],[\"isspace\",{\"1\":{\"531\":1,\"572\":1}}],[\"issortedfunc\",{\"1\":{\"628\":1}}],[\"issorted\",{\"1\":{\"521\":1,\"628\":2,\"662\":6}}],[\"issues\",{\"1\":{\"52\":1,\"469\":1}}],[\"issued\",{\"1\":{\"35\":1,\"868\":1}}],[\"issuer响应的颁发者标识符\",{\"1\":{\"869\":1}}],[\"issuer\",{\"1\":{\"35\":1,\"852\":1,\"868\":2,\"887\":1}}],[\"iss\",{\"1\":{\"35\":2,\"852\":2,\"869\":2}}],[\"is\",{\"1\":{\"6\":1,\"136\":1,\"163\":2,\"186\":1,\"199\":2,\"338\":2,\"365\":1,\"513\":1,\"515\":4,\"517\":1,\"521\":2,\"523\":7,\"524\":1,\"526\":1,\"532\":1,\"534\":2,\"536\":9,\"538\":6,\"539\":2,\"540\":6,\"545\":7,\"547\":8,\"549\":10,\"550\":4,\"551\":4,\"553\":49,\"555\":7,\"557\":34,\"558\":1,\"559\":7,\"565\":4,\"567\":4,\"568\":1,\"570\":24,\"572\":2,\"573\":5,\"574\":2,\"577\":2,\"580\":7,\"581\":6,\"583\":3,\"585\":19,\"587\":15,\"591\":2,\"592\":27,\"605\":8,\"608\":7,\"609\":12,\"610\":1,\"628\":1,\"638\":2,\"640\":12,\"647\":12,\"651\":4,\"652\":1,\"660\":8,\"662\":23,\"663\":6,\"668\":2,\"669\":2,\"670\":3,\"673\":6,\"677\":1,\"682\":1,\"684\":4,\"686\":4,\"688\":2,\"689\":12,\"705\":1,\"708\":1,\"709\":5,\"757\":1,\"763\":1,\"766\":1}}],[\"italy\",{\"1\":{\"609\":1}}],[\"itab\",{\"1\":{\"383\":7,\"390\":4,\"392\":3}}],[\"iterate\",{\"1\":{\"670\":1}}],[\"iteration\",{\"1\":{\"553\":6,\"610\":1}}],[\"iter\",{\"1\":{\"651\":2,\"708\":3}}],[\"items2\",{\"1\":{\"610\":3}}],[\"items\",{\"1\":{\"591\":3,\"610\":9,\"662\":2,\"676\":1,\"708\":3}}],[\"item\",{\"1\":{\"578\":1,\"580\":1,\"585\":1,\"591\":2,\"608\":1,\"609\":1,\"610\":5,\"627\":1,\"708\":2}}],[\"its\",{\"1\":{\"547\":3,\"686\":1}}],[\"itoa\",{\"1\":{\"545\":2,\"550\":1,\"659\":1,\"660\":2,\"670\":1}}],[\"it\",{\"1\":{\"3\":1,\"4\":1,\"6\":3,\"365\":1,\"469\":1,\"538\":2,\"547\":1,\"551\":4,\"574\":2,\"657\":4,\"672\":1,\"678\":2,\"682\":1,\"686\":3,\"688\":1,\"705\":1}}],[\"akfq\",{\"1\":{\"883\":1}}],[\"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\",{\"1\":{\"686\":1}}],[\"ai\",{\"1\":{\"662\":4,\"667\":3}}],[\"ay\",{\"1\":{\"648\":2}}],[\"ax\",{\"1\":{\"648\":2}}],[\"azp值是一个区分大小写的字符串\",{\"1\":{\"869\":1}}],[\"azp\",{\"1\":{\"869\":1}}],[\"az\",{\"1\":{\"631\":2}}],[\"azurechinacloud\",{\"1\":{\"51\":1}}],[\"a4\",{\"1\":{\"606\":1}}],[\"a0\",{\"1\":{\"606\":1}}],[\"aartselaar\",{\"1\":{\"682\":2,\"686\":1}}],[\"aaaaa\",{\"1\":{\"557\":2}}],[\"aa\",{\"1\":{\"557\":1}}],[\"a5\",{\"1\":{\"557\":1}}],[\"a32float\",{\"1\":{\"523\":1}}],[\"a32bitint\",{\"1\":{\"523\":1}}],[\"amr值是一个区分大小写的字符串数组\",{\"1\":{\"869\":1}}],[\"amr\",{\"1\":{\"869\":1}}],[\"ambiguous\",{\"1\":{\"649\":1}}],[\"am\",{\"1\":{\"627\":1,\"671\":8}}],[\"amount\",{\"1\":{\"576\":1,\"577\":1,\"686\":1}}],[\"amd\",{\"1\":{\"481\":1}}],[\"amd64\",{\"1\":{\"481\":3,\"482\":1,\"506\":1,\"629\":1,\"631\":2,\"632\":1,\"689\":1}}],[\"ami同学\",{\"1\":{\"463\":1}}],[\"aes\",{\"1\":{\"363\":2,\"686\":1}}],[\"args\",{\"1\":{\"670\":3,\"679\":1,\"681\":11,\"682\":2,\"689\":7}}],[\"arg\",{\"1\":{\"567\":1,\"670\":2,\"682\":10,\"689\":1}}],[\"argn\",{\"1\":{\"561\":1}}],[\"arg2\",{\"1\":{\"561\":1}}],[\"arg1\",{\"1\":{\"561\":1,\"563\":2}}],[\"argument\",{\"1\":{\"545\":1,\"561\":1,\"574\":1,\"662\":1,\"671\":1}}],[\"arguments\",{\"1\":{\"507\":1}}],[\"arri\",{\"1\":{\"600\":2}}],[\"arrf\",{\"1\":{\"591\":1}}],[\"arrkeyvalue\",{\"1\":{\"581\":5}}],[\"arrlazy\",{\"1\":{\"581\":3}}],[\"arrage\",{\"1\":{\"581\":2}}],[\"array<number>\",{\"1\":{\"758\":1}}],[\"array<元素类型>\",{\"1\":{\"758\":1}}],[\"array2\",{\"1\":{\"581\":1}}],[\"arrays\",{\"1\":{\"580\":1,\"725\":1,\"731\":1}}],[\"array\",{\"0\":{\"578\":1},\"1\":{\"354\":1,\"509\":1,\"577\":1,\"580\":11,\"581\":1,\"582\":1,\"583\":7,\"585\":2,\"587\":1,\"591\":2,\"662\":4,\"668\":1,\"684\":1}}],[\"arr2\",{\"1\":{\"580\":9,\"758\":1}}],[\"arr1\",{\"1\":{\"580\":23,\"585\":21,\"758\":1}}],[\"arr\",{\"1\":{\"507\":2,\"580\":1,\"586\":2,\"660\":2}}],[\"archive\",{\"1\":{\"614\":1}}],[\"arch\",{\"1\":{\"486\":1,\"638\":1}}],[\"ar\",{\"1\":{\"481\":1,\"580\":5,\"592\":2}}],[\"arm\",{\"1\":{\"476\":1,\"481\":1,\"482\":2}}],[\"areainterface\",{\"1\":{\"662\":1}}],[\"areaintf\",{\"1\":{\"662\":22}}],[\"area\",{\"1\":{\"640\":1,\"662\":27,\"673\":11}}],[\"areana\",{\"1\":{\"440\":1}}],[\"are\",{\"1\":{\"540\":4,\"559\":1,\"626\":2,\"645\":2,\"677\":3,\"686\":1,\"700\":1}}],[\"arena\",{\"1\":{\"440\":1}}],[\"articles\",{\"1\":{\"78\":1}}],[\"article\",{\"1\":{\"60\":1,\"325\":1,\"328\":1,\"336\":1,\"337\":1,\"355\":1,\"356\":1,\"361\":1,\"376\":1,\"426\":1,\"430\":1,\"456\":1}}],[\"artifactid>\",{\"1\":{\"46\":1}}],[\"a+b\",{\"1\":{\"326\":1,\"504\":1,\"572\":1}}],[\"a2\",{\"1\":{\"287\":1,\"353\":3}}],[\"a1\",{\"1\":{\"287\":1,\"353\":3}}],[\"affected\",{\"1\":{\"267\":3}}],[\"after\",{\"1\":{\"166\":1,\"167\":2,\"202\":1,\"203\":2,\"546\":1,\"559\":1,\"561\":2,\"656\":4,\"688\":1,\"689\":1,\"697\":2}}],[\"avatars\",{\"1\":{\"832\":4}}],[\"avar\",{\"1\":{\"521\":6}}],[\"available\",{\"1\":{\"242\":1}}],[\"avg\",{\"1\":{\"135\":1,\"150\":4,\"183\":4,\"185\":1}}],[\"aborted\",{\"1\":{\"828\":1}}],[\"about\",{\"1\":{\"697\":3}}],[\"able\",{\"1\":{\"662\":1,\"686\":1}}],[\"abnormal\",{\"1\":{\"568\":1}}],[\"abcabc\",{\"1\":{\"676\":1}}],[\"abcd\",{\"1\":{\"508\":2}}],[\"abc\",{\"1\":{\"507\":2,\"513\":2,\"518\":4,\"543\":4,\"550\":1,\"631\":2,\"660\":2,\"663\":2,\"676\":1,\"678\":2}}],[\"absinterface\",{\"1\":{\"667\":3}}],[\"abstract\",{\"1\":{\"639\":1}}],[\"abs\",{\"1\":{\"149\":1,\"182\":1,\"549\":2,\"640\":1,\"653\":3,\"655\":5,\"657\":2,\"662\":1,\"667\":3}}],[\"abac权限模型简介\",{\"0\":{\"63\":1}}],[\"abac\",{\"1\":{\"60\":1,\"63\":8}}],[\"as语法\",{\"1\":{\"766\":1}}],[\"asynchronous\",{\"1\":{\"703\":1}}],[\"asleep\",{\"1\":{\"700\":1}}],[\"asm\",{\"1\":{\"689\":1}}],[\"associated\",{\"1\":{\"688\":1}}],[\"asserted\",{\"1\":{\"672\":1}}],[\"assertions\",{\"1\":{\"664\":1}}],[\"assertion\",{\"1\":{\"662\":4,\"667\":2}}],[\"asset\",{\"1\":{\"662\":5}}],[\"assigned\",{\"1\":{\"605\":2}}],[\"assign\",{\"1\":{\"598\":1}}],[\"assignment\",{\"1\":{\"362\":1,\"523\":2,\"640\":2,\"643\":1,\"662\":1,\"665\":1}}],[\"assasa\",{\"1\":{\"532\":2}}],[\"aston\",{\"1\":{\"676\":3}}],[\"ast\",{\"1\":{\"490\":1}}],[\"ascii\",{\"1\":{\"506\":1,\"531\":2,\"532\":2,\"536\":2,\"553\":2,\"572\":1}}],[\"asc\",{\"1\":{\"122\":1,\"134\":2}}],[\"as\",{\"1\":{\"98\":1,\"104\":1,\"135\":2,\"136\":1,\"150\":1,\"163\":1,\"183\":1,\"185\":2,\"186\":1,\"199\":1,\"221\":3,\"513\":1,\"523\":2,\"574\":1,\"640\":5,\"662\":2,\"665\":1,\"671\":1,\"682\":3,\"689\":5,\"709\":1,\"766\":1,\"770\":1}}],[\"anonymous\",{\"1\":{\"647\":3,\"651\":1}}],[\"answer\",{\"1\":{\"645\":2}}],[\"ansic\",{\"1\":{\"546\":2}}],[\"ansi\",{\"1\":{\"83\":2}}],[\"antwerp\",{\"1\":{\"631\":2}}],[\"ants\",{\"1\":{\"426\":1}}],[\"anna\",{\"1\":{\"567\":2}}],[\"anint\",{\"1\":{\"550\":3}}],[\"animalsounder\",{\"1\":{\"316\":12}}],[\"animal\",{\"1\":{\"314\":6,\"315\":7,\"338\":5}}],[\"an\",{\"1\":{\"287\":1,\"365\":1,\"534\":2,\"545\":6,\"547\":4,\"550\":8,\"559\":1,\"574\":1,\"608\":1,\"645\":2,\"652\":1,\"663\":1,\"672\":1,\"678\":1,\"680\":1,\"682\":1,\"684\":1,\"686\":3,\"688\":1,\"689\":2}}],[\"anything\",{\"1\":{\"689\":2}}],[\"any\",{\"0\":{\"761\":1},\"1\":{\"128\":1,\"663\":13,\"676\":8,\"686\":1,\"689\":1,\"761\":1,\"766\":1}}],[\"andrew\",{\"1\":{\"467\":1,\"469\":1}}],[\"android\",{\"1\":{\"459\":1}}],[\"and\",{\"0\":{\"853\":1},\"1\":{\"34\":3,\"39\":1,\"131\":1,\"132\":7,\"138\":1,\"172\":1,\"226\":3,\"227\":9,\"235\":1,\"270\":2,\"271\":1,\"299\":1,\"365\":2,\"429\":1,\"495\":1,\"506\":1,\"507\":1,\"518\":1,\"549\":1,\"551\":2,\"559\":2,\"572\":2,\"573\":5,\"574\":1,\"588\":1,\"592\":1,\"637\":1,\"638\":1,\"676\":2,\"682\":3,\"686\":5,\"687\":1,\"688\":3,\"704\":1,\"725\":1,\"817\":1,\"867\":1}}],[\"acr声明值的含义和处理超出了本规范的范围\",{\"1\":{\"887\":1}}],[\"acr索赔被请求为自愿索赔\",{\"1\":{\"873\":1}}],[\"acr是区分大小写的字符串\",{\"1\":{\"869\":1}}],[\"acr\",{\"0\":{\"940\":1},\"1\":{\"869\":2,\"873\":1}}],[\"acquire\",{\"1\":{\"707\":1}}],[\"acquirem\",{\"1\":{\"430\":1}}],[\"ac\",{\"1\":{\"557\":1}}],[\"action简介\",{\"0\":{\"777\":1}}],[\"action\",{\"0\":{\"776\":1},\"2\":{\"778\":1}}],[\"action=\",{\"1\":{\"638\":2}}],[\"active\",{\"1\":{\"525\":2}}],[\"actually\",{\"1\":{\"568\":1}}],[\"actor\",{\"1\":{\"220\":3}}],[\"acid\",{\"0\":{\"152\":1,\"188\":1,\"237\":1},\"1\":{\"236\":1,\"237\":1,\"241\":2}}],[\"accept\",{\"1\":{\"686\":1}}],[\"access\",{\"0\":{\"59\":1},\"1\":{\"60\":5,\"61\":3,\"62\":1,\"63\":4,\"64\":1,\"678\":1,\"828\":1,\"868\":1,\"883\":1,\"892\":1}}],[\"account\",{\"1\":{\"72\":6,\"117\":1,\"873\":1,\"878\":1}}],[\"acl\",{\"1\":{\"60\":1,\"61\":2}}],[\"age参数\",{\"1\":{\"887\":1}}],[\"age时\",{\"1\":{\"873\":1}}],[\"age请求参数\",{\"1\":{\"873\":1}}],[\"age请求参数对应openid\",{\"1\":{\"873\":1}}],[\"age请求或者auth\",{\"1\":{\"869\":1}}],[\"agent窗口的大小应该适合以登录为重点的对话框\",{\"1\":{\"873\":1}}],[\"agent\",{\"1\":{\"868\":1}}],[\"age>30\",{\"1\":{\"168\":1,\"204\":1}}],[\"age\",{\"1\":{\"100\":1,\"101\":1,\"102\":1,\"168\":1,\"204\":1,\"222\":2,\"328\":1,\"389\":1,\"663\":2,\"684\":2,\"685\":1,\"768\":3,\"769\":1,\"873\":1}}],[\"ag\",{\"1\":{\"51\":1}}],[\"agreement\",{\"1\":{\"39\":2}}],[\"alpha\",{\"1\":{\"611\":3,\"612\":1}}],[\"alphabet\",{\"1\":{\"611\":1}}],[\"alpn\",{\"1\":{\"461\":1}}],[\"already\",{\"1\":{\"577\":1}}],[\"allunsortedcars\",{\"1\":{\"676\":1}}],[\"allcars\",{\"1\":{\"676\":7}}],[\"allnewbmws\",{\"1\":{\"676\":3}}],[\"alloc\",{\"1\":{\"661\":2}}],[\"allocate\",{\"1\":{\"593\":1,\"705\":1}}],[\"allows\",{\"1\":{\"365\":1}}],[\"allowed\",{\"1\":{\"284\":1}}],[\"all\",{\"1\":{\"128\":1,\"144\":1,\"154\":2,\"177\":1,\"190\":2,\"365\":2,\"483\":2,\"549\":1,\"676\":4,\"686\":1,\"689\":1,\"700\":1,\"709\":2,\"725\":1}}],[\"alternative\",{\"1\":{\"670\":1}}],[\"alternatives\",{\"1\":{\"51\":1}}],[\"alternating\",{\"1\":{\"365\":1}}],[\"alter\",{\"0\":{\"91\":1},\"1\":{\"87\":1,\"100\":1,\"101\":1,\"102\":1,\"109\":2,\"110\":1,\"111\":1,\"112\":1,\"162\":1,\"198\":1}}],[\"alive\",{\"1\":{\"832\":6}}],[\"alice\",{\"1\":{\"681\":3}}],[\"alias3\",{\"1\":{\"506\":1}}],[\"alias\",{\"1\":{\"506\":1,\"639\":1,\"640\":3}}],[\"alibaba\",{\"1\":{\"78\":1}}],[\"aliyun\",{\"1\":{\"51\":1}}],[\"alg头参数使用基于mac的算法\",{\"1\":{\"887\":1}}],[\"alg头参数中指定的算法\",{\"1\":{\"887\":1}}],[\"alg参数中发送的算法\",{\"1\":{\"887\":1}}],[\"alg值应该是rs256的默认值\",{\"1\":{\"887\":1}}],[\"algorithm\",{\"1\":{\"39\":2}}],[\"alg\",{\"1\":{\"34\":1,\"39\":1,\"845\":1,\"849\":1,\"850\":2,\"854\":1,\"858\":1}}],[\"apt\",{\"1\":{\"51\":1,\"52\":7,\"483\":1}}],[\"apis\",{\"1\":{\"638\":1}}],[\"api\",{\"1\":{\"37\":1,\"46\":1,\"427\":2,\"455\":3,\"459\":3,\"467\":1,\"498\":1,\"638\":12,\"689\":1,\"832\":6}}],[\"appears\",{\"1\":{\"682\":1}}],[\"appengine\",{\"1\":{\"469\":1}}],[\"appends\",{\"1\":{\"686\":1}}],[\"appender\",{\"1\":{\"662\":6,\"676\":6}}],[\"appendbyte\",{\"1\":{\"593\":2}}],[\"append\",{\"0\":{\"601\":1},\"1\":{\"354\":1,\"504\":1,\"569\":2,\"590\":1,\"593\":9,\"595\":1,\"601\":13,\"602\":1,\"653\":5,\"662\":7,\"676\":6,\"678\":3,\"689\":1}}],[\"appserver\",{\"1\":{\"638\":1}}],[\"apple=1\",{\"1\":{\"513\":1}}],[\"apple\",{\"1\":{\"147\":1,\"180\":1,\"513\":1}}],[\"applications\",{\"1\":{\"483\":1}}],[\"application\",{\"1\":{\"4\":1,\"17\":1,\"18\":4,\"20\":1,\"21\":4,\"638\":1,\"881\":1,\"883\":1,\"884\":1}}],[\"approve\",{\"1\":{\"42\":1,\"725\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1}}],[\"app\",{\"0\":{\"715\":1},\"1\":{\"35\":1,\"467\":1,\"469\":4,\"476\":2,\"490\":2,\"638\":4}}],[\"atan\",{\"1\":{\"519\":1}}],[\"atoi\",{\"1\":{\"509\":2,\"545\":3,\"550\":7,\"689\":1}}],[\"atomic\",{\"1\":{\"418\":1,\"430\":5}}],[\"atomicity\",{\"1\":{\"237\":1}}],[\"attrvalue\",{\"1\":{\"686\":2}}],[\"attrname\",{\"1\":{\"686\":2}}],[\"attr\",{\"1\":{\"686\":4}}],[\"attribute\",{\"1\":{\"60\":1,\"63\":1,\"686\":1}}],[\"attempting\",{\"1\":{\"508\":1}}],[\"atlas\",{\"1\":{\"251\":1}}],[\"at\",{\"1\":{\"35\":1,\"547\":2,\"557\":13,\"559\":1,\"561\":1,\"568\":4,\"580\":6,\"581\":6,\"585\":10,\"587\":11,\"591\":1,\"592\":11,\"605\":8,\"664\":2,\"697\":3,\"886\":2}}],[\"autumn\",{\"1\":{\"591\":1}}],[\"autoid\",{\"1\":{\"457\":1}}],[\"autocommit=1\",{\"1\":{\"151\":1,\"187\":1}}],[\"autocommit=0\",{\"1\":{\"151\":1,\"187\":1}}],[\"autocommit\",{\"1\":{\"151\":2,\"187\":2,\"300\":1}}],[\"autoclean\",{\"1\":{\"52\":1}}],[\"auto\",{\"1\":{\"72\":12,\"73\":6,\"112\":2,\"299\":1,\"300\":1}}],[\"autoremove\",{\"1\":{\"52\":1}}],[\"authz\",{\"1\":{\"869\":1}}],[\"authn\",{\"1\":{\"869\":3}}],[\"authorize\",{\"1\":{\"873\":2}}],[\"authorization\",{\"1\":{\"38\":1,\"455\":1,\"846\":1,\"868\":6,\"869\":2,\"881\":1}}],[\"author\",{\"1\":{\"627\":4}}],[\"authors\",{\"1\":{\"486\":1,\"709\":2}}],[\"authc\",{\"1\":{\"6\":1}}],[\"authentication客户端认证\",{\"1\":{\"868\":1}}],[\"authentication\",{\"1\":{\"6\":1,\"39\":2,\"846\":1,\"868\":5}}],[\"auth\",{\"1\":{\"4\":9,\"869\":4,\"873\":1}}],[\"aud值可以是一个区分大小写的字符串\",{\"1\":{\"869\":1}}],[\"aud值是一个区分大小写的字符串数组\",{\"1\":{\"869\":1}}],[\"audience\",{\"1\":{\"35\":1,\"852\":1,\"887\":3}}],[\"aud\",{\"1\":{\"35\":2,\"852\":2,\"869\":2,\"887\":1}}],[\"adler32\",{\"1\":{\"686\":1}}],[\"adt\",{\"1\":{\"639\":1}}],[\"ada\",{\"1\":{\"447\":1,\"670\":4}}],[\"adds\",{\"1\":{\"686\":1}}],[\"addtoparam\",{\"1\":{\"651\":2}}],[\"addthem\",{\"1\":{\"651\":3,\"653\":3}}],[\"addtime\",{\"1\":{\"148\":1,\"181\":1}}],[\"addjpeg\",{\"1\":{\"574\":2}}],[\"addbmp\",{\"1\":{\"574\":2}}],[\"add2\",{\"1\":{\"574\":8}}],[\"added\",{\"1\":{\"383\":1}}],[\"adder\",{\"1\":{\"163\":1,\"199\":1,\"574\":12}}],[\"adder`\",{\"1\":{\"163\":2,\"199\":2}}],[\"adddate\",{\"1\":{\"148\":1,\"181\":1}}],[\"addr\",{\"1\":{\"135\":2,\"185\":2}}],[\"addresses\",{\"1\":{\"682\":2,\"686\":1}}],[\"address+\",{\"1\":{\"56\":1}}],[\"address\",{\"1\":{\"17\":1,\"18\":2,\"20\":1,\"21\":2,\"135\":2,\"185\":2,\"547\":4,\"583\":1,\"640\":2,\"669\":1,\"682\":6,\"686\":5}}],[\"add\",{\"1\":{\"60\":1,\"100\":1,\"110\":1,\"148\":1,\"167\":1,\"181\":1,\"203\":1,\"423\":2,\"424\":2,\"546\":1,\"561\":1,\"572\":3,\"622\":2,\"626\":3,\"635\":2,\"651\":4,\"656\":6,\"808\":1,\"813\":1,\"817\":1,\"827\":1}}],[\"admin\",{\"1\":{\"35\":1,\"116\":2,\"845\":1,\"849\":1,\"851\":1,\"858\":1}}],[\"adqssw5c\",{\"1\":{\"33\":1}}],[\"a\",{\"1\":{\"28\":1,\"151\":2,\"163\":4,\"167\":1,\"187\":2,\"199\":4,\"203\":1,\"217\":2,\"226\":5,\"227\":5,\"287\":10,\"299\":2,\"301\":3,\"306\":7,\"324\":5,\"326\":1,\"335\":3,\"338\":2,\"346\":6,\"365\":4,\"388\":3,\"446\":1,\"449\":3,\"450\":2,\"481\":1,\"483\":1,\"486\":1,\"495\":1,\"496\":10,\"506\":5,\"507\":2,\"508\":2,\"509\":4,\"510\":2,\"511\":5,\"513\":4,\"515\":13,\"518\":18,\"519\":14,\"523\":8,\"525\":2,\"527\":3,\"528\":2,\"530\":2,\"531\":3,\"532\":1,\"534\":2,\"536\":1,\"549\":2,\"551\":5,\"553\":5,\"557\":8,\"559\":5,\"561\":3,\"563\":11,\"565\":6,\"566\":2,\"567\":4,\"568\":16,\"572\":3,\"574\":6,\"580\":10,\"581\":2,\"583\":4,\"585\":1,\"586\":3,\"591\":3,\"592\":11,\"599\":9,\"600\":7,\"601\":34,\"610\":5,\"627\":4,\"628\":3,\"629\":3,\"631\":8,\"640\":13,\"648\":4,\"649\":12,\"651\":6,\"653\":1,\"656\":6,\"657\":4,\"659\":1,\"660\":5,\"662\":39,\"663\":5,\"664\":3,\"666\":3,\"669\":1,\"670\":6,\"673\":2,\"675\":1,\"676\":2,\"680\":1,\"682\":5,\"684\":1,\"686\":2,\"688\":2,\"689\":15,\"697\":1,\"704\":1,\"705\":5,\"708\":1,\"709\":4,\"759\":1,\"760\":2,\"761\":1,\"766\":1,\"770\":4}}],[\"为方便起见\",{\"1\":{\"847\":1}}],[\"为许多不同的问题提供了强大\",{\"1\":{\"845\":1}}],[\"为便于阅读插入了换行符\",{\"1\":{\"845\":1,\"854\":1,\"858\":1}}],[\"为确保凭据安全\",{\"1\":{\"782\":1}}],[\"为容器的类型定义一个方法\",{\"1\":{\"708\":1}}],[\"为容器指定一个名称\",{\"1\":{\"1\":1}}],[\"为通道解除阻塞定义了\",{\"1\":{\"701\":1}}],[\"为一个大于默认值\",{\"1\":{\"696\":1}}],[\"为单位测量内存分配情况\",{\"1\":{\"692\":1}}],[\"为用户生成自定义的输出\",{\"1\":{\"689\":1}}],[\"为栈的实现\",{\"1\":{\"661\":1}}],[\"为栈定义一个\",{\"1\":{\"660\":1}}],[\"为类型\",{\"1\":{\"660\":2}}],[\"为你想要使用的版本控制系统\",{\"1\":{\"636\":1}}],[\"为自定义包使用\",{\"0\":{\"628\":1}}],[\"为数组定一个类型并在它上面实现\",{\"1\":{\"662\":1}}],[\"为数组排序和自定义集合\",{\"1\":{\"614\":1}}],[\"为数据库初始化目录\",{\"1\":{\"456\":1}}],[\"为整型\",{\"1\":{\"607\":1}}],[\"为切片\",{\"1\":{\"601\":1}}],[\"为练习\",{\"1\":{\"587\":1,\"689\":1}}],[\"为个数个项\",{\"1\":{\"587\":1}}],[\"为我们做了探测工作\",{\"1\":{\"653\":1}}],[\"为我们判断一个函数是否正常执行\",{\"1\":{\"562\":1}}],[\"为我们展示了指针对\",{\"1\":{\"547\":1}}],[\"为指针\",{\"1\":{\"557\":1}}],[\"为字符串\",{\"1\":{\"537\":1}}],[\"为空字符串\",{\"1\":{\"515\":1}}],[\"为扩展名的源文件组成\",{\"1\":{\"506\":1}}],[\"为后缀名存储在计算机中\",{\"1\":{\"504\":1}}],[\"为后缀的文件\",{\"1\":{\"449\":1}}],[\"为session初始化目录\",{\"1\":{\"456\":1}}],[\"为模型目录\",{\"1\":{\"456\":1}}],[\"为服务层目录\",{\"1\":{\"456\":1}}],[\"为控制器目录\",{\"1\":{\"456\":1}}],[\"为中间件目录\",{\"1\":{\"456\":1}}],[\"为路由目录\",{\"1\":{\"456\":1}}],[\"为入口文件\",{\"1\":{\"456\":1}}],[\"为项目根目录\",{\"1\":{\"456\":1}}],[\"为前缀的函数\",{\"1\":{\"418\":2}}],[\"为轻量级线程\",{\"1\":{\"408\":1}}],[\"为装载因子阈值常量\",{\"1\":{\"370\":2}}],[\"为最小粒度挂载\",{\"1\":{\"363\":1}}],[\"为什么会这样\",{\"1\":{\"700\":1}}],[\"为什么会这样呢\",{\"1\":{\"669\":1}}],[\"为什么呢\",{\"1\":{\"562\":1}}],[\"为什么要在返回之后才执行这些语句\",{\"1\":{\"568\":1}}],[\"为什么要选择这么做呢\",{\"1\":{\"515\":1}}],[\"为什么要创造一门编程语言\",{\"0\":{\"472\":1}}],[\"为什么要有\",{\"0\":{\"410\":1},\"1\":{\"410\":1}}],[\"为什么小对象多了会造成\",{\"0\":{\"443\":1}}],[\"为什么需要协程池\",{\"1\":{\"426\":1}}],[\"为什么又再加多一个\",{\"1\":{\"410\":1}}],[\"为什么\",{\"1\":{\"383\":1}}],[\"为什么传到函数内可能被修改\",{\"1\":{\"354\":1}}],[\"为什么选择golang\",{\"0\":{\"320\":1}}],[\"为小写\",{\"1\":{\"314\":1}}],[\"为键码\",{\"1\":{\"291\":1}}],[\"为每个新的类型\",{\"1\":{\"588\":1}}],[\"为每个分片指定一个\",{\"1\":{\"257\":1}}],[\"为每个组返回一个记录\",{\"1\":{\"135\":1,\"185\":1}}],[\"为从\",{\"1\":{\"215\":1}}],[\"为节点的出度\",{\"1\":{\"215\":1}}],[\"为相应数据表某一列名\",{\"1\":{\"166\":1,\"202\":1}}],[\"为\",{\"1\":{\"52\":1,\"331\":1,\"455\":1,\"515\":3,\"608\":1,\"614\":1,\"626\":1,\"640\":1,\"660\":3,\"662\":1,\"668\":1,\"676\":1,\"696\":1,\"849\":2}}],[\"为了获得访问令牌\",{\"1\":{\"880\":1}}],[\"为了获得相同的功能\",{\"1\":{\"317\":1}}],[\"为了从总体上讨论这些算法\",{\"1\":{\"859\":1}}],[\"为了便于阅读\",{\"1\":{\"849\":1}}],[\"为了便捷的执行规则设置和规则判断\",{\"1\":{\"63\":1}}],[\"为了知道计算何时完成\",{\"1\":{\"704\":1}}],[\"为了对比使用一个线程\",{\"1\":{\"697\":1}}],[\"为了模拟他们运算的时间消耗\",{\"1\":{\"697\":1}}],[\"为了使你的程序可以使用多个核心运行\",{\"1\":{\"695\":1}}],[\"为了使这些概念具体化\",{\"1\":{\"656\":1}}],[\"为了看到失败时的输出\",{\"1\":{\"689\":1}}],[\"为了演示这个过程\",{\"1\":{\"689\":1}}],[\"为了更清晰的代码\",{\"1\":{\"687\":1}}],[\"为了防止发生错误时正在执行的函数\",{\"1\":{\"687\":1}}],[\"为了防止用户篡改数据\",{\"1\":{\"29\":1}}],[\"为了简单起见\",{\"1\":{\"682\":1}}],[\"为了简化代码通常使用一个别名\",{\"1\":{\"581\":1}}],[\"为了简化设计\",{\"1\":{\"477\":1}}],[\"为了可读性可以定义一个\",{\"1\":{\"676\":1}}],[\"为了让大家更加具体地了解\",{\"1\":{\"670\":1}}],[\"为了让代码尽可能通用\",{\"1\":{\"662\":1}}],[\"为了让你在成为\",{\"1\":{\"467\":1}}],[\"为了安全并发访问\",{\"1\":{\"654\":1}}],[\"为了方便通常会为类型定义一个工厂\",{\"1\":{\"642\":1}}],[\"为了代码的简洁我们并没有检测返回的错误状态\",{\"1\":{\"638\":1}}],[\"为了做到这一点必须在合适的地方添加下面的代码\",{\"1\":{\"692\":1}}],[\"为了做到这一点\",{\"1\":{\"638\":1}}],[\"为了做到这点\",{\"1\":{\"39\":1}}],[\"为了示范\",{\"1\":{\"630\":1}}],[\"为了区分\",{\"1\":{\"627\":1}}],[\"为了区分本地机器和目标机器\",{\"1\":{\"482\":1}}],[\"为了说明值可以是任意类型的\",{\"1\":{\"605\":1}}],[\"为了检查某个数组是否已经被排序\",{\"1\":{\"600\":1}}],[\"为了提升可读性\",{\"1\":{\"559\":1}}],[\"为了编译\",{\"1\":{\"506\":1}}],[\"为了确保相关文件在文件系统的任何地方都能被调用\",{\"1\":{\"483\":1}}],[\"为了避免在\",{\"1\":{\"477\":1}}],[\"为了避免同时被其他人修改\",{\"1\":{\"419\":1}}],[\"为了描述方便\",{\"1\":{\"372\":1}}],[\"为了保证访问效率\",{\"1\":{\"371\":1}}],[\"为了解决这个问题\",{\"1\":{\"608\":1}}],[\"为了解决脏读和不可重复读问题\",{\"1\":{\"234\":1}}],[\"为了解决维护起来方便\",{\"1\":{\"72\":1}}],[\"为了理解触发器的要点\",{\"1\":{\"167\":1,\"203\":1}}],[\"为了明确处理顺序\",{\"1\":{\"132\":1}}],[\"为了减少盗用和窃取\",{\"1\":{\"31\":1}}],[\"为了减少盗用\",{\"1\":{\"31\":1}}],[\"为jvm运行过程中分配的最大内存\",{\"1\":{\"4\":1}}],[\"xuvrwolrll0nx7rkku8nxnhq\",{\"1\":{\"883\":1}}],[\"xsrf\",{\"1\":{\"873\":1}}],[\"x5c\",{\"1\":{\"869\":1}}],[\"x5u\",{\"1\":{\"869\":1}}],[\"x56\",{\"1\":{\"504\":1}}],[\"x=\",{\"1\":{\"760\":1}}],[\"xi\",{\"1\":{\"705\":8}}],[\"xtime\",{\"1\":{\"690\":2}}],[\"xtea\",{\"1\":{\"686\":1}}],[\"xr\",{\"1\":{\"689\":2}}],[\"xl\",{\"1\":{\"676\":1}}],[\"xw\",{\"1\":{\"672\":2}}],[\"x++\",{\"1\":{\"582\":1}}],[\"x3\",{\"1\":{\"564\":3}}],[\"x41\",{\"1\":{\"531\":1}}],[\"x2\",{\"1\":{\"564\":3}}],[\"x23\",{\"1\":{\"504\":1}}],[\"x27\",{\"1\":{\"492\":1}}],[\"xcode\",{\"1\":{\"484\":3,\"491\":1}}],[\"xa\",{\"1\":{\"241\":4}}],[\"xacml\",{\"1\":{\"63\":1}}],[\"x\",{\"0\":{\"484\":1},\"1\":{\"232\":1,\"340\":1,\"449\":1,\"469\":1,\"478\":2,\"481\":3,\"482\":1,\"489\":1,\"490\":1,\"491\":1,\"523\":9,\"525\":4,\"531\":4,\"532\":1,\"549\":9,\"550\":1,\"551\":1,\"557\":1,\"567\":4,\"573\":6,\"574\":4,\"582\":3,\"583\":2,\"585\":1,\"593\":4,\"600\":2,\"601\":6,\"627\":1,\"635\":1,\"640\":2,\"643\":5,\"651\":2,\"653\":3,\"655\":3,\"662\":2,\"667\":6,\"668\":11,\"669\":11,\"676\":2,\"686\":9,\"689\":2,\"691\":3,\"708\":1,\"760\":3,\"770\":2,\"877\":1,\"881\":1}}],[\"xxxx\",{\"1\":{\"115\":1,\"116\":1,\"151\":2,\"187\":2}}],[\"xxxxxxxxxxxxxx\",{\"1\":{\"827\":2}}],[\"xxxxxxxx\",{\"1\":{\"815\":1}}],[\"xxxxx\",{\"1\":{\"33\":1}}],[\"xxx\",{\"1\":{\"51\":1,\"342\":4,\"506\":1,\"811\":4}}],[\"xpack\",{\"1\":{\"6\":11}}],[\"xmlwriter\",{\"1\":{\"672\":3}}],[\"xmlrpc\",{\"1\":{\"637\":1}}],[\"xml1\",{\"1\":{\"623\":1}}],[\"xml\",{\"1\":{\"63\":1,\"455\":1,\"532\":1,\"623\":3,\"637\":1,\"662\":3,\"672\":4,\"682\":3,\"686\":23}}],[\"xmx512m\",{\"1\":{\"6\":1}}],[\"xmx=256m\",{\"1\":{\"4\":2}}],[\"xms512m\",{\"1\":{\"6\":1}}],[\"xms=256m\",{\"1\":{\"4\":2}}],[\"x版本后增加了\",{\"1\":{\"4\":1}}],[\"jp6icmd3hp99obi1prs\",{\"1\":{\"883\":1}}],[\"jpeg\",{\"1\":{\"574\":2,\"662\":2}}],[\"jku或jwk头参数字段\",{\"1\":{\"869\":1}}],[\"jdk21\",{\"0\":{\"721\":1}}],[\"jdbc\",{\"1\":{\"251\":3,\"252\":4}}],[\"j==5\",{\"1\":{\"559\":1}}],[\"j==4\",{\"1\":{\"559\":1}}],[\"j>5\",{\"1\":{\"558\":1}}],[\"j+1\",{\"1\":{\"557\":1}}],[\"j++\",{\"1\":{\"553\":1,\"558\":1,\"559\":1,\"574\":1}}],[\"j<10\",{\"1\":{\"553\":1,\"558\":1}}],[\"jedit\",{\"1\":{\"491\":1}}],[\"jeffail\",{\"1\":{\"424\":1}}],[\"just\",{\"1\":{\"559\":1,\"568\":1,\"688\":1,\"689\":2}}],[\"juliet\",{\"1\":{\"611\":3,\"612\":2}}],[\"jul\",{\"1\":{\"546\":1}}],[\"jumps\",{\"1\":{\"543\":3,\"559\":1}}],[\"juejin\",{\"1\":{\"397\":1}}],[\"juanmaofeifei\",{\"1\":{\"394\":1}}],[\"jit\",{\"1\":{\"499\":1}}],[\"jianshu\",{\"1\":{\"343\":1}}],[\"jim\",{\"1\":{\"138\":1,\"172\":1}}],[\"js和golang\",{\"1\":{\"318\":1}}],[\"js\",{\"0\":{\"318\":1,\"749\":1},\"1\":{\"682\":2,\"683\":2}}],[\"json媒体类型\",{\"1\":{\"883\":1,\"884\":1}}],[\"json字符串数组\",{\"1\":{\"869\":1}}],[\"json网络令牌\",{\"1\":{\"868\":1}}],[\"json序列化不被使用\",{\"1\":{\"867\":1}}],[\"json序列化和jwe\",{\"1\":{\"867\":1}}],[\"json\",{\"0\":{\"24\":1,\"843\":1,\"849\":1,\"857\":1},\"1\":{\"25\":1,\"26\":1,\"29\":2,\"35\":2,\"39\":4,\"328\":4,\"455\":3,\"532\":1,\"623\":4,\"638\":1,\"662\":1,\"682\":31,\"683\":6,\"684\":6,\"685\":3,\"686\":11,\"688\":4,\"689\":1,\"844\":1,\"845\":1,\"849\":4,\"851\":1,\"853\":3,\"855\":3,\"856\":2,\"857\":1,\"858\":1,\"859\":6,\"868\":1,\"883\":1,\"884\":1},\"2\":{\"40\":1,\"862\":1}}],[\"j\",{\"1\":{\"306\":4,\"424\":2,\"467\":1,\"516\":1,\"551\":1,\"553\":7,\"557\":5,\"558\":2,\"559\":6,\"574\":3,\"601\":6,\"660\":2,\"662\":31}}],[\"jose头\",{\"1\":{\"868\":1}}],[\"jose\",{\"1\":{\"850\":2,\"868\":1}}],[\"jot\",{\"1\":{\"844\":1}}],[\"joe\",{\"1\":{\"485\":1,\"567\":2}}],[\"john\",{\"1\":{\"328\":1,\"624\":3,\"681\":2,\"845\":1,\"849\":1,\"851\":1,\"858\":1}}],[\"job\",{\"1\":{\"279\":3}}],[\"joined\",{\"1\":{\"543\":2}}],[\"joins\",{\"1\":{\"205\":1}}],[\"join\",{\"0\":{\"137\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"145\":1,\"170\":1,\"171\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"178\":1,\"255\":1},\"1\":{\"137\":5,\"139\":2,\"140\":2,\"142\":1,\"143\":1,\"145\":2,\"170\":5,\"171\":2,\"173\":2,\"175\":1,\"176\":1,\"178\":2,\"211\":2,\"251\":2,\"255\":1,\"256\":2,\"268\":3,\"532\":1,\"543\":3,\"681\":2}}],[\"jones\",{\"1\":{\"129\":1,\"138\":1,\"172\":1}}],[\"joptionpane\",{\"1\":{\"42\":5}}],[\"jaguar\",{\"1\":{\"676\":3}}],[\"japan\",{\"1\":{\"609\":1}}],[\"japanese\",{\"1\":{\"557\":1}}],[\"jan\",{\"1\":{\"546\":3,\"682\":3,\"686\":2}}],[\"jack\",{\"1\":{\"129\":1}}],[\"javabase\",{\"1\":{\"828\":1}}],[\"java简介\",{\"0\":{\"720\":1}}],[\"javascript环境中定义一些函数\",{\"1\":{\"859\":1}}],[\"javascript\",{\"1\":{\"320\":1,\"459\":1,\"475\":1,\"499\":1,\"659\":1,\"682\":1,\"859\":1}}],[\"javaswing实践记录\",{\"0\":{\"41\":1}}],[\"java默认允许多态\",{\"1\":{\"311\":1}}],[\"java\",{\"0\":{\"719\":1,\"724\":1},\"1\":{\"6\":1,\"78\":1,\"296\":1,\"297\":1,\"312\":2,\"320\":3,\"447\":1,\"467\":7,\"469\":1,\"471\":1,\"472\":1,\"474\":1,\"475\":2,\"476\":1,\"478\":1,\"487\":2,\"491\":1,\"499\":7,\"509\":1,\"512\":1,\"527\":1,\"532\":2,\"547\":2,\"548\":1,\"551\":1,\"562\":1,\"568\":1,\"590\":1,\"640\":1,\"659\":3,\"662\":1,\"663\":2,\"671\":2,\"676\":1,\"686\":1,\"687\":1,\"689\":1},\"2\":{\"43\":1,\"44\":1,\"733\":1}}],[\"jfilechooser\",{\"0\":{\"724\":1},\"1\":{\"42\":3,\"725\":5,\"726\":6,\"727\":5,\"728\":5,\"729\":4,\"730\":6,\"731\":5,\"732\":4}}],[\"jti\",{\"1\":{\"35\":1,\"852\":1}}],[\"jwa\",{\"1\":{\"858\":4}}],[\"jwe可以被签名并附在jws里\",{\"1\":{\"39\":1}}],[\"jwe模式会对内容加密\",{\"1\":{\"39\":1}}],[\"jwe结构的json\",{\"1\":{\"39\":1}}],[\"jwe\",{\"1\":{\"39\":2,\"845\":1,\"848\":1,\"849\":2,\"867\":2,\"869\":1}}],[\"jwe的区别\",{\"0\":{\"39\":1}}],[\"jws的header与jwe的header是不同的\",{\"1\":{\"39\":1}}],[\"jws模式对这个内容进行了数字化签名\",{\"1\":{\"39\":1}}],[\"jws荷载更加常用\",{\"1\":{\"39\":1}}],[\"jws\",{\"0\":{\"39\":1,\"861\":1},\"1\":{\"34\":1,\"39\":2,\"845\":1,\"848\":1,\"849\":2,\"858\":2,\"861\":2,\"867\":3,\"868\":2,\"869\":2,\"887\":1}}],[\"jwt索赔集\",{\"1\":{\"869\":1}}],[\"jwt发布的时间\",{\"1\":{\"869\":1}}],[\"jwt嵌套\",{\"1\":{\"868\":1}}],[\"jwt要求集\",{\"1\":{\"868\":1}}],[\"jwt与jws和jwe一起\",{\"1\":{\"845\":1}}],[\"jwt与另外两种相近的标准\",{\"1\":{\"39\":1}}],[\"jwts表现为一组被编码为jws\",{\"1\":{\"39\":1}}],[\"jwt可以同时使用在web环境和restfull的接口\",{\"1\":{\"39\":1}}],[\"jwt长度较小\",{\"1\":{\"39\":1}}],[\"jwt里验证和签名使用的算法\",{\"1\":{\"34\":1}}],[\"jwt对象为一个很长的字符串\",{\"1\":{\"33\":1}}],[\"jwt消息构成\",{\"0\":{\"33\":1}}],[\"jwt本身包含认证信息\",{\"1\":{\"31\":1}}],[\"jwt不建议使用http协议来传输代码\",{\"1\":{\"31\":1}}],[\"jwt不仅可用于认证\",{\"1\":{\"31\":1}}],[\"jwt不包含敏感信息\",{\"1\":{\"30\":1}}],[\"jwt默认不加密\",{\"1\":{\"31\":1}}],[\"jwt是在各个服务之间安全传输信息的好方法\",{\"1\":{\"26\":1}}],[\"jwt的声明会被加密\",{\"1\":{\"39\":1}}],[\"jwt的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息\",{\"1\":{\"26\":1}}],[\"jwt的用法\",{\"0\":{\"38\":1}}],[\"jwt的头部描述jwt元数据的json对象参考\",{\"1\":{\"34\":1}}],[\"jwt的头部承载两部分信息\",{\"1\":{\"34\":1}}],[\"jwt的数据结构\",{\"0\":{\"32\":1}}],[\"jwt的有效期不宜设置太长\",{\"1\":{\"31\":1}}],[\"jwt的最大缺点是服务器不保存会话状态\",{\"1\":{\"31\":1}}],[\"jwt的6个优缺点\",{\"0\":{\"31\":1}}],[\"jwt的认证流程图\",{\"0\":{\"30\":1},\"1\":{\"30\":1,\"33\":1}}],[\"jwt的原理和流程\",{\"0\":{\"27\":1}}],[\"jwt的定义\",{\"0\":{\"26\":1}}],[\"jwt\",{\"0\":{\"24\":1,\"29\":1,\"39\":1,\"858\":1},\"1\":{\"25\":1,\"26\":1,\"28\":1,\"29\":3,\"34\":1,\"35\":4,\"37\":1,\"39\":2,\"844\":5,\"845\":4,\"846\":2,\"847\":2,\"848\":2,\"849\":7,\"850\":20,\"851\":1,\"852\":16,\"853\":5,\"854\":5,\"855\":2,\"856\":2,\"857\":14,\"858\":5,\"859\":2,\"860\":3,\"861\":2,\"866\":2,\"868\":7,\"869\":2}}],[\"jvm帮助我们保证了线程的安全性\",{\"1\":{\"803\":1}}],[\"jvm启动时分配的内存\",{\"1\":{\"4\":1}}],[\"jvm\",{\"1\":{\"4\":4,\"78\":1,\"493\":1,\"499\":1}}],[\"jraft请求服务端端口\",{\"1\":{\"4\":1}}],[\"和访问令牌\",{\"1\":{\"890\":1}}],[\"和jwe\",{\"1\":{\"869\":1}}],[\"和json网络加密\",{\"1\":{\"867\":1}}],[\"和oauth\",{\"1\":{\"866\":1}}],[\"和用户定义的有效载荷\",{\"1\":{\"854\":1}}],[\"和用户表\",{\"1\":{\"72\":1}}],[\"和协程\",{\"0\":{\"698\":1}}],[\"和非确定性的\",{\"1\":{\"694\":1}}],[\"和非原生编译器\",{\"1\":{\"481\":1}}],[\"和内存大量分配的根源\",{\"1\":{\"692\":1}}],[\"和内嵌类型方法具有同样名字的外层类型的方法会覆写内嵌类型对应的方法\",{\"1\":{\"655\":1}}],[\"和打印信息不同的是它用信息生成错误对象\",{\"1\":{\"689\":1}}],[\"和更好的可读性\",{\"1\":{\"682\":1}}],[\"和标准输出\",{\"1\":{\"678\":1}}],[\"和标签来调整程序的执行位置\",{\"1\":{\"548\":1}}],[\"和运算符\",{\"1\":{\"677\":1}}],[\"和运算符的结果才是\",{\"1\":{\"521\":1}}],[\"和以\",{\"1\":{\"677\":1}}],[\"和别的\",{\"1\":{\"676\":1}}],[\"和方法是一种松耦合的正交关系\",{\"1\":{\"671\":1}}],[\"和示例\",{\"1\":{\"662\":1}}],[\"和行为\",{\"1\":{\"652\":1}}],[\"和右节点\",{\"1\":{\"640\":1}}],[\"和之前的指令一样\",{\"1\":{\"632\":1}}],[\"和我们的程序在同一路径下\",{\"1\":{\"627\":1}}],[\"和表示大有理数的\",{\"1\":{\"626\":1}}],[\"和子字符串\",{\"1\":{\"597\":1}}],[\"和字符串\",{\"1\":{\"600\":1}}],[\"和字符串转换一样\",{\"1\":{\"595\":1}}],[\"和字符串型\",{\"1\":{\"513\":1}}],[\"和一个接口\",{\"1\":{\"662\":1}}],[\"和一个后继节点\",{\"1\":{\"640\":1}}],[\"和一个返回字符串的函数\",{\"1\":{\"627\":1}}],[\"和一个\",{\"1\":{\"593\":1,\"694\":1}}],[\"和一些编程语言的相关概念进行比较\",{\"1\":{\"467\":1}}],[\"和数组不同\",{\"1\":{\"606\":1}}],[\"和数组不同的是\",{\"1\":{\"585\":1}}],[\"和数组一样\",{\"1\":{\"589\":1}}],[\"和管道操作\",{\"1\":{\"574\":1}}],[\"和管道\",{\"1\":{\"569\":2}}],[\"和追踪\",{\"0\":{\"568\":1}}],[\"和格式化字符串的使用\",{\"1\":{\"534\":1}}],[\"和浮点型\",{\"0\":{\"523\":1}}],[\"和错误\",{\"1\":{\"518\":1}}],[\"和结构体的形式支持用户自定义类型\",{\"1\":{\"639\":1}}],[\"和结构\",{\"1\":{\"516\":1}}],[\"和变量\",{\"1\":{\"515\":1}}],[\"和许多编程语言不同\",{\"1\":{\"515\":1}}],[\"和类型\",{\"1\":{\"506\":1}}],[\"和大括号\",{\"1\":{\"504\":1}}],[\"和其它语言相比\",{\"1\":{\"671\":1}}],[\"和其它语言一样\",{\"1\":{\"504\":1}}],[\"和其他类型上是否存在这个方法没有关系\",{\"1\":{\"659\":1}}],[\"和其他面向对象语言比较\",{\"0\":{\"659\":1}}],[\"和其他\",{\"1\":{\"331\":1}}],[\"和反射\",{\"1\":{\"487\":1}}],[\"和混乱\",{\"1\":{\"477\":1}}],[\"和如何在\",{\"1\":{\"467\":1}}],[\"和接口\",{\"1\":{\"467\":1}}],[\"和开发环境\",{\"1\":{\"467\":1}}],[\"和编译相关的命令主要是\",{\"1\":{\"448\":1}}],[\"和空\",{\"0\":{\"362\":1}}],[\"和等于号进行比较\",{\"1\":{\"349\":1}}],[\"和通道\",{\"1\":{\"320\":1}}],[\"和count\",{\"1\":{\"303\":4}}],[\"和串行化\",{\"1\":{\"300\":1}}],[\"和分割索引\",{\"1\":{\"602\":1}}],[\"和分页等操作\",{\"1\":{\"251\":1}}],[\"和分库规则对\",{\"1\":{\"251\":1}}],[\"和指针可能数量不一致\",{\"1\":{\"215\":1}}],[\"和动态职责分离dsd\",{\"1\":{\"68\":1}}],[\"和统一模型rbac3\",{\"1\":{\"65\":1}}],[\"和对象属性\",{\"1\":{\"63\":1}}],[\"和=\",{\"1\":{\"37\":1}}],[\"和\",{\"0\":{\"227\":1,\"303\":1,\"322\":1,\"383\":1,\"446\":1,\"533\":1,\"588\":1,\"630\":1,\"643\":2,\"764\":1},\"1\":{\"4\":1,\"37\":1,\"112\":1,\"129\":1,\"136\":3,\"151\":1,\"154\":2,\"163\":1,\"166\":4,\"186\":3,\"187\":1,\"190\":2,\"199\":1,\"202\":4,\"214\":1,\"216\":1,\"235\":1,\"238\":1,\"252\":1,\"256\":1,\"291\":1,\"294\":2,\"296\":1,\"297\":1,\"303\":1,\"314\":1,\"315\":3,\"316\":3,\"320\":4,\"324\":2,\"328\":1,\"331\":1,\"383\":1,\"390\":1,\"391\":2,\"392\":1,\"396\":1,\"398\":1,\"445\":1,\"455\":1,\"459\":1,\"461\":1,\"462\":1,\"467\":7,\"469\":2,\"471\":4,\"474\":1,\"475\":2,\"476\":1,\"477\":1,\"481\":7,\"482\":5,\"483\":1,\"486\":1,\"487\":3,\"490\":1,\"491\":1,\"492\":1,\"494\":2,\"499\":10,\"501\":3,\"504\":1,\"506\":4,\"507\":1,\"509\":1,\"512\":1,\"513\":1,\"515\":3,\"516\":2,\"517\":1,\"518\":3,\"521\":2,\"523\":5,\"524\":2,\"527\":5,\"528\":1,\"532\":3,\"544\":1,\"547\":2,\"548\":3,\"549\":2,\"550\":1,\"551\":3,\"553\":2,\"554\":1,\"557\":1,\"559\":1,\"562\":1,\"567\":1,\"568\":1,\"569\":2,\"570\":2,\"574\":2,\"576\":1,\"577\":1,\"580\":1,\"581\":1,\"585\":4,\"588\":4,\"590\":1,\"591\":1,\"593\":1,\"601\":1,\"603\":1,\"605\":2,\"609\":1,\"611\":1,\"612\":1,\"614\":1,\"623\":2,\"625\":1,\"626\":2,\"627\":4,\"631\":1,\"632\":1,\"635\":1,\"636\":1,\"638\":1,\"640\":5,\"642\":1,\"643\":2,\"648\":1,\"654\":2,\"655\":1,\"657\":5,\"659\":2,\"660\":4,\"662\":13,\"663\":1,\"667\":1,\"668\":6,\"670\":2,\"671\":3,\"672\":1,\"676\":3,\"677\":4,\"678\":3,\"679\":1,\"682\":2,\"684\":1,\"686\":14,\"687\":2,\"689\":8,\"691\":1,\"693\":1,\"697\":1,\"705\":3,\"709\":2,\"764\":1,\"848\":1,\"849\":3,\"850\":1,\"852\":2,\"858\":4,\"867\":1,\"868\":1}}],[\"主程序中每个\",{\"1\":{\"627\":1}}],[\"主程序利用的包必须在主程序编写之前被编译\",{\"1\":{\"627\":1}}],[\"主函数调用一个使用序列个数作为参数的函数\",{\"1\":{\"587\":1}}],[\"主方法\",{\"1\":{\"427\":1}}],[\"主协程才能结束\",{\"1\":{\"423\":1}}],[\"主从服务器负责各自的读和写\",{\"1\":{\"261\":1}}],[\"主从数据可能不一致\",{\"1\":{\"260\":1}}],[\"主服务器用来处理写操作以及实时性要求比较高的读操作\",{\"1\":{\"261\":1}}],[\"主流数据库的索引一般使用的数据结构为\",{\"1\":{\"213\":1}}],[\"主流的关系型数据库一般都支持以下索引类型\",{\"1\":{\"212\":1}}],[\"主键递增\",{\"1\":{\"299\":1}}],[\"主键的取值不能为空值\",{\"1\":{\"228\":1}}],[\"主键索引\",{\"1\":{\"212\":1}}],[\"主键\",{\"1\":{\"82\":1}}],[\"主体用户\",{\"1\":{\"73\":1}}],[\"主要有两种方法来实现在类型中嵌入功能\",{\"1\":{\"656\":1}}],[\"主要有以下四种异常\",{\"1\":{\"288\":1}}],[\"主要用于安装非标准库的包文件\",{\"1\":{\"498\":1}}],[\"主要由\",{\"1\":{\"487\":1}}],[\"主要基于\",{\"1\":{\"481\":1}}],[\"主要目的都是为了减少\",{\"1\":{\"439\":1}}],[\"主要避免空间浪费\",{\"1\":{\"354\":1}}],[\"主要涉及三个线程\",{\"1\":{\"260\":1}}],[\"主要包含一个关键字数组\",{\"1\":{\"214\":1}}],[\"主要是\",{\"1\":{\"689\":1}}],[\"主要是由于其格式上非常简洁\",{\"1\":{\"682\":1}}],[\"主要是各种函数\",{\"1\":{\"449\":1}}],[\"主要是在后台管理控制非法用户使用系统\",{\"1\":{\"72\":1}}],[\"主要是用来记录用户的基本信息和密码信息\",{\"1\":{\"72\":1}}],[\"主要是对用户和角色有如下约束\",{\"1\":{\"68\":1}}],[\"主要引入了静态职责分离ssd\",{\"1\":{\"68\":1}}],[\"主题标识符\",{\"1\":{\"869\":1}}],[\"主题声明通常将一方识别为另一方\",{\"1\":{\"848\":1}}],[\"主题\",{\"1\":{\"35\":1,\"852\":1}}],[\"主端口\",{\"1\":{\"4\":1}}],[\"主机和可选的端口号和路径组件\",{\"1\":{\"868\":1,\"869\":1}}],[\"主机\",{\"1\":{\"1\":1}}],[\"7中的id\",{\"1\":{\"885\":1}}],[\"7中的密钥进行验证\",{\"1\":{\"883\":1}}],[\"727\",{\"1\":{\"709\":1}}],[\"797\",{\"1\":{\"709\":1}}],[\"79\",{\"1\":{\"709\":1}}],[\"719\",{\"1\":{\"709\":1}}],[\"71\",{\"1\":{\"709\":1}}],[\"769\",{\"1\":{\"709\":1}}],[\"761\",{\"1\":{\"709\":1}}],[\"76\",{\"1\":{\"686\":1}}],[\"762911244\",{\"1\":{\"528\":1}}],[\"7float\",{\"1\":{\"662\":1}}],[\"743\",{\"1\":{\"709\":1}}],[\"74\",{\"1\":{\"662\":3,\"686\":1}}],[\"744\",{\"1\":{\"523\":1}}],[\"7iteration\",{\"1\":{\"651\":1}}],[\"7sum\",{\"1\":{\"591\":1}}],[\"7strings\",{\"1\":{\"572\":1}}],[\"739\",{\"1\":{\"709\":1}}],[\"733\",{\"1\":{\"709\":1}}],[\"730270\",{\"1\":{\"577\":1}}],[\"73\",{\"1\":{\"557\":1,\"709\":1}}],[\"757\",{\"1\":{\"709\":1}}],[\"75182\",{\"1\":{\"858\":1}}],[\"75167\",{\"1\":{\"845\":1}}],[\"75156\",{\"1\":{\"845\":1}}],[\"751\",{\"1\":{\"709\":1}}],[\"7519\",{\"1\":{\"26\":1}}],[\"7586\",{\"1\":{\"662\":6}}],[\"75\",{\"1\":{\"528\":1}}],[\"754\",{\"1\":{\"523\":1}}],[\"773\",{\"1\":{\"709\":1}}],[\"77\",{\"1\":{\"528\":1,\"670\":2}}],[\"775\",{\"1\":{\"523\":2}}],[\"777\",{\"1\":{\"3\":1,\"6\":4,\"627\":1}}],[\"701\",{\"1\":{\"709\":1}}],[\"709\",{\"1\":{\"523\":1,\"709\":1}}],[\"70\",{\"1\":{\"499\":1,\"528\":1}}],[\"7037656471210819614\",{\"1\":{\"397\":1}}],[\"7pukul\",{\"1\":{\"407\":1}}],[\"7hwd9ymc\",{\"1\":{\"361\":1}}],[\"7hwd9ymcmbd\",{\"1\":{\"361\":1}}],[\"7\",{\"0\":{\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"161\":1,\"328\":1,\"369\":1,\"387\":1,\"477\":1,\"487\":1,\"498\":1,\"512\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"540\":2,\"541\":1,\"542\":1,\"543\":1,\"544\":1,\"545\":1,\"572\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"582\":1,\"583\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":1,\"599\":1,\"600\":1,\"601\":2,\"602\":1,\"629\":1,\"657\":1,\"660\":1,\"705\":1,\"731\":1,\"761\":1,\"813\":1,\"879\":1,\"887\":1,\"898\":1,\"912\":1,\"925\":1,\"947\":1,\"959\":1,\"960\":1,\"961\":1,\"962\":1,\"963\":1,\"964\":1},\"1\":{\"317\":1,\"320\":1,\"429\":1,\"438\":1,\"467\":1,\"499\":2,\"509\":1,\"513\":1,\"516\":2,\"518\":4,\"519\":1,\"523\":1,\"529\":1,\"530\":1,\"532\":4,\"542\":1,\"546\":1,\"550\":1,\"551\":3,\"553\":4,\"554\":1,\"557\":5,\"558\":1,\"565\":2,\"567\":3,\"568\":2,\"569\":1,\"570\":1,\"574\":1,\"577\":2,\"580\":8,\"581\":5,\"582\":2,\"583\":3,\"585\":8,\"587\":4,\"588\":3,\"590\":3,\"591\":8,\"592\":9,\"593\":5,\"595\":1,\"597\":1,\"600\":1,\"601\":1,\"602\":6,\"609\":1,\"611\":1,\"612\":1,\"623\":1,\"625\":1,\"627\":4,\"628\":1,\"631\":1,\"643\":1,\"645\":1,\"647\":4,\"651\":1,\"655\":1,\"656\":1,\"658\":1,\"660\":2,\"662\":3,\"664\":2,\"670\":1,\"676\":1,\"679\":1,\"682\":1,\"686\":2,\"688\":1,\"689\":5,\"692\":2,\"694\":1,\"696\":1,\"706\":1,\"709\":2,\"858\":2,\"859\":1,\"860\":3}}],[\"787\",{\"1\":{\"709\":1}}],[\"784\",{\"1\":{\"662\":3}}],[\"7848\",{\"1\":{\"4\":3}}],[\"78\",{\"1\":{\"565\":2}}],[\"788\",{\"1\":{\"6\":1}}],[\"gy\",{\"1\":{\"811\":1}}],[\"ghcr\",{\"1\":{\"782\":5}}],[\"ghostview\",{\"1\":{\"692\":1}}],[\"gv\",{\"1\":{\"692\":1}}],[\"gperftools\",{\"1\":{\"692\":2}}],[\"gpm\",{\"1\":{\"409\":2}}],[\"guaranteed\",{\"1\":{\"664\":1}}],[\"gui\",{\"1\":{\"467\":4}}],[\"guid\",{\"1\":{\"257\":1}}],[\"gl\",{\"1\":{\"638\":4}}],[\"global目录\",{\"1\":{\"979\":1}}],[\"global\",{\"0\":{\"979\":1},\"1\":{\"409\":1,\"519\":1,\"811\":2,\"828\":2,\"979\":1,\"981\":1,\"982\":1}}],[\"ggw8hz1euvluxnuuijkx\",{\"1\":{\"883\":1}}],[\"gggggg\",{\"1\":{\"554\":1}}],[\"gggggggggg\",{\"1\":{\"538\":2}}],[\"ggggg\",{\"1\":{\"554\":1}}],[\"gggg\",{\"1\":{\"554\":1}}],[\"ggg\",{\"1\":{\"554\":1}}],[\"gg\",{\"1\":{\"538\":1,\"554\":1}}],[\"gb\",{\"1\":{\"513\":1,\"525\":2}}],[\"gdb\",{\"1\":{\"494\":1}}],[\"gdpr\",{\"1\":{\"74\":1}}],[\"gz\",{\"1\":{\"483\":2,\"679\":1}}],[\"gzipped\",{\"1\":{\"679\":1}}],[\"gzip\",{\"1\":{\"455\":1,\"662\":1,\"679\":4}}],[\"gnu\",{\"1\":{\"447\":2,\"481\":2}}],[\"gccmg4vfkjkm8fcgvnzzun4\",{\"1\":{\"883\":1}}],[\"gccgo\",{\"1\":{\"474\":1,\"481\":4,\"487\":2,\"695\":1,\"696\":1}}],[\"gcc\",{\"1\":{\"447\":1,\"469\":1,\"481\":4,\"483\":1,\"485\":1}}],[\"gc算法解读\",{\"1\":{\"430\":1}}],[\"gcmark\",{\"1\":{\"430\":1}}],[\"gcphase\",{\"1\":{\"430\":1}}],[\"gctriggertime\",{\"1\":{\"432\":1}}],[\"gctriggerheap\",{\"1\":{\"432\":1}}],[\"gctriggercycle\",{\"1\":{\"430\":1,\"432\":1}}],[\"gctrigger\",{\"1\":{\"430\":1}}],[\"gcstart\",{\"1\":{\"430\":1,\"431\":1}}],[\"gcwaitonmark\",{\"1\":{\"430\":2,\"431\":2}}],[\"gc机制随着golang版本变化如何变化的\",{\"1\":{\"429\":1}}],[\"gc\",{\"0\":{\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"443\":1},\"1\":{\"429\":4,\"430\":1,\"431\":6,\"432\":4,\"438\":3,\"439\":4,\"443\":3,\"474\":2,\"481\":7,\"487\":1,\"661\":7,\"695\":1,\"696\":1}}],[\"gc相关\",{\"0\":{\"428\":1}}],[\"g退出\",{\"1\":{\"415\":1}}],[\"g拥有栈\",{\"1\":{\"415\":1}}],[\"g0不指向任何可执行的函数\",{\"1\":{\"415\":1}}],[\"g0仅用于负责调度的g\",{\"1\":{\"415\":1}}],[\"g0是每次启动一个m都会第一个创建的gourtine\",{\"1\":{\"415\":1}}],[\"g0\",{\"0\":{\"415\":1},\"1\":{\"415\":1,\"606\":1}}],[\"gm\",{\"1\":{\"410\":1}}],[\"gmp\",{\"0\":{\"409\":1},\"1\":{\"410\":1}}],[\"gmp相关\",{\"0\":{\"407\":1}}],[\"g1\",{\"1\":{\"330\":1}}],[\"game\",{\"1\":{\"499\":1}}],[\"gawk\",{\"1\":{\"483\":1}}],[\"garbage\",{\"1\":{\"428\":1,\"708\":1}}],[\"gap\",{\"1\":{\"235\":2}}],[\"gateway\",{\"1\":{\"78\":1}}],[\"gaoyang0514\",{\"1\":{\"828\":1}}],[\"gaoyangbenyang\",{\"1\":{\"78\":2}}],[\"gaoyang\",{\"1\":{\"1\":5,\"2\":4,\"3\":5,\"4\":3,\"6\":10,\"757\":1,\"768\":1,\"772\":1}}],[\"genus\",{\"1\":{\"673\":3}}],[\"generate\",{\"1\":{\"709\":6}}],[\"generated\",{\"1\":{\"689\":1}}],[\"generally\",{\"1\":{\"365\":1}}],[\"general\",{\"1\":{\"72\":30,\"73\":12,\"628\":1,\"676\":1}}],[\"generic\",{\"1\":{\"561\":1}}],[\"george\",{\"1\":{\"540\":4}}],[\"geany\",{\"1\":{\"491\":1}}],[\"gedit\",{\"1\":{\"483\":1,\"491\":1,\"635\":1,\"689\":2}}],[\"gerrand\",{\"1\":{\"467\":1,\"469\":1}}],[\"get方法\",{\"1\":{\"873\":1}}],[\"get或post方法向授权服务器发送授权请求\",{\"1\":{\"873\":1}}],[\"get和post方法\",{\"1\":{\"873\":1}}],[\"getinstance\",{\"1\":{\"803\":7}}],[\"getitab\",{\"1\":{\"390\":1}}],[\"getuseragebyname\",{\"1\":{\"768\":2}}],[\"gethomedirectory\",{\"1\":{\"725\":1,\"726\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1}}],[\"getfilesystemview\",{\"1\":{\"725\":1,\"726\":2,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1}}],[\"getfilefilter\",{\"1\":{\"42\":1}}],[\"getdata\",{\"1\":{\"700\":5,\"709\":6}}],[\"getdescription\",{\"1\":{\"42\":2}}],[\"getvalue\",{\"1\":{\"662\":5}}],[\"getx2andx3\",{\"1\":{\"564\":6}}],[\"getenv\",{\"1\":{\"515\":5,\"689\":1}}],[\"getnextstring\",{\"1\":{\"590\":2}}],[\"getnumber\",{\"1\":{\"513\":2}}],[\"getname\",{\"1\":{\"314\":1,\"315\":1,\"772\":2}}],[\"get请求\",{\"1\":{\"427\":1}}],[\"getabsolutepath\",{\"1\":{\"727\":2,\"728\":1,\"729\":1,\"730\":1}}],[\"getarea\",{\"1\":{\"392\":1}}],[\"getacceptallfilefilter\",{\"1\":{\"42\":1,\"725\":1,\"732\":2}}],[\"getter\",{\"1\":{\"314\":1,\"654\":2}}],[\"gettotal\",{\"1\":{\"168\":2,\"204\":2}}],[\"getpath\",{\"1\":{\"42\":1}}],[\"gets\",{\"1\":{\"574\":1}}],[\"getstructtag\",{\"1\":{\"328\":2}}],[\"getsize\",{\"1\":{\"42\":1}}],[\"getselectedfiles\",{\"1\":{\"725\":1,\"731\":1}}],[\"getselectedfile\",{\"1\":{\"42\":1,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"732\":1}}],[\"get\",{\"1\":{\"12\":1,\"51\":5,\"52\":2,\"320\":1,\"427\":2,\"449\":1,\"483\":2,\"491\":1,\"512\":1,\"583\":1,\"636\":1,\"638\":3,\"655\":2,\"659\":4,\"662\":3,\"873\":1,\"984\":1}}],[\"g\",{\"1\":{\"51\":1,\"330\":1,\"365\":1,\"405\":9,\"409\":11,\"410\":1,\"481\":1,\"519\":4,\"523\":3,\"538\":2,\"545\":1,\"546\":1,\"549\":1,\"553\":3,\"554\":1,\"557\":3,\"561\":2,\"573\":10,\"574\":2,\"585\":2,\"625\":1,\"689\":21,\"749\":1,\"750\":1,\"983\":2}}],[\"g2\",{\"1\":{\"42\":3}}],[\"greed\",{\"1\":{\"760\":1}}],[\"greenwich\",{\"1\":{\"660\":1}}],[\"greetings\",{\"1\":{\"627\":4}}],[\"greeting\",{\"1\":{\"561\":9,\"567\":3}}],[\"greater\",{\"1\":{\"549\":5,\"551\":1}}],[\"griesemer\",{\"1\":{\"469\":1}}],[\"growth\",{\"1\":{\"593\":1}}],[\"grow\",{\"1\":{\"585\":2}}],[\"growup\",{\"1\":{\"380\":2,\"391\":1}}],[\"group1\",{\"1\":{\"504\":1,\"506\":1}}],[\"groups\",{\"1\":{\"469\":1}}],[\"group`\",{\"1\":{\"73\":3}}],[\"group\",{\"0\":{\"135\":1,\"185\":1,\"256\":1},\"1\":{\"73\":18,\"135\":7,\"136\":3,\"185\":7,\"186\":3,\"221\":2,\"283\":2,\"304\":1,\"305\":1}}],[\"groupadd\",{\"1\":{\"51\":1}}],[\"groupid>\",{\"1\":{\"46\":1}}],[\"graphviz\",{\"1\":{\"692\":1}}],[\"graphics2d\",{\"1\":{\"42\":1}}],[\"grade\",{\"1\":{\"270\":1,\"288\":2,\"291\":5}}],[\"grant授权授予\",{\"1\":{\"868\":1}}],[\"grants\",{\"1\":{\"158\":1,\"194\":1}}],[\"grant\",{\"1\":{\"90\":1,\"154\":2,\"159\":1,\"190\":2,\"195\":1,\"868\":1,\"881\":1}}],[\"grpc\",{\"1\":{\"4\":1,\"328\":1,\"462\":6}}],[\"gi\",{\"1\":{\"663\":2}}],[\"given\",{\"1\":{\"676\":4}}],[\"giveraise\",{\"1\":{\"651\":1}}],[\"gives\",{\"1\":{\"574\":2}}],[\"give\",{\"1\":{\"574\":1,\"638\":2}}],[\"gid=2524765\",{\"1\":{\"469\":1}}],[\"gieben\",{\"1\":{\"467\":1}}],[\"gin源码阅读与分析\",{\"1\":{\"458\":1}}],[\"gin框架介绍及使用\",{\"0\":{\"457\":1}}],[\"gin目录结构\",{\"0\":{\"456\":1}}],[\"gin\",{\"0\":{\"454\":1},\"1\":{\"328\":1,\"454\":1,\"455\":4,\"456\":2,\"457\":1,\"461\":1}}],[\"git目录\",{\"1\":{\"810\":1}}],[\"gitlab服务器\",{\"1\":{\"809\":1}}],[\"git结构及基础命令\",{\"0\":{\"808\":1}}],[\"git简介\",{\"0\":{\"807\":1}}],[\"git\",{\"0\":{\"634\":1,\"806\":1},\"1\":{\"78\":1,\"483\":3,\"490\":1,\"635\":14,\"636\":4,\"808\":8,\"810\":1,\"811\":4,\"812\":1,\"813\":1,\"814\":1,\"815\":2,\"816\":1,\"817\":2,\"818\":4,\"819\":4,\"821\":1,\"822\":3,\"823\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":3,\"828\":4,\"829\":2,\"831\":2},\"2\":{\"833\":1}}],[\"githubusercontent\",{\"1\":{\"832\":24}}],[\"githubassets\",{\"1\":{\"832\":4}}],[\"githubname\",{\"1\":{\"782\":1}}],[\"github\",{\"0\":{\"635\":1,\"636\":1,\"776\":1,\"777\":1,\"832\":1},\"1\":{\"21\":1,\"51\":1,\"78\":1,\"424\":1,\"461\":1,\"469\":2,\"483\":1,\"488\":1,\"491\":1,\"492\":1,\"493\":1,\"627\":2,\"635\":5,\"636\":5,\"692\":1,\"782\":2,\"809\":1,\"828\":1,\"832\":39},\"2\":{\"778\":1}}],[\"gist\",{\"1\":{\"832\":6}}],[\"gis\",{\"1\":{\"6\":1}}],[\"governed\",{\"1\":{\"709\":2}}],[\"gov1\",{\"1\":{\"429\":3}}],[\"goboek\",{\"1\":{\"689\":2,\"700\":1}}],[\"gob2\",{\"1\":{\"686\":2}}],[\"gob1\",{\"1\":{\"686\":2}}],[\"gobdecoder\",{\"1\":{\"672\":1}}],[\"gobencoder\",{\"1\":{\"672\":1}}],[\"gob\",{\"1\":{\"672\":1,\"682\":1,\"686\":18}}],[\"gobin\",{\"1\":{\"450\":2}}],[\"goauth\",{\"1\":{\"637\":1}}],[\"goarch\",{\"1\":{\"633\":1}}],[\"godbcl\",{\"1\":{\"637\":1}}],[\"godoc\",{\"0\":{\"628\":1},\"1\":{\"469\":1,\"497\":7,\"508\":3,\"628\":5}}],[\"gomez\",{\"1\":{\"684\":2}}],[\"gomongo\",{\"1\":{\"637\":1}}],[\"gomysql\",{\"1\":{\"637\":1}}],[\"gomake\",{\"1\":{\"501\":1,\"627\":1,\"631\":2,\"636\":1,\"689\":1}}],[\"gomaxprocs=100\",{\"1\":{\"696\":1}}],[\"gomaxprocs=8\",{\"1\":{\"696\":1}}],[\"gomaxprocs>=n\",{\"1\":{\"696\":1}}],[\"gomaxprocs\",{\"0\":{\"696\":1},\"1\":{\"421\":1,\"695\":1,\"696\":12,\"697\":1}}],[\"gomaxprocs也限制了并发的程度\",{\"1\":{\"411\":1}}],[\"gomaxprocs设置p的数量\",{\"1\":{\"411\":1}}],[\"goinstall\",{\"1\":{\"627\":1}}],[\"going\",{\"1\":{\"538\":2}}],[\"goexit\",{\"1\":{\"689\":2,\"697\":1}}],[\"goex\",{\"1\":{\"627\":5}}],[\"goexample\",{\"1\":{\"627\":4}}],[\"golf\",{\"1\":{\"611\":3,\"612\":2}}],[\"golang常见面试题\",{\"1\":{\"463\":1}}],[\"golang常⻅面试题解析\",{\"0\":{\"308\":1}}],[\"golang实现多并发请求\",{\"0\":{\"427\":1}}],[\"golang协程池blog\",{\"1\":{\"426\":1}}],[\"golang学习篇\",{\"1\":{\"426\":1}}],[\"golang的channel\",{\"1\":{\"396\":1}}],[\"golang规范中\",{\"1\":{\"376\":1}}],[\"golang中数组和slice作为参数的区别\",{\"0\":{\"355\":1}}],[\"golang中struct关于反射tag\",{\"1\":{\"328\":1}}],[\"golang中的字符串底层实现是通过byte数组的\",{\"1\":{\"327\":1}}],[\"golang中http\",{\"0\":{\"9\":1}}],[\"golangxiuyang\",{\"1\":{\"325\":2,\"407\":2,\"428\":2}}],[\"golang代码通常需要编写比python代码更多的字符\",{\"1\":{\"317\":1}}],[\"golang读取配置文件处理方式\",{\"0\":{\"15\":1}}],[\"golang\",{\"0\":{\"321\":1,\"322\":1,\"328\":1,\"329\":1,\"439\":1,\"989\":1},\"1\":{\"320\":1,\"325\":1,\"328\":1,\"331\":1,\"363\":1,\"376\":2,\"430\":1,\"442\":3,\"461\":3,\"462\":1,\"463\":1,\"467\":1,\"469\":6,\"483\":2,\"496\":1,\"497\":2,\"501\":1,\"588\":1,\"627\":1,\"638\":5,\"678\":1,\"689\":1},\"2\":{\"13\":1,\"22\":1,\"464\":1,\"717\":1}}],[\"go|25\",{\"1\":{\"543\":1}}],[\"goog\",{\"1\":{\"662\":1}}],[\"googleapi\",{\"1\":{\"638\":1}}],[\"googleapis\",{\"1\":{\"483\":1}}],[\"googlecode\",{\"1\":{\"469\":1,\"484\":1,\"629\":4}}],[\"google\",{\"0\":{\"715\":1},\"1\":{\"467\":1,\"469\":6,\"476\":2,\"483\":1,\"490\":1,\"602\":1,\"627\":1,\"629\":2,\"636\":1,\"637\":1,\"638\":10,\"682\":1,\"692\":1}}],[\"google对它这个新的宠儿还是很看重的\",{\"1\":{\"320\":1}}],[\"google公司聚集了一批牛人\",{\"1\":{\"320\":1}}],[\"google在业界的知名度和实力自然不用多说\",{\"1\":{\"320\":1}}],[\"goop\",{\"1\":{\"659\":1}}],[\"goo\",{\"1\":{\"638\":4}}],[\"goodbye\",{\"1\":{\"643\":2,\"677\":3}}],[\"good\",{\"1\":{\"547\":1,\"610\":1,\"627\":2,\"681\":3}}],[\"goos\",{\"1\":{\"515\":4,\"549\":3,\"633\":1}}],[\"gotest\",{\"1\":{\"689\":4,\"691\":1}}],[\"gotemplate\",{\"1\":{\"506\":1,\"510\":1}}],[\"got\",{\"1\":{\"678\":1}}],[\"gotoworkin\",{\"1\":{\"655\":1}}],[\"goto2\",{\"1\":{\"559\":3}}],[\"goto\",{\"0\":{\"559\":1},\"1\":{\"504\":1,\"548\":1,\"549\":1,\"554\":1,\"559\":12}}],[\"gotour\",{\"1\":{\"469\":2}}],[\"gotoutine\",{\"1\":{\"332\":1}}],[\"gofiles=\",{\"1\":{\"627\":1,\"631\":2,\"689\":1}}],[\"gofiles\",{\"1\":{\"501\":1,\"689\":1}}],[\"gofmt\",{\"1\":{\"320\":1,\"495\":1,\"496\":12,\"506\":1,\"507\":1,\"512\":1,\"549\":1,\"556\":1,\"559\":1,\"605\":1}}],[\"gosum\",{\"1\":{\"707\":1}}],[\"gosublime\",{\"1\":{\"491\":1}}],[\"gosqlite\",{\"1\":{\"637\":1}}],[\"gostring\",{\"1\":{\"501\":1}}],[\"gosched\",{\"1\":{\"427\":1,\"430\":2,\"431\":1,\"694\":2}}],[\"go<version>\",{\"1\":{\"483\":2}}],[\"gowalker\",{\"1\":{\"469\":1}}],[\"go入门指南\",{\"0\":{\"466\":1}}],[\"gocode\",{\"1\":{\"491\":4}}],[\"goclipse\",{\"0\":{\"493\":1},\"1\":{\"491\":3,\"493\":1,\"494\":1}}],[\"goctl\",{\"1\":{\"459\":1}}],[\"gochan4\",{\"1\":{\"397\":1}}],[\"gonic\",{\"1\":{\"454\":1}}],[\"gopprof\",{\"1\":{\"692\":9}}],[\"goprogexec\",{\"1\":{\"690\":1}}],[\"goprogramt\",{\"1\":{\"682\":1}}],[\"goprogram\",{\"1\":{\"682\":2}}],[\"goprograms\",{\"1\":{\"631\":4,\"632\":3}}],[\"goprotobuf\",{\"1\":{\"637\":1}}],[\"gopher\",{\"1\":{\"469\":1}}],[\"gopath=\",{\"1\":{\"631\":1,\"632\":1}}],[\"gopath=$home\",{\"1\":{\"483\":1}}],[\"gopath\",{\"0\":{\"446\":1},\"1\":{\"446\":2,\"450\":1,\"506\":2,\"629\":1,\"631\":1,\"638\":1}}],[\"gopkg\",{\"1\":{\"18\":1}}],[\"go内存分配器\",{\"0\":{\"441\":1}}],[\"go1|the\",{\"1\":{\"543\":1}}],[\"go1\",{\"1\":{\"429\":3,\"467\":1,\"483\":6,\"543\":3,\"623\":1,\"627\":1,\"629\":2}}],[\"go程序启动时\",{\"1\":{\"409\":1}}],[\"go采用逐步搬迁策略\",{\"1\":{\"372\":1}}],[\"go使用链地址法来解决键冲突\",{\"1\":{\"367\":1}}],[\"go使用interface实现的功能叫组合\",{\"1\":{\"338\":1}}],[\"gozhuanjiarwmutex\",{\"1\":{\"416\":1}}],[\"gozhuanjiamutex\",{\"1\":{\"416\":1}}],[\"gozhuanjiamap\",{\"1\":{\"363\":1}}],[\"gozhuanjia\",{\"1\":{\"363\":1,\"393\":1,\"397\":1,\"416\":2,\"428\":1}}],[\"go中的变量只有在编译器可以证明在函数返回后不会再被引用的\",{\"1\":{\"445\":1}}],[\"go中\",{\"0\":{\"351\":1},\"1\":{\"425\":1}}],[\"go中init\",{\"0\":{\"350\":1}}],[\"go中是不提供set类型的\",{\"1\":{\"337\":1}}],[\"go如何实现类似于java当中的继承机制\",{\"0\":{\"338\":1}}],[\"go提供了map类型\",{\"1\":{\"337\":1}}],[\"go里面的\",{\"0\":{\"340\":1}}],[\"go里面的标准库基本上已经是非常稳定了\",{\"1\":{\"320\":1}}],[\"go里面如何实现set\",{\"0\":{\"337\":1}}],[\"go出现panic的场景\",{\"0\":{\"334\":1}}],[\"go拥有强大的编译检查\",{\"1\":{\"320\":1}}],[\"go拥有接近c的运行效率和接近php的开发效率\",{\"1\":{\"320\":1}}],[\"go是使用组合来实现的继承\",{\"1\":{\"338\":1}}],[\"go是否支持while循环\",{\"0\":{\"336\":1}}],[\"go是为大数据\",{\"1\":{\"320\":1}}],[\"go是一种基于并发编程范式的过程编程语言\",{\"1\":{\"317\":1}}],[\"go自然有一个良好的发展前途\",{\"1\":{\"320\":1}}],[\"go的垃圾回收\",{\"1\":{\"445\":1}}],[\"go的gc算法blog\",{\"1\":{\"430\":1}}],[\"go的runtime要负责goroutine的调度\",{\"1\":{\"412\":1}}],[\"go的错误error类型较统一方便\",{\"1\":{\"321\":1}}],[\"go的语法基于打开和关闭括号\",{\"1\":{\"317\":1}}],[\"go的速度要比java快\",{\"1\":{\"311\":1}}],[\"go仍然是新的\",{\"1\":{\"317\":1}}],[\"go允许程序员在很大程度上管理内存\",{\"1\":{\"317\":1}}],[\"go具有分配给每个变量的类型\",{\"1\":{\"317\":1}}],[\"go更像是c的更新版本\",{\"1\":{\"317\":1}}],[\"go代码可以自动扩展到多个核心\",{\"1\":{\"311\":1}}],[\"go语言逃逸分析最基本的原则是\",{\"1\":{\"445\":1}}],[\"go语言里没有一个关键字或者函数可以直接让变量被编译器分配到堆上\",{\"1\":{\"445\":1}}],[\"go语言里\",{\"1\":{\"445\":1}}],[\"go语言的时间对象有提供add方法如下\",{\"1\":{\"622\":1}}],[\"go语言的逃逸分析是编译器执行静态代码分析后\",{\"1\":{\"445\":1}}],[\"go语言的内存模型及堆的分配管理\",{\"0\":{\"437\":1}}],[\"go语言的继承通过匿名组合完成\",{\"1\":{\"311\":1}}],[\"go语言\",{\"1\":{\"425\":1}}],[\"go语言本身的限制\",{\"1\":{\"409\":1}}],[\"go语言内建的map对象不是线程安全的\",{\"1\":{\"358\":1}}],[\"go语言defer用法大总结\",{\"1\":{\"325\":1}}],[\"go语言支持当前所有的编程范式\",{\"1\":{\"320\":1}}],[\"go语言可以说是开发效率和运行效率二者的完美融合\",{\"1\":{\"320\":1}}],[\"go语言绝对血统纯正\",{\"1\":{\"320\":1}}],[\"go语言语法简单\",{\"1\":{\"320\":1}}],[\"go语言和python的区别\",{\"0\":{\"317\":1}}],[\"go语言和java有什么区别\",{\"0\":{\"311\":1}}],[\"go语言使用http协议进行路由配置\",{\"1\":{\"311\":1}}],[\"go上不允许函数重载\",{\"1\":{\"311\":1}}],[\"go与其它语言\",{\"0\":{\"309\":1}}],[\"goroot=\",{\"1\":{\"628\":1}}],[\"goroot=$home\",{\"1\":{\"483\":1}}],[\"goroot\",{\"0\":{\"446\":1},\"1\":{\"446\":1,\"482\":1,\"483\":1,\"501\":2,\"515\":2,\"627\":2,\"628\":1,\"631\":4,\"689\":2}}],[\"goroutine3\",{\"1\":{\"709\":2}}],[\"goroutine2\",{\"1\":{\"700\":2,\"709\":1}}],[\"goroutine1\",{\"1\":{\"697\":1}}],[\"goroutine加入到p的本地队列\",{\"1\":{\"415\":1}}],[\"goroutine吧\",{\"1\":{\"415\":1}}],[\"goroutine的调度切换更加轻量\",{\"1\":{\"412\":1}}],[\"goroutine的调度器也用到了时间片算法\",{\"1\":{\"412\":1}}],[\"goroutine创建的时候如果要传一个参数进去有什么要注意的点\",{\"0\":{\"341\":1}}],[\"goroutine什么情况下会阻塞\",{\"0\":{\"330\":1}}],[\"goroutines\",{\"0\":{\"698\":1},\"1\":{\"320\":7,\"330\":1,\"625\":1,\"654\":1,\"689\":1,\"694\":1,\"698\":1,\"700\":1,\"705\":2}}],[\"goroutine\",{\"0\":{\"421\":1,\"425\":1,\"426\":1,\"693\":1},\"1\":{\"11\":1,\"320\":2,\"330\":9,\"394\":1,\"405\":5,\"409\":3,\"415\":1,\"417\":2,\"420\":3,\"421\":2,\"423\":2,\"438\":7,\"467\":3,\"473\":3,\"487\":1,\"519\":1,\"546\":1,\"561\":1,\"570\":1,\"573\":1,\"574\":1,\"692\":1,\"693\":1,\"696\":1,\"705\":1,\"709\":1}}],[\"gorm\",{\"1\":{\"56\":2,\"328\":1},\"2\":{\"57\":1}}],[\"gorm中表名自动加s使用复数问题处理\",{\"0\":{\"55\":1}}],[\"go\",{\"0\":{\"312\":1,\"313\":1,\"318\":1,\"325\":1,\"331\":1,\"332\":1,\"348\":1,\"349\":1,\"354\":1,\"378\":1,\"392\":1,\"397\":1,\"405\":1,\"418\":1,\"423\":1,\"429\":1,\"430\":1,\"440\":1,\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"459\":1,\"468\":1,\"471\":1,\"473\":1,\"478\":1,\"482\":1,\"483\":1,\"484\":1,\"485\":1,\"487\":1,\"488\":1,\"490\":1,\"495\":1,\"499\":1,\"505\":1,\"510\":1,\"512\":1,\"629\":1,\"630\":2,\"637\":1,\"638\":1,\"659\":1,\"671\":1,\"691\":1,\"698\":1,\"715\":1,\"716\":1},\"1\":{\"12\":1,\"310\":1,\"312\":5,\"314\":3,\"315\":2,\"316\":3,\"318\":1,\"320\":12,\"328\":1,\"329\":2,\"330\":4,\"331\":2,\"342\":1,\"348\":1,\"354\":1,\"365\":2,\"378\":2,\"382\":2,\"383\":2,\"387\":1,\"389\":1,\"390\":2,\"391\":1,\"392\":5,\"394\":2,\"409\":1,\"410\":1,\"418\":1,\"423\":3,\"424\":2,\"426\":1,\"427\":2,\"429\":2,\"438\":2,\"440\":1,\"446\":5,\"447\":4,\"448\":3,\"449\":11,\"450\":8,\"451\":1,\"456\":10,\"457\":1,\"459\":5,\"461\":1,\"462\":1,\"467\":40,\"469\":41,\"471\":9,\"472\":2,\"473\":16,\"474\":6,\"475\":9,\"476\":18,\"477\":4,\"478\":6,\"479\":1,\"481\":23,\"482\":15,\"483\":36,\"484\":3,\"485\":8,\"486\":5,\"487\":9,\"488\":3,\"489\":3,\"490\":5,\"491\":8,\"492\":3,\"494\":1,\"495\":4,\"496\":13,\"497\":11,\"498\":13,\"499\":21,\"501\":13,\"502\":3,\"504\":13,\"505\":1,\"506\":26,\"507\":1,\"508\":2,\"509\":2,\"510\":4,\"511\":1,\"512\":2,\"513\":1,\"515\":11,\"516\":1,\"517\":1,\"518\":2,\"519\":8,\"520\":2,\"521\":4,\"523\":7,\"524\":1,\"526\":1,\"527\":5,\"528\":1,\"530\":1,\"531\":4,\"532\":5,\"533\":1,\"534\":1,\"536\":2,\"538\":1,\"539\":1,\"540\":1,\"543\":4,\"545\":3,\"546\":2,\"547\":14,\"548\":3,\"549\":6,\"550\":5,\"551\":6,\"552\":1,\"553\":6,\"554\":5,\"555\":1,\"557\":4,\"558\":5,\"559\":6,\"560\":2,\"561\":7,\"562\":1,\"563\":3,\"564\":5,\"565\":4,\"566\":1,\"567\":2,\"568\":6,\"569\":1,\"570\":5,\"571\":3,\"572\":2,\"573\":3,\"574\":8,\"576\":1,\"577\":3,\"578\":5,\"580\":6,\"581\":2,\"582\":2,\"583\":2,\"585\":2,\"587\":2,\"589\":1,\"590\":1,\"591\":6,\"592\":1,\"593\":5,\"595\":2,\"598\":1,\"602\":6,\"605\":2,\"608\":1,\"609\":3,\"610\":1,\"611\":1,\"612\":2,\"613\":1,\"614\":6,\"623\":3,\"624\":1,\"625\":2,\"626\":5,\"627\":18,\"628\":1,\"629\":14,\"631\":19,\"632\":6,\"633\":11,\"635\":2,\"636\":4,\"637\":9,\"638\":12,\"639\":3,\"640\":14,\"642\":3,\"643\":1,\"644\":3,\"645\":1,\"647\":3,\"648\":2,\"651\":11,\"652\":1,\"653\":7,\"654\":4,\"655\":3,\"656\":2,\"657\":7,\"658\":3,\"659\":11,\"660\":10,\"661\":6,\"662\":31,\"663\":3,\"664\":2,\"665\":1,\"666\":1,\"667\":1,\"668\":3,\"669\":2,\"670\":8,\"671\":6,\"672\":5,\"673\":4,\"675\":1,\"676\":14,\"677\":7,\"678\":10,\"679\":1,\"680\":6,\"681\":3,\"682\":21,\"683\":1,\"686\":22,\"687\":6,\"688\":2,\"689\":49,\"690\":1,\"691\":4,\"692\":4,\"693\":3,\"694\":11,\"695\":4,\"696\":1,\"697\":4,\"698\":7,\"699\":1,\"700\":7,\"701\":7,\"702\":3,\"703\":2,\"704\":2,\"705\":5,\"706\":2,\"707\":7,\"708\":5,\"709\":18}}],[\"2和10\",{\"1\":{\"879\":1}}],[\"2节中定义的授权代码流相同\",{\"1\":{\"891\":1}}],[\"2节中定义的参数\",{\"1\":{\"877\":1}}],[\"2节中\",{\"1\":{\"884\":1}}],[\"2节所述\",{\"1\":{\"880\":1}}],[\"2节\",{\"1\":{\"873\":1,\"892\":1}}],[\"2vvznkilcjuyw1lijoiuhjldhr5ie5hbwuilcjsyxn0cgfnzsi6ii92awv3cy9zzxr0aw5ncyj9\",{\"1\":{\"854\":1}}],[\"2nd\",{\"1\":{\"689\":1}}],[\"2nf\",{\"0\":{\"291\":1}}],[\"2b\",{\"1\":{\"683\":1}}],[\"2interfaces\",{\"1\":{\"662\":1}}],[\"2personex1\",{\"1\":{\"640\":1}}],[\"2size\",{\"1\":{\"623\":1}}],[\"2map\",{\"1\":{\"612\":1}}],[\"2gb\",{\"1\":{\"580\":1}}],[\"2x\",{\"1\":{\"564\":3}}],[\"2fcb\",{\"1\":{\"873\":2,\"881\":1}}],[\"2fclient\",{\"1\":{\"873\":2,\"881\":1}}],[\"2f\",{\"1\":{\"528\":1,\"873\":2,\"881\":1}}],[\"2e9\",{\"1\":{\"700\":2}}],[\"2e\",{\"1\":{\"523\":1,\"668\":1}}],[\"2kb\",{\"1\":{\"438\":1}}],[\"2^15时\",{\"1\":{\"371\":1}}],[\"2^b\",{\"1\":{\"364\":1}}],[\"281\",{\"1\":{\"709\":1}}],[\"283\",{\"1\":{\"709\":1}}],[\"2839\",{\"1\":{\"692\":1}}],[\"283185307179586\",{\"1\":{\"519\":1}}],[\"280\",{\"1\":{\"678\":2}}],[\"28\",{\"0\":{\"351\":1},\"1\":{\"483\":1,\"499\":2,\"546\":1,\"686\":1}}],[\"277\",{\"1\":{\"709\":1}}],[\"271\",{\"1\":{\"709\":1}}],[\"27\",{\"0\":{\"350\":1},\"1\":{\"499\":2,\"553\":2,\"557\":1,\"606\":1}}],[\"269\",{\"1\":{\"709\":1}}],[\"263\",{\"1\":{\"709\":1}}],[\"26s\",{\"1\":{\"690\":1}}],[\"26412\",{\"1\":{\"557\":1}}],[\"26085\",{\"1\":{\"557\":1}}],[\"26\",{\"0\":{\"349\":1,\"832\":1},\"1\":{\"499\":1,\"553\":1,\"557\":1,\"832\":3}}],[\"24400320\",{\"1\":{\"869\":1}}],[\"241\",{\"1\":{\"709\":1}}],[\"24小时值\",{\"1\":{\"617\":1}}],[\"24\",{\"0\":{\"347\":1,\"830\":1},\"1\":{\"528\":1,\"546\":1,\"553\":1,\"557\":1,\"583\":1,\"606\":1,\"651\":1}}],[\"249\",{\"1\":{\"212\":1}}],[\"239\",{\"1\":{\"709\":1}}],[\"238\",{\"1\":{\"662\":3}}],[\"2308\",{\"1\":{\"662\":1}}],[\"233\",{\"1\":{\"570\":1,\"686\":1,\"709\":1}}],[\"23\",{\"0\":{\"345\":1,\"829\":1},\"1\":{\"517\":2,\"547\":1,\"553\":1,\"557\":1,\"611\":3,\"612\":2,\"624\":1,\"670\":2,\"709\":1}}],[\"229\",{\"1\":{\"686\":1,\"709\":1}}],[\"2222\",{\"1\":{\"626\":1}}],[\"223\",{\"1\":{\"523\":2,\"709\":1}}],[\"227\",{\"1\":{\"467\":1,\"709\":1}}],[\"22\",{\"0\":{\"344\":1,\"828\":1},\"1\":{\"469\":1,\"528\":1,\"547\":1,\"553\":1,\"557\":1,\"581\":5,\"651\":1,\"660\":1,\"832\":3}}],[\"2d+1\",{\"1\":{\"215\":1}}],[\"2d\",{\"1\":{\"215\":1,\"557\":1}}],[\"2`\",{\"1\":{\"72\":2,\"73\":2}}],[\"257\",{\"1\":{\"709\":1}}],[\"2578\",{\"1\":{\"624\":1}}],[\"251\",{\"1\":{\"709\":1}}],[\"2584\",{\"1\":{\"570\":1}}],[\"25\",{\"0\":{\"348\":1,\"831\":1},\"1\":{\"148\":1,\"181\":1,\"354\":3,\"474\":1,\"499\":1,\"504\":1,\"528\":1,\"543\":3,\"550\":2,\"553\":1,\"554\":1,\"557\":1,\"587\":1,\"608\":1,\"662\":3,\"673\":1,\"678\":1,\"689\":4,\"692\":2,\"832\":3}}],[\"255\",{\"1\":{\"72\":9,\"73\":3,\"523\":1,\"572\":1}}],[\"256哈希access\",{\"1\":{\"886\":1}}],[\"256\",{\"1\":{\"34\":4,\"409\":1,\"858\":4,\"859\":1,\"860\":3}}],[\"2147483645\",{\"1\":{\"700\":1}}],[\"2124\",{\"1\":{\"689\":1}}],[\"211\",{\"1\":{\"686\":2,\"709\":1}}],[\"21ed30859d80\",{\"1\":{\"343\":1}}],[\"21\",{\"0\":{\"343\":1,\"716\":1,\"827\":1},\"1\":{\"51\":1,\"467\":2,\"469\":2,\"471\":1,\"476\":1,\"546\":10,\"547\":1,\"553\":1,\"557\":1,\"570\":2,\"574\":3,\"577\":1,\"606\":1,\"620\":1,\"638\":1,\"693\":1,\"832\":3}}],[\"20value\",{\"1\":{\"878\":1}}],[\"20response\",{\"1\":{\"878\":1}}],[\"20email\",{\"1\":{\"873\":2}}],[\"20profile\",{\"1\":{\"873\":2}}],[\"2056\",{\"1\":{\"689\":1}}],[\"2054\",{\"1\":{\"689\":1}}],[\"204\",{\"1\":{\"686\":1}}],[\"2013\",{\"1\":{\"499\":1}}],[\"2012\",{\"1\":{\"483\":1,\"695\":1}}],[\"2015\",{\"1\":{\"476\":1}}],[\"2010\",{\"1\":{\"469\":5,\"676\":2}}],[\"20111221\",{\"1\":{\"546\":1}}],[\"2011\",{\"1\":{\"469\":2,\"476\":1,\"499\":1,\"546\":10,\"568\":1,\"651\":1,\"676\":1,\"689\":5,\"692\":1}}],[\"2017\",{\"1\":{\"251\":1,\"469\":1}}],[\"2018\",{\"1\":{\"148\":1,\"181\":1}}],[\"20200721081402315\",{\"1\":{\"621\":1}}],[\"20200114211203589\",{\"1\":{\"247\":1}}],[\"20200114211639899\",{\"1\":{\"246\":1}}],[\"2020\",{\"1\":{\"620\":1}}],[\"2029250107\",{\"1\":{\"528\":1}}],[\"2023年9月28日0点0分\",{\"1\":{\"29\":1}}],[\"2006年1月2日\",{\"1\":{\"617\":2}}],[\"20060102\",{\"1\":{\"546\":1}}],[\"2006\",{\"1\":{\"546\":4,\"617\":4,\"619\":1,\"620\":1}}],[\"2008\",{\"1\":{\"469\":3,\"676\":2}}],[\"2009\",{\"1\":{\"469\":7,\"676\":1,\"709\":2}}],[\"2007\",{\"1\":{\"469\":2}}],[\"2000+\",{\"1\":{\"481\":1}}],[\"2000\",{\"1\":{\"246\":1,\"427\":2}}],[\"200\",{\"1\":{\"72\":1,\"247\":1,\"427\":2,\"469\":1,\"883\":1}}],[\"20\",{\"0\":{\"342\":1,\"715\":1,\"826\":1},\"1\":{\"51\":1,\"72\":14,\"73\":8,\"148\":1,\"181\":1,\"235\":1,\"328\":1,\"467\":1,\"469\":2,\"473\":1,\"499\":2,\"518\":2,\"525\":1,\"546\":1,\"553\":1,\"554\":1,\"557\":2,\"564\":2,\"574\":3,\"576\":1,\"581\":2,\"587\":1,\"591\":1,\"605\":1,\"606\":1,\"608\":2,\"651\":1,\"662\":1,\"686\":2,\"689\":1,\"692\":3,\"707\":1,\"770\":1}}],[\"2\",{\"0\":{\"26\":1,\"29\":1,\"34\":1,\"83\":1,\"84\":1,\"85\":2,\"88\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":2,\"95\":1,\"96\":2,\"97\":2,\"98\":3,\"99\":2,\"103\":1,\"104\":1,\"105\":2,\"106\":1,\"107\":1,\"108\":2,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"118\":1,\"130\":1,\"139\":1,\"148\":1,\"153\":1,\"156\":1,\"164\":1,\"167\":1,\"312\":1,\"323\":1,\"354\":1,\"359\":1,\"379\":1,\"397\":1,\"410\":1,\"418\":1,\"425\":1,\"430\":1,\"439\":1,\"457\":1,\"470\":1,\"471\":1,\"472\":2,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":2,\"483\":1,\"484\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"491\":1,\"492\":1,\"493\":2,\"502\":1,\"505\":1,\"506\":1,\"507\":2,\"508\":1,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"516\":1,\"522\":1,\"523\":1,\"524\":2,\"525\":1,\"526\":1,\"527\":1,\"528\":1,\"535\":1,\"550\":1,\"555\":1,\"562\":1,\"563\":1,\"564\":2,\"565\":1,\"566\":1,\"581\":1,\"584\":1,\"585\":1,\"586\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"596\":1,\"606\":1,\"608\":1,\"624\":1,\"632\":1,\"636\":1,\"641\":1,\"642\":1,\"643\":2,\"648\":1,\"652\":1,\"664\":1,\"669\":1,\"672\":1,\"678\":1,\"679\":2,\"680\":1,\"682\":1,\"689\":1,\"691\":1,\"695\":1,\"699\":1,\"700\":2,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"726\":1,\"750\":1,\"751\":1,\"752\":1,\"753\":2,\"756\":1,\"769\":1,\"773\":1,\"787\":1,\"788\":1,\"789\":2,\"808\":1,\"846\":1,\"847\":1,\"848\":1,\"851\":1,\"852\":1,\"853\":2,\"860\":1,\"868\":1,\"872\":1,\"873\":1,\"874\":2,\"875\":1,\"876\":1,\"877\":1,\"878\":1,\"879\":1,\"882\":1,\"889\":1,\"890\":1,\"891\":2,\"892\":2,\"893\":3,\"894\":2,\"895\":2,\"896\":2,\"897\":2,\"898\":2,\"899\":2,\"900\":2,\"901\":2,\"902\":2,\"905\":1,\"906\":1,\"907\":2,\"908\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"913\":1,\"914\":1,\"915\":1,\"916\":1,\"917\":1,\"920\":1,\"930\":1,\"931\":1,\"934\":1,\"941\":1,\"944\":1,\"945\":1,\"946\":2,\"950\":1,\"951\":1,\"952\":2,\"953\":1,\"954\":1,\"957\":1,\"960\":1,\"961\":1,\"968\":1,\"969\":1,\"978\":1,\"979\":1,\"980\":2,\"981\":1,\"982\":1,\"983\":1,\"984\":1},\"1\":{\"4\":1,\"70\":1,\"72\":2,\"73\":1,\"127\":1,\"151\":1,\"163\":1,\"187\":1,\"199\":1,\"214\":1,\"226\":1,\"227\":3,\"251\":1,\"258\":2,\"288\":13,\"291\":23,\"292\":6,\"299\":1,\"311\":1,\"317\":1,\"320\":1,\"322\":1,\"331\":1,\"346\":6,\"353\":3,\"354\":1,\"362\":1,\"383\":1,\"394\":1,\"405\":1,\"409\":1,\"411\":2,\"418\":1,\"420\":1,\"421\":1,\"426\":1,\"428\":1,\"429\":3,\"431\":1,\"432\":2,\"438\":2,\"439\":2,\"463\":1,\"467\":1,\"469\":3,\"474\":1,\"476\":2,\"477\":1,\"481\":4,\"483\":5,\"485\":1,\"491\":1,\"493\":1,\"494\":1,\"499\":4,\"501\":3,\"506\":1,\"508\":1,\"509\":1,\"513\":9,\"515\":2,\"519\":4,\"520\":1,\"523\":4,\"525\":8,\"527\":1,\"528\":2,\"529\":1,\"531\":2,\"532\":4,\"538\":1,\"542\":1,\"545\":2,\"547\":1,\"549\":5,\"550\":3,\"551\":2,\"553\":4,\"554\":1,\"555\":1,\"557\":4,\"558\":1,\"559\":1,\"560\":2,\"561\":2,\"562\":1,\"563\":7,\"564\":6,\"567\":2,\"568\":2,\"569\":5,\"570\":4,\"571\":1,\"572\":3,\"573\":3,\"574\":3,\"577\":1,\"580\":7,\"581\":3,\"582\":4,\"583\":1,\"585\":17,\"586\":1,\"587\":2,\"588\":3,\"591\":4,\"592\":5,\"593\":3,\"595\":2,\"597\":1,\"602\":3,\"605\":4,\"609\":4,\"610\":7,\"617\":2,\"624\":4,\"626\":2,\"627\":2,\"629\":3,\"631\":3,\"640\":3,\"642\":1,\"643\":1,\"648\":4,\"649\":1,\"651\":2,\"653\":2,\"654\":2,\"656\":4,\"659\":1,\"660\":5,\"662\":5,\"663\":1,\"670\":1,\"673\":3,\"676\":5,\"677\":3,\"678\":1,\"680\":1,\"682\":2,\"687\":3,\"689\":20,\"692\":6,\"694\":1,\"697\":3,\"700\":2,\"701\":1,\"702\":2,\"706\":1,\"707\":1,\"708\":1,\"709\":9,\"770\":1,\"782\":1,\"846\":1,\"865\":2,\"866\":8,\"868\":9,\"869\":12,\"872\":1,\"873\":16,\"874\":5,\"875\":1,\"877\":2,\"878\":7,\"880\":1,\"881\":3,\"882\":1,\"883\":5,\"884\":1,\"888\":2,\"892\":5}}],[\"29115\",{\"1\":{\"868\":1,\"869\":1}}],[\"293\",{\"1\":{\"709\":1}}],[\"295\",{\"1\":{\"523\":1}}],[\"294\",{\"1\":{\"523\":1}}],[\"29847628\",{\"1\":{\"318\":1}}],[\"29\",{\"1\":{\"3\":1,\"499\":1,\"709\":1}}],[\"开头或者包含\",{\"1\":{\"700\":1}}],[\"开头或者直接叫\",{\"1\":{\"688\":1}}],[\"开头的一系列函数来读取他们\",{\"1\":{\"678\":1}}],[\"开头的函数则是从字符串读取\",{\"1\":{\"677\":1}}],[\"开头的函数\",{\"1\":{\"677\":1}}],[\"开头的\",{\"1\":{\"521\":1,\"680\":1}}],[\"开头的单行注释\",{\"1\":{\"508\":1}}],[\"开头\",{\"1\":{\"504\":1,\"506\":4,\"508\":1,\"517\":1,\"534\":1,\"642\":1,\"662\":1}}],[\"开放\",{\"1\":{\"467\":1}}],[\"开放封闭原则\",{\"1\":{\"316\":1}}],[\"开源化的语言显然能够让更多的开发者参与其中并加速它的发展速度\",{\"1\":{\"469\":1}}],[\"开源关系型数据库\",{\"1\":{\"296\":2}}],[\"开源的轻量级数据库\",{\"1\":{\"296\":1}}],[\"开源的\",{\"1\":{\"251\":1}}],[\"开源项目基本都是只进行错误时的处理\",{\"1\":{\"12\":1}}],[\"开始和结束时间以秒为单位\",{\"1\":{\"640\":1}}],[\"开始并无空行放在声明\",{\"1\":{\"628\":1}}],[\"开始的整数\",{\"1\":{\"605\":1}}],[\"开始到\",{\"1\":{\"596\":3}}],[\"开始在所有类\",{\"1\":{\"580\":1}}],[\"开始计数\",{\"1\":{\"532\":1}}],[\"开始对常量\",{\"1\":{\"510\":1}}],[\"开始自举\",{\"1\":{\"481\":1,\"487\":1}}],[\"开始扫描标记阶段\",{\"1\":{\"431\":1}}],[\"开始新的一轮\",{\"1\":{\"431\":1}}],[\"开始将栈上的对象全部扫描并标记为黑色\",{\"1\":{\"429\":1}}],[\"开始创建一个\",{\"1\":{\"409\":1}}],[\"开始事务\",{\"1\":{\"151\":1,\"187\":1}}],[\"开始\",{\"1\":{\"122\":1,\"580\":1,\"609\":1,\"657\":1,\"661\":1,\"681\":1,\"852\":1}}],[\"开始访问http\",{\"1\":{\"10\":1}}],[\"开发的软件更加具有一致性和可读性\",{\"1\":{\"658\":1}}],[\"开发的集成开发环境\",{\"1\":{\"491\":1}}],[\"开发人员需要通过手动调用\",{\"1\":{\"501\":1}}],[\"开发人员可以通过分析\",{\"1\":{\"264\":1}}],[\"开发中无可撼动的铁律\",{\"1\":{\"496\":1}}],[\"开发中的一些\",{\"1\":{\"477\":1}}],[\"开发工具\",{\"1\":{\"491\":2}}],[\"开发工具的最新信息\",{\"1\":{\"489\":1}}],[\"开发及调试的功能\",{\"1\":{\"490\":1}}],[\"开发环境之间随意切换以及交叉编译的功能\",{\"1\":{\"492\":1}}],[\"开发环境的基本要求\",{\"0\":{\"490\":1}}],[\"开发环境依赖于一些操作系统环境变量\",{\"1\":{\"482\":1}}],[\"开发环境可不挂载\",{\"1\":{\"4\":1}}],[\"开发者不需要关心栈的大小\",{\"1\":{\"694\":1}}],[\"开发者不需要写代码来释放程序中不再使用的变量和结构占用的内存\",{\"1\":{\"661\":1}}],[\"开发者们只能选择使用\",{\"1\":{\"476\":1}}],[\"开发者们总是面临非常艰难的抉择\",{\"1\":{\"472\":1}}],[\"开发者贡献了新的核心代码\",{\"1\":{\"469\":1}}],[\"开发团队的反应\",{\"1\":{\"499\":1}}],[\"开发团队和基本的算法测试\",{\"1\":{\"499\":1}}],[\"开发团队一般也使用这个工具升级\",{\"1\":{\"498\":1}}],[\"开发团队不想要\",{\"1\":{\"496\":1}}],[\"开发团队正在尝试将\",{\"1\":{\"482\":1}}],[\"开发团队将\",{\"1\":{\"469\":1}}],[\"开发团队表示真挚的感谢\",{\"1\":{\"467\":1}}],[\"开发出的软件能够很好地在网络环境下工作\",{\"1\":{\"467\":1}}],[\"开发出的软件能够很好地在现代的多核计算机上工作\",{\"1\":{\"467\":1}}],[\"开发\",{\"1\":{\"320\":1}}],[\"开发过程中相较于\",{\"1\":{\"320\":1}}],[\"开发效率和运行效率高\",{\"1\":{\"320\":1}}],[\"开发和维护都不容易\",{\"1\":{\"164\":1,\"200\":1}}],[\"开发一个系统\",{\"1\":{\"60\":1}}],[\"开机自启\",{\"1\":{\"52\":1}}],[\"开销小\",{\"1\":{\"26\":1}}],[\"开启一个协程来计算\",{\"1\":{\"707\":1}}],[\"开启一个协程接收通道的数据\",{\"1\":{\"701\":1}}],[\"开启mysql服务\",{\"1\":{\"52\":1}}],[\"开启\",{\"1\":{\"51\":1}}],[\"开启pki\",{\"1\":{\"6\":1}}],[\"开启http\",{\"1\":{\"6\":1}}],[\"开启transport\",{\"1\":{\"6\":1}}],[\"开启安全注册\",{\"1\":{\"6\":1}}],[\"开启权限系统\",{\"1\":{\"4\":1}}],[\"开启web控制台\",{\"1\":{\"3\":1}}],[\"s6bhdrkqt3\",{\"1\":{\"869\":1}}],[\"s+\",{\"1\":{\"723\":1}}],[\"skidoo\",{\"1\":{\"670\":2}}],[\"skill\",{\"1\":{\"78\":1}}],[\"s3\",{\"1\":{\"670\":2}}],[\"svg\",{\"1\":{\"692\":1}}],[\"sv\",{\"1\":{\"662\":3}}],[\"svn\",{\"1\":{\"636\":1}}],[\"s2\",{\"1\":{\"532\":3,\"585\":7,\"587\":3,\"588\":4,\"598\":2,\"670\":2}}],[\"small\",{\"1\":{\"508\":1}}],[\"sdl\",{\"1\":{\"637\":1}}],[\"sdk\",{\"1\":{\"476\":2}}],[\"sdept\",{\"1\":{\"288\":2,\"291\":7,\"292\":3}}],[\"srandom\",{\"1\":{\"501\":2}}],[\"srcname\",{\"1\":{\"680\":2}}],[\"src\",{\"1\":{\"446\":2,\"447\":2,\"449\":1,\"450\":1,\"474\":1,\"481\":3,\"482\":1,\"483\":6,\"486\":2,\"487\":1,\"497\":1,\"501\":2,\"593\":6,\"595\":1,\"627\":3,\"629\":1,\"631\":8,\"632\":1,\"638\":1,\"680\":5,\"689\":4}}],[\"srp\",{\"1\":{\"316\":1}}],[\"s1\",{\"1\":{\"438\":1,\"532\":3,\"588\":3,\"670\":2}}],[\"s0\",{\"1\":{\"438\":2}}],[\"sz的博客\",{\"1\":{\"430\":1}}],[\"sb\",{\"1\":{\"348\":1}}],[\"sbinet\",{\"1\":{\"488\":1}}],[\"sbin\",{\"1\":{\"51\":1}}],[\"symbol\",{\"1\":{\"762\":1}}],[\"symonds\",{\"1\":{\"476\":1}}],[\"syntaxerror\",{\"1\":{\"688\":4}}],[\"syntax\",{\"1\":{\"507\":1,\"564\":1,\"640\":1}}],[\"synchronous\",{\"1\":{\"703\":1}}],[\"synchronized\",{\"1\":{\"625\":1,\"803\":3}}],[\"syncedbuffer\",{\"1\":{\"625\":1}}],[\"sync\",{\"0\":{\"625\":1},\"1\":{\"335\":1,\"418\":1,\"423\":2,\"424\":1,\"427\":3,\"625\":8,\"628\":1,\"654\":1,\"694\":2,\"707\":1}}],[\"sys\",{\"1\":{\"614\":1}}],[\"syscall\",{\"1\":{\"614\":6,\"688\":11}}],[\"sysctl\",{\"1\":{\"51\":1}}],[\"system\",{\"1\":{\"515\":3,\"517\":1,\"688\":1,\"689\":1,\"725\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"803\":1}}],[\"systemctl\",{\"1\":{\"50\":1}}],[\"sysmon\",{\"1\":{\"330\":1}}],[\"slav32hkkg\",{\"1\":{\"883\":1}}],[\"sl3\",{\"1\":{\"593\":4}}],[\"slto\",{\"1\":{\"593\":3}}],[\"slfrom\",{\"1\":{\"593\":2}}],[\"sl2\",{\"1\":{\"543\":6}}],[\"sl\",{\"1\":{\"543\":4,\"590\":3,\"592\":3}}],[\"slickedit\",{\"1\":{\"491\":1}}],[\"slice1\",{\"1\":{\"585\":31,\"587\":15,\"591\":9,\"592\":12}}],[\"slices\",{\"1\":{\"376\":1,\"516\":1,\"580\":1,\"585\":1,\"591\":3,\"601\":1,\"643\":1}}],[\"slices能作为map类型的key吗\",{\"0\":{\"376\":1}}],[\"slice作为参数传递有什么问题\",{\"0\":{\"355\":1}}],[\"slice\",{\"0\":{\"352\":1,\"354\":1,\"543\":1,\"578\":1},\"1\":{\"329\":2,\"345\":1,\"349\":1,\"354\":23,\"360\":1,\"382\":1,\"439\":1,\"487\":1,\"496\":1,\"509\":1,\"532\":1,\"542\":4,\"543\":5,\"563\":1,\"567\":9,\"578\":1,\"585\":14,\"587\":15,\"588\":3,\"590\":1,\"591\":1,\"592\":24,\"593\":14,\"610\":1,\"668\":2,\"675\":1,\"686\":1}}],[\"sleep\",{\"1\":{\"12\":1,\"330\":1,\"424\":2,\"546\":1,\"623\":2,\"697\":11,\"700\":4,\"701\":1,\"707\":1,\"708\":1}}],[\"snow\",{\"1\":{\"481\":1}}],[\"snowflake\",{\"1\":{\"257\":1}}],[\"sno\",{\"1\":{\"288\":3,\"291\":8,\"292\":2}}],[\"sname\",{\"1\":{\"168\":3,\"204\":3,\"288\":2,\"291\":5,\"292\":1}}],[\"sqr\",{\"1\":{\"667\":3}}],[\"sqrinterface\",{\"1\":{\"667\":3}}],[\"sqrt\",{\"1\":{\"149\":1,\"182\":1,\"550\":1,\"640\":1,\"653\":1,\"655\":1,\"688\":4}}],[\"sq1\",{\"1\":{\"662\":10}}],[\"sq\",{\"1\":{\"662\":9,\"673\":4}}],[\"square\",{\"1\":{\"662\":40,\"673\":5,\"688\":3,\"689\":1}}],[\"sqlite3\",{\"1\":{\"637\":1}}],[\"sqlite\",{\"1\":{\"296\":1}}],[\"sql\",{\"0\":{\"81\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"263\":1,\"269\":1,\"274\":1,\"276\":1,\"280\":1,\"299\":1,\"302\":1},\"1\":{\"83\":5,\"84\":3,\"85\":7,\"87\":1,\"103\":2,\"112\":1,\"128\":1,\"129\":1,\"130\":1,\"162\":1,\"164\":1,\"167\":1,\"198\":1,\"200\":1,\"203\":1,\"205\":6,\"235\":2,\"247\":2,\"248\":3,\"251\":3,\"257\":1,\"260\":3,\"262\":1,\"263\":3,\"264\":1,\"272\":1,\"275\":1,\"276\":1,\"280\":2,\"296\":1,\"301\":2,\"303\":1,\"305\":1,\"306\":1}}],[\"silver\",{\"1\":{\"869\":1}}],[\"sieve2\",{\"1\":{\"709\":1}}],[\"sieve\",{\"1\":{\"709\":5}}],[\"sieve1\",{\"1\":{\"709\":1}}],[\"situation\",{\"1\":{\"688\":1}}],[\"sitesbay\",{\"1\":{\"205\":1}}],[\"si\",{\"1\":{\"667\":3}}],[\"simpler\",{\"1\":{\"662\":3,\"663\":2}}],[\"simple\",{\"1\":{\"517\":1,\"559\":1,\"563\":2,\"662\":2}}],[\"sizeof\",{\"1\":{\"642\":1}}],[\"sized\",{\"1\":{\"383\":1}}],[\"size\",{\"1\":{\"256\":1,\"284\":1,\"545\":3,\"550\":1,\"642\":1,\"686\":4}}],[\"side\",{\"0\":{\"848\":1},\"1\":{\"518\":1,\"563\":1,\"566\":1,\"662\":11,\"673\":3,\"846\":2}}],[\"sid\",{\"1\":{\"168\":3,\"204\":3}}],[\"sink\",{\"1\":{\"709\":2}}],[\"since\",{\"1\":{\"559\":1}}],[\"single\",{\"1\":{\"550\":1}}],[\"singulartable\",{\"1\":{\"56\":1}}],[\"sin\",{\"1\":{\"149\":1,\"182\":1}}],[\"signed\",{\"1\":{\"887\":1}}],[\"signal\",{\"1\":{\"705\":2,\"707\":2}}],[\"signatures的过程称为验证或验证令牌\",{\"1\":{\"857\":1}}],[\"signatures的目的是让一方或多方确定\",{\"1\":{\"857\":1}}],[\"signatures并不能阻止其他方读取\",{\"1\":{\"857\":1}}],[\"signatures可能是\",{\"1\":{\"857\":1}}],[\"signatures用于验证数据是否被篡改\",{\"1\":{\"848\":1}}],[\"signatures\",{\"0\":{\"857\":1},\"1\":{\"845\":1}}],[\"signature\",{\"0\":{\"36\":1},\"1\":{\"33\":1,\"36\":2,\"39\":3,\"858\":1,\"859\":4,\"868\":1}}],[\"sign\",{\"1\":{\"35\":1}}],[\"so\",{\"1\":{\"667\":1,\"672\":1,\"682\":1,\"705\":1}}],[\"sortmain\",{\"1\":{\"662\":3}}],[\"sorter\",{\"1\":{\"662\":9,\"664\":1}}],[\"sortedappender\",{\"1\":{\"676\":4}}],[\"sortedcars\",{\"1\":{\"676\":25}}],[\"sorted\",{\"1\":{\"611\":2,\"628\":1,\"662\":4,\"676\":2}}],[\"sortstrings\",{\"1\":{\"628\":1,\"662\":1}}],[\"sortints\",{\"1\":{\"628\":3,\"662\":1}}],[\"sortfloat64s\",{\"1\":{\"628\":1}}],[\"sort\",{\"1\":{\"600\":4,\"611\":4,\"614\":2,\"628\":5,\"658\":1,\"662\":29,\"705\":1}}],[\"somevalue\",{\"1\":{\"766\":2}}],[\"somecomputation\",{\"1\":{\"705\":1}}],[\"some\",{\"1\":{\"568\":4,\"575\":4,\"626\":2,\"676\":1,\"677\":1,\"680\":1}}],[\"something\",{\"1\":{\"549\":8,\"614\":1,\"704\":1,\"705\":1,\"765\":1}}],[\"solaris\",{\"1\":{\"482\":1}}],[\"soft\",{\"1\":{\"242\":1,\"820\":1}}],[\"son\",{\"1\":{\"214\":2}}],[\"soundex\",{\"1\":{\"147\":4,\"180\":4}}],[\"source\",{\"1\":{\"56\":1,\"483\":1,\"680\":1,\"709\":4}}],[\"socket\",{\"1\":{\"51\":2,\"330\":2}}],[\"s\",{\"1\":{\"51\":1,\"52\":1,\"163\":2,\"199\":2,\"232\":1,\"335\":1,\"346\":6,\"361\":4,\"389\":2,\"427\":2,\"481\":2,\"483\":1,\"501\":3,\"509\":1,\"515\":2,\"517\":2,\"532\":5,\"534\":6,\"535\":2,\"536\":9,\"538\":8,\"539\":3,\"540\":5,\"541\":2,\"542\":2,\"543\":3,\"545\":4,\"546\":2,\"547\":9,\"549\":1,\"550\":4,\"551\":4,\"553\":1,\"557\":15,\"567\":9,\"568\":15,\"572\":2,\"574\":3,\"575\":1,\"576\":1,\"577\":1,\"581\":1,\"585\":21,\"586\":3,\"588\":7,\"590\":4,\"591\":2,\"593\":9,\"595\":10,\"597\":2,\"598\":2,\"617\":2,\"624\":2,\"627\":1,\"631\":3,\"637\":1,\"638\":4,\"640\":10,\"651\":2,\"656\":4,\"662\":5,\"670\":8,\"672\":1,\"677\":13,\"678\":3,\"679\":2,\"682\":18,\"686\":4,\"687\":1,\"688\":3,\"689\":12,\"697\":1,\"700\":1,\"705\":6,\"707\":12,\"709\":2,\"723\":2}}],[\"swap\",{\"1\":{\"628\":3,\"662\":10}}],[\"swagger\",{\"1\":{\"46\":1}}],[\"sweepers\",{\"1\":{\"430\":1}}],[\"sweepone\",{\"1\":{\"430\":1,\"431\":1}}],[\"sweep\",{\"1\":{\"429\":1,\"430\":1}}],[\"swig\",{\"1\":{\"502\":5}}],[\"switch2\",{\"1\":{\"551\":1}}],[\"switch1\",{\"1\":{\"551\":1}}],[\"switches\",{\"1\":{\"383\":1}}],[\"switch\",{\"0\":{\"551\":1},\"1\":{\"52\":1,\"389\":1,\"504\":1,\"513\":1,\"521\":1,\"548\":2,\"549\":1,\"551\":23,\"554\":1,\"558\":1,\"559\":1,\"561\":1,\"567\":2,\"599\":2,\"662\":8,\"663\":5,\"670\":3,\"677\":5,\"682\":2,\"684\":2,\"686\":2,\"688\":2}}],[\"swing\",{\"0\":{\"724\":1},\"2\":{\"44\":1}}],[\"shells\",{\"1\":{\"699\":1}}],[\"shworturl\",{\"1\":{\"638\":1}}],[\"should\",{\"1\":{\"867\":2}}],[\"shortwait\",{\"1\":{\"697\":9}}],[\"shortname\",{\"1\":{\"662\":1}}],[\"shorter\",{\"1\":{\"656\":1,\"662\":2}}],[\"shortened\",{\"1\":{\"638\":1}}],[\"shortener<\",{\"1\":{\"638\":1}}],[\"shorten\",{\"1\":{\"638\":1}}],[\"shorturl\",{\"1\":{\"638\":5}}],[\"short\",{\"1\":{\"638\":6}}],[\"showopendialog\",{\"1\":{\"725\":2,\"726\":2,\"727\":2,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1}}],[\"showvalue\",{\"1\":{\"662\":4}}],[\"shown\",{\"1\":{\"508\":1,\"590\":1}}],[\"show\",{\"1\":{\"52\":1,\"158\":1,\"167\":1,\"194\":1,\"203\":1,\"638\":1,\"689\":3}}],[\"showconfirmdialog\",{\"1\":{\"42\":1}}],[\"showmessagedialog\",{\"1\":{\"42\":2}}],[\"showsavedialog\",{\"1\":{\"42\":1,\"725\":1}}],[\"shudaqi2010\",{\"1\":{\"430\":1}}],[\"shutdown\",{\"1\":{\"51\":1}}],[\"sh\",{\"1\":{\"51\":6,\"690\":1}}],[\"shall\",{\"1\":{\"686\":1,\"867\":2}}],[\"sha1\",{\"1\":{\"686\":8}}],[\"shapes\",{\"1\":{\"662\":9,\"673\":6}}],[\"shaper\",{\"1\":{\"662\":22,\"673\":2}}],[\"shape\",{\"1\":{\"392\":1,\"662\":7,\"673\":13}}],[\"shard\",{\"1\":{\"254\":1}}],[\"sharding\",{\"1\":{\"245\":1,\"247\":1,\"251\":2,\"252\":4,\"258\":1}}],[\"shareprice\",{\"1\":{\"662\":2}}],[\"shared\",{\"1\":{\"232\":1}}],[\"share\",{\"1\":{\"6\":4,\"232\":1}}],[\"sha\",{\"1\":{\"34\":9,\"858\":9,\"859\":3,\"860\":3}}],[\"sha256\",{\"1\":{\"34\":1,\"36\":1,\"858\":1,\"859\":3}}],[\"samples\",{\"1\":{\"692\":1}}],[\"same\",{\"1\":{\"547\":1}}],[\"sax\",{\"1\":{\"686\":1}}],[\"say\",{\"1\":{\"667\":1,\"757\":1}}],[\"sayhitomerkel\",{\"1\":{\"655\":1}}],[\"says\",{\"1\":{\"515\":3}}],[\"satisfies\",{\"1\":{\"667\":1}}],[\"satish\",{\"1\":{\"467\":1}}],[\"sat\",{\"1\":{\"662\":1}}],[\"saturday\",{\"1\":{\"513\":2,\"662\":6,\"670\":1}}],[\"saving\",{\"1\":{\"508\":1}}],[\"savepoint\",{\"1\":{\"151\":3,\"187\":3}}],[\"save\",{\"1\":{\"42\":2,\"508\":1,\"680\":1}}],[\"savecurve\",{\"1\":{\"42\":1}}],[\"san\",{\"1\":{\"476\":1}}],[\"salary\",{\"1\":{\"651\":2,\"657\":1}}],[\"salvation\",{\"1\":{\"508\":1}}],[\"sales\",{\"1\":{\"279\":1}}],[\"salgrade\",{\"1\":{\"270\":4}}],[\"sal\",{\"1\":{\"270\":2,\"271\":3,\"278\":4,\"279\":2,\"299\":1}}],[\"salt\",{\"1\":{\"72\":1}}],[\"sakila\",{\"1\":{\"221\":2}}],[\"sage\",{\"1\":{\"168\":3,\"204\":3}}],[\"safe\",{\"1\":{\"39\":1,\"523\":1}}],[\"supported\",{\"1\":{\"878\":3}}],[\"superman\",{\"1\":{\"508\":3}}],[\"suck\",{\"1\":{\"701\":3,\"707\":2,\"708\":3}}],[\"suchy\",{\"1\":{\"430\":1}}],[\"such\",{\"1\":{\"52\":1}}],[\"sunset\",{\"1\":{\"670\":2}}],[\"sun\",{\"1\":{\"662\":1}}],[\"sunday\",{\"1\":{\"662\":6,\"670\":1}}],[\"su\",{\"1\":{\"629\":1,\"631\":2,\"640\":6}}],[\"suffixarray\",{\"1\":{\"614\":1}}],[\"suffix\",{\"1\":{\"534\":2,\"574\":3}}],[\"sumandaverage\",{\"1\":{\"591\":1}}],[\"summer\",{\"1\":{\"591\":1}}],[\"sum\",{\"1\":{\"135\":1,\"150\":1,\"163\":3,\"183\":1,\"185\":1,\"199\":3,\"424\":2,\"507\":1,\"572\":2,\"573\":2,\"583\":7,\"586\":2,\"591\":1,\"651\":6,\"686\":6,\"694\":1,\"704\":5}}],[\"sub是区分大小写的字符串\",{\"1\":{\"869\":1}}],[\"submit\",{\"1\":{\"638\":2}}],[\"subarray\",{\"1\":{\"592\":2}}],[\"substring\",{\"1\":{\"538\":1}}],[\"substr\",{\"1\":{\"535\":2,\"596\":1,\"759\":1}}],[\"subpackage\",{\"1\":{\"497\":1}}],[\"sublime\",{\"1\":{\"491\":2}}],[\"subqueries\",{\"1\":{\"205\":1}}],[\"subject\",{\"1\":{\"35\":1,\"61\":1,\"845\":1,\"848\":1,\"852\":1,\"868\":1,\"874\":1}}],[\"sub\",{\"1\":{\"35\":2,\"267\":2,\"427\":2,\"576\":2,\"577\":1,\"845\":1,\"849\":1,\"851\":1,\"852\":2,\"854\":1,\"858\":1,\"869\":2}}],[\"sudo\",{\"1\":{\"3\":1,\"50\":1,\"51\":9,\"52\":18,\"483\":2}}],[\"sflkxwrjsmekkf2qt4fwpmejf36pok6yjv\",{\"1\":{\"33\":1}}],[\"scott\",{\"1\":{\"659\":1}}],[\"scope=openid\",{\"1\":{\"873\":2}}],[\"scope\",{\"1\":{\"6\":1,\"519\":2,\"873\":1}}],[\"script\",{\"1\":{\"638\":1}}],[\"screen\",{\"1\":{\"582\":2,\"591\":3}}],[\"scite\",{\"1\":{\"491\":1,\"492\":1}}],[\"scanblock\",{\"1\":{\"692\":1}}],[\"scans\",{\"1\":{\"678\":1,\"682\":2}}],[\"scanf\",{\"1\":{\"677\":4}}],[\"scanln\",{\"1\":{\"677\":2}}],[\"scan\",{\"1\":{\"677\":1}}],[\"scanner\",{\"1\":{\"504\":2}}],[\"scale\",{\"1\":{\"640\":3,\"657\":1}}],[\"scalable\",{\"1\":{\"703\":1}}],[\"scala\",{\"1\":{\"467\":1,\"499\":7}}],[\"scaling\",{\"1\":{\"28\":1}}],[\"scattergatherfirstcompletedrouter进行路由配置\",{\"1\":{\"311\":1}}],[\"schema\",{\"1\":{\"56\":1,\"82\":1}}],[\"sscanf\",{\"1\":{\"677\":1}}],[\"sscan\",{\"1\":{\"677\":3}}],[\"ss\",{\"1\":{\"148\":1,\"181\":1,\"690\":1}}],[\"ssd是用户和角色的指派阶段加入的\",{\"1\":{\"68\":1}}],[\"sso\",{\"1\":{\"26\":1}}],[\"sslverify\",{\"1\":{\"828\":2}}],[\"ssl\",{\"1\":{\"6\":8,\"828\":1}}],[\"ssl验证\",{\"1\":{\"6\":2}}],[\"specified\",{\"1\":{\"689\":1}}],[\"specification\",{\"1\":{\"628\":1}}],[\"specialstring\",{\"1\":{\"663\":3}}],[\"special\",{\"1\":{\"574\":1,\"663\":2,\"688\":1}}],[\"split2\",{\"1\":{\"602\":1}}],[\"splitted\",{\"1\":{\"543\":4}}],[\"splitjoin\",{\"1\":{\"543\":1}}],[\"split\",{\"1\":{\"542\":1,\"543\":1}}],[\"sprintln\",{\"1\":{\"656\":1}}],[\"sprint\",{\"1\":{\"532\":1,\"653\":1}}],[\"sprintf\",{\"1\":{\"517\":1,\"523\":1,\"549\":2,\"638\":2,\"660\":3,\"689\":2}}],[\"springcloud简介\",{\"0\":{\"740\":1}}],[\"springcloud\",{\"0\":{\"739\":1},\"1\":{\"78\":1},\"2\":{\"741\":1}}],[\"springmvc\",{\"1\":{\"78\":1}}],[\"springboot简介\",{\"0\":{\"736\":1}}],[\"springboot\",{\"0\":{\"735\":1},\"1\":{\"78\":1},\"2\":{\"47\":1,\"737\":1}}],[\"springboot整合swagger3\",{\"0\":{\"46\":1}}],[\"springboot整合第三方依赖\",{\"0\":{\"45\":1}}],[\"springdoc<\",{\"1\":{\"46\":1}}],[\"springdoc\",{\"1\":{\"46\":2}}],[\"spring\",{\"0\":{\"743\":1,\"744\":1},\"1\":{\"4\":1,\"78\":1,\"254\":1,\"591\":1},\"2\":{\"745\":1}}],[\"sparsematrix\",{\"1\":{\"651\":1}}],[\"space\",{\"1\":{\"506\":1,\"682\":1,\"689\":2}}],[\"span\",{\"1\":{\"440\":2}}],[\"spans\",{\"1\":{\"440\":1}}],[\"spin\",{\"1\":{\"420\":1}}],[\"sp\",{\"1\":{\"348\":1}}],[\"spf13\",{\"1\":{\"21\":1}}],[\"stderr\",{\"1\":{\"677\":1,\"678\":1,\"679\":1,\"682\":6,\"689\":1}}],[\"stdin\",{\"1\":{\"662\":1,\"677\":6,\"678\":1,\"682\":2,\"689\":1,\"782\":2}}],[\"stdout\",{\"1\":{\"501\":1,\"670\":5,\"677\":2,\"678\":1,\"680\":2,\"682\":9,\"689\":1}}],[\"still\",{\"1\":{\"592\":1}}],[\"st\",{\"1\":{\"562\":4}}],[\"studio\",{\"1\":{\"491\":1}}],[\"student\",{\"1\":{\"389\":3,\"391\":1}}],[\"style\",{\"1\":{\"469\":1,\"709\":2}}],[\"stw\",{\"0\":{\"431\":1},\"1\":{\"429\":11}}],[\"steve\",{\"1\":{\"624\":3}}],[\"stealing从其他p偷不到g时\",{\"1\":{\"411\":1}}],[\"stealing\",{\"1\":{\"409\":1,\"410\":3,\"411\":1}}],[\"stefno\",{\"1\":{\"380\":2}}],[\"stock\",{\"1\":{\"662\":1}}],[\"stockposition\",{\"1\":{\"662\":4}}],[\"storage\",{\"1\":{\"483\":1}}],[\"store\",{\"1\":{\"418\":1,\"883\":2,\"884\":1}}],[\"stored\",{\"1\":{\"162\":1,\"198\":1}}],[\"stopcpuprofile\",{\"1\":{\"692\":2}}],[\"stopping\",{\"1\":{\"550\":1,\"689\":2}}],[\"stops\",{\"1\":{\"547\":1}}],[\"stop\",{\"1\":{\"52\":2,\"438\":1,\"623\":1,\"655\":2}}],[\"strlength2\",{\"1\":{\"766\":1}}],[\"strlength1\",{\"1\":{\"766\":1}}],[\"strev\",{\"1\":{\"689\":1}}],[\"stream\",{\"1\":{\"707\":2}}],[\"streamxml\",{\"1\":{\"672\":2}}],[\"streaming\",{\"1\":{\"462\":3,\"672\":1}}],[\"strip\",{\"1\":{\"670\":2}}],[\"stringify\",{\"1\":{\"859\":5}}],[\"stringer\",{\"1\":{\"662\":3,\"670\":2}}],[\"stringarray\",{\"1\":{\"628\":4,\"662\":7}}],[\"stringbuilder\",{\"1\":{\"590\":1}}],[\"stringsaresorted\",{\"1\":{\"628\":1,\"662\":1}}],[\"strings\",{\"0\":{\"533\":1},\"1\":{\"532\":1,\"533\":1,\"534\":4,\"535\":1,\"536\":11,\"537\":1,\"538\":4,\"539\":3,\"540\":5,\"541\":2,\"542\":2,\"543\":6,\"544\":1,\"572\":4,\"574\":1,\"600\":1,\"611\":1,\"614\":2,\"630\":1,\"631\":2,\"640\":3,\"662\":2,\"681\":3,\"686\":3,\"689\":2}}],[\"string以及数组和struct\",{\"1\":{\"360\":1}}],[\"string\",{\"0\":{\"660\":1,\"757\":1},\"1\":{\"18\":8,\"21\":8,\"301\":2,\"314\":3,\"315\":3,\"328\":3,\"333\":1,\"335\":2,\"338\":1,\"342\":1,\"349\":1,\"362\":4,\"389\":1,\"392\":1,\"427\":2,\"501\":3,\"504\":1,\"509\":3,\"513\":1,\"515\":7,\"516\":1,\"517\":1,\"518\":1,\"519\":1,\"530\":1,\"532\":4,\"534\":7,\"535\":1,\"536\":7,\"537\":2,\"538\":2,\"539\":6,\"540\":11,\"543\":4,\"545\":9,\"546\":2,\"547\":10,\"550\":7,\"551\":1,\"553\":1,\"557\":3,\"567\":7,\"568\":8,\"572\":1,\"573\":1,\"574\":5,\"580\":1,\"581\":3,\"585\":1,\"590\":3,\"591\":2,\"595\":3,\"597\":1,\"598\":1,\"600\":3,\"602\":4,\"605\":11,\"606\":2,\"608\":1,\"609\":2,\"611\":3,\"612\":3,\"624\":2,\"625\":1,\"627\":2,\"631\":3,\"640\":5,\"642\":2,\"643\":3,\"645\":1,\"648\":1,\"651\":7,\"653\":1,\"654\":4,\"655\":1,\"656\":16,\"657\":2,\"658\":2,\"659\":2,\"660\":21,\"662\":17,\"663\":9,\"664\":1,\"668\":2,\"670\":16,\"675\":2,\"676\":15,\"677\":4,\"678\":5,\"680\":3,\"681\":1,\"682\":19,\"684\":5,\"685\":2,\"686\":10,\"687\":1,\"688\":6,\"689\":19,\"692\":2,\"699\":4,\"700\":4,\"703\":2,\"709\":6,\"752\":1,\"753\":1,\"757\":2,\"759\":1,\"760\":1,\"761\":1,\"762\":2,\"765\":1,\"766\":2,\"768\":1,\"769\":2,\"772\":3}}],[\"str=\",{\"1\":{\"640\":1}}],[\"str3\",{\"1\":{\"543\":2}}],[\"str2\",{\"1\":{\"543\":2,\"553\":7,\"557\":6,\"624\":2}}],[\"strconv\",{\"0\":{\"533\":1},\"1\":{\"545\":11,\"550\":8,\"614\":2,\"624\":3,\"659\":1,\"660\":3,\"670\":3,\"689\":2}}],[\"str\",{\"1\":{\"509\":1,\"515\":5,\"532\":8,\"534\":3,\"536\":13,\"537\":2,\"538\":5,\"543\":2,\"544\":1,\"549\":2,\"553\":7,\"557\":6,\"596\":5,\"598\":3,\"602\":6,\"624\":2,\"625\":2,\"631\":2,\"640\":2,\"663\":2,\"752\":1,\"753\":1,\"757\":2}}],[\"stroustrup\",{\"1\":{\"467\":1}}],[\"str1\",{\"1\":{\"438\":1,\"631\":2}}],[\"str0\",{\"1\":{\"438\":2}}],[\"struct2\",{\"1\":{\"670\":1}}],[\"structures\",{\"1\":{\"666\":1}}],[\"structured\",{\"1\":{\"83\":1}}],[\"structpack\",{\"1\":{\"644\":5}}],[\"structname\",{\"1\":{\"640\":2}}],[\"struct1\",{\"1\":{\"640\":9,\"644\":5}}],[\"structs\",{\"1\":{\"640\":1,\"647\":1}}],[\"structfield\",{\"1\":{\"328\":1}}],[\"struct\",{\"0\":{\"639\":1,\"643\":1},\"1\":{\"18\":4,\"21\":4,\"314\":1,\"315\":3,\"328\":1,\"338\":5,\"340\":1,\"349\":1,\"364\":1,\"365\":2,\"382\":1,\"383\":4,\"389\":1,\"398\":1,\"424\":2,\"504\":1,\"509\":1,\"510\":1,\"567\":1,\"590\":1,\"605\":1,\"611\":1,\"625\":2,\"631\":1,\"639\":1,\"640\":17,\"642\":2,\"643\":1,\"644\":3,\"645\":2,\"647\":2,\"648\":4,\"649\":4,\"651\":2,\"653\":2,\"654\":1,\"655\":4,\"656\":4,\"657\":5,\"659\":1,\"660\":4,\"661\":1,\"662\":9,\"663\":1,\"664\":1,\"666\":1,\"668\":1,\"670\":6,\"671\":1,\"673\":2,\"674\":1,\"676\":4,\"680\":1,\"682\":4,\"685\":1,\"686\":6,\"688\":2,\"689\":2}}],[\"stand\",{\"1\":{\"686\":1}}],[\"stars\",{\"1\":{\"554\":1}}],[\"startcpuprofile\",{\"1\":{\"692\":1}}],[\"startprocess\",{\"1\":{\"689\":4}}],[\"starting\",{\"1\":{\"689\":5}}],[\"startelement\",{\"1\":{\"686\":2}}],[\"starter\",{\"1\":{\"46\":1}}],[\"starts\",{\"1\":{\"557\":13}}],[\"startdate\",{\"1\":{\"515\":1}}],[\"start启动docker时提示启动但是并未真正启动\",{\"1\":{\"51\":1}}],[\"start启动错误\",{\"1\":{\"51\":1}}],[\"start\",{\"1\":{\"51\":3,\"52\":3,\"151\":4,\"187\":4,\"427\":4,\"576\":2,\"577\":2,\"585\":4,\"592\":2,\"593\":1,\"596\":4,\"640\":2,\"655\":2,\"662\":2,\"689\":1,\"705\":1,\"709\":1}}],[\"stack\",{\"1\":{\"442\":1,\"562\":1,\"660\":5,\"661\":4,\"676\":3,\"677\":1}}],[\"stack核心的分布式搜索和分析引擎\",{\"1\":{\"6\":1}}],[\"state=af0ifjsldkj\",{\"1\":{\"873\":2,\"877\":1,\"878\":1}}],[\"stateless\",{\"0\":{\"848\":1},\"1\":{\"846\":1}}],[\"statement\",{\"1\":{\"549\":1,\"559\":1,\"573\":1}}],[\"statements\",{\"1\":{\"167\":2,\"203\":2}}],[\"state\",{\"1\":{\"72\":1,\"144\":1,\"177\":1,\"242\":1,\"365\":1,\"686\":2,\"873\":1,\"878\":1}}],[\"statically\",{\"1\":{\"667\":1}}],[\"static\",{\"1\":{\"68\":1,\"803\":15}}],[\"status\",{\"1\":{\"52\":1,\"683\":1,\"686\":1,\"812\":1}}],[\"statusok\",{\"1\":{\"12\":1}}],[\"statuscode\",{\"1\":{\"12\":2,\"427\":4}}],[\"stable\",{\"1\":{\"51\":1}}],[\"severe\",{\"1\":{\"689\":2}}],[\"several\",{\"1\":{\"508\":1}}],[\"see\",{\"1\":{\"662\":1,\"689\":2}}],[\"seed\",{\"1\":{\"364\":1,\"501\":2,\"528\":2}}],[\"self\",{\"1\":{\"651\":2,\"657\":3,\"868\":1}}],[\"selection\",{\"1\":{\"873\":1,\"878\":1}}],[\"select2\",{\"1\":{\"696\":1}}],[\"selector\",{\"1\":{\"640\":2}}],[\"select\",{\"0\":{\"272\":1,\"303\":3,\"305\":1,\"331\":1},\"1\":{\"85\":3,\"88\":1,\"90\":1,\"98\":1,\"104\":1,\"117\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":3,\"128\":5,\"129\":4,\"131\":2,\"132\":3,\"133\":2,\"134\":1,\"135\":2,\"136\":1,\"138\":1,\"139\":1,\"140\":1,\"142\":1,\"143\":1,\"144\":2,\"147\":1,\"148\":1,\"150\":1,\"151\":2,\"154\":1,\"159\":1,\"160\":1,\"163\":2,\"168\":3,\"171\":1,\"172\":1,\"173\":1,\"175\":1,\"176\":1,\"177\":2,\"180\":1,\"181\":1,\"183\":1,\"185\":2,\"186\":1,\"187\":2,\"190\":1,\"195\":1,\"196\":1,\"199\":2,\"204\":3,\"211\":1,\"220\":2,\"221\":2,\"232\":2,\"235\":1,\"264\":2,\"265\":1,\"268\":4,\"270\":1,\"271\":1,\"277\":2,\"278\":2,\"279\":1,\"299\":7,\"305\":2,\"306\":4,\"331\":10,\"504\":1,\"548\":1,\"558\":1,\"559\":1,\"704\":1,\"709\":3,\"725\":1,\"873\":1}}],[\"searchin\",{\"1\":{\"624\":6}}],[\"searchints\",{\"1\":{\"600\":1}}],[\"searchstrings\",{\"1\":{\"600\":1}}],[\"searchfloat64s\",{\"1\":{\"600\":1}}],[\"seasons\",{\"1\":{\"591\":5}}],[\"season\",{\"1\":{\"551\":2,\"591\":6}}],[\"seata\",{\"1\":{\"78\":1}}],[\"sem\",{\"1\":{\"705\":5,\"707\":1}}],[\"semicolon\",{\"1\":{\"507\":1,\"564\":1}}],[\"semaphore\",{\"1\":{\"417\":1,\"704\":1,\"707\":9}}],[\"sebastien\",{\"1\":{\"488\":1}}],[\"sequential\",{\"1\":{\"471\":1,\"694\":1}}],[\"sequence\",{\"1\":{\"299\":1,\"709\":2}}],[\"sent\",{\"1\":{\"705\":1}}],[\"sentry\",{\"1\":{\"455\":1}}],[\"sentinel\",{\"0\":{\"5\":1},\"1\":{\"5\":3,\"78\":1}}],[\"sendchan\",{\"1\":{\"709\":2}}],[\"senddata\",{\"1\":{\"700\":5,\"709\":7}}],[\"sender\",{\"1\":{\"694\":1}}],[\"send\",{\"1\":{\"525\":2,\"686\":1,\"705\":1,\"709\":7}}],[\"sendq\",{\"1\":{\"398\":2,\"405\":5}}],[\"sendx和recvx\",{\"1\":{\"398\":1}}],[\"sendx\",{\"1\":{\"398\":1,\"405\":1}}],[\"serr\",{\"1\":{\"688\":2}}],[\"serialization\",{\"1\":{\"686\":1}}],[\"serializable\",{\"1\":{\"300\":1}}],[\"serialixable\",{\"1\":{\"239\":1}}],[\"services\",{\"1\":{\"456\":3}}],[\"service\",{\"1\":{\"4\":5,\"35\":1,\"51\":5,\"52\":5}}],[\"server资源服务器\",{\"1\":{\"868\":1}}],[\"server授权服务器\",{\"1\":{\"868\":1}}],[\"server\",{\"1\":{\"4\":3,\"52\":1,\"296\":1,\"517\":1,\"559\":1,\"697\":1,\"869\":1,\"873\":2,\"881\":1}}],[\"sex\",{\"1\":{\"222\":2,\"769\":1}}],[\"sed\",{\"1\":{\"51\":1}}],[\"separated\",{\"1\":{\"689\":2}}],[\"separate\",{\"1\":{\"662\":1}}],[\"separation\",{\"1\":{\"68\":2}}],[\"sep\",{\"1\":{\"51\":1,\"542\":1,\"543\":1}}],[\"setmultiselectionenabled\",{\"1\":{\"725\":1,\"731\":2}}],[\"setcurrentdirectory\",{\"1\":{\"725\":1,\"726\":1,\"732\":1}}],[\"setconfigfile\",{\"1\":{\"21\":1}}],[\"setconfigtype\",{\"1\":{\"21\":1}}],[\"setdialogtitle\",{\"1\":{\"725\":1}}],[\"setdefaultlocale\",{\"1\":{\"725\":1,\"730\":2,\"731\":1,\"732\":1}}],[\"setdata\",{\"1\":{\"666\":5}}],[\"sets\",{\"1\":{\"682\":2}}],[\"setstring\",{\"1\":{\"670\":4}}],[\"setint\",{\"1\":{\"670\":1}}],[\"setid\",{\"1\":{\"657\":1}}],[\"settings\",{\"1\":{\"854\":1}}],[\"setting\",{\"1\":{\"669\":1}}],[\"settability\",{\"1\":{\"669\":7}}],[\"setter\",{\"1\":{\"314\":1,\"654\":2}}],[\"setfloat\",{\"1\":{\"669\":6}}],[\"setflags\",{\"1\":{\"575\":1}}],[\"setfileselectionmode\",{\"1\":{\"725\":1,\"728\":2,\"729\":1,\"730\":1,\"731\":1}}],[\"setfilefilter\",{\"1\":{\"42\":2,\"725\":1,\"729\":2,\"730\":1}}],[\"setfinalizer\",{\"0\":{\"661\":1},\"1\":{\"661\":2}}],[\"setfirstname\",{\"1\":{\"654\":2}}],[\"setup\",{\"1\":{\"519\":1}}],[\"set是一个集合\",{\"1\":{\"337\":1}}],[\"setname\",{\"1\":{\"314\":1,\"315\":1,\"512\":1}}],[\"set\",{\"1\":{\"51\":1,\"72\":30,\"73\":12,\"85\":2,\"118\":1,\"129\":1,\"151\":3,\"156\":1,\"161\":1,\"163\":5,\"168\":3,\"187\":3,\"192\":1,\"197\":1,\"199\":5,\"204\":3,\"483\":1,\"651\":1,\"654\":1,\"662\":3,\"664\":2,\"667\":1,\"682\":1,\"868\":1,\"979\":1,\"980\":1,\"984\":1}}],[\"sessions只需要signatures\",{\"1\":{\"848\":1}}],[\"sessions实际上只不过是客户端数据\",{\"1\":{\"848\":1}}],[\"sessions\",{\"0\":{\"848\":1},\"1\":{\"456\":3,\"846\":2}}],[\"session\",{\"1\":{\"28\":8,\"29\":5,\"66\":1,\"236\":1,\"456\":1,\"854\":1}}],[\"sector\",{\"1\":{\"868\":1}}],[\"section\",{\"1\":{\"625\":2}}],[\"secure\",{\"1\":{\"52\":1}}],[\"security\",{\"1\":{\"6\":11,\"205\":1}}],[\"secret的utf\",{\"1\":{\"887\":1}}],[\"secret客户端秘密\",{\"1\":{\"868\":1}}],[\"secrets\",{\"1\":{\"846\":1}}],[\"secret\",{\"1\":{\"36\":2,\"670\":3,\"849\":1,\"859\":1}}],[\"seconds\",{\"1\":{\"427\":2,\"689\":1,\"697\":2}}],[\"second\",{\"1\":{\"12\":1,\"148\":1,\"181\":1,\"424\":2,\"532\":1,\"623\":3,\"692\":1}}],[\"9节所定义\",{\"1\":{\"888\":1}}],[\"947\",{\"1\":{\"709\":1}}],[\"941\",{\"1\":{\"709\":1}}],[\"946\",{\"1\":{\"531\":1}}],[\"937\",{\"1\":{\"709\":1}}],[\"9300\",{\"1\":{\"6\":2}}],[\"919\",{\"1\":{\"709\":1}}],[\"911\",{\"1\":{\"709\":1}}],[\"91\",{\"1\":{\"692\":1}}],[\"913920\",{\"1\":{\"689\":1}}],[\"9134\",{\"1\":{\"624\":1}}],[\"929\",{\"1\":{\"709\":1}}],[\"92r\",{\"1\":{\"690\":1}}],[\"9200\",{\"1\":{\"6\":3}}],[\"9simple\",{\"1\":{\"663\":1}}],[\"9point\",{\"1\":{\"657\":1}}],[\"9magnify\",{\"1\":{\"593\":1}}],[\"9fibonacci\",{\"1\":{\"574\":1}}],[\"9e\",{\"1\":{\"557\":1}}],[\"9c\",{\"1\":{\"557\":1}}],[\"983\",{\"1\":{\"709\":1}}],[\"987\",{\"1\":{\"570\":1}}],[\"98\",{\"1\":{\"551\":3,\"611\":3,\"612\":2}}],[\"9845\",{\"1\":{\"662\":3}}],[\"9849\",{\"1\":{\"4\":3}}],[\"9848\",{\"1\":{\"4\":5}}],[\"997\",{\"1\":{\"709\":1}}],[\"991\",{\"1\":{\"709\":1}}],[\"999999\",{\"1\":{\"677\":1}}],[\"99\",{\"1\":{\"536\":1,\"551\":1}}],[\"967\",{\"1\":{\"523\":1,\"709\":1}}],[\"977\",{\"1\":{\"709\":1}}],[\"971\",{\"1\":{\"709\":1}}],[\"97\",{\"1\":{\"513\":1,\"557\":1,\"709\":1}}],[\"953\",{\"1\":{\"709\":1}}],[\"959\",{\"1\":{\"662\":3}}],[\"95\",{\"1\":{\"288\":1,\"291\":2,\"528\":1}}],[\"907\",{\"1\":{\"709\":1}}],[\"905\",{\"1\":{\"662\":3}}],[\"90025192\",{\"1\":{\"430\":1}}],[\"9098\",{\"1\":{\"268\":1}}],[\"90\",{\"1\":{\"73\":1,\"288\":1,\"291\":2,\"528\":1,\"707\":1}}],[\"9\",{\"0\":{\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"330\":1,\"375\":1,\"391\":1,\"479\":1,\"500\":1,\"501\":1,\"502\":1,\"542\":1,\"547\":1,\"574\":1,\"613\":1,\"614\":1,\"624\":1,\"625\":1,\"626\":1,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"631\":1,\"632\":1,\"633\":1,\"634\":2,\"635\":2,\"636\":2,\"637\":1,\"638\":1,\"659\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"707\":1,\"763\":1,\"815\":1,\"900\":1,\"914\":1,\"927\":1},\"1\":{\"3\":1,\"320\":1,\"388\":1,\"438\":1,\"467\":1,\"469\":4,\"473\":1,\"476\":1,\"481\":3,\"482\":1,\"493\":1,\"497\":1,\"501\":1,\"506\":1,\"516\":3,\"523\":3,\"527\":3,\"547\":1,\"553\":3,\"557\":5,\"558\":1,\"559\":1,\"567\":2,\"568\":1,\"570\":1,\"571\":1,\"573\":2,\"574\":1,\"583\":1,\"587\":1,\"591\":1,\"592\":4,\"602\":1,\"605\":1,\"614\":1,\"623\":3,\"624\":3,\"626\":1,\"627\":11,\"629\":2,\"631\":4,\"635\":1,\"638\":2,\"642\":1,\"648\":1,\"654\":1,\"669\":1,\"678\":1,\"686\":3,\"689\":3,\"694\":2,\"696\":1,\"697\":1,\"709\":1}}],[\"3所述\",{\"1\":{\"881\":1}}],[\"337\",{\"1\":{\"709\":1}}],[\"331\",{\"1\":{\"709\":1}}],[\"3306\",{\"1\":{\"1\":2}}],[\"397\",{\"1\":{\"709\":1}}],[\"39\",{\"1\":{\"689\":1}}],[\"3till5char\",{\"1\":{\"682\":1}}],[\"3c\",{\"1\":{\"678\":1}}],[\"3point\",{\"1\":{\"640\":1}}],[\"3main\",{\"1\":{\"627\":1}}],[\"3varargs\",{\"1\":{\"567\":1}}],[\"3vl\",{\"1\":{\"84\":1}}],[\"3x\",{\"1\":{\"564\":3}}],[\"359\",{\"1\":{\"709\":1}}],[\"353\",{\"1\":{\"709\":1}}],[\"356\",{\"1\":{\"678\":2}}],[\"350000\",{\"1\":{\"660\":1}}],[\"350\",{\"1\":{\"614\":1}}],[\"35\",{\"1\":{\"587\":1,\"606\":2,\"660\":1}}],[\"35486\",{\"1\":{\"557\":1}}],[\"355487940\",{\"1\":{\"406\":1}}],[\"3a\",{\"1\":{\"557\":1,\"873\":2,\"881\":1}}],[\"317\",{\"1\":{\"709\":1}}],[\"313\",{\"1\":{\"709\":1}}],[\"311\",{\"1\":{\"709\":1}}],[\"31\",{\"1\":{\"546\":1,\"709\":1}}],[\"3b2\",{\"1\":{\"531\":1}}],[\"349\",{\"1\":{\"709\":1}}],[\"347\",{\"1\":{\"709\":1}}],[\"34\",{\"1\":{\"523\":3,\"546\":1,\"570\":2,\"611\":6,\"612\":3,\"624\":1,\"651\":1}}],[\"34877350\",{\"1\":{\"456\":1}}],[\"3节所述\",{\"1\":{\"881\":1}}],[\"3节描述了信息发布机制\",{\"1\":{\"876\":1}}],[\"3节\",{\"1\":{\"481\":1}}],[\"389\",{\"1\":{\"709\":1}}],[\"383\",{\"1\":{\"709\":1}}],[\"386\",{\"1\":{\"481\":3,\"482\":1,\"506\":2,\"689\":1}}],[\"384\",{\"1\":{\"34\":4,\"858\":4}}],[\"321\",{\"1\":{\"574\":2}}],[\"324\",{\"1\":{\"523\":1}}],[\"32767\",{\"1\":{\"523\":1}}],[\"32768\",{\"1\":{\"523\":1}}],[\"32\",{\"1\":{\"481\":1,\"506\":1,\"516\":1,\"523\":4,\"524\":1,\"545\":3,\"547\":1,\"557\":1,\"563\":1,\"571\":1,\"605\":1,\"624\":2,\"696\":1}}],[\"325\",{\"1\":{\"469\":1}}],[\"32k\",{\"1\":{\"443\":2}}],[\"302重定向响应\",{\"1\":{\"873\":1}}],[\"302重定向响应的非规范示例\",{\"1\":{\"873\":1}}],[\"302\",{\"1\":{\"873\":1,\"877\":1,\"878\":1}}],[\"307\",{\"1\":{\"709\":1}}],[\"309\",{\"1\":{\"692\":1}}],[\"3099\",{\"1\":{\"692\":1}}],[\"300\",{\"1\":{\"574\":3}}],[\"3000\",{\"1\":{\"278\":2}}],[\"30\",{\"1\":{\"469\":1,\"525\":1,\"564\":2,\"571\":1,\"587\":1,\"591\":1,\"606\":1,\"686\":1,\"692\":4}}],[\"3nf\",{\"0\":{\"292\":1}}],[\"367\",{\"1\":{\"709\":1}}],[\"3600\",{\"1\":{\"883\":1}}],[\"360\",{\"1\":{\"251\":1}}],[\"36\",{\"1\":{\"72\":10,\"73\":6,\"504\":1,\"624\":1,\"670\":1}}],[\"379\",{\"1\":{\"709\":1}}],[\"377\",{\"1\":{\"531\":1,\"570\":1}}],[\"372\",{\"1\":{\"523\":2}}],[\"37\",{\"1\":{\"51\":1,\"626\":2,\"670\":1,\"709\":1}}],[\"373\",{\"1\":{\"6\":1,\"709\":1}}],[\"3\",{\"0\":{\"27\":1,\"28\":1,\"29\":1,\"30\":2,\"31\":1,\"35\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"90\":1,\"95\":1,\"99\":1,\"103\":1,\"104\":1,\"105\":1,\"109\":1,\"113\":1,\"114\":1,\"118\":1,\"119\":2,\"122\":1,\"131\":1,\"140\":1,\"149\":1,\"157\":1,\"313\":1,\"324\":1,\"355\":1,\"360\":1,\"383\":1,\"399\":1,\"411\":1,\"412\":1,\"419\":1,\"426\":1,\"431\":1,\"440\":1,\"458\":1,\"473\":1,\"483\":1,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"493\":1,\"494\":2,\"495\":1,\"496\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"508\":1,\"513\":1,\"517\":1,\"525\":1,\"529\":1,\"536\":1,\"551\":1,\"556\":1,\"565\":1,\"567\":1,\"582\":1,\"587\":1,\"591\":1,\"597\":1,\"607\":1,\"609\":1,\"625\":1,\"633\":1,\"644\":1,\"649\":1,\"653\":1,\"665\":1,\"670\":1,\"673\":1,\"680\":1,\"692\":1,\"696\":1,\"701\":1,\"727\":1,\"754\":1,\"755\":1,\"756\":1,\"757\":2,\"758\":1,\"759\":1,\"760\":1,\"761\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"770\":1,\"790\":1,\"809\":1,\"849\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":1,\"854\":2,\"855\":1,\"856\":1,\"861\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"874\":1,\"875\":2,\"876\":1,\"877\":1,\"878\":1,\"879\":1,\"880\":2,\"881\":2,\"882\":2,\"883\":3,\"884\":2,\"885\":2,\"886\":2,\"887\":2,\"888\":2,\"889\":1,\"890\":1,\"891\":1,\"892\":1,\"893\":1,\"894\":2,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"900\":1,\"901\":1,\"902\":1,\"903\":2,\"904\":2,\"905\":2,\"906\":2,\"907\":2,\"908\":3,\"909\":2,\"910\":2,\"911\":2,\"912\":2,\"913\":2,\"914\":2,\"915\":2,\"916\":2,\"917\":2,\"918\":3,\"919\":3,\"920\":3,\"921\":4,\"922\":3,\"923\":3,\"924\":3,\"925\":3,\"926\":3,\"927\":3,\"932\":1,\"933\":1,\"934\":1,\"935\":2,\"936\":1,\"953\":1,\"955\":1,\"956\":1,\"957\":1,\"958\":2,\"962\":1,\"981\":1},\"1\":{\"3\":1,\"6\":3,\"46\":1,\"52\":1,\"70\":1,\"72\":1,\"73\":1,\"100\":1,\"127\":2,\"131\":1,\"132\":1,\"163\":1,\"199\":1,\"221\":1,\"226\":1,\"227\":3,\"267\":2,\"270\":1,\"277\":1,\"288\":2,\"291\":5,\"292\":2,\"311\":1,\"317\":1,\"320\":1,\"322\":1,\"331\":1,\"346\":8,\"353\":4,\"362\":1,\"393\":1,\"394\":1,\"405\":1,\"421\":1,\"423\":2,\"426\":1,\"429\":6,\"431\":1,\"432\":1,\"438\":3,\"439\":2,\"467\":1,\"471\":1,\"472\":1,\"473\":1,\"477\":1,\"481\":1,\"482\":2,\"483\":1,\"485\":1,\"492\":1,\"493\":1,\"499\":3,\"501\":4,\"508\":2,\"513\":6,\"515\":1,\"519\":1,\"520\":1,\"523\":3,\"525\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"539\":1,\"542\":1,\"549\":3,\"550\":3,\"553\":3,\"554\":2,\"555\":1,\"557\":6,\"558\":1,\"559\":2,\"561\":2,\"564\":3,\"567\":2,\"568\":2,\"569\":1,\"570\":3,\"572\":1,\"573\":3,\"574\":4,\"580\":5,\"581\":11,\"582\":1,\"583\":2,\"585\":17,\"586\":1,\"587\":2,\"588\":3,\"591\":4,\"592\":4,\"593\":3,\"595\":1,\"597\":1,\"605\":5,\"609\":4,\"611\":1,\"617\":2,\"626\":1,\"627\":2,\"628\":2,\"631\":2,\"638\":1,\"640\":4,\"645\":1,\"648\":2,\"651\":6,\"653\":1,\"654\":1,\"655\":1,\"660\":3,\"662\":11,\"667\":1,\"668\":7,\"669\":7,\"671\":1,\"672\":1,\"673\":3,\"675\":1,\"676\":1,\"677\":3,\"678\":3,\"682\":1,\"686\":2,\"687\":2,\"689\":13,\"692\":2,\"694\":2,\"701\":1,\"703\":1,\"709\":3,\"770\":1,\"782\":1,\"832\":6,\"858\":2,\"869\":4,\"873\":2,\"885\":2}}],[\"lua\",{\"1\":{\"698\":1}}],[\"luke\",{\"1\":{\"681\":2}}],[\"lynn\",{\"1\":{\"682\":1,\"686\":1}}],[\"lzw\",{\"1\":{\"679\":1}}],[\"ld\",{\"1\":{\"670\":1}}],[\"lsg\",{\"1\":{\"692\":1}}],[\"ls\",{\"1\":{\"689\":8}}],[\"lst\",{\"1\":{\"651\":2,\"653\":4,\"662\":7}}],[\"lsp\",{\"1\":{\"316\":1}}],[\"llongfile\",{\"1\":{\"575\":1}}],[\"ln2\",{\"1\":{\"513\":2}}],[\"l\",{\"1\":{\"481\":1,\"553\":2,\"557\":2,\"585\":1,\"614\":2,\"653\":5,\"656\":8,\"660\":2,\"662\":7,\"689\":3}}],[\"lrq\",{\"1\":{\"330\":2}}],[\"ltrim\",{\"1\":{\"147\":1,\"180\":1}}],[\"level\",{\"1\":{\"869\":1}}],[\"let\",{\"0\":{\"752\":1},\"1\":{\"752\":1,\"755\":1,\"756\":1,\"757\":2,\"758\":2,\"759\":1,\"760\":2,\"761\":1,\"764\":2,\"766\":3,\"768\":1,\"770\":3,\"772\":1}}],[\"letter\",{\"1\":{\"677\":1}}],[\"le\",{\"1\":{\"640\":4,\"666\":2}}],[\"less\",{\"1\":{\"549\":1,\"628\":3,\"662\":11}}],[\"leaf\",{\"1\":{\"666\":1}}],[\"leaves\",{\"1\":{\"640\":1}}],[\"leaving\",{\"1\":{\"483\":1,\"568\":5}}],[\"learning\",{\"1\":{\"78\":1}}],[\"lex\",{\"1\":{\"481\":1}}],[\"leopard\",{\"1\":{\"481\":1}}],[\"lener\",{\"1\":{\"662\":2}}],[\"len++\",{\"1\":{\"354\":2}}],[\"len小的二级索引进行扫描\",{\"1\":{\"303\":1}}],[\"len\",{\"1\":{\"303\":1,\"353\":1,\"354\":1,\"496\":2,\"504\":1,\"513\":1,\"532\":3,\"549\":1,\"553\":4,\"557\":2,\"562\":1,\"567\":1,\"569\":3,\"580\":9,\"581\":1,\"585\":13,\"586\":1,\"587\":10,\"588\":3,\"592\":5,\"593\":3,\"595\":1,\"596\":1,\"599\":6,\"601\":3,\"602\":4,\"605\":1,\"611\":1,\"612\":1,\"628\":3,\"653\":9,\"662\":22,\"665\":1,\"676\":4,\"681\":1,\"689\":2,\"708\":1}}],[\"length\",{\"1\":{\"147\":1,\"180\":1,\"553\":4,\"557\":4,\"585\":6,\"587\":2,\"592\":13,\"662\":2,\"673\":2,\"766\":2,\"770\":1}}],[\"left\",{\"0\":{\"142\":1,\"175\":1},\"1\":{\"142\":1,\"147\":1,\"175\":1,\"180\":1,\"221\":1,\"518\":1,\"662\":1,\"666\":3}}],[\"legacy\",{\"1\":{\"51\":1}}],[\"legacy替换\",{\"1\":{\"51\":1}}],[\"laura\",{\"1\":{\"681\":2,\"682\":1,\"686\":1}}],[\"launchpad\",{\"1\":{\"627\":1,\"636\":1}}],[\"laws\",{\"1\":{\"668\":1}}],[\"later\",{\"1\":{\"622\":2}}],[\"latest\",{\"1\":{\"1\":1,\"2\":1,\"3\":1}}],[\"lambda\",{\"1\":{\"561\":1,\"663\":1,\"694\":1,\"705\":2,\"709\":1}}],[\"label1\",{\"1\":{\"559\":4}}],[\"label\",{\"1\":{\"559\":2}}],[\"layout\",{\"1\":{\"546\":1}}],[\"lazy\",{\"1\":{\"543\":3}}],[\"lastpage\",{\"1\":{\"854\":1}}],[\"lastname><\",{\"1\":{\"686\":1}}],[\"lastname>\",{\"1\":{\"686\":1}}],[\"lastname\",{\"1\":{\"640\":11,\"654\":1,\"657\":1,\"662\":1,\"677\":4,\"682\":3,\"686\":2}}],[\"last\",{\"1\":{\"536\":2}}],[\"lastindex\",{\"1\":{\"536\":3}}],[\"lalr\",{\"1\":{\"474\":1}}],[\"land\",{\"1\":{\"676\":3}}],[\"lang\",{\"1\":{\"469\":1}}],[\"language\",{\"1\":{\"63\":1,\"83\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"469\":1,\"499\":1,\"553\":1,\"557\":1}}],[\"lance\",{\"1\":{\"469\":1}}],[\"lanyang123456\",{\"1\":{\"376\":1}}],[\"london\",{\"1\":{\"700\":2,\"709\":2}}],[\"longwait\",{\"1\":{\"697\":10}}],[\"longname\",{\"1\":{\"662\":2}}],[\"longenough\",{\"1\":{\"662\":5}}],[\"longer\",{\"1\":{\"638\":1}}],[\"longurl\",{\"1\":{\"638\":9}}],[\"longcalculation\",{\"1\":{\"576\":2,\"577\":1}}],[\"long\",{\"1\":{\"301\":1,\"501\":2,\"638\":6,\"662\":2,\"670\":1}}],[\"lost\",{\"1\":{\"610\":1}}],[\"losal\",{\"1\":{\"270\":1}}],[\"lo\",{\"1\":{\"532\":1}}],[\"low\",{\"1\":{\"508\":1}}],[\"lowercase\",{\"1\":{\"540\":2}}],[\"lower\",{\"1\":{\"147\":1,\"180\":1,\"540\":4}}],[\"looping\",{\"1\":{\"662\":2,\"673\":4}}],[\"loop\",{\"1\":{\"488\":1,\"554\":1,\"559\":3,\"708\":1}}],[\"loading的作用\",{\"1\":{\"803\":1}}],[\"load\",{\"1\":{\"418\":1,\"430\":5,\"585\":1,\"587\":1,\"592\":1,\"680\":1}}],[\"location\",{\"1\":{\"546\":1,\"547\":6,\"873\":1,\"877\":1,\"878\":1}}],[\"locales\",{\"1\":{\"873\":1}}],[\"locale\",{\"1\":{\"725\":1,\"730\":2,\"731\":1,\"732\":1}}],[\"localtime\",{\"1\":{\"651\":1}}],[\"localusr\",{\"1\":{\"483\":1}}],[\"local\",{\"1\":{\"446\":1,\"449\":1,\"506\":2,\"519\":1,\"620\":1,\"651\":1,\"686\":2}}],[\"localhost\",{\"1\":{\"10\":1,\"12\":1,\"17\":2,\"20\":2,\"52\":1,\"427\":2,\"497\":1,\"628\":1,\"638\":3,\"692\":2}}],[\"locks\",{\"1\":{\"233\":1}}],[\"lock\",{\"1\":{\"231\":2,\"232\":1,\"235\":6,\"398\":2,\"405\":1,\"427\":9,\"568\":1,\"625\":3,\"662\":4,\"707\":1}}],[\"loc=local\",{\"1\":{\"56\":1}}],[\"logvalues\",{\"1\":{\"568\":1}}],[\"log2e\",{\"1\":{\"513\":1}}],[\"logo\",{\"1\":{\"469\":1}}],[\"logger\",{\"1\":{\"455\":1,\"662\":1,\"676\":5,\"689\":2}}],[\"login\",{\"1\":{\"72\":1,\"782\":1,\"873\":2,\"878\":1}}],[\"log\",{\"1\":{\"1\":1,\"3\":4,\"10\":3,\"12\":7,\"18\":5,\"21\":3,\"51\":2,\"424\":2,\"568\":2,\"575\":7,\"614\":1,\"623\":1,\"656\":28,\"676\":5,\"682\":2,\"686\":7,\"687\":1,\"689\":17,\"692\":2,\"759\":1,\"760\":2,\"763\":1,\"768\":1,\"772\":1,\"818\":4}}],[\"logstash和beats有助于收集\",{\"1\":{\"6\":1}}],[\"logs\",{\"1\":{\"1\":2,\"4\":3}}],[\"lies\",{\"1\":{\"523\":1}}],[\"lieteide\",{\"1\":{\"491\":1}}],[\"liteide\",{\"0\":{\"492\":1},\"1\":{\"491\":2,\"492\":2,\"494\":1,\"635\":1}}],[\"literals\",{\"1\":{\"581\":1,\"605\":1}}],[\"literal\",{\"1\":{\"333\":1,\"573\":1,\"574\":1,\"605\":4,\"640\":3}}],[\"license\",{\"1\":{\"486\":1,\"709\":4}}],[\"lion\",{\"1\":{\"481\":1}}],[\"lima\",{\"1\":{\"611\":3,\"612\":2}}],[\"lim\",{\"1\":{\"577\":3}}],[\"limbo\",{\"1\":{\"469\":1,\"471\":1}}],[\"limit\",{\"1\":{\"122\":1,\"127\":3,\"221\":2,\"265\":1,\"267\":1,\"284\":1,\"299\":2,\"305\":1,\"660\":1}}],[\"liwenzhou\",{\"1\":{\"457\":1}}],[\"line\",{\"1\":{\"572\":2,\"575\":2,\"679\":2,\"682\":2,\"688\":3}}],[\"lineno\",{\"1\":{\"561\":1}}],[\"linkedin\",{\"1\":{\"469\":1}}],[\"linked\",{\"1\":{\"469\":1,\"623\":1}}],[\"link\",{\"1\":{\"383\":1,\"446\":1,\"447\":1}}],[\"linux使用sudo\",{\"1\":{\"52\":1}}],[\"linux\",{\"0\":{\"483\":1},\"1\":{\"51\":1,\"330\":1,\"331\":2,\"469\":1,\"475\":1,\"481\":2,\"482\":3,\"483\":1,\"484\":1,\"485\":3,\"489\":1,\"490\":1,\"491\":2,\"502\":1,\"506\":3,\"515\":2,\"614\":7,\"627\":1,\"629\":1,\"631\":2,\"632\":1,\"633\":1,\"635\":1,\"678\":1,\"689\":5},\"2\":{\"53\":1}}],[\"lifo\",{\"1\":{\"325\":1,\"660\":1}}],[\"like\",{\"1\":{\"133\":6,\"226\":2,\"549\":2,\"657\":2}}],[\"lists\",{\"1\":{\"601\":1}}],[\"listing\",{\"1\":{\"555\":1,\"557\":1,\"577\":2,\"595\":1,\"640\":1}}],[\"list\",{\"1\":{\"60\":1,\"61\":1,\"64\":1,\"449\":1,\"497\":1,\"506\":1,\"507\":4,\"517\":1,\"585\":1,\"614\":3,\"623\":2,\"651\":10,\"653\":6,\"662\":12,\"682\":2,\"689\":2,\"692\":2}}],[\"listenandserve\",{\"1\":{\"10\":4,\"11\":2,\"12\":4,\"638\":1}}],[\"listenandserve阻塞导致if\",{\"0\":{\"9\":1}}],[\"libraries\",{\"1\":{\"637\":1}}],[\"libc\",{\"1\":{\"501\":1}}],[\"libc6\",{\"1\":{\"483\":1}}],[\"lib\",{\"1\":{\"1\":1,\"3\":1,\"52\":2,\"320\":2,\"486\":1}}],[\"将path中的默认全局安装模块修改为自定义目录node\",{\"1\":{\"982\":1}}],[\"将payload作为其\",{\"1\":{\"855\":1}}],[\"将使用oauth\",{\"1\":{\"878\":1}}],[\"将响应发送到的重定向uri\",{\"1\":{\"873\":1,\"892\":1}}],[\"将生成的字符串连接起来\",{\"1\":{\"855\":1}}],[\"将header作为其\",{\"1\":{\"855\":1}}],[\"将工作区中的文件与暂存区进行比较\",{\"1\":{\"822\":1}}],[\"将工作区的文件和本地库历史记录进行比较\",{\"1\":{\"822\":1}}],[\"将工作区的\",{\"0\":{\"813\":1}}],[\"将提交至暂存区的代码回退到工作区\",{\"0\":{\"814\":1}}],[\"将可用资源的数量\",{\"1\":{\"707\":1}}],[\"将可达的对象\",{\"1\":{\"429\":1}}],[\"将给定的\",{\"1\":{\"686\":1}}],[\"将得到这样的输出\",{\"1\":{\"681\":1}}],[\"将整个文件的内容读到一个字符串里\",{\"1\":{\"678\":1}}],[\"将文件的内容逐行\",{\"1\":{\"678\":1}}],[\"将空格分隔的值依次存放到后续的参数内\",{\"1\":{\"677\":1}}],[\"将父类型放在子类型中来实现亚型\",{\"1\":{\"655\":1}}],[\"将应用放入\",{\"1\":{\"638\":1}}],[\"将下载源码\",{\"1\":{\"638\":1}}],[\"将通过\",{\"1\":{\"636\":1,\"638\":1}}],[\"将你的项目放在\",{\"1\":{\"631\":1}}],[\"将斐波那契功能放入自己的\",{\"1\":{\"627\":1}}],[\"将判断所用的函数编写在\",{\"1\":{\"627\":1}}],[\"将自动检测机器的架构并调用正确的编译器和链接器\",{\"1\":{\"627\":1}}],[\"将用作导入路径\",{\"1\":{\"627\":1}}],[\"将用户标识符打包生成\",{\"1\":{\"30\":1}}],[\"将和普通的\",{\"1\":{\"625\":1}}],[\"将匹配到的部分替换为\",{\"1\":{\"624\":1}}],[\"将返回错误\",{\"1\":{\"677\":1}}],[\"将返回\",{\"1\":{\"624\":1}}],[\"将它们打印出来并且测试是否存在\",{\"1\":{\"609\":1}}],[\"将它们括起来\",{\"1\":{\"509\":1,\"553\":1}}],[\"将被放到\",{\"1\":{\"629\":1}}],[\"将被赋值为\",{\"1\":{\"605\":1}}],[\"将被默认安装在目录\",{\"1\":{\"482\":1}}],[\"将元素\",{\"1\":{\"601\":1}}],[\"将元素追加进新的\",{\"1\":{\"354\":1}}],[\"将从\",{\"1\":{\"593\":1}}],[\"将切片\",{\"1\":{\"601\":1}}],[\"将切片插入到另一个切片的指定位置\",{\"1\":{\"593\":1}}],[\"将切片扩展\",{\"1\":{\"592\":1}}],[\"将切片传递给函数\",{\"0\":{\"586\":1}}],[\"将数组分割为若干个不重复的切片\",{\"1\":{\"697\":1}}],[\"将数组传递给函数\",{\"0\":{\"583\":1}}],[\"将数据对象\",{\"1\":{\"682\":1}}],[\"将数据写入缓冲区\",{\"1\":{\"402\":1,\"405\":1}}],[\"将函数作为返回值\",{\"0\":{\"574\":1}}],[\"将函数作为参数的最好的例子是函数\",{\"1\":{\"572\":1}}],[\"将函数作为参数\",{\"0\":{\"572\":1}}],[\"将字符串写入缓冲区\",{\"1\":{\"680\":1}}],[\"将字符串\",{\"1\":{\"598\":1}}],[\"将字符串转换为\",{\"1\":{\"545\":2}}],[\"将字符串转换为其它类型\",{\"1\":{\"545\":1}}],[\"将字符串中的\",{\"1\":{\"540\":2}}],[\"将指定位置上的值设置为\",{\"1\":{\"525\":1}}],[\"将由编译器自动推断\",{\"1\":{\"518\":1}}],[\"将输出\",{\"1\":{\"517\":1,\"682\":2}}],[\"将源代码编译成对象文件\",{\"1\":{\"498\":1}}],[\"将源代码编译为项目代码\",{\"1\":{\"481\":1}}],[\"将项目代码链接到可执行的二进制文件\",{\"1\":{\"481\":1}}],[\"将这些零碎的知识点组织成系统化的概念和技术分类来进行讲解\",{\"1\":{\"467\":1}}],[\"将这些指令打包到一起\",{\"1\":{\"447\":1}}],[\"将栈中的对象一次三色标记\",{\"1\":{\"429\":1}}],[\"将参与竞争\",{\"1\":{\"420\":1}}],[\"将共享变量的读写放到一个\",{\"1\":{\"417\":1}}],[\"将待发送数据写入\",{\"1\":{\"405\":1}}],[\"将待发送数据写入g\",{\"1\":{\"402\":1}}],[\"将当前\",{\"1\":{\"405\":2}}],[\"将当前goroutine加入recvq\",{\"1\":{\"403\":1}}],[\"将当前g加入sendq\",{\"1\":{\"402\":1}}],[\"将当前用户加入\",{\"1\":{\"51\":1}}],[\"将key插入\",{\"1\":{\"375\":1}}],[\"将在后续源码分析中详细介绍\",{\"1\":{\"372\":1}}],[\"将oldbuckets中的键值对逐步的搬迁过来\",{\"1\":{\"372\":1}}],[\"将map设置为nil后\",{\"1\":{\"360\":1}}],[\"将mysql储存文件夹挂载到主机\",{\"1\":{\"1\":1}}],[\"将不会阻塞\",{\"1\":{\"331\":1}}],[\"将不会影响到实际参数\",{\"1\":{\"329\":1}}],[\"将阻塞当前\",{\"1\":{\"330\":1}}],[\"将影响到实际参数\",{\"1\":{\"329\":1}}],[\"将引用最多的表\",{\"1\":{\"270\":1}}],[\"将记录和列名最少的表\",{\"1\":{\"270\":1}}],[\"将一个值赋值给一个接口时\",{\"1\":{\"662\":1}}],[\"将一个新值放到栈的最顶部一个空\",{\"1\":{\"660\":1}}],[\"将一个名为\",{\"1\":{\"627\":1}}],[\"将一个文件加载到内存\",{\"1\":{\"602\":1}}],[\"将一个\",{\"1\":{\"590\":1}}],[\"将一个变量的值赋值给另一个变量时\",{\"1\":{\"516\":1}}],[\"将一个大连接查询\",{\"1\":{\"268\":1}}],[\"将一个跨多个数据库的分布式事务分拆成多个仅处于单个数据库上面的小事务\",{\"1\":{\"254\":1}}],[\"将请求发送到计算得到的节点上\",{\"1\":{\"252\":1}}],[\"将较多的\",{\"1\":{\"246\":1}}],[\"将较少的\",{\"1\":{\"246\":1}}],[\"将导致对热点数据依赖的业务系统并发性能衰退明显\",{\"1\":{\"241\":1}}],[\"将会创建一个读取器\",{\"1\":{\"677\":1}}],[\"将会看到它可以正常编译\",{\"1\":{\"653\":1}}],[\"将会引发一个错误\",{\"1\":{\"649\":1}}],[\"将会引发运行时错误\",{\"1\":{\"643\":1}}],[\"将会引发构建错误\",{\"1\":{\"507\":1}}],[\"将会复制包存档到\",{\"1\":{\"632\":1}}],[\"将会返回一个错误\",{\"1\":{\"627\":1}}],[\"将会输出\",{\"1\":{\"546\":1}}],[\"将会利用\",{\"1\":{\"542\":1}}],[\"将会展示如何使用\",{\"1\":{\"532\":1}}],[\"将会详细讲解如何正确地处理此类情况\",{\"1\":{\"527\":1}}],[\"将会详细说明\",{\"1\":{\"516\":1}}],[\"将会导致运行时的恐慌状态\",{\"1\":{\"527\":1}}],[\"将会在控制台输出\",{\"1\":{\"495\":1}}],[\"将会被安装在目录\",{\"1\":{\"485\":1}}],[\"将会打印信息\",{\"1\":{\"483\":1}}],[\"将会使用前面提到的默认值\",{\"1\":{\"482\":1}}],[\"将会需要调用\",{\"1\":{\"443\":1}}],[\"将会触发\",{\"1\":{\"432\":2}}],[\"将会触发扩容\",{\"1\":{\"372\":1}}],[\"将会通过隐藏的聚簇索引来对记录加锁\",{\"1\":{\"231\":1}}],[\"将会执行\",{\"1\":{\"166\":1,\"202\":1}}],[\"将选择性高的列或基数大的列优先排在多列索引最前列\",{\"1\":{\"222\":1}}],[\"将调用该对象\",{\"1\":{\"165\":1,\"201\":1}}],[\"将代码封装\",{\"1\":{\"164\":1,\"200\":1}}],[\"将查询之后的列放在一起\",{\"1\":{\"145\":1,\"178\":1}}],[\"将查询之后的行放在一起\",{\"1\":{\"145\":1,\"178\":1}}],[\"将相关的一些权限分配为同一组\",{\"1\":{\"72\":1}}],[\"将iptables用iptables\",{\"1\":{\"51\":1}}],[\"将jpanel保存为png\",{\"0\":{\"42\":1}}],[\"将其存储在cookie或localstorage中\",{\"1\":{\"38\":1}}],[\"将\",{\"0\":{\"612\":1},\"1\":{\"28\":1,\"525\":2,\"545\":1,\"592\":1,\"623\":1,\"636\":1,\"680\":1,\"689\":1,\"782\":7}}],[\"将日志文件夹挂载到主机\",{\"1\":{\"1\":1}}],[\"将配置文件夹挂载到主机\",{\"1\":{\"1\":1}}],[\"v8a\",{\"1\":{\"883\":1}}],[\"vv\",{\"1\":{\"684\":4}}],[\"vc\",{\"1\":{\"682\":4,\"683\":1,\"686\":3}}],[\"vcard\",{\"1\":{\"640\":4,\"682\":5,\"683\":2,\"686\":5}}],[\"v3\",{\"1\":{\"678\":4}}],[\"voluntary\",{\"1\":{\"868\":1}}],[\"volatile\",{\"1\":{\"803\":1}}],[\"voodoo\",{\"1\":{\"657\":4}}],[\"void相似\",{\"1\":{\"764\":1}}],[\"void类型像是与any类型相反\",{\"1\":{\"763\":1}}],[\"void\",{\"0\":{\"763\":1},\"1\":{\"42\":1,\"762\":1,\"763\":1,\"803\":1}}],[\"vb\",{\"1\":{\"499\":1,\"547\":1}}],[\"vfc\",{\"1\":{\"491\":1}}],[\"vmware\",{\"1\":{\"485\":2}}],[\"vm管理\",{\"1\":{\"317\":1}}],[\"vs\",{\"0\":{\"145\":1,\"178\":1,\"216\":1,\"294\":1,\"297\":1,\"643\":1},\"1\":{\"136\":1,\"186\":1}}],[\"vector\",{\"1\":{\"664\":7}}],[\"vector3d\",{\"1\":{\"581\":2}}],[\"vec\",{\"1\":{\"581\":1}}],[\"veg\",{\"1\":{\"513\":1}}],[\"vendors\",{\"1\":{\"140\":2,\"171\":2}}],[\"vend\",{\"1\":{\"126\":1,\"131\":1,\"132\":3,\"140\":3,\"171\":3}}],[\"verify\",{\"1\":{\"689\":3}}],[\"verification\",{\"1\":{\"6\":3,\"868\":1}}],[\"version\",{\"1\":{\"52\":1,\"230\":2,\"234\":1,\"483\":3,\"610\":6,\"638\":4,\"677\":2,\"782\":6}}],[\"version>\",{\"1\":{\"46\":1}}],[\"via\",{\"1\":{\"686\":1}}],[\"visitall\",{\"1\":{\"682\":1}}],[\"visual\",{\"1\":{\"491\":1}}],[\"vim\",{\"1\":{\"491\":1}}],[\"vi\",{\"1\":{\"483\":1}}],[\"virtual\",{\"1\":{\"392\":1}}],[\"views\",{\"1\":{\"854\":1}}],[\"view\",{\"0\":{\"103\":1},\"1\":{\"104\":2,\"105\":2,\"490\":1}}],[\"vip\",{\"1\":{\"97\":1,\"98\":1}}],[\"viper\",{\"1\":{\"21\":5}}],[\"vite\",{\"1\":{\"78\":1}}],[\"vue3\",{\"1\":{\"78\":1}}],[\"v1\",{\"1\":{\"34\":3,\"51\":1,\"340\":2,\"429\":1,\"638\":3,\"678\":4,\"858\":1}}],[\"v2\",{\"1\":{\"18\":1,\"340\":1,\"678\":4}}],[\"v2读取配置文件\",{\"0\":{\"18\":1,\"21\":1}}],[\"v2进行配置文件读取\",{\"0\":{\"16\":1}}],[\"validation\",{\"1\":{\"868\":1}}],[\"valid\",{\"1\":{\"662\":3}}],[\"valuable\",{\"1\":{\"662\":7}}],[\"value>\",{\"1\":{\"668\":1,\"669\":2,\"670\":1}}],[\"valueof\",{\"1\":{\"668\":7,\"669\":4,\"670\":2}}],[\"valueoftypea\",{\"1\":{\"511\":1}}],[\"valueoftypeb\",{\"1\":{\"511\":1}}],[\"value=\",{\"1\":{\"638\":2}}],[\"value=admin\",{\"1\":{\"4\":2}}],[\"value对\",{\"1\":{\"365\":1}}],[\"valuetype\",{\"1\":{\"365\":2,\"605\":4,\"606\":1}}],[\"value我们可以用一个常量来代替\",{\"1\":{\"337\":1}}],[\"value\",{\"0\":{\"563\":1},\"1\":{\"325\":2,\"328\":2,\"365\":1,\"372\":1,\"394\":2,\"507\":2,\"513\":2,\"515\":1,\"524\":1,\"528\":1,\"530\":2,\"547\":2,\"549\":5,\"550\":4,\"557\":4,\"559\":1,\"561\":2,\"567\":2,\"573\":5,\"574\":1,\"580\":2,\"581\":1,\"591\":4,\"603\":2,\"605\":1,\"606\":2,\"607\":4,\"608\":14,\"609\":11,\"610\":4,\"611\":30,\"612\":13,\"614\":1,\"625\":1,\"640\":2,\"651\":2,\"653\":2,\"662\":13,\"663\":6,\"667\":1,\"668\":14,\"669\":7,\"670\":11,\"673\":1,\"682\":4,\"684\":1,\"686\":3,\"687\":2,\"689\":1,\"703\":4,\"705\":2,\"708\":1,\"709\":2,\"868\":1,\"869\":1,\"873\":1,\"874\":1,\"883\":1}}],[\"values\",{\"1\":{\"115\":1,\"116\":1,\"151\":2,\"167\":1,\"187\":2,\"203\":1,\"365\":2,\"507\":1,\"567\":2,\"709\":2,\"873\":1}}],[\"val3\",{\"1\":{\"551\":1}}],[\"val2\",{\"1\":{\"551\":4,\"567\":1,\"605\":1}}],[\"val1\",{\"1\":{\"551\":4,\"567\":1,\"605\":3,\"608\":6}}],[\"val\",{\"1\":{\"518\":2,\"543\":4,\"545\":1,\"549\":4,\"557\":3,\"653\":2,\"662\":2,\"663\":16}}],[\"vari\",{\"1\":{\"662\":10}}],[\"variables\",{\"0\":{\"564\":1},\"1\":{\"517\":1,\"518\":1}}],[\"variable\",{\"0\":{\"566\":1},\"1\":{\"301\":1,\"383\":1,\"555\":7,\"558\":1,\"563\":1,\"659\":1,\"662\":2,\"670\":1,\"709\":1}}],[\"varnumpar\",{\"1\":{\"567\":1}}],[\"var2\",{\"1\":{\"509\":1,\"549\":1}}],[\"var1\",{\"1\":{\"509\":1,\"518\":1,\"549\":1,\"551\":2}}],[\"varbinary\",{\"1\":{\"301\":1}}],[\"varchar2\",{\"1\":{\"301\":1}}],[\"varchar\",{\"1\":{\"72\":24,\"73\":9,\"98\":3,\"112\":3,\"168\":1,\"204\":1,\"221\":1,\"301\":3}}],[\"var\",{\"1\":{\"1\":2,\"3\":2,\"18\":1,\"21\":1,\"51\":1,\"52\":2,\"168\":1,\"204\":1,\"325\":1,\"326\":2,\"335\":1,\"340\":1,\"353\":4,\"362\":2,\"388\":2,\"389\":1,\"427\":1,\"438\":2,\"475\":1,\"501\":1,\"504\":1,\"506\":2,\"509\":4,\"510\":2,\"511\":1,\"513\":1,\"515\":20,\"518\":3,\"519\":5,\"521\":3,\"523\":4,\"524\":1,\"525\":2,\"530\":1,\"531\":6,\"534\":1,\"536\":1,\"538\":2,\"539\":2,\"540\":3,\"545\":3,\"546\":1,\"547\":11,\"549\":3,\"550\":5,\"551\":2,\"555\":1,\"557\":1,\"563\":2,\"564\":4,\"565\":3,\"574\":3,\"575\":1,\"577\":2,\"580\":6,\"581\":9,\"582\":1,\"585\":6,\"586\":1,\"587\":2,\"588\":2,\"590\":3,\"591\":2,\"592\":2,\"595\":2,\"602\":1,\"605\":6,\"608\":2,\"611\":1,\"612\":1,\"619\":2,\"620\":2,\"627\":3,\"631\":1,\"638\":1,\"640\":12,\"649\":2,\"653\":2,\"659\":1,\"661\":1,\"662\":7,\"663\":5,\"665\":4,\"667\":3,\"668\":3,\"669\":1,\"670\":2,\"676\":1,\"677\":4,\"678\":2,\"679\":1,\"680\":4,\"682\":5,\"683\":1,\"684\":1,\"685\":1,\"686\":7,\"688\":2,\"689\":4,\"692\":2,\"697\":1,\"699\":2,\"700\":1,\"705\":1,\"709\":3}}],[\"v\",{\"1\":{\"1\":3,\"2\":2,\"3\":3,\"4\":1,\"6\":4,\"338\":1,\"388\":2,\"449\":1,\"467\":1,\"469\":1,\"481\":1,\"494\":1,\"506\":1,\"510\":1,\"517\":2,\"524\":2,\"531\":1,\"543\":2,\"550\":3,\"557\":3,\"559\":2,\"562\":4,\"567\":4,\"568\":1,\"569\":1,\"573\":2,\"574\":2,\"583\":2,\"588\":3,\"605\":3,\"610\":2,\"611\":6,\"612\":6,\"624\":2,\"626\":2,\"638\":1,\"640\":5,\"645\":1,\"651\":2,\"653\":2,\"657\":3,\"659\":2,\"660\":6,\"662\":13,\"663\":14,\"666\":1,\"668\":16,\"669\":37,\"670\":2,\"672\":4,\"679\":1,\"682\":4,\"683\":4,\"684\":2,\"686\":5,\"687\":1,\"688\":2,\"689\":12,\"691\":1,\"706\":4,\"707\":3,\"708\":5,\"709\":8,\"823\":1,\"827\":1}}],[\"eyjzdwiioij1c2vymtiziiwic2vzc2lvbii6imnonzjnc2izmjawmdb1zg9jbdm2m\",{\"1\":{\"854\":1}}],[\"eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiywrtaw4ionrydwv9\",{\"1\":{\"845\":1,\"849\":1,\"858\":1}}],[\"eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq\",{\"1\":{\"33\":1}}],[\"eyjhbgcioijsuzi1niisimtpzci6ijflowdkazcifq\",{\"1\":{\"883\":1}}],[\"eyjhbgcioijub25lin0\",{\"1\":{\"850\":1,\"854\":1}}],[\"eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9\",{\"1\":{\"845\":1,\"849\":1,\"858\":1}}],[\"e=指数\",{\"1\":{\"697\":1}}],[\"eperm\",{\"1\":{\"688\":2}}],[\"epoll\",{\"1\":{\"330\":1,\"331\":1}}],[\"ewogimlzc\",{\"1\":{\"883\":1}}],[\"ew\",{\"1\":{\"682\":4}}],[\"eio\",{\"1\":{\"688\":2}}],[\"eintr\",{\"1\":{\"688\":2}}],[\"einal\",{\"1\":{\"688\":1}}],[\"either\",{\"1\":{\"649\":1}}],[\"eileen\",{\"1\":{\"567\":2}}],[\"e0\",{\"1\":{\"606\":1}}],[\"e2dzl7emopwoaoztf\",{\"1\":{\"883\":1}}],[\"e2222bfc59850bbb00a722e764a555603bb59b2a\",{\"1\":{\"686\":1}}],[\"e2\",{\"1\":{\"602\":2}}],[\"e1\",{\"1\":{\"602\":2}}],[\"eof\",{\"1\":{\"568\":2,\"662\":2,\"677\":1,\"678\":2,\"682\":6,\"686\":1}}],[\"e8\",{\"1\":{\"557\":1}}],[\"e6\",{\"1\":{\"557\":2}}],[\"equal\",{\"1\":{\"549\":1,\"551\":4}}],[\"equals\",{\"1\":{\"42\":2}}],[\"eb\",{\"1\":{\"513\":1,\"525\":1}}],[\"ed\",{\"1\":{\"483\":1}}],[\"efficiently\",{\"1\":{\"686\":1}}],[\"effect\",{\"1\":{\"563\":1,\"566\":1}}],[\"efforts\",{\"1\":{\"482\":1}}],[\"eface\",{\"0\":{\"383\":1},\"1\":{\"383\":5}}],[\"er\",{\"1\":{\"662\":2,\"690\":1}}],[\"eric\",{\"1\":{\"654\":3}}],[\"erlang\",{\"1\":{\"471\":1,\"694\":1}}],[\"err2\",{\"1\":{\"689\":2}}],[\"errnotfound\",{\"1\":{\"688\":2}}],[\"errno\",{\"1\":{\"675\":1,\"688\":7,\"828\":1}}],[\"error=invalid\",{\"1\":{\"878\":1}}],[\"errorhandler\",{\"1\":{\"689\":2}}],[\"errorstring\",{\"1\":{\"687\":1}}],[\"errors\",{\"1\":{\"677\":1,\"687\":1,\"688\":8}}],[\"errorf\",{\"1\":{\"523\":1,\"631\":1,\"688\":1,\"689\":7}}],[\"error\",{\"1\":{\"18\":2,\"21\":2,\"51\":2,\"342\":1,\"485\":1,\"507\":2,\"508\":1,\"509\":1,\"523\":2,\"545\":2,\"547\":3,\"550\":10,\"559\":2,\"564\":2,\"568\":3,\"573\":1,\"580\":1,\"585\":1,\"638\":2,\"640\":3,\"662\":8,\"669\":1,\"670\":2,\"672\":3,\"675\":1,\"676\":1,\"677\":1,\"678\":5,\"679\":1,\"680\":3,\"682\":16,\"683\":1,\"686\":7,\"687\":6,\"688\":29,\"689\":29,\"700\":1,\"762\":4,\"765\":3,\"770\":4,\"878\":4,\"884\":2}}],[\"err==nil\",{\"1\":{\"10\":1,\"11\":1}}],[\"err\",{\"1\":{\"10\":3,\"12\":9,\"18\":6,\"21\":6,\"56\":1,\"321\":1,\"394\":2,\"425\":3,\"427\":8,\"509\":1,\"518\":2,\"545\":3,\"550\":22,\"556\":3,\"568\":2,\"638\":3,\"662\":5,\"670\":1,\"677\":7,\"678\":13,\"679\":7,\"680\":5,\"682\":19,\"684\":1,\"685\":1,\"686\":15,\"687\":4,\"688\":22,\"689\":35,\"692\":6}}],[\"everything\",{\"1\":{\"667\":1,\"689\":2}}],[\"even\",{\"1\":{\"568\":1,\"570\":6,\"627\":1,\"662\":1,\"667\":1,\"689\":29}}],[\"eventually\",{\"1\":{\"242\":1}}],[\"event\",{\"1\":{\"167\":2,\"203\":2}}],[\"evan\",{\"1\":{\"681\":2}}],[\"eval\",{\"1\":{\"488\":1}}],[\"evacuation\",{\"1\":{\"365\":1}}],[\"earth\",{\"1\":{\"508\":1}}],[\"eating\",{\"1\":{\"338\":2}}],[\"eat\",{\"1\":{\"338\":2,\"513\":1}}],[\"each\",{\"1\":{\"167\":3,\"203\":3,\"365\":1}}],[\"embed\",{\"1\":{\"656\":2}}],[\"embedded\",{\"1\":{\"686\":1}}],[\"embedd\",{\"1\":{\"648\":1}}],[\"emacs\",{\"1\":{\"491\":1}}],[\"email地址\",{\"1\":{\"811\":1}}],[\"email\",{\"1\":{\"98\":1,\"107\":2,\"109\":1,\"112\":1,\"116\":1,\"136\":1,\"144\":2,\"177\":2,\"186\":1,\"811\":2}}],[\"employee\",{\"1\":{\"651\":1,\"657\":2}}],[\"emptyint\",{\"1\":{\"663\":1}}],[\"empty\",{\"1\":{\"635\":1,\"663\":1,\"667\":6,\"705\":5,\"707\":3}}],[\"empno\",{\"1\":{\"270\":1,\"271\":1}}],[\"emp\",{\"1\":{\"270\":7,\"271\":7,\"277\":2,\"278\":2,\"279\":3,\"299\":1}}],[\"ex\",{\"1\":{\"689\":3}}],[\"exe\",{\"1\":{\"682\":2,\"689\":2,\"700\":1,\"725\":1,\"729\":2}}],[\"executing\",{\"1\":{\"689\":1}}],[\"executes\",{\"1\":{\"689\":1}}],[\"executed\",{\"1\":{\"568\":1}}],[\"execute\",{\"1\":{\"90\":1,\"638\":3}}],[\"exec\",{\"1\":{\"3\":1,\"4\":1,\"6\":3,\"614\":2,\"689\":13}}],[\"exhibits\",{\"1\":{\"657\":4}}],[\"ext\",{\"1\":{\"627\":4,\"662\":1}}],[\"externally\",{\"1\":{\"561\":1}}],[\"extensible\",{\"1\":{\"63\":1}}],[\"extra\",{\"1\":{\"364\":1}}],[\"exclusive\",{\"1\":{\"232\":1}}],[\"exception\",{\"1\":{\"42\":1}}],[\"exit\",{\"1\":{\"550\":2,\"662\":1,\"678\":1,\"679\":2,\"682\":3,\"687\":1,\"689\":4}}],[\"exiting\",{\"1\":{\"550\":1,\"677\":1}}],[\"exited\",{\"1\":{\"495\":1,\"507\":1,\"689\":1,\"700\":1}}],[\"exit退出程序\",{\"1\":{\"415\":1}}],[\"exit退出\",{\"1\":{\"52\":1}}],[\"exist\",{\"1\":{\"51\":1,\"678\":1}}],[\"exists\",{\"0\":{\"306\":1},\"1\":{\"42\":1,\"93\":1,\"94\":1,\"97\":2,\"163\":1,\"167\":1,\"199\":1,\"203\":1,\"306\":4}}],[\"examples\",{\"1\":{\"627\":1,\"628\":1,\"689\":4,\"700\":1}}],[\"example\",{\"1\":{\"37\":1,\"518\":1,\"534\":2,\"628\":3,\"689\":2,\"869\":1,\"873\":4,\"877\":1,\"878\":1,\"881\":2}}],[\"expr\",{\"1\":{\"757\":1}}],[\"expression\",{\"1\":{\"564\":1,\"652\":1}}],[\"exp3\",{\"1\":{\"689\":1}}],[\"exp2\",{\"1\":{\"689\":1}}],[\"exp1\",{\"1\":{\"689\":1}}],[\"expstruct\",{\"1\":{\"644\":2}}],[\"expand\",{\"1\":{\"638\":1}}],[\"explicit\",{\"1\":{\"583\":1}}],[\"explain\",{\"1\":{\"264\":4}}],[\"expected\",{\"1\":{\"689\":3}}],[\"expecting\",{\"1\":{\"564\":1}}],[\"experience\",{\"1\":{\"508\":1}}],[\"exported\",{\"1\":{\"510\":1,\"672\":1,\"689\":2}}],[\"export\",{\"1\":{\"483\":5,\"631\":1,\"632\":1}}],[\"expires\",{\"1\":{\"883\":1}}],[\"expiresdate\",{\"1\":{\"35\":1}}],[\"expire\",{\"1\":{\"35\":1}}],[\"expiration\",{\"1\":{\"35\":1,\"852\":1}}],[\"exp\",{\"1\":{\"35\":1,\"149\":1,\"182\":1,\"623\":1,\"852\":3,\"869\":2}}],[\"eclipse\",{\"1\":{\"491\":1,\"493\":2}}],[\"eckel\",{\"1\":{\"467\":1}}],[\"ecdsa512\",{\"1\":{\"34\":1}}],[\"ecdsa384\",{\"1\":{\"34\":1}}],[\"ecdsa\",{\"1\":{\"34\":3,\"858\":1,\"860\":2}}],[\"ecdsa256\",{\"1\":{\"34\":1}}],[\"echo\",{\"1\":{\"6\":11,\"461\":2,\"611\":3,\"612\":1,\"682\":5,\"782\":1}}],[\"elgoog\",{\"1\":{\"602\":1}}],[\"eleanor\",{\"1\":{\"601\":1}}],[\"element\",{\"1\":{\"610\":1,\"664\":7}}],[\"elements\",{\"1\":{\"593\":1}}],[\"elementui\",{\"1\":{\"78\":1}}],[\"elemtype\",{\"1\":{\"398\":1,\"405\":1}}],[\"elemsize\",{\"1\":{\"398\":1,\"405\":1}}],[\"elems\",{\"1\":{\"365\":2}}],[\"elem\",{\"1\":{\"328\":1,\"365\":2,\"669\":5,\"670\":1}}],[\"elderberry=3\",{\"1\":{\"513\":1}}],[\"elderberry\",{\"1\":{\"513\":1}}],[\"eliminate\",{\"1\":{\"365\":1}}],[\"elseif\",{\"1\":{\"163\":1,\"199\":1}}],[\"else\",{\"0\":{\"549\":1},\"1\":{\"10\":1,\"12\":1,\"42\":2,\"163\":1,\"199\":1,\"504\":1,\"548\":1,\"549\":22,\"550\":1,\"551\":3,\"565\":1,\"570\":1,\"577\":1,\"590\":1,\"608\":2,\"662\":1,\"676\":2,\"679\":1,\"687\":1,\"704\":1,\"709\":1}}],[\"else不执行问题分析\",{\"0\":{\"9\":1}}],[\"elastic的用户界面\",{\"1\":{\"6\":1}}],[\"elastic\",{\"1\":{\"6\":11}}],[\"elasticsearch的分布式特性使您的部署能够无缝地随之增长\",{\"1\":{\"6\":1}}],[\"elasticsearch都可以以一种支持快速搜索的方式有效地存储和索引它\",{\"1\":{\"6\":1}}],[\"elasticsearch为所有类型的数据提供近乎实时的搜索和分析\",{\"1\":{\"6\":1}}],[\"elasticsearch是索引\",{\"1\":{\"6\":1}}],[\"elasticsearch是位于elastic\",{\"1\":{\"6\":1}}],[\"elasticsearch简介\",{\"1\":{\"6\":1}}],[\"elasticsearch\",{\"0\":{\"6\":1},\"1\":{\"6\":30,\"78\":1}}],[\"enum\",{\"0\":{\"760\":1},\"1\":{\"760\":1,\"803\":1}}],[\"enoent\",{\"1\":{\"688\":2}}],[\"enough\",{\"1\":{\"662\":2}}],[\"entity\",{\"1\":{\"868\":1}}],[\"entering\",{\"1\":{\"568\":5}}],[\"enter\",{\"1\":{\"549\":2,\"677\":6}}],[\"enterorbit\",{\"1\":{\"508\":2}}],[\"entry\",{\"1\":{\"362\":1,\"643\":1}}],[\"environ\",{\"1\":{\"689\":1}}],[\"env\",{\"1\":{\"483\":2,\"689\":3}}],[\"en\",{\"1\":{\"469\":1,\"602\":2,\"873\":1}}],[\"ename\",{\"1\":{\"270\":1,\"271\":1}}],[\"enabled\",{\"1\":{\"6\":4,\"46\":1,\"112\":1}}],[\"enabled=true\",{\"1\":{\"4\":1}}],[\"enable=true\",{\"1\":{\"4\":2}}],[\"enable\",{\"1\":{\"3\":1}}],[\"endpoint\",{\"0\":{\"880\":1},\"1\":{\"868\":1}}],[\"endpoint令牌端点\",{\"1\":{\"868\":1}}],[\"endpoint授权端点\",{\"1\":{\"868\":1}}],[\"ending\",{\"1\":{\"689\":1}}],[\"endif\",{\"1\":{\"163\":2,\"199\":2}}],[\"endelement\",{\"1\":{\"686\":2}}],[\"ends\",{\"1\":{\"549\":1}}],[\"end\",{\"1\":{\"78\":2,\"162\":1,\"163\":6,\"166\":3,\"167\":2,\"168\":2,\"198\":1,\"199\":6,\"202\":3,\"203\":2,\"204\":2,\"427\":4,\"561\":1,\"568\":2,\"576\":2,\"577\":2,\"585\":3,\"592\":2,\"593\":1,\"596\":4,\"625\":1,\"638\":1,\"640\":3,\"662\":2,\"686\":4,\"689\":2,\"697\":9,\"868\":1,\"869\":1}}],[\"engine=innodb\",{\"1\":{\"112\":1}}],[\"engine\",{\"0\":{\"715\":1},\"1\":{\"72\":6,\"73\":3,\"467\":1,\"469\":4,\"476\":2,\"490\":2,\"638\":2,\"655\":5}}],[\"encodedpayload\",{\"1\":{\"859\":6}}],[\"encodedheader\",{\"1\":{\"859\":6}}],[\"encode\",{\"1\":{\"682\":2,\"686\":6}}],[\"encoder\",{\"1\":{\"682\":3,\"686\":7}}],[\"encodetoxml\",{\"1\":{\"672\":3}}],[\"encoding\",{\"1\":{\"623\":4,\"672\":1,\"678\":2,\"682\":2,\"686\":6}}],[\"enc\",{\"1\":{\"39\":2,\"682\":2,\"686\":5}}],[\"encryption\",{\"1\":{\"39\":5,\"845\":1}}],[\"enrollment\",{\"1\":{\"6\":2}}],[\"essential\",{\"1\":{\"868\":1}}],[\"esrch\",{\"1\":{\"688\":2}}],[\"es512\",{\"1\":{\"34\":1,\"858\":1}}],[\"es384\",{\"1\":{\"34\":1,\"858\":1}}],[\"es256\",{\"1\":{\"34\":1,\"858\":2}}],[\"es\",{\"1\":{\"6\":1}}],[\"etc\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"51\":1,\"52\":2,\"688\":1}}],[\"e\",{\"1\":{\"1\":1,\"3\":2,\"4\":20,\"6\":3,\"42\":2,\"365\":1,\"481\":1,\"513\":2,\"523\":3,\"545\":1,\"546\":1,\"549\":1,\"553\":2,\"557\":6,\"588\":1,\"614\":5,\"625\":1,\"664\":2,\"688\":7,\"689\":8,\"700\":1,\"707\":2}}],[\"rvkmzqg\",{\"1\":{\"883\":1}}],[\"rw\",{\"1\":{\"689\":3}}],[\"rwxr\",{\"1\":{\"689\":2}}],[\"rwmutex\",{\"1\":{\"625\":1}}],[\"rdonly\",{\"1\":{\"680\":1,\"682\":1}}],[\"rd\",{\"1\":{\"677\":1}}],[\"rq\",{\"1\":{\"626\":5}}],[\"rn\",{\"1\":{\"626\":2}}],[\"rlock\",{\"1\":{\"625\":1}}],[\"ri\",{\"1\":{\"640\":4,\"666\":2}}],[\"rivision\",{\"1\":{\"635\":1}}],[\"ring\",{\"1\":{\"614\":2,\"657\":4}}],[\"rights\",{\"1\":{\"709\":2}}],[\"right\",{\"0\":{\"143\":1,\"176\":1},\"1\":{\"143\":1,\"147\":1,\"176\":1,\"180\":1,\"642\":1,\"666\":3}}],[\"r2\",{\"1\":{\"516\":2}}],[\"r1\",{\"1\":{\"516\":4}}],[\"r\",{\"1\":{\"496\":4,\"528\":2,\"531\":1,\"532\":1,\"536\":2,\"590\":1,\"595\":1,\"638\":5,\"662\":16,\"673\":7,\"677\":10,\"678\":1,\"679\":4,\"682\":4,\"686\":2,\"688\":1,\"689\":18}}],[\"rp应该拒绝它\",{\"1\":{\"887\":1}}],[\"rp可以向userinfo端点发送带有访问令牌的请求\",{\"1\":{\"869\":1}}],[\"rps\",{\"1\":{\"866\":1}}],[\"rp\",{\"1\":{\"626\":2,\"868\":2,\"869\":3,\"880\":1}}],[\"rpm\",{\"1\":{\"483\":1}}],[\"rpcs\",{\"1\":{\"686\":1}}],[\"rpc\",{\"0\":{\"462\":1},\"1\":{\"459\":1,\"462\":2,\"637\":1,\"686\":1}}],[\"ryanne\",{\"1\":{\"467\":1}}],[\"russ\",{\"1\":{\"467\":1,\"469\":1}}],[\"rubygems\",{\"1\":{\"498\":1}}],[\"ruby\",{\"1\":{\"467\":1,\"471\":1,\"474\":1,\"475\":1,\"478\":1,\"498\":1,\"499\":1,\"515\":1,\"655\":1,\"659\":2,\"667\":1,\"671\":2,\"672\":1}}],[\"running\",{\"1\":{\"686\":1}}],[\"runtimeerror\",{\"1\":{\"689\":1}}],[\"runtime中也有1个main函数\",{\"1\":{\"415\":1}}],[\"runtime创建最初的线程m0和goroutine\",{\"1\":{\"415\":1}}],[\"runtime\",{\"0\":{\"487\":1},\"1\":{\"330\":1,\"409\":2,\"415\":5,\"427\":2,\"432\":1,\"483\":2,\"487\":6,\"499\":1,\"515\":3,\"547\":1,\"549\":3,\"575\":3,\"580\":1,\"585\":1,\"623\":1,\"638\":1,\"661\":7,\"667\":1,\"689\":10,\"692\":2,\"693\":1,\"694\":1,\"696\":1,\"697\":2,\"700\":2}}],[\"runecountinstring\",{\"1\":{\"595\":1}}],[\"runes\",{\"1\":{\"531\":1}}],[\"rune\",{\"0\":{\"327\":1},\"1\":{\"327\":1,\"333\":1,\"531\":2,\"532\":1,\"536\":5,\"544\":1,\"557\":11,\"572\":1,\"595\":2}}],[\"run\",{\"0\":{\"451\":1},\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":2,\"5\":1,\"6\":2,\"328\":1,\"448\":1,\"449\":1,\"451\":1,\"483\":1,\"485\":1,\"572\":1,\"638\":1,\"686\":1,\"689\":9,\"700\":1}}],[\"rr<=10\",{\"1\":{\"299\":1}}],[\"rr>5\",{\"1\":{\"299\":1}}],[\"rr\",{\"1\":{\"299\":1}}],[\"radius\",{\"1\":{\"662\":3}}],[\"radix\",{\"1\":{\"455\":1}}],[\"rat\",{\"1\":{\"527\":1,\"626\":4}}],[\"race\",{\"1\":{\"449\":1}}],[\"rank\",{\"1\":{\"673\":7}}],[\"range\",{\"0\":{\"324\":1,\"557\":1,\"591\":1,\"609\":1},\"1\":{\"324\":1,\"359\":1,\"427\":1,\"504\":1,\"523\":3,\"532\":1,\"542\":1,\"543\":2,\"548\":1,\"557\":7,\"567\":3,\"580\":4,\"583\":1,\"585\":1,\"591\":9,\"595\":2,\"602\":1,\"609\":5,\"610\":2,\"611\":4,\"612\":2,\"623\":1,\"631\":1,\"651\":2,\"662\":3,\"665\":2,\"670\":1,\"673\":2,\"676\":4,\"684\":3,\"686\":1,\"689\":4,\"705\":1,\"706\":1,\"708\":5,\"709\":3}}],[\"random\",{\"1\":{\"501\":7,\"528\":1}}],[\"rand\",{\"1\":{\"149\":1,\"182\":1,\"501\":1,\"528\":10,\"614\":2}}],[\"raw\",{\"1\":{\"301\":1,\"333\":1,\"532\":1,\"689\":1,\"832\":4}}],[\"rabbitmq简介\",{\"0\":{\"840\":1}}],[\"rabbitmq\",{\"0\":{\"3\":1,\"839\":1},\"1\":{\"3\":16,\"78\":1},\"2\":{\"841\":1}}],[\"rtim\",{\"1\":{\"147\":1,\"180\":1}}],[\"rgan01\",{\"1\":{\"128\":1}}],[\"rgb\",{\"1\":{\"42\":1}}],[\"rbac以过于死板著称\",{\"1\":{\"75\":1}}],[\"rbac最大的优点之一是它提供了一种系统化的方法\",{\"1\":{\"74\":1}}],[\"rbac权限体系完整设计\",{\"0\":{\"73\":1},\"1\":{\"73\":1}}],[\"rbac权限体系精简设计\",{\"0\":{\"72\":1},\"1\":{\"72\":1}}],[\"rbac权限模型缺陷\",{\"0\":{\"75\":1}}],[\"rbac权限模型优点\",{\"0\":{\"74\":1}}],[\"rbac权限模型组成\",{\"0\":{\"65\":1}}],[\"rbac权限模型简介\",{\"0\":{\"64\":1}}],[\"rbac3\",{\"0\":{\"69\":1},\"1\":{\"69\":1}}],[\"rbac3都是先后在rbac0上的扩展\",{\"1\":{\"66\":1}}],[\"rbac2也是建立的rbac0的基础之上的\",{\"1\":{\"68\":1}}],[\"rbac2\",{\"0\":{\"68\":1},\"1\":{\"66\":1,\"68\":3}}],[\"rbac1和rbac2的所有特点\",{\"1\":{\"69\":1}}],[\"rbac1\",{\"0\":{\"67\":1},\"1\":{\"66\":1,\"67\":1}}],[\"rbac0由四部分构成\",{\"1\":{\"66\":1}}],[\"rbac0定义了能构成rbac控制系统的最小的元素集合\",{\"1\":{\"66\":1}}],[\"rbac0\",{\"0\":{\"66\":1},\"1\":{\"66\":2}}],[\"rbac模型是rbac机制的基本模型\",{\"1\":{\"65\":1}}],[\"rbac通过定义角色的权限\",{\"1\":{\"65\":1}}],[\"rbac才在研究团体中得到一些重视\",{\"1\":{\"64\":1}}],[\"rbac\",{\"1\":{\"63\":2,\"64\":1,\"65\":5}}],[\"rover\",{\"1\":{\"676\":3}}],[\"romance\",{\"1\":{\"651\":1}}],[\"rome\",{\"1\":{\"609\":1}}],[\"ro\",{\"1\":{\"626\":2,\"770\":6}}],[\"ron\",{\"1\":{\"581\":4}}],[\"rope\",{\"1\":{\"530\":1}}],[\"robert\",{\"1\":{\"469\":1,\"499\":1}}],[\"rob\",{\"1\":{\"467\":1,\"469\":3,\"663\":2}}],[\"robot\",{\"1\":{\"85\":4,\"118\":2,\"120\":1}}],[\"roadmap\",{\"1\":{\"461\":1}}],[\"router\",{\"1\":{\"456\":4}}],[\"routing\",{\"1\":{\"311\":2}}],[\"rollback\",{\"1\":{\"89\":1,\"151\":3,\"187\":3,\"236\":1}}],[\"role`\",{\"1\":{\"72\":1,\"73\":1}}],[\"role\",{\"0\":{\"59\":1},\"1\":{\"60\":1,\"64\":1,\"65\":1,\"66\":1,\"72\":9,\"73\":5}}],[\"rownum\",{\"1\":{\"299\":2}}],[\"rows\",{\"1\":{\"264\":1,\"267\":3}}],[\"row\",{\"1\":{\"72\":6,\"73\":3,\"82\":1,\"167\":3,\"203\":3,\"231\":1,\"591\":3}}],[\"roothtml\",{\"1\":{\"638\":1}}],[\"roothtmltmpl\",{\"1\":{\"638\":4}}],[\"root2\",{\"1\":{\"151\":2,\"187\":2}}],[\"root1\",{\"1\":{\"151\":2,\"187\":2}}],[\"root\",{\"1\":{\"1\":1,\"17\":2,\"18\":2,\"20\":2,\"21\":2,\"51\":2,\"52\":3,\"85\":2,\"115\":2,\"118\":1,\"629\":2,\"631\":1,\"638\":3,\"640\":1,\"666\":7,\"688\":3,\"689\":1}}],[\"root账户密码\",{\"1\":{\"1\":1}}],[\"rc4\",{\"1\":{\"686\":1}}],[\"rc\",{\"1\":{\"52\":2}}],[\"rf\",{\"1\":{\"52\":1}}],[\"rfc5646\",{\"1\":{\"873\":1}}],[\"rfc3339\",{\"1\":{\"869\":1}}],[\"rfc2616\",{\"1\":{\"868\":1,\"873\":1}}],[\"rfc2119\",{\"1\":{\"867\":1}}],[\"rfc6711\",{\"1\":{\"869\":1}}],[\"rfc6750\",{\"1\":{\"866\":1,\"883\":1}}],[\"rfc6749\",{\"1\":{\"866\":2,\"868\":2,\"869\":1,\"874\":1,\"875\":1,\"877\":1,\"878\":1,\"880\":1,\"881\":2,\"883\":2,\"884\":1}}],[\"rfc822\",{\"1\":{\"546\":2}}],[\"rfc7519\",{\"1\":{\"39\":1}}],[\"rfc\",{\"1\":{\"26\":1,\"845\":2,\"858\":1}}],[\"rm\",{\"1\":{\"52\":1,\"626\":2,\"814\":1}}],[\"rsimple\",{\"1\":{\"662\":2}}],[\"rst\",{\"1\":{\"546\":2}}],[\"rs512\",{\"1\":{\"34\":1,\"858\":1}}],[\"rs384\",{\"1\":{\"34\":1,\"858\":1}}],[\"rsa\",{\"1\":{\"686\":1,\"860\":5}}],[\"rsa512\",{\"1\":{\"34\":1}}],[\"rsa384\",{\"1\":{\"34\":1}}],[\"rsassa\",{\"1\":{\"34\":3,\"858\":2,\"859\":3,\"860\":1}}],[\"rsa256\",{\"1\":{\"34\":1}}],[\"rs256\",{\"1\":{\"34\":1,\"858\":2}}],[\"remedy\",{\"1\":{\"688\":1}}],[\"remark\",{\"1\":{\"682\":2,\"686\":1}}],[\"removing\",{\"1\":{\"709\":1}}],[\"removestringslice\",{\"1\":{\"593\":1}}],[\"remove\",{\"1\":{\"52\":1,\"682\":1,\"827\":1}}],[\"remove仅可以删除包\",{\"1\":{\"52\":1}}],[\"remove是不同的\",{\"1\":{\"52\":1}}],[\"removechoosablefilefilter\",{\"1\":{\"42\":1,\"725\":1,\"732\":2}}],[\"remote\",{\"1\":{\"635\":1,\"827\":3}}],[\"rejects\",{\"1\":{\"664\":1}}],[\"reboot\",{\"1\":{\"614\":8}}],[\"registry\",{\"1\":{\"984\":3}}],[\"registration\",{\"1\":{\"866\":1,\"878\":1}}],[\"registered\",{\"0\":{\"852\":1}}],[\"regexp\",{\"0\":{\"624\":1},\"1\":{\"602\":1,\"614\":2,\"624\":6,\"689\":2}}],[\"regularly\",{\"1\":{\"78\":1}}],[\"required或章节3\",{\"1\":{\"873\":1}}],[\"required\",{\"1\":{\"867\":1,\"873\":5,\"878\":4}}],[\"request错误\",{\"1\":{\"873\":1}}],[\"request\",{\"0\":{\"881\":1,\"949\":1,\"952\":1,\"954\":1},\"1\":{\"572\":1,\"638\":3,\"689\":1,\"808\":1,\"831\":1,\"868\":4,\"869\":2,\"878\":5,\"884\":2}}],[\"req\",{\"1\":{\"572\":1}}],[\"redirect\",{\"1\":{\"873\":3,\"881\":1,\"892\":1}}],[\"redirection\",{\"1\":{\"868\":1}}],[\"redis\",{\"0\":{\"2\":1},\"1\":{\"2\":11,\"17\":1,\"18\":4,\"20\":1,\"21\":4,\"78\":1,\"637\":2}}],[\"red\",{\"1\":{\"760\":1}}],[\"redeclared\",{\"1\":{\"561\":1}}],[\"revsign\",{\"1\":{\"570\":3}}],[\"reverse\",{\"1\":{\"553\":1,\"602\":1,\"689\":5}}],[\"revoke\",{\"1\":{\"90\":1,\"154\":2,\"160\":1,\"190\":2,\"196\":1}}],[\"re\",{\"1\":{\"524\":3,\"624\":3}}],[\"re+imi\",{\"1\":{\"524\":1}}],[\"retrieve\",{\"1\":{\"704\":1}}],[\"ret++\",{\"1\":{\"573\":2}}],[\"ret\",{\"1\":{\"573\":3}}],[\"ret2\",{\"1\":{\"507\":1}}],[\"ret1\",{\"1\":{\"507\":1}}],[\"returned\",{\"1\":{\"688\":1,\"689\":3,\"709\":2}}],[\"returnstr\",{\"1\":{\"627\":6}}],[\"returns\",{\"1\":{\"574\":2,\"686\":4,\"689\":1}}],[\"returning\",{\"1\":{\"568\":3}}],[\"returnval\",{\"1\":{\"564\":2}}],[\"return\",{\"0\":{\"564\":1},\"1\":{\"314\":2,\"325\":7,\"424\":1,\"427\":2,\"442\":2,\"501\":1,\"504\":1,\"507\":4,\"509\":2,\"523\":3,\"548\":1,\"549\":9,\"550\":10,\"551\":3,\"556\":2,\"559\":1,\"561\":3,\"562\":5,\"563\":2,\"564\":10,\"565\":2,\"566\":1,\"567\":2,\"568\":7,\"570\":7,\"572\":2,\"573\":6,\"574\":11,\"577\":2,\"583\":1,\"586\":1,\"593\":1,\"599\":5,\"602\":3,\"605\":3,\"623\":1,\"624\":1,\"627\":1,\"631\":1,\"638\":1,\"642\":3,\"651\":7,\"653\":3,\"654\":1,\"655\":2,\"656\":4,\"657\":2,\"659\":1,\"660\":2,\"662\":24,\"664\":1,\"666\":1,\"670\":3,\"672\":2,\"673\":4,\"676\":9,\"677\":1,\"678\":3,\"680\":4,\"682\":7,\"686\":1,\"687\":2,\"688\":4,\"689\":8,\"692\":1,\"707\":1,\"708\":2,\"709\":3,\"765\":1,\"772\":1,\"803\":7}}],[\"relying\",{\"1\":{\"866\":1,\"868\":1}}],[\"relative\",{\"1\":{\"506\":1}}],[\"releasem\",{\"1\":{\"430\":1}}],[\"release\",{\"1\":{\"151\":1,\"187\":1,\"445\":1,\"483\":3,\"707\":1}}],[\"repository\",{\"1\":{\"635\":1,\"782\":6}}],[\"repeated\",{\"1\":{\"539\":2}}],[\"repeat\",{\"1\":{\"539\":4,\"561\":1}}],[\"repeatable\",{\"1\":{\"235\":1,\"239\":1,\"300\":1}}],[\"reply\",{\"1\":{\"566\":7}}],[\"replaceallstringfunc\",{\"1\":{\"624\":1}}],[\"replaceallstring\",{\"1\":{\"624\":1}}],[\"replace\",{\"1\":{\"537\":2}}],[\"repl\",{\"1\":{\"488\":1}}],[\"rectangle\",{\"1\":{\"640\":1,\"662\":6,\"673\":5}}],[\"rect2\",{\"1\":{\"640\":1}}],[\"rect1\",{\"1\":{\"640\":1}}],[\"recursive\",{\"1\":{\"571\":1}}],[\"recurs\",{\"1\":{\"570\":1}}],[\"received\",{\"1\":{\"709\":1}}],[\"receivechan\",{\"1\":{\"709\":2}}],[\"receiver\",{\"1\":{\"626\":3,\"651\":7,\"652\":1,\"653\":2,\"662\":7,\"694\":1}}],[\"receive\",{\"1\":{\"525\":1,\"686\":1,\"709\":2}}],[\"reciprocal\",{\"1\":{\"513\":1}}],[\"recv\",{\"1\":{\"405\":1,\"651\":6,\"652\":3,\"653\":1,\"709\":1}}],[\"recvq\",{\"1\":{\"398\":2,\"405\":4}}],[\"recvx\",{\"1\":{\"398\":1}}],[\"recommended\",{\"1\":{\"867\":2}}],[\"recovered\",{\"1\":{\"689\":2}}],[\"recoverable\",{\"1\":{\"662\":1}}],[\"recover\",{\"1\":{\"425\":2,\"455\":1,\"477\":1,\"504\":1,\"569\":1,\"687\":2,\"689\":23}}],[\"recover处理出错后的逻辑\",{\"1\":{\"321\":1}}],[\"records\",{\"1\":{\"688\":1}}],[\"record\",{\"1\":{\"235\":2,\"639\":1}}],[\"refresh\",{\"1\":{\"868\":1,\"883\":1}}],[\"reflog\",{\"1\":{\"818\":1}}],[\"reflect2\",{\"1\":{\"669\":2}}],[\"reflect1\",{\"1\":{\"668\":1}}],[\"reflection\",{\"0\":{\"662\":1},\"1\":{\"487\":1,\"561\":1,\"668\":1,\"672\":1}}],[\"reflect\",{\"1\":{\"328\":2,\"349\":2,\"623\":1,\"645\":5,\"668\":15,\"669\":7,\"670\":9}}],[\"reftag\",{\"1\":{\"645\":2}}],[\"refer\",{\"1\":{\"627\":1,\"654\":1}}],[\"reference\",{\"0\":{\"563\":1},\"1\":{\"592\":1,\"649\":1,\"868\":1}}],[\"references\",{\"1\":{\"72\":5,\"73\":4,\"90\":1}}],[\"ref\",{\"1\":{\"592\":1}}],[\"reallocate\",{\"1\":{\"593\":1}}],[\"real\",{\"1\":{\"504\":1,\"524\":1,\"569\":1}}],[\"realms\",{\"1\":{\"6\":1}}],[\"reach\",{\"1\":{\"78\":1,\"689\":1}}],[\"readonlyarray<number>\",{\"1\":{\"770\":1}}],[\"readonly\",{\"1\":{\"770\":2}}],[\"readable\",{\"1\":{\"689\":1}}],[\"readall\",{\"1\":{\"427\":2,\"682\":1}}],[\"readline\",{\"1\":{\"678\":1,\"682\":1}}],[\"readstring\",{\"1\":{\"677\":5,\"678\":4,\"679\":1}}],[\"reading\",{\"1\":{\"677\":1,\"679\":1,\"682\":3,\"688\":1}}],[\"readinput2\",{\"1\":{\"677\":1}}],[\"readinput1\",{\"1\":{\"677\":1}}],[\"readinconfig\",{\"1\":{\"21\":1}}],[\"readwrite\",{\"1\":{\"662\":3}}],[\"readdata\",{\"1\":{\"550\":1}}],[\"readrune\",{\"1\":{\"544\":1}}],[\"readbytes\",{\"1\":{\"678\":2,\"682\":1}}],[\"readbyte\",{\"1\":{\"544\":1}}],[\"readererror\",{\"1\":{\"678\":3,\"682\":2}}],[\"readerwriter\",{\"1\":{\"676\":1}}],[\"readers\",{\"1\":{\"662\":1}}],[\"reader\",{\"1\":{\"544\":2,\"662\":11,\"676\":1,\"677\":7,\"678\":1,\"679\":1,\"682\":2,\"686\":8}}],[\"readmemstats\",{\"1\":{\"661\":1}}],[\"readme\",{\"1\":{\"486\":1,\"635\":2}}],[\"ready\",{\"1\":{\"331\":1}}],[\"read\",{\"1\":{\"88\":1,\"235\":1,\"239\":3,\"300\":3,\"488\":1,\"544\":1,\"590\":1,\"658\":2,\"662\":6,\"677\":3,\"678\":5,\"682\":3,\"686\":1,\"828\":1}}],[\"readfile\",{\"1\":{\"18\":1,\"602\":3,\"678\":2}}],[\"resource\",{\"1\":{\"868\":2}}],[\"resource受保护资源\",{\"1\":{\"868\":1}}],[\"resources\",{\"1\":{\"707\":2}}],[\"reserved\",{\"1\":{\"709\":2}}],[\"reset命令的三个参数\",{\"0\":{\"820\":1}}],[\"resets\",{\"1\":{\"686\":1}}],[\"reset\",{\"1\":{\"6\":1,\"686\":3,\"819\":4,\"821\":1}}],[\"reslicing\",{\"1\":{\"592\":2}}],[\"reslice\",{\"0\":{\"592\":1}}],[\"res\",{\"1\":{\"570\":3,\"577\":5,\"705\":5}}],[\"resulting\",{\"1\":{\"686\":1}}],[\"result\",{\"1\":{\"551\":3,\"564\":1,\"570\":3,\"574\":2,\"577\":3,\"676\":6,\"686\":6,\"705\":1,\"709\":2,\"725\":2,\"727\":4,\"728\":2,\"729\":2,\"730\":2,\"731\":2,\"732\":2}}],[\"results\",{\"1\":{\"507\":1,\"638\":1,\"670\":2}}],[\"restore\",{\"1\":{\"816\":1}}],[\"rest\",{\"1\":{\"427\":2,\"709\":1}}],[\"restrict\",{\"1\":{\"72\":10,\"73\":8}}],[\"restart命令无效\",{\"1\":{\"50\":1}}],[\"restart\",{\"0\":{\"50\":1},\"1\":{\"4\":1,\"614\":2}}],[\"response示例\",{\"1\":{\"884\":1}}],[\"responses\",{\"1\":{\"868\":1,\"869\":2,\"873\":1,\"892\":1}}],[\"response\",{\"1\":{\"868\":2,\"869\":5,\"873\":4,\"887\":1,\"892\":1}}],[\"responsewriter\",{\"1\":{\"638\":3,\"682\":1,\"689\":1}}],[\"responds\",{\"1\":{\"672\":1}}],[\"resp\",{\"1\":{\"12\":4,\"427\":10}}],[\"端口被占用\",{\"1\":{\"10\":1}}],[\"端口为服务端之间的通信端口\",{\"1\":{\"4\":1}}],[\"端口\",{\"1\":{\"1\":1}}],[\"宿主\",{\"1\":{\"1\":1}}],[\"cwh3lo\",{\"1\":{\"883\":1}}],[\"czzcagrsa3f0mzpnwdfmqmf0m2jw\",{\"1\":{\"881\":1}}],[\"cb\",{\"1\":{\"877\":1,\"878\":1}}],[\"cbac\",{\"1\":{\"63\":1}}],[\"cty\",{\"1\":{\"850\":3}}],[\"ctrl+d\",{\"1\":{\"549\":1}}],[\"ctrl+z\",{\"1\":{\"549\":1}}],[\"cp\",{\"1\":{\"657\":3}}],[\"cpuprofile=progexec\",{\"1\":{\"692\":1}}],[\"cpuprofile=prof\",{\"1\":{\"691\":1}}],[\"cpuprofile\",{\"1\":{\"691\":1,\"692\":6}}],[\"cpu\",{\"1\":{\"320\":1,\"363\":1,\"408\":1,\"409\":1,\"410\":1,\"418\":1,\"420\":1,\"421\":1,\"438\":1,\"443\":1,\"449\":1,\"487\":1,\"590\":1,\"691\":2,\"692\":5,\"696\":1,\"697\":1}}],[\"cvo\",{\"1\":{\"631\":2}}],[\"cvariable\",{\"1\":{\"501\":1}}],[\"cgl\",{\"1\":{\"629\":7}}],[\"cgofiles=\",{\"1\":{\"501\":1}}],[\"cgofiles\",{\"1\":{\"501\":1}}],[\"cgo\",{\"1\":{\"481\":1,\"485\":1,\"486\":1,\"501\":10,\"502\":1}}],[\"c0\",{\"1\":{\"606\":1}}],[\"cmath\",{\"1\":{\"524\":1,\"614\":2}}],[\"cmd\",{\"1\":{\"447\":2,\"474\":1,\"481\":2,\"486\":1,\"496\":1,\"497\":1,\"501\":1,\"614\":2,\"627\":1,\"631\":1,\"689\":5}}],[\"celsius\",{\"1\":{\"660\":1,\"670\":3}}],[\"cello\",{\"1\":{\"598\":2}}],[\"cep\",{\"1\":{\"476\":2}}],[\"certs\",{\"1\":{\"6\":4}}],[\"certificates\",{\"1\":{\"6\":4}}],[\"certificate\",{\"1\":{\"6\":1}}],[\"csrf\",{\"1\":{\"873\":1}}],[\"cs\",{\"1\":{\"501\":4,\"676\":13}}],[\"cstring\",{\"1\":{\"501\":2}}],[\"csp\",{\"1\":{\"471\":1,\"694\":1}}],[\"csdn博客\",{\"1\":{\"328\":1,\"426\":1,\"430\":1}}],[\"csdn博客blog\",{\"1\":{\"325\":1}}],[\"csdn\",{\"1\":{\"325\":1,\"328\":1,\"336\":1,\"337\":1,\"355\":1,\"356\":1,\"376\":1,\"426\":1,\"430\":1,\"456\":1}}],[\"csv\",{\"1\":{\"293\":2,\"678\":4}}],[\"c++不一样\",{\"1\":{\"532\":1}}],[\"c++的同学都知道\",{\"1\":{\"445\":1}}],[\"c++的指针操作\",{\"1\":{\"321\":1}}],[\"c++呆滞的编译速度\",{\"1\":{\"320\":1}}],[\"c++\",{\"0\":{\"392\":1,\"502\":1},\"1\":{\"312\":2,\"320\":1,\"392\":6,\"447\":1,\"467\":16,\"471\":2,\"472\":2,\"473\":5,\"475\":1,\"477\":1,\"499\":9,\"502\":3,\"509\":1,\"527\":1,\"532\":1,\"547\":1,\"548\":1,\"562\":1,\"580\":1,\"585\":1,\"614\":1,\"640\":1,\"657\":1,\"659\":2,\"671\":1}}],[\"cc=a\",{\"1\":{\"306\":1}}],[\"cc\",{\"1\":{\"306\":8}}],[\"cnblogs\",{\"0\":{\"335\":1},\"1\":{\"341\":1,\"344\":1,\"394\":1}}],[\"cn\",{\"1\":{\"325\":1,\"363\":1,\"393\":1,\"397\":2,\"407\":1,\"416\":2,\"428\":2,\"454\":1,\"459\":1}}],[\"cname\",{\"1\":{\"288\":3,\"291\":5}}],[\"cnt\",{\"1\":{\"221\":4}}],[\"cnf\",{\"1\":{\"1\":3,\"2\":1}}],[\"c\",{\"0\":{\"501\":1,\"990\":1},\"1\":{\"163\":1,\"199\":1,\"226\":4,\"227\":5,\"235\":3,\"316\":2,\"320\":3,\"324\":1,\"325\":2,\"424\":4,\"427\":2,\"447\":2,\"467\":12,\"469\":2,\"471\":5,\"472\":1,\"473\":4,\"477\":1,\"478\":2,\"481\":8,\"482\":1,\"483\":3,\"484\":1,\"485\":2,\"486\":1,\"487\":1,\"499\":3,\"501\":42,\"502\":2,\"504\":2,\"506\":4,\"507\":2,\"509\":2,\"510\":2,\"511\":2,\"513\":4,\"515\":1,\"518\":5,\"520\":1,\"524\":4,\"527\":1,\"530\":4,\"531\":4,\"532\":1,\"547\":3,\"548\":1,\"551\":1,\"553\":2,\"557\":5,\"561\":1,\"562\":2,\"563\":4,\"568\":1,\"572\":4,\"578\":1,\"580\":3,\"585\":1,\"595\":6,\"598\":4,\"602\":7,\"614\":1,\"623\":1,\"639\":1,\"640\":6,\"647\":5,\"649\":9,\"655\":3,\"656\":17,\"657\":1,\"659\":4,\"660\":1,\"662\":2,\"663\":2,\"670\":3,\"671\":2,\"676\":27,\"682\":4,\"689\":2,\"690\":1,\"694\":1,\"698\":1,\"708\":4,\"709\":3}}],[\"c2\",{\"1\":{\"138\":3,\"172\":3,\"501\":1,\"513\":1}}],[\"c1\",{\"1\":{\"138\":5,\"172\":5,\"501\":2,\"513\":1,\"524\":2}}],[\"cut\",{\"1\":{\"541\":2}}],[\"customer\",{\"1\":{\"656\":10}}],[\"customers\",{\"1\":{\"128\":1,\"129\":3,\"135\":2,\"136\":1,\"138\":2,\"139\":1,\"142\":3,\"143\":3,\"144\":2,\"172\":2,\"173\":1,\"175\":3,\"176\":3,\"177\":2,\"185\":2,\"186\":1}}],[\"cust\",{\"1\":{\"128\":4,\"129\":4,\"135\":7,\"136\":3,\"138\":6,\"142\":3,\"143\":3,\"144\":8,\"172\":6,\"175\":3,\"176\":3,\"177\":8,\"185\":7,\"186\":3}}],[\"currency\",{\"1\":{\"301\":1}}],[\"current\",{\"1\":{\"220\":1,\"686\":1}}],[\"cur\",{\"1\":{\"168\":5,\"204\":5}}],[\"cursor\",{\"1\":{\"168\":8,\"204\":8}}],[\"curtime\",{\"1\":{\"148\":1,\"181\":1}}],[\"curdate\",{\"1\":{\"148\":1,\"181\":1}}],[\"curl\",{\"1\":{\"51\":2}}],[\"curve\",{\"1\":{\"34\":3}}],[\"credential\",{\"1\":{\"868\":1}}],[\"creation\",{\"1\":{\"680\":1}}],[\"create|os\",{\"1\":{\"680\":2,\"682\":1,\"686\":1}}],[\"created\",{\"1\":{\"605\":2}}],[\"createnewfile\",{\"1\":{\"42\":1}}],[\"creategraphics\",{\"1\":{\"42\":1}}],[\"create\",{\"0\":{\"91\":1},\"1\":{\"6\":2,\"35\":1,\"51\":1,\"52\":1,\"72\":6,\"73\":3,\"87\":1,\"88\":1,\"93\":1,\"98\":2,\"104\":1,\"107\":1,\"108\":1,\"112\":2,\"151\":1,\"155\":1,\"162\":2,\"163\":1,\"167\":3,\"168\":1,\"187\":1,\"191\":1,\"198\":2,\"199\":1,\"203\":3,\"204\":1,\"267\":2,\"279\":1,\"299\":1,\"676\":2,\"680\":4,\"682\":1,\"692\":3,\"709\":1,\"762\":7}}],[\"crypto\",{\"1\":{\"686\":2}}],[\"crc64\",{\"1\":{\"686\":1}}],[\"crc32\",{\"1\":{\"686\":1}}],[\"criteria\",{\"1\":{\"676\":2}}],[\"critical\",{\"1\":{\"625\":2}}],[\"crashed\",{\"1\":{\"547\":1,\"689\":1,\"700\":1}}],[\"crash\",{\"1\":{\"455\":1,\"568\":2}}],[\"crud\",{\"0\":{\"113\":1},\"1\":{\"88\":1,\"113\":1,\"251\":1}}],[\"circle\",{\"1\":{\"662\":11}}],[\"ciao\",{\"1\":{\"547\":3}}],[\"city\",{\"1\":{\"221\":6,\"515\":1,\"682\":3,\"686\":1}}],[\"ci\",{\"1\":{\"72\":30,\"73\":12,\"662\":3}}],[\"ca\",{\"1\":{\"873\":1}}],[\"camo\",{\"1\":{\"832\":4}}],[\"camera\",{\"1\":{\"657\":6}}],[\"cameraphone\",{\"1\":{\"657\":5}}],[\"caused\",{\"1\":{\"688\":1}}],[\"causes\",{\"1\":{\"508\":1}}],[\"cars\",{\"1\":{\"676\":36}}],[\"car\",{\"1\":{\"655\":9,\"662\":5,\"676\":47}}],[\"calculator\",{\"1\":{\"677\":1}}],[\"calculations\",{\"1\":{\"626\":2}}],[\"calculating\",{\"1\":{\"546\":1}}],[\"calculated\",{\"1\":{\"704\":1}}],[\"calculate\",{\"1\":{\"551\":1}}],[\"calltofunctionwhichallocateslotsofmemory\",{\"1\":{\"692\":1}}],[\"caller\",{\"1\":{\"575\":2}}],[\"called\",{\"1\":{\"568\":1,\"652\":1}}],[\"callback\",{\"1\":{\"572\":2}}],[\"calling\",{\"1\":{\"561\":5,\"568\":2,\"687\":1,\"689\":4}}],[\"calls\",{\"1\":{\"519\":1}}],[\"call\",{\"0\":{\"563\":2},\"1\":{\"163\":1,\"166\":1,\"168\":1,\"199\":1,\"202\":1,\"204\":1,\"574\":3,\"625\":1,\"657\":3,\"670\":3,\"688\":1,\"689\":4}}],[\"capital\",{\"1\":{\"609\":1}}],[\"capitals\",{\"1\":{\"609\":3}}],[\"capacity\",{\"1\":{\"585\":5,\"587\":2,\"592\":2,\"606\":1}}],[\"cap\",{\"1\":{\"353\":1,\"354\":1,\"504\":1,\"569\":3,\"585\":7,\"587\":5,\"588\":3,\"592\":4,\"593\":1,\"606\":1,\"703\":1}}],[\"captain\",{\"1\":{\"341\":1}}],[\"casting\",{\"1\":{\"523\":1}}],[\"cas\",{\"1\":{\"421\":1}}],[\"cassie\",{\"1\":{\"325\":1}}],[\"cases\",{\"1\":{\"628\":2,\"662\":2}}],[\"case\",{\"1\":{\"163\":2,\"199\":2,\"331\":4,\"389\":5,\"504\":2,\"513\":1,\"550\":1,\"551\":35,\"567\":4,\"599\":4,\"662\":12,\"663\":9,\"670\":3,\"677\":7,\"682\":6,\"684\":3,\"686\":3,\"688\":2,\"709\":1}}],[\"canset\",{\"1\":{\"669\":6}}],[\"cannot\",{\"1\":{\"52\":1,\"506\":1,\"523\":2,\"547\":2,\"598\":1,\"627\":1,\"640\":3,\"643\":1,\"651\":1,\"654\":1,\"662\":2,\"665\":1,\"671\":1,\"689\":1}}],[\"can\",{\"1\":{\"51\":1,\"485\":1,\"508\":1,\"656\":6,\"662\":1,\"679\":1,\"682\":1,\"688\":1,\"709\":4}}],[\"cat2\",{\"1\":{\"682\":3}}],[\"cat结构体本身没有name字段\",{\"1\":{\"338\":1}}],[\"category\",{\"1\":{\"299\":2}}],[\"cat\",{\"1\":{\"51\":1,\"315\":6,\"316\":4,\"338\":6,\"469\":1,\"671\":1,\"682\":19}}],[\"catch\",{\"1\":{\"42\":1,\"455\":1,\"549\":1,\"687\":2,\"689\":1}}],[\"cache目录\",{\"1\":{\"980\":1}}],[\"cached\",{\"1\":{\"814\":1}}],[\"cache\",{\"0\":{\"980\":1},\"1\":{\"4\":2,\"883\":4,\"884\":2,\"980\":2}}],[\"cycle\",{\"1\":{\"430\":3}}],[\"cycles\",{\"1\":{\"430\":4}}],[\"cy\",{\"1\":{\"35\":1}}],[\"ch72gsb320000udocl363eofy\",{\"1\":{\"854\":1}}],[\"ch1\",{\"1\":{\"699\":4,\"701\":5,\"703\":1,\"709\":3}}],[\"chris\",{\"1\":{\"581\":4,\"640\":11,\"677\":4}}],[\"chrome\",{\"1\":{\"476\":2}}],[\"child\",{\"1\":{\"655\":1,\"666\":1}}],[\"chinese\",{\"1\":{\"557\":3}}],[\"chicken\",{\"1\":{\"536\":2}}],[\"ch3\",{\"1\":{\"531\":5}}],[\"ch2\",{\"1\":{\"531\":5}}],[\"chu\",{\"1\":{\"469\":1,\"485\":1}}],[\"chs\",{\"1\":{\"427\":4}}],[\"ch\",{\"1\":{\"427\":4,\"521\":1,\"531\":12,\"536\":2,\"700\":21,\"701\":6,\"703\":1,\"704\":4,\"705\":10,\"707\":5,\"708\":11,\"709\":50}}],[\"cherimoya=2\",{\"1\":{\"513\":1}}],[\"cherimoya\",{\"1\":{\"513\":1}}],[\"chengqiuming\",{\"1\":{\"336\":1}}],[\"checkable\",{\"1\":{\"667\":1}}],[\"checked\",{\"1\":{\"662\":1}}],[\"checksum\",{\"1\":{\"686\":2}}],[\"checks\",{\"1\":{\"559\":1}}],[\"checkout\",{\"1\":{\"483\":1,\"825\":1}}],[\"check\",{\"1\":{\"112\":1,\"228\":1,\"577\":1,\"662\":1,\"689\":8,\"803\":1}}],[\"chatty\",{\"1\":{\"689\":2}}],[\"chapter\",{\"1\":{\"627\":1,\"689\":2,\"700\":1}}],[\"chapter044\",{\"1\":{\"428\":1}}],[\"chapter055\",{\"1\":{\"393\":1}}],[\"chan<\",{\"1\":{\"709\":3}}],[\"chanofchans\",{\"1\":{\"699\":1}}],[\"chan等\",{\"1\":{\"360\":1}}],[\"chan\",{\"0\":{\"405\":1},\"1\":{\"329\":2,\"345\":1,\"405\":1,\"424\":1,\"427\":3,\"504\":1,\"668\":1,\"699\":9,\"700\":4,\"701\":3,\"702\":2,\"703\":2,\"704\":1,\"705\":5,\"707\":4,\"708\":5,\"709\":24}}],[\"channels\",{\"1\":{\"625\":1,\"643\":1,\"654\":1,\"694\":1}}],[\"channel读写特性\",{\"0\":{\"400\":1}}],[\"channel中的元素类型\",{\"1\":{\"398\":1}}],[\"channel是否关闭的标志\",{\"1\":{\"398\":1}}],[\"channel分为无缓冲和有缓冲两种\",{\"1\":{\"398\":1}}],[\"channel分配内存\",{\"1\":{\"322\":1}}],[\"channel相关\",{\"0\":{\"395\":1}}],[\"channel\",{\"0\":{\"396\":1,\"397\":1,\"399\":2,\"401\":2,\"442\":1,\"693\":1},\"1\":{\"320\":1,\"331\":3,\"335\":3,\"382\":1,\"394\":1,\"400\":4,\"405\":4,\"417\":1,\"423\":2,\"439\":1,\"442\":1,\"467\":3,\"473\":1,\"487\":1,\"509\":1,\"516\":1,\"548\":1,\"563\":1,\"570\":1,\"588\":4,\"682\":1,\"693\":1,\"699\":1,\"701\":4,\"703\":2,\"705\":3,\"707\":2,\"708\":1,\"709\":12}}],[\"changes\",{\"1\":{\"566\":1}}],[\"change\",{\"1\":{\"52\":1,\"653\":4,\"686\":1}}],[\"chardata\",{\"1\":{\"686\":3}}],[\"chars\",{\"1\":{\"651\":2}}],[\"charset=utf8mb4\",{\"1\":{\"112\":1}}],[\"charset=utf8\",{\"1\":{\"56\":1}}],[\"charlie\",{\"1\":{\"611\":3,\"612\":2}}],[\"char\",{\"1\":{\"301\":3,\"531\":1,\"557\":7}}],[\"characters\",{\"1\":{\"532\":1,\"595\":1}}],[\"character\",{\"1\":{\"72\":30,\"73\":12,\"531\":1,\"536\":1,\"553\":38,\"554\":1,\"557\":41}}],[\"chain\",{\"1\":{\"51\":1,\"601\":1,\"709\":1}}],[\"chongchong\",{\"1\":{\"35\":1}}],[\"chmod\",{\"1\":{\"3\":1,\"6\":4,\"550\":1,\"627\":1}}],[\"click\",{\"1\":{\"657\":2}}],[\"client客户端\",{\"1\":{\"868\":1}}],[\"client\",{\"0\":{\"848\":1},\"1\":{\"6\":1,\"251\":2,\"252\":2,\"846\":2,\"868\":3,\"869\":1,\"873\":3,\"877\":1,\"878\":1}}],[\"clr\",{\"1\":{\"499\":1}}],[\"clean\",{\"1\":{\"449\":1}}],[\"classifier\",{\"1\":{\"662\":2}}],[\"class\",{\"0\":{\"771\":1},\"1\":{\"392\":1,\"561\":1,\"689\":2,\"772\":1,\"803\":9,\"868\":2}}],[\"claim值\",{\"1\":{\"887\":1}}],[\"claim可用于拒绝发出距离当前时间太远的令牌\",{\"1\":{\"887\":1}}],[\"claim所表示的时间之前\",{\"1\":{\"887\":1}}],[\"claim中包含的client\",{\"1\":{\"887\":1}}],[\"claim标识为受众的颁发者处注册的client\",{\"1\":{\"887\":1}}],[\"claim是否包含其在由iss\",{\"1\":{\"887\":1}}],[\"claim请求时\",{\"1\":{\"869\":1}}],[\"claims注册\",{\"1\":{\"853\":1}}],[\"claims是对某一方或某一对象的定义或断言\",{\"1\":{\"845\":1}}],[\"claims\",{\"0\":{\"852\":1,\"853\":1,\"861\":1,\"938\":1},\"1\":{\"63\":1,\"868\":2}}],[\"claim\",{\"1\":{\"39\":1,\"868\":6,\"873\":1,\"887\":2}}],[\"closure\",{\"1\":{\"574\":2,\"705\":1}}],[\"closed\",{\"1\":{\"398\":1,\"405\":1,\"709\":1}}],[\"close\",{\"1\":{\"12\":1,\"168\":2,\"204\":2,\"394\":1,\"424\":2,\"427\":2,\"504\":1,\"513\":1,\"568\":1,\"569\":1,\"658\":1,\"662\":2,\"678\":3,\"679\":1,\"680\":5,\"682\":7,\"686\":1,\"692\":1,\"709\":4}}],[\"clone\",{\"1\":{\"483\":1,\"808\":1}}],[\"cloudwego\",{\"0\":{\"460\":1},\"1\":{\"460\":1,\"461\":2,\"462\":1}}],[\"cloud\",{\"1\":{\"361\":1}}],[\"clustered\",{\"1\":{\"212\":2}}],[\"coordinates\",{\"1\":{\"640\":1}}],[\"cookie\",{\"1\":{\"28\":2,\"29\":1}}],[\"cobol\",{\"1\":{\"639\":1}}],[\"cobar\",{\"1\":{\"251\":4}}],[\"couch\",{\"1\":{\"637\":1}}],[\"couchdb\",{\"1\":{\"637\":1}}],[\"country\",{\"1\":{\"682\":3,\"686\":1}}],[\"countinto\",{\"1\":{\"662\":8}}],[\"counter++\",{\"1\":{\"427\":1}}],[\"counter\",{\"1\":{\"427\":2}}],[\"count变量\",{\"1\":{\"303\":1}}],[\"count值\",{\"1\":{\"303\":1}}],[\"count\",{\"0\":{\"256\":1,\"303\":3},\"1\":{\"135\":3,\"136\":2,\"150\":1,\"183\":1,\"185\":3,\"186\":2,\"221\":2,\"303\":8,\"364\":1,\"424\":2,\"538\":5,\"539\":2,\"550\":1,\"595\":1,\"662\":2,\"677\":1}}],[\"copied\",{\"1\":{\"593\":1}}],[\"copyright\",{\"1\":{\"709\":2}}],[\"copyfile\",{\"1\":{\"680\":2}}],[\"copy\",{\"1\":{\"382\":1,\"383\":1,\"504\":1,\"569\":1,\"580\":1,\"593\":6,\"595\":2,\"601\":1,\"602\":1,\"610\":1,\"678\":1,\"680\":2,\"709\":1}}],[\"copy部署\",{\"1\":{\"320\":1}}],[\"copyonwrite\",{\"1\":{\"234\":1}}],[\"cox\",{\"1\":{\"467\":1,\"469\":1}}],[\"coroutines\",{\"0\":{\"698\":1},\"1\":{\"698\":1}}],[\"corsmiddleware\",{\"1\":{\"456\":1}}],[\"cores\",{\"1\":{\"697\":1}}],[\"core\",{\"0\":{\"864\":1},\"1\":{\"4\":1,\"65\":1,\"866\":1},\"2\":{\"971\":1}}],[\"cos\",{\"1\":{\"149\":1,\"182\":1}}],[\"col3\",{\"1\":{\"678\":4}}],[\"col2\",{\"1\":{\"678\":4}}],[\"collector\",{\"1\":{\"832\":6}}],[\"collected\",{\"1\":{\"708\":1}}],[\"collection\",{\"1\":{\"428\":1,\"447\":1}}],[\"coll\",{\"1\":{\"557\":1}}],[\"collate\",{\"1\":{\"72\":30,\"73\":12}}],[\"col\",{\"1\":{\"150\":1,\"183\":1,\"220\":1,\"688\":2}}],[\"col1\",{\"1\":{\"147\":1,\"150\":1,\"180\":1,\"183\":1,\"678\":4}}],[\"columnnr\",{\"1\":{\"688\":1}}],[\"columnname\",{\"1\":{\"166\":2,\"202\":2}}],[\"column\",{\"1\":{\"82\":1,\"101\":1,\"102\":1,\"591\":2}}],[\"component\",{\"1\":{\"659\":1}}],[\"composite\",{\"1\":{\"639\":1,\"640\":1}}],[\"compress\",{\"0\":{\"679\":1},\"1\":{\"614\":1,\"679\":2}}],[\"compare\",{\"1\":{\"599\":2}}],[\"compute\",{\"1\":{\"705\":2}}],[\"computes\",{\"1\":{\"519\":1}}],[\"computer\",{\"1\":{\"499\":1}}],[\"complie\",{\"1\":{\"689\":1}}],[\"complicated\",{\"1\":{\"365\":1}}],[\"completes\",{\"1\":{\"705\":1}}],[\"completed\",{\"1\":{\"689\":2}}],[\"complement\",{\"1\":{\"554\":1}}],[\"complex128\",{\"1\":{\"504\":1,\"524\":2,\"668\":1}}],[\"complex64\",{\"1\":{\"504\":1,\"524\":3,\"668\":1}}],[\"complex\",{\"1\":{\"504\":1,\"524\":1,\"569\":1,\"662\":1,\"668\":1}}],[\"compiler\",{\"1\":{\"523\":1,\"662\":1,\"664\":1}}],[\"compile\",{\"1\":{\"446\":1,\"447\":2,\"559\":2,\"624\":4,\"640\":3}}],[\"comm\",{\"1\":{\"689\":1}}],[\"common\",{\"1\":{\"628\":2,\"662\":2}}],[\"command\",{\"1\":{\"676\":3,\"682\":2,\"689\":8}}],[\"commands\",{\"1\":{\"628\":1}}],[\"comma\",{\"1\":{\"550\":1}}],[\"communicating\",{\"1\":{\"471\":1,\"694\":1}}],[\"committed\",{\"1\":{\"239\":1,\"300\":2}}],[\"commit\",{\"1\":{\"89\":1,\"151\":3,\"187\":3,\"230\":1,\"236\":1,\"300\":2,\"635\":1,\"808\":1,\"815\":2,\"817\":1}}],[\"comment=\",{\"1\":{\"112\":1}}],[\"comment\",{\"1\":{\"72\":74,\"73\":35,\"98\":5,\"112\":5,\"686\":1}}],[\"combines\",{\"1\":{\"65\":1}}],[\"com\",{\"0\":{\"335\":1},\"1\":{\"21\":1,\"37\":1,\"51\":3,\"78\":1,\"115\":1,\"116\":1,\"151\":2,\"187\":2,\"205\":1,\"318\":2,\"338\":1,\"339\":1,\"341\":1,\"343\":1,\"344\":1,\"361\":5,\"394\":1,\"406\":1,\"407\":1,\"424\":1,\"454\":1,\"457\":1,\"458\":1,\"461\":1,\"469\":4,\"483\":3,\"484\":1,\"488\":1,\"491\":1,\"627\":1,\"629\":5,\"635\":2,\"636\":4,\"638\":1,\"692\":1,\"811\":3,\"828\":1,\"832\":58,\"869\":1,\"873\":2,\"881\":1,\"984\":1}}],[\"convint\",{\"1\":{\"689\":1}}],[\"convertint64toint\",{\"1\":{\"689\":1}}],[\"converting\",{\"1\":{\"689\":1}}],[\"converter\",{\"1\":{\"662\":1}}],[\"convert\",{\"1\":{\"640\":1,\"658\":1}}],[\"conversion2\",{\"1\":{\"550\":2}}],[\"conversion\",{\"1\":{\"523\":1,\"545\":1,\"550\":1,\"640\":1,\"662\":2,\"682\":1}}],[\"convenience\",{\"1\":{\"628\":2,\"662\":2}}],[\"cond\",{\"1\":{\"549\":6}}],[\"condition2\",{\"1\":{\"549\":1,\"551\":1}}],[\"condition1\",{\"1\":{\"549\":1,\"551\":1}}],[\"condition\",{\"1\":{\"549\":5,\"559\":1}}],[\"concat\",{\"1\":{\"274\":2}}],[\"concurrency\",{\"1\":{\"234\":1,\"419\":1}}],[\"consent\",{\"1\":{\"873\":1,\"878\":1}}],[\"console\",{\"1\":{\"759\":1,\"760\":2,\"763\":1,\"768\":1,\"772\":1}}],[\"constructor\",{\"1\":{\"772\":1}}],[\"constraint\",{\"1\":{\"65\":1,\"72\":5,\"73\":4,\"228\":1}}],[\"constant\",{\"1\":{\"513\":1}}],[\"const\",{\"0\":{\"753\":1},\"1\":{\"504\":1,\"506\":2,\"510\":1,\"513\":21,\"525\":2,\"547\":1,\"577\":1,\"582\":1,\"614\":3,\"668\":1,\"682\":3,\"753\":1,\"859\":8}}],[\"consumer\",{\"1\":{\"707\":1,\"708\":1}}],[\"consume\",{\"1\":{\"427\":4,\"708\":2}}],[\"consistenthashingrouter和akka\",{\"1\":{\"311\":1}}],[\"consistent\",{\"1\":{\"242\":1}}],[\"consistency\",{\"1\":{\"237\":1}}],[\"connect定义的附加参数和参数值\",{\"1\":{\"872\":1}}],[\"connect定义的扩展参数和作用域\",{\"1\":{\"868\":1}}],[\"connect以安全的方式将服务器执行的身份验证结果返回给客户端\",{\"1\":{\"869\":1}}],[\"connect执行身份验证以登录最终用户或确定最终用户已经登录\",{\"1\":{\"869\":1}}],[\"connect使用的所有oauth\",{\"1\":{\"869\":1}}],[\"connect对oauth\",{\"1\":{\"869\":1}}],[\"connect信赖方\",{\"1\":{\"868\":1}}],[\"connect提供商\",{\"1\":{\"868\":1}}],[\"connect将认证作为oauth\",{\"1\":{\"866\":1}}],[\"connect的oauth\",{\"1\":{\"866\":2}}],[\"connect的安全和隐私考虑\",{\"1\":{\"866\":1}}],[\"connect的安全和隐私注意事项\",{\"1\":{\"865\":1}}],[\"connect的核心功能\",{\"1\":{\"865\":1,\"866\":1}}],[\"connected\",{\"1\":{\"568\":2}}],[\"connecttodb\",{\"1\":{\"568\":2}}],[\"connection\",{\"1\":{\"330\":1,\"568\":1,\"686\":1,\"694\":1,\"828\":1}}],[\"connections\",{\"1\":{\"284\":1,\"686\":1}}],[\"connect\",{\"0\":{\"864\":1},\"1\":{\"90\":1,\"865\":1,\"866\":4},\"2\":{\"970\":1,\"971\":1}}],[\"content\",{\"1\":{\"686\":6,\"881\":1,\"883\":1,\"884\":1}}],[\"contents\",{\"1\":{\"682\":2}}],[\"context详解\",{\"1\":{\"394\":1}}],[\"context\",{\"0\":{\"394\":2},\"1\":{\"393\":1,\"394\":7,\"550\":1,\"868\":3}}],[\"context相关\",{\"0\":{\"393\":1}}],[\"contract\",{\"1\":{\"662\":1}}],[\"contributors\",{\"1\":{\"486\":1}}],[\"control\",{\"0\":{\"59\":1},\"1\":{\"60\":5,\"61\":3,\"62\":1,\"63\":4,\"64\":1,\"89\":1,\"90\":1,\"234\":1,\"419\":1,\"883\":2,\"884\":1}}],[\"controllers\",{\"1\":{\"456\":3}}],[\"controller\",{\"1\":{\"51\":2}}],[\"contain\",{\"1\":{\"608\":3,\"662\":2}}],[\"contains\",{\"1\":{\"365\":1,\"535\":2}}],[\"container\",{\"1\":{\"78\":1,\"497\":1,\"506\":1,\"614\":1,\"623\":1,\"651\":1,\"708\":2}}],[\"contact\",{\"1\":{\"128\":1,\"138\":2,\"144\":2,\"172\":2,\"177\":2}}],[\"continuous\",{\"1\":{\"78\":1}}],[\"continue\",{\"0\":{\"558\":1},\"1\":{\"12\":2,\"168\":1,\"204\":1,\"504\":1,\"548\":1,\"549\":1,\"558\":3,\"559\":4,\"682\":1,\"689\":1}}],[\"confidentiality\",{\"1\":{\"39\":1}}],[\"config\",{\"1\":{\"6\":13,\"18\":5,\"21\":5,\"56\":3,\"811\":4,\"828\":2,\"979\":1,\"980\":1,\"984\":2}}],[\"conf\",{\"1\":{\"1\":3,\"2\":5,\"3\":2,\"4\":3,\"18\":2,\"21\":2,\"51\":1,\"56\":4}}],[\"code向令牌端点提供授权授权\",{\"1\":{\"881\":1}}],[\"code授权代码\",{\"1\":{\"868\":1}}],[\"codesite\",{\"1\":{\"627\":4}}],[\"code=splxlobezqqybys6wxsbia\",{\"1\":{\"877\":1,\"881\":1}}],[\"code=\",{\"1\":{\"547\":1}}],[\"codedr\",{\"1\":{\"484\":1}}],[\"code`\",{\"1\":{\"72\":1}}],[\"codefixer\",{\"1\":{\"17\":1,\"20\":1}}],[\"code\",{\"1\":{\"6\":2,\"39\":1,\"72\":1,\"365\":1,\"491\":1,\"495\":1,\"507\":1,\"531\":1,\"562\":1,\"575\":4,\"627\":1,\"629\":2,\"636\":1,\"638\":1,\"682\":1,\"689\":4,\"700\":3,\"709\":2,\"868\":1,\"869\":7,\"881\":1}}],[\"co\",{\"1\":{\"6\":3}}],[\"cd\",{\"1\":{\"4\":1,\"483\":3,\"632\":2}}],[\"dns\",{\"0\":{\"832\":1}}],[\"dname\",{\"1\":{\"270\":1,\"271\":1}}],[\"d600\",{\"1\":{\"676\":1}}],[\"d0\",{\"1\":{\"606\":1}}],[\"dk\",{\"1\":{\"532\":2}}],[\"duckdance\",{\"1\":{\"671\":5}}],[\"duck\",{\"1\":{\"671\":6}}],[\"duration表示一段时间间隔\",{\"1\":{\"621\":1}}],[\"duration是time包定义的一个类型\",{\"1\":{\"621\":1}}],[\"duration\",{\"1\":{\"546\":4,\"622\":1,\"697\":1}}],[\"durability\",{\"1\":{\"237\":1}}],[\"durian=3\",{\"1\":{\"513\":1}}],[\"durian\",{\"1\":{\"513\":1}}],[\"duty\",{\"1\":{\"68\":2}}],[\"ddd\",{\"1\":{\"532\":2}}],[\"dd\",{\"1\":{\"148\":1,\"181\":1}}],[\"ddl\",{\"0\":{\"87\":1},\"1\":{\"87\":3,\"90\":1,\"91\":1,\"150\":1,\"186\":1}}],[\"dll01\",{\"1\":{\"131\":1,\"132\":2}}],[\"dcl\",{\"0\":{\"90\":1},\"1\":{\"90\":4,\"153\":1,\"189\":1}}],[\"dml\",{\"0\":{\"88\":1},\"1\":{\"88\":3,\"89\":1,\"112\":1}}],[\"dynamic\",{\"1\":{\"68\":1,\"72\":6,\"73\":3}}],[\"dstname\",{\"1\":{\"680\":2}}],[\"dst\",{\"1\":{\"593\":5,\"595\":1,\"680\":4}}],[\"dsjkdsjsこん\",{\"1\":{\"532\":1}}],[\"dsjkdsjs\",{\"1\":{\"532\":1}}],[\"dsl\",{\"1\":{\"63\":1}}],[\"dsn\",{\"1\":{\"56\":2}}],[\"drive\",{\"1\":{\"655\":1}}],[\"drivers\",{\"1\":{\"637\":1}}],[\"drinks\",{\"1\":{\"612\":1}}],[\"dry\",{\"1\":{\"561\":1}}],[\"dragonflybsd\",{\"1\":{\"482\":1}}],[\"drawpanel\",{\"1\":{\"42\":2}}],[\"drop\",{\"0\":{\"91\":1},\"1\":{\"52\":1,\"87\":1,\"94\":1,\"97\":2,\"101\":1,\"105\":1,\"109\":2,\"111\":1,\"151\":1,\"157\":1,\"162\":1,\"163\":1,\"167\":1,\"187\":1,\"193\":1,\"198\":1,\"199\":1,\"203\":1}}],[\"dosort\",{\"1\":{\"705\":4}}],[\"dosomethingelseforawhile\",{\"1\":{\"705\":2}}],[\"dosomething\",{\"1\":{\"550\":2,\"563\":2,\"705\":3,\"706\":1}}],[\"dot\",{\"1\":{\"649\":1}}],[\"doing\",{\"1\":{\"568\":2}}],[\"dodboperations\",{\"1\":{\"568\":2}}],[\"don\",{\"1\":{\"561\":1,\"684\":1}}],[\"done\",{\"1\":{\"168\":3,\"204\":3,\"394\":2,\"423\":1,\"424\":1,\"679\":1,\"680\":1,\"682\":1,\"689\":1,\"705\":5}}],[\"download\",{\"1\":{\"483\":1}}],[\"dolan\",{\"1\":{\"467\":1}}],[\"doe\",{\"1\":{\"328\":1,\"845\":1,\"849\":1,\"851\":1,\"858\":1}}],[\"doesn\",{\"1\":{\"667\":1,\"689\":2}}],[\"does\",{\"1\":{\"51\":1,\"383\":1,\"534\":2,\"608\":3,\"662\":5,\"671\":1,\"678\":1,\"682\":1,\"686\":1,\"705\":1}}],[\"dog\",{\"1\":{\"315\":9,\"316\":4,\"543\":3}}],[\"double\",{\"1\":{\"72\":1,\"392\":1,\"523\":1,\"538\":2,\"593\":1}}],[\"do\",{\"1\":{\"51\":1,\"168\":1,\"204\":1,\"267\":2,\"549\":8,\"552\":1,\"614\":1,\"625\":1,\"638\":6,\"704\":1}}],[\"doc\",{\"1\":{\"407\":1,\"481\":1,\"486\":1,\"497\":6,\"628\":4}}],[\"docs\",{\"0\":{\"79\":1,\"719\":1,\"735\":1,\"739\":1,\"743\":1,\"747\":1,\"776\":1,\"780\":1,\"785\":1,\"806\":1,\"835\":1,\"839\":1,\"972\":1,\"976\":1},\"1\":{\"46\":1,\"325\":1,\"363\":1,\"393\":1,\"397\":1,\"407\":1,\"416\":2,\"428\":2,\"454\":1,\"459\":1,\"460\":1,\"461\":1,\"462\":1},\"2\":{\"206\":1,\"718\":1,\"734\":1,\"738\":1,\"742\":1,\"746\":1,\"775\":1,\"779\":1,\"784\":1,\"792\":1,\"834\":1,\"838\":1,\"842\":1,\"863\":1,\"975\":1,\"986\":1}}],[\"docker镜像上传github\",{\"0\":{\"782\":1}}],[\"docker简介\",{\"0\":{\"781\":1}}],[\"docker了\",{\"1\":{\"51\":1}}],[\"dockerd\",{\"1\":{\"51\":1}}],[\"docker\",{\"0\":{\"780\":1},\"1\":{\"1\":8,\"2\":7,\"3\":9,\"4\":9,\"5\":3,\"6\":23,\"51\":32,\"78\":1,\"782\":15},\"2\":{\"7\":1,\"783\":1}}],[\"docker配置本地开发环境\",{\"0\":{\"0\":1}}],[\"degob\",{\"1\":{\"686\":1}}],[\"determine\",{\"1\":{\"662\":2}}],[\"details\",{\"1\":{\"325\":1,\"328\":1,\"336\":1,\"337\":1,\"355\":1,\"356\":1,\"376\":1,\"426\":1,\"430\":1,\"456\":1,\"662\":3,\"673\":6}}],[\"densematrix\",{\"1\":{\"651\":1}}],[\"destandaard\",{\"1\":{\"638\":1}}],[\"description=\",{\"1\":{\"878\":1}}],[\"description\",{\"1\":{\"688\":1,\"878\":1}}],[\"desc\",{\"1\":{\"122\":1,\"134\":2,\"135\":1,\"185\":1,\"221\":2}}],[\"derefencing\",{\"1\":{\"583\":1}}],[\"dereferenced\",{\"1\":{\"662\":1}}],[\"dereference\",{\"1\":{\"547\":1}}],[\"decode\",{\"1\":{\"686\":6,\"688\":1}}],[\"decoder\",{\"1\":{\"686\":8}}],[\"declaration\",{\"1\":{\"559\":1,\"561\":1,\"573\":1,\"662\":1}}],[\"declares\",{\"1\":{\"667\":1}}],[\"declared\",{\"1\":{\"495\":1,\"518\":1}}],[\"declare\",{\"1\":{\"163\":3,\"168\":8,\"199\":3,\"204\":8,\"762\":1}}],[\"dec\",{\"1\":{\"546\":8,\"686\":4}}],[\"dev\",{\"1\":{\"459\":1,\"483\":1,\"638\":1}}],[\"developer\",{\"1\":{\"361\":1}}],[\"debug\",{\"1\":{\"692\":3}}],[\"debug中的setmaxthreads函数\",{\"1\":{\"409\":1}}],[\"debian\",{\"1\":{\"51\":1}}],[\"deadlock\",{\"1\":{\"700\":2}}],[\"deadline\",{\"1\":{\"394\":2}}],[\"deallocate\",{\"1\":{\"168\":1,\"204\":1}}],[\"deepequal\",{\"1\":{\"349\":2}}],[\"deptno\",{\"1\":{\"270\":2,\"271\":2,\"277\":2}}],[\"dept\",{\"1\":{\"270\":3,\"271\":3}}],[\"dependency>\",{\"1\":{\"46\":1}}],[\"demo\",{\"1\":{\"221\":2}}],[\"delim\",{\"1\":{\"677\":4}}],[\"delimiter\",{\"1\":{\"163\":3,\"166\":4,\"167\":2,\"168\":2,\"199\":3,\"202\":4,\"203\":2,\"204\":2,\"677\":1}}],[\"delhi\",{\"1\":{\"608\":1}}],[\"delta\",{\"1\":{\"574\":3,\"576\":2,\"577\":2,\"611\":3,\"612\":2}}],[\"deleft\",{\"1\":{\"267\":1}}],[\"delemiter\",{\"1\":{\"166\":2,\"202\":2}}],[\"delete一个nil\",{\"1\":{\"362\":2}}],[\"delete\",{\"0\":{\"273\":1},\"1\":{\"72\":5,\"73\":4,\"88\":2,\"90\":1,\"119\":1,\"120\":1,\"128\":1,\"129\":3,\"166\":1,\"167\":1,\"202\":1,\"203\":1,\"210\":1,\"211\":1,\"234\":1,\"235\":1,\"267\":1,\"273\":2,\"608\":3}}],[\"defvalue\",{\"1\":{\"682\":1}}],[\"defering\",{\"1\":{\"568\":2}}],[\"deferred\",{\"1\":{\"568\":3}}],[\"defer1\",{\"1\":{\"325\":2}}],[\"defer2\",{\"1\":{\"325\":2}}],[\"defer可以修改函数最终返回值\",{\"1\":{\"325\":1}}],[\"defer后的操作可以理解为压入栈中\",{\"1\":{\"325\":1}}],[\"defer函数紧跟在资源打开后面\",{\"1\":{\"325\":1}}],[\"defer延迟函数\",{\"1\":{\"325\":1}}],[\"defer\",{\"0\":{\"325\":3,\"332\":1,\"425\":1,\"568\":1},\"1\":{\"325\":6,\"332\":7,\"424\":3,\"425\":2,\"427\":2,\"494\":1,\"501\":2,\"504\":1,\"568\":29,\"573\":4,\"678\":3,\"679\":1,\"680\":6,\"682\":5,\"686\":1,\"687\":1,\"689\":22,\"692\":2,\"709\":2}}],[\"defines\",{\"1\":{\"662\":1}}],[\"define\",{\"1\":{\"651\":1}}],[\"defined\",{\"1\":{\"559\":1}}],[\"definer=`root`\",{\"1\":{\"163\":1,\"199\":1}}],[\"definition\",{\"1\":{\"87\":1}}],[\"defaultclient\",{\"1\":{\"638\":3}}],[\"defaults\",{\"1\":{\"52\":1}}],[\"default\",{\"1\":{\"3\":2,\"72\":53,\"73\":23,\"98\":6,\"112\":9,\"168\":1,\"204\":1,\"331\":2,\"504\":1,\"549\":1,\"551\":10,\"567\":1,\"662\":4,\"663\":2,\"670\":1,\"676\":7,\"677\":3,\"682\":1,\"684\":1,\"686\":1,\"688\":1,\"709\":1}}],[\"diff\",{\"1\":{\"822\":3}}],[\"different\",{\"1\":{\"662\":1,\"686\":1}}],[\"divisible\",{\"1\":{\"709\":2}}],[\"dividebyzero\",{\"1\":{\"689\":1}}],[\"div\",{\"1\":{\"626\":1}}],[\"divby0\",{\"1\":{\"527\":1}}],[\"digitregexp\",{\"1\":{\"602\":4}}],[\"digit\",{\"1\":{\"549\":1}}],[\"dip\",{\"1\":{\"316\":1}}],[\"diamond\",{\"1\":{\"251\":1}}],[\"display\",{\"1\":{\"873\":1}}],[\"dispose\",{\"1\":{\"42\":1}}],[\"disambiguate\",{\"1\":{\"649\":1}}],[\"disable\",{\"1\":{\"483\":1}}],[\"distribution\",{\"1\":{\"483\":1}}],[\"distinct\",{\"1\":{\"122\":1,\"126\":1,\"150\":2,\"183\":2,\"283\":2}}],[\"discard\",{\"1\":{\"705\":1}}],[\"disconnect\",{\"1\":{\"568\":2}}],[\"disconnected\",{\"1\":{\"568\":2}}],[\"disconnectfromdb\",{\"1\":{\"568\":3}}],[\"discovery\",{\"1\":{\"6\":1,\"866\":2}}],[\"discretionary\",{\"1\":{\"60\":1,\"61\":2}}],[\"dimension\",{\"1\":{\"42\":1}}],[\"directories\",{\"1\":{\"725\":1,\"728\":2}}],[\"directorygithub\",{\"1\":{\"52\":1}}],[\"directory\",{\"1\":{\"52\":1,\"483\":1}}],[\"directive\",{\"1\":{\"686\":1}}],[\"direct\",{\"1\":{\"39\":2}}],[\"daisy\",{\"1\":{\"709\":1}}],[\"dance\",{\"1\":{\"671\":2}}],[\"darwin\",{\"1\":{\"481\":1,\"482\":1,\"633\":1}}],[\"dart\",{\"1\":{\"459\":1}}],[\"david\",{\"1\":{\"476\":1}}],[\"dayname\",{\"1\":{\"670\":2}}],[\"dayarray\",{\"1\":{\"662\":7}}],[\"daylight\",{\"1\":{\"651\":1}}],[\"days\",{\"1\":{\"220\":2,\"609\":1,\"662\":2}}],[\"dayofweek\",{\"1\":{\"148\":1,\"181\":1}}],[\"day\",{\"1\":{\"148\":1,\"181\":1,\"546\":3,\"616\":3,\"627\":1,\"660\":2,\"662\":10,\"670\":5}}],[\"dat\",{\"1\":{\"678\":3,\"680\":3}}],[\"datediff\",{\"1\":{\"148\":1,\"181\":1}}],[\"date\",{\"1\":{\"148\":3,\"181\":3,\"220\":2,\"267\":2}}],[\"datetime\",{\"1\":{\"72\":12,\"73\":6}}],[\"datatype\",{\"1\":{\"699\":1}}],[\"dataslice\",{\"1\":{\"665\":6}}],[\"datasource\",{\"1\":{\"4\":1}}],[\"dataqsiz\",{\"1\":{\"398\":1,\"405\":1}}],[\"database\",{\"0\":{\"92\":1,\"988\":1},\"1\":{\"52\":5,\"78\":1,\"82\":1,\"93\":1,\"94\":1,\"154\":2,\"190\":2,\"205\":1,\"568\":3,\"637\":1}}],[\"databases\",{\"1\":{\"52\":1,\"456\":3}}],[\"data\",{\"1\":{\"1\":2,\"2\":3,\"3\":2,\"6\":8,\"56\":1,\"87\":1,\"88\":1,\"90\":1,\"214\":1,\"215\":1,\"216\":2,\"333\":1,\"383\":4,\"384\":1,\"390\":2,\"549\":1,\"590\":1,\"593\":3,\"628\":3,\"639\":1,\"640\":4,\"662\":31,\"666\":4,\"676\":2,\"680\":1,\"682\":1,\"683\":1,\"686\":5,\"705\":2,\"706\":1,\"709\":2}}],[\"dac权限模型简介\",{\"0\":{\"61\":1}}],[\"dac\",{\"1\":{\"60\":1,\"61\":2,\"62\":1}}],[\"daemon\",{\"1\":{\"51\":1}}],[\"dashboard\",{\"1\":{\"5\":2}}],[\"dba\",{\"1\":{\"262\":1,\"284\":1}}],[\"dbms\",{\"1\":{\"83\":1,\"85\":1,\"90\":1,\"164\":1,\"167\":1,\"168\":1,\"200\":1,\"203\":1,\"204\":1}}],[\"dbname+\",{\"1\":{\"56\":1}}],[\"dbname\",{\"1\":{\"17\":2,\"18\":4,\"20\":2,\"21\":4}}],[\"db\",{\"1\":{\"4\":1,\"56\":1,\"93\":1,\"94\":1,\"95\":1,\"246\":1,\"455\":1,\"568\":6}}],[\"d\",{\"0\":{\"990\":1},\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":2,\"5\":1,\"6\":2,\"51\":1,\"52\":4,\"215\":1,\"226\":4,\"227\":4,\"481\":1,\"511\":1,\"513\":2,\"523\":4,\"528\":2,\"530\":1,\"531\":4,\"536\":4,\"538\":2,\"545\":2,\"546\":2,\"547\":4,\"550\":2,\"553\":5,\"555\":1,\"557\":6,\"558\":1,\"559\":2,\"563\":2,\"564\":3,\"565\":3,\"567\":2,\"568\":2,\"570\":5,\"572\":3,\"573\":1,\"575\":1,\"577\":2,\"580\":3,\"581\":1,\"585\":9,\"587\":4,\"591\":4,\"592\":3,\"593\":1,\"595\":1,\"598\":1,\"605\":3,\"608\":3,\"609\":2,\"616\":1,\"617\":2,\"622\":1,\"626\":2,\"627\":1,\"640\":1,\"644\":1,\"647\":4,\"649\":5,\"651\":3,\"653\":2,\"659\":1,\"661\":2,\"662\":8,\"665\":2,\"670\":3,\"677\":1,\"686\":3,\"688\":2,\"689\":3}}],[\"mkb\",{\"1\":{\"690\":1}}],[\"mkdir\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"6\":2}}],[\"m3\",{\"1\":{\"662\":1}}],[\"mf1\",{\"1\":{\"644\":5}}],[\"mf\",{\"1\":{\"605\":2}}],[\"m=\",{\"1\":{\"525\":1}}],[\"m^x\",{\"1\":{\"525\":1}}],[\"mgf1\",{\"1\":{\"858\":1}}],[\"mgo\",{\"1\":{\"637\":1}}],[\"mg\",{\"1\":{\"523\":1}}],[\"mb\",{\"1\":{\"513\":1,\"525\":2,\"692\":2}}],[\"mbd\",{\"1\":{\"361\":2}}],[\"md5\",{\"1\":{\"686\":4}}],[\"md4\",{\"1\":{\"686\":1}}],[\"md\",{\"1\":{\"486\":1,\"635\":2}}],[\"mv\",{\"1\":{\"483\":1}}],[\"mvc\",{\"1\":{\"456\":1}}],[\"mvcc\",{\"0\":{\"234\":1},\"1\":{\"234\":8,\"235\":2,\"303\":1}}],[\"msg\",{\"1\":{\"656\":7,\"688\":2}}],[\"msg=\",{\"1\":{\"547\":1}}],[\"ms\",{\"1\":{\"640\":12}}],[\"mspan\",{\"1\":{\"440\":1,\"443\":1}}],[\"msyql\",{\"1\":{\"52\":1}}],[\"mchugh\",{\"1\":{\"601\":1}}],[\"mcedit\",{\"1\":{\"491\":1}}],[\"mcentral\",{\"1\":{\"440\":3}}],[\"mcache\",{\"1\":{\"440\":2}}],[\"mheap\",{\"1\":{\"430\":1,\"440\":1,\"443\":1}}],[\"mhdr\",{\"1\":{\"383\":2}}],[\"m运行g\",{\"1\":{\"415\":1}}],[\"m根据g中的栈信息和调度信息设置运行环境\",{\"1\":{\"415\":1}}],[\"m0已经绑定了p\",{\"1\":{\"415\":1}}],[\"m0负责执行初始化操作和启动第一个g\",{\"1\":{\"414\":1}}],[\"m0中\",{\"1\":{\"414\":1}}],[\"m0是启动程序后的编号为0的主线程\",{\"1\":{\"414\":1}}],[\"m0\",{\"0\":{\"414\":1},\"1\":{\"883\":1}}],[\"m与p的数量没有绝对关系\",{\"1\":{\"409\":1}}],[\"mpi\",{\"1\":{\"667\":2}}],[\"mp2\",{\"1\":{\"607\":1}}],[\"mp1\",{\"1\":{\"607\":1}}],[\"mpa\",{\"1\":{\"605\":1}}],[\"mprof\",{\"1\":{\"430\":1,\"431\":1,\"692\":3}}],[\"mp\",{\"1\":{\"409\":1,\"430\":2}}],[\"much\",{\"1\":{\"645\":2}}],[\"mut\",{\"1\":{\"570\":1}}],[\"mutexes\",{\"1\":{\"707\":1}}],[\"mutex处于空闲状态\",{\"1\":{\"420\":1}}],[\"mutex\",{\"0\":{\"417\":1,\"419\":1,\"420\":1},\"1\":{\"398\":1,\"417\":1,\"420\":4,\"421\":1,\"427\":2,\"625\":7}}],[\"mu\",{\"1\":{\"568\":2,\"625\":3}}],[\"mustcomplie\",{\"1\":{\"689\":1}}],[\"mustcompile\",{\"1\":{\"602\":1,\"624\":1}}],[\"must\",{\"1\":{\"507\":1,\"546\":2,\"631\":1,\"638\":1,\"652\":1,\"686\":1,\"689\":4,\"867\":2}}],[\"mul\",{\"1\":{\"626\":4}}],[\"mult\",{\"1\":{\"564\":1,\"657\":1}}],[\"multiword\",{\"1\":{\"662\":1}}],[\"multidim\",{\"1\":{\"582\":1,\"591\":1}}],[\"multiplies\",{\"1\":{\"640\":1}}],[\"multiply\",{\"1\":{\"563\":3,\"566\":4}}],[\"multiply3nums\",{\"1\":{\"563\":4}}],[\"multiple\",{\"1\":{\"550\":1,\"564\":2,\"657\":2,\"686\":1}}],[\"multi\",{\"1\":{\"234\":1,\"673\":2}}],[\"muller\",{\"1\":{\"467\":1}}],[\"mubucm\",{\"1\":{\"407\":1}}],[\"m+n\",{\"1\":{\"390\":1}}],[\"mn\",{\"1\":{\"390\":1}}],[\"mname\",{\"1\":{\"288\":2,\"291\":6,\"292\":2}}],[\"m1\",{\"1\":{\"330\":2,\"362\":4}}],[\"morticia\",{\"1\":{\"684\":2}}],[\"morning\",{\"1\":{\"681\":3}}],[\"moremagic\",{\"1\":{\"657\":2}}],[\"more\",{\"1\":{\"365\":1,\"575\":1,\"670\":1,\"686\":2}}],[\"mo\",{\"1\":{\"660\":1}}],[\"mother\",{\"1\":{\"655\":1}}],[\"mon\",{\"1\":{\"651\":2,\"662\":1}}],[\"mongodb\",{\"1\":{\"637\":1}}],[\"monday\",{\"1\":{\"513\":2,\"662\":6,\"670\":1}}],[\"money\",{\"1\":{\"301\":1}}],[\"month\",{\"1\":{\"148\":1,\"181\":1,\"267\":2,\"546\":2,\"616\":3}}],[\"modf\",{\"1\":{\"523\":1}}],[\"modula\",{\"1\":{\"471\":1}}],[\"modules\",{\"0\":{\"347\":1}}],[\"modify\",{\"1\":{\"102\":1,\"346\":8}}],[\"mod\",{\"1\":{\"51\":1,\"149\":1,\"182\":1}}],[\"model\",{\"1\":{\"662\":1,\"676\":2,\"694\":1}}],[\"models\",{\"1\":{\"456\":3}}],[\"mode\",{\"1\":{\"6\":1,\"232\":1,\"688\":1,\"868\":1,\"873\":1}}],[\"mode=standalone\",{\"1\":{\"4\":2}}],[\"mm\",{\"1\":{\"148\":2,\"181\":2}}],[\"michael\",{\"1\":{\"681\":2}}],[\"missing\",{\"1\":{\"662\":1,\"671\":1}}],[\"misc\",{\"1\":{\"486\":1}}],[\"mi1\",{\"1\":{\"644\":5}}],[\"mixed\",{\"1\":{\"820\":1}}],[\"mixedcaps\",{\"1\":{\"512\":2}}],[\"mixin\",{\"1\":{\"655\":1}}],[\"mixing\",{\"1\":{\"523\":1}}],[\"mikespook\",{\"1\":{\"469\":1}}],[\"mieken\",{\"1\":{\"689\":3}}],[\"miek\",{\"1\":{\"467\":1}}],[\"middlewares\",{\"1\":{\"456\":3}}],[\"miner\",{\"1\":{\"664\":2}}],[\"minslice\",{\"1\":{\"591\":1}}],[\"minikube\",{\"0\":{\"788\":1}}],[\"minimum\",{\"1\":{\"565\":1,\"567\":4}}],[\"minint32\",{\"1\":{\"523\":1}}],[\"minmain\",{\"1\":{\"664\":1}}],[\"minmax\",{\"1\":{\"565\":4}}],[\"minmium\",{\"1\":{\"565\":1}}],[\"mingw\",{\"1\":{\"481\":1,\"485\":2,\"689\":1}}],[\"mintophash\",{\"1\":{\"365\":1}}],[\"min\",{\"1\":{\"150\":1,\"183\":1,\"565\":6,\"567\":7,\"640\":2,\"664\":1}}],[\"minutes=n\",{\"1\":{\"628\":1}}],[\"minute\",{\"1\":{\"148\":1,\"181\":1,\"546\":1}}],[\"mi\",{\"1\":{\"144\":1,\"177\":1}}],[\"mirror\",{\"1\":{\"51\":3}}],[\"merge\",{\"1\":{\"808\":1,\"826\":1,\"829\":2}}],[\"merc\",{\"1\":{\"676\":2}}],[\"mercedes\",{\"1\":{\"655\":3,\"676\":1}}],[\"mercurial\",{\"1\":{\"636\":1}}],[\"meth\",{\"1\":{\"653\":3}}],[\"method4\",{\"1\":{\"655\":1}}],[\"method3\",{\"1\":{\"655\":1}}],[\"method2\",{\"1\":{\"651\":1,\"662\":1}}],[\"methodname\",{\"1\":{\"651\":2}}],[\"method\",{\"0\":{\"639\":1},\"1\":{\"590\":1,\"651\":2,\"652\":1,\"653\":1,\"654\":1,\"659\":1,\"660\":1,\"662\":6,\"667\":1,\"670\":3,\"671\":1,\"672\":1,\"686\":1,\"689\":4}}],[\"method1\",{\"1\":{\"510\":1,\"651\":3,\"652\":3,\"653\":1,\"662\":1}}],[\"methodset2\",{\"1\":{\"662\":1}}],[\"methodset1\",{\"1\":{\"653\":1,\"662\":1}}],[\"methods\",{\"1\":{\"508\":1,\"561\":1,\"651\":1,\"657\":2,\"662\":1,\"688\":1,\"689\":1}}],[\"met\",{\"1\":{\"559\":1}}],[\"meta\",{\"1\":{\"303\":1}}],[\"memprofile=progexec\",{\"1\":{\"692\":1}}],[\"memprofile\",{\"1\":{\"691\":1,\"692\":5}}],[\"memstats\",{\"1\":{\"661\":2}}],[\"memoization\",{\"1\":{\"577\":3}}],[\"memory\",{\"1\":{\"293\":1,\"547\":7,\"692\":1}}],[\"memhash\",{\"1\":{\"363\":1}}],[\"member\",{\"1\":{\"72\":1}}],[\"message\",{\"1\":{\"682\":2,\"689\":1,\"694\":1,\"763\":1,\"765\":2,\"868\":1}}],[\"messages\",{\"1\":{\"267\":2}}],[\"messagequeue\",{\"1\":{\"78\":1}}],[\"me\",{\"1\":{\"78\":1,\"638\":2,\"656\":4}}],[\"m\",{\"1\":{\"78\":1,\"214\":3,\"330\":5,\"390\":1,\"409\":9,\"410\":12,\"431\":1,\"519\":4,\"523\":5,\"536\":1,\"588\":1,\"593\":3,\"617\":4,\"635\":1,\"642\":3,\"651\":3,\"661\":3,\"668\":2,\"676\":4,\"684\":2,\"685\":2,\"815\":1}}],[\"maybe\",{\"1\":{\"761\":1}}],[\"may\",{\"1\":{\"686\":1,\"867\":1}}],[\"magnitude\",{\"1\":{\"662\":1}}],[\"magic\",{\"1\":{\"657\":7}}],[\"magic2\",{\"1\":{\"614\":2}}],[\"magic1\",{\"1\":{\"614\":2}}],[\"master\",{\"1\":{\"635\":1,\"828\":1,\"829\":2}}],[\"mason大学信息安全技术实验室\",{\"1\":{\"64\":1}}],[\"matter\",{\"1\":{\"705\":1}}],[\"matching\",{\"1\":{\"676\":2}}],[\"matchstring\",{\"1\":{\"624\":2}}],[\"match\",{\"1\":{\"624\":5}}],[\"math\",{\"1\":{\"519\":2,\"523\":5,\"528\":1,\"550\":1,\"614\":8,\"626\":6,\"640\":1,\"653\":1,\"655\":2,\"662\":2,\"688\":3,\"689\":1}}],[\"matrix\",{\"1\":{\"61\":1,\"642\":9,\"651\":4}}],[\"male\",{\"1\":{\"513\":1}}],[\"mallocgc\",{\"1\":{\"390\":2,\"692\":1}}],[\"ma\",{\"1\":{\"361\":4}}],[\"makeaddsuffix\",{\"1\":{\"574\":3}}],[\"makefile\",{\"1\":{\"501\":2,\"627\":2,\"631\":6,\"633\":1,\"635\":1,\"636\":1,\"689\":1}}],[\"makemap\",{\"1\":{\"370\":2}}],[\"makesortedappender\",{\"1\":{\"676\":4}}],[\"makesomedna\",{\"1\":{\"316\":7}}],[\"makes\",{\"1\":{\"365\":1}}],[\"make返回变量本身\",{\"1\":{\"322\":1}}],[\"make给切片\",{\"1\":{\"322\":1}}],[\"make\",{\"0\":{\"322\":1,\"587\":1,\"588\":1,\"604\":1,\"643\":1},\"1\":{\"322\":2,\"353\":1,\"424\":1,\"427\":2,\"481\":1,\"483\":4,\"501\":3,\"504\":1,\"569\":5,\"574\":2,\"587\":12,\"588\":9,\"589\":1,\"591\":1,\"592\":2,\"593\":2,\"601\":3,\"602\":2,\"605\":7,\"606\":2,\"607\":2,\"608\":1,\"609\":1,\"610\":5,\"611\":1,\"612\":1,\"627\":3,\"631\":5,\"643\":8,\"662\":1,\"665\":1,\"666\":1,\"676\":11,\"678\":1,\"689\":4,\"699\":5,\"700\":1,\"701\":1,\"702\":1,\"703\":2,\"704\":1,\"705\":6,\"707\":2,\"708\":2,\"709\":10}}],[\"makedna\",{\"1\":{\"316\":6}}],[\"mainstart\",{\"1\":{\"689\":1}}],[\"mainstart+0xf\",{\"1\":{\"689\":1}}],[\"main+0xa5\",{\"1\":{\"689\":1}}],[\"main结束而结束\",{\"1\":{\"415\":1}}],[\"main的goroutine运行\",{\"1\":{\"415\":1}}],[\"main的goroutine执行之前都是为调度器做准备工作\",{\"1\":{\"415\":1}}],[\"main执行defer和panic处理\",{\"1\":{\"415\":1}}],[\"main退出\",{\"1\":{\"415\":1}}],[\"main创建goroutine\",{\"1\":{\"415\":1}}],[\"main会调用main\",{\"1\":{\"415\":1}}],[\"main\",{\"1\":{\"315\":1,\"316\":1,\"325\":2,\"328\":1,\"346\":8,\"350\":2,\"388\":1,\"389\":1,\"391\":1,\"415\":5,\"424\":2,\"427\":4,\"438\":2,\"447\":2,\"449\":3,\"450\":2,\"456\":3,\"483\":4,\"505\":2,\"506\":9,\"507\":11,\"508\":2,\"510\":9,\"515\":2,\"518\":1,\"519\":9,\"523\":4,\"525\":2,\"528\":2,\"530\":2,\"534\":2,\"536\":2,\"538\":2,\"539\":2,\"540\":2,\"543\":2,\"545\":2,\"546\":2,\"547\":6,\"548\":1,\"549\":4,\"550\":4,\"551\":4,\"553\":4,\"555\":2,\"557\":2,\"558\":4,\"559\":6,\"561\":8,\"562\":2,\"563\":2,\"564\":2,\"565\":4,\"566\":2,\"567\":2,\"568\":10,\"570\":4,\"572\":2,\"573\":5,\"574\":4,\"577\":2,\"580\":4,\"581\":4,\"582\":2,\"583\":2,\"585\":2,\"586\":1,\"587\":2,\"591\":4,\"592\":2,\"593\":2,\"595\":2,\"605\":4,\"608\":2,\"609\":2,\"610\":2,\"611\":2,\"612\":2,\"614\":2,\"624\":2,\"626\":2,\"627\":11,\"631\":2,\"638\":4,\"640\":6,\"642\":1,\"643\":2,\"644\":4,\"645\":2,\"647\":2,\"648\":2,\"651\":8,\"653\":4,\"654\":2,\"655\":2,\"656\":4,\"657\":4,\"660\":4,\"661\":2,\"662\":16,\"663\":6,\"666\":2,\"668\":2,\"669\":2,\"670\":9,\"671\":2,\"673\":2,\"676\":3,\"677\":6,\"678\":6,\"679\":2,\"680\":6,\"681\":2,\"682\":12,\"686\":8,\"688\":2,\"689\":17,\"692\":5,\"694\":1,\"697\":19,\"700\":4,\"701\":3,\"702\":2,\"704\":3,\"705\":2,\"707\":3,\"708\":2,\"709\":9,\"749\":1,\"750\":1}}],[\"marshalforhtml\",{\"1\":{\"682\":1}}],[\"marshal\",{\"1\":{\"682\":3,\"686\":1}}],[\"martin\",{\"1\":{\"676\":3}}],[\"marc\",{\"1\":{\"536\":4,\"681\":2}}],[\"mark\",{\"1\":{\"429\":1}}],[\"markup\",{\"1\":{\"63\":1}}],[\"mariadb\",{\"1\":{\"296\":1}}],[\"maxslice\",{\"1\":{\"591\":1}}],[\"maxint64\",{\"1\":{\"626\":3}}],[\"maxint32\",{\"1\":{\"523\":1}}],[\"maximum\",{\"1\":{\"565\":2}}],[\"maxuint8\",{\"1\":{\"523\":1}}],[\"max\",{\"1\":{\"135\":1,\"150\":1,\"183\":1,\"185\":1,\"284\":3,\"549\":3,\"565\":6,\"591\":1,\"640\":2,\"873\":3}}],[\"maven简介\",{\"0\":{\"973\":1}}],[\"maven\",{\"0\":{\"972\":1},\"1\":{\"78\":1},\"2\":{\"974\":1}}],[\"manufacturers\",{\"1\":{\"676\":8}}],[\"manufacturer\",{\"1\":{\"676\":10}}],[\"manyg\",{\"1\":{\"538\":3}}],[\"manipulation\",{\"1\":{\"88\":1}}],[\"mandatory\",{\"1\":{\"60\":1,\"62\":1}}],[\"management\",{\"1\":{\"3\":2}}],[\"mace\",{\"1\":{\"869\":1}}],[\"machine\",{\"1\":{\"638\":1}}],[\"macos\",{\"1\":{\"330\":1}}],[\"mac权限模型简介\",{\"0\":{\"62\":1}}],[\"mac\",{\"0\":{\"484\":1},\"1\":{\"39\":1,\"60\":1,\"62\":4,\"446\":1,\"469\":1,\"481\":2,\"482\":1,\"484\":3,\"489\":1,\"490\":1,\"491\":1}}],[\"map2\",{\"1\":{\"606\":1}}],[\"mapassigned\",{\"1\":{\"605\":5}}],[\"mapcreated\",{\"1\":{\"605\":11}}],[\"maplit\",{\"1\":{\"605\":9}}],[\"mapfunc\",{\"1\":{\"602\":1,\"676\":2}}],[\"map1\",{\"1\":{\"496\":2,\"605\":10,\"608\":24,\"609\":9}}],[\"maps\",{\"1\":{\"376\":1,\"516\":1,\"605\":1,\"609\":1,\"610\":1,\"643\":1,\"676\":2}}],[\"mapextra\",{\"1\":{\"364\":1}}],[\"map结果是一样的\",{\"1\":{\"362\":1}}],[\"map也不会panic\",{\"1\":{\"362\":1}}],[\"map会panic\",{\"1\":{\"362\":1}}],[\"map是nil时\",{\"1\":{\"362\":1}}],[\"map是无序的\",{\"1\":{\"358\":1}}],[\"map的内存会自动释放\",{\"1\":{\"360\":1}}],[\"map的内存不会自动释放\",{\"1\":{\"360\":1}}],[\"map的类型是map\",{\"1\":{\"358\":1}}],[\"map类型是容易发生并发访问问题的\",{\"1\":{\"358\":1}}],[\"map类型的key是不能重复的\",{\"1\":{\"337\":1}}],[\"map相关\",{\"0\":{\"357\":1}}],[\"map\",{\"0\":{\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":2,\"363\":1,\"370\":1,\"371\":1,\"425\":1,\"603\":1,\"606\":1,\"607\":1,\"610\":1,\"611\":1,\"612\":1,\"643\":1},\"1\":{\"35\":1,\"322\":1,\"329\":2,\"335\":3,\"345\":1,\"349\":1,\"358\":1,\"359\":2,\"360\":1,\"361\":1,\"362\":4,\"363\":2,\"365\":4,\"370\":2,\"382\":1,\"439\":1,\"487\":1,\"504\":1,\"509\":1,\"557\":1,\"563\":1,\"569\":3,\"572\":2,\"577\":1,\"578\":1,\"588\":4,\"602\":2,\"603\":2,\"605\":40,\"606\":10,\"607\":3,\"608\":3,\"609\":11,\"610\":19,\"611\":4,\"612\":8,\"625\":5,\"627\":1,\"643\":4,\"660\":1,\"668\":1,\"676\":17,\"682\":3,\"684\":4,\"685\":1}}],[\"myfile\",{\"1\":{\"679\":1}}],[\"myfunc\",{\"1\":{\"567\":1}}],[\"myprintinterface\",{\"1\":{\"667\":5}}],[\"mypass\",{\"1\":{\"161\":1,\"197\":1}}],[\"mypassword\",{\"1\":{\"155\":1,\"191\":1}}],[\"mystruct\",{\"1\":{\"640\":3}}],[\"mysqrt\",{\"1\":{\"550\":4,\"564\":1}}],[\"mysql面试题\",{\"0\":{\"207\":1}}],[\"mysql>\",{\"1\":{\"148\":1,\"181\":1}}],[\"mysql>flush\",{\"1\":{\"52\":1}}],[\"mysql>alter\",{\"1\":{\"52\":1}}],[\"mysql>use\",{\"1\":{\"52\":1}}],[\"mysql登录成功后\",{\"1\":{\"52\":1}}],[\"mysql服务启动时出现su\",{\"1\":{\"52\":1}}],[\"mysql\",{\"0\":{\"1\":1,\"79\":1,\"297\":1},\"1\":{\"1\":12,\"4\":5,\"17\":1,\"18\":4,\"20\":1,\"21\":4,\"52\":30,\"56\":6,\"78\":1,\"80\":1,\"141\":1,\"146\":1,\"151\":1,\"154\":3,\"166\":4,\"167\":1,\"168\":1,\"174\":1,\"179\":1,\"187\":1,\"190\":3,\"202\":4,\"203\":1,\"205\":3,\"216\":1,\"225\":1,\"226\":1,\"227\":2,\"231\":1,\"235\":4,\"246\":1,\"251\":1,\"259\":2,\"260\":1,\"261\":1,\"264\":1,\"268\":3,\"274\":2,\"284\":4,\"293\":5,\"294\":1,\"296\":8,\"297\":1,\"298\":1,\"299\":2,\"300\":2,\"301\":1,\"303\":2,\"456\":1,\"637\":1},\"2\":{\"307\":1}}],[\"mytype\",{\"1\":{\"665\":4}}],[\"mytime\",{\"1\":{\"651\":4}}],[\"mytest\",{\"1\":{\"627\":3}}],[\"mytable\",{\"1\":{\"147\":1,\"150\":1,\"180\":1,\"183\":1}}],[\"myint\",{\"1\":{\"668\":2}}],[\"myinterface\",{\"1\":{\"667\":1}}],[\"myiasm\",{\"1\":{\"294\":2}}],[\"myisam\",{\"0\":{\"294\":1},\"1\":{\"224\":1,\"261\":1,\"293\":1,\"294\":3,\"303\":3}}],[\"mycat\",{\"1\":{\"251\":1,\"252\":4}}],[\"myuser\",{\"1\":{\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1}}],[\"mybatis\",{\"1\":{\"78\":1}}],[\"my\",{\"1\":{\"1\":3,\"628\":1,\"763\":1}}],[\"p6q\",{\"1\":{\"883\":1}}],[\"p146waj8ihehcwl7f09jdijmbqkvpeb2t9cj\",{\"1\":{\"883\":1}}],[\"p1\",{\"1\":{\"770\":1}}],[\"p123456\",{\"1\":{\"52\":1}}],[\"p12\",{\"1\":{\"6\":4}}],[\"philip\",{\"1\":{\"677\":4}}],[\"phone\",{\"1\":{\"657\":6}}],[\"php\",{\"1\":{\"475\":1}}],[\"p3\",{\"1\":{\"653\":4}}],[\"pgsql\",{\"1\":{\"637\":1}}],[\"pm\",{\"1\":{\"627\":1}}],[\"p2\",{\"1\":{\"574\":3}}],[\"p++\",{\"1\":{\"547\":1}}],[\"ptr2\",{\"1\":{\"547\":1}}],[\"ptr\",{\"1\":{\"547\":2,\"662\":1,\"668\":1}}],[\"pb\",{\"1\":{\"513\":1,\"525\":1}}],[\"pbac\",{\"1\":{\"63\":1}}],[\"pythagoras\",{\"1\":{\"655\":1,\"686\":2}}],[\"python\",{\"1\":{\"320\":4,\"447\":1,\"467\":2,\"469\":1,\"471\":1,\"475\":1,\"476\":1,\"478\":1,\"487\":1,\"499\":6,\"512\":1,\"515\":1,\"532\":1,\"578\":1,\"585\":1,\"603\":1,\"657\":1,\"667\":1,\"671\":2,\"672\":1,\"686\":1,\"698\":1}}],[\"python的语法使用缩进来指示代码块\",{\"1\":{\"317\":1}}],[\"python提供的库数量要大得多\",{\"1\":{\"317\":1}}],[\"python中的内存管理完全自动化并由python\",{\"1\":{\"317\":1}}],[\"python没有提供内置的并发机制\",{\"1\":{\"317\":1}}],[\"python是一种强类型语言\",{\"1\":{\"317\":1}}],[\"python是一种基于面向对象编程的多范式\",{\"1\":{\"317\":1}}],[\"python是动态类型语言\",{\"1\":{\"317\":1}}],[\"py\",{\"1\":{\"499\":3,\"638\":1}}],[\"pdf\",{\"1\":{\"490\":1}}],[\"ppid\",{\"1\":{\"689\":1,\"868\":2}}],[\"pp\",{\"1\":{\"667\":3}}],[\"ppc\",{\"1\":{\"484\":1}}],[\"pprofc++\",{\"1\":{\"692\":1}}],[\"pprof\",{\"0\":{\"692\":1},\"1\":{\"438\":1,\"692\":9}}],[\"people\",{\"1\":{\"768\":2,\"772\":1}}],[\"pending\",{\"1\":{\"513\":1}}],[\"pessimistic\",{\"1\":{\"419\":1}}],[\"perple\",{\"1\":{\"772\":1}}],[\"perm\",{\"1\":{\"688\":1}}],[\"permission`\",{\"1\":{\"72\":1}}],[\"permission\",{\"1\":{\"60\":1,\"65\":1,\"66\":1,\"72\":10}}],[\"perhaps\",{\"1\":{\"672\":1}}],[\"periinterface\",{\"1\":{\"662\":1}}],[\"perimeter\",{\"1\":{\"640\":1,\"662\":2}}],[\"pers3\",{\"1\":{\"640\":4}}],[\"pers2\",{\"1\":{\"640\":9}}],[\"pers1\",{\"1\":{\"640\":6,\"663\":4}}],[\"personally\",{\"1\":{\"868\":1}}],[\"person>\",{\"1\":{\"686\":2}}],[\"persons\",{\"1\":{\"662\":3}}],[\"person2\",{\"1\":{\"654\":4}}],[\"personex1\",{\"1\":{\"640\":1}}],[\"person\",{\"1\":{\"581\":6,\"640\":14,\"654\":10,\"657\":2,\"662\":2,\"663\":7,\"682\":1,\"686\":1}}],[\"perl\",{\"1\":{\"499\":1}}],[\"per\",{\"1\":{\"330\":1,\"694\":1}}],[\"p就会去创建或者切换另一个m\",{\"1\":{\"409\":1}}],[\"pc=0x4f3038\",{\"1\":{\"689\":1}}],[\"pcc\",{\"1\":{\"419\":1}}],[\"pc\",{\"1\":{\"348\":1}}],[\"pii\",{\"1\":{\"868\":2}}],[\"pivot\",{\"1\":{\"705\":1}}],[\"pipe\",{\"1\":{\"699\":1}}],[\"pickle\",{\"1\":{\"686\":1}}],[\"pid\",{\"1\":{\"607\":2,\"689\":5}}],[\"pixel\",{\"1\":{\"582\":2}}],[\"pike\",{\"1\":{\"467\":1,\"469\":3,\"663\":2}}],[\"pingpong\",{\"1\":{\"462\":1}}],[\"pi\",{\"1\":{\"149\":1,\"182\":1,\"513\":1,\"519\":8,\"662\":1}}],[\"p登录mysql\",{\"1\":{\"52\":1}}],[\"pump\",{\"1\":{\"701\":5,\"707\":2,\"708\":2}}],[\"puts\",{\"1\":{\"704\":1}}],[\"put\",{\"1\":{\"689\":1}}],[\"push\",{\"1\":{\"445\":1,\"635\":1,\"660\":2,\"676\":1,\"770\":1,\"782\":1,\"808\":1,\"828\":1}}],[\"public\",{\"0\":{\"853\":1},\"1\":{\"392\":1,\"506\":1,\"803\":16}}],[\"purge可以将包以及软件的配置文件全部删除\",{\"1\":{\"52\":1}}],[\"purge\",{\"1\":{\"52\":2}}],[\"pull\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":2,\"782\":2,\"808\":2,\"829\":1,\"831\":1}}],[\"popup\",{\"1\":{\"873\":1}}],[\"pop\",{\"1\":{\"562\":1,\"660\":2,\"676\":2}}],[\"posix\",{\"1\":{\"852\":2}}],[\"position\",{\"1\":{\"508\":1,\"536\":8,\"553\":38,\"557\":41,\"662\":1}}],[\"possible\",{\"1\":{\"689\":1}}],[\"possibilities\",{\"1\":{\"508\":1}}],[\"pos\",{\"1\":{\"557\":5}}],[\"post方法和表单序列化将参数发送到令牌端点\",{\"1\":{\"881\":1}}],[\"post方法\",{\"1\":{\"873\":1}}],[\"postscript\",{\"1\":{\"692\":1}}],[\"posts\",{\"1\":{\"457\":1}}],[\"postsweep\",{\"1\":{\"430\":1,\"431\":1}}],[\"postgresql\",{\"1\":{\"296\":1,\"301\":1,\"637\":1}}],[\"post\",{\"1\":{\"268\":8,\"397\":1,\"638\":2,\"881\":1}}],[\"poirier\",{\"1\":{\"485\":1}}],[\"point3\",{\"1\":{\"653\":5,\"657\":1,\"662\":1}}],[\"pointer+2\",{\"1\":{\"547\":1}}],[\"pointer\",{\"0\":{\"351\":1},\"1\":{\"351\":6,\"364\":2,\"365\":1,\"383\":2,\"398\":1,\"501\":2,\"547\":8,\"580\":2,\"581\":1,\"583\":1,\"640\":1,\"653\":2,\"662\":4,\"663\":2,\"673\":1}}],[\"point\",{\"1\":{\"333\":1,\"531\":1,\"640\":6,\"653\":1,\"655\":5,\"657\":3,\"662\":3,\"667\":4,\"770\":2}}],[\"powerpc\",{\"1\":{\"484\":2}}],[\"powershell\",{\"1\":{\"51\":1}}],[\"pool\",{\"1\":{\"424\":3,\"426\":1}}],[\"poly2\",{\"1\":{\"662\":1}}],[\"poly\",{\"1\":{\"662\":2,\"673\":3}}],[\"polar\",{\"1\":{\"640\":1,\"657\":1,\"662\":1}}],[\"poll\",{\"1\":{\"331\":1}}],[\"policy\",{\"1\":{\"63\":1}}],[\"porting\",{\"1\":{\"482\":1}}],[\"port\",{\"1\":{\"17\":1,\"18\":2,\"20\":1,\"21\":2}}],[\"port=3306\",{\"1\":{\"4\":1}}],[\"png\",{\"1\":{\"42\":8,\"729\":2,\"730\":2}}],[\"pkg\",{\"1\":{\"446\":3,\"449\":1,\"450\":3,\"482\":1,\"483\":1,\"501\":1,\"506\":4,\"627\":2,\"629\":1,\"631\":3,\"632\":1,\"638\":1,\"678\":1,\"689\":15}}],[\"pkgpath\",{\"1\":{\"383\":2}}],[\"pkcs1\",{\"1\":{\"34\":3,\"858\":1}}],[\"pki1\",{\"1\":{\"6\":1}}],[\"pki\",{\"1\":{\"6\":1}}],[\"pragma\",{\"1\":{\"883\":2,\"884\":1}}],[\"pr\",{\"1\":{\"640\":2}}],[\"pretty\",{\"1\":{\"854\":1}}],[\"pretty=oneline\",{\"1\":{\"818\":1}}],[\"previous\",{\"1\":{\"561\":1}}],[\"precipitated\",{\"1\":{\"689\":1}}],[\"precise\",{\"1\":{\"513\":1}}],[\"prec\",{\"1\":{\"545\":2}}],[\"presuffix\",{\"1\":{\"534\":1}}],[\"presents\",{\"1\":{\"508\":1}}],[\"preparations\",{\"1\":{\"519\":1}}],[\"prepare\",{\"1\":{\"168\":1,\"204\":1,\"676\":4}}],[\"prefix\",{\"1\":{\"534\":4,\"567\":1,\"979\":1}}],[\"pref\",{\"1\":{\"221\":1}}],[\"provider\",{\"1\":{\"866\":1,\"868\":3}}],[\"prove\",{\"1\":{\"508\":1}}],[\"property\",{\"1\":{\"869\":1}}],[\"properties文件中读取配置数据\",{\"0\":{\"19\":1}}],[\"properties\",{\"1\":{\"4\":1}}],[\"prop\",{\"1\":{\"762\":1}}],[\"protected\",{\"1\":{\"868\":1}}],[\"protect\",{\"1\":{\"689\":2}}],[\"protocal\",{\"1\":{\"637\":1}}],[\"protobuf\",{\"1\":{\"328\":1,\"462\":5}}],[\"progexec\",{\"1\":{\"690\":2,\"692\":9}}],[\"prog1\",{\"1\":{\"633\":10}}],[\"programs\",{\"1\":{\"506\":1}}],[\"program\",{\"1\":{\"495\":1,\"496\":1,\"507\":1,\"550\":1,\"568\":1,\"677\":1,\"689\":6,\"700\":1}}],[\"programming\",{\"1\":{\"469\":1,\"659\":2,\"678\":1}}],[\"programmer\",{\"1\":{\"391\":1}}],[\"prompt\",{\"1\":{\"549\":5,\"873\":1}}],[\"prof\",{\"1\":{\"691\":1,\"692\":2}}],[\"profile\",{\"1\":{\"483\":1,\"631\":1,\"632\":1,\"692\":5}}],[\"professional\",{\"1\":{\"78\":1}}],[\"proxy\",{\"1\":{\"251\":3,\"252\":2}}],[\"procattr\",{\"1\":{\"689\":4}}],[\"procinst\",{\"1\":{\"686\":1}}],[\"processchannel\",{\"1\":{\"709\":2}}],[\"processed\",{\"1\":{\"682\":1}}],[\"processedflag\",{\"1\":{\"682\":3}}],[\"processes\",{\"1\":{\"471\":1,\"686\":1,\"689\":1,\"694\":1,\"709\":1}}],[\"process\",{\"1\":{\"424\":1,\"547\":1,\"549\":2,\"662\":1,\"676\":14,\"682\":1,\"687\":1,\"689\":6,\"709\":4}}],[\"processing\",{\"1\":{\"237\":1,\"709\":1}}],[\"procedures\",{\"1\":{\"508\":1}}],[\"procedure\",{\"1\":{\"162\":5,\"163\":2,\"168\":1,\"198\":5,\"199\":2,\"204\":1}}],[\"proc\",{\"1\":{\"163\":1,\"199\":1,\"682\":2,\"689\":2}}],[\"produce\",{\"1\":{\"708\":2}}],[\"producer\",{\"1\":{\"707\":1,\"708\":1}}],[\"product\",{\"1\":{\"563\":2}}],[\"products2\",{\"1\":{\"678\":1}}],[\"products\",{\"1\":{\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":3,\"131\":2,\"132\":3,\"133\":2,\"134\":1,\"139\":1,\"140\":2,\"171\":2,\"173\":1,\"678\":3}}],[\"prod\",{\"1\":{\"123\":1,\"124\":3,\"128\":1,\"131\":1,\"132\":8,\"133\":8,\"134\":2,\"140\":2,\"171\":2}}],[\"primes\",{\"1\":{\"709\":3}}],[\"prime\",{\"1\":{\"709\":17}}],[\"primary\",{\"1\":{\"72\":6,\"73\":3,\"82\":1,\"110\":1,\"111\":1,\"112\":2,\"212\":1,\"228\":1}}],[\"price\",{\"1\":{\"124\":1,\"131\":1,\"132\":4,\"133\":2,\"134\":1,\"140\":1,\"171\":1,\"217\":1,\"662\":2}}],[\"privileges\",{\"1\":{\"52\":2,\"156\":1,\"192\":1}}],[\"privatekey\",{\"1\":{\"859\":1}}],[\"private\",{\"0\":{\"853\":1},\"1\":{\"42\":1,\"392\":1,\"506\":1,\"682\":2,\"686\":1,\"803\":15}}],[\"printing\",{\"1\":{\"689\":5}}],[\"printpatherror\",{\"1\":{\"688\":1}}],[\"printparseerror\",{\"1\":{\"688\":1}}],[\"printdefaults\",{\"1\":{\"682\":2}}],[\"printer\",{\"1\":{\"662\":1}}],[\"printed\",{\"1\":{\"517\":1,\"550\":1}}],[\"printheader\",{\"1\":{\"568\":1}}],[\"printvalues\",{\"1\":{\"564\":3}}],[\"prints\",{\"1\":{\"547\":3,\"701\":1}}],[\"printstacktrace\",{\"1\":{\"42\":1}}],[\"print\",{\"1\":{\"488\":1,\"494\":2,\"501\":2,\"504\":1,\"507\":4,\"517\":2,\"519\":7,\"558\":4,\"559\":1,\"569\":1,\"574\":3,\"575\":2,\"585\":1,\"587\":1,\"590\":1,\"592\":1,\"660\":1,\"662\":1,\"667\":5,\"670\":4,\"680\":1,\"682\":3,\"709\":1}}],[\"printfooter\",{\"1\":{\"568\":1}}],[\"printf\",{\"1\":{\"338\":1,\"388\":2,\"483\":1,\"494\":2,\"497\":2,\"508\":1,\"515\":3,\"517\":3,\"519\":1,\"523\":2,\"524\":1,\"525\":1,\"528\":3,\"530\":1,\"531\":4,\"534\":2,\"536\":8,\"538\":4,\"539\":1,\"540\":3,\"543\":5,\"545\":3,\"546\":2,\"547\":6,\"549\":7,\"550\":6,\"553\":5,\"555\":1,\"557\":6,\"558\":1,\"559\":2,\"563\":2,\"564\":1,\"565\":2,\"567\":2,\"568\":5,\"570\":4,\"572\":1,\"573\":2,\"574\":2,\"575\":1,\"576\":1,\"577\":2,\"580\":1,\"581\":1,\"583\":1,\"585\":7,\"587\":3,\"591\":4,\"592\":2,\"593\":1,\"595\":1,\"605\":4,\"608\":5,\"609\":2,\"610\":2,\"611\":2,\"612\":1,\"616\":1,\"626\":2,\"627\":4,\"640\":6,\"644\":2,\"645\":1,\"647\":5,\"651\":3,\"653\":2,\"660\":5,\"661\":2,\"662\":21,\"663\":13,\"666\":1,\"668\":1,\"670\":9,\"675\":2,\"677\":8,\"678\":3,\"680\":1,\"682\":2,\"686\":9,\"687\":2,\"688\":4,\"689\":16,\"700\":1,\"708\":1,\"709\":2}}],[\"println\",{\"1\":{\"10\":3,\"12\":7,\"18\":2,\"21\":2,\"315\":3,\"316\":2,\"325\":6,\"328\":1,\"335\":1,\"338\":1,\"346\":4,\"362\":1,\"389\":1,\"415\":1,\"424\":2,\"425\":1,\"427\":10,\"483\":1,\"494\":2,\"504\":1,\"505\":1,\"506\":1,\"507\":7,\"510\":1,\"517\":1,\"518\":2,\"528\":1,\"532\":1,\"543\":2,\"546\":9,\"550\":4,\"551\":12,\"553\":1,\"557\":7,\"559\":3,\"561\":3,\"566\":1,\"568\":17,\"569\":1,\"573\":2,\"580\":3,\"581\":1,\"593\":2,\"605\":1,\"608\":1,\"609\":1,\"611\":3,\"612\":1,\"617\":2,\"619\":1,\"620\":1,\"622\":1,\"623\":2,\"624\":3,\"631\":1,\"638\":1,\"640\":3,\"647\":1,\"648\":2,\"651\":3,\"653\":2,\"654\":1,\"655\":2,\"656\":4,\"657\":5,\"660\":2,\"662\":4,\"663\":1,\"668\":8,\"669\":7,\"670\":5,\"671\":2,\"673\":6,\"676\":4,\"677\":8,\"678\":3,\"679\":2,\"680\":1,\"681\":1,\"682\":4,\"684\":5,\"686\":2,\"688\":1,\"689\":15,\"697\":7,\"701\":2,\"702\":1,\"707\":1,\"708\":1,\"709\":4,\"725\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"803\":1}}],[\"pape\",{\"1\":{\"869\":1,\"873\":1}}],[\"pa\",{\"1\":{\"682\":2,\"686\":2}}],[\"pakin\",{\"1\":{\"659\":1}}],[\"pairwise\",{\"1\":{\"868\":1}}],[\"pairs\",{\"1\":{\"605\":1}}],[\"pair\",{\"1\":{\"603\":2,\"605\":1}}],[\"paint\",{\"1\":{\"42\":1}}],[\"pat\",{\"1\":{\"624\":5}}],[\"pattern\",{\"1\":{\"550\":2,\"624\":2}}],[\"patherror\",{\"1\":{\"688\":6}}],[\"paths\",{\"1\":{\"506\":1}}],[\"path=$path\",{\"1\":{\"483\":1}}],[\"path\",{\"1\":{\"6\":4,\"46\":1,\"515\":5,\"562\":1,\"614\":2,\"627\":1,\"628\":1,\"678\":3,\"688\":3,\"689\":1,\"725\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"732\":1,\"981\":1}}],[\"pascal\",{\"1\":{\"447\":1,\"471\":1,\"507\":1}}],[\"passing\",{\"1\":{\"694\":1}}],[\"pass++\",{\"1\":{\"662\":2}}],[\"pass\",{\"1\":{\"583\":1,\"631\":1,\"662\":6,\"689\":4}}],[\"passes\",{\"1\":{\"574\":1,\"580\":2}}],[\"password=\",{\"1\":{\"85\":2,\"118\":1}}],[\"password=123456\",{\"1\":{\"1\":1,\"4\":1}}],[\"password+\",{\"1\":{\"56\":1}}],[\"password\",{\"1\":{\"6\":1,\"17\":2,\"18\":4,\"20\":2,\"21\":4,\"52\":2,\"98\":1,\"112\":1,\"116\":1,\"161\":1,\"197\":1,\"782\":2}}],[\"pass=admin\",{\"1\":{\"3\":1}}],[\"pad\",{\"1\":{\"365\":2}}],[\"padding\",{\"1\":{\"365\":1}}],[\"paulwhw\",{\"0\":{\"335\":1}}],[\"paladinosment\",{\"1\":{\"328\":1}}],[\"paladinosment的博客\",{\"1\":{\"328\":1}}],[\"panicing\",{\"1\":{\"689\":2}}],[\"panicking\",{\"1\":{\"689\":5}}],[\"panic+0x99\",{\"1\":{\"689\":1}}],[\"panic出现的常见场景还有\",{\"1\":{\"404\":1}}],[\"panic\",{\"0\":{\"425\":1},\"1\":{\"321\":1,\"328\":1,\"335\":3,\"362\":1,\"400\":1,\"405\":3,\"425\":1,\"455\":2,\"477\":1,\"481\":1,\"494\":2,\"504\":1,\"523\":2,\"562\":1,\"569\":2,\"580\":1,\"585\":1,\"624\":1,\"643\":1,\"662\":4,\"667\":1,\"669\":1,\"670\":2,\"678\":3,\"687\":3,\"689\":57,\"700\":2,\"702\":2,\"709\":1}}],[\"paris\",{\"1\":{\"608\":3,\"609\":1}}],[\"par2\",{\"1\":{\"567\":2}}],[\"par1\",{\"1\":{\"567\":2}}],[\"parses\",{\"1\":{\"689\":1}}],[\"parseerror\",{\"1\":{\"688\":1,\"689\":6}}],[\"parsed\",{\"1\":{\"682\":1}}],[\"parser\",{\"1\":{\"682\":1}}],[\"parse\",{\"1\":{\"638\":1,\"682\":5,\"689\":19,\"692\":1,\"697\":1}}],[\"parseinlocation\",{\"1\":{\"620\":1}}],[\"parsefloat\",{\"1\":{\"545\":1,\"624\":1}}],[\"parsetime=true\",{\"1\":{\"56\":1}}],[\"parsing\",{\"1\":{\"545\":1,\"689\":10}}],[\"party\",{\"1\":{\"868\":1}}],[\"parties\",{\"1\":{\"866\":1}}],[\"part1\",{\"1\":{\"680\":1}}],[\"part\",{\"1\":{\"532\":1}}],[\"param\",{\"1\":{\"651\":4,\"662\":8}}],[\"params\",{\"1\":{\"642\":1}}],[\"param2\",{\"1\":{\"507\":1}}],[\"param1\",{\"1\":{\"507\":1,\"550\":2,\"687\":2}}],[\"parameters\",{\"1\":{\"564\":1}}],[\"parameter\",{\"1\":{\"507\":2,\"550\":1,\"561\":1,\"572\":1,\"651\":2,\"687\":1,\"868\":1}}],[\"parents\",{\"1\":{\"684\":2,\"685\":1}}],[\"parent\",{\"1\":{\"299\":1}}],[\"pack\",{\"1\":{\"644\":2}}],[\"pack2\",{\"1\":{\"506\":1}}],[\"pack1b\",{\"1\":{\"627\":1}}],[\"pack1float\",{\"1\":{\"627\":4}}],[\"pack1int\",{\"1\":{\"627\":3}}],[\"pack1\",{\"1\":{\"506\":7,\"550\":2,\"561\":2,\"627\":28,\"640\":2,\"687\":3}}],[\"packing\",{\"1\":{\"365\":1}}],[\"packet\",{\"1\":{\"284\":1}}],[\"package1\",{\"1\":{\"627\":6,\"628\":2}}],[\"packages\",{\"1\":{\"449\":2,\"481\":1,\"628\":2,\"782\":2}}],[\"package\",{\"0\":{\"613\":1},\"1\":{\"18\":1,\"21\":1,\"340\":1,\"342\":2,\"346\":2,\"415\":1,\"427\":2,\"449\":2,\"481\":1,\"483\":2,\"497\":3,\"501\":2,\"504\":1,\"505\":1,\"506\":5,\"508\":5,\"510\":2,\"515\":1,\"519\":5,\"523\":2,\"525\":1,\"528\":1,\"530\":1,\"534\":1,\"536\":1,\"538\":1,\"539\":1,\"540\":1,\"543\":1,\"545\":1,\"546\":1,\"547\":3,\"549\":2,\"550\":1,\"551\":2,\"553\":2,\"555\":1,\"557\":1,\"558\":2,\"559\":3,\"561\":1,\"563\":1,\"564\":1,\"565\":2,\"566\":1,\"567\":1,\"568\":5,\"570\":2,\"572\":1,\"573\":2,\"574\":2,\"577\":1,\"580\":2,\"581\":2,\"582\":1,\"583\":1,\"585\":1,\"587\":1,\"591\":2,\"592\":1,\"593\":1,\"595\":1,\"605\":2,\"608\":1,\"609\":1,\"610\":1,\"611\":1,\"612\":1,\"614\":1,\"624\":1,\"626\":1,\"627\":5,\"631\":5,\"638\":3,\"640\":3,\"642\":1,\"643\":1,\"644\":2,\"645\":1,\"647\":1,\"648\":1,\"651\":4,\"653\":2,\"654\":2,\"655\":1,\"656\":2,\"657\":2,\"660\":1,\"662\":8,\"663\":2,\"666\":1,\"668\":1,\"669\":1,\"670\":3,\"671\":1,\"673\":1,\"676\":1,\"677\":3,\"678\":3,\"679\":1,\"680\":3,\"681\":1,\"682\":7,\"686\":4,\"688\":2,\"689\":11,\"697\":1,\"700\":1,\"701\":1,\"702\":1,\"707\":1,\"708\":1,\"709\":4}}],[\"page\",{\"1\":{\"256\":1,\"638\":1,\"680\":2,\"873\":1}}],[\"payload和signature\",{\"1\":{\"858\":1}}],[\"payload\",{\"0\":{\"35\":1,\"851\":1},\"1\":{\"33\":1,\"35\":3,\"36\":2,\"37\":1,\"39\":1,\"849\":1,\"850\":2,\"851\":2,\"856\":1,\"859\":2}}],[\"please\",{\"1\":{\"677\":3}}],[\"plst\",{\"1\":{\"653\":4,\"662\":6}}],[\"player\",{\"1\":{\"485\":1}}],[\"playground\",{\"1\":{\"426\":1,\"469\":1}}],[\"planet\",{\"1\":{\"508\":1}}],[\"plan\",{\"1\":{\"469\":2,\"481\":2,\"482\":1}}],[\"place\",{\"1\":{\"129\":3,\"656\":4}}],[\"platform=mysql\",{\"1\":{\"4\":1}}],[\"pl\",{\"1\":{\"83\":1}}],[\"plugin\",{\"1\":{\"491\":2}}],[\"plugins\",{\"1\":{\"3\":1,\"6\":6}}],[\"plus\",{\"1\":{\"78\":1}}],[\"plc还是\",{\"1\":{\"42\":1}}],[\"plc\",{\"1\":{\"42\":3}}],[\"plc和\",{\"1\":{\"42\":1}}],[\"pseudonymous\",{\"1\":{\"868\":1}}],[\"pss\",{\"1\":{\"858\":1}}],[\"ps512\",{\"1\":{\"858\":1}}],[\"ps384\",{\"1\":{\"858\":1}}],[\"ps256\",{\"1\":{\"858\":1}}],[\"ps\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":2,\"689\":2}}],[\"p\",{\"0\":{\"335\":1,\"410\":1},\"1\":{\"1\":3,\"2\":3,\"3\":4,\"4\":8,\"5\":2,\"6\":7,\"34\":3,\"314\":4,\"315\":3,\"318\":2,\"330\":1,\"338\":1,\"341\":1,\"343\":1,\"344\":1,\"394\":1,\"406\":1,\"409\":12,\"410\":11,\"421\":1,\"449\":1,\"517\":1,\"547\":19,\"556\":2,\"588\":5,\"629\":1,\"640\":8,\"651\":1,\"653\":7,\"654\":10,\"655\":5,\"657\":1,\"659\":2,\"662\":46,\"664\":4,\"682\":2,\"686\":5,\"707\":3,\"858\":1}}],[\"拉取远程库到本地\",{\"1\":{\"808\":1}}],[\"拉取最新版镜像\",{\"1\":{\"4\":1,\"5\":1}}],[\"拉取最新版redis镜像\",{\"1\":{\"2\":1}}],[\"拉取最新版mysql镜像\",{\"1\":{\"1\":1}}],[\"拉取官方镜像\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
